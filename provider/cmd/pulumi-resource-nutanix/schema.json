{
    "name": "nutanix",
    "displayName": "Nutanix",
    "description": "A Pulumi package for creating and managing nutanix cloud resources.",
    "keywords": [
        "pulumi",
        "nutanix",
        "category/cloud"
    ],
    "homepage": "https://github.com/pierskarsenbarg/pulumi-nutanix",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`nutanix` Terraform Provider](https://github.com/terraform-providers/terraform-provider-nutanix).",
    "repository": "https://github.com/pierskarsenbarg/pulumi-nutanix",
    "logoUrl": "https://raw.githubusercontent.com/pierskarsenbarg/pulumi-nutanix/main/docs/nutanix-logo.png",
    "pluginDownloadURL": "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
    "publisher": "Piers Karsenbarg",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "PiersKarsenbarg"
        },
        "go": {
            "importBasePath": "github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pierskarsenbarg/nutanix",
            "packageDescription": "A Pulumi package for creating and managing nutanix cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-nutanix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-nutanix` repo](https://github.com/pierskarsenbarg/pulumi-nutanix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-nutanix` repo](https://github.com/terraform-providers/terraform-provider-nutanix/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/google-protobuf": "^3.15.12",
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-nutanix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-nutanix` repo](https://github.com/pierskarsenbarg/pulumi-nutanix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-nutanix` repo](https://github.com/terraform-providers/terraform-provider-nutanix/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string",
                "description": "URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an\nindividual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS\nupgrades.\n"
            },
            "foundationEndpoint": {
                "type": "string",
                "description": "endpoint for foundation VM (eg. Foundation VM IP)\n"
            },
            "foundationPort": {
                "type": "string",
                "description": "Port for foundation VM\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`\n"
            },
            "ndbEndpoint": {
                "type": "string",
                "description": "endpoint for Era VM (era ip)\n"
            },
            "ndbPassword": {
                "type": "string"
            },
            "ndbUsername": {
                "type": "string"
            },
            "password": {
                "type": "string",
                "description": "Password for provided user name.\n"
            },
            "port": {
                "type": "string",
                "description": "Port for Nutanix Prism.\n"
            },
            "proxyUrl": {
                "type": "string"
            },
            "sessionAuth": {
                "type": "boolean",
                "description": "Use session authentification instead of basic auth for each request\n"
            },
            "username": {
                "type": "string",
                "description": "User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.\n"
            },
            "waitTimeout": {
                "type": "integer",
                "description": "Set if you know that the creation o update of a resource may take long time (minutes)\n"
            }
        }
    },
    "types": {
        "nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionList:AccessControlPolicyContextFilterListEntityFilterExpressionList"
                    }
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionList:AccessControlPolicyContextFilterListScopeFilterExpressionList"
                    }
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityFilterExpressionLists",
                        "scopeFilterExpressionLists"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionList:AccessControlPolicyContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "description": "- (Optional)  The LHS of the filter expression - the entity type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- (Required) The operator in the filter expression.\n"
                },
                "rightHandSide": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide",
                    "description": "- (Required) The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "rightHandSide"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "leftHandSideEntityType",
                        "operator",
                        "rightHandSide"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories",
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "- (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "categories",
                        "collection",
                        "uuidLists"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "values"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionList:AccessControlPolicyContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "description": "- (Optional)  The LHS of the filter expression - the scope type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- (Required) The operator of the filter expression.\n"
                },
                "rightHandSide": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide",
                    "description": "- (Required) The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSide"
            ]
        },
        "nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories",
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "- (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "categories",
                        "collection",
                        "uuidLists"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "values"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ]
        },
        "nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus": {
            "properties": {
                "aggregatePercentComplete": {
                    "type": "number"
                },
                "clusterCreationStarted": {
                    "type": "boolean"
                },
                "clusterProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatusClusterProgressDetail:FoundationCentralImageClusterClusterStatusClusterProgressDetail"
                    }
                },
                "currentFoundationIp": {
                    "type": "string"
                },
                "foundationSessionId": {
                    "type": "string"
                },
                "imagingStopped": {
                    "type": "boolean"
                },
                "intentPickedUp": {
                    "type": "boolean"
                },
                "nodeProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatusNodeProgressDetail:FoundationCentralImageClusterClusterStatusNodeProgressDetail"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aggregatePercentComplete",
                        "clusterCreationStarted",
                        "clusterProgressDetails",
                        "currentFoundationIp",
                        "foundationSessionId",
                        "imagingStopped",
                        "intentPickedUp",
                        "nodeProgressDetails"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterClusterStatusClusterProgressDetail:FoundationCentralImageClusterClusterStatusClusterProgressDetail": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "Name of the cluster.\n"
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "percentComplete": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterName",
                        "messageLists",
                        "percentComplete",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterClusterStatusNodeProgressDetail:FoundationCentralImageClusterClusterStatusNodeProgressDetail": {
            "properties": {
                "imagedNodeUuid": {
                    "type": "string"
                },
                "imagingStopped": {
                    "type": "boolean"
                },
                "intentPickedUp": {
                    "type": "boolean"
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "percentComplete": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imagedNodeUuid",
                        "imagingStopped",
                        "intentPickedUp",
                        "messageLists",
                        "percentComplete",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings": {
            "properties": {
                "cvmDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cvmNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hypervisorDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hypervisorNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cvmDnsServers",
                        "cvmNtpServers",
                        "hypervisorDnsServers",
                        "hypervisorNtpServers"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfig:FoundationCentralImageClusterFoundationInitConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlock:FoundationCentralImageClusterFoundationInitConfigBlock"
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigCluster:FoundationCentralImageClusterFoundationInitConfigCluster"
                    }
                },
                "cvmGateway": {
                    "type": "string"
                },
                "cvmNetmask": {
                    "type": "string"
                },
                "dnsServers": {
                    "type": "string"
                },
                "hypervProductKey": {
                    "type": "string"
                },
                "hypervSku": {
                    "type": "string"
                },
                "hypervisorGateway": {
                    "type": "string"
                },
                "hypervisorIsoUrl": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hypervisorIsos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigHypervisorIso:FoundationCentralImageClusterFoundationInitConfigHypervisorIso"
                    }
                },
                "hypervisorNetmask": {
                    "type": "string"
                },
                "ipmiGateway": {
                    "type": "string"
                },
                "ipmiNetmask": {
                    "type": "string"
                },
                "nosPackageUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigNosPackageUrl:FoundationCentralImageClusterFoundationInitConfigNosPackageUrl"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blocks",
                        "clusters",
                        "cvmGateway",
                        "cvmNetmask",
                        "dnsServers",
                        "hypervProductKey",
                        "hypervSku",
                        "hypervisorGateway",
                        "hypervisorIsoUrl",
                        "hypervisorIsos",
                        "hypervisorNetmask",
                        "ipmiGateway",
                        "ipmiNetmask",
                        "nosPackageUrls"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlock:FoundationCentralImageClusterFoundationInitConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlockNode:FoundationCentralImageClusterFoundationInitConfigBlockNode"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockId",
                        "nodes"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlockNode:FoundationCentralImageClusterFoundationInitConfigBlockNode": {
            "properties": {
                "cvmIp": {
                    "type": "string"
                },
                "cvmVlanId": {
                    "type": "integer"
                },
                "fcImagedNodeUuid": {
                    "type": "string"
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hypervisor": {
                    "type": "string"
                },
                "hypervisorHostname": {
                    "type": "string"
                },
                "hypervisorIp": {
                    "type": "string"
                },
                "imageNow": {
                    "type": "boolean"
                },
                "ipmiIp": {
                    "type": "string"
                },
                "ipv6Address": {
                    "type": "string"
                },
                "nodePosition": {
                    "type": "string"
                },
                "nodeSerial": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cvmIp",
                        "cvmVlanId",
                        "fcImagedNodeUuid",
                        "hardwareAttributesOverride",
                        "hypervisor",
                        "hypervisorHostname",
                        "hypervisorIp",
                        "imageNow",
                        "ipmiIp",
                        "ipv6Address",
                        "nodePosition",
                        "nodeSerial"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigCluster:FoundationCentralImageClusterFoundationInitConfigCluster": {
            "properties": {
                "clusterExternalIp": {
                    "type": "string",
                    "description": "External management ip of the cluster.\n"
                },
                "clusterInitNow": {
                    "type": "boolean"
                },
                "clusterInitSuccessful": {
                    "type": "boolean"
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "Name of the cluster.\n"
                },
                "cvmDnsServers": {
                    "type": "string"
                },
                "cvmNtpServers": {
                    "type": "string"
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": "Redundancy factor of the cluster.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone to be set on the cluster.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterExternalIp",
                        "clusterInitNow",
                        "clusterInitSuccessful",
                        "clusterMembers",
                        "clusterName",
                        "cvmDnsServers",
                        "cvmNtpServers",
                        "redundancyFactor",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigHypervisorIso:FoundationCentralImageClusterFoundationInitConfigHypervisorIso": {
            "properties": {
                "hypervisorType": {
                    "type": "string"
                },
                "sha256sum": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hypervisorType",
                        "sha256sum",
                        "url"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigNosPackageUrl:FoundationCentralImageClusterFoundationInitConfigNosPackageUrl": {
            "properties": {
                "sha256sum": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sha256sum",
                        "url"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails": {
            "properties": {
                "hypervProductKey": {
                    "type": "string"
                },
                "hypervSku": {
                    "type": "string"
                },
                "sha256sum": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hypervProductKey",
                        "hypervSku",
                        "sha256sum"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList": {
            "properties": {
                "cvmGateway": {
                    "type": "string"
                },
                "cvmIp": {
                    "type": "string"
                },
                "cvmNetmask": {
                    "type": "string"
                },
                "cvmRamGb": {
                    "type": "integer"
                },
                "cvmVlanId": {
                    "type": "integer"
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "hypervisorGateway": {
                    "type": "string"
                },
                "hypervisorHostname": {
                    "type": "string"
                },
                "hypervisorIp": {
                    "type": "string"
                },
                "hypervisorNetmask": {
                    "type": "string"
                },
                "hypervisorType": {
                    "type": "string"
                },
                "imageNow": {
                    "type": "boolean"
                },
                "imagedNodeUuid": {
                    "type": "string"
                },
                "ipmiGateway": {
                    "type": "string"
                },
                "ipmiIp": {
                    "type": "string"
                },
                "ipmiNetmask": {
                    "type": "string"
                },
                "rdmaPassthrough": {
                    "type": "boolean"
                },
                "useExistingNetworkSettings": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cvmGateway",
                        "cvmIp",
                        "cvmVlanId",
                        "hardwareAttributesOverride",
                        "hypervisorGateway",
                        "hypervisorHostname",
                        "hypervisorIp",
                        "hypervisorNetmask",
                        "imageNow",
                        "imagedNodeUuid",
                        "ipmiGateway",
                        "ipmiIp"
                    ]
                }
            }
        },
        "nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "description": "- Block ID.\n",
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlockNode:FoundationImageNodesBlockNode"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodes"
            ]
        },
        "nutanix:index/FoundationImageNodesBlockNode:FoundationImageNodesBlockNode": {
            "properties": {
                "bondLacpRate": {
                    "type": "string",
                    "description": "- (Required if node is lacp configured) slow or fast if lacp if being used at the switch\n",
                    "willReplaceOnChanges": true
                },
                "bondMode": {
                    "type": "string",
                    "description": "- (Required if node is capable) dynamic if using LACP, static for LAG\n",
                    "willReplaceOnChanges": true
                },
                "bondUplinks": {
                    "type": "string",
                    "description": "- MAC Addresses of NICs in a team/bond\n",
                    "willReplaceOnChanges": true
                },
                "clusterId": {
                    "type": "string",
                    "description": "- ID of cluster.\n",
                    "willReplaceOnChanges": true
                },
                "currentCvmVlanTag": {
                    "type": "integer",
                    "description": "- Current CVM vlan tag. 0 Value with remove vlan tag.\n",
                    "willReplaceOnChanges": true
                },
                "currentNetworkInterface": {
                    "type": "string",
                    "description": "- CVM current network interface.\n",
                    "willReplaceOnChanges": true
                },
                "cvmGbRam": {
                    "type": "integer",
                    "description": "- RAM capacity of CVM in GB.\n",
                    "willReplaceOnChanges": true
                },
                "cvmIp": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cvmNumVcpus": {
                    "type": "integer",
                    "description": "- Number of CVM vcpus.\n",
                    "willReplaceOnChanges": true
                },
                "deviceHint": {
                    "type": "string",
                    "description": "- use \"vm_installer\" to enable CVM imaging from standalone.\n",
                    "willReplaceOnChanges": true
                },
                "exludeBootSerial": {
                    "type": "string",
                    "description": "- serial of boot device to be excluded (used by NX G6 platforms)\n",
                    "willReplaceOnChanges": true
                },
                "hypervisor": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "hypervisorHostname": {
                    "type": "string",
                    "description": "- (Required) Hypervisor Hostname.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorIp": {
                    "type": "string",
                    "description": "- (Required) Hypervisor IP address.\n",
                    "willReplaceOnChanges": true
                },
                "imageDelay": {
                    "type": "integer",
                    "description": "- Imaging delay.\n",
                    "willReplaceOnChanges": true
                },
                "imageNow": {
                    "type": "boolean",
                    "description": "- (Optional, Default = true) If the node should be imaged now.\n",
                    "willReplaceOnChanges": true
                },
                "imageSuccessful": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "ipmiConfigureNow": {
                    "type": "boolean",
                    "description": "- Whether IPMI should be configured.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node\n",
                    "willReplaceOnChanges": true
                },
                "ipmiIp": {
                    "type": "string",
                    "description": "- (Required) IPMI IP address.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiMac": {
                    "type": "string",
                    "description": "- IPMI MAC address.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node\n",
                    "willReplaceOnChanges": true
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or outside blocks) IPMI username\n",
                    "willReplaceOnChanges": true
                },
                "ipmiUser": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or outside blocks) IPMI password\n",
                    "willReplaceOnChanges": true
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "- (Required when device_hint = \"vm_installer\" for imaging using node's existing cvm for imaging) IPV6 address.\n",
                    "willReplaceOnChanges": true
                },
                "ipv6Interface": {
                    "type": "string",
                    "description": "- (Required when device_hint = \"vm_installer\" for imaging using node's existing cvm for imaging) ipv6 interface.\n",
                    "willReplaceOnChanges": true
                },
                "mitigateLowBootSpace": {
                    "type": "boolean",
                    "description": "- relocate bootbank files to make space for phoenix files.\n",
                    "willReplaceOnChanges": true
                },
                "nodePosition": {
                    "type": "string",
                    "description": "- (Required) Position of the node in the block.\n",
                    "willReplaceOnChanges": true
                },
                "nodeSerial": {
                    "type": "string",
                    "description": "- serial number of the node.\n",
                    "willReplaceOnChanges": true
                },
                "rdmaMacAddr": {
                    "type": "string",
                    "description": "- mac address of nic to be used for rdma\n",
                    "willReplaceOnChanges": true
                },
                "rdmaPassthrough": {
                    "type": "boolean",
                    "description": "- (Required if node is capable) passthru RDMA nic to CVM if possible, default to false\n",
                    "willReplaceOnChanges": true
                },
                "ucsmManagedMode": {
                    "type": "string",
                    "description": "- UCSM Managed mode.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmNodeSerial": {
                    "type": "string",
                    "description": "- UCSM node serial.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmParams": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesBlockNodeUcsmParams:FoundationImageNodesBlockNodeUcsmParams",
                    "description": "- Object of UCSM parameters.\n* `ucsm_params.native_vlan` :- If the vlan is native.\n* `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.\n* `ucsm_params.mac_pool` :- Mac address pool.\n* `ucsm_params.vlan_name` :- Name of vlan.\n",
                    "willReplaceOnChanges": true
                },
                "vswitches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlockNodeVswitch:FoundationImageNodesBlockNodeVswitch"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "hypervisorHostname",
                "hypervisorIp",
                "nodePosition"
            ]
        },
        "nutanix:index/FoundationImageNodesBlockNodeUcsmParams:FoundationImageNodesBlockNodeUcsmParams": {
            "properties": {
                "keepUcsmSettings": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "macPool": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "nativeVlan": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "vlanName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesBlockNodeVswitch:FoundationImageNodesBlockNodeVswitch": {
            "properties": {
                "bondMode": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "lacp": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "mtu": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "otherConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "uplinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster": {
            "properties": {
                "backplaneNetmask": {
                    "type": "string",
                    "description": "- Backplane netmask.\n",
                    "willReplaceOnChanges": true
                },
                "backplaneSubnet": {
                    "type": "string",
                    "description": "- Backplane subnet address.\n",
                    "willReplaceOnChanges": true
                },
                "backplaneVlan": {
                    "type": "string",
                    "description": "- Backplane vlan.\n",
                    "willReplaceOnChanges": true
                },
                "clusterExternalIp": {
                    "type": "string",
                    "description": "- External IP of the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "clusterInitNow": {
                    "type": "boolean",
                    "description": "- (Optional, Default = true) If cluster should be created.\n",
                    "willReplaceOnChanges": true
                },
                "clusterInitSuccessful": {
                    "type": "boolean",
                    "description": "- If cluster initialization was successful.\n",
                    "willReplaceOnChanges": true
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Required) Members in the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "- (Required) Name of the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "cvmDnsServers": {
                    "type": "string",
                    "description": "- DNS servers of CVM.\n",
                    "willReplaceOnChanges": true
                },
                "cvmNtpServers": {
                    "type": "string",
                    "description": "- NTP servers of CVM.\n",
                    "willReplaceOnChanges": true
                },
                "enableNs": {
                    "type": "boolean",
                    "description": "- If network segmentation should be enabled.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorNtpServers": {
                    "type": "string",
                    "description": "- NTP servers of hypervisor.\n",
                    "willReplaceOnChanges": true
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": "- (Required) Cluster Redundancy Factor.\n",
                    "willReplaceOnChanges": true
                },
                "singleNodeCluster": {
                    "type": "boolean",
                    "description": "- If it is a single node cluster.\n",
                    "willReplaceOnChanges": true
                },
                "timezone": {
                    "type": "string",
                    "description": "- Set timezone for every CVM\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "clusterMembers",
                "clusterName",
                "redundancyFactor"
            ]
        },
        "nutanix:index/FoundationImageNodesClusterUrl:FoundationImageNodesClusterUrl": {
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "clusterUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterName",
                        "clusterUrl"
                    ]
                }
            }
        },
        "nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata": {
            "properties": {
                "accountNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- arrya of account names\n",
                    "willReplaceOnChanges": true
                },
                "configId": {
                    "type": "string",
                    "description": "- Id of the Eos config uploaded in foundation GUI.\n",
                    "willReplaceOnChanges": true
                },
                "email": {
                    "type": "string",
                    "description": "- Email address of the user who downloaded Eos config.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings": {
            "properties": {
                "fcMetadata": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettingsFcMetadata:FoundationImageNodesFcSettingsFcMetadata",
                    "description": "- Foundation Central metadata which will be transferred to the newly imaged node.\n* `fc_metadata.fc_ip` :- IP address of foundation central.\n* `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.\n",
                    "willReplaceOnChanges": true
                },
                "foundationCentral": {
                    "type": "boolean",
                    "description": "- If this attribute is set to True, FC workflow will be invoked.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "fcMetadata",
                "foundationCentral"
            ]
        },
        "nutanix:index/FoundationImageNodesFcSettingsFcMetadata:FoundationImageNodesFcSettingsFcMetadata": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "fcIp": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "fcIp"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso": {
            "properties": {
                "esx": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoEsx:FoundationImageNodesHypervisorIsoEsx",
                    "description": "- Details of hypervisor ISO of type esx.\n"
                },
                "hyperv": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoHyperv:FoundationImageNodesHypervisorIsoHyperv",
                    "description": "- Details of hypervisor ISO of type hyperv.\n",
                    "willReplaceOnChanges": true
                },
                "kvm": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoKvm:FoundationImageNodesHypervisorIsoKvm",
                    "description": "- Details of hypervisor ISO of type kvm.\n",
                    "willReplaceOnChanges": true
                },
                "xen": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoXen:FoundationImageNodesHypervisorIsoXen",
                    "description": "- Details of hypervisor ISO of type xen.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoEsx:FoundationImageNodesHypervisorIsoEsx": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoHyperv:FoundationImageNodesHypervisorIsoHyperv": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoKvm:FoundationImageNodesHypervisorIsoKvm": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoXen:FoundationImageNodesHypervisorIsoXen": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests": {
            "properties": {
                "runNcc": {
                    "type": "boolean",
                    "description": "- Whether NCC checks should run.\n",
                    "willReplaceOnChanges": true
                },
                "runSyscheck": {
                    "type": "boolean",
                    "description": "- Whether system checks should run.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "description": "- (Optional) Block Id\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlockNode:FoundationIpmiConfigBlockNode"
                    },
                    "description": "- (Required) array of nodes for ipmi config.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodes"
            ]
        },
        "nutanix:index/FoundationIpmiConfigBlockNode:FoundationIpmiConfigBlockNode": {
            "properties": {
                "ipmiConfigureNow": {
                    "type": "boolean",
                    "description": "- (Required) Whether IPMI should be configured. Should be kept true to configure\n",
                    "willReplaceOnChanges": true
                },
                "ipmiConfigureSuccessful": {
                    "type": "boolean",
                    "description": "- Whether IPMI was successfully configured.\n"
                },
                "ipmiIp": {
                    "type": "string",
                    "description": "- IPMI IP address.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiMac": {
                    "type": "string",
                    "description": "- (Required) IPMI mac address.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiMessage": {
                    "type": "string",
                    "description": "- IPMI configuration status message if any.\n"
                }
            },
            "type": "object",
            "required": [
                "ipmiConfigureNow",
                "ipmiIp",
                "ipmiMac"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipmiConfigureNow",
                        "ipmiConfigureSuccessful",
                        "ipmiIp",
                        "ipmiMac",
                        "ipmiMessage"
                    ]
                }
            }
        },
        "nutanix:index/ImageCategory:ImageCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the image.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ImageClusterReference:ImageClusterReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the image.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ImageCurrentClusterReferenceList:ImageCurrentClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the image.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig": {
            "properties": {
                "externalIpv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "externalIpv4Address"
            ]
        },
        "nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig": {
            "properties": {
                "calicoConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterCniConfigCalicoConfig:KarbonClusterCniConfigCalicoConfig",
                    "description": "- (Optional) Configuration of the calico CNI provider.\n* `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.\n* `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.\n",
                    "willReplaceOnChanges": true
                },
                "flannelConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterCniConfigFlannelConfig:KarbonClusterCniConfigFlannelConfig"
                    },
                    "description": "- (Optional) Configuration of the flannel container network interface (CNI) provider.\n",
                    "willReplaceOnChanges": true
                },
                "nodeCidrMaskSize": {
                    "type": "integer",
                    "description": "- (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.\n"
                },
                "podIpv4Cidr": {
                    "type": "string",
                    "description": "- (Optional) CIDR for pods in the cluster.\n"
                },
                "serviceIpv4Cidr": {
                    "type": "string",
                    "description": "- (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/KarbonClusterCniConfigCalicoConfig:KarbonClusterCniConfigCalicoConfig": {
            "properties": {
                "ipPoolConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterCniConfigCalicoConfigIpPoolConfig:KarbonClusterCniConfigCalicoConfigIpPoolConfig"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/KarbonClusterCniConfigCalicoConfigIpPoolConfig:KarbonClusterCniConfigCalicoConfigIpPoolConfig": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/KarbonClusterCniConfigFlannelConfig:KarbonClusterCniConfigFlannelConfig": {
            "type": "object"
        },
        "nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool": {
            "properties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePoolAhvConfig:KarbonClusterEtcdNodePoolAhvConfig",
                    "description": "- (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.\n* `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.\n* `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.\n* `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.\n* `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.\n* `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePoolNode:KarbonClusterEtcdNodePoolNode"
                    },
                    "description": "- List of the deployed nodes in the node pool.\n* `nodes.hostname`: - Hostname of the deployed node.\n* `nodes.ipv4_address`: - IP of the deployed node.\n"
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodeOsVersion",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeOsVersion",
                        "nodes",
                        "numInstances"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterEtcdNodePoolAhvConfig:KarbonClusterEtcdNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "diskMib": {
                    "type": "integer"
                },
                "memoryMib": {
                    "type": "integer"
                },
                "networkUuid": {
                    "type": "string"
                },
                "prismElementClusterUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "networkUuid",
                "prismElementClusterUuid"
            ]
        },
        "nutanix:index/KarbonClusterEtcdNodePoolNode:KarbonClusterEtcdNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "ipv4Address"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig": {
            "properties": {
                "externalIpv4Address": {
                    "type": "string"
                },
                "masterNodesConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfigMasterNodesConfig:KarbonClusterExternalLbConfigMasterNodesConfig"
                    }
                }
            },
            "type": "object",
            "required": [
                "externalIpv4Address",
                "masterNodesConfigs"
            ]
        },
        "nutanix:index/KarbonClusterExternalLbConfigMasterNodesConfig:KarbonClusterExternalLbConfigMasterNodesConfig": {
            "properties": {
                "ipv4Address": {
                    "type": "string"
                },
                "nodePoolName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipv4Address"
            ]
        },
        "nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool": {
            "properties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePoolAhvConfig:KarbonClusterMasterNodePoolAhvConfig",
                    "description": "- (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.\n* `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.\n* `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.\n* `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.\n* `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.\n* `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePoolNode:KarbonClusterMasterNodePoolNode"
                    },
                    "description": "- List of the deployed nodes in the node pool.\n* `nodes.hostname`: - Hostname of the deployed node.\n* `nodes.ipv4_address`: - IP of the deployed node.\n"
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodeOsVersion",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeOsVersion",
                        "nodes",
                        "numInstances"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterMasterNodePoolAhvConfig:KarbonClusterMasterNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "diskMib": {
                    "type": "integer"
                },
                "memoryMib": {
                    "type": "integer"
                },
                "networkUuid": {
                    "type": "string"
                },
                "prismElementClusterUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "networkUuid",
                "prismElementClusterUuid"
            ]
        },
        "nutanix:index/KarbonClusterMasterNodePoolNode:KarbonClusterMasterNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "ipv4Address"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry": {
            "properties": {
                "registryName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "registryName"
            ]
        },
        "nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig": {
            "type": "object"
        },
        "nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name of the storage class.\n",
                    "willReplaceOnChanges": true
                },
                "reclaimPolicy": {
                    "type": "string",
                    "description": "Reclaim policy for persistent volumes provisioned using the specified storage class.\n* `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.\n* `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.\n* `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.\n* `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.\n* `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.\n* `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.\n\n**Note:** Updates to this attribute forces new resource creation.\n"
                },
                "volumesConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfigVolumesConfig:KarbonClusterStorageClassConfigVolumesConfig",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "volumesConfig"
            ]
        },
        "nutanix:index/KarbonClusterStorageClassConfigVolumesConfig:KarbonClusterStorageClassConfigVolumesConfig": {
            "properties": {
                "fileSystem": {
                    "type": "string"
                },
                "flashMode": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "prismElementClusterUuid": {
                    "type": "string"
                },
                "storageContainer": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "prismElementClusterUuid",
                "storageContainer",
                "username"
            ]
        },
        "nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool": {
            "properties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePoolAhvConfig:KarbonClusterWorkerNodePoolAhvConfig",
                    "description": "- (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.\n* `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.\n* `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.\n* `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.\n* `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.\n* `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePoolNode:KarbonClusterWorkerNodePoolNode"
                    },
                    "description": "- List of the deployed nodes in the node pool.\n* `nodes.hostname`: - Hostname of the deployed node.\n* `nodes.ipv4_address`: - IP of the deployed node.\n"
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.\n"
                }
            },
            "type": "object",
            "required": [
                "nodeOsVersion",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeOsVersion",
                        "nodes",
                        "numInstances"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterWorkerNodePoolAhvConfig:KarbonClusterWorkerNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "diskMib": {
                    "type": "integer"
                },
                "memoryMib": {
                    "type": "integer"
                },
                "networkUuid": {
                    "type": "string"
                },
                "prismElementClusterUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "networkUuid",
                "prismElementClusterUuid"
            ]
        },
        "nutanix:index/KarbonClusterWorkerNodePoolNode:KarbonClusterWorkerNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "ipv4Address"
                    ]
                }
            }
        },
        "nutanix:index/KarbonWorkerNodepoolAhvConfig:KarbonWorkerNodepoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "diskMib": {
                    "type": "integer"
                },
                "iscsiNetworkUuid": {
                    "type": "string"
                },
                "memoryMib": {
                    "type": "integer"
                },
                "networkUuid": {
                    "type": "string"
                },
                "prismElementClusterUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "networkUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iscsiNetworkUuid",
                        "networkUuid",
                        "prismElementClusterUuid"
                    ]
                }
            }
        },
        "nutanix:index/KarbonWorkerNodepoolNode:KarbonWorkerNodepoolNode": {
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "ipv4Address"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneActionargument:NdbCloneActionargument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) name of argument\n"
                },
                "value": {
                    "type": "string",
                    "description": "- (Required) value for argument\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "nutanix:index/NdbCloneDatabaseNode:NdbCloneDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string",
                    "description": "Specify if you want to create a database server. This value can be set to true or false as required.\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneDatabaseNodeInfo:NdbCloneDatabaseNodeInfo"
                    },
                    "description": "info of clone\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneDatabaseNodeProperty:NdbCloneDatabaseNodeProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneDatabaseNodeProtectionDomain:NdbCloneDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneDatabaseNodeTag:NdbCloneDatabaseNodeTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "databaseId",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "dbserver",
                        "dbserverId",
                        "description",
                        "id",
                        "infos",
                        "name",
                        "primary",
                        "properties",
                        "protectionDomainId",
                        "protectionDomains",
                        "softwareInstallationId",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneDatabaseNodeInfo:NdbCloneDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of clone\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneDatabaseNodeProperty:NdbCloneDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneDatabaseNodeProtectionDomain:NdbCloneDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneDatabaseNodeProtectionDomainProperty:NdbCloneDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of clone\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assocEntities",
                        "cloudId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eraCreated",
                        "id",
                        "name",
                        "ownerId",
                        "primaryHost",
                        "properties",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneDatabaseNodeProtectionDomainProperty:NdbCloneDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneDatabaseNodeTag:NdbCloneDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfo:NdbCloneInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfoBpgConfig:NdbCloneInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgConfigs",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfoBpgConfig:NdbCloneInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfoBpgConfigBpgDbParam:NdbCloneInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfoBpgConfigStorage:NdbCloneInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfoBpgConfigVmProperty:NdbCloneInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgDbParams",
                        "storages",
                        "vmProperties"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfoBpgConfigBpgDbParam:NdbCloneInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "effectiveCacheSize",
                        "maintenanceWorkMem",
                        "maxParallelWorkersPerGather",
                        "maxWorkerProcesses",
                        "sharedBuffers",
                        "workMem"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfoBpgConfigStorage:NdbCloneInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfoBpgConfigStorageArchiveStorage:NdbCloneInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfoBpgConfigStorageDataDisk:NdbCloneInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfoBpgConfigStorageLogDisk:NdbCloneInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "archiveStorages",
                        "dataDisks",
                        "logDisks"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfoBpgConfigStorageArchiveStorage:NdbCloneInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfoBpgConfigStorageDataDisk:NdbCloneInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfoBpgConfigStorageLogDisk:NdbCloneInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneInfoBpgConfigVmProperty:NdbCloneInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dirtyBackgroundRatio",
                        "dirtyExpireCentisecs",
                        "dirtyRatio",
                        "dirtyWritebackCentisecs",
                        "nrHugepages",
                        "overcommitMemory",
                        "swappiness"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneLcmConfig:NdbCloneLcmConfig": {
            "properties": {
                "databaseLcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneLcmConfigDatabaseLcmConfig:NdbCloneLcmConfigDatabaseLcmConfig"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbCloneLcmConfigDatabaseLcmConfig:NdbCloneLcmConfigDatabaseLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail:NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail:NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail:NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expiryDateTimezone"
            ]
        },
        "nutanix:index/NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail:NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail": {
            "properties": {
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbCloneLinkedDatabase:NdbCloneLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "database name\n"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneLinkedDatabaseInfo:NdbCloneLinkedDatabaseInfo"
                    },
                    "description": "info of clone\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id from where clone is created\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "infos",
                        "metric",
                        "name",
                        "parentDatabaseId",
                        "parentLinkedDatabaseId",
                        "snapshotId",
                        "status",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneLinkedDatabaseInfo:NdbCloneLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of clone\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneNode:NdbCloneNode": {
            "properties": {
                "computeProfileId": {
                    "type": "string",
                    "description": "specify compute profile id\n"
                },
                "dbserverId": {
                    "type": "string",
                    "description": "dberver id\n"
                },
                "networkProfileId": {
                    "type": "string",
                    "description": "specify network profile id\n"
                },
                "newDbServerTimeZone": {
                    "type": "string",
                    "description": "dbserver time zone\n"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "cluster id\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneNodeProperty:NdbCloneNodeProperty"
                    },
                    "description": "properties of vm\n"
                },
                "vmName": {
                    "type": "string",
                    "description": "name for the database server VM.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbCloneNodeProperty:NdbCloneNodeProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbClonePostgresqlInfo:NdbClonePostgresqlInfo": {
            "properties": {
                "dbPassword": {
                    "type": "string",
                    "description": "password of the postgres superuser.\n",
                    "secret": true
                },
                "dbserverDescription": {
                    "type": "string",
                    "description": "description for the dbserver.\n"
                },
                "postCloneCmd": {
                    "type": "string",
                    "description": "OS command that you want to run after the instance is created.\n"
                },
                "preCloneCmd": {
                    "type": "string",
                    "description": "OS command that you want to run before the instance is created.\n"
                },
                "vmName": {
                    "type": "string",
                    "description": "name for the database server VM.\n"
                }
            },
            "type": "object",
            "required": [
                "dbPassword",
                "vmName"
            ]
        },
        "nutanix:index/NdbCloneProperty:NdbCloneProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTag:NdbCloneTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachine:NdbCloneTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean",
                    "description": "cloned or not\n"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clone will be clustered or not\n"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string",
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineProperty:NdbCloneTimeMachineProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineSchedule:NdbCloneTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineSla:NdbCloneTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineTag:NdbCloneTimeMachineTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of clone\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "clone",
                        "clones",
                        "clustered",
                        "database",
                        "databaseId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eaStatus",
                        "id",
                        "metric",
                        "name",
                        "properties",
                        "scheduleId",
                        "schedules",
                        "scope",
                        "slaId",
                        "slaUpdateInProgress",
                        "slaUpdateMetadata",
                        "slas",
                        "sourceNxClusters",
                        "status",
                        "tags",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineProperty:NdbCloneTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineSchedule:NdbCloneTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineScheduleContinuousSchedule:NdbCloneTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineScheduleDailySchedule:NdbCloneTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineScheduleMonthlySchedule:NdbCloneTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineScheduleQuartelySchedule:NdbCloneTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineScheduleSnapshotTimeOfDay:NdbCloneTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone\n"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineScheduleWeeklySchedule:NdbCloneTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachineScheduleYearlySchedule:NdbCloneTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousSchedules",
                        "dailySchedules",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "globalPolicy",
                        "id",
                        "monthlySchedules",
                        "name",
                        "ownerId",
                        "quartelySchedules",
                        "referenceCount",
                        "snapshotTimeOfDays",
                        "startTime",
                        "systemPolicy",
                        "timeZone",
                        "uniqueName",
                        "weeklySchedules",
                        "yearlySchedules"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineScheduleContinuousSchedule:NdbCloneTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logBackupInterval",
                        "snapshotsPerDay"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineScheduleDailySchedule:NdbCloneTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineScheduleMonthlySchedule:NdbCloneTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineScheduleQuartelySchedule:NdbCloneTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "startMonth",
                        "startMonthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineScheduleSnapshotTimeOfDay:NdbCloneTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extra",
                        "hours",
                        "minutes",
                        "seconds"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineScheduleWeeklySchedule:NdbCloneTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfWeek",
                        "dayOfWeekValue",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineScheduleYearlySchedule:NdbCloneTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "month",
                        "monthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineSla:NdbCloneTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousRetention",
                        "currentActiveFrequency",
                        "dailyRetention",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "monthlyRetention",
                        "name",
                        "ownerId",
                        "pitrEnabled",
                        "quarterlyRetention",
                        "referenceCount",
                        "systemSla",
                        "uniqueName",
                        "weeklyRetention",
                        "yearlyRetention"
                    ]
                }
            }
        },
        "nutanix:index/NdbCloneTimeMachineTag:NdbCloneTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterAgentNetworkInfo:NdbClusterAgentNetworkInfo": {
            "properties": {
                "dns": {
                    "type": "string",
                    "description": "string of DNS servers(comma separted).\n"
                },
                "ntp": {
                    "type": "string",
                    "description": "string of NTP servers(comma separted).\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbClusterEntityCount:NdbClusterEntityCount": {
            "properties": {
                "dbServers": {
                    "type": "integer"
                },
                "engineCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCount:NdbClusterEntityCountEngineCount"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dbServers",
                        "engineCounts"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCount:NdbClusterEntityCountEngineCount": {
            "properties": {
                "mariadbDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountMariadbDatabase:NdbClusterEntityCountEngineCountMariadbDatabase"
                    }
                },
                "mongodbDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountMongodbDatabase:NdbClusterEntityCountEngineCountMongodbDatabase"
                    }
                },
                "mysqlDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountMysqlDatabase:NdbClusterEntityCountEngineCountMysqlDatabase"
                    }
                },
                "oracleDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountOracleDatabase:NdbClusterEntityCountEngineCountOracleDatabase"
                    }
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountPostgresDatabase:NdbClusterEntityCountEngineCountPostgresDatabase"
                    }
                },
                "saphanaDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountSaphanaDatabase:NdbClusterEntityCountEngineCountSaphanaDatabase"
                    }
                },
                "sqlserverDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountSqlserverDatabase:NdbClusterEntityCountEngineCountSqlserverDatabase"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "mariadbDatabases",
                        "mongodbDatabases",
                        "mysqlDatabases",
                        "oracleDatabases",
                        "postgresDatabases",
                        "saphanaDatabases",
                        "sqlserverDatabases"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountMariadbDatabase:NdbClusterEntityCountEngineCountMariadbDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountMariadbDatabaseProfile:NdbClusterEntityCountEngineCountMariadbDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "profiles",
                        "timeMachines"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountMariadbDatabaseProfile:NdbClusterEntityCountEngineCountMariadbDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "compute",
                        "databaseParameter",
                        "network",
                        "software",
                        "storage",
                        "windowsDomain"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountMongodbDatabase:NdbClusterEntityCountEngineCountMongodbDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountMongodbDatabaseProfile:NdbClusterEntityCountEngineCountMongodbDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "profiles",
                        "timeMachines"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountMongodbDatabaseProfile:NdbClusterEntityCountEngineCountMongodbDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "compute",
                        "databaseParameter",
                        "network",
                        "software",
                        "storage",
                        "windowsDomain"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountMysqlDatabase:NdbClusterEntityCountEngineCountMysqlDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountMysqlDatabaseProfile:NdbClusterEntityCountEngineCountMysqlDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "profiles",
                        "timeMachines"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountMysqlDatabaseProfile:NdbClusterEntityCountEngineCountMysqlDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "compute",
                        "databaseParameter",
                        "network",
                        "software",
                        "storage",
                        "windowsDomain"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountOracleDatabase:NdbClusterEntityCountEngineCountOracleDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountOracleDatabaseProfile:NdbClusterEntityCountEngineCountOracleDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "profiles",
                        "timeMachines"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountOracleDatabaseProfile:NdbClusterEntityCountEngineCountOracleDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "compute",
                        "databaseParameter",
                        "network",
                        "software",
                        "storage",
                        "windowsDomain"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountPostgresDatabase:NdbClusterEntityCountEngineCountPostgresDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountPostgresDatabaseProfile:NdbClusterEntityCountEngineCountPostgresDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "profiles",
                        "timeMachines"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountPostgresDatabaseProfile:NdbClusterEntityCountEngineCountPostgresDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "compute",
                        "databaseParameter",
                        "network",
                        "software",
                        "storage",
                        "windowsDomain"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountSaphanaDatabase:NdbClusterEntityCountEngineCountSaphanaDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountSaphanaDatabaseProfile:NdbClusterEntityCountEngineCountSaphanaDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "profiles",
                        "timeMachines"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountSaphanaDatabaseProfile:NdbClusterEntityCountEngineCountSaphanaDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "compute",
                        "databaseParameter",
                        "network",
                        "software",
                        "storage",
                        "windowsDomain"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountSqlserverDatabase:NdbClusterEntityCountEngineCountSqlserverDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCountEngineCountSqlserverDatabaseProfile:NdbClusterEntityCountEngineCountSqlserverDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "profiles",
                        "timeMachines"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterEntityCountEngineCountSqlserverDatabaseProfile:NdbClusterEntityCountEngineCountSqlserverDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "compute",
                        "databaseParameter",
                        "network",
                        "software",
                        "storage",
                        "windowsDomain"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterNetworksInfo:NdbClusterNetworksInfo": {
            "properties": {
                "accessTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ]. \nPrism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.\nPrism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.\nDBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.\n"
                },
                "networkInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterNetworksInfoNetworkInfo:NdbClusterNetworksInfoNetworkInfo"
                    },
                    "description": "network segmentation to segment the network traffic\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of vlan. Supported [DHCP, Static, IPAM]\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbClusterNetworksInfoNetworkInfo:NdbClusterNetworksInfoNetworkInfo": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "gateway of agent network\n"
                },
                "staticIp": {
                    "type": "string",
                    "description": "static ip of agent network\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "subnet mask of agent network\n"
                },
                "vlanName": {
                    "type": "string",
                    "description": "vlan name\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbClusterProperty:NdbClusterProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the cluster to be registered\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbClusterResourceConfig:NdbClusterResourceConfig": {
            "properties": {
                "memoryThresholdPercentage": {
                    "type": "number"
                },
                "storageThresholdPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "memoryThresholdPercentage",
                        "storageThresholdPercentage"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseActionargument:NdbDatabaseActionargument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) name of argument\n"
                },
                "value": {
                    "type": "string",
                    "description": "- (Required) value for argument\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "nutanix:index/NdbDatabaseClusterInfo:NdbDatabaseClusterInfo": {
            "properties": {
                "clusterIpInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseClusterInfoClusterIpInfo:NdbDatabaseClusterInfoClusterIpInfo"
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterIpInfos"
            ]
        },
        "nutanix:index/NdbDatabaseClusterInfoClusterIpInfo:NdbDatabaseClusterInfoClusterIpInfo": {
            "properties": {
                "ipInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseClusterInfoClusterIpInfoIpInfo:NdbDatabaseClusterInfoClusterIpInfoIpInfo"
                    }
                },
                "nxClusterId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "nxClusterId"
            ]
        },
        "nutanix:index/NdbDatabaseClusterInfoClusterIpInfoIpInfo:NdbDatabaseClusterInfoClusterIpInfoIpInfo": {
            "properties": {
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDatabaseDatabaseNode:NdbDatabaseDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseDatabaseNodeInfo:NdbDatabaseDatabaseNodeInfo"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseDatabaseNodeProperty:NdbDatabaseDatabaseNodeProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseDatabaseNodeProtectionDomain:NdbDatabaseDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseDatabaseNodeTag:NdbDatabaseDatabaseNodeTag"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "databaseId",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "dbserver",
                        "dbserverId",
                        "description",
                        "id",
                        "infos",
                        "name",
                        "primary",
                        "properties",
                        "protectionDomainId",
                        "protectionDomains",
                        "softwareInstallationId",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseDatabaseNodeInfo:NdbDatabaseDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseDatabaseNodeProperty:NdbDatabaseDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseDatabaseNodeProtectionDomain:NdbDatabaseDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseDatabaseNodeProtectionDomainProperty:NdbDatabaseDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assocEntities",
                        "cloudId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eraCreated",
                        "id",
                        "name",
                        "ownerId",
                        "primaryHost",
                        "properties",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseDatabaseNodeProtectionDomainProperty:NdbDatabaseDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseDatabaseNodeTag:NdbDatabaseDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfo:NdbDatabaseInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfoBpgConfig:NdbDatabaseInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgConfigs",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfoBpgConfig:NdbDatabaseInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfoBpgConfigBpgDbParam:NdbDatabaseInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfoBpgConfigStorage:NdbDatabaseInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfoBpgConfigVmProperty:NdbDatabaseInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgDbParams",
                        "storages",
                        "vmProperties"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfoBpgConfigBpgDbParam:NdbDatabaseInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "effectiveCacheSize",
                        "maintenanceWorkMem",
                        "maxParallelWorkersPerGather",
                        "maxWorkerProcesses",
                        "sharedBuffers",
                        "workMem"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfoBpgConfigStorage:NdbDatabaseInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfoBpgConfigStorageArchiveStorage:NdbDatabaseInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfoBpgConfigStorageDataDisk:NdbDatabaseInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfoBpgConfigStorageLogDisk:NdbDatabaseInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "archiveStorages",
                        "dataDisks",
                        "logDisks"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfoBpgConfigStorageArchiveStorage:NdbDatabaseInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfoBpgConfigStorageDataDisk:NdbDatabaseInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfoBpgConfigStorageLogDisk:NdbDatabaseInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseInfoBpgConfigVmProperty:NdbDatabaseInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dirtyBackgroundRatio",
                        "dirtyExpireCentisecs",
                        "dirtyRatio",
                        "dirtyWritebackCentisecs",
                        "nrHugepages",
                        "overcommitMemory",
                        "swappiness"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseLcmConfig:NdbDatabaseLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseLcmConfigExpiryDetail:NdbDatabaseLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseLcmConfigPostDeleteCommand:NdbDatabaseLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseLcmConfigPreDeleteCommand:NdbDatabaseLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseLcmConfigRefreshDetail:NdbDatabaseLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiryDetails",
                        "postDeleteCommands",
                        "preDeleteCommands",
                        "refreshDetails"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseLcmConfigExpiryDetail:NdbDatabaseLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteDatabase",
                        "deleteTimeMachine",
                        "deleteVm",
                        "effectiveTimestamp",
                        "expireInDays",
                        "expiryDateTimezone",
                        "expiryTimestamp",
                        "remindBeforeInDays",
                        "userCreated"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseLcmConfigPostDeleteCommand:NdbDatabaseLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseLcmConfigPreDeleteCommand:NdbDatabaseLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseLcmConfigRefreshDetail:NdbDatabaseLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastRefreshDate",
                        "nextRefreshDate",
                        "refreshDateTimezone",
                        "refreshInDays",
                        "refreshInHours",
                        "refreshInMonths",
                        "refreshTime"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseLinkedDatabase:NdbDatabaseLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseLinkedDatabaseInfo:NdbDatabaseLinkedDatabaseInfo"
                    }
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "infos",
                        "metric",
                        "name",
                        "parentDatabaseId",
                        "parentLinkedDatabaseId",
                        "snapshotId",
                        "status",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseLinkedDatabaseInfo:NdbDatabaseLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseMaintenanceTasks:NdbDatabaseMaintenanceTasks": {
            "properties": {
                "maintenanceWindowId": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseMaintenanceTasksTask:NdbDatabaseMaintenanceTasksTask"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDatabaseMaintenanceTasksTask:NdbDatabaseMaintenanceTasksTask": {
            "properties": {
                "postCommand": {
                    "type": "string"
                },
                "preCommand": {
                    "type": "string"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDatabaseNode:NdbDatabaseNode": {
            "properties": {
                "computeprofileid": {
                    "type": "string",
                    "description": "- (Optional) compute profile id\n"
                },
                "dbserverid": {
                    "type": "string",
                    "description": "- (Optional) Database server ID required for existing VM\n"
                },
                "ipInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseNodeIpInfo:NdbDatabaseNodeIpInfo"
                    },
                    "description": "- (Optional) IP infos for custom network profile.\n"
                },
                "networkprofileid": {
                    "type": "string",
                    "description": "- (Required) network profile ID\n"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "- (Optional) cluster id.\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseNodeProperty:NdbDatabaseNodeProperty"
                    },
                    "description": "- (Optional) list of additional properties\n"
                },
                "vmname": {
                    "type": "string",
                    "description": "- (Required) name of vm\n"
                }
            },
            "type": "object",
            "required": [
                "vmname"
            ]
        },
        "nutanix:index/NdbDatabaseNodeIpInfo:NdbDatabaseNodeIpInfo": {
            "properties": {
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDatabaseNodeProperty:NdbDatabaseNodeProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "nutanix:index/NdbDatabasePostgresqlInfo:NdbDatabasePostgresqlInfo": {
            "properties": {
                "allocatePgHugepage": {
                    "type": "boolean",
                    "description": "- (Optional) allocate huge page. Default: false\n"
                },
                "authMethod": {
                    "type": "string",
                    "description": "- (Optional) auth methods. Default: md5\n"
                },
                "autoTuneStagingDrive": {
                    "type": "boolean",
                    "description": "- (Optional) enable auto tuning of staging drive. Default: false\n"
                },
                "clusterDatabase": {
                    "type": "boolean",
                    "description": "- (Optional) if clustered database. Default: false\n"
                },
                "databaseNames": {
                    "type": "string",
                    "description": "- (Required) name of initial database to be created\n"
                },
                "databaseSize": {
                    "type": "string",
                    "description": "- (Required) initial database size\n"
                },
                "dbPassword": {
                    "type": "string",
                    "description": "- (Required) database instance password\n",
                    "secret": true
                },
                "haInstance": {
                    "$ref": "#/types/nutanix:index/NdbDatabasePostgresqlInfoHaInstance:NdbDatabasePostgresqlInfoHaInstance",
                    "description": "- (Optional) High Availability instance\n"
                },
                "listenerPort": {
                    "type": "string",
                    "description": "- (Required) listener port for database instance\n"
                },
                "postCreateScript": {
                    "type": "string",
                    "description": "- (Optional) post instance create script\n"
                },
                "preCreateScript": {
                    "type": "string",
                    "description": "- (Optional) pre instance create script\n"
                }
            },
            "type": "object",
            "required": [
                "databaseNames",
                "databaseSize",
                "dbPassword",
                "listenerPort"
            ]
        },
        "nutanix:index/NdbDatabasePostgresqlInfoHaInstance:NdbDatabasePostgresqlInfoHaInstance": {
            "properties": {
                "archiveWalExpireDays": {
                    "type": "integer",
                    "description": "- (Optional) archive wal expire days. Default is set to -1\n"
                },
                "backupPolicy": {
                    "type": "string",
                    "description": "- (Optional) backup policy for instance. Default is \"primary_only\"\n"
                },
                "clusterDescription": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string",
                    "description": "- (Required) cluster name\n"
                },
                "deployHaproxy": {
                    "type": "boolean",
                    "description": "- (Optional) HA proxy node. Default is set to false\n"
                },
                "enablePeerAuth": {
                    "type": "boolean",
                    "description": "- (Optional) enable peer auth . Default is set to false.\n"
                },
                "enableSynchronousMode": {
                    "type": "boolean",
                    "description": "- (Optional) enable synchronous mode. Default is set to true\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "- (Optional) failover mode of nodes.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "- (Optional) node type of instance. Default is set to database\n"
                },
                "patroniClusterName": {
                    "type": "string",
                    "description": "- (Required) patroni cluster name\n"
                },
                "provisionVirtualIp": {
                    "type": "boolean",
                    "description": "- (Optional) provisional virtual ip. Default is set to true\n"
                },
                "proxyReadPort": {
                    "type": "string",
                    "description": "-  (Required) proxy read port\n"
                },
                "proxyWritePort": {
                    "type": "string",
                    "description": "- (Required) proxy write port\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "patroniClusterName",
                "proxyReadPort",
                "proxyWritePort"
            ]
        },
        "nutanix:index/NdbDatabaseProperty:NdbDatabaseProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreDatabaseNode:NdbDatabaseRestoreDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string",
                    "description": "database id\n"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreDatabaseNodeInfo:NdbDatabaseRestoreDatabaseNodeInfo"
                    },
                    "description": "info of instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreDatabaseNodeProperty:NdbDatabaseRestoreDatabaseNodeProperty"
                    },
                    "description": "properties of database created\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreDatabaseNodeProtectionDomain:NdbDatabaseRestoreDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreDatabaseNodeTag:NdbDatabaseRestoreDatabaseNodeTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "databaseId",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "dbserver",
                        "dbserverId",
                        "description",
                        "id",
                        "infos",
                        "name",
                        "primary",
                        "properties",
                        "protectionDomainId",
                        "protectionDomains",
                        "softwareInstallationId",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreDatabaseNodeInfo:NdbDatabaseRestoreDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of instance\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreDatabaseNodeProperty:NdbDatabaseRestoreDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreDatabaseNodeProtectionDomain:NdbDatabaseRestoreDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty:NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "properties of database created\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assocEntities",
                        "cloudId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eraCreated",
                        "id",
                        "name",
                        "ownerId",
                        "primaryHost",
                        "properties",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty:NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreDatabaseNodeTag:NdbDatabaseRestoreDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfo:NdbDatabaseRestoreInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfoBpgConfig:NdbDatabaseRestoreInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgConfigs",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfoBpgConfig:NdbDatabaseRestoreInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfoBpgConfigBpgDbParam:NdbDatabaseRestoreInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorage:NdbDatabaseRestoreInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfoBpgConfigVmProperty:NdbDatabaseRestoreInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgDbParams",
                        "storages",
                        "vmProperties"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfoBpgConfigBpgDbParam:NdbDatabaseRestoreInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "effectiveCacheSize",
                        "maintenanceWorkMem",
                        "maxParallelWorkersPerGather",
                        "maxWorkerProcesses",
                        "sharedBuffers",
                        "workMem"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorage:NdbDatabaseRestoreInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage:NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorageDataDisk:NdbDatabaseRestoreInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorageLogDisk:NdbDatabaseRestoreInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "archiveStorages",
                        "dataDisks",
                        "logDisks"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage:NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorageDataDisk:NdbDatabaseRestoreInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfoBpgConfigStorageLogDisk:NdbDatabaseRestoreInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreInfoBpgConfigVmProperty:NdbDatabaseRestoreInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dirtyBackgroundRatio",
                        "dirtyExpireCentisecs",
                        "dirtyRatio",
                        "dirtyWritebackCentisecs",
                        "nrHugepages",
                        "overcommitMemory",
                        "swappiness"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreLcmConfig:NdbDatabaseRestoreLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLcmConfigExpiryDetail:NdbDatabaseRestoreLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLcmConfigPostDeleteCommand:NdbDatabaseRestoreLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLcmConfigPreDeleteCommand:NdbDatabaseRestoreLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLcmConfigRefreshDetail:NdbDatabaseRestoreLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiryDetails",
                        "postDeleteCommands",
                        "preDeleteCommands",
                        "refreshDetails"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreLcmConfigExpiryDetail:NdbDatabaseRestoreLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteDatabase",
                        "deleteTimeMachine",
                        "deleteVm",
                        "effectiveTimestamp",
                        "expireInDays",
                        "expiryDateTimezone",
                        "expiryTimestamp",
                        "remindBeforeInDays",
                        "userCreated"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreLcmConfigPostDeleteCommand:NdbDatabaseRestoreLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreLcmConfigPreDeleteCommand:NdbDatabaseRestoreLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreLcmConfigRefreshDetail:NdbDatabaseRestoreLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastRefreshDate",
                        "nextRefreshDate",
                        "refreshDateTimezone",
                        "refreshInDays",
                        "refreshInHours",
                        "refreshInMonths",
                        "refreshTime"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreLinkedDatabase:NdbDatabaseRestoreLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "name of database\n"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLinkedDatabaseInfo:NdbDatabaseRestoreLinkedDatabaseInfo"
                    },
                    "description": "info of instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id from you want to use for restoring the instance\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "infos",
                        "metric",
                        "name",
                        "parentDatabaseId",
                        "parentLinkedDatabaseId",
                        "snapshotId",
                        "status",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreLinkedDatabaseInfo:NdbDatabaseRestoreLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of instance\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreProperty:NdbDatabaseRestoreProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTag:NdbDatabaseRestoreTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachine:NdbDatabaseRestoreTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean",
                    "description": "whether instance is cloned or not\n"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string",
                    "description": "database id\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string",
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineProperty:NdbDatabaseRestoreTimeMachineProperty"
                    },
                    "description": "properties of database created\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineSchedule:NdbDatabaseRestoreTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineSla:NdbDatabaseRestoreTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineTag:NdbDatabaseRestoreTimeMachineTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "clone",
                        "clones",
                        "clustered",
                        "database",
                        "databaseId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eaStatus",
                        "id",
                        "metric",
                        "name",
                        "properties",
                        "scheduleId",
                        "schedules",
                        "scope",
                        "slaId",
                        "slaUpdateInProgress",
                        "slaUpdateMetadata",
                        "slas",
                        "sourceNxClusters",
                        "status",
                        "tags",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineProperty:NdbDatabaseRestoreTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineSchedule:NdbDatabaseRestoreTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule:NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineScheduleDailySchedule:NdbDatabaseRestoreTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule:NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule:NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay:NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone on which instance is created xw\n"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule:NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachineScheduleYearlySchedule:NdbDatabaseRestoreTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousSchedules",
                        "dailySchedules",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "globalPolicy",
                        "id",
                        "monthlySchedules",
                        "name",
                        "ownerId",
                        "quartelySchedules",
                        "referenceCount",
                        "snapshotTimeOfDays",
                        "startTime",
                        "systemPolicy",
                        "timeZone",
                        "uniqueName",
                        "weeklySchedules",
                        "yearlySchedules"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule:NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logBackupInterval",
                        "snapshotsPerDay"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineScheduleDailySchedule:NdbDatabaseRestoreTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule:NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule:NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "startMonth",
                        "startMonthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay:NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extra",
                        "hours",
                        "minutes",
                        "seconds"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule:NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfWeek",
                        "dayOfWeekValue",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineScheduleYearlySchedule:NdbDatabaseRestoreTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "month",
                        "monthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineSla:NdbDatabaseRestoreTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousRetention",
                        "currentActiveFrequency",
                        "dailyRetention",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "monthlyRetention",
                        "name",
                        "ownerId",
                        "pitrEnabled",
                        "quarterlyRetention",
                        "referenceCount",
                        "systemSla",
                        "uniqueName",
                        "weeklyRetention",
                        "yearlyRetention"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseRestoreTimeMachineTag:NdbDatabaseRestoreTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleDatabaseNode:NdbDatabaseScaleDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleDatabaseNodeInfo:NdbDatabaseScaleDatabaseNodeInfo"
                    },
                    "description": "info of instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleDatabaseNodeProperty:NdbDatabaseScaleDatabaseNodeProperty"
                    },
                    "description": "properties of database created\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleDatabaseNodeProtectionDomain:NdbDatabaseScaleDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleDatabaseNodeTag:NdbDatabaseScaleDatabaseNodeTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "databaseId",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "dbserver",
                        "dbserverId",
                        "description",
                        "id",
                        "infos",
                        "name",
                        "primary",
                        "properties",
                        "protectionDomainId",
                        "protectionDomains",
                        "softwareInstallationId",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleDatabaseNodeInfo:NdbDatabaseScaleDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of instance\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleDatabaseNodeProperty:NdbDatabaseScaleDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleDatabaseNodeProtectionDomain:NdbDatabaseScaleDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleDatabaseNodeProtectionDomainProperty:NdbDatabaseScaleDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "properties of database created\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assocEntities",
                        "cloudId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eraCreated",
                        "id",
                        "name",
                        "ownerId",
                        "primaryHost",
                        "properties",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleDatabaseNodeProtectionDomainProperty:NdbDatabaseScaleDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleDatabaseNodeTag:NdbDatabaseScaleDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfo:NdbDatabaseScaleInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfoBpgConfig:NdbDatabaseScaleInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgConfigs",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfoBpgConfig:NdbDatabaseScaleInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfoBpgConfigBpgDbParam:NdbDatabaseScaleInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfoBpgConfigStorage:NdbDatabaseScaleInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfoBpgConfigVmProperty:NdbDatabaseScaleInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgDbParams",
                        "storages",
                        "vmProperties"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfoBpgConfigBpgDbParam:NdbDatabaseScaleInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "effectiveCacheSize",
                        "maintenanceWorkMem",
                        "maxParallelWorkersPerGather",
                        "maxWorkerProcesses",
                        "sharedBuffers",
                        "workMem"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfoBpgConfigStorage:NdbDatabaseScaleInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage:NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfoBpgConfigStorageDataDisk:NdbDatabaseScaleInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfoBpgConfigStorageLogDisk:NdbDatabaseScaleInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "archiveStorages",
                        "dataDisks",
                        "logDisks"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage:NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfoBpgConfigStorageDataDisk:NdbDatabaseScaleInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfoBpgConfigStorageLogDisk:NdbDatabaseScaleInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleInfoBpgConfigVmProperty:NdbDatabaseScaleInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dirtyBackgroundRatio",
                        "dirtyExpireCentisecs",
                        "dirtyRatio",
                        "dirtyWritebackCentisecs",
                        "nrHugepages",
                        "overcommitMemory",
                        "swappiness"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleLcmConfig:NdbDatabaseScaleLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleLcmConfigExpiryDetail:NdbDatabaseScaleLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleLcmConfigPostDeleteCommand:NdbDatabaseScaleLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleLcmConfigPreDeleteCommand:NdbDatabaseScaleLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleLcmConfigRefreshDetail:NdbDatabaseScaleLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiryDetails",
                        "postDeleteCommands",
                        "preDeleteCommands",
                        "refreshDetails"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleLcmConfigExpiryDetail:NdbDatabaseScaleLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteDatabase",
                        "deleteTimeMachine",
                        "deleteVm",
                        "effectiveTimestamp",
                        "expireInDays",
                        "expiryDateTimezone",
                        "expiryTimestamp",
                        "remindBeforeInDays",
                        "userCreated"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleLcmConfigPostDeleteCommand:NdbDatabaseScaleLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleLcmConfigPreDeleteCommand:NdbDatabaseScaleLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleLcmConfigRefreshDetail:NdbDatabaseScaleLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastRefreshDate",
                        "nextRefreshDate",
                        "refreshDateTimezone",
                        "refreshInDays",
                        "refreshInHours",
                        "refreshInMonths",
                        "refreshTime"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleLinkedDatabase:NdbDatabaseScaleLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "name of database\n"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleLinkedDatabaseInfo:NdbDatabaseScaleLinkedDatabaseInfo"
                    },
                    "description": "info of instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "infos",
                        "metric",
                        "name",
                        "parentDatabaseId",
                        "parentLinkedDatabaseId",
                        "snapshotId",
                        "status",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleLinkedDatabaseInfo:NdbDatabaseScaleLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of instance\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleProperty:NdbDatabaseScaleProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTag:NdbDatabaseScaleTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachine:NdbDatabaseScaleTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean",
                    "description": "whether instance is cloned or not\n"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string",
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineProperty:NdbDatabaseScaleTimeMachineProperty"
                    },
                    "description": "properties of database created\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineSchedule:NdbDatabaseScaleTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineSla:NdbDatabaseScaleTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineTag:NdbDatabaseScaleTimeMachineTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "clone",
                        "clones",
                        "clustered",
                        "database",
                        "databaseId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eaStatus",
                        "id",
                        "metric",
                        "name",
                        "properties",
                        "scheduleId",
                        "schedules",
                        "scope",
                        "slaId",
                        "slaUpdateInProgress",
                        "slaUpdateMetadata",
                        "slas",
                        "sourceNxClusters",
                        "status",
                        "tags",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineProperty:NdbDatabaseScaleTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineSchedule:NdbDatabaseScaleTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineScheduleContinuousSchedule:NdbDatabaseScaleTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineScheduleDailySchedule:NdbDatabaseScaleTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineScheduleMonthlySchedule:NdbDatabaseScaleTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineScheduleQuartelySchedule:NdbDatabaseScaleTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay:NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone on which instance is created xw\n"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineScheduleWeeklySchedule:NdbDatabaseScaleTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachineScheduleYearlySchedule:NdbDatabaseScaleTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousSchedules",
                        "dailySchedules",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "globalPolicy",
                        "id",
                        "monthlySchedules",
                        "name",
                        "ownerId",
                        "quartelySchedules",
                        "referenceCount",
                        "snapshotTimeOfDays",
                        "startTime",
                        "systemPolicy",
                        "timeZone",
                        "uniqueName",
                        "weeklySchedules",
                        "yearlySchedules"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineScheduleContinuousSchedule:NdbDatabaseScaleTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logBackupInterval",
                        "snapshotsPerDay"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineScheduleDailySchedule:NdbDatabaseScaleTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineScheduleMonthlySchedule:NdbDatabaseScaleTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineScheduleQuartelySchedule:NdbDatabaseScaleTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "startMonth",
                        "startMonthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay:NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extra",
                        "hours",
                        "minutes",
                        "seconds"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineScheduleWeeklySchedule:NdbDatabaseScaleTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfWeek",
                        "dayOfWeekValue",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineScheduleYearlySchedule:NdbDatabaseScaleTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "month",
                        "monthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineSla:NdbDatabaseScaleTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousRetention",
                        "currentActiveFrequency",
                        "dailyRetention",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "monthlyRetention",
                        "name",
                        "ownerId",
                        "pitrEnabled",
                        "quarterlyRetention",
                        "referenceCount",
                        "systemSla",
                        "uniqueName",
                        "weeklyRetention",
                        "yearlyRetention"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseScaleTimeMachineTag:NdbDatabaseScaleTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseSnapshotLcmConfig:NdbDatabaseSnapshotLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotLcmConfigExpiryDetail:NdbDatabaseSnapshotLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotLcmConfigPostDeleteCommand:NdbDatabaseSnapshotLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotLcmConfigPreDeleteCommand:NdbDatabaseSnapshotLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotLcmConfigRefreshDetail:NdbDatabaseSnapshotLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiryDetails",
                        "postDeleteCommands",
                        "preDeleteCommands",
                        "refreshDetails"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseSnapshotLcmConfigExpiryDetail:NdbDatabaseSnapshotLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string",
                    "description": "Default is set to Asia/Calcutta\n"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteDatabase",
                        "deleteTimeMachine",
                        "deleteVm",
                        "effectiveTimestamp",
                        "expireInDays",
                        "expiryDateTimezone",
                        "expiryTimestamp",
                        "remindBeforeInDays",
                        "userCreated"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseSnapshotLcmConfigPostDeleteCommand:NdbDatabaseSnapshotLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseSnapshotLcmConfigPreDeleteCommand:NdbDatabaseSnapshotLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseSnapshotLcmConfigRefreshDetail:NdbDatabaseSnapshotLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastRefreshDate",
                        "nextRefreshDate",
                        "refreshDateTimezone",
                        "refreshInDays",
                        "refreshInHours",
                        "refreshInMonths",
                        "refreshTime"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseSnapshotProperty:NdbDatabaseSnapshotProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of snapshot\n"
                },
                "name": {
                    "type": "string",
                    "description": "Snapshot name. Default value is era_manual_snapshot.\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseSnapshotTag:NdbDatabaseSnapshotTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTag:NdbDatabaseTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachine:NdbDatabaseTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "- (Optional) If clustered database. Default: false\n"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineProperty:NdbDatabaseTimeMachineProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineSchedule:NdbDatabaseTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineSla:NdbDatabaseTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineTag:NdbDatabaseTimeMachineTag"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "clone",
                        "clones",
                        "clustered",
                        "database",
                        "databaseId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eaStatus",
                        "id",
                        "metric",
                        "name",
                        "properties",
                        "scheduleId",
                        "schedules",
                        "scope",
                        "slaId",
                        "slaUpdateInProgress",
                        "slaUpdateMetadata",
                        "slas",
                        "sourceNxClusters",
                        "status",
                        "tags",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineProperty:NdbDatabaseTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineSchedule:NdbDatabaseTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineScheduleContinuousSchedule:NdbDatabaseTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineScheduleDailySchedule:NdbDatabaseTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineScheduleMonthlySchedule:NdbDatabaseTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineScheduleQuartelySchedule:NdbDatabaseTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay:NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineScheduleWeeklySchedule:NdbDatabaseTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachineScheduleYearlySchedule:NdbDatabaseTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousSchedules",
                        "dailySchedules",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "globalPolicy",
                        "id",
                        "monthlySchedules",
                        "name",
                        "ownerId",
                        "quartelySchedules",
                        "referenceCount",
                        "snapshotTimeOfDays",
                        "startTime",
                        "systemPolicy",
                        "timeZone",
                        "uniqueName",
                        "weeklySchedules",
                        "yearlySchedules"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineScheduleContinuousSchedule:NdbDatabaseTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logBackupInterval",
                        "snapshotsPerDay"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineScheduleDailySchedule:NdbDatabaseTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineScheduleMonthlySchedule:NdbDatabaseTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineScheduleQuartelySchedule:NdbDatabaseTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "startMonth",
                        "startMonthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay:NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extra",
                        "hours",
                        "minutes",
                        "seconds"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineScheduleWeeklySchedule:NdbDatabaseTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfWeek",
                        "dayOfWeekValue",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineScheduleYearlySchedule:NdbDatabaseTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "month",
                        "monthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineSla:NdbDatabaseTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousRetention",
                        "currentActiveFrequency",
                        "dailyRetention",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "monthlyRetention",
                        "name",
                        "ownerId",
                        "pitrEnabled",
                        "quarterlyRetention",
                        "referenceCount",
                        "systemSla",
                        "uniqueName",
                        "weeklyRetention",
                        "yearlyRetention"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimeMachineTag:NdbDatabaseTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimemachineinfo:NdbDatabaseTimemachineinfo": {
            "properties": {
                "autotunelogdrive": {
                    "type": "boolean",
                    "description": "- (Optional) enable auto tune log drive. Default: true\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) description of time machine\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) name of time machine\n"
                },
                "schedule": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoSchedule:NdbDatabaseTimemachineinfoSchedule",
                    "description": "- (Optional) schedule for snapshots\n"
                },
                "slaDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoSlaDetail:NdbDatabaseTimemachineinfoSlaDetail"
                    },
                    "description": "-  (optional) SLA details for HA instance\n"
                },
                "slaid": {
                    "type": "string",
                    "description": "- (Optional) SLA ID for single instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoTag:NdbDatabaseTimemachineinfoTag"
                    },
                    "description": "- (Optional) tags\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "schedule"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "schedule",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbDatabaseTimemachineinfoSchedule:NdbDatabaseTimemachineinfoSchedule": {
            "properties": {
                "continuousschedule": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoScheduleContinuousschedule:NdbDatabaseTimemachineinfoScheduleContinuousschedule",
                    "description": "- (Optional) snapshot freq and log config\n"
                },
                "monthlyschedule": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoScheduleMonthlyschedule:NdbDatabaseTimemachineinfoScheduleMonthlyschedule",
                    "description": "- (Optional) monthly snapshot config\n"
                },
                "quartelyschedule": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoScheduleQuartelyschedule:NdbDatabaseTimemachineinfoScheduleQuartelyschedule",
                    "description": "- (Optional) quaterly snapshot config\n"
                },
                "snapshottimeofday": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoScheduleSnapshottimeofday:NdbDatabaseTimemachineinfoScheduleSnapshottimeofday",
                    "description": "- (Optional) daily snapshot config\n"
                },
                "weeklyschedule": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoScheduleWeeklyschedule:NdbDatabaseTimemachineinfoScheduleWeeklyschedule",
                    "description": "- (Optional) weekly snapshot config\n"
                },
                "yearlyschedule": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoScheduleYearlyschedule:NdbDatabaseTimemachineinfoScheduleYearlyschedule",
                    "description": "- (Optional) yearly snapshot config\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDatabaseTimemachineinfoScheduleContinuousschedule:NdbDatabaseTimemachineinfoScheduleContinuousschedule": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "- (Required) to enable\n"
                },
                "logbackupinterval": {
                    "type": "integer",
                    "description": "- (Required) log catchup interval for database\n"
                },
                "snapshotsperday": {
                    "type": "integer",
                    "description": "- (Required) num of snapshots per day\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logbackupinterval",
                "snapshotsperday"
            ]
        },
        "nutanix:index/NdbDatabaseTimemachineinfoScheduleMonthlyschedule:NdbDatabaseTimemachineinfoScheduleMonthlyschedule": {
            "properties": {
                "dayofmonth": {
                    "type": "integer",
                    "description": "- (Required) day of month to take snapshot\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "- (Required) to enable\n"
                }
            },
            "type": "object",
            "required": [
                "dayofmonth",
                "enabled"
            ]
        },
        "nutanix:index/NdbDatabaseTimemachineinfoScheduleQuartelyschedule:NdbDatabaseTimemachineinfoScheduleQuartelyschedule": {
            "properties": {
                "dayofmonth": {
                    "type": "integer",
                    "description": "- (Required) month's day for snapshot\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "- (Required) to enable\n"
                },
                "startmonth": {
                    "type": "string",
                    "description": "- (Required) quarter start month\n"
                }
            },
            "type": "object",
            "required": [
                "dayofmonth",
                "enabled",
                "startmonth"
            ]
        },
        "nutanix:index/NdbDatabaseTimemachineinfoScheduleSnapshottimeofday:NdbDatabaseTimemachineinfoScheduleSnapshottimeofday": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "- (Required) hours\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "- (Required) minutes\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "- (Required) seconds\n"
                }
            },
            "type": "object",
            "required": [
                "hours",
                "minutes",
                "seconds"
            ]
        },
        "nutanix:index/NdbDatabaseTimemachineinfoScheduleWeeklyschedule:NdbDatabaseTimemachineinfoScheduleWeeklyschedule": {
            "properties": {
                "dayofweek": {
                    "type": "string",
                    "description": "- (Required) day of week to take snaphsot. Eg. \"WEDNESDAY\"\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "- (Required) to enable\n"
                }
            },
            "type": "object",
            "required": [
                "dayofweek",
                "enabled"
            ]
        },
        "nutanix:index/NdbDatabaseTimemachineinfoScheduleYearlyschedule:NdbDatabaseTimemachineinfoScheduleYearlyschedule": {
            "properties": {
                "dayofmonth": {
                    "type": "integer",
                    "description": "- (Required) day of month to take snapshot\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "- (Required) to enable\n"
                },
                "month": {
                    "type": "string",
                    "description": "- (Required) month for snapshot\n"
                }
            },
            "type": "object",
            "required": [
                "dayofmonth",
                "enabled",
                "month"
            ]
        },
        "nutanix:index/NdbDatabaseTimemachineinfoSlaDetail:NdbDatabaseTimemachineinfoSlaDetail": {
            "properties": {
                "primarySlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfoSlaDetailPrimarySla:NdbDatabaseTimemachineinfoSlaDetailPrimarySla"
                    },
                    "description": "- (Required) primary sla details\n* `primary_sla.sla_id` :- (Required) sla id\n* `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDatabaseTimemachineinfoSlaDetailPrimarySla:NdbDatabaseTimemachineinfoSlaDetailPrimarySla": {
            "properties": {
                "nxClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slaId": {
                    "type": "string",
                    "description": "description of SLA ID.\n"
                }
            },
            "type": "object",
            "required": [
                "slaId"
            ]
        },
        "nutanix:index/NdbDatabaseTimemachineinfoTag:NdbDatabaseTimemachineinfoTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDbserverVmCredential:NdbDbserverVmCredential": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "nutanix:index/NdbDbserverVmMaintenanceTasks:NdbDbserverVmMaintenanceTasks": {
            "properties": {
                "maintenanceWindowId": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmMaintenanceTasksTask:NdbDbserverVmMaintenanceTasksTask"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDbserverVmMaintenanceTasksTask:NdbDbserverVmMaintenanceTasksTask": {
            "properties": {
                "postCommand": {
                    "type": "string"
                },
                "preCommand": {
                    "type": "string"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbDbserverVmPostgresDatabase:NdbDbserverVmPostgresDatabase": {
            "properties": {
                "clientPublicKey": {
                    "type": "string"
                },
                "vmName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "vmName"
            ]
        },
        "nutanix:index/NdbDbserverVmProperty:NdbDbserverVmProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbDbserverVmTag:NdbDbserverVmTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbLinkedDatabasesInfo:NdbLinkedDatabasesInfo": {
            "properties": {
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbLinkedDatabasesInfoInfo:NdbLinkedDatabasesInfoInfo"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "infos",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbLinkedDatabasesInfoInfo:NdbLinkedDatabasesInfoInfo": {
            "properties": {
                "createdBy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceTaskEntityTaskAssociation:NdbMaintenanceTaskEntityTaskAssociation": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "access level of tasks\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "created date of task\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of task\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of maintenance window\n"
                },
                "entity": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string",
                    "description": "entity id\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "type of the entity. i.e. DBSERVER\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of maintenance window\n"
                },
                "maintenanceWindowId": {
                    "type": "string",
                    "description": "maintenance window id which has to be associated\n"
                },
                "maintenanceWindowOwnerId": {
                    "type": "string",
                    "description": "maintenance window owner id\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of of maintenance window\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "owner id of task\n"
                },
                "payloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceTaskEntityTaskAssociationPayload:NdbMaintenanceTaskEntityTaskAssociationPayload"
                    },
                    "description": "list of pre post commands of OS or DB task\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceTaskEntityTaskAssociationProperty:NdbMaintenanceTaskEntityTaskAssociationProperty"
                    },
                    "description": "properties of task\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of task\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceTaskEntityTaskAssociationTag:NdbMaintenanceTaskEntityTaskAssociationTag"
                    },
                    "description": "tags of task\n"
                },
                "taskType": {
                    "type": "string",
                    "description": "type of the task. OS or DB\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "entity",
                        "entityId",
                        "entityType",
                        "id",
                        "maintenanceWindowId",
                        "maintenanceWindowOwnerId",
                        "name",
                        "ownerId",
                        "payloads",
                        "properties",
                        "status",
                        "tags",
                        "taskType"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceTaskEntityTaskAssociationPayload:NdbMaintenanceTaskEntityTaskAssociationPayload": {
            "properties": {
                "prePostCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand:NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand"
                    },
                    "description": "Pre Post command of Task\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "prePostCommands"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand:NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand": {
            "properties": {
                "postCommand": {
                    "type": "string",
                    "description": "post command of task\n"
                },
                "preCommand": {
                    "type": "string",
                    "description": "pre command of task\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "postCommand",
                        "preCommand"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceTaskEntityTaskAssociationProperty:NdbMaintenanceTaskEntityTaskAssociationProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of of maintenance window\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceTaskEntityTaskAssociationTag:NdbMaintenanceTaskEntityTaskAssociationTag": {
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "entity id\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "type of the entity. i.e. DBSERVER\n"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceTaskTask:NdbMaintenanceTaskTask": {
            "properties": {
                "postCommand": {
                    "type": "string",
                    "description": "command that you want to run after patching the OS/DB\n"
                },
                "preCommand": {
                    "type": "string",
                    "description": "command that you want to run before patching the OS/DB\n"
                },
                "taskType": {
                    "type": "string",
                    "description": "type of task. Supports [ \"OS_PATCHING\", \"DB_PATCHING\" ]\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbMaintenanceWindowEntityTaskAssoc:NdbMaintenanceWindowEntityTaskAssoc": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "access level\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "created date of maintenance window\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of maintenance window\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for maintenance window\n"
                },
                "entity": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maintenanceWindowId": {
                    "type": "string"
                },
                "maintenanceWindowOwnerId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the maintenance window.\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "owner id of maintenance window\n"
                },
                "payloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowEntityTaskAssocPayload:NdbMaintenanceWindowEntityTaskAssocPayload"
                    }
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowEntityTaskAssocProperty:NdbMaintenanceWindowEntityTaskAssocProperty"
                    },
                    "description": "properties of maintenance window\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of maintennace window\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowEntityTaskAssocTag:NdbMaintenanceWindowEntityTaskAssocTag"
                    },
                    "description": "tags of maintenance window\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "entity",
                        "entityId",
                        "entityType",
                        "id",
                        "maintenanceWindowId",
                        "maintenanceWindowOwnerId",
                        "name",
                        "ownerId",
                        "payloads",
                        "properties",
                        "status",
                        "tags",
                        "taskType"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceWindowEntityTaskAssocPayload:NdbMaintenanceWindowEntityTaskAssocPayload": {
            "properties": {
                "prePostCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand:NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "prePostCommands"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand:NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand": {
            "properties": {
                "postCommand": {
                    "type": "string"
                },
                "preCommand": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "postCommand",
                        "preCommand"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceWindowEntityTaskAssocProperty:NdbMaintenanceWindowEntityTaskAssocProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name for the maintenance window.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceWindowEntityTaskAssocTag:NdbMaintenanceWindowEntityTaskAssocTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceWindowProperty:NdbMaintenanceWindowProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name for the maintenance window.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceWindowSchedule:NdbMaintenanceWindowSchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "duration in hours. Default is 2\n"
                },
                "hour": {
                    "type": "integer"
                },
                "minute": {
                    "type": "integer"
                },
                "recurrence": {
                    "type": "string",
                    "description": "Supported values [ MONTHLY, WEEKLY ]\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "start time for maintenance window to trigger\n"
                },
                "threshold": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone . Default is Asia/Calcutta .\n"
                },
                "weekOfMonth": {
                    "type": "integer",
                    "description": "week of the month. Supports [1, 2, 3, 4] .\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfWeek",
                        "duration",
                        "hour",
                        "minute",
                        "recurrence",
                        "threshold",
                        "timezone",
                        "weekOfMonth"
                    ]
                }
            }
        },
        "nutanix:index/NdbMaintenanceWindowTag:NdbMaintenanceWindowTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbNetworkIpPool:NdbNetworkIpPool": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbNetworkIpPoolAddress:NdbNetworkIpPoolAddress"
                    }
                },
                "endIp": {
                    "type": "string",
                    "description": "ending IP address range for new database servers\n"
                },
                "id": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "startIp": {
                    "type": "string",
                    "description": "starting IP address range for new database servers\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "endIp",
                        "id",
                        "modifiedBy",
                        "startIp"
                    ]
                }
            }
        },
        "nutanix:index/NdbNetworkIpPoolAddress:NdbNetworkIpPoolAddress": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/NdbNetworkPropertiesMap:NdbNetworkPropertiesMap": {
            "properties": {
                "vlanGateway": {
                    "type": "string"
                },
                "vlanPrimaryDns": {
                    "type": "string"
                },
                "vlanSecondaryDns": {
                    "type": "string"
                },
                "vlanSubnetMask": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vlanGateway",
                        "vlanPrimaryDns",
                        "vlanSecondaryDns",
                        "vlanSubnetMask"
                    ]
                }
            }
        },
        "nutanix:index/NdbNetworkProperty:NdbNetworkProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the vlan to be attached in NDB\n"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbProfileClusterAvailability:NdbProfileClusterAvailability": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "profileId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dateCreated",
                        "dateModified",
                        "nxClusterId",
                        "ownerId",
                        "profileId",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/NdbProfileComputeProfile:NdbProfileComputeProfile": {
            "properties": {
                "corePerCpu": {
                    "type": "string"
                },
                "cpus": {
                    "type": "string"
                },
                "memorySize": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbProfileDatabaseParameterProfile:NdbProfileDatabaseParameterProfile": {
            "properties": {
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileDatabaseParameterProfilePostgresDatabase:NdbProfileDatabaseParameterProfilePostgresDatabase"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbProfileDatabaseParameterProfilePostgresDatabase:NdbProfileDatabaseParameterProfilePostgresDatabase": {
            "properties": {
                "autovacuum": {
                    "type": "string"
                },
                "autovacuumFreezeMaxAge": {
                    "type": "string"
                },
                "autovacuumMaxWorkers": {
                    "type": "string"
                },
                "autovacuumVacuumCostDelay": {
                    "type": "string"
                },
                "autovacuumVacuumScaleFactor": {
                    "type": "string"
                },
                "autovacuumVacuumThreshold": {
                    "type": "string"
                },
                "autovacuumWorkMem": {
                    "type": "string"
                },
                "checkpointCompletionTarget": {
                    "type": "string"
                },
                "checkpointTimeout": {
                    "type": "string"
                },
                "effectiveIoConcurrency": {
                    "type": "string"
                },
                "maxConnections": {
                    "type": "string"
                },
                "maxLocksPerTransaction": {
                    "type": "string"
                },
                "maxPreparedTransactions": {
                    "type": "string"
                },
                "maxReplicationSlots": {
                    "type": "string"
                },
                "maxWalSenders": {
                    "type": "string"
                },
                "maxWalSize": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "minWalSize": {
                    "type": "string"
                },
                "randomPageCost": {
                    "type": "string"
                },
                "synchronousCommit": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "walBuffers": {
                    "type": "string"
                },
                "walKeepSegments": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbProfileNetworkProfile:NdbProfileNetworkProfile": {
            "properties": {
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileNetworkProfilePostgresDatabase:NdbProfileNetworkProfilePostgresDatabase"
                    }
                },
                "topology": {
                    "type": "string"
                },
                "versionClusterAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileNetworkProfileVersionClusterAssociation:NdbProfileNetworkProfileVersionClusterAssociation"
                    }
                }
            },
            "type": "object",
            "required": [
                "topology"
            ]
        },
        "nutanix:index/NdbProfileNetworkProfilePostgresDatabase:NdbProfileNetworkProfilePostgresDatabase": {
            "properties": {
                "haInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileNetworkProfilePostgresDatabaseHaInstance:NdbProfileNetworkProfilePostgresDatabaseHaInstance"
                    }
                },
                "singleInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileNetworkProfilePostgresDatabaseSingleInstance:NdbProfileNetworkProfilePostgresDatabaseSingleInstance"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbProfileNetworkProfilePostgresDatabaseHaInstance:NdbProfileNetworkProfilePostgresDatabaseHaInstance": {
            "properties": {
                "clusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clusterNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "numOfClusters": {
                    "type": "string"
                },
                "vlanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbProfileNetworkProfilePostgresDatabaseSingleInstance:NdbProfileNetworkProfilePostgresDatabaseSingleInstance": {
            "properties": {
                "enableIpAddressSelection": {
                    "type": "string"
                },
                "vlanName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbProfileNetworkProfileVersionClusterAssociation:NdbProfileNetworkProfileVersionClusterAssociation": {
            "properties": {
                "nxClusterId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "nxClusterId"
            ]
        },
        "nutanix:index/NdbProfileSoftwareProfile:NdbProfileSoftwareProfile": {
            "properties": {
                "availableClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileSoftwareProfilePostgresDatabase:NdbProfileSoftwareProfilePostgresDatabase"
                    }
                },
                "topology": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "topology"
            ]
        },
        "nutanix:index/NdbProfileSoftwareProfilePostgresDatabase:NdbProfileSoftwareProfilePostgresDatabase": {
            "properties": {
                "baseProfileVersionDescription": {
                    "type": "string"
                },
                "baseProfileVersionName": {
                    "type": "string"
                },
                "dbSoftwareNotes": {
                    "type": "string"
                },
                "osNotes": {
                    "type": "string"
                },
                "sourceDbserverId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbProfileVersion:NdbProfileVersion": {
            "properties": {
                "dbVersion": {
                    "type": "string"
                },
                "deprecated": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "engineType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "profileId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileVersionProperty:NdbProfileVersionProperty"
                    }
                },
                "propertiesMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "published": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "systemProfile": {
                    "type": "boolean"
                },
                "topology": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "versionClusterAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileVersionVersionClusterAssociation:NdbProfileVersionVersionClusterAssociation"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dbVersion",
                        "deprecated",
                        "description",
                        "engineType",
                        "id",
                        "name",
                        "owner",
                        "profileId",
                        "properties",
                        "propertiesMap",
                        "published",
                        "status",
                        "systemProfile",
                        "topology",
                        "type",
                        "version",
                        "versionClusterAssociations"
                    ]
                }
            }
        },
        "nutanix:index/NdbProfileVersionProperty:NdbProfileVersionProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbProfileVersionVersionClusterAssociation:NdbProfileVersionVersionClusterAssociation": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "optimizedForProvisioning": {
                    "type": "boolean"
                },
                "ownerId": {
                    "type": "string"
                },
                "profileVersionId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileVersionVersionClusterAssociationProperty:NdbProfileVersionVersionClusterAssociationProperty"
                    }
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dateCreated",
                        "dateModified",
                        "nxClusterId",
                        "optimizedForProvisioning",
                        "ownerId",
                        "profileVersionId",
                        "properties",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/NdbProfileVersionVersionClusterAssociationProperty:NdbProfileVersionVersionClusterAssociationProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseActionargument:NdbRegisterDatabaseActionargument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) name of argument\n"
                },
                "value": {
                    "type": "string",
                    "description": "- (Required) value for argument\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseDatabaseNode:NdbRegisterDatabaseDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "status of database\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseDatabaseNodeInfo:NdbRegisterDatabaseDatabaseNodeInfo"
                    },
                    "description": "info of instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseDatabaseNodeProperty:NdbRegisterDatabaseDatabaseNodeProperty"
                    },
                    "description": "properties of database created\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseDatabaseNodeProtectionDomain:NdbRegisterDatabaseDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseDatabaseNodeTag:NdbRegisterDatabaseDatabaseNodeTag"
                    },
                    "description": "tags\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "databaseId",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "dbserver",
                        "dbserverId",
                        "description",
                        "id",
                        "infos",
                        "name",
                        "primary",
                        "properties",
                        "protectionDomainId",
                        "protectionDomains",
                        "softwareInstallationId",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseDatabaseNodeInfo:NdbRegisterDatabaseDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of instance\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseDatabaseNodeProperty:NdbRegisterDatabaseDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseDatabaseNodeProtectionDomain:NdbRegisterDatabaseDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty:NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "properties of database created\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assocEntities",
                        "cloudId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eraCreated",
                        "id",
                        "name",
                        "ownerId",
                        "primaryHost",
                        "properties",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty:NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseDatabaseNodeTag:NdbRegisterDatabaseDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfo:NdbRegisterDatabaseInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfoBpgConfig:NdbRegisterDatabaseInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgConfigs",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfoBpgConfig:NdbRegisterDatabaseInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfoBpgConfigBpgDbParam:NdbRegisterDatabaseInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorage:NdbRegisterDatabaseInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfoBpgConfigVmProperty:NdbRegisterDatabaseInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgDbParams",
                        "storages",
                        "vmProperties"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfoBpgConfigBpgDbParam:NdbRegisterDatabaseInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "effectiveCacheSize",
                        "maintenanceWorkMem",
                        "maxParallelWorkersPerGather",
                        "maxWorkerProcesses",
                        "sharedBuffers",
                        "workMem"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorage:NdbRegisterDatabaseInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage:NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorageDataDisk:NdbRegisterDatabaseInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorageLogDisk:NdbRegisterDatabaseInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "archiveStorages",
                        "dataDisks",
                        "logDisks"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage:NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorageDataDisk:NdbRegisterDatabaseInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfoBpgConfigStorageLogDisk:NdbRegisterDatabaseInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseInfoBpgConfigVmProperty:NdbRegisterDatabaseInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dirtyBackgroundRatio",
                        "dirtyExpireCentisecs",
                        "dirtyRatio",
                        "dirtyWritebackCentisecs",
                        "nrHugepages",
                        "overcommitMemory",
                        "swappiness"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseLcmConfig:NdbRegisterDatabaseLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLcmConfigExpiryDetail:NdbRegisterDatabaseLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLcmConfigPostDeleteCommand:NdbRegisterDatabaseLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLcmConfigPreDeleteCommand:NdbRegisterDatabaseLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLcmConfigRefreshDetail:NdbRegisterDatabaseLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiryDetails",
                        "postDeleteCommands",
                        "preDeleteCommands",
                        "refreshDetails"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseLcmConfigExpiryDetail:NdbRegisterDatabaseLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteDatabase",
                        "deleteTimeMachine",
                        "deleteVm",
                        "effectiveTimestamp",
                        "expireInDays",
                        "expiryDateTimezone",
                        "expiryTimestamp",
                        "remindBeforeInDays",
                        "userCreated"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseLcmConfigPostDeleteCommand:NdbRegisterDatabaseLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseLcmConfigPreDeleteCommand:NdbRegisterDatabaseLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseLcmConfigRefreshDetail:NdbRegisterDatabaseLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastRefreshDate",
                        "nextRefreshDate",
                        "refreshDateTimezone",
                        "refreshInDays",
                        "refreshInHours",
                        "refreshInMonths",
                        "refreshTime"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseLinkedDatabase:NdbRegisterDatabaseLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "name of database\n"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "status of database\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLinkedDatabaseInfo:NdbRegisterDatabaseLinkedDatabaseInfo"
                    },
                    "description": "info of instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "infos",
                        "metric",
                        "name",
                        "parentDatabaseId",
                        "parentLinkedDatabaseId",
                        "snapshotId",
                        "status",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseLinkedDatabaseInfo:NdbRegisterDatabaseLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "info of instance\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabasePostgressInfo:NdbRegisterDatabasePostgressInfo": {
            "properties": {
                "allowMultipleDatabases": {
                    "type": "boolean",
                    "description": "allow multiple databases. Default is true\n"
                },
                "backupPolicy": {
                    "type": "string",
                    "description": "backup policy of database. Default is prefer_secondary.\n"
                },
                "dbName": {
                    "type": "string",
                    "description": "name of the database server VM on which the instance you want to register is running.\n"
                },
                "dbPassword": {
                    "type": "string",
                    "description": "database password\n",
                    "secret": true
                },
                "dbUser": {
                    "type": "string",
                    "description": "username of the NDB drive user account that has sudo access.\n"
                },
                "listenerPort": {
                    "type": "string",
                    "description": "listner port of database\n"
                },
                "postgresSoftwareHome": {
                    "type": "string",
                    "description": "path to the PostgreSQL home directory in which the PostgreSQL software is installed.\n"
                },
                "softwareHome": {
                    "type": "string",
                    "description": "path to the directory in which the PostgreSQL software is installed.\n"
                },
                "switchLog": {
                    "type": "boolean",
                    "description": "switch log of database. Default is true\n"
                },
                "vmIp": {
                    "type": "string",
                    "description": "VM IP of the database server VM on which the instance you want to register is running.\n"
                }
            },
            "type": "object",
            "required": [
                "dbName",
                "dbPassword",
                "listenerPort",
                "postgresSoftwareHome"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseProperty:NdbRegisterDatabaseProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTag:NdbRegisterDatabaseTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachine:NdbRegisterDatabaseTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean",
                    "description": "whether instance is cloned or not\n"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clustered or not. Default is false\n"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string",
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineProperty:NdbRegisterDatabaseTimeMachineProperty"
                    },
                    "description": "properties of database created\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineSchedule:NdbRegisterDatabaseTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineSla:NdbRegisterDatabaseTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineTag:NdbRegisterDatabaseTimeMachineTag"
                    },
                    "description": "tags\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "clone",
                        "clones",
                        "clustered",
                        "database",
                        "databaseId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eaStatus",
                        "id",
                        "metric",
                        "name",
                        "properties",
                        "scheduleId",
                        "schedules",
                        "scope",
                        "slaId",
                        "slaUpdateInProgress",
                        "slaUpdateMetadata",
                        "slas",
                        "sourceNxClusters",
                        "status",
                        "tags",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfo:NdbRegisterDatabaseTimeMachineInfo": {
            "properties": {
                "autotunelogdrive": {
                    "type": "boolean",
                    "description": "- (Optional) enable auto tune log drive. Default: true\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) description of time machine\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) name of time machine\n"
                },
                "schedule": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoSchedule:NdbRegisterDatabaseTimeMachineInfoSchedule",
                    "description": "- (Optional) schedule for snapshots\n"
                },
                "slaDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoSlaDetail:NdbRegisterDatabaseTimeMachineInfoSlaDetail"
                    },
                    "description": "-  (optional) SLA details for HA instance\n"
                },
                "slaid": {
                    "type": "string",
                    "description": "- (Optional) SLA ID for single instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoTag:NdbRegisterDatabaseTimeMachineInfoTag"
                    },
                    "description": "- (Optional) tags\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "schedule"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "schedule",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoSchedule:NdbRegisterDatabaseTimeMachineInfoSchedule": {
            "properties": {
                "continuousschedule": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule:NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule",
                    "description": "- (Optional) snapshot freq and log config\n"
                },
                "monthlyschedule": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule",
                    "description": "- (Optional) monthly snapshot config\n"
                },
                "quartelyschedule": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule",
                    "description": "- (Optional) quaterly snapshot config\n"
                },
                "snapshottimeofday": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday:NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday",
                    "description": "- (Optional) daily snapshot config\n"
                },
                "weeklyschedule": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule",
                    "description": "- (Optional) weekly snapshot config\n"
                },
                "yearlyschedule": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule",
                    "description": "- (Optional) yearly snapshot config\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule:NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logbackupinterval": {
                    "type": "integer"
                },
                "snapshotsperday": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logbackupinterval",
                "snapshotsperday"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule": {
            "properties": {
                "dayofmonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayofmonth",
                "enabled"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule": {
            "properties": {
                "dayofmonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startmonth": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayofmonth",
                "enabled",
                "startmonth"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday:NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday": {
            "properties": {
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "hours",
                "minutes",
                "seconds"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule": {
            "properties": {
                "dayofweek": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayofweek",
                "enabled"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule:NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule": {
            "properties": {
                "dayofmonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayofmonth",
                "enabled",
                "month"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoSlaDetail:NdbRegisterDatabaseTimeMachineInfoSlaDetail": {
            "properties": {
                "primarySlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla:NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla"
                    },
                    "description": "- (Required) primary sla details\n* `primary_sla.sla_id` :- (Required) sla id\n* `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla:NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla": {
            "properties": {
                "nxClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slaId": {
                    "type": "string",
                    "description": "description of SLA ID.\n"
                }
            },
            "type": "object",
            "required": [
                "slaId"
            ]
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineInfoTag:NdbRegisterDatabaseTimeMachineInfoTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineProperty:NdbRegisterDatabaseTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineSchedule:NdbRegisterDatabaseTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule:NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineScheduleDailySchedule:NdbRegisterDatabaseTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule:NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule:NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay:NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone on which instance is created xw\n"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule:NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineScheduleYearlySchedule:NdbRegisterDatabaseTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousSchedules",
                        "dailySchedules",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "globalPolicy",
                        "id",
                        "monthlySchedules",
                        "name",
                        "ownerId",
                        "quartelySchedules",
                        "referenceCount",
                        "snapshotTimeOfDays",
                        "startTime",
                        "systemPolicy",
                        "timeZone",
                        "uniqueName",
                        "weeklySchedules",
                        "yearlySchedules"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule:NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logBackupInterval",
                        "snapshotsPerDay"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineScheduleDailySchedule:NdbRegisterDatabaseTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule:NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule:NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "startMonth",
                        "startMonthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay:NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extra",
                        "hours",
                        "minutes",
                        "seconds"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule:NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfWeek",
                        "dayOfWeekValue",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineScheduleYearlySchedule:NdbRegisterDatabaseTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "month",
                        "monthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineSla:NdbRegisterDatabaseTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousRetention",
                        "currentActiveFrequency",
                        "dailyRetention",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "monthlyRetention",
                        "name",
                        "ownerId",
                        "pitrEnabled",
                        "quarterlyRetention",
                        "referenceCount",
                        "systemSla",
                        "uniqueName",
                        "weeklyRetention",
                        "yearlyRetention"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDatabaseTimeMachineTag:NdbRegisterDatabaseTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDbserverCredential:NdbRegisterDbserverCredential": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "nutanix:index/NdbRegisterDbserverPostgresDatabase:NdbRegisterDbserverPostgresDatabase": {
            "properties": {
                "listenerPort": {
                    "type": "string"
                },
                "postgresSoftwareHome": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbRegisterDbserverProperty:NdbRegisterDbserverProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbRegisterDbserverTag:NdbRegisterDbserverTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseDatabaseNode:NdbScaleDatabaseDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseDatabaseNodeInfo:NdbScaleDatabaseDatabaseNodeInfo"
                    }
                },
                "name": {
                    "type": "string"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseDatabaseNodeProperty:NdbScaleDatabaseDatabaseNodeProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseDatabaseNodeProtectionDomain:NdbScaleDatabaseDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseDatabaseNodeTag:NdbScaleDatabaseDatabaseNodeTag"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "databaseId",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "dbserver",
                        "dbserverId",
                        "description",
                        "id",
                        "infos",
                        "name",
                        "primary",
                        "properties",
                        "protectionDomainId",
                        "protectionDomains",
                        "softwareInstallationId",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseDatabaseNodeInfo:NdbScaleDatabaseDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseDatabaseNodeProperty:NdbScaleDatabaseDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseDatabaseNodeProtectionDomain:NdbScaleDatabaseDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseDatabaseNodeProtectionDomainProperty:NdbScaleDatabaseDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assocEntities",
                        "cloudId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eraCreated",
                        "id",
                        "name",
                        "ownerId",
                        "primaryHost",
                        "properties",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseDatabaseNodeProtectionDomainProperty:NdbScaleDatabaseDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseDatabaseNodeTag:NdbScaleDatabaseDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfo:NdbScaleDatabaseInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfoBpgConfig:NdbScaleDatabaseInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgConfigs",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfoBpgConfig:NdbScaleDatabaseInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfoBpgConfigBpgDbParam:NdbScaleDatabaseInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfoBpgConfigStorage:NdbScaleDatabaseInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfoBpgConfigVmProperty:NdbScaleDatabaseInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bpgDbParams",
                        "storages",
                        "vmProperties"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfoBpgConfigBpgDbParam:NdbScaleDatabaseInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "effectiveCacheSize",
                        "maintenanceWorkMem",
                        "maxParallelWorkersPerGather",
                        "maxWorkerProcesses",
                        "sharedBuffers",
                        "workMem"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfoBpgConfigStorage:NdbScaleDatabaseInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage:NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfoBpgConfigStorageDataDisk:NdbScaleDatabaseInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfoBpgConfigStorageLogDisk:NdbScaleDatabaseInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "archiveStorages",
                        "dataDisks",
                        "logDisks"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage:NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfoBpgConfigStorageDataDisk:NdbScaleDatabaseInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfoBpgConfigStorageLogDisk:NdbScaleDatabaseInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "size"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseInfoBpgConfigVmProperty:NdbScaleDatabaseInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dirtyBackgroundRatio",
                        "dirtyExpireCentisecs",
                        "dirtyRatio",
                        "dirtyWritebackCentisecs",
                        "nrHugepages",
                        "overcommitMemory",
                        "swappiness"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseLcmConfig:NdbScaleDatabaseLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseLcmConfigExpiryDetail:NdbScaleDatabaseLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseLcmConfigPostDeleteCommand:NdbScaleDatabaseLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseLcmConfigPreDeleteCommand:NdbScaleDatabaseLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseLcmConfigRefreshDetail:NdbScaleDatabaseLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiryDetails",
                        "postDeleteCommands",
                        "preDeleteCommands",
                        "refreshDetails"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseLcmConfigExpiryDetail:NdbScaleDatabaseLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteDatabase",
                        "deleteTimeMachine",
                        "deleteVm",
                        "effectiveTimestamp",
                        "expireInDays",
                        "expiryDateTimezone",
                        "expiryTimestamp",
                        "remindBeforeInDays",
                        "userCreated"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseLcmConfigPostDeleteCommand:NdbScaleDatabaseLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseLcmConfigPreDeleteCommand:NdbScaleDatabaseLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "command"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseLcmConfigRefreshDetail:NdbScaleDatabaseLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastRefreshDate",
                        "nextRefreshDate",
                        "refreshDateTimezone",
                        "refreshInDays",
                        "refreshInHours",
                        "refreshInMonths",
                        "refreshTime"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseLinkedDatabase:NdbScaleDatabaseLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseLinkedDatabaseInfo:NdbScaleDatabaseLinkedDatabaseInfo"
                    }
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "databaseStatus",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "infos",
                        "metric",
                        "name",
                        "parentDatabaseId",
                        "parentLinkedDatabaseId",
                        "snapshotId",
                        "status",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseLinkedDatabaseInfo:NdbScaleDatabaseLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "info",
                        "secureInfo"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseProperty:NdbScaleDatabaseProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTag:NdbScaleDatabaseTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachine:NdbScaleDatabaseTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineProperty:NdbScaleDatabaseTimeMachineProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineSchedule:NdbScaleDatabaseTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineSla:NdbScaleDatabaseTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineTag:NdbScaleDatabaseTimeMachineTag"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "clone",
                        "clones",
                        "clustered",
                        "database",
                        "databaseId",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "eaStatus",
                        "id",
                        "metric",
                        "name",
                        "properties",
                        "scheduleId",
                        "schedules",
                        "scope",
                        "slaId",
                        "slaUpdateInProgress",
                        "slaUpdateMetadata",
                        "slas",
                        "sourceNxClusters",
                        "status",
                        "tags",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineProperty:NdbScaleDatabaseTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "refId",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineSchedule:NdbScaleDatabaseTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineScheduleContinuousSchedule:NdbScaleDatabaseTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineScheduleDailySchedule:NdbScaleDatabaseTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineScheduleMonthlySchedule:NdbScaleDatabaseTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineScheduleQuartelySchedule:NdbScaleDatabaseTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay:NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineScheduleWeeklySchedule:NdbScaleDatabaseTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachineScheduleYearlySchedule:NdbScaleDatabaseTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousSchedules",
                        "dailySchedules",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "globalPolicy",
                        "id",
                        "monthlySchedules",
                        "name",
                        "ownerId",
                        "quartelySchedules",
                        "referenceCount",
                        "snapshotTimeOfDays",
                        "startTime",
                        "systemPolicy",
                        "timeZone",
                        "uniqueName",
                        "weeklySchedules",
                        "yearlySchedules"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineScheduleContinuousSchedule:NdbScaleDatabaseTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logBackupInterval",
                        "snapshotsPerDay"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineScheduleDailySchedule:NdbScaleDatabaseTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineScheduleMonthlySchedule:NdbScaleDatabaseTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineScheduleQuartelySchedule:NdbScaleDatabaseTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "startMonth",
                        "startMonthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay:NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extra",
                        "hours",
                        "minutes",
                        "seconds"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineScheduleWeeklySchedule:NdbScaleDatabaseTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfWeek",
                        "dayOfWeekValue",
                        "enabled"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineScheduleYearlySchedule:NdbScaleDatabaseTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayOfMonth",
                        "enabled",
                        "month",
                        "monthValue"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineSla:NdbScaleDatabaseTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "continuousRetention",
                        "currentActiveFrequency",
                        "dailyRetention",
                        "dateCreated",
                        "dateModified",
                        "description",
                        "id",
                        "monthlyRetention",
                        "name",
                        "ownerId",
                        "pitrEnabled",
                        "quarterlyRetention",
                        "referenceCount",
                        "systemSla",
                        "uniqueName",
                        "weeklyRetention",
                        "yearlyRetention"
                    ]
                }
            }
        },
        "nutanix:index/NdbScaleDatabaseTimeMachineTag:NdbScaleDatabaseTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "entityType",
                        "tagId",
                        "tagName",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbSoftwareVersionProfilePostgresDatabase:NdbSoftwareVersionProfilePostgresDatabase": {
            "properties": {
                "dbSoftwareNotes": {
                    "type": "string"
                },
                "osNotes": {
                    "type": "string"
                },
                "sourceDbserverId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/NdbSoftwareVersionProfileProperty:NdbSoftwareVersionProfileProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbSoftwareVersionProfileVersionClusterAssociation:NdbSoftwareVersionProfileVersionClusterAssociation": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "optimizedForProvisioning": {
                    "type": "boolean"
                },
                "ownerId": {
                    "type": "string"
                },
                "profileVersionId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfileVersionClusterAssociationProperty:NdbSoftwareVersionProfileVersionClusterAssociationProperty"
                    }
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dateCreated",
                        "dateModified",
                        "nxClusterId",
                        "optimizedForProvisioning",
                        "ownerId",
                        "profileVersionId",
                        "properties",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/NdbSoftwareVersionProfileVersionClusterAssociationProperty:NdbSoftwareVersionProfileVersionClusterAssociationProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NdbStretchedVlanMetadata:NdbStretchedVlanMetadata": {
            "properties": {
                "gateway": {
                    "type": "string"
                },
                "subnetMask": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gateway",
                        "subnetMask"
                    ]
                }
            }
        },
        "nutanix:index/NdbStretchedVlanVlansList:NdbStretchedVlanVlansList": {
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "managed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbStretchedVlanVlansListProperty:NdbStretchedVlanVlansListProperty"
                    }
                },
                "propertiesMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbStretchedVlanVlansListPropertiesMap:NdbStretchedVlanVlansListPropertiesMap"
                    }
                },
                "stretchedVlanId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "id",
                        "managed",
                        "name",
                        "properties",
                        "propertiesMaps",
                        "stretchedVlanId",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NdbStretchedVlanVlansListPropertiesMap:NdbStretchedVlanVlansListPropertiesMap": {
            "properties": {
                "vlanGateway": {
                    "type": "string"
                },
                "vlanPrimaryDns": {
                    "type": "string"
                },
                "vlanSecondaryDns": {
                    "type": "string"
                },
                "vlanSubnetMask": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vlanGateway",
                        "vlanPrimaryDns",
                        "vlanSecondaryDns",
                        "vlanSubnetMask"
                    ]
                }
            }
        },
        "nutanix:index/NdbStretchedVlanVlansListProperty:NdbStretchedVlanVlansListProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "secure",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListFilterParam:NetworkSecurityRuleAdRuleInboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListFilterParam:NetworkSecurityRuleAdRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListFilterParam:NetworkSecurityRuleAdRuleOutboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListFilterParam:NetworkSecurityRuleAdRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListFilterParam:NetworkSecurityRuleAppRuleInboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListFilterParam:NetworkSecurityRuleAppRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListFilterParam:NetworkSecurityRuleAppRuleOutboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListFilterParam:NetworkSecurityRuleAppRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/PbrDestination:PbrDestination": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                },
                "subnetIp": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/PbrProtocolParameters:PbrProtocolParameters": {
            "properties": {
                "icmp": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParametersIcmp:PbrProtocolParametersIcmp"
                },
                "protocolNumber": {
                    "type": "string"
                },
                "tcp": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParametersTcp:PbrProtocolParametersTcp"
                },
                "udp": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParametersUdp:PbrProtocolParametersUdp"
                }
            },
            "type": "object"
        },
        "nutanix:index/PbrProtocolParametersIcmp:PbrProtocolParametersIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer"
                },
                "icmpType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ]
        },
        "nutanix:index/PbrProtocolParametersTcp:PbrProtocolParametersTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersTcpDestinationPortRangeList:PbrProtocolParametersTcpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersTcpSourcePortRangeList:PbrProtocolParametersTcpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "destinationPortRangeLists",
                        "sourcePortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersTcpDestinationPortRangeList:PbrProtocolParametersTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersTcpSourcePortRangeList:PbrProtocolParametersTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersUdp:PbrProtocolParametersUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersUdpDestinationPortRangeList:PbrProtocolParametersUdpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersUdpSourcePortRangeList:PbrProtocolParametersUdpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "destinationPortRangeLists",
                        "sourcePortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersUdpDestinationPortRangeList:PbrProtocolParametersUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersUdpSourcePortRangeList:PbrProtocolParametersUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrSource:PbrSource": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                },
                "subnetIp": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcp:ProjectAcp": {
            "properties": {
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAcpContextFilterList:ProjectAcpContextFilterList"
                    },
                    "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for project.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "roleReference": {
                    "$ref": "#/types/nutanix:index/ProjectAcpRoleReference:ProjectAcpRoleReference",
                    "description": "Reference to role.\n"
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAcpUserGroupReferenceList:ProjectAcpUserGroupReferenceList"
                    },
                    "description": "List of Reference of users groups.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAcpUserReferenceList:ProjectAcpUserReferenceList"
                    },
                    "description": "List of Reference of users.\n"
                }
            },
            "type": "object",
            "required": [
                "roleReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contextFilterLists",
                        "metadata",
                        "name",
                        "roleReference"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcpContextFilterList:ProjectAcpContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAcpContextFilterListEntityFilterExpressionList:ProjectAcpContextFilterListEntityFilterExpressionList"
                    },
                    "description": "(Required) A list of Entity filter expressions.\n"
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAcpContextFilterListScopeFilterExpressionList:ProjectAcpContextFilterListScopeFilterExpressionList"
                    },
                    "description": "- (Optional) Filter the scope of an Access Control Policy.\n"
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists"
            ]
        },
        "nutanix:index/ProjectAcpContextFilterListEntityFilterExpressionList:ProjectAcpContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "description": "- (Optional)  The LHS of the filter expression - the entity type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- (Required) The operator in the filter expression.\n"
                },
                "rightHandSide": {
                    "$ref": "#/types/nutanix:index/ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide:ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide",
                    "description": "- (Required) The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "rightHandSide"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "leftHandSideEntityType",
                        "operator",
                        "rightHandSide"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide:ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "$ref": "#/types/nutanix:index/ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories:ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories",
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "- (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "categories",
                        "collection",
                        "uuidLists"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories:ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "values"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcpContextFilterListScopeFilterExpressionList:ProjectAcpContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "description": "- (Optional)  The LHS of the filter expression - the scope type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- (Required) The operator in the filter expression.\n"
                },
                "rightHandSide": {
                    "$ref": "#/types/nutanix:index/ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide:ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide",
                    "description": "- (Required) The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSide"
            ]
        },
        "nutanix:index/ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide:ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "$ref": "#/types/nutanix:index/ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories:ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories",
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "- (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "categories",
                        "collection",
                        "uuidLists"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories:ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "values"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcpRoleReference:ProjectAcpRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectAcpUserGroupReferenceList:ProjectAcpUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ]
        },
        "nutanix:index/ProjectAcpUserReferenceList:ProjectAcpUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ]
        },
        "nutanix:index/ProjectCategory:ProjectCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ProjectClusterReferenceList:ProjectClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectDefaultEnvironmentReference:ProjectDefaultEnvironmentReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectResourceDomain:ProjectResourceDomain": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectResourceDomainResource:ProjectResourceDomainResource"
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "nutanix:index/ProjectResourceDomainResource:ProjectResourceDomainResource": {
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "resourceType": {
                    "type": "string"
                },
                "units": {
                    "type": "string"
                },
                "value": {
                    "type": "integer",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "limit",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "limit",
                        "resourceType",
                        "units",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectTunnelReferenceList:ProjectTunnelReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectUserGroupList:ProjectUserGroupList": {
            "properties": {
                "directoryServiceOus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserGroupListDirectoryServiceOus:ProjectUserGroupListDirectoryServiceOus"
                    }
                },
                "directoryServiceUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserGroupListDirectoryServiceUserGroup:ProjectUserGroupListDirectoryServiceUserGroup"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "samlUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserGroupListSamlUserGroup:ProjectUserGroupListSamlUserGroup"
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/ProjectUserGroupListDirectoryServiceOus:ProjectUserGroupListDirectoryServiceOus": {
            "properties": {
                "distinguishedName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "distinguishedName"
            ]
        },
        "nutanix:index/ProjectUserGroupListDirectoryServiceUserGroup:ProjectUserGroupListDirectoryServiceUserGroup": {
            "properties": {
                "distinguishedName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "distinguishedName"
            ]
        },
        "nutanix:index/ProjectUserGroupListSamlUserGroup:ProjectUserGroupListSamlUserGroup": {
            "properties": {
                "idpUuid": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                }
            },
            "type": "object",
            "required": [
                "idpUuid",
                "name"
            ]
        },
        "nutanix:index/ProjectUserList:ProjectUserList": {
            "properties": {
                "directoryServiceUser": {
                    "$ref": "#/types/nutanix:index/ProjectUserListDirectoryServiceUser:ProjectUserListDirectoryServiceUser"
                },
                "identityProviderUser": {
                    "$ref": "#/types/nutanix:index/ProjectUserListIdentityProviderUser:ProjectUserListIdentityProviderUser"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "directoryServiceUser",
                        "identityProviderUser"
                    ]
                }
            }
        },
        "nutanix:index/ProjectUserListDirectoryServiceUser:ProjectUserListDirectoryServiceUser": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string"
                },
                "directoryServiceReference": {
                    "$ref": "#/types/nutanix:index/ProjectUserListDirectoryServiceUserDirectoryServiceReference:ProjectUserListDirectoryServiceUserDirectoryServiceReference"
                },
                "userPrincipalName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "directoryServiceReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultUserPrincipalName",
                        "directoryServiceReference",
                        "userPrincipalName"
                    ]
                }
            }
        },
        "nutanix:index/ProjectUserListDirectoryServiceUserDirectoryServiceReference:ProjectUserListDirectoryServiceUserDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectUserListIdentityProviderUser:ProjectUserListIdentityProviderUser": {
            "properties": {
                "identityProviderReference": {
                    "$ref": "#/types/nutanix:index/ProjectUserListIdentityProviderUserIdentityProviderReference:ProjectUserListIdentityProviderUserIdentityProviderReference"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "identityProviderReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "identityProviderReference",
                        "username"
                    ]
                }
            }
        },
        "nutanix:index/ProjectUserListIdentityProviderUserIdentityProviderReference:ProjectUserListIdentityProviderUserIdentityProviderReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectVpcReferenceList:ProjectVpcReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList": {
            "properties": {
                "destinationAvailabilityZoneIndex": {
                    "type": "integer"
                },
                "snapshotScheduleLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList"
                    }
                },
                "sourceAvailabilityZoneIndex": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "destinationAvailabilityZoneIndex",
                        "snapshotScheduleLists",
                        "sourceAvailabilityZoneIndex"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList": {
            "properties": {
                "autoSuspendTimeoutSecs": {
                    "type": "integer"
                },
                "localSnapshotRetentionPolicy": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy"
                },
                "recoveryPointObjectiveSecs": {
                    "type": "integer"
                },
                "remoteSnapshotRetentionPolicy": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy"
                },
                "snapshotType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "recoveryPointObjectiveSecs"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoSuspendTimeoutSecs",
                        "localSnapshotRetentionPolicy",
                        "recoveryPointObjectiveSecs",
                        "remoteSnapshotRetentionPolicy",
                        "snapshotType"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer"
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer"
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "numSnapshots",
                        "rollupRetentionPolicyMultiple",
                        "rollupRetentionPolicySnapshotIntervalType"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer"
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer"
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "numSnapshots",
                        "rollupRetentionPolicyMultiple",
                        "rollupRetentionPolicySnapshotIntervalType"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter": {
            "properties": {
                "kindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilterParam:ProtectionRuleCategoryFilterParam"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kindLists",
                        "params",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleCategoryFilterParam:ProtectionRuleCategoryFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityZoneUrl",
                        "clusterUuid"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters": {
            "properties": {
                "floatingIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentList"
                    }
                },
                "networkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingList:RecoveryPlanParametersNetworkMappingList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "floatingIpAssignmentLists",
                        "networkMappingLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "vmIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList"
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "vmIpAssignmentLists"
            ]
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList": {
            "properties": {
                "recoveryFloatingIpConfig": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig"
                },
                "testFloatingIpConfig": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig"
                },
                "vmNicInformation": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation"
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference"
                }
            },
            "type": "object",
            "required": [
                "vmNicInformation",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recoveryFloatingIpConfig",
                        "testFloatingIpConfig",
                        "vmNicInformation",
                        "vmReference"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "shouldAllocateDynamically": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "shouldAllocateDynamically"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "shouldAllocateDynamically": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "shouldAllocateDynamically"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingList:RecoveryPlanParametersNetworkMappingList": {
            "properties": {
                "areNetworksStretched": {
                    "type": "boolean"
                },
                "availabilityZoneNetworkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "areNetworksStretched",
                        "availabilityZoneNetworkMappingLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList"
                    }
                },
                "recoveryIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList"
                    }
                },
                "recoveryNetwork": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork"
                },
                "testIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList"
                    }
                },
                "testNetwork": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityZoneUrl",
                        "clusterReferenceLists",
                        "recoveryIpAssignmentLists",
                        "recoveryNetwork",
                        "testIpAssignmentLists",
                        "testNetwork"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList"
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference"
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList"
                    }
                },
                "useVpcReference": {
                    "type": "boolean"
                },
                "virtualNetworkReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference"
                },
                "vpcReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "subnetLists",
                        "useVpcReference",
                        "virtualNetworkReference",
                        "vpcReference"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string"
                },
                "gatewayIp": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalConnectivityState",
                        "gatewayIp",
                        "prefixLength"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList"
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference"
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList"
                    }
                },
                "useVpcReference": {
                    "type": "boolean"
                },
                "virtualNetworkReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference"
                },
                "vpcReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "subnetLists",
                        "useVpcReference",
                        "virtualNetworkReference",
                        "vpcReference"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string"
                },
                "gatewayIp": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalConnectivityState",
                        "gatewayIp",
                        "prefixLength"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList": {
            "properties": {
                "delayTimeSecs": {
                    "type": "integer"
                },
                "stageUuid": {
                    "type": "string"
                },
                "stageWork": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWork:RecoveryPlanStageListStageWork"
                }
            },
            "type": "object",
            "required": [
                "stageWork"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "delayTimeSecs",
                        "stageUuid",
                        "stageWork"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWork:RecoveryPlanStageListStageWork": {
            "properties": {
                "recoverEntities": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntities:RecoveryPlanStageListStageWorkRecoverEntities"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recoverEntities"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntities:RecoveryPlanStageListStageWorkRecoverEntities": {
            "properties": {
                "entityInfoLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityInfoLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList": {
            "properties": {
                "anyEntityReferenceKind": {
                    "type": "string"
                },
                "anyEntityReferenceName": {
                    "type": "string"
                },
                "anyEntityReferenceUuid": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory"
                    }
                },
                "scriptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scriptLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList": {
            "properties": {
                "enableScriptExec": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enableScriptExec"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableScriptExec",
                        "timeout"
                    ]
                }
            }
        },
        "nutanix:index/RoleCategory:RoleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the role.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/RoleOwnerReference:RoleOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the role.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the role.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RoleProjectReference:RoleProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the role.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList": {
            "properties": {
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceListIcmpTypeCodeList:ServiceGroupServiceListIcmpTypeCodeList"
                    },
                    "description": "- (Optional) ICMP type code list\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "- (Optional) The UserPrincipalName of the user from the directory service.\n"
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceListTcpPortRangeList:ServiceGroupServiceListTcpPortRangeList"
                    },
                    "description": "- (Optional) TCP Port range list\n"
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceListUdpPortRangeList:ServiceGroupServiceListUdpPortRangeList"
                    },
                    "description": "- (Optional) UDP port range list\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceListIcmpTypeCodeList:ServiceGroupServiceListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceListTcpPortRangeList:ServiceGroupServiceListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceListUdpPortRangeList:ServiceGroupServiceListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop": {
            "properties": {
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "Reference to a subnet.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "Destination ip with prefix.\n"
                },
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "Reference to a subnet. Supported with 2022.x .\n"
                },
                "vpnConnectionReferenceUuid": {
                    "type": "string",
                    "description": "Reference to a vpn connection.\n"
                }
            },
            "type": "object",
            "required": [
                "destination"
            ]
        },
        "nutanix:index/SubnetCategory:SubnetCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Optional) Subnet name (Readonly).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/UserAccessControlPolicyReferenceList:UserAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/UserCategory:UserCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string"
                },
                "directoryServiceReference": {
                    "$ref": "#/types/nutanix:index/UserDirectoryServiceUserDirectoryServiceReference:UserDirectoryServiceUserDirectoryServiceReference",
                    "description": "- (Optional) The reference to a directory service. See #reference for to look the supported attributes.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "- (Optional) The UserPrincipalName of the user from the directory service.\n"
                }
            },
            "type": "object",
            "required": [
                "directoryServiceReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultUserPrincipalName",
                        "directoryServiceReference",
                        "userPrincipalName"
                    ]
                }
            }
        },
        "nutanix:index/UserDirectoryServiceUserDirectoryServiceReference:UserDirectoryServiceUserDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/UserGroupsCategory:UserGroupsCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- subnet name.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/UserGroupsDirectoryServiceOus:UserGroupsDirectoryServiceOus": {
            "properties": {
                "distinguishedName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "distinguishedName"
            ]
        },
        "nutanix:index/UserGroupsDirectoryServiceUserGroup:UserGroupsDirectoryServiceUserGroup": {
            "properties": {
                "distinguishedName": {
                    "type": "string",
                    "description": "- (Required) The Distinguished name for the user group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "distinguishedName"
            ]
        },
        "nutanix:index/UserGroupsSamlUserGroup:UserGroupsSamlUserGroup": {
            "properties": {
                "idpUuid": {
                    "type": "string",
                    "description": "- (Required) The UUID of the Identity Provider that the group belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name of the SAML group which the IDP provides.\n"
                }
            },
            "type": "object",
            "required": [
                "idpUuid",
                "name"
            ]
        },
        "nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser": {
            "properties": {
                "identityProviderReference": {
                    "$ref": "#/types/nutanix:index/UserIdentityProviderUserIdentityProviderReference:UserIdentityProviderUserIdentityProviderReference",
                    "description": "- (Optional) The reference to a identity provider. See #reference for to look the supported attributes.\n"
                },
                "username": {
                    "type": "string",
                    "description": "- (Optional) The username from identity provider. Name ID for SAML Identity Provider.\n"
                }
            },
            "type": "object",
            "required": [
                "identityProviderReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "identityProviderReference",
                        "username"
                    ]
                }
            }
        },
        "nutanix:index/UserIdentityProviderUserIdentityProviderReference:UserIdentityProviderUserIdentityProviderReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/UserProjectReferenceList:UserProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineCategory:VirtualMachineCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the vm.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList": {
            "properties": {
                "dataSourceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a data source.\n\nThe disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).\n"
                },
                "deviceProperties": {
                    "$ref": "#/types/nutanix:index/VirtualMachineDiskListDeviceProperties:VirtualMachineDiskListDeviceProperties",
                    "description": "Properties to a device.\n"
                },
                "diskSizeBytes": {
                    "type": "integer",
                    "description": "Size of the disk in Bytes.\n"
                },
                "diskSizeMib": {
                    "type": "integer",
                    "description": "Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.\n"
                },
                "storageConfig": {
                    "$ref": "#/types/nutanix:index/VirtualMachineDiskListStorageConfig:VirtualMachineDiskListStorageConfig"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (Optional) The device ID which is used to uniquely identify this particular disk.\n"
                },
                "volumeGroupReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dataSourceReference",
                        "deviceProperties",
                        "diskSizeBytes",
                        "diskSizeMib",
                        "storageConfig",
                        "uuid",
                        "volumeGroupReference"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskListDeviceProperties:VirtualMachineDiskListDeviceProperties": {
            "properties": {
                "deviceType": {
                    "type": "string",
                    "description": "- A Disk type (default: DISK).\n"
                },
                "diskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Address of disk to boot from.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskAddress"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskListStorageConfig:VirtualMachineDiskListStorageConfig": {
            "properties": {
                "flashMode": {
                    "type": "string",
                    "description": "- State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.\n"
                },
                "storageContainerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineDiskListStorageConfigStorageContainerReference:VirtualMachineDiskListStorageConfigStorageContainerReference"
                    },
                    "description": "- Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.\n* `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.\n* `storage_container_reference.#.kind`: - kind of the container reference\n* `storage_container_reference.#.name`: - name of the container reference\n* `storage_container_reference.#.uuid`: - uiid of the container reference\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "storageContainerReferences"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskListStorageConfigStorageContainerReference:VirtualMachineDiskListStorageConfigStorageContainerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the vm.\n"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "url",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList": {
            "properties": {
                "deviceId": {
                    "type": "integer",
                    "description": "- (Computed) The device ID of the GPU.\n"
                },
                "fraction": {
                    "type": "integer",
                    "description": "Fraction of the physical GPU assigned.\n"
                },
                "frameBufferSizeMib": {
                    "type": "integer",
                    "description": "- (ReadOnly) GPU frame buffer size in MiB.\n"
                },
                "guestDriverVersion": {
                    "type": "string",
                    "description": "- (ReadOnly) Last determined guest driver version.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "- (Optional) The mode of this GPU.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (ReadOnly) Name of the GPU resource.\n"
                },
                "numVirtualDisplayHeads": {
                    "type": "integer",
                    "description": "- (ReadOnly) Number of supported virtual display heads.\n"
                },
                "pciAddress": {
                    "type": "string",
                    "description": "GPU {segment:bus:device:function} (sbdf) address if assigned.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (ReadOnly) UUID of the GPU.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "- (Optional) The vendor of the GPU.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceId",
                        "fraction",
                        "frameBufferSizeMib",
                        "guestDriverVersion",
                        "mode",
                        "name",
                        "numVirtualDisplayHeads",
                        "pciAddress",
                        "uuid",
                        "vendor"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicList:VirtualMachineNicList": {
            "properties": {
                "ipEndpointLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicListIpEndpointList:VirtualMachineNicListIpEndpointList"
                    },
                    "description": "- IP endpoints for the adapter. Currently, IPv4 addresses are supported.\n"
                },
                "isConnected": {
                    "type": "string"
                },
                "macAddress": {
                    "type": "string",
                    "description": "- The MAC address for the adapter.\n"
                },
                "model": {
                    "type": "string",
                    "description": "- The model of this NIC. (Options : VIRTIO , E1000).\n"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a network_function_chain.\n"
                },
                "networkFunctionNicType": {
                    "type": "string",
                    "description": "- The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).\n"
                },
                "nicType": {
                    "type": "string",
                    "description": "- The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).\n"
                },
                "numQueues": {
                    "type": "integer",
                    "description": "- The number of tx/rx queue pairs for this NIC.\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "- The name of the subnet reference to.\n"
                },
                "subnetUuid": {
                    "type": "string",
                    "description": "- The reference to a subnet.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipEndpointLists",
                        "macAddress",
                        "model",
                        "networkFunctionChainReference",
                        "networkFunctionNicType",
                        "nicType",
                        "numQueues",
                        "subnetName",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicListIpEndpointList:VirtualMachineNicListIpEndpointList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "- Address string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "- Address type. It can only be \"ASSIGNED\" in the spec. If no type is specified in the spec, the default type is set to \"ASSIGNED\". (Options : ASSIGNED , LEARNED)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicListStatus:VirtualMachineNicListStatus": {
            "properties": {
                "floatingIp": {
                    "type": "string"
                },
                "ipEndpointLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicListStatusIpEndpointList:VirtualMachineNicListStatusIpEndpointList"
                    }
                },
                "isConnected": {
                    "type": "string"
                },
                "macAddress": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "networkFunctionNicType": {
                    "type": "string"
                },
                "nicType": {
                    "type": "string"
                },
                "numQueues": {
                    "type": "integer"
                },
                "subnetName": {
                    "type": "string"
                },
                "subnetUuid": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "floatingIp",
                        "ipEndpointLists",
                        "isConnected",
                        "macAddress",
                        "model",
                        "networkFunctionChainReference",
                        "networkFunctionNicType",
                        "nicType",
                        "numQueues",
                        "subnetName",
                        "subnetUuid",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicListStatusIpEndpointList:VirtualMachineNicListStatusIpEndpointList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "- Address string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "- Address type. It can only be \"ASSIGNED\" in the spec. If no type is specified in the spec, the default type is set to \"ASSIGNED\". (Options : ASSIGNED , LEARNED)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList": {
            "properties": {
                "index": {
                    "type": "integer",
                    "description": "- Index of the serial port (int).\n"
                },
                "isConnected": {
                    "type": "boolean",
                    "description": "- Indicates whether the serial port connection is connected or not (`true` or `false`).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "index",
                        "isConnected"
                    ]
                }
            }
        },
        "nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip"
                    ]
                }
            }
        },
        "nutanix:index/VpcExternalSubnetListStatus:VpcExternalSubnetListStatus": {
            "properties": {
                "activeGatewayNode": {
                    "$ref": "#/types/nutanix:index/VpcExternalSubnetListStatusActiveGatewayNode:VpcExternalSubnetListStatusActiveGatewayNode"
                },
                "externalIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeGatewayNode",
                        "externalIpLists",
                        "externalSubnetReference"
                    ]
                }
            }
        },
        "nutanix:index/VpcExternalSubnetListStatusActiveGatewayNode:VpcExternalSubnetListStatusActiveGatewayNode": {
            "properties": {
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostReference",
                        "ipAddress"
                    ]
                }
            }
        },
        "nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length.\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ]
        },
        "nutanix:index/getAccessControlPoliciesEntity:getAccessControlPoliciesEntity": {
            "properties": {
                "accessControlPolicyId": {
                    "type": "string"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityCategory:getAccessControlPoliciesEntityCategory"
                    },
                    "description": "- The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterList:getAccessControlPoliciesEntityContextFilterList"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "- The description of the Access Control Policy.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The Access Control Policy kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a project.\n"
                },
                "roleReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityRoleReference:getAccessControlPoliciesEntityRoleReference"
                    },
                    "description": "- The reference to a role.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the Access Control Policy.\n"
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityUserGroupReferenceList:getAccessControlPoliciesEntityUserGroupReferenceList"
                    },
                    "description": "- The User group(s) being assigned a given role.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityUserReferenceList:getAccessControlPoliciesEntityUserReferenceList"
                    },
                    "description": "- The User(s) being assigned a given role.\n"
                }
            },
            "type": "object",
            "required": [
                "accessControlPolicyId",
                "apiVersion",
                "categories",
                "contextFilterLists",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "projectReference",
                "roleReferences",
                "state",
                "userGroupReferenceLists",
                "userReferenceLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityCategory:getAccessControlPoliciesEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterList:getAccessControlPoliciesEntityContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList"
                    },
                    "description": "A list of Entity filter expressions.\n"
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList"
                    },
                    "description": "- The device ID which is used to uniquely identify this particular disk.\n"
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists",
                "scopeFilterExpressionLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "description": "-  The LHS of the filter expression - the entity type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- The operator in the filter expression.\n"
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide"
                    },
                    "description": "- The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSideEntityType",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory"
                    },
                    "description": "- The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "-  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "description": "-  The LHS of the filter expression - the scope type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- The operator in the filter expression.\n"
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide"
                    },
                    "description": "- The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory"
                    },
                    "description": "- The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "-  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityRoleReference:getAccessControlPoliciesEntityRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityUserGroupReferenceList:getAccessControlPoliciesEntityUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityUserReferenceList:getAccessControlPoliciesEntityUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesMetadata:getAccessControlPoliciesMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyCategory:getAccessControlPolicyCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterList:getAccessControlPolicyContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionList:getAccessControlPolicyContextFilterListEntityFilterExpressionList"
                    },
                    "description": "A list of Entity filter expressions.\n"
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionList:getAccessControlPolicyContextFilterListScopeFilterExpressionList"
                    },
                    "description": "- The device ID which is used to uniquely identify this particular disk.\n"
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists",
                "scopeFilterExpressionLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionList:getAccessControlPolicyContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "description": "-  The LHS of the filter expression - the entity type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- The operator in the filter expression.\n"
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide"
                    },
                    "description": "- The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSideEntityType",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory"
                    },
                    "description": "- The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "-  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionList:getAccessControlPolicyContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "description": "-  The LHS of the filter expression - the scope type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- The operator in the filter expression.\n"
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide"
                    },
                    "description": "- The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory"
                    },
                    "description": "- The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "-  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyRoleReference:getAccessControlPolicyRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyUserGroupReferenceList:getAccessControlPolicyUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyUserReferenceList:getAccessControlPolicyUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupIpAddressBlockList:getAddressGroupIpAddressBlockList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "- (ReadOnly) IP of the address block\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "- (ReadOnly) Prefix length of address block in int\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntity:getAddressGroupsEntity": {
            "properties": {
                "addressGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAddressGroupsEntityAddressGroup:getAddressGroupsEntityAddressGroup"
                    },
                    "description": "Information about address_group\n"
                },
                "associatedPoliciesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAddressGroupsEntityAssociatedPoliciesList:getAddressGroupsEntityAssociatedPoliciesList"
                    },
                    "description": "List of associated policies to address group\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (ReadOnly) UUID of associated policy\n"
                }
            },
            "type": "object",
            "required": [
                "addressGroups",
                "associatedPoliciesLists",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntityAddressGroup:getAddressGroupsEntityAddressGroup": {
            "properties": {
                "addressGroupString": {
                    "type": "string",
                    "description": "- (ReadOnly) Address Group string\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (ReadOnly) Description of the address group\n"
                },
                "ipAddressBlockLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAddressGroupsEntityAddressGroupIpAddressBlockList:getAddressGroupsEntityAddressGroupIpAddressBlockList"
                    },
                    "description": "- (ReadOnly) list of IP address blocks with their prefix length\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (ReadOnly) Name of associated policy\n"
                }
            },
            "type": "object",
            "required": [
                "addressGroupString",
                "description",
                "ipAddressBlockLists",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntityAddressGroupIpAddressBlockList:getAddressGroupsEntityAddressGroupIpAddressBlockList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "- (ReadOnly) IP of the address block\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "- (ReadOnly) Prefix length of address block in int\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntityAssociatedPoliciesList:getAddressGroupsEntityAssociatedPoliciesList": {
            "properties": {
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "- (ReadOnly) Name of associated policy\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (ReadOnly) UUID of associated policy\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsMetadata:getAddressGroupsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "description": "(Optional) Filter in FIQL Syntax\n"
                },
                "kind": {
                    "type": "string"
                },
                "length": {
                    "type": "integer",
                    "description": "(Optional) Integer\n"
                },
                "offset": {
                    "type": "integer",
                    "description": "(Optional) Integer\n"
                },
                "sortAttribute": {
                    "type": "string",
                    "description": "(Optional) attribute to sort\n"
                },
                "sortOrder": {
                    "type": "string",
                    "description": "(Optional) order of sorting\n"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAssertHelperCheck:getAssertHelperCheck": {
            "properties": {
                "condition": {
                    "type": "boolean"
                },
                "errorMessage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "errorMessage"
            ]
        },
        "nutanix:index/getClusterAuthorizedPublicKeyList:getClusterAuthorizedPublicKeyList": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Represents the name of cluster\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterCaCertificateList:getClusterCaCertificateList": {
            "properties": {
                "caName": {
                    "type": "string"
                },
                "certificate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caName",
                "certificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterCategory:getClusterCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the key name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterHttpProxyList:getClusterHttpProxyList": {
            "properties": {
                "address": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "credentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "proxyTypeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "credentials",
                "proxyTypeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterHttpProxyWhitelist:getClusterHttpProxyWhitelist": {
            "properties": {
                "target": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "target",
                "targetType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterManagementServerList:getClusterManagementServerList": {
            "properties": {
                "drsEnabled": {
                    "type": "boolean"
                },
                "ip": {
                    "type": "string"
                },
                "statusLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "drsEnabled",
                "ip",
                "statusLists",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterNode:getClusterNode": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntity:getClustersEntity": {
            "properties": {
                "analysisVmEfficiencyMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)\n"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The API version.\n"
                },
                "authorizedPublicKeyLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityAuthorizedPublicKeyList:getClustersEntityAuthorizedPublicKeyList"
                    }
                },
                "build": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Cluster build details.\n"
                },
                "caCertificateLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityCaCertificateList:getClustersEntityCaCertificateList"
                    },
                    "description": "- Zone name used in value of TZ environment variable.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityCategory:getClustersEntityCategory"
                    },
                    "description": "- Categories for the image.\n"
                },
                "certificationSigningInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Customer information used in Certificate Signing Request for creating digital certificates.\n"
                },
                "clientAuth": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Client authentication config.\n"
                },
                "clusterArch": {
                    "type": "string",
                    "description": "- Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)\n"
                },
                "domainServerCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Cluster domain credentials.\n"
                },
                "domainServerName": {
                    "type": "string",
                    "description": "- Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.\n"
                },
                "domainServerNameserver": {
                    "type": "string",
                    "description": "-  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.\n"
                },
                "enabledFeatureLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- Array of enabled features.\n"
                },
                "encryptionStatus": {
                    "type": "string",
                    "description": "- Cluster encryption status.\n"
                },
                "externalDataServicesIp": {
                    "type": "string",
                    "description": "- The cluster IP address that provides external entities access to various cluster data services.\n"
                },
                "externalIp": {
                    "type": "string",
                    "description": "- The local IP of cluster visible externally.\n"
                },
                "externalSubnet": {
                    "type": "string",
                    "description": "- External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)\n"
                },
                "gpuDriverVersion": {
                    "type": "string",
                    "description": "- GPU driver version.\n"
                },
                "httpProxyLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityHttpProxyList:getClustersEntityHttpProxyList"
                    },
                    "description": "- List of proxies to connect to the service centers.\n"
                },
                "httpProxyWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityHttpProxyWhitelist:getClustersEntityHttpProxyWhitelist"
                    },
                    "description": "- HTTP proxy whitelist.\n"
                },
                "internalSubnet": {
                    "type": "string",
                    "description": "- The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.\n"
                },
                "isAvailable": {
                    "type": "boolean",
                    "description": "- Indicates if cluster is available to contact. (Readonly)\n"
                },
                "managementServerLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityManagementServerList:getClustersEntityManagementServerList"
                    },
                    "description": "- List of cluster management servers. (Readonly)\n"
                },
                "masqueradingIp": {
                    "type": "string",
                    "description": "- The cluster NAT'd or proxy IP which maps to the cluster local IP.\n"
                },
                "masqueradingPort": {
                    "type": "integer",
                    "description": "- Port used together with masquerading_ip to connect to the cluster.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The image kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "-  The name for the image.\n"
                },
                "nameServerIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- The list of IP addresses of the name servers.\n"
                },
                "nfsSubnetWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityNode:getClustersEntityNode"
                    }
                },
                "ntpServerIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- The list of IP addresses or FQDNs of the NTP servers.\n"
                },
                "operationMode": {
                    "type": "string",
                    "description": "- Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a project.\n"
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.\n"
                },
                "smtpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- SMTP Server Address.\n"
                },
                "smtpServerCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- SMTP Server Credentials.\n"
                },
                "smtpServerEmailAddress": {
                    "type": "string",
                    "description": "- SMTP Server Email Address.\n"
                },
                "smtpServerProxyTypeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- SMTP Server Proxy Type List\n"
                },
                "smtpServerType": {
                    "type": "string",
                    "description": "- SMTP Server type.\n"
                },
                "softwareMapNcc": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "- Map of software on the cluster with software type as the key.\n"
                },
                "softwareMapNos": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "- Map of software on the cluster with software type as the key.\n"
                },
                "sslKeyExpireDatetime": {
                    "type": "string",
                    "description": "- UTC date and time in RFC-3339 format when the key expires\n"
                },
                "sslKeyName": {
                    "type": "string"
                },
                "sslKeySigningInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Customer information used in Certificate Signing Request for creating digital certificates.\n"
                },
                "sslKeyType": {
                    "type": "string",
                    "description": "- SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the cluster entity.\n"
                },
                "supportedInformationVerbosity": {
                    "type": "string",
                    "description": "- Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "- Zone name used in value of TZ environment variable.\n"
                }
            },
            "type": "object",
            "required": [
                "analysisVmEfficiencyMap",
                "apiVersion",
                "authorizedPublicKeyLists",
                "build",
                "caCertificateLists",
                "categories",
                "certificationSigningInfo",
                "clientAuth",
                "clusterArch",
                "domainServerCredentials",
                "domainServerName",
                "domainServerNameserver",
                "enabledFeatureLists",
                "encryptionStatus",
                "externalDataServicesIp",
                "externalIp",
                "externalSubnet",
                "gpuDriverVersion",
                "httpProxyLists",
                "httpProxyWhitelists",
                "internalSubnet",
                "isAvailable",
                "managementServerLists",
                "masqueradingIp",
                "masqueradingPort",
                "metadata",
                "name",
                "nameServerIpLists",
                "nfsSubnetWhitelists",
                "nodes",
                "ntpServerIpLists",
                "operationMode",
                "ownerReference",
                "projectReference",
                "serviceLists",
                "smtpServerAddress",
                "smtpServerCredentials",
                "smtpServerEmailAddress",
                "smtpServerProxyTypeLists",
                "smtpServerType",
                "softwareMapNcc",
                "softwareMapNos",
                "sslKeyExpireDatetime",
                "sslKeyName",
                "sslKeySigningInfo",
                "sslKeyType",
                "state",
                "supportedInformationVerbosity",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityAuthorizedPublicKeyList:getClustersEntityAuthorizedPublicKeyList": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "-  The name for the image.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityCaCertificateList:getClustersEntityCaCertificateList": {
            "properties": {
                "caName": {
                    "type": "string"
                },
                "certificate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caName",
                "certificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityCategory:getClustersEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the key name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityHttpProxyList:getClustersEntityHttpProxyList": {
            "properties": {
                "address": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "credentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "proxyTypeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "credentials",
                "proxyTypeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityHttpProxyWhitelist:getClustersEntityHttpProxyWhitelist": {
            "properties": {
                "target": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "target",
                "targetType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityManagementServerList:getClustersEntityManagementServerList": {
            "properties": {
                "drsEnabled": {
                    "type": "boolean"
                },
                "ip": {
                    "type": "string"
                },
                "statusLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "drsEnabled",
                "ip",
                "statusLists",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityNode:getClustersEntityNode": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpSpec:getFloatingIpSpec": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpSpecResource:getFloatingIpSpecResource"
                    },
                    "description": "Floating IP allocation status.\n"
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpSpecResource:getFloatingIpSpecResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n"
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpStatus:getFloatingIpStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpStatusExecutionContext:getFloatingIpStatusExecutionContext"
                    },
                    "description": "Execution Context of Floating IP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpStatusResource:getFloatingIpStatusResource"
                    },
                    "description": "Floating IP allocation status.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the floating_ip.\n"
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpStatusExecutionContext:getFloatingIpStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpStatusResource:getFloatingIpStatusResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "floatingIp": {
                    "type": "string",
                    "description": "Private IP with which the floating IP is associated.\n"
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n"
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "floatingIp",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntity:getFloatingIpsEntity": {
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The floating_ip kind metadata.\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntitySpec:getFloatingIpsEntitySpec"
                    },
                    "description": "Floating IP spec\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntityStatus:getFloatingIpsEntityStatus"
                    },
                    "description": "Floating IP output status\n"
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "specs",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntitySpec:getFloatingIpsEntitySpec": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntitySpecResource:getFloatingIpsEntitySpecResource"
                    },
                    "description": "Floating IP allocation status.\n"
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntitySpecResource:getFloatingIpsEntitySpecResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n"
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntityStatus:getFloatingIpsEntityStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntityStatusExecutionContext:getFloatingIpsEntityStatusExecutionContext"
                    },
                    "description": "Execution Context of Floating IP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntityStatusResource:getFloatingIpsEntityStatusResource"
                    },
                    "description": "Floating IP allocation status.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the floating_ip.\n"
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntityStatusExecutionContext:getFloatingIpsEntityStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntityStatusResource:getFloatingIpsEntityStatusResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "floatingIp": {
                    "type": "string",
                    "description": "Private IP with which the floating IP is associated.\n"
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n"
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "floatingIp",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsMetadata:getFloatingIpsMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                },
                "totalMatches": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsClusterStatus:getFoundationCentralClusterDetailsClusterStatus": {
            "properties": {
                "aggregatePercentComplete": {
                    "type": "number",
                    "description": "Overall progress percentage including imaging and cluster creation.\n"
                },
                "clusterCreationStarted": {
                    "type": "boolean",
                    "description": "Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.\n"
                },
                "clusterProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail:getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail"
                    },
                    "description": "Denotes the progress status of cluster creation.\n"
                },
                "currentFoundationIp": {
                    "type": "string",
                    "description": "Current IP address of the coordinating foundation node.\n"
                },
                "foundationSessionId": {
                    "type": "string",
                    "description": "Foundation session id for cluster creation.\n"
                },
                "imagingStopped": {
                    "type": "boolean",
                    "description": "Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.\n"
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "description": "Denotes whether the remote nodes has picked up the cluster creation intent.\n"
                },
                "nodeProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail:getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail"
                    },
                    "description": "List of progress details of each node.\n"
                }
            },
            "type": "object",
            "required": [
                "aggregatePercentComplete",
                "clusterCreationStarted",
                "clusterProgressDetails",
                "currentFoundationIp",
                "foundationSessionId",
                "imagingStopped",
                "intentPickedUp",
                "nodeProgressDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail:getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "Cluster name.\n"
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of messages for the client based on process state.\n"
                },
                "percentComplete": {
                    "type": "number",
                    "description": "Percent completion of cluster creation process.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of cluster creation process.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail:getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail": {
            "properties": {
                "imagedNodeUuid": {
                    "type": "string",
                    "description": "UUID of the node.\n"
                },
                "imagingStopped": {
                    "type": "boolean",
                    "description": "Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.\n"
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "description": "Denotes whether the remote nodes has picked up the cluster creation intent.\n"
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of messages for the client based on process state.\n"
                },
                "percentComplete": {
                    "type": "number",
                    "description": "Percent completion of cluster creation process.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of cluster creation process.\n"
                }
            },
            "type": "object",
            "required": [
                "imagedNodeUuid",
                "imagingStopped",
                "intentPickedUp",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsCommonNetworkSettings:getFoundationCentralClusterDetailsCommonNetworkSettings": {
            "properties": {
                "cvmDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of dns servers for the cvms in the cluster.\n"
                },
                "cvmNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ntp servers for the cvms in the cluster.\n"
                },
                "hypervisorDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of dns servers for the hypervisors in the cluster.\n"
                },
                "hypervisorNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ntp servers for the hypervisors in the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "cvmDnsServers",
                "cvmNtpServers",
                "hypervisorDnsServers",
                "hypervisorNtpServers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfig:getFoundationCentralClusterDetailsFoundationInitConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlock:getFoundationCentralClusterDetailsFoundationInitConfigBlock"
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigCluster:getFoundationCentralClusterDetailsFoundationInitConfigCluster"
                    }
                },
                "cvmGateway": {
                    "type": "string"
                },
                "cvmNetmask": {
                    "type": "string"
                },
                "dnsServers": {
                    "type": "string"
                },
                "hypervProductKey": {
                    "type": "string"
                },
                "hypervSku": {
                    "type": "string"
                },
                "hypervisorGateway": {
                    "type": "string"
                },
                "hypervisorIsoUrl": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hypervisorIsos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso:getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso"
                    }
                },
                "hypervisorNetmask": {
                    "type": "string"
                },
                "ipmiGateway": {
                    "type": "string"
                },
                "ipmiNetmask": {
                    "type": "string"
                },
                "nosPackageUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl:getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl"
                    }
                }
            },
            "type": "object",
            "required": [
                "blocks",
                "clusters",
                "cvmGateway",
                "cvmNetmask",
                "dnsServers",
                "hypervProductKey",
                "hypervSku",
                "hypervisorGateway",
                "hypervisorIsoUrl",
                "hypervisorIsos",
                "hypervisorNetmask",
                "ipmiGateway",
                "ipmiNetmask",
                "nosPackageUrls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlock:getFoundationCentralClusterDetailsFoundationInitConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlockNode:getFoundationCentralClusterDetailsFoundationInitConfigBlockNode"
                    }
                }
            },
            "type": "object",
            "required": [
                "blockId",
                "nodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlockNode:getFoundationCentralClusterDetailsFoundationInitConfigBlockNode": {
            "properties": {
                "cvmIp": {
                    "type": "string"
                },
                "cvmVlanId": {
                    "type": "integer"
                },
                "fcImagedNodeUuid": {
                    "type": "string"
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hypervisor": {
                    "type": "string"
                },
                "hypervisorHostname": {
                    "type": "string"
                },
                "hypervisorIp": {
                    "type": "string"
                },
                "imageNow": {
                    "type": "boolean"
                },
                "ipmiIp": {
                    "type": "string"
                },
                "ipv6Address": {
                    "type": "string"
                },
                "nodePosition": {
                    "type": "string"
                },
                "nodeSerial": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cvmIp",
                "cvmVlanId",
                "fcImagedNodeUuid",
                "hardwareAttributesOverride",
                "hypervisor",
                "hypervisorHostname",
                "hypervisorIp",
                "imageNow",
                "ipmiIp",
                "ipv6Address",
                "nodePosition",
                "nodeSerial"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigCluster:getFoundationCentralClusterDetailsFoundationInitConfigCluster": {
            "properties": {
                "clusterExternalIp": {
                    "type": "string",
                    "description": "External management ip of the cluster.\n"
                },
                "clusterInitNow": {
                    "type": "boolean"
                },
                "clusterInitSuccessful": {
                    "type": "boolean"
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "Cluster name.\n"
                },
                "cvmDnsServers": {
                    "type": "string",
                    "description": "List of dns servers for the cvms in the cluster.\n"
                },
                "cvmNtpServers": {
                    "type": "string",
                    "description": "List of ntp servers for the cvms in the cluster.\n"
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": "Redundancy factor of the cluster.\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterExternalIp",
                "clusterInitNow",
                "clusterInitSuccessful",
                "clusterMembers",
                "clusterName",
                "cvmDnsServers",
                "cvmNtpServers",
                "redundancyFactor",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso:getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso": {
            "properties": {
                "hypervisorType": {
                    "type": "string"
                },
                "sha256sum": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hypervisorType",
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl:getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl": {
            "properties": {
                "sha256sum": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListFilters:getFoundationCentralImagedClustersListFilters": {
            "properties": {
                "archived": {
                    "type": "boolean",
                    "description": "True if the cluster creation request is archived, False otherwise\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedCluster:getFoundationCentralImagedClustersListImagedCluster": {
            "properties": {
                "archived": {
                    "type": "boolean",
                    "description": "True if the cluster creation request is archived, False otherwise\n"
                },
                "clusterExternalIp": {
                    "type": "string",
                    "description": "External management ip of the cluster.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "Cluster name.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "Number of nodes in the cluster.\n"
                },
                "clusterStatus": {
                    "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatus:getFoundationCentralImagedClustersListImagedClusterClusterStatus",
                    "description": "Details of cluster creation process.\n"
                },
                "commonNetworkSettings": {
                    "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings:getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings",
                    "description": "Common network settings across the nodes in the cluster.\n"
                },
                "createdTimestamp": {
                    "type": "string",
                    "description": "Time when the cluster creation request was received in Foundation Central.\n"
                },
                "currentTime": {
                    "type": "string",
                    "description": "Current time of Foundation Central.\n"
                },
                "destroyed": {
                    "type": "boolean",
                    "description": "True if the cluster is destroyed, False otherwise\n"
                },
                "foundationInitConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig"
                    },
                    "description": "Json config used by Foundation to create the cluster.\n"
                },
                "foundationInitNodeUuid": {
                    "type": "string",
                    "description": "UUID of the first node coordinating cluster creation.\n"
                },
                "imagedClusterUuid": {
                    "type": "string",
                    "description": "UUID of the cluster.\n"
                },
                "imagedNodeUuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of UUIDs of imaged nodes.\n"
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": "Redundancy factor of the cluster.\n"
                },
                "storageNodeCount": {
                    "type": "integer",
                    "description": "Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.\n"
                },
                "workflowType": {
                    "type": "string",
                    "description": "If imaging and cluster creation is coordinated by Foundation, value will be FOUNDATION_WF. If the nodes are in phoenix, value will be PHOENIX_WF.\n"
                }
            },
            "type": "object",
            "required": [
                "archived",
                "clusterExternalIp",
                "clusterName",
                "clusterSize",
                "clusterStatus",
                "commonNetworkSettings",
                "createdTimestamp",
                "currentTime",
                "destroyed",
                "foundationInitConfigs",
                "foundationInitNodeUuid",
                "imagedClusterUuid",
                "imagedNodeUuidLists",
                "storageNodeCount",
                "workflowType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatus:getFoundationCentralImagedClustersListImagedClusterClusterStatus": {
            "properties": {
                "aggregatePercentComplete": {
                    "type": "number",
                    "description": "Overall progress percentage including imaging and cluster creation.\n"
                },
                "clusterCreationStarted": {
                    "type": "boolean",
                    "description": "Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.\n"
                },
                "clusterProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail"
                    },
                    "description": "Denotes the progress status of cluster creation.\n"
                },
                "currentFoundationIp": {
                    "type": "string",
                    "description": "Current IP address of the coordinating foundation node.\n"
                },
                "foundationSessionId": {
                    "type": "string",
                    "description": "Foundation session id for cluster creation.\n"
                },
                "imagingStopped": {
                    "type": "boolean",
                    "description": "Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.\n"
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "description": "Denotes whether the remote nodes has picked up the cluster creation intent.\n"
                },
                "nodeProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail"
                    },
                    "description": "List of progress details of each node.\n"
                }
            },
            "type": "object",
            "required": [
                "aggregatePercentComplete",
                "clusterCreationStarted",
                "clusterProgressDetails",
                "currentFoundationIp",
                "foundationSessionId",
                "imagingStopped",
                "intentPickedUp",
                "nodeProgressDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "Cluster name.\n"
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of messages for the client based on process state.\n"
                },
                "percentComplete": {
                    "type": "number",
                    "description": "Percent completion of cluster creation process.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of cluster creation process.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail": {
            "properties": {
                "imagedNodeUuid": {
                    "type": "string",
                    "description": "UUID of the node.\n"
                },
                "imagingStopped": {
                    "type": "boolean",
                    "description": "Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.\n"
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "description": "Denotes whether the remote nodes has picked up the cluster creation intent.\n"
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of messages for the client based on process state.\n"
                },
                "percentComplete": {
                    "type": "number",
                    "description": "Percent completion of cluster creation process.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of cluster creation process.\n"
                }
            },
            "type": "object",
            "required": [
                "imagedNodeUuid",
                "imagingStopped",
                "intentPickedUp",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings:getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings": {
            "properties": {
                "cvmDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of dns servers for the cvms in the cluster.\n"
                },
                "cvmNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ntp servers for the cvms in the cluster.\n"
                },
                "hypervisorDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of dns servers for the hypervisors in the cluster.\n"
                },
                "hypervisorNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ntp servers for the hypervisors in the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "cvmDnsServers",
                "cvmNtpServers",
                "hypervisorDnsServers",
                "hypervisorNtpServers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock"
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster"
                    }
                },
                "cvmGateway": {
                    "type": "string"
                },
                "cvmNetmask": {
                    "type": "string"
                },
                "dnsServers": {
                    "type": "string"
                },
                "hypervProductKey": {
                    "type": "string"
                },
                "hypervSku": {
                    "type": "string"
                },
                "hypervisorGateway": {
                    "type": "string"
                },
                "hypervisorIsoUrl": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hypervisorIsos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso"
                    }
                },
                "hypervisorNetmask": {
                    "type": "string"
                },
                "ipmiGateway": {
                    "type": "string"
                },
                "ipmiNetmask": {
                    "type": "string"
                },
                "nosPackageUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl"
                    }
                }
            },
            "type": "object",
            "required": [
                "blocks",
                "clusters",
                "cvmGateway",
                "cvmNetmask",
                "dnsServers",
                "hypervProductKey",
                "hypervSku",
                "hypervisorGateway",
                "hypervisorIsoUrl",
                "hypervisorIsos",
                "hypervisorNetmask",
                "ipmiGateway",
                "ipmiNetmask",
                "nosPackageUrls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode"
                    }
                }
            },
            "type": "object",
            "required": [
                "blockId",
                "nodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode": {
            "properties": {
                "cvmIp": {
                    "type": "string"
                },
                "cvmVlanId": {
                    "type": "integer"
                },
                "fcImagedNodeUuid": {
                    "type": "string"
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hypervisor": {
                    "type": "string"
                },
                "hypervisorHostname": {
                    "type": "string"
                },
                "hypervisorIp": {
                    "type": "string"
                },
                "imageNow": {
                    "type": "boolean"
                },
                "ipmiIp": {
                    "type": "string"
                },
                "ipv6Address": {
                    "type": "string"
                },
                "nodePosition": {
                    "type": "string"
                },
                "nodeSerial": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cvmIp",
                "cvmVlanId",
                "fcImagedNodeUuid",
                "hardwareAttributesOverride",
                "hypervisor",
                "hypervisorHostname",
                "hypervisorIp",
                "imageNow",
                "ipmiIp",
                "ipv6Address",
                "nodePosition",
                "nodeSerial"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster": {
            "properties": {
                "clusterExternalIp": {
                    "type": "string",
                    "description": "External management ip of the cluster.\n"
                },
                "clusterInitNow": {
                    "type": "boolean"
                },
                "clusterInitSuccessful": {
                    "type": "boolean"
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "Cluster name.\n"
                },
                "cvmDnsServers": {
                    "type": "string",
                    "description": "List of dns servers for the cvms in the cluster.\n"
                },
                "cvmNtpServers": {
                    "type": "string",
                    "description": "List of ntp servers for the cvms in the cluster.\n"
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": "Redundancy factor of the cluster.\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterExternalIp",
                "clusterInitNow",
                "clusterInitSuccessful",
                "clusterMembers",
                "clusterName",
                "cvmDnsServers",
                "cvmNtpServers",
                "redundancyFactor",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso": {
            "properties": {
                "hypervisorType": {
                    "type": "string"
                },
                "sha256sum": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hypervisorType",
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl": {
            "properties": {
                "sha256sum": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListMetadata:getFoundationCentralImagedClustersListMetadata": {
            "properties": {
                "length": {
                    "type": "integer",
                    "description": "The number of records retrieved.\n"
                },
                "offset": {
                    "type": "integer",
                    "description": "Offset from the start of the object list.\n"
                },
                "totalMatches": {
                    "type": "integer",
                    "description": "Total matches found.\n"
                }
            },
            "type": "object",
            "required": [
                "length",
                "offset",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedNodesListFilters:getFoundationCentralImagedNodesListFilters": {
            "properties": {
                "nodeState": {
                    "type": "string",
                    "description": "Specifies whether the node is discovering, available or unavailable for cluster creation.\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/getFoundationCentralImagedNodesListImagedNode:getFoundationCentralImagedNodesListImagedNode": {
            "properties": {
                "aosVersion": {
                    "type": "string",
                    "description": "AOS version currently installed on the node.\n"
                },
                "apiKeyUuid": {
                    "type": "string",
                    "description": "API key used to register the node.\n"
                },
                "available": {
                    "type": "boolean",
                    "description": "Specifies whether the node is available for cluster creation.\n"
                },
                "blockSerial": {
                    "type": "string",
                    "description": "Serial number of the block to which the node belongs.\n"
                },
                "createdTimestamp": {
                    "type": "string",
                    "description": "Time when the node was discovered in Foundation Central.\n"
                },
                "currentTime": {
                    "type": "string",
                    "description": "Current time of Foundation Central.\n"
                },
                "cvmGateway": {
                    "type": "string",
                    "description": "gateway of the cvm.\n"
                },
                "cvmIp": {
                    "type": "string",
                    "description": "IP address of the cvm.\n"
                },
                "cvmIpv6": {
                    "type": "string",
                    "description": "IPv6 address of the cvm.\n"
                },
                "cvmNetmask": {
                    "type": "string",
                    "description": "netmask of the cvm.\n"
                },
                "cvmUp": {
                    "type": "boolean",
                    "description": "Denotes whether the CVM is up or not on this node.\n"
                },
                "cvmUuid": {
                    "type": "string",
                    "description": "Node UUID from the node's cvm.\n"
                },
                "cvmVlanId": {
                    "type": "integer",
                    "description": "Vlan tag of the cvm, if the cvm is on a vlan.\n"
                },
                "foundationVersion": {
                    "type": "string",
                    "description": "Foundation version installed on the node.\n"
                },
                "hardwareAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Hardware attributes json of the node.\n"
                },
                "hypervisorGateway": {
                    "type": "string",
                    "description": "gateway of the hypervisor.\n"
                },
                "hypervisorHostname": {
                    "type": "string",
                    "description": "Name of the hypervisor host.\n"
                },
                "hypervisorIp": {
                    "type": "string",
                    "description": "IP address of the hypervisor.\n"
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "description": "netmask of the hypervisor.\n"
                },
                "hypervisorType": {
                    "type": "string",
                    "description": "Hypervisor type currently installed on the node. Must be one of {kvm, esx, hyperv}.\n"
                },
                "hypervisorVersion": {
                    "type": "string",
                    "description": "Version of the hypervisor currently installed on the node.\n"
                },
                "imagedClusterUuid": {
                    "type": "string",
                    "description": "UUID of the cluster to which the node belongs, if any.\n"
                },
                "imagedNodeUuid": {
                    "type": "string",
                    "description": "UUID of the node.\n"
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": "gateway of the ipmi.\n"
                },
                "ipmiIp": {
                    "type": "string",
                    "description": "IP address of the ipmi.\n"
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": "netmask of the ipmi.\n"
                },
                "ipv6Interface": {
                    "type": "string",
                    "description": "Name of the cvm interface having ipv6 address.\n"
                },
                "latestHbTsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of timestamps when the node has sent heartbeats to Foundation Central.\n"
                },
                "model": {
                    "type": "string",
                    "description": "Model of the node.\n"
                },
                "nodePosition": {
                    "type": "string",
                    "description": "Position of the node in the block.\n"
                },
                "nodeSerial": {
                    "type": "string",
                    "description": "Serial number of the node.\n"
                },
                "nodeState": {
                    "type": "string",
                    "description": "Specifies whether the node is discovering, available or unavailable for cluster creation.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "Specifies the type of node - on-prem, AWS, GCP etc.\n"
                },
                "objectVersion": {
                    "type": "integer",
                    "description": "Version of the node used for CAS.\n"
                },
                "supportedFeatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "aosVersion",
                "apiKeyUuid",
                "available",
                "blockSerial",
                "createdTimestamp",
                "currentTime",
                "cvmGateway",
                "cvmIp",
                "cvmIpv6",
                "cvmNetmask",
                "cvmUp",
                "cvmUuid",
                "cvmVlanId",
                "foundationVersion",
                "hardwareAttributes",
                "hypervisorGateway",
                "hypervisorHostname",
                "hypervisorIp",
                "hypervisorNetmask",
                "hypervisorType",
                "hypervisorVersion",
                "imagedClusterUuid",
                "imagedNodeUuid",
                "ipmiGateway",
                "ipmiIp",
                "ipmiNetmask",
                "ipv6Interface",
                "latestHbTsLists",
                "model",
                "nodePosition",
                "nodeSerial",
                "nodeState",
                "nodeType",
                "objectVersion",
                "supportedFeatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedNodesListMetadata:getFoundationCentralImagedNodesListMetadata": {
            "properties": {
                "length": {
                    "type": "integer",
                    "description": "The number of records retrieved.\n"
                },
                "offset": {
                    "type": "integer",
                    "description": "Offset from the start of the object list.\n"
                },
                "totalMatches": {
                    "type": "integer",
                    "description": "Total matches found.\n"
                }
            },
            "type": "object",
            "required": [
                "length",
                "offset",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralListApiKeysApiKey:getFoundationCentralListApiKeysApiKey": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Alias of the api key.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "Api key in string format.\n",
                    "secret": true
                },
                "createdTimestamp": {
                    "type": "string",
                    "description": "Time when the api key was created.\n"
                },
                "currentTime": {
                    "type": "string",
                    "description": "Current time of Foundation Central.\n"
                },
                "keyUuid": {
                    "type": "string",
                    "description": "UUID of the api key.\n"
                }
            },
            "type": "object",
            "required": [
                "alias",
                "apiKey",
                "createdTimestamp",
                "currentTime",
                "keyUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralListApiKeysMetadata:getFoundationCentralListApiKeysMetadata": {
            "properties": {
                "length": {
                    "type": "integer",
                    "description": "The number of records retrieved.\n"
                },
                "offset": {
                    "type": "integer",
                    "description": "Offset from the start of the object list.\n"
                },
                "totalMatches": {
                    "type": "integer",
                    "description": "Total matches found.\n"
                }
            },
            "type": "object",
            "required": [
                "length",
                "offset",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationDiscoverNodesEntity:getFoundationDiscoverNodesEntity": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "description": "Chassis serial number.\n"
                },
                "chassisN": {
                    "type": "integer",
                    "description": "ID number of the block.\n"
                },
                "model": {
                    "type": "string",
                    "description": "Model name of the node.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationDiscoverNodesEntityNode:getFoundationDiscoverNodesEntityNode"
                    },
                    "description": "Node level properties.\n"
                }
            },
            "type": "object",
            "required": [
                "blockId",
                "chassisN",
                "model",
                "nodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationDiscoverNodesEntityNode:getFoundationDiscoverNodesEntityNode": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "ID of the cluster the node is part of.\n"
                },
                "configured": {
                    "type": "boolean",
                    "description": "Whether the node is configured.\n"
                },
                "currentCvmVlanTag": {
                    "type": "string",
                    "description": "vlan tag of cvm.\n"
                },
                "currentNetworkInterface": {
                    "type": "string",
                    "description": "Current network interface of the node.\n"
                },
                "foundationVersion": {
                    "type": "string",
                    "description": "Version of foundation.\n"
                },
                "hypervisor": {
                    "type": "string",
                    "description": "Type of hypervisor installed on the node.\n"
                },
                "hypervisorVersion": {
                    "type": "string",
                    "description": "Version of hypervisor installed.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "IPV6 address of the node.\n"
                },
                "model": {
                    "type": "string",
                    "description": "Model name of the node.\n"
                },
                "nodePosition": {
                    "type": "string",
                    "description": "Position of the node in the block.\n"
                },
                "nodeSerial": {
                    "type": "string",
                    "description": "Node serial of the node.\n"
                },
                "nodeUuid": {
                    "type": "string",
                    "description": "UUID of the node.\n"
                },
                "nosVersion": {
                    "type": "string",
                    "description": "Version of NOS installed on the node.\n"
                },
                "svmIp": {
                    "type": "string",
                    "description": "IP address of CVM.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "configured",
                "currentCvmVlanTag",
                "currentNetworkInterface",
                "foundationVersion",
                "hypervisor",
                "hypervisorVersion",
                "ipv6Address",
                "model",
                "nodePosition",
                "nodeSerial",
                "nodeUuid",
                "nosVersion",
                "svmIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosEsx:getFoundationHypervisorIsosEsx": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Name of installer.\n"
                },
                "supported": {
                    "type": "boolean",
                    "description": "Whether front-end should treat hyp as supported.\n"
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosHyperv:getFoundationHypervisorIsosHyperv": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Name of installer.\n"
                },
                "supported": {
                    "type": "boolean",
                    "description": "Whether front-end should treat hyp as supported.\n"
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosKvm:getFoundationHypervisorIsosKvm": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Name of installer.\n"
                },
                "supported": {
                    "type": "boolean",
                    "description": "Whether front-end should treat hyp as supported.\n"
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosLinux:getFoundationHypervisorIsosLinux": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Name of installer.\n"
                },
                "supported": {
                    "type": "boolean",
                    "description": "Whether front-end should treat hyp as supported.\n"
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosXen:getFoundationHypervisorIsosXen": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Name of installer.\n"
                },
                "supported": {
                    "type": "boolean",
                    "description": "Whether front-end should treat hyp as supported.\n"
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationNodeNetworkDetailsNode:getFoundationNodeNetworkDetailsNode": {
            "properties": {
                "cvmGateway": {
                    "type": "string",
                    "description": "Gateway of CVM.\n"
                },
                "cvmIp": {
                    "type": "string",
                    "description": "CVM IP address.\n"
                },
                "cvmNetmask": {
                    "type": "string",
                    "description": "Netmask of CVM.\n"
                },
                "cvmVlanId": {
                    "type": "string",
                    "description": "CVM vlan tag.\n"
                },
                "error": {
                    "type": "string",
                    "description": "Only exists when failed to fetch node_info, with the reason of failure. all other fields will be empty.\n"
                },
                "hypervisorGateway": {
                    "type": "string",
                    "description": "Gateway of the hypervisor.\n"
                },
                "hypervisorHostname": {
                    "type": "string",
                    "description": "Hypervisor hostname.\n"
                },
                "hypervisorIp": {
                    "type": "string",
                    "description": "Hypervisor IP address.\n"
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "description": "Netmask of the hypervisor.\n"
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": "IPMI gateway.\n"
                },
                "ipmiIp": {
                    "type": "string",
                    "description": "IPMI IP address.\n"
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": "IPMI netmask.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "IPV6 address of the CVM.\n"
                },
                "nodeSerial": {
                    "type": "string",
                    "description": "Node serial.\n"
                }
            },
            "type": "object",
            "required": [
                "cvmGateway",
                "cvmIp",
                "cvmNetmask",
                "cvmVlanId",
                "error",
                "hypervisorGateway",
                "hypervisorHostname",
                "hypervisorIp",
                "hypervisorNetmask",
                "ipmiGateway",
                "ipmiIp",
                "ipmiNetmask",
                "ipv6Address",
                "nodeSerial"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostCategory:getHostCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the key name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostGpuList:getHostGpuList": {
            "properties": {
                "assignable": {
                    "type": "boolean"
                },
                "consumerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "deviceId": {
                    "type": "integer"
                },
                "fraction": {
                    "type": "integer"
                },
                "frameBufferSizeMib": {
                    "type": "integer"
                },
                "guestDriverVersion": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "licenseLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxResolution": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "numVgpusAllocated": {
                    "type": "integer"
                },
                "numVirtualDisplayHeads": {
                    "type": "integer"
                },
                "numaNode": {
                    "type": "integer"
                },
                "pciAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the uuid.\n"
                },
                "vendor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assignable",
                "consumerReference",
                "deviceId",
                "fraction",
                "frameBufferSizeMib",
                "guestDriverVersion",
                "index",
                "licenseLists",
                "maxResolution",
                "mode",
                "name",
                "numVgpusAllocated",
                "numVirtualDisplayHeads",
                "numaNode",
                "pciAddress",
                "status",
                "uuid",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostHostDisksReferenceList:getHostHostDisksReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the uuid.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntity:getHostsEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API version.\n"
                },
                "block": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Host block config info.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getHostsEntityCategory:getHostsEntityCategory"
                    },
                    "description": "- Categories for the image.\n"
                },
                "clusterReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Reference to a kind. Either one of (kind, uuid) or url needs to be specified.\n"
                },
                "controllerVm": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Host controller vm information.\n"
                },
                "cpuCapacityHz": {
                    "type": "integer",
                    "description": "- Host CPU capacity.\n"
                },
                "cpuModel": {
                    "type": "string",
                    "description": "- Host CPU model.\n"
                },
                "failoverCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Hyper-V failover cluster.\n"
                },
                "gpuDriverVersion": {
                    "type": "string",
                    "description": "- Host GPU driver version.\n"
                },
                "gpuLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getHostsEntityGpuList:getHostsEntityGpuList"
                    },
                    "description": "- List of GPUs on the host.\n"
                },
                "hostDisksReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getHostsEntityHostDisksReferenceList:getHostsEntityHostDisksReferenceList"
                    },
                    "description": "- The reference to a disk.\n"
                },
                "hostNicsIdLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- Host NICs.\n"
                },
                "hostType": {
                    "type": "string",
                    "description": "- Host type.\n"
                },
                "hypervisor": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Host Hypervisor information.\n"
                },
                "ipmi": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Host IPMI info.\n"
                },
                "memoryCapacityMib": {
                    "type": "integer",
                    "description": "- Host memory capacity in MiB.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "monitoringState": {
                    "type": "string",
                    "description": "- Host monitoring status.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "numCpuCores": {
                    "type": "integer",
                    "description": "- Number of CPU cores on Host.\n"
                },
                "numCpuSockets": {
                    "type": "integer",
                    "description": "- Number of CPU sockets.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a project.\n"
                },
                "rackableUnitReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a rackable_unit.\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "- Node serial number.\n"
                },
                "windowsDomain": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.\n"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "block",
                "categories",
                "clusterReference",
                "controllerVm",
                "cpuCapacityHz",
                "cpuModel",
                "failoverCluster",
                "gpuDriverVersion",
                "gpuLists",
                "hostDisksReferenceLists",
                "hostNicsIdLists",
                "hostType",
                "hypervisor",
                "ipmi",
                "memoryCapacityMib",
                "metadata",
                "monitoringState",
                "name",
                "numCpuCores",
                "numCpuSockets",
                "ownerReference",
                "projectReference",
                "rackableUnitReference",
                "serialNumber",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntityCategory:getHostsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntityGpuList:getHostsEntityGpuList": {
            "properties": {
                "assignable": {
                    "type": "boolean"
                },
                "consumerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "deviceId": {
                    "type": "integer"
                },
                "fraction": {
                    "type": "integer"
                },
                "frameBufferSizeMib": {
                    "type": "integer"
                },
                "guestDriverVersion": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "licenseLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxResolution": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "numVgpusAllocated": {
                    "type": "integer"
                },
                "numVirtualDisplayHeads": {
                    "type": "integer"
                },
                "numaNode": {
                    "type": "integer"
                },
                "pciAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the uuid.\n"
                },
                "vendor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assignable",
                "consumerReference",
                "deviceId",
                "fraction",
                "frameBufferSizeMib",
                "guestDriverVersion",
                "index",
                "licenseLists",
                "maxResolution",
                "mode",
                "name",
                "numVgpusAllocated",
                "numVirtualDisplayHeads",
                "numaNode",
                "pciAddress",
                "status",
                "uuid",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntityHostDisksReferenceList:getHostsEntityHostDisksReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the uuid.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getImageCategory:getImageCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getImageClusterReference:getImageClusterReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getImageCurrentClusterReferenceList:getImageCurrentClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterEtcdNodePool:getKarbonClusterEtcdNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterEtcdNodePoolAhvConfig:getKarbonClusterEtcdNodePoolAhvConfig"
                    },
                    "description": "- VM configuration in AHV.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Unique name of the node pool.\n"
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- The version of the node OS image.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterEtcdNodePoolNode:getKarbonClusterEtcdNodePoolNode"
                    },
                    "description": "- List of the deployed nodes in the node pool.\n"
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- Number of nodes in the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterEtcdNodePoolAhvConfig:getKarbonClusterEtcdNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "- The number of VCPUs allocated for each VM on the PE cluster.\n"
                },
                "diskMib": {
                    "type": "integer",
                    "description": "- Size of local storage for each VM on the PE cluster in MiB.\n"
                },
                "memoryMib": {
                    "type": "integer",
                    "description": "- Memory allocated for each VM on the PE cluster in MiB.\n"
                },
                "networkUuid": {
                    "type": "string",
                    "description": "- The UUID of the network for the VMs deployed with this resource configuration.\n"
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "description": "- The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterEtcdNodePoolNode:getKarbonClusterEtcdNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "- Hostname of the deployed node.\n"
                },
                "ipv4Address": {
                    "type": "string",
                    "description": "- IP of the deployed node.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterMasterNodePool:getKarbonClusterMasterNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterMasterNodePoolAhvConfig:getKarbonClusterMasterNodePoolAhvConfig"
                    },
                    "description": "- VM configuration in AHV.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Unique name of the node pool.\n"
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- The version of the node OS image.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterMasterNodePoolNode:getKarbonClusterMasterNodePoolNode"
                    },
                    "description": "- List of the deployed nodes in the node pool.\n"
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- Number of nodes in the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterMasterNodePoolAhvConfig:getKarbonClusterMasterNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "- The number of VCPUs allocated for each VM on the PE cluster.\n"
                },
                "diskMib": {
                    "type": "integer",
                    "description": "- Size of local storage for each VM on the PE cluster in MiB.\n"
                },
                "memoryMib": {
                    "type": "integer",
                    "description": "- Memory allocated for each VM on the PE cluster in MiB.\n"
                },
                "networkUuid": {
                    "type": "string",
                    "description": "- The UUID of the network for the VMs deployed with this resource configuration.\n"
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "description": "- The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterMasterNodePoolNode:getKarbonClusterMasterNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "- Hostname of the deployed node.\n"
                },
                "ipv4Address": {
                    "type": "string",
                    "description": "- IP of the deployed node.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterWorkerNodePool:getKarbonClusterWorkerNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterWorkerNodePoolAhvConfig:getKarbonClusterWorkerNodePoolAhvConfig"
                    },
                    "description": "- VM configuration in AHV.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Unique name of the node pool.\n"
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- The version of the node OS image.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterWorkerNodePoolNode:getKarbonClusterWorkerNodePoolNode"
                    },
                    "description": "- List of the deployed nodes in the node pool.\n"
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- Number of nodes in the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterWorkerNodePoolAhvConfig:getKarbonClusterWorkerNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "- The number of VCPUs allocated for each VM on the PE cluster.\n"
                },
                "diskMib": {
                    "type": "integer",
                    "description": "- Size of local storage for each VM on the PE cluster in MiB.\n"
                },
                "memoryMib": {
                    "type": "integer",
                    "description": "- Memory allocated for each VM on the PE cluster in MiB.\n"
                },
                "networkUuid": {
                    "type": "string",
                    "description": "- The UUID of the network for the VMs deployed with this resource configuration.\n"
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "description": "- The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterWorkerNodePoolNode:getKarbonClusterWorkerNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "- Hostname of the deployed node.\n"
                },
                "ipv4Address": {
                    "type": "string",
                    "description": "- IP of the deployed node.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersCluster:getKarbonClustersCluster": {
            "properties": {
                "deploymentType": {
                    "type": "string"
                },
                "etcdNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterEtcdNodePool:getKarbonClustersClusterEtcdNodePool"
                    },
                    "description": "- Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.\n"
                },
                "kubeapiServerIpv4Address": {
                    "type": "string"
                },
                "masterNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterMasterNodePool:getKarbonClustersClusterMasterNodePool"
                    },
                    "description": "- .\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Unique name of the node pool.\n"
                },
                "status": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "description": "- K8s version of the cluster.\n"
                },
                "workerNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterWorkerNodePool:getKarbonClustersClusterWorkerNodePool"
                    }
                }
            },
            "type": "object",
            "required": [
                "deploymentType",
                "etcdNodePools",
                "kubeapiServerIpv4Address",
                "masterNodePools",
                "name",
                "status",
                "uuid",
                "version",
                "workerNodePools"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterEtcdNodePool:getKarbonClustersClusterEtcdNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterEtcdNodePoolAhvConfig:getKarbonClustersClusterEtcdNodePoolAhvConfig"
                    },
                    "description": "- .\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Unique name of the node pool.\n"
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- The version of the node OS image.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterEtcdNodePoolNode:getKarbonClustersClusterEtcdNodePoolNode"
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- Number of nodes in the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterEtcdNodePoolAhvConfig:getKarbonClustersClusterEtcdNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "- The number of VCPUs allocated for each VM on the PE cluster.\n"
                },
                "diskMib": {
                    "type": "integer",
                    "description": "- Size of local storage for each VM on the PE cluster in MiB.\n"
                },
                "memoryMib": {
                    "type": "integer",
                    "description": "- Memory allocated for each VM on the PE cluster in MiB.\n"
                },
                "networkUuid": {
                    "type": "string",
                    "description": "- The UUID of the network for the VMs deployed with this resource configuration.\n"
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "description": "- The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterEtcdNodePoolNode:getKarbonClustersClusterEtcdNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterMasterNodePool:getKarbonClustersClusterMasterNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterMasterNodePoolAhvConfig:getKarbonClustersClusterMasterNodePoolAhvConfig"
                    },
                    "description": "- .\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Unique name of the node pool.\n"
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- The version of the node OS image.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterMasterNodePoolNode:getKarbonClustersClusterMasterNodePoolNode"
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- Number of nodes in the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterMasterNodePoolAhvConfig:getKarbonClustersClusterMasterNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "- The number of VCPUs allocated for each VM on the PE cluster.\n"
                },
                "diskMib": {
                    "type": "integer",
                    "description": "- Size of local storage for each VM on the PE cluster in MiB.\n"
                },
                "memoryMib": {
                    "type": "integer",
                    "description": "- Memory allocated for each VM on the PE cluster in MiB.\n"
                },
                "networkUuid": {
                    "type": "string",
                    "description": "- The UUID of the network for the VMs deployed with this resource configuration.\n"
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "description": "- The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterMasterNodePoolNode:getKarbonClustersClusterMasterNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterWorkerNodePool:getKarbonClustersClusterWorkerNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterWorkerNodePoolAhvConfig:getKarbonClustersClusterWorkerNodePoolAhvConfig"
                    },
                    "description": "- .\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Unique name of the node pool.\n"
                },
                "nodeOsVersion": {
                    "type": "string",
                    "description": "- The version of the node OS image.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterWorkerNodePoolNode:getKarbonClustersClusterWorkerNodePoolNode"
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "description": "- Number of nodes in the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterWorkerNodePoolAhvConfig:getKarbonClustersClusterWorkerNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "- The number of VCPUs allocated for each VM on the PE cluster.\n"
                },
                "diskMib": {
                    "type": "integer",
                    "description": "- Size of local storage for each VM on the PE cluster in MiB.\n"
                },
                "memoryMib": {
                    "type": "integer",
                    "description": "- Memory allocated for each VM on the PE cluster in MiB.\n"
                },
                "networkUuid": {
                    "type": "string",
                    "description": "- The UUID of the network for the VMs deployed with this resource configuration.\n"
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "description": "- The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterWorkerNodePoolNode:getKarbonClustersClusterWorkerNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonPrivateRegistriesPrivateRegistry:getKarbonPrivateRegistriesPrivateRegistry": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "- Endpoint of the private in format `url:port`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- Name of the private registry.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- UUID of the private registry.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneDatabaseNode:getNdbCloneDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "database status\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneDatabaseNodeInfo:getNdbCloneDatabaseNodeInfo"
                    },
                    "description": "cloned info\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneDatabaseNodeProperty:getNdbCloneDatabaseNodeProperty"
                    },
                    "description": "properties of clone\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneDatabaseNodeProtectionDomain:getNdbCloneDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneDatabaseNodeTag:getNdbCloneDatabaseNodeTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "databaseId",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "dbserver",
                "dbserverId",
                "description",
                "id",
                "infos",
                "name",
                "primary",
                "properties",
                "protectionDomains",
                "protectionDomainId",
                "softwareInstallationId",
                "status",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneDatabaseNodeInfo:getNdbCloneDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "cloned info\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneDatabaseNodeProperty:getNdbCloneDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneDatabaseNodeProtectionDomain:getNdbCloneDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneDatabaseNodeProtectionDomainProperty:getNdbCloneDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "properties of clone\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "type": {
                    "type": "string",
                    "description": "type\n"
                }
            },
            "type": "object",
            "required": [
                "assocEntities",
                "cloudId",
                "dateCreated",
                "dateModified",
                "description",
                "eraCreated",
                "id",
                "name",
                "ownerId",
                "primaryHost",
                "properties",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneDatabaseNodeProtectionDomainProperty:getNdbCloneDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneDatabaseNodeTag:getNdbCloneDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneFilter:getNdbCloneFilter": {
            "properties": {
                "anyStatus": {
                    "type": "string",
                    "description": "Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false\n"
                },
                "detailed": {
                    "type": "string",
                    "description": "Load entities with complete details. Default is false\n"
                },
                "loadDbserverCluster": {
                    "type": "string",
                    "description": "Load cluster info. Default is false\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Default is UTC\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/getNdbCloneInfo:getNdbCloneInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneInfoBpgConfig:getNdbCloneInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneInfoBpgConfig:getNdbCloneInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneInfoBpgConfigBpgDbParam:getNdbCloneInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneInfoBpgConfigStorage:getNdbCloneInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneInfoBpgConfigVmProperty:getNdbCloneInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneInfoBpgConfigBpgDbParam:getNdbCloneInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneInfoBpgConfigStorage:getNdbCloneInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneInfoBpgConfigStorageArchiveStorage:getNdbCloneInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneInfoBpgConfigStorageDataDisk:getNdbCloneInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneInfoBpgConfigStorageLogDisk:getNdbCloneInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneInfoBpgConfigStorageArchiveStorage:getNdbCloneInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneInfoBpgConfigStorageDataDisk:getNdbCloneInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneInfoBpgConfigStorageLogDisk:getNdbCloneInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneInfoBpgConfigVmProperty:getNdbCloneInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneLcmConfig:getNdbCloneLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneLcmConfigExpiryDetail:getNdbCloneLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneLcmConfigPostDeleteCommand:getNdbCloneLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneLcmConfigPreDeleteCommand:getNdbCloneLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneLcmConfigRefreshDetail:getNdbCloneLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneLcmConfigExpiryDetail:getNdbCloneLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneLcmConfigPostDeleteCommand:getNdbCloneLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneLcmConfigPreDeleteCommand:getNdbCloneLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneLcmConfigRefreshDetail:getNdbCloneLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneLinkedDatabase:getNdbCloneLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "database name\n"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "database status\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneLinkedDatabaseInfo:getNdbCloneLinkedDatabaseInfo"
                    },
                    "description": "cloned info\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metric of clone\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "infos",
                "metric",
                "name",
                "parentDatabaseId",
                "parentLinkedDatabaseId",
                "snapshotId",
                "status",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneLinkedDatabaseInfo:getNdbCloneLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "cloned info\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneProperty:getNdbCloneProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTag:getNdbCloneTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachine:getNdbCloneTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean",
                    "description": "clone or not\n"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clustered or not\n"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "metric": {
                    "type": "string",
                    "description": "Metric of clone\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineProperty:getNdbCloneTimeMachineProperty"
                    },
                    "description": "properties of clone\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineSchedule:getNdbCloneTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineSla:getNdbCloneTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineTag:getNdbCloneTimeMachineTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "type\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "clone",
                "clones",
                "clustered",
                "database",
                "databaseId",
                "dateCreated",
                "dateModified",
                "description",
                "eaStatus",
                "id",
                "metric",
                "name",
                "properties",
                "schedules",
                "scheduleId",
                "scope",
                "slas",
                "slaId",
                "slaUpdateInProgress",
                "slaUpdateMetadata",
                "sourceNxClusters",
                "status",
                "tags",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineProperty:getNdbCloneTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineSchedule:getNdbCloneTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineScheduleContinuousSchedule:getNdbCloneTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineScheduleDailySchedule:getNdbCloneTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineScheduleMonthlySchedule:getNdbCloneTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineScheduleQuartelySchedule:getNdbCloneTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineScheduleSnapshotTimeOfDay:getNdbCloneTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string",
                    "description": "time zone\n"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineScheduleWeeklySchedule:getNdbCloneTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbCloneTimeMachineScheduleYearlySchedule:getNdbCloneTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "continuousSchedules",
                "dailySchedules",
                "dateCreated",
                "dateModified",
                "description",
                "globalPolicy",
                "id",
                "monthlySchedules",
                "name",
                "ownerId",
                "quartelySchedules",
                "referenceCount",
                "snapshotTimeOfDays",
                "startTime",
                "systemPolicy",
                "timeZone",
                "uniqueName",
                "weeklySchedules",
                "yearlySchedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineScheduleContinuousSchedule:getNdbCloneTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logBackupInterval",
                "snapshotsPerDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineScheduleDailySchedule:getNdbCloneTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineScheduleMonthlySchedule:getNdbCloneTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineScheduleQuartelySchedule:getNdbCloneTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "startMonth",
                "startMonthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineScheduleSnapshotTimeOfDay:getNdbCloneTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "extra",
                "hours",
                "minutes",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineScheduleWeeklySchedule:getNdbCloneTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "dayOfWeekValue",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineScheduleYearlySchedule:getNdbCloneTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "month",
                "monthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineSla:getNdbCloneTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "continuousRetention",
                "currentActiveFrequency",
                "dailyRetention",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "monthlyRetention",
                "name",
                "ownerId",
                "pitrEnabled",
                "quarterlyRetention",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "weeklyRetention",
                "yearlyRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbCloneTimeMachineTag:getNdbCloneTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesClone:getNdbClonesClone": {
            "properties": {
                "clone": {
                    "type": "boolean",
                    "description": "clone or not\n"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clustered or not\n"
                },
                "databaseClusterType": {
                    "type": "string",
                    "description": "database cluster type\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "database name\n"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneDatabaseNode:getNdbClonesCloneDatabaseNode"
                    },
                    "description": "database nodes associated with database instance\n"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "database status\n"
                },
                "databases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "database for a cloned instance\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "dbserver logical cluster\n"
                },
                "dbserverLogicalClusterId": {
                    "type": "string",
                    "description": "dbserver logical cluster id\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfo:getNdbClonesCloneInfo"
                    },
                    "description": "cloned info\n"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneLcmConfig:getNdbClonesCloneLcmConfig"
                    },
                    "description": "LCM Config\n"
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneLinkedDatabase:getNdbClonesCloneLinkedDatabase"
                    },
                    "description": "linked databases within database instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metric of clone\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentSourceDatabaseId": {
                    "type": "string",
                    "description": "parent source database id\n"
                },
                "parentTimeMachineId": {
                    "type": "string",
                    "description": "parent time machine id\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneProperty:getNdbClonesCloneProperty"
                    },
                    "description": "properties of clone\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTag:getNdbClonesCloneTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "time machine id\n"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachine:getNdbClonesCloneTimeMachine"
                    },
                    "description": "Time machine info\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "time zone\n"
                },
                "type": {
                    "type": "string",
                    "description": "type\n"
                }
            },
            "type": "object",
            "required": [
                "clone",
                "clustered",
                "databaseClusterType",
                "databaseName",
                "databaseNodes",
                "databaseStatus",
                "databases",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "dbserverLogicalClusterId",
                "description",
                "id",
                "infos",
                "lcmConfigs",
                "linkedDatabases",
                "metric",
                "name",
                "parentDatabaseId",
                "parentSourceDatabaseId",
                "parentTimeMachineId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeMachineId",
                "timeZone",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneDatabaseNode:getNdbClonesCloneDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "database status\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneDatabaseNodeInfo:getNdbClonesCloneDatabaseNodeInfo"
                    },
                    "description": "cloned info\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneDatabaseNodeProperty:getNdbClonesCloneDatabaseNodeProperty"
                    },
                    "description": "properties of clone\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneDatabaseNodeProtectionDomain:getNdbClonesCloneDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneDatabaseNodeTag:getNdbClonesCloneDatabaseNodeTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "databaseId",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "dbserver",
                "dbserverId",
                "description",
                "id",
                "infos",
                "name",
                "primary",
                "properties",
                "protectionDomains",
                "protectionDomainId",
                "softwareInstallationId",
                "status",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneDatabaseNodeInfo:getNdbClonesCloneDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "cloned info\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneDatabaseNodeProperty:getNdbClonesCloneDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneDatabaseNodeProtectionDomain:getNdbClonesCloneDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneDatabaseNodeProtectionDomainProperty:getNdbClonesCloneDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "properties of clone\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "type": {
                    "type": "string",
                    "description": "type\n"
                }
            },
            "type": "object",
            "required": [
                "assocEntities",
                "cloudId",
                "dateCreated",
                "dateModified",
                "description",
                "eraCreated",
                "id",
                "name",
                "ownerId",
                "primaryHost",
                "properties",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneDatabaseNodeProtectionDomainProperty:getNdbClonesCloneDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneDatabaseNodeTag:getNdbClonesCloneDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfo:getNdbClonesCloneInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfoBpgConfig:getNdbClonesCloneInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfoBpgConfig:getNdbClonesCloneInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfoBpgConfigBpgDbParam:getNdbClonesCloneInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfoBpgConfigStorage:getNdbClonesCloneInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfoBpgConfigVmProperty:getNdbClonesCloneInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfoBpgConfigBpgDbParam:getNdbClonesCloneInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfoBpgConfigStorage:getNdbClonesCloneInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfoBpgConfigStorageArchiveStorage:getNdbClonesCloneInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfoBpgConfigStorageDataDisk:getNdbClonesCloneInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneInfoBpgConfigStorageLogDisk:getNdbClonesCloneInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfoBpgConfigStorageArchiveStorage:getNdbClonesCloneInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfoBpgConfigStorageDataDisk:getNdbClonesCloneInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfoBpgConfigStorageLogDisk:getNdbClonesCloneInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneInfoBpgConfigVmProperty:getNdbClonesCloneInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneLcmConfig:getNdbClonesCloneLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneLcmConfigExpiryDetail:getNdbClonesCloneLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneLcmConfigPostDeleteCommand:getNdbClonesCloneLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneLcmConfigPreDeleteCommand:getNdbClonesCloneLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneLcmConfigRefreshDetail:getNdbClonesCloneLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneLcmConfigExpiryDetail:getNdbClonesCloneLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneLcmConfigPostDeleteCommand:getNdbClonesCloneLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneLcmConfigPreDeleteCommand:getNdbClonesCloneLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneLcmConfigRefreshDetail:getNdbClonesCloneLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneLinkedDatabase:getNdbClonesCloneLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "database name\n"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "database status\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneLinkedDatabaseInfo:getNdbClonesCloneLinkedDatabaseInfo"
                    },
                    "description": "cloned info\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metric of clone\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "infos",
                "metric",
                "name",
                "parentDatabaseId",
                "parentLinkedDatabaseId",
                "snapshotId",
                "status",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneLinkedDatabaseInfo:getNdbClonesCloneLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "cloned info\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneProperty:getNdbClonesCloneProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTag:getNdbClonesCloneTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachine:getNdbClonesCloneTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean",
                    "description": "clone or not\n"
                },
                "clones": {
                    "type": "string",
                    "description": "List of clones based on filters\n"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clustered or not\n"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "metric": {
                    "type": "string",
                    "description": "Metric of clone\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineProperty:getNdbClonesCloneTimeMachineProperty"
                    },
                    "description": "properties of clone\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineSchedule:getNdbClonesCloneTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineSla:getNdbClonesCloneTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineTag:getNdbClonesCloneTimeMachineTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "type\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "clone",
                "clones",
                "clustered",
                "database",
                "databaseId",
                "dateCreated",
                "dateModified",
                "description",
                "eaStatus",
                "id",
                "metric",
                "name",
                "properties",
                "schedules",
                "scheduleId",
                "scope",
                "slas",
                "slaId",
                "slaUpdateInProgress",
                "slaUpdateMetadata",
                "sourceNxClusters",
                "status",
                "tags",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineProperty:getNdbClonesCloneTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineSchedule:getNdbClonesCloneTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineScheduleContinuousSchedule:getNdbClonesCloneTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineScheduleDailySchedule:getNdbClonesCloneTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineScheduleMonthlySchedule:getNdbClonesCloneTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineScheduleQuartelySchedule:getNdbClonesCloneTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDay:getNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string",
                    "description": "time zone\n"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineScheduleWeeklySchedule:getNdbClonesCloneTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClonesCloneTimeMachineScheduleYearlySchedule:getNdbClonesCloneTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "continuousSchedules",
                "dailySchedules",
                "dateCreated",
                "dateModified",
                "description",
                "globalPolicy",
                "id",
                "monthlySchedules",
                "name",
                "ownerId",
                "quartelySchedules",
                "referenceCount",
                "snapshotTimeOfDays",
                "startTime",
                "systemPolicy",
                "timeZone",
                "uniqueName",
                "weeklySchedules",
                "yearlySchedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineScheduleContinuousSchedule:getNdbClonesCloneTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logBackupInterval",
                "snapshotsPerDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineScheduleDailySchedule:getNdbClonesCloneTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineScheduleMonthlySchedule:getNdbClonesCloneTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineScheduleQuartelySchedule:getNdbClonesCloneTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "startMonth",
                "startMonthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDay:getNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "extra",
                "hours",
                "minutes",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineScheduleWeeklySchedule:getNdbClonesCloneTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "dayOfWeekValue",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineScheduleYearlySchedule:getNdbClonesCloneTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "month",
                "monthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineSla:getNdbClonesCloneTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "description": {
                    "type": "string",
                    "description": "cloned description\n"
                },
                "id": {
                    "type": "string",
                    "description": "cloned id\n"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "cloned name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "continuousRetention",
                "currentActiveFrequency",
                "dailyRetention",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "monthlyRetention",
                "name",
                "ownerId",
                "pitrEnabled",
                "quarterlyRetention",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "weeklyRetention",
                "yearlyRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesCloneTimeMachineTag:getNdbClonesCloneTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClonesFilter:getNdbClonesFilter": {
            "properties": {
                "anyStatus": {
                    "type": "string",
                    "description": "Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false\n"
                },
                "detailed": {
                    "type": "string",
                    "description": "Load entities with complete details. Default is false\n"
                },
                "loadDbserverCluster": {
                    "type": "string",
                    "description": "Load cluster info. Default is false\n"
                },
                "orderByDbserverCluster": {
                    "type": "string",
                    "description": "Sorted by dbserver cluster. Default is false\n"
                },
                "orderByDbserverLogicalCluster": {
                    "type": "string",
                    "description": "Sorted by dbserver logical cluster.  Default is false\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Default is UTC\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/getNdbClusterEntityCount:getNdbClusterEntityCount": {
            "properties": {
                "dbServers": {
                    "type": "integer"
                },
                "engineCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCount:getNdbClusterEntityCountEngineCount"
                    }
                }
            },
            "type": "object",
            "required": [
                "dbServers",
                "engineCounts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCount:getNdbClusterEntityCountEngineCount": {
            "properties": {
                "mariadbDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountMariadbDatabase:getNdbClusterEntityCountEngineCountMariadbDatabase"
                    }
                },
                "mongodbDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountMongodbDatabase:getNdbClusterEntityCountEngineCountMongodbDatabase"
                    }
                },
                "mysqlDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountMysqlDatabase:getNdbClusterEntityCountEngineCountMysqlDatabase"
                    }
                },
                "oracleDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountOracleDatabase:getNdbClusterEntityCountEngineCountOracleDatabase"
                    }
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountPostgresDatabase:getNdbClusterEntityCountEngineCountPostgresDatabase"
                    }
                },
                "saphanaDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountSaphanaDatabase:getNdbClusterEntityCountEngineCountSaphanaDatabase"
                    }
                },
                "sqlserverDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountSqlserverDatabase:getNdbClusterEntityCountEngineCountSqlserverDatabase"
                    }
                }
            },
            "type": "object",
            "required": [
                "mariadbDatabases",
                "mongodbDatabases",
                "mysqlDatabases",
                "oracleDatabases",
                "postgresDatabases",
                "saphanaDatabases",
                "sqlserverDatabases"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountMariadbDatabase:getNdbClusterEntityCountEngineCountMariadbDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountMariadbDatabaseProfile:getNdbClusterEntityCountEngineCountMariadbDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountMariadbDatabaseProfile:getNdbClusterEntityCountEngineCountMariadbDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountMongodbDatabase:getNdbClusterEntityCountEngineCountMongodbDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountMongodbDatabaseProfile:getNdbClusterEntityCountEngineCountMongodbDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountMongodbDatabaseProfile:getNdbClusterEntityCountEngineCountMongodbDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountMysqlDatabase:getNdbClusterEntityCountEngineCountMysqlDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountMysqlDatabaseProfile:getNdbClusterEntityCountEngineCountMysqlDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountMysqlDatabaseProfile:getNdbClusterEntityCountEngineCountMysqlDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountOracleDatabase:getNdbClusterEntityCountEngineCountOracleDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountOracleDatabaseProfile:getNdbClusterEntityCountEngineCountOracleDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountOracleDatabaseProfile:getNdbClusterEntityCountEngineCountOracleDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountPostgresDatabase:getNdbClusterEntityCountEngineCountPostgresDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountPostgresDatabaseProfile:getNdbClusterEntityCountEngineCountPostgresDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountPostgresDatabaseProfile:getNdbClusterEntityCountEngineCountPostgresDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountSaphanaDatabase:getNdbClusterEntityCountEngineCountSaphanaDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountSaphanaDatabaseProfile:getNdbClusterEntityCountEngineCountSaphanaDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountSaphanaDatabaseProfile:getNdbClusterEntityCountEngineCountSaphanaDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountSqlserverDatabase:getNdbClusterEntityCountEngineCountSqlserverDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClusterEntityCountEngineCountSqlserverDatabaseProfile:getNdbClusterEntityCountEngineCountSqlserverDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterEntityCountEngineCountSqlserverDatabaseProfile:getNdbClusterEntityCountEngineCountSqlserverDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterProperty:getNdbClusterProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of cluster\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClusterResourceConfig:getNdbClusterResourceConfig": {
            "properties": {
                "memoryThresholdPercentage": {
                    "type": "number"
                },
                "storageThresholdPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "memoryThresholdPercentage",
                "storageThresholdPercentage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersCluster:getNdbClustersCluster": {
            "properties": {
                "cloudInfo": {
                    "type": "string"
                },
                "cloudType": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "entityCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCount:getNdbClustersClusterEntityCount"
                    }
                },
                "fqdns": {
                    "type": "string"
                },
                "healthy": {
                    "type": "boolean"
                },
                "hypervisorType": {
                    "type": "string"
                },
                "hypervisorVersion": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "managementServerInfo": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nxClusterUuid": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterProperty:getNdbClustersClusterProperty"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "resourceConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterResourceConfig:getNdbClustersClusterResourceConfig"
                    }
                },
                "status": {
                    "type": "string"
                },
                "uniqueName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudInfo",
                "cloudType",
                "dateCreated",
                "dateModified",
                "description",
                "entityCounts",
                "fqdns",
                "healthy",
                "hypervisorType",
                "hypervisorVersion",
                "id",
                "ipAddresses",
                "managementServerInfo",
                "name",
                "nxClusterUuid",
                "ownerId",
                "password",
                "properties",
                "referenceCount",
                "resourceConfigs",
                "status",
                "uniqueName",
                "username",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCount:getNdbClustersClusterEntityCount": {
            "properties": {
                "dbServers": {
                    "type": "integer"
                },
                "engineCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCount:getNdbClustersClusterEntityCountEngineCount"
                    }
                }
            },
            "type": "object",
            "required": [
                "dbServers",
                "engineCounts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCount:getNdbClustersClusterEntityCountEngineCount": {
            "properties": {
                "mariadbDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountMariadbDatabase:getNdbClustersClusterEntityCountEngineCountMariadbDatabase"
                    }
                },
                "mongodbDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountMongodbDatabase:getNdbClustersClusterEntityCountEngineCountMongodbDatabase"
                    }
                },
                "mysqlDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountMysqlDatabase:getNdbClustersClusterEntityCountEngineCountMysqlDatabase"
                    }
                },
                "oracleDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountOracleDatabase:getNdbClustersClusterEntityCountEngineCountOracleDatabase"
                    }
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountPostgresDatabase:getNdbClustersClusterEntityCountEngineCountPostgresDatabase"
                    }
                },
                "saphanaDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountSaphanaDatabase:getNdbClustersClusterEntityCountEngineCountSaphanaDatabase"
                    }
                },
                "sqlserverDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountSqlserverDatabase:getNdbClustersClusterEntityCountEngineCountSqlserverDatabase"
                    }
                }
            },
            "type": "object",
            "required": [
                "mariadbDatabases",
                "mongodbDatabases",
                "mysqlDatabases",
                "oracleDatabases",
                "postgresDatabases",
                "saphanaDatabases",
                "sqlserverDatabases"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountMariadbDatabase:getNdbClustersClusterEntityCountEngineCountMariadbDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfile:getNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfile:getNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountMongodbDatabase:getNdbClustersClusterEntityCountEngineCountMongodbDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfile:getNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfile:getNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountMysqlDatabase:getNdbClustersClusterEntityCountEngineCountMysqlDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfile:getNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfile:getNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountOracleDatabase:getNdbClustersClusterEntityCountEngineCountOracleDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountOracleDatabaseProfile:getNdbClustersClusterEntityCountEngineCountOracleDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountOracleDatabaseProfile:getNdbClustersClusterEntityCountEngineCountOracleDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountPostgresDatabase:getNdbClustersClusterEntityCountEngineCountPostgresDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfile:getNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfile:getNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountSaphanaDatabase:getNdbClustersClusterEntityCountEngineCountSaphanaDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfile:getNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfile:getNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountSqlserverDatabase:getNdbClustersClusterEntityCountEngineCountSqlserverDatabase": {
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfile:getNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfile"
                    }
                },
                "timeMachines": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "profiles",
                "timeMachines"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfile:getNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfile": {
            "properties": {
                "compute": {
                    "type": "integer"
                },
                "databaseParameter": {
                    "type": "integer"
                },
                "network": {
                    "type": "integer"
                },
                "software": {
                    "type": "integer"
                },
                "storage": {
                    "type": "integer"
                },
                "windowsDomain": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "compute",
                "databaseParameter",
                "network",
                "software",
                "storage",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterProperty:getNdbClustersClusterProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbClustersClusterResourceConfig:getNdbClustersClusterResourceConfig": {
            "properties": {
                "memoryThresholdPercentage": {
                    "type": "number"
                },
                "storageThresholdPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "memoryThresholdPercentage",
                "storageThresholdPercentage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseDatabaseNode:getNdbDatabaseDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string",
                    "description": "ID of database instance\n"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- date modified\n"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "id": {
                    "type": "string",
                    "description": "- id of database instance\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseDatabaseNodeInfo:getNdbDatabaseDatabaseNodeInfo"
                    },
                    "description": "- info regarding disks, vm, storage, etc.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseDatabaseNodeProperty:getNdbDatabaseDatabaseNodeProperty"
                    },
                    "description": "- properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseDatabaseNodeProtectionDomain:getNdbDatabaseDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "- status of database instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseDatabaseNodeTag:getNdbDatabaseDatabaseNodeTag"
                    },
                    "description": "- tags attached\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "databaseId",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "dbserver",
                "dbserverId",
                "description",
                "id",
                "infos",
                "name",
                "primary",
                "properties",
                "protectionDomains",
                "protectionDomainId",
                "softwareInstallationId",
                "status",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseDatabaseNodeInfo:getNdbDatabaseDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- info regarding disks, vm, storage, etc.\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseDatabaseNodeProperty:getNdbDatabaseDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseDatabaseNodeProtectionDomain:getNdbDatabaseDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "- id of database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseDatabaseNodeProtectionDomainProperty:getNdbDatabaseDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "- properties\n"
                },
                "status": {
                    "type": "string",
                    "description": "- status of database instance\n"
                },
                "type": {
                    "type": "string",
                    "description": "- database engine type\n"
                }
            },
            "type": "object",
            "required": [
                "assocEntities",
                "cloudId",
                "dateCreated",
                "dateModified",
                "description",
                "eraCreated",
                "id",
                "name",
                "ownerId",
                "primaryHost",
                "properties",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseDatabaseNodeProtectionDomainProperty:getNdbDatabaseDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseDatabaseNodeTag:getNdbDatabaseDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfo:getNdbDatabaseInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseInfoBpgConfig:getNdbDatabaseInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfoBpgConfig:getNdbDatabaseInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseInfoBpgConfigBpgDbParam:getNdbDatabaseInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseInfoBpgConfigStorage:getNdbDatabaseInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseInfoBpgConfigVmProperty:getNdbDatabaseInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfoBpgConfigBpgDbParam:getNdbDatabaseInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfoBpgConfigStorage:getNdbDatabaseInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseInfoBpgConfigStorageArchiveStorage:getNdbDatabaseInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseInfoBpgConfigStorageDataDisk:getNdbDatabaseInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseInfoBpgConfigStorageLogDisk:getNdbDatabaseInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfoBpgConfigStorageArchiveStorage:getNdbDatabaseInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfoBpgConfigStorageDataDisk:getNdbDatabaseInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfoBpgConfigStorageLogDisk:getNdbDatabaseInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseInfoBpgConfigVmProperty:getNdbDatabaseInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseLcmConfig:getNdbDatabaseLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseLcmConfigExpiryDetail:getNdbDatabaseLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseLcmConfigPostDeleteCommand:getNdbDatabaseLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseLcmConfigPreDeleteCommand:getNdbDatabaseLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseLcmConfigRefreshDetail:getNdbDatabaseLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseLcmConfigExpiryDetail:getNdbDatabaseLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseLcmConfigPostDeleteCommand:getNdbDatabaseLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseLcmConfigPreDeleteCommand:getNdbDatabaseLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseLcmConfigRefreshDetail:getNdbDatabaseLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseLinkedDatabase:getNdbDatabaseLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "- database instance name\n"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "id": {
                    "type": "string",
                    "description": "- id of database instance\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseLinkedDatabaseInfo:getNdbDatabaseLinkedDatabaseInfo"
                    },
                    "description": "- info regarding disks, vm, storage, etc.\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- metrics\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "- parent database ID\n"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "- status of database instance\n"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "infos",
                "metric",
                "name",
                "parentDatabaseId",
                "parentLinkedDatabaseId",
                "snapshotId",
                "status",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseLinkedDatabaseInfo:getNdbDatabaseLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- info regarding disks, vm, storage, etc.\n"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseProperty:getNdbDatabaseProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTag:getNdbDatabaseTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachine:getNdbDatabaseTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean",
                    "description": "- if cloned\n"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "- if clustered or not\n"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string",
                    "description": "ID of database instance\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "- id of database instance\n"
                },
                "metric": {
                    "type": "string",
                    "description": "- metrics\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineProperty:getNdbDatabaseTimeMachineProperty"
                    },
                    "description": "- properties\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineSchedule:getNdbDatabaseTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineSla:getNdbDatabaseTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "- status of database instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineTag:getNdbDatabaseTimeMachineTag"
                    },
                    "description": "- tags attached\n"
                },
                "type": {
                    "type": "string",
                    "description": "- database engine type\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "clone",
                "clones",
                "clustered",
                "database",
                "databaseId",
                "dateCreated",
                "dateModified",
                "description",
                "eaStatus",
                "id",
                "metric",
                "name",
                "properties",
                "schedules",
                "scheduleId",
                "scope",
                "slas",
                "slaId",
                "slaUpdateInProgress",
                "slaUpdateMetadata",
                "sourceNxClusters",
                "status",
                "tags",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineProperty:getNdbDatabaseTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineSchedule:getNdbDatabaseTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineScheduleContinuousSchedule:getNdbDatabaseTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineScheduleDailySchedule:getNdbDatabaseTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "- id of database instance\n"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineScheduleMonthlySchedule:getNdbDatabaseTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineScheduleQuartelySchedule:getNdbDatabaseTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineScheduleSnapshotTimeOfDay:getNdbDatabaseTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string",
                    "description": "- timezone\n"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineScheduleWeeklySchedule:getNdbDatabaseTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachineScheduleYearlySchedule:getNdbDatabaseTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "continuousSchedules",
                "dailySchedules",
                "dateCreated",
                "dateModified",
                "description",
                "globalPolicy",
                "id",
                "monthlySchedules",
                "name",
                "ownerId",
                "quartelySchedules",
                "referenceCount",
                "snapshotTimeOfDays",
                "startTime",
                "systemPolicy",
                "timeZone",
                "uniqueName",
                "weeklySchedules",
                "yearlySchedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineScheduleContinuousSchedule:getNdbDatabaseTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logBackupInterval",
                "snapshotsPerDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineScheduleDailySchedule:getNdbDatabaseTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineScheduleMonthlySchedule:getNdbDatabaseTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineScheduleQuartelySchedule:getNdbDatabaseTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "startMonth",
                "startMonthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineScheduleSnapshotTimeOfDay:getNdbDatabaseTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "extra",
                "hours",
                "minutes",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineScheduleWeeklySchedule:getNdbDatabaseTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "dayOfWeekValue",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineScheduleYearlySchedule:getNdbDatabaseTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "month",
                "monthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineSla:getNdbDatabaseTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "- description\n"
                },
                "id": {
                    "type": "string",
                    "description": "- id of database instance\n"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "- name of database instance\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "continuousRetention",
                "currentActiveFrequency",
                "dailyRetention",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "monthlyRetention",
                "name",
                "ownerId",
                "pitrEnabled",
                "quarterlyRetention",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "weeklyRetention",
                "yearlyRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabaseTimeMachineTag:getNdbDatabaseTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstance:getNdbDatabasesDatabaseInstance": {
            "properties": {
                "clone": {
                    "type": "boolean"
                },
                "clustered": {
                    "type": "boolean"
                },
                "databaseClusterType": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNode:getNdbDatabasesDatabaseInstanceDatabaseNode"
                    }
                },
                "databases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverLogicalClusterId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfo:getNdbDatabasesDatabaseInstanceInfo"
                    }
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfig:getNdbDatabasesDatabaseInstanceLcmConfig"
                    }
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceLinkedDatabase:getNdbDatabasesDatabaseInstanceLinkedDatabase"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceMetadata:getNdbDatabasesDatabaseInstanceMetadata"
                    }
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceProperty:getNdbDatabasesDatabaseInstanceProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTag:getNdbDatabasesDatabaseInstanceTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachine:getNdbDatabasesDatabaseInstanceTimeMachine"
                    }
                },
                "timeZone": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clone",
                "clustered",
                "databaseClusterType",
                "databaseName",
                "databaseNodes",
                "databases",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "dbserverLogicalClusterId",
                "description",
                "id",
                "infos",
                "lcmConfigs",
                "linkedDatabases",
                "metadatas",
                "metric",
                "name",
                "parentDatabaseId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeMachineId",
                "timeZone",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNode:getNdbDatabasesDatabaseInstanceDatabaseNode": {
            "properties": {
                "accessLevel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "databaseId": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserver": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeInfo:getNdbDatabasesDatabaseInstanceDatabaseNodeInfo"
                    }
                },
                "name": {
                    "type": "string"
                },
                "primary": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeProperty:getNdbDatabasesDatabaseInstanceDatabaseNodeProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "protectionDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomain:getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomain"
                    }
                },
                "softwareInstallationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeTag:getNdbDatabasesDatabaseInstanceDatabaseNodeTag"
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "databaseId",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "dbserver",
                "dbserverId",
                "description",
                "id",
                "infos",
                "name",
                "primary",
                "properties",
                "protectionDomains",
                "protectionDomainId",
                "softwareInstallationId",
                "status",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeInfo:getNdbDatabasesDatabaseInstanceDatabaseNodeInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeProperty:getNdbDatabasesDatabaseInstanceDatabaseNodeProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomain:getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomain": {
            "properties": {
                "assocEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "primaryHost": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainProperty:getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assocEntities",
                "cloudId",
                "dateCreated",
                "dateModified",
                "description",
                "eraCreated",
                "id",
                "name",
                "ownerId",
                "primaryHost",
                "properties",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainProperty:getNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceDatabaseNodeTag:getNdbDatabasesDatabaseInstanceDatabaseNodeTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfo:getNdbDatabasesDatabaseInstanceInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfig:getNdbDatabasesDatabaseInstanceInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfig:getNdbDatabasesDatabaseInstanceInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParam:getNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorage:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigVmProperty:getNdbDatabasesDatabaseInstanceInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParam:getNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorage:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorage:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDisk:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDisk:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorage:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDisk:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDisk:getNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceInfoBpgConfigVmProperty:getNdbDatabasesDatabaseInstanceInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfig:getNdbDatabasesDatabaseInstanceLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigExpiryDetail:getNdbDatabasesDatabaseInstanceLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommand:getNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommand:getNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigRefreshDetail:getNdbDatabasesDatabaseInstanceLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigExpiryDetail:getNdbDatabasesDatabaseInstanceLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommand:getNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommand:getNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceLcmConfigRefreshDetail:getNdbDatabasesDatabaseInstanceLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceLinkedDatabase:getNdbDatabasesDatabaseInstanceLinkedDatabase": {
            "properties": {
                "databaseName": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceLinkedDatabaseInfo:getNdbDatabasesDatabaseInstanceLinkedDatabaseInfo"
                    }
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "infos",
                "metric",
                "name",
                "parentDatabaseId",
                "parentLinkedDatabaseId",
                "snapshotId",
                "status",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceLinkedDatabaseInfo:getNdbDatabasesDatabaseInstanceLinkedDatabaseInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceMetadata:getNdbDatabasesDatabaseInstanceMetadata": {
            "properties": {
                "baseSizeComputed": {
                    "type": "boolean"
                },
                "capabilityResetTime": {
                    "type": "string"
                },
                "createdDbservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deregisterInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceMetadataDeregisterInfo:getNdbDatabasesDatabaseInstanceMetadataDeregisterInfo"
                    }
                },
                "deregisteredWithDeleteTimeMachine": {
                    "type": "boolean"
                },
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "lastLogCatchupForRestoreOperationId": {
                    "type": "string"
                },
                "lastRefreshTimestamp": {
                    "type": "string"
                },
                "lastRequestedRefreshTimestamp": {
                    "type": "string"
                },
                "logCatchupForRestoreDispatched": {
                    "type": "boolean"
                },
                "originalDatabaseName": {
                    "type": "string"
                },
                "pitrBased": {
                    "type": "boolean"
                },
                "provisionOperationId": {
                    "type": "string"
                },
                "refreshBlockerInfo": {
                    "type": "string"
                },
                "registeredDbservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sourceSnapshotId": {
                    "type": "string"
                },
                "stateBeforeRefresh": {
                    "type": "string"
                },
                "stateBeforeRestore": {
                    "type": "string"
                },
                "stateBeforeScaling": {
                    "type": "string"
                },
                "tmActivateOperationId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseSizeComputed",
                "capabilityResetTime",
                "createdDbservers",
                "deregisterInfos",
                "deregisteredWithDeleteTimeMachine",
                "info",
                "lastLogCatchupForRestoreOperationId",
                "lastRefreshTimestamp",
                "lastRequestedRefreshTimestamp",
                "logCatchupForRestoreDispatched",
                "originalDatabaseName",
                "pitrBased",
                "provisionOperationId",
                "refreshBlockerInfo",
                "registeredDbservers",
                "secureInfo",
                "sourceSnapshotId",
                "stateBeforeRefresh",
                "stateBeforeRestore",
                "stateBeforeScaling",
                "tmActivateOperationId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceMetadataDeregisterInfo:getNdbDatabasesDatabaseInstanceMetadataDeregisterInfo": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "message",
                "operations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceProperty:getNdbDatabasesDatabaseInstanceProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTag:getNdbDatabasesDatabaseInstanceTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachine:getNdbDatabasesDatabaseInstanceTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineProperty:getNdbDatabasesDatabaseInstanceTimeMachineProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineSchedule:getNdbDatabasesDatabaseInstanceTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineSla:getNdbDatabasesDatabaseInstanceTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineTag:getNdbDatabasesDatabaseInstanceTimeMachineTag"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "clone",
                "clones",
                "clustered",
                "database",
                "databaseId",
                "dateCreated",
                "dateModified",
                "description",
                "eaStatus",
                "id",
                "metric",
                "name",
                "properties",
                "schedules",
                "scheduleId",
                "scope",
                "slas",
                "slaId",
                "slaUpdateInProgress",
                "slaUpdateMetadata",
                "sourceNxClusters",
                "status",
                "tags",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineProperty:getNdbDatabasesDatabaseInstanceTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineSchedule:getNdbDatabasesDatabaseInstanceTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousSchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleDailySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDay:getNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "continuousSchedules",
                "dailySchedules",
                "dateCreated",
                "dateModified",
                "description",
                "globalPolicy",
                "id",
                "monthlySchedules",
                "name",
                "ownerId",
                "quartelySchedules",
                "referenceCount",
                "snapshotTimeOfDays",
                "startTime",
                "systemPolicy",
                "timeZone",
                "uniqueName",
                "weeklySchedules",
                "yearlySchedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousSchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logBackupInterval",
                "snapshotsPerDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleDailySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "startMonth",
                "startMonthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDay:getNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "extra",
                "hours",
                "minutes",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "dayOfWeekValue",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlySchedule:getNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "month",
                "monthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineSla:getNdbDatabasesDatabaseInstanceTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "continuousRetention",
                "currentActiveFrequency",
                "dailyRetention",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "monthlyRetention",
                "name",
                "ownerId",
                "pitrEnabled",
                "quarterlyRetention",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "weeklyRetention",
                "yearlyRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDatabasesDatabaseInstanceTimeMachineTag:getNdbDatabasesDatabaseInstanceTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverProperty:getNdbDbserverProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of database server vm\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverTag:getNdbDbserverTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfo:getNdbDbserverVmInfo": {
            "properties": {
                "deregisterInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoDeregisterInfo:getNdbDbserverVmInfoDeregisterInfo"
                    }
                },
                "distribution": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfo:getNdbDbserverVmInfoInfo"
                    }
                },
                "networkInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoNetworkInfo:getNdbDbserverVmInfoNetworkInfo"
                    }
                },
                "osType": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "deregisterInfos",
                "distribution",
                "infos",
                "networkInfos",
                "osType",
                "osVersion",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoDeregisterInfo:getNdbDbserverVmInfoDeregisterInfo": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "message",
                "operations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfo:getNdbDbserverVmInfoInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfoBpgConfig:getNdbDbserverVmInfoInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfoBpgConfig:getNdbDbserverVmInfoInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfoBpgConfigBpgDbParam:getNdbDbserverVmInfoInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorage:getNdbDbserverVmInfoInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfoBpgConfigVmProperty:getNdbDbserverVmInfoInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfoBpgConfigBpgDbParam:getNdbDbserverVmInfoInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorage:getNdbDbserverVmInfoInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorage:getNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorageDataDisk:getNdbDbserverVmInfoInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorageLogDisk:getNdbDbserverVmInfoInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorage:getNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorageDataDisk:getNdbDbserverVmInfoInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfoBpgConfigStorageLogDisk:getNdbDbserverVmInfoInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoInfoBpgConfigVmProperty:getNdbDbserverVmInfoInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoNetworkInfo:getNdbDbserverVmInfoNetworkInfo": {
            "properties": {
                "accessInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserverVmInfoNetworkInfoAccessInfo:getNdbDbserverVmInfoNetworkInfoAccessInfo"
                    }
                },
                "defaultGatewayDevice": {
                    "type": "boolean"
                },
                "deviceName": {
                    "type": "string"
                },
                "eraConfigured": {
                    "type": "boolean"
                },
                "flags": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of the dbserver vm\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "mtu": {
                    "type": "string"
                },
                "subnetMask": {
                    "type": "string"
                },
                "vlanName": {
                    "type": "string"
                },
                "vlanType": {
                    "type": "string"
                },
                "vlanUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessInfos",
                "defaultGatewayDevice",
                "deviceName",
                "eraConfigured",
                "flags",
                "gateway",
                "hostname",
                "ipAddresses",
                "macAddress",
                "mtu",
                "subnetMask",
                "vlanName",
                "vlanType",
                "vlanUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserverVmInfoNetworkInfoAccessInfo:getNdbDbserverVmInfoNetworkInfoAccessInfo": {
            "properties": {
                "accessType": {
                    "type": "string"
                },
                "destinationSubnet": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessType",
                "destinationSubnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserver:getNdbDbserversDbserver": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "access key id of dbserver vm\n"
                },
                "accessLevel": {
                    "type": "string",
                    "description": "access level\n"
                },
                "associatedTimeMachineIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "associated time machines ids\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "client id\n"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clustered or not\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "database type\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created of db server vm\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified of db server vm\n"
                },
                "dbserverInvalidEaState": {
                    "type": "boolean",
                    "description": "dbserver invalid ea state\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of db server vm\n"
                },
                "eraDriveId": {
                    "type": "string",
                    "description": "era drive id\n"
                },
                "eraVersion": {
                    "type": "string",
                    "description": "era version\n"
                },
                "fqdns": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of the dbserver vm\n"
                },
                "isServerDriven": {
                    "type": "boolean",
                    "description": "is server down or not\n"
                },
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Mac addresses of dbserver vm\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of dbserver vm\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverProperty:getNdbDbserversDbserverProperty"
                    },
                    "description": "properties of db server vm\n"
                },
                "protectionDomainId": {
                    "type": "string",
                    "description": "protection domain id\n"
                },
                "queryCount": {
                    "type": "integer",
                    "description": "query count\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Dbserver . Active or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverTag:getNdbDbserversDbserverTag"
                    },
                    "description": "tags for db server vm\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of entity. i.e. Dbserver\n"
                },
                "validDiagnosticBundleState": {
                    "type": "boolean",
                    "description": "valid diagnostic bundle state\n"
                },
                "vmClusterUuid": {
                    "type": "string",
                    "description": "clusetr uuid for dbserver vm\n"
                },
                "vmInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfo:getNdbDbserversDbserverVmInfo"
                    },
                    "description": "info of dbserver vm\n"
                },
                "vmTimezone": {
                    "type": "string",
                    "description": "timezone of dbserver vm\n"
                },
                "windowsDbServer": {
                    "type": "boolean",
                    "description": "window db server\n"
                },
                "workingDirectory": {
                    "type": "string",
                    "description": "working directory of db server vm\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "accessLevel",
                "associatedTimeMachineIds",
                "clientId",
                "clustered",
                "databaseType",
                "dateCreated",
                "dateModified",
                "dbserverInvalidEaState",
                "description",
                "eraDriveId",
                "eraVersion",
                "fqdns",
                "id",
                "ipAddresses",
                "isServerDriven",
                "macAddresses",
                "name",
                "properties",
                "protectionDomainId",
                "queryCount",
                "status",
                "tags",
                "type",
                "validDiagnosticBundleState",
                "vmClusterUuid",
                "vmInfos",
                "vmTimezone",
                "windowsDbServer",
                "workingDirectory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverProperty:getNdbDbserversDbserverProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of dbserver vm\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverTag:getNdbDbserversDbserverTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfo:getNdbDbserversDbserverVmInfo": {
            "properties": {
                "deregisterInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoDeregisterInfo:getNdbDbserversDbserverVmInfoDeregisterInfo"
                    }
                },
                "distribution": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfo:getNdbDbserversDbserverVmInfoInfo"
                    }
                },
                "networkInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoNetworkInfo:getNdbDbserversDbserverVmInfoNetworkInfo"
                    }
                },
                "osType": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "deregisterInfos",
                "distribution",
                "infos",
                "networkInfos",
                "osType",
                "osVersion",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoDeregisterInfo:getNdbDbserversDbserverVmInfoDeregisterInfo": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "message",
                "operations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfo:getNdbDbserversDbserverVmInfoInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfig:getNdbDbserversDbserverVmInfoInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfig:getNdbDbserversDbserverVmInfoInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParam:getNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorage:getNdbDbserversDbserverVmInfoInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigVmProperty:getNdbDbserversDbserverVmInfoInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParam:getNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorage:getNdbDbserversDbserverVmInfoInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorage:getNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDisk:getNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDisk:getNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorage:getNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDisk:getNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDisk:getNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoInfoBpgConfigVmProperty:getNdbDbserversDbserverVmInfoInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoNetworkInfo:getNdbDbserversDbserverVmInfoNetworkInfo": {
            "properties": {
                "accessInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbDbserversDbserverVmInfoNetworkInfoAccessInfo:getNdbDbserversDbserverVmInfoNetworkInfoAccessInfo"
                    }
                },
                "defaultGatewayDevice": {
                    "type": "boolean"
                },
                "deviceName": {
                    "type": "string"
                },
                "eraConfigured": {
                    "type": "boolean"
                },
                "flags": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of the dbserver vm\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "mtu": {
                    "type": "string"
                },
                "subnetMask": {
                    "type": "string"
                },
                "vlanName": {
                    "type": "string"
                },
                "vlanType": {
                    "type": "string"
                },
                "vlanUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessInfos",
                "defaultGatewayDevice",
                "deviceName",
                "eraConfigured",
                "flags",
                "gateway",
                "hostname",
                "ipAddresses",
                "macAddress",
                "mtu",
                "subnetMask",
                "vlanName",
                "vlanType",
                "vlanUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbDbserversDbserverVmInfoNetworkInfoAccessInfo:getNdbDbserversDbserverVmInfoNetworkInfoAccessInfo": {
            "properties": {
                "accessType": {
                    "type": "string"
                },
                "destinationSubnet": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessType",
                "destinationSubnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowEntityTaskAssoc:getNdbMaintenanceWindowEntityTaskAssoc": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "access level\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "created date of maintenance window\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of maintenance window\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of maintenance window\n"
                },
                "entity": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "Maintenance window id.\n"
                },
                "maintenanceWindowId": {
                    "type": "string"
                },
                "maintenanceWindowOwnerId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "name of maintenance window\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "owner id of maintenance window\n"
                },
                "payloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowEntityTaskAssocPayload:getNdbMaintenanceWindowEntityTaskAssocPayload"
                    }
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowEntityTaskAssocProperty:getNdbMaintenanceWindowEntityTaskAssocProperty"
                    },
                    "description": "properties of maintenance window\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of maintennace window\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowEntityTaskAssocTag:getNdbMaintenanceWindowEntityTaskAssocTag"
                    },
                    "description": "tags of maintenance window\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "dateCreated",
                "dateModified",
                "description",
                "entity",
                "entityId",
                "entityType",
                "id",
                "maintenanceWindowId",
                "maintenanceWindowOwnerId",
                "name",
                "ownerId",
                "payloads",
                "properties",
                "status",
                "tags",
                "taskType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowEntityTaskAssocPayload:getNdbMaintenanceWindowEntityTaskAssocPayload": {
            "properties": {
                "prePostCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand:getNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand"
                    }
                }
            },
            "type": "object",
            "required": [
                "prePostCommands"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand:getNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand": {
            "properties": {
                "postCommand": {
                    "type": "string"
                },
                "preCommand": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "postCommand",
                "preCommand"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowEntityTaskAssocProperty:getNdbMaintenanceWindowEntityTaskAssocProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of maintenance window\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowEntityTaskAssocTag:getNdbMaintenanceWindowEntityTaskAssocTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowProperty:getNdbMaintenanceWindowProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of maintenance window\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowSchedule:getNdbMaintenanceWindowSchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "hour": {
                    "type": "integer"
                },
                "minute": {
                    "type": "integer"
                },
                "recurrence": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "threshold": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone\n"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "hour",
                "minute",
                "recurrence",
                "threshold",
                "timezone",
                "weekOfMonth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowTag:getNdbMaintenanceWindowTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindow:getNdbMaintenanceWindowsMaintenanceWindow": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "access level\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "created date of maintenance window\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of maintenance window\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of maintenance window\n"
                },
                "entityTaskAssocs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssoc:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssoc"
                    },
                    "description": "entity task association for maintenance window\n"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "name of maintenance window\n"
                },
                "nextRunTime": {
                    "type": "string",
                    "description": "next run time for maintenance window to trigger\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "owner id of maintenance window\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowProperty:getNdbMaintenanceWindowsMaintenanceWindowProperty"
                    },
                    "description": "properties of maintenance window\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowSchedule:getNdbMaintenanceWindowsMaintenanceWindowSchedule"
                    },
                    "description": "schedule of maintenance window\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of maintennace window\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowTag:getNdbMaintenanceWindowsMaintenanceWindowTag"
                    },
                    "description": "tags of maintenance window\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "dateCreated",
                "dateModified",
                "description",
                "entityTaskAssocs",
                "id",
                "name",
                "nextRunTime",
                "ownerId",
                "properties",
                "schedules",
                "status",
                "tags",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssoc:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssoc": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "access level\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "created date of maintenance window\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of maintenance window\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of maintenance window\n"
                },
                "entity": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maintenanceWindowId": {
                    "type": "string"
                },
                "maintenanceWindowOwnerId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "name of maintenance window\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "owner id of maintenance window\n"
                },
                "payloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayload:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayload"
                    }
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocProperty:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocProperty"
                    },
                    "description": "properties of maintenance window\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of maintennace window\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTag:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTag"
                    },
                    "description": "tags of maintenance window\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "dateCreated",
                "dateModified",
                "description",
                "entity",
                "entityId",
                "entityType",
                "id",
                "maintenanceWindowId",
                "maintenanceWindowOwnerId",
                "name",
                "ownerId",
                "payloads",
                "properties",
                "status",
                "tags",
                "taskType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayload:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayload": {
            "properties": {
                "prePostCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommand:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommand"
                    }
                }
            },
            "type": "object",
            "required": [
                "prePostCommands"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommand:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommand": {
            "properties": {
                "postCommand": {
                    "type": "string"
                },
                "preCommand": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "postCommand",
                "preCommand"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocProperty:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of maintenance window\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTag:getNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowProperty:getNdbMaintenanceWindowsMaintenanceWindowProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of maintenance window\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowSchedule:getNdbMaintenanceWindowsMaintenanceWindowSchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "hour": {
                    "type": "integer"
                },
                "minute": {
                    "type": "integer"
                },
                "recurrence": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "threshold": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone\n"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "hour",
                "minute",
                "recurrence",
                "threshold",
                "timezone",
                "weekOfMonth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbMaintenanceWindowsMaintenanceWindowTag:getNdbMaintenanceWindowsMaintenanceWindowTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworkAvailableIpsAvailableIp:getNdbNetworkAvailableIpsAvailableIp": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "cluster id\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "cluster name\n"
                },
                "id": {
                    "type": "string",
                    "description": "network profile id\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of available ips in network\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "managed by ndb or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network Name\n"
                },
                "propertyName": {
                    "type": "string",
                    "description": "property name of vlan\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of network\n"
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "clusterName",
                "id",
                "ipAddresses",
                "managed",
                "name",
                "propertyName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworkIpAddress:getNdbNetworkIpAddress": {
            "properties": {
                "dbserverId": {
                    "type": "string",
                    "description": "dbserver id\n"
                },
                "dbserverName": {
                    "type": "string",
                    "description": "dbserver name\n"
                },
                "ip": {
                    "type": "string",
                    "description": "ip of pool\n"
                },
                "status": {
                    "type": "string",
                    "description": "ip status\n"
                }
            },
            "type": "object",
            "required": [
                "dbserverId",
                "dbserverName",
                "ip",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworkIpPool:getNdbNetworkIpPool": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbNetworkIpPoolAddress:getNdbNetworkIpPoolAddress"
                    },
                    "description": "address of ips ranges\n"
                },
                "endIp": {
                    "type": "string",
                    "description": "end ip\n"
                },
                "startIp": {
                    "type": "string",
                    "description": "start ip\n"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "endIp",
                "startIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworkIpPoolAddress:getNdbNetworkIpPoolAddress": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip of pool\n"
                },
                "status": {
                    "type": "string",
                    "description": "ip status\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworkPropertiesMap:getNdbNetworkPropertiesMap": {
            "properties": {
                "vlanGateway": {
                    "type": "string",
                    "description": "gateway of vlan\n"
                },
                "vlanPrimaryDns": {
                    "type": "string",
                    "description": "primary dns of vlan\n"
                },
                "vlanSecondaryDns": {
                    "type": "string",
                    "description": "secondary dns of vlan\n"
                },
                "vlanSubnetMask": {
                    "type": "string",
                    "description": "subnet mask of vlan\n"
                }
            },
            "type": "object",
            "required": [
                "vlanGateway",
                "vlanPrimaryDns",
                "vlanSecondaryDns",
                "vlanSubnetMask"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworkProperty:getNdbNetworkProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of network\n"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworksNetwork:getNdbNetworksNetwork": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "cluster id where network is present\n"
                },
                "id": {
                    "type": "string",
                    "description": "network id\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbNetworksNetworkIpAddress:getNdbNetworksNetworkIpAddress"
                    },
                    "description": "IP addresses of network\n"
                },
                "ipPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbNetworksNetworkIpPool:getNdbNetworksNetworkIpPool"
                    },
                    "description": "IP Pools of network\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "network managed by NDB or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "network name\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbNetworksNetworkProperty:getNdbNetworksNetworkProperty"
                    },
                    "description": "properties of network\n"
                },
                "propertiesMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbNetworksNetworkPropertiesMap:getNdbNetworksNetworkPropertiesMap"
                    },
                    "description": "properties map of network\n"
                },
                "stretchedVlanId": {
                    "type": "string",
                    "description": "stretched vlan id\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of network\n"
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "id",
                "ipAddresses",
                "ipPools",
                "managed",
                "name",
                "properties",
                "propertiesMaps",
                "stretchedVlanId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworksNetworkIpAddress:getNdbNetworksNetworkIpAddress": {
            "properties": {
                "dbserverId": {
                    "type": "string",
                    "description": "dbserver id\n"
                },
                "dbserverName": {
                    "type": "string",
                    "description": "dbserver name\n"
                },
                "ip": {
                    "type": "string",
                    "description": "ip of pool\n"
                },
                "status": {
                    "type": "string",
                    "description": "ip status\n"
                }
            },
            "type": "object",
            "required": [
                "dbserverId",
                "dbserverName",
                "ip",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworksNetworkIpPool:getNdbNetworksNetworkIpPool": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbNetworksNetworkIpPoolAddress:getNdbNetworksNetworkIpPoolAddress"
                    },
                    "description": "address of ips ranges\n"
                },
                "endIp": {
                    "type": "string",
                    "description": "end ip\n"
                },
                "startIp": {
                    "type": "string",
                    "description": "start ip\n"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "endIp",
                "startIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworksNetworkIpPoolAddress:getNdbNetworksNetworkIpPoolAddress": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip of pool\n"
                },
                "status": {
                    "type": "string",
                    "description": "ip status\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworksNetworkPropertiesMap:getNdbNetworksNetworkPropertiesMap": {
            "properties": {
                "vlanGateway": {
                    "type": "string",
                    "description": "gateway of vlan\n"
                },
                "vlanPrimaryDns": {
                    "type": "string",
                    "description": "primary dns of vlan\n"
                },
                "vlanSecondaryDns": {
                    "type": "string",
                    "description": "secondary dns of vlan\n"
                },
                "vlanSubnetMask": {
                    "type": "string",
                    "description": "subnet mask of vlan\n"
                }
            },
            "type": "object",
            "required": [
                "vlanGateway",
                "vlanPrimaryDns",
                "vlanSecondaryDns",
                "vlanSubnetMask"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbNetworksNetworkProperty:getNdbNetworksNetworkProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "network name\n"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfileClusterAvailability:getNdbProfileClusterAvailability": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "- era cluster ID\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "profileId": {
                    "type": "string",
                    "description": "Profile ID for query\n"
                },
                "status": {
                    "type": "string",
                    "description": "- status of profile\n"
                }
            },
            "type": "object",
            "required": [
                "dateCreated",
                "dateModified",
                "nxClusterId",
                "ownerId",
                "profileId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfileVersion:getNdbProfileVersion": {
            "properties": {
                "dbVersion": {
                    "type": "string",
                    "description": "- database version\n"
                },
                "deprecated": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string",
                    "description": "- description of profile\n"
                },
                "engineType": {
                    "type": "string",
                    "description": "- database engine type\n"
                },
                "id": {
                    "type": "string",
                    "description": "- id of profile\n"
                },
                "name": {
                    "type": "string",
                    "description": "- profile name\n"
                },
                "owner": {
                    "type": "string",
                    "description": "- owner name\n"
                },
                "profileId": {
                    "type": "string",
                    "description": "Profile ID for query\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfileVersionProperty:getNdbProfileVersionProperty"
                    }
                },
                "propertiesMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "published": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string",
                    "description": "- status of profile\n"
                },
                "systemProfile": {
                    "type": "boolean",
                    "description": "- if system profile or not\n"
                },
                "topology": {
                    "type": "string",
                    "description": "- topology\n"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "versionClusterAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfileVersionVersionClusterAssociation:getNdbProfileVersionVersionClusterAssociation"
                    }
                }
            },
            "type": "object",
            "required": [
                "dbVersion",
                "deprecated",
                "description",
                "engineType",
                "id",
                "name",
                "owner",
                "profileId",
                "properties",
                "propertiesMap",
                "published",
                "status",
                "systemProfile",
                "topology",
                "type",
                "version",
                "versionClusterAssociations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfileVersionProperty:getNdbProfileVersionProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- profile name\n"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfileVersionVersionClusterAssociation:getNdbProfileVersionVersionClusterAssociation": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "- era cluster ID\n"
                },
                "optimizedForProvisioning": {
                    "type": "boolean"
                },
                "ownerId": {
                    "type": "string"
                },
                "profileVersionId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfileVersionVersionClusterAssociationProperty:getNdbProfileVersionVersionClusterAssociationProperty"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "- status of profile\n"
                }
            },
            "type": "object",
            "required": [
                "dateCreated",
                "dateModified",
                "nxClusterId",
                "optimizedForProvisioning",
                "ownerId",
                "profileVersionId",
                "properties",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfileVersionVersionClusterAssociationProperty:getNdbProfileVersionVersionClusterAssociationProperty": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- profile name\n"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfilesProfile:getNdbProfilesProfile": {
            "properties": {
                "assocDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "assocDbServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clusterAvailabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfilesProfileClusterAvailability:getNdbProfilesProfileClusterAvailability"
                    }
                },
                "dbVersion": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "engineType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latestVersion": {
                    "type": "string"
                },
                "latestVersionId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "systemProfile": {
                    "type": "boolean"
                },
                "topology": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfilesProfileVersion:getNdbProfilesProfileVersion"
                    }
                }
            },
            "type": "object",
            "required": [
                "assocDatabases",
                "assocDbServers",
                "clusterAvailabilities",
                "dbVersion",
                "description",
                "engineType",
                "id",
                "latestVersion",
                "latestVersionId",
                "name",
                "nxClusterId",
                "owner",
                "status",
                "systemProfile",
                "topology",
                "type",
                "versions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfilesProfileClusterAvailability:getNdbProfilesProfileClusterAvailability": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "profileId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dateCreated",
                "dateModified",
                "nxClusterId",
                "ownerId",
                "profileId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfilesProfileVersion:getNdbProfilesProfileVersion": {
            "properties": {
                "dbVersion": {
                    "type": "string"
                },
                "deprecated": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "engineType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "profileId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfilesProfileVersionProperty:getNdbProfilesProfileVersionProperty"
                    }
                },
                "propertiesMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "published": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "systemProfile": {
                    "type": "boolean"
                },
                "topology": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "versionClusterAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfilesProfileVersionVersionClusterAssociation:getNdbProfilesProfileVersionVersionClusterAssociation"
                    }
                }
            },
            "type": "object",
            "required": [
                "dbVersion",
                "deprecated",
                "description",
                "engineType",
                "id",
                "name",
                "owner",
                "profileId",
                "properties",
                "propertiesMap",
                "published",
                "status",
                "systemProfile",
                "topology",
                "type",
                "version",
                "versionClusterAssociations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfilesProfileVersionProperty:getNdbProfilesProfileVersionProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfilesProfileVersionVersionClusterAssociation:getNdbProfilesProfileVersionVersionClusterAssociation": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "optimizedForProvisioning": {
                    "type": "boolean"
                },
                "ownerId": {
                    "type": "string"
                },
                "profileVersionId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbProfilesProfileVersionVersionClusterAssociationProperty:getNdbProfilesProfileVersionVersionClusterAssociationProperty"
                    }
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dateCreated",
                "dateModified",
                "nxClusterId",
                "optimizedForProvisioning",
                "ownerId",
                "profileVersionId",
                "properties",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbProfilesProfileVersionVersionClusterAssociationProperty:getNdbProfilesProfileVersionVersionClusterAssociationProperty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSlasSla:getNdbSlasSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer",
                    "description": "- continuous retention of logs limit\n"
                },
                "currentActiveFrequency": {
                    "type": "string",
                    "description": "- Current active frequency\n"
                },
                "dailyRetention": {
                    "type": "integer",
                    "description": "- Daily snapshots retention limit\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- last modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "- description of sla\n"
                },
                "id": {
                    "type": "string",
                    "description": "- ID of sla\n"
                },
                "monthlyRetention": {
                    "type": "integer",
                    "description": "- Monthly snapshots retention limit\n"
                },
                "name": {
                    "type": "string",
                    "description": "- sla name\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "- owner ID\n"
                },
                "pitrEnabled": {
                    "type": "boolean",
                    "description": "- If point in time recovery enabled\n"
                },
                "quartelyRetention": {
                    "type": "integer",
                    "description": "- Daily snapshots retention limit\n"
                },
                "referenceCount": {
                    "type": "integer",
                    "description": "- Reference count\n"
                },
                "systemSla": {
                    "type": "boolean",
                    "description": "- if system sla\n"
                },
                "uniqueName": {
                    "type": "string",
                    "description": "- unique name\n"
                },
                "weeklyRetention": {
                    "type": "integer",
                    "description": "- weeky snapshots retention limit\n"
                },
                "yearlyRetention": {
                    "type": "integer",
                    "description": "- Yearly snapshots retention limit\n"
                }
            },
            "type": "object",
            "required": [
                "continuousRetention",
                "currentActiveFrequency",
                "dailyRetention",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "monthlyRetention",
                "name",
                "ownerId",
                "pitrEnabled",
                "quartelyRetention",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "weeklyRetention",
                "yearlyRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotFilter:getNdbSnapshotFilter": {
            "properties": {
                "loadReplicatedChildSnapshots": {
                    "type": "string",
                    "description": "load child snapshots. Default is false\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Default is UTC\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/getNdbSnapshotLcmConfig:getNdbSnapshotLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotLcmConfigExpiryDetail:getNdbSnapshotLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotLcmConfigPostDeleteCommand:getNdbSnapshotLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotLcmConfigPreDeleteCommand:getNdbSnapshotLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotLcmConfigRefreshDetail:getNdbSnapshotLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotLcmConfigExpiryDetail:getNdbSnapshotLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotLcmConfigPostDeleteCommand:getNdbSnapshotLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotLcmConfigPreDeleteCommand:getNdbSnapshotLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotLcmConfigRefreshDetail:getNdbSnapshotLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotProperty:getNdbSnapshotProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of snapshot\n"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotTag:getNdbSnapshotTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsFilter:getNdbSnapshotsFilter": {
            "properties": {
                "timeMachineId": {
                    "type": "string",
                    "description": "Fetches all the snapshots for a given time machine\n"
                }
            },
            "type": "object"
        },
        "nutanix:index/getNdbSnapshotsSnapshot:getNdbSnapshotsSnapshot": {
            "properties": {
                "appInfoVersion": {
                    "type": "string"
                },
                "applicableTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "databaseNodeId": {
                    "type": "string"
                },
                "databaseSnapshot": {
                    "type": "boolean"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserverId": {
                    "type": "string"
                },
                "dbserverIp": {
                    "type": "string"
                },
                "dbserverName": {
                    "type": "string"
                },
                "dbserverStorageMetadataVersion": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "fromTimestamp": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshotLcmConfig:getNdbSnapshotsSnapshotLcmConfig"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "parentSnapshot": {
                    "type": "boolean"
                },
                "parentSnapshotId": {
                    "type": "string"
                },
                "processed": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshotProperty:getNdbSnapshotsSnapshotProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "replicatedSnapshots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "santized": {
                    "type": "boolean"
                },
                "santizedFromSnapshotId": {
                    "type": "string"
                },
                "santizedSnapshots": {
                    "type": "string"
                },
                "snapshotFamily": {
                    "type": "string"
                },
                "snapshotSize": {
                    "type": "number"
                },
                "snapshotTimestamp": {
                    "type": "string"
                },
                "snapshotTimestampDate": {
                    "type": "integer"
                },
                "snapshotUuid": {
                    "type": "string"
                },
                "softwareDatabaseSnapshot": {
                    "type": "boolean"
                },
                "softwareSnapshot": {
                    "type": "string"
                },
                "softwareSnapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshotTag:getNdbSnapshotsSnapshotTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "toTimestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appInfoVersion",
                "applicableTypes",
                "databaseNodeId",
                "databaseSnapshot",
                "dateCreated",
                "dateModified",
                "dbserverId",
                "dbserverIp",
                "dbserverName",
                "dbserverStorageMetadataVersion",
                "description",
                "fromTimestamp",
                "id",
                "lcmConfigs",
                "name",
                "nxClusterId",
                "parentSnapshot",
                "parentSnapshotId",
                "processed",
                "properties",
                "protectionDomainId",
                "replicatedSnapshots",
                "santized",
                "santizedFromSnapshotId",
                "santizedSnapshots",
                "snapshotFamily",
                "snapshotSize",
                "snapshotTimestamp",
                "snapshotTimestampDate",
                "snapshotUuid",
                "softwareDatabaseSnapshot",
                "softwareSnapshot",
                "softwareSnapshotId",
                "status",
                "tags",
                "timeMachineId",
                "timezone",
                "toTimestamp",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsSnapshotLcmConfig:getNdbSnapshotsSnapshotLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshotLcmConfigExpiryDetail:getNdbSnapshotsSnapshotLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshotLcmConfigPostDeleteCommand:getNdbSnapshotsSnapshotLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshotLcmConfigPreDeleteCommand:getNdbSnapshotsSnapshotLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshotLcmConfigRefreshDetail:getNdbSnapshotsSnapshotLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsSnapshotLcmConfigExpiryDetail:getNdbSnapshotsSnapshotLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsSnapshotLcmConfigPostDeleteCommand:getNdbSnapshotsSnapshotLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsSnapshotLcmConfigPreDeleteCommand:getNdbSnapshotsSnapshotLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsSnapshotLcmConfigRefreshDetail:getNdbSnapshotsSnapshotLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsSnapshotProperty:getNdbSnapshotsSnapshotProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbSnapshotsSnapshotTag:getNdbSnapshotsSnapshotTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTagsTag:getNdbTagsTag": {
            "properties": {
                "dateCreated": {
                    "type": "string",
                    "description": "date created of the tag\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of tha tag\n"
                },
                "description": {
                    "type": "string",
                    "description": "description for the tag\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "entity for the tag to be associated with.\n"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tag\n"
                },
                "owner": {
                    "type": "string",
                    "description": "owner id of the tag\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "tag value for entities.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the tag\n"
                },
                "values": {
                    "type": "integer",
                    "description": "value for the tag\n"
                }
            },
            "type": "object",
            "required": [
                "dateCreated",
                "dateModified",
                "description",
                "entityType",
                "id",
                "name",
                "owner",
                "required",
                "status",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineProperty:getNdbTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "time machine description\n"
                },
                "name": {
                    "type": "string",
                    "description": "time machine name\n"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineSchedule:getNdbTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachineScheduleContinuousSchedule:getNdbTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachineScheduleDailySchedule:getNdbTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "time machine description\n"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "time machine id\n"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachineScheduleMonthlySchedule:getNdbTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "time machine name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachineScheduleQuartelySchedule:getNdbTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachineScheduleSnapshotTimeOfDay:getNdbTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachineScheduleWeeklySchedule:getNdbTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachineScheduleYearlySchedule:getNdbTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "continuousSchedules",
                "dailySchedules",
                "dateCreated",
                "dateModified",
                "description",
                "globalPolicy",
                "id",
                "monthlySchedules",
                "name",
                "ownerId",
                "quartelySchedules",
                "referenceCount",
                "snapshotTimeOfDays",
                "startTime",
                "systemPolicy",
                "timeZone",
                "uniqueName",
                "weeklySchedules",
                "yearlySchedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineScheduleContinuousSchedule:getNdbTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logBackupInterval",
                "snapshotsPerDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineScheduleDailySchedule:getNdbTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineScheduleMonthlySchedule:getNdbTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineScheduleQuartelySchedule:getNdbTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "startMonth",
                "startMonthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineScheduleSnapshotTimeOfDay:getNdbTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "extra",
                "hours",
                "minutes",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineScheduleWeeklySchedule:getNdbTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "dayOfWeekValue",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineScheduleYearlySchedule:getNdbTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "month",
                "monthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineSla:getNdbTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "time machine description\n"
                },
                "id": {
                    "type": "string",
                    "description": "time machine id\n"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "time machine name\n"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "continuousRetention",
                "currentActiveFrequency",
                "dailyRetention",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "monthlyRetention",
                "name",
                "ownerId",
                "pitrEnabled",
                "quarterlyRetention",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "weeklyRetention",
                "yearlyRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachineTag:getNdbTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachine:getNdbTimeMachinesTimeMachine": {
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean"
                },
                "clones": {
                    "type": "string"
                },
                "clustered": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string"
                },
                "databaseId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eaStatus": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineProperty:getNdbTimeMachinesTimeMachineProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "scheduleId": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineSchedule:getNdbTimeMachinesTimeMachineSchedule"
                    }
                },
                "scope": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "slaUpdateInProgress": {
                    "type": "boolean"
                },
                "slaUpdateMetadata": {
                    "type": "string"
                },
                "slas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineSla:getNdbTimeMachinesTimeMachineSla"
                    }
                },
                "sourceNxClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineTag:getNdbTimeMachinesTimeMachineTag"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "clone",
                "clones",
                "clustered",
                "database",
                "databaseId",
                "dateCreated",
                "dateModified",
                "description",
                "eaStatus",
                "id",
                "metric",
                "name",
                "properties",
                "schedules",
                "scheduleId",
                "scope",
                "slas",
                "slaId",
                "slaUpdateInProgress",
                "slaUpdateMetadata",
                "sourceNxClusters",
                "status",
                "tags",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineProperty:getNdbTimeMachinesTimeMachineProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineSchedule:getNdbTimeMachinesTimeMachineSchedule": {
            "properties": {
                "continuousSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineScheduleContinuousSchedule:getNdbTimeMachinesTimeMachineScheduleContinuousSchedule"
                    }
                },
                "dailySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineScheduleDailySchedule:getNdbTimeMachinesTimeMachineScheduleDailySchedule"
                    }
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "globalPolicy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "monthlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineScheduleMonthlySchedule:getNdbTimeMachinesTimeMachineScheduleMonthlySchedule"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "quartelySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineScheduleQuartelySchedule:getNdbTimeMachinesTimeMachineScheduleQuartelySchedule"
                    }
                },
                "referenceCount": {
                    "type": "integer"
                },
                "snapshotTimeOfDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDay:getNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDay"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "systemPolicy": {
                    "type": "boolean"
                },
                "timeZone": {
                    "type": "string"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineScheduleWeeklySchedule:getNdbTimeMachinesTimeMachineScheduleWeeklySchedule"
                    }
                },
                "yearlySchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachineScheduleYearlySchedule:getNdbTimeMachinesTimeMachineScheduleYearlySchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "continuousSchedules",
                "dailySchedules",
                "dateCreated",
                "dateModified",
                "description",
                "globalPolicy",
                "id",
                "monthlySchedules",
                "name",
                "ownerId",
                "quartelySchedules",
                "referenceCount",
                "snapshotTimeOfDays",
                "startTime",
                "systemPolicy",
                "timeZone",
                "uniqueName",
                "weeklySchedules",
                "yearlySchedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineScheduleContinuousSchedule:getNdbTimeMachinesTimeMachineScheduleContinuousSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logBackupInterval": {
                    "type": "integer"
                },
                "snapshotsPerDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logBackupInterval",
                "snapshotsPerDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineScheduleDailySchedule:getNdbTimeMachinesTimeMachineScheduleDailySchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineScheduleMonthlySchedule:getNdbTimeMachinesTimeMachineScheduleMonthlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineScheduleQuartelySchedule:getNdbTimeMachinesTimeMachineScheduleQuartelySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "startMonth": {
                    "type": "string"
                },
                "startMonthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "startMonth",
                "startMonthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDay:getNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDay": {
            "properties": {
                "extra": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "integer"
                },
                "minutes": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "extra",
                "hours",
                "minutes",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineScheduleWeeklySchedule:getNdbTimeMachinesTimeMachineScheduleWeeklySchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "dayOfWeekValue": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "dayOfWeekValue",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineScheduleYearlySchedule:getNdbTimeMachinesTimeMachineScheduleYearlySchedule": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "month": {
                    "type": "string"
                },
                "monthValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "enabled",
                "month",
                "monthValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineSla:getNdbTimeMachinesTimeMachineSla": {
            "properties": {
                "continuousRetention": {
                    "type": "integer"
                },
                "currentActiveFrequency": {
                    "type": "string"
                },
                "dailyRetention": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "monthlyRetention": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "pitrEnabled": {
                    "type": "boolean"
                },
                "quarterlyRetention": {
                    "type": "integer"
                },
                "referenceCount": {
                    "type": "integer"
                },
                "systemSla": {
                    "type": "boolean"
                },
                "uniqueName": {
                    "type": "string"
                },
                "weeklyRetention": {
                    "type": "integer"
                },
                "yearlyRetention": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "continuousRetention",
                "currentActiveFrequency",
                "dailyRetention",
                "dateCreated",
                "dateModified",
                "description",
                "id",
                "monthlyRetention",
                "name",
                "ownerId",
                "pitrEnabled",
                "quarterlyRetention",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "weeklyRetention",
                "yearlyRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTimeMachinesTimeMachineTag:getNdbTimeMachinesTimeMachineTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapability:getNdbTmsCapabilityCapability": {
            "properties": {
                "continuousRegions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegion:getNdbTmsCapabilityCapabilityContinuousRegion"
                    }
                },
                "databaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "databasesContinuousRegion": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "snapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshot:getNdbTmsCapabilityCapabilitySnapshot"
                    }
                },
                "timeUnit": {
                    "type": "string"
                },
                "timeUnitNumber": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "continuousRegions",
                "databaseIds",
                "databasesContinuousRegion",
                "from",
                "mode",
                "snapshots",
                "timeUnit",
                "timeUnitNumber",
                "to"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegion:getNdbTmsCapabilityCapabilityContinuousRegion": {
            "properties": {
                "dbLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLog:getNdbTmsCapabilityCapabilityContinuousRegionDbLog"
                    }
                },
                "fromTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "partialRanges": {
                    "type": "boolean"
                },
                "processedRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionProcessedRange:getNdbTmsCapabilityCapabilityContinuousRegionProcessedRange"
                    }
                },
                "snapshotIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "snapshots": {
                    "type": "string"
                },
                "subRange": {
                    "type": "boolean"
                },
                "timeRangeAndDatabases": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "toTime": {
                    "type": "string"
                },
                "unknownTimeRanges": {
                    "type": "string"
                },
                "unprocessedRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRange:getNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRange"
                    }
                }
            },
            "type": "object",
            "required": [
                "dbLogs",
                "fromTime",
                "message",
                "partialRanges",
                "processedRanges",
                "snapshotIds",
                "snapshots",
                "subRange",
                "timeRangeAndDatabases",
                "timezone",
                "toTime",
                "unknownTimeRanges",
                "unprocessedRanges"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLog:getNdbTmsCapabilityCapabilityContinuousRegionDbLog": {
            "properties": {
                "databaseId": {
                    "type": "string"
                },
                "databaseNodeId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "eraLogDriveId": {
                    "type": "string"
                },
                "fromTime": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLogInfo:getNdbTmsCapabilityCapabilityContinuousRegionDbLogInfo"
                    }
                },
                "logCopyOperationId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadata:getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadata"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "toTime": {
                    "type": "string"
                },
                "unprocessed": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "databaseId",
                "databaseNodeId",
                "dateCreated",
                "dateModified",
                "eraLogDriveId",
                "fromTime",
                "id",
                "infos",
                "logCopyOperationId",
                "message",
                "metadatas",
                "name",
                "ownerId",
                "size",
                "status",
                "toTime",
                "unprocessed"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLogInfo:getNdbTmsCapabilityCapabilityContinuousRegionDbLogInfo": {
            "properties": {
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "unknownTimeRange": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "info",
                "secureInfo",
                "unknownTimeRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadata:getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadata": {
            "properties": {
                "createdDirectly": {
                    "type": "boolean"
                },
                "curationRetryCount": {
                    "type": "integer"
                },
                "deregisterInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfo:getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfo"
                    }
                },
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedDirectly": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "createdDirectly",
                "curationRetryCount",
                "deregisterInfos",
                "info",
                "secureInfo",
                "updatedDirectly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfo:getNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfo": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "message",
                "operations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionProcessedRange:getNdbTmsCapabilityCapabilityContinuousRegionProcessedRange": {
            "properties": {
                "first": {
                    "type": "string"
                },
                "second": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "first",
                "second"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRange:getNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRange": {
            "properties": {
                "first": {
                    "type": "string"
                },
                "second": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "first",
                "second"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshot:getNdbTmsCapabilityCapabilitySnapshot": {
            "properties": {
                "appInfoVersion": {
                    "type": "string"
                },
                "applicableTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "databaseNodeId": {
                    "type": "string"
                },
                "databaseSnapshot": {
                    "type": "boolean"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserverId": {
                    "type": "string"
                },
                "dbserverIp": {
                    "type": "string"
                },
                "dbserverName": {
                    "type": "string"
                },
                "dbserverStorageMetadataVersion": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "fromTimestamp": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfig:getNdbTmsCapabilityCapabilitySnapshotLcmConfig"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadata:getNdbTmsCapabilityCapabilitySnapshotMetadata"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "parentSnapshot": {
                    "type": "boolean"
                },
                "parentSnapshotId": {
                    "type": "string"
                },
                "processed": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotProperty:getNdbTmsCapabilityCapabilitySnapshotProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "replicatedSnapshots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "santized": {
                    "type": "boolean"
                },
                "santizedFromSnapshotId": {
                    "type": "string"
                },
                "santizedSnapshots": {
                    "type": "string"
                },
                "snapshotFamily": {
                    "type": "string"
                },
                "snapshotSize": {
                    "type": "number"
                },
                "snapshotTimestamp": {
                    "type": "string"
                },
                "snapshotTimestampDate": {
                    "type": "integer"
                },
                "snapshotUuid": {
                    "type": "string"
                },
                "softwareDatabaseSnapshot": {
                    "type": "boolean"
                },
                "softwareSnapshot": {
                    "type": "string"
                },
                "softwareSnapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotTag:getNdbTmsCapabilityCapabilitySnapshotTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "toTimestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appInfoVersion",
                "applicableTypes",
                "databaseNodeId",
                "databaseSnapshot",
                "dateCreated",
                "dateModified",
                "dbserverId",
                "dbserverIp",
                "dbserverName",
                "dbserverStorageMetadataVersion",
                "description",
                "fromTimestamp",
                "id",
                "lcmConfigs",
                "metadatas",
                "name",
                "nxClusterId",
                "ownerId",
                "parentSnapshot",
                "parentSnapshotId",
                "processed",
                "properties",
                "protectionDomainId",
                "replicatedSnapshots",
                "santized",
                "santizedFromSnapshotId",
                "santizedSnapshots",
                "snapshotFamily",
                "snapshotSize",
                "snapshotTimestamp",
                "snapshotTimestampDate",
                "snapshotUuid",
                "softwareDatabaseSnapshot",
                "softwareSnapshot",
                "softwareSnapshotId",
                "status",
                "tags",
                "timeMachineId",
                "timezone",
                "toTimestamp",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfig:getNdbTmsCapabilityCapabilitySnapshotLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetail:getNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommand:getNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommand:getNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetail:getNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetail:getNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommand:getNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommand:getNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetail:getNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadata:getNdbTmsCapabilityCapabilitySnapshotMetadata": {
            "properties": {
                "async": {
                    "type": "boolean"
                },
                "curationRetryCount": {
                    "type": "integer"
                },
                "deregisterInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fromTimestamp": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfo:getNdbTmsCapabilityCapabilitySnapshotMetadataInfo"
                    }
                },
                "lastReplicationRetyrSourceSnapshotId": {
                    "type": "string"
                },
                "operationsUsingSnapshots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "replicationRetryCount": {
                    "type": "integer"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "standBy": {
                    "type": "boolean"
                },
                "toTimestamp": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "async",
                "curationRetryCount",
                "deregisterInfo",
                "fromTimestamp",
                "infos",
                "lastReplicationRetyrSourceSnapshotId",
                "operationsUsingSnapshots",
                "replicationRetryCount",
                "secureInfo",
                "standBy",
                "toTimestamp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfo:getNdbTmsCapabilityCapabilitySnapshotMetadataInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfig:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfig:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParam:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorage:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmProperty:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParam:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorage:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorage:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDisk:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDisk:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorage:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDisk:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDisk:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmProperty:getNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotProperty:getNdbTmsCapabilityCapabilitySnapshotProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityCapabilitySnapshotTag:getNdbTmsCapabilityCapabilitySnapshotTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshot:getNdbTmsCapabilityLastContinuousSnapshot": {
            "properties": {
                "appInfoVersion": {
                    "type": "string"
                },
                "applicableTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "databaseNodeId": {
                    "type": "string"
                },
                "databaseSnapshot": {
                    "type": "boolean"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserverId": {
                    "type": "string"
                },
                "dbserverIp": {
                    "type": "string"
                },
                "dbserverName": {
                    "type": "string"
                },
                "dbserverStorageMetadataVersion": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "fromTimestamp": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfig:getNdbTmsCapabilityLastContinuousSnapshotLcmConfig"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadata:getNdbTmsCapabilityLastContinuousSnapshotMetadata"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "parentSnapshot": {
                    "type": "boolean"
                },
                "parentSnapshotId": {
                    "type": "string"
                },
                "processed": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotProperty:getNdbTmsCapabilityLastContinuousSnapshotProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "protectionDomainId": {
                    "type": "string"
                },
                "replicatedSnapshots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "santized": {
                    "type": "boolean"
                },
                "santizedFromSnapshotId": {
                    "type": "string"
                },
                "santizedSnapshots": {
                    "type": "string"
                },
                "snapshotFamily": {
                    "type": "string"
                },
                "snapshotSize": {
                    "type": "number"
                },
                "snapshotTimestamp": {
                    "type": "string"
                },
                "snapshotTimestampDate": {
                    "type": "integer"
                },
                "snapshotUuid": {
                    "type": "string"
                },
                "softwareDatabaseSnapshot": {
                    "type": "boolean"
                },
                "softwareSnapshot": {
                    "type": "string"
                },
                "softwareSnapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotTag:getNdbTmsCapabilityLastContinuousSnapshotTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "toTimestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appInfoVersion",
                "applicableTypes",
                "databaseNodeId",
                "databaseSnapshot",
                "dateCreated",
                "dateModified",
                "dbserverId",
                "dbserverIp",
                "dbserverName",
                "dbserverStorageMetadataVersion",
                "description",
                "fromTimestamp",
                "id",
                "lcmConfigs",
                "metadatas",
                "name",
                "nxClusterId",
                "ownerId",
                "parentSnapshot",
                "parentSnapshotId",
                "processed",
                "properties",
                "protectionDomainId",
                "replicatedSnapshots",
                "santized",
                "santizedFromSnapshotId",
                "santizedSnapshots",
                "snapshotFamily",
                "snapshotSize",
                "snapshotTimestamp",
                "snapshotTimestampDate",
                "snapshotUuid",
                "softwareDatabaseSnapshot",
                "softwareSnapshot",
                "softwareSnapshotId",
                "status",
                "tags",
                "timeMachineId",
                "timezone",
                "toTimestamp",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfig:getNdbTmsCapabilityLastContinuousSnapshotLcmConfig": {
            "properties": {
                "expiryDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetail:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetail"
                    }
                },
                "postDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommand:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommand"
                    }
                },
                "preDeleteCommands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommand:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommand"
                    }
                },
                "refreshDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetail:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiryDetails",
                "postDeleteCommands",
                "preDeleteCommands",
                "refreshDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetail:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetail": {
            "properties": {
                "deleteDatabase": {
                    "type": "boolean"
                },
                "deleteTimeMachine": {
                    "type": "boolean"
                },
                "deleteVm": {
                    "type": "boolean"
                },
                "effectiveTimestamp": {
                    "type": "string"
                },
                "expireInDays": {
                    "type": "integer"
                },
                "expiryDateTimezone": {
                    "type": "string"
                },
                "expiryTimestamp": {
                    "type": "string"
                },
                "remindBeforeInDays": {
                    "type": "integer"
                },
                "userCreated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "deleteDatabase",
                "deleteTimeMachine",
                "deleteVm",
                "effectiveTimestamp",
                "expireInDays",
                "expiryDateTimezone",
                "expiryTimestamp",
                "remindBeforeInDays",
                "userCreated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommand:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommand:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommand": {
            "properties": {
                "command": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetail:getNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetail": {
            "properties": {
                "lastRefreshDate": {
                    "type": "string"
                },
                "nextRefreshDate": {
                    "type": "string"
                },
                "refreshDateTimezone": {
                    "type": "string"
                },
                "refreshInDays": {
                    "type": "integer"
                },
                "refreshInHours": {
                    "type": "integer"
                },
                "refreshInMonths": {
                    "type": "integer"
                },
                "refreshTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lastRefreshDate",
                "nextRefreshDate",
                "refreshDateTimezone",
                "refreshInDays",
                "refreshInHours",
                "refreshInMonths",
                "refreshTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadata:getNdbTmsCapabilityLastContinuousSnapshotMetadata": {
            "properties": {
                "async": {
                    "type": "boolean"
                },
                "curationRetryCount": {
                    "type": "integer"
                },
                "deregisterInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fromTimestamp": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfo:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfo"
                    }
                },
                "lastReplicationRetrySourceSnapshotId": {
                    "type": "string"
                },
                "lastReplicationRetryTimestamp": {
                    "type": "string"
                },
                "operationsUsingSnapshots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "replicationRetryCount": {
                    "type": "integer"
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "standBy": {
                    "type": "boolean"
                },
                "toTimestamp": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "async",
                "curationRetryCount",
                "deregisterInfo",
                "fromTimestamp",
                "infos",
                "lastReplicationRetrySourceSnapshotId",
                "lastReplicationRetryTimestamp",
                "operationsUsingSnapshots",
                "replicationRetryCount",
                "secureInfo",
                "standBy",
                "toTimestamp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfo:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfo": {
            "properties": {
                "bpgConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfig:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfig"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgConfigs",
                "secureInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfig:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfig": {
            "properties": {
                "bpgDbParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParam:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParam"
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorage:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorage"
                    }
                },
                "vmProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmProperty:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmProperty"
                    }
                }
            },
            "type": "object",
            "required": [
                "bpgDbParams",
                "storages",
                "vmProperties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParam:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParam": {
            "properties": {
                "effectiveCacheSize": {
                    "type": "string"
                },
                "maintenanceWorkMem": {
                    "type": "string"
                },
                "maxParallelWorkersPerGather": {
                    "type": "string"
                },
                "maxWorkerProcesses": {
                    "type": "string"
                },
                "sharedBuffers": {
                    "type": "string"
                },
                "workMem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effectiveCacheSize",
                "maintenanceWorkMem",
                "maxParallelWorkersPerGather",
                "maxWorkerProcesses",
                "sharedBuffers",
                "workMem"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorage:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorage": {
            "properties": {
                "archiveStorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorage:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorage"
                    }
                },
                "dataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDisk:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDisk"
                    }
                },
                "logDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDisk:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDisk"
                    }
                }
            },
            "type": "object",
            "required": [
                "archiveStorages",
                "dataDisks",
                "logDisks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorage:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorage": {
            "properties": {
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDisk:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDisk": {
            "properties": {
                "count": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDisk:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDisk": {
            "properties": {
                "count": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "count",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmProperty:getNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmProperty": {
            "properties": {
                "dirtyBackgroundRatio": {
                    "type": "number"
                },
                "dirtyExpireCentisecs": {
                    "type": "number"
                },
                "dirtyRatio": {
                    "type": "number"
                },
                "dirtyWritebackCentisecs": {
                    "type": "number"
                },
                "nrHugepages": {
                    "type": "number"
                },
                "overcommitMemory": {
                    "type": "number"
                },
                "swappiness": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "dirtyBackgroundRatio",
                "dirtyExpireCentisecs",
                "dirtyRatio",
                "dirtyWritebackCentisecs",
                "nrHugepages",
                "overcommitMemory",
                "swappiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotProperty:getNdbTmsCapabilityLastContinuousSnapshotProperty": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "refId",
                "secure",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastContinuousSnapshotTag:getNdbTmsCapabilityLastContinuousSnapshotTag": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "tagName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "tagId",
                "tagName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastDbLog:getNdbTmsCapabilityLastDbLog": {
            "properties": {
                "databaseId": {
                    "type": "string"
                },
                "databaseNodeId": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "eraLogDriveId": {
                    "type": "string"
                },
                "fromTime": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "logCopyOperationId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastDbLogMetadata:getNdbTmsCapabilityLastDbLogMetadata"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "toTime": {
                    "type": "string"
                },
                "unprocessed": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "databaseId",
                "databaseNodeId",
                "dateCreated",
                "dateModified",
                "eraLogDriveId",
                "fromTime",
                "id",
                "logCopyOperationId",
                "message",
                "metadatas",
                "name",
                "ownerId",
                "size",
                "status",
                "toTime",
                "unprocessed"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastDbLogMetadata:getNdbTmsCapabilityLastDbLogMetadata": {
            "properties": {
                "createdDirectly": {
                    "type": "boolean"
                },
                "curationRetryCount": {
                    "type": "integer"
                },
                "deregisterInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastDbLogMetadataDeregisterInfo:getNdbTmsCapabilityLastDbLogMetadataDeregisterInfo"
                    }
                },
                "info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secureInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedDirectly": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "createdDirectly",
                "curationRetryCount",
                "deregisterInfos",
                "info",
                "secureInfo",
                "updatedDirectly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNdbTmsCapabilityLastDbLogMetadataDeregisterInfo:getNdbTmsCapabilityLastDbLogMetadataDeregisterInfo": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "message",
                "operations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowList:getNetworkSecurityRuleAdRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListFilterParam:getNetworkSecurityRuleAdRuleInboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListFilterParam:getNetworkSecurityRuleAdRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowList:getNetworkSecurityRuleAdRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleTargetGroupFilterParam:getNetworkSecurityRuleAdRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowList:getNetworkSecurityRuleAppRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListFilterParam:getNetworkSecurityRuleAppRuleInboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListFilterParam:getNetworkSecurityRuleAppRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowList:getNetworkSecurityRuleAppRuleOutboundAllowList": {
            "properties": {
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleTargetGroupFilterParam:getNetworkSecurityRuleAppRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleCategory:getNetworkSecurityRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam:getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam:getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowList:getNetworkSecurityRuleQuarantineRuleInboundAllowList": {
            "properties": {
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowList:getNetworkSecurityRuleQuarantineRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList"
                    }
                },
                "expirationTime": {
                    "type": "string"
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam"
                    }
                },
                "filterType": {
                    "type": "string"
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList"
                    }
                },
                "ipSubnet": {
                    "type": "string"
                },
                "ipSubnetPrefixLength": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "peerSpecificationType": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList"
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam:getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpec:getPbrSpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResource:getPbrSpecResource"
                    },
                    "description": "PBR resources status\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResource:getPbrSpecResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceAction:getPbrSpecResourceAction"
                    },
                    "description": "Routing policy action\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceDestination:getPbrSpecResourceDestination"
                    },
                    "description": "destination address of an IP.\n"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n"
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameter:getPbrSpecResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceSource:getPbrSpecResourceSource"
                    },
                    "description": "source address of an IP.\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceAction:getPbrSpecResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceDestination:getPbrSpecResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameter:getPbrSpecResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterIcmp:getPbrSpecResourceProtocolParameterIcmp"
                    },
                    "description": "ICMP parameters in routing policy.\n"
                },
                "protocolNumber": {
                    "type": "integer",
                    "description": "Protocol number in routing policy\n"
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterTcp:getPbrSpecResourceProtocolParameterTcp"
                    },
                    "description": "TCP parameters in routing policy\n"
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterUdp:getPbrSpecResourceProtocolParameterUdp"
                    },
                    "description": "UDP parameters in routing policy\n"
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterIcmp:getPbrSpecResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer"
                },
                "icmpType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterTcp:getPbrSpecResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterTcpSourcePortRangeList:getPbrSpecResourceProtocolParameterTcpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterTcpSourcePortRangeList:getPbrSpecResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterUdp:getPbrSpecResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterUdpSourcePortRangeList:getPbrSpecResourceProtocolParameterUdpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterUdpSourcePortRangeList:getPbrSpecResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceSource:getPbrSpecResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatus:getPbrStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusExecutionContext:getPbrStatusExecutionContext"
                    },
                    "description": "Execution Context of PBR.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResource:getPbrStatusResource"
                    },
                    "description": "PBR resources status\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the PBR\n"
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusExecutionContext:getPbrStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResource:getPbrStatusResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceAction:getPbrStatusResourceAction"
                    },
                    "description": "Routing policy action\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceDestination:getPbrStatusResourceDestination"
                    },
                    "description": "destination address of an IP.\n"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n"
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameter:getPbrStatusResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n"
                },
                "routingPolicyCounters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceRoutingPolicyCounter:getPbrStatusResourceRoutingPolicyCounter"
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceSource:getPbrStatusResourceSource"
                    },
                    "description": "source address of an IP.\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "routingPolicyCounters",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceAction:getPbrStatusResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceDestination:getPbrStatusResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameter:getPbrStatusResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterIcmp:getPbrStatusResourceProtocolParameterIcmp"
                    },
                    "description": "ICMP parameters in routing policy.\n"
                },
                "protocolNumber": {
                    "type": "integer",
                    "description": "Protocol number in routing policy\n"
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterTcp:getPbrStatusResourceProtocolParameterTcp"
                    },
                    "description": "TCP parameters in routing policy\n"
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterUdp:getPbrStatusResourceProtocolParameterUdp"
                    },
                    "description": "UDP parameters in routing policy\n"
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterIcmp:getPbrStatusResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer"
                },
                "icmpType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterTcp:getPbrStatusResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrStatusResourceProtocolParameterTcpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrStatusResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterUdp:getPbrStatusResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrStatusResourceProtocolParameterUdpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrStatusResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceRoutingPolicyCounter:getPbrStatusResourceRoutingPolicyCounter": {
            "properties": {
                "byteCount": {
                    "type": "integer"
                },
                "packetCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "byteCount",
                "packetCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceSource:getPbrStatusResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntity:getPbrsEntity": {
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The routing policies kind metadata.\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpec:getPbrsEntitySpec"
                    },
                    "description": "PBR spec\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatus:getPbrsEntityStatus"
                    },
                    "description": "PBR output status\n"
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "specs",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpec:getPbrsEntitySpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResource:getPbrsEntitySpecResource"
                    },
                    "description": "PBR resources status\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResource:getPbrsEntitySpecResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceAction:getPbrsEntitySpecResourceAction"
                    },
                    "description": "Routing policy action\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceDestination:getPbrsEntitySpecResourceDestination"
                    },
                    "description": "destination address of an IP.\n"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n"
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameter:getPbrsEntitySpecResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceSource:getPbrsEntitySpecResourceSource"
                    },
                    "description": "source address of an IP.\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceAction:getPbrsEntitySpecResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceDestination:getPbrsEntitySpecResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameter:getPbrsEntitySpecResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterIcmp:getPbrsEntitySpecResourceProtocolParameterIcmp"
                    },
                    "description": "ICMP parameters in routing policy.\n"
                },
                "protocolNumber": {
                    "type": "integer",
                    "description": "Protocol number in routing policy\n"
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcp:getPbrsEntitySpecResourceProtocolParameterTcp"
                    },
                    "description": "TCP parameters in routing policy\n"
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdp:getPbrsEntitySpecResourceProtocolParameterUdp"
                    },
                    "description": "UDP parameters in routing policy\n"
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterIcmp:getPbrsEntitySpecResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer"
                },
                "icmpType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcp:getPbrsEntitySpecResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdp:getPbrsEntitySpecResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceSource:getPbrsEntitySpecResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatus:getPbrsEntityStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusExecutionContext:getPbrsEntityStatusExecutionContext"
                    },
                    "description": "Execution Context of PBR.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResource:getPbrsEntityStatusResource"
                    },
                    "description": "PBR resources status\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the PBR\n"
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusExecutionContext:getPbrsEntityStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResource:getPbrsEntityStatusResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceAction:getPbrsEntityStatusResourceAction"
                    },
                    "description": "Routing policy action\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceDestination:getPbrsEntityStatusResourceDestination"
                    },
                    "description": "destination address of an IP.\n"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n"
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameter:getPbrsEntityStatusResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n"
                },
                "routingPolicyCounters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceRoutingPolicyCounter:getPbrsEntityStatusResourceRoutingPolicyCounter"
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceSource:getPbrsEntityStatusResourceSource"
                    },
                    "description": "source address of an IP.\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "routingPolicyCounters",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceAction:getPbrsEntityStatusResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceDestination:getPbrsEntityStatusResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameter:getPbrsEntityStatusResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterIcmp:getPbrsEntityStatusResourceProtocolParameterIcmp"
                    },
                    "description": "ICMP parameters in routing policy.\n"
                },
                "protocolNumber": {
                    "type": "integer",
                    "description": "Protocol number in routing policy\n"
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcp:getPbrsEntityStatusResourceProtocolParameterTcp"
                    },
                    "description": "TCP parameters in routing policy\n"
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdp:getPbrsEntityStatusResourceProtocolParameterUdp"
                    },
                    "description": "UDP parameters in routing policy\n"
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterIcmp:getPbrsEntityStatusResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer"
                },
                "icmpType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcp:getPbrsEntityStatusResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdp:getPbrsEntityStatusResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList"
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceRoutingPolicyCounter:getPbrsEntityStatusResourceRoutingPolicyCounter": {
            "properties": {
                "byteCount": {
                    "type": "integer"
                },
                "packetCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "byteCount",
                "packetCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceSource:getPbrsEntityStatusResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of provided subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "IP subnet provided as an address.\n"
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsMetadata:getPbrsMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                },
                "totalMatches": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionCategory:getPermissionCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionField:getPermissionField": {
            "properties": {
                "fieldMode": {
                    "type": "string",
                    "description": "Allow or disallow the fields mentioned.\n"
                },
                "fieldNameLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of fields.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldMode",
                "fieldNameLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsEntity:getPermissionsEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "version of the API\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPermissionsEntityCategory:getPermissionsEntityCategory"
                    },
                    "description": "The categories for this resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the permission.\n"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPermissionsEntityField:getPermissionsEntityField"
                    },
                    "description": ". The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The permission kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation that is being performed on a given kind.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a project.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the permission.\n"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "categories",
                "description",
                "fields",
                "kind",
                "metadata",
                "name",
                "operation",
                "ownerReference",
                "projectReference",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsEntityCategory:getPermissionsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsEntityField:getPermissionsEntityField": {
            "properties": {
                "fieldMode": {
                    "type": "string",
                    "description": "Allow or disallow the fields mentioned.\n"
                },
                "fieldNameLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of fields.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldMode",
                "fieldNameLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsMetadata:getPermissionsMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAccountReferenceList:getProjectAccountReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcp:getProjectAcp": {
            "properties": {
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpContextFilterList:getProjectAcpContextFilterList"
                    },
                    "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of ACP\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "roleReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpRoleReference:getProjectAcpRoleReference"
                    },
                    "description": "Reference to role.\n"
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpUserGroupReferenceList:getProjectAcpUserGroupReferenceList"
                    },
                    "description": "List of Reference of users groups.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpUserReferenceList:getProjectAcpUserReferenceList"
                    },
                    "description": "List of Reference of users.\n"
                }
            },
            "type": "object",
            "required": [
                "contextFilterLists",
                "description",
                "metadata",
                "name",
                "roleReferences",
                "userGroupReferenceLists",
                "userReferenceLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpContextFilterList:getProjectAcpContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpContextFilterListEntityFilterExpressionList:getProjectAcpContextFilterListEntityFilterExpressionList"
                    },
                    "description": "(Required) A list of Entity filter expressions.\n"
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpContextFilterListScopeFilterExpressionList:getProjectAcpContextFilterListScopeFilterExpressionList"
                    },
                    "description": "- (Optional) Filter the scope of an Access Control Policy.\n"
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpContextFilterListEntityFilterExpressionList:getProjectAcpContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "description": "- (Optional)  The LHS of the filter expression - the entity type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- (Required) The operator in the filter expression.\n"
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpContextFilterListEntityFilterExpressionListRightHandSide:getProjectAcpContextFilterListEntityFilterExpressionListRightHandSide"
                    },
                    "description": "- (Required) The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSideEntityType",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpContextFilterListEntityFilterExpressionListRightHandSide:getProjectAcpContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory:getProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory"
                    },
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "- (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory:getProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpContextFilterListScopeFilterExpressionList:getProjectAcpContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "description": "- (Optional)  The LHS of the filter expression - the scope type.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "- (Required) The operator in the filter expression.\n"
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpContextFilterListScopeFilterExpressionListRightHandSide:getProjectAcpContextFilterListScopeFilterExpressionListRightHandSide"
                    },
                    "description": "- (Required) The right hand side (RHS) of an scope expression.\n"
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpContextFilterListScopeFilterExpressionListRightHandSide:getProjectAcpContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory:getProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory"
                    },
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "collection": {
                    "type": "string",
                    "description": "- (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) The explicit list of UUIDs for the given kind.\n"
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory:getProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpRoleReference:getProjectAcpRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpUserGroupReferenceList:getProjectAcpUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAcpUserReferenceList:getProjectAcpUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectCategory:getProjectCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectClusterReferenceList:getProjectClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectDefaultEnvironmentReference:getProjectDefaultEnvironmentReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Optional) The kind name. Default value is `environment`\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional/Computed) The name of a environment.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) The UUID of a environment\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectEnvironmentReferenceList:getProjectEnvironmentReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectExternalNetworkList:getProjectExternalNetworkList": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectExternalUserGroupReferenceList:getProjectExternalUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectResourceDomain:getProjectResourceDomain": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectResourceDomainResource:getProjectResourceDomainResource"
                    },
                    "description": "Array of the utilization/limit for resource types\n* `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)\n* `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)\n* `resource_domain.resources.#.units` - The units of the resource type\n* `resource_domain.resources.#.value` - The amount of resource consumed\n"
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectResourceDomainResource:getProjectResourceDomainResource": {
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "resourceType": {
                    "type": "string"
                },
                "units": {
                    "type": "string"
                },
                "value": {
                    "type": "integer",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "limit",
                "resourceType",
                "units",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectSubnetReferenceList:getProjectSubnetReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectTunnelReferenceList:getProjectTunnelReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectUserReferenceList:getProjectUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectVpcReferenceList:getProjectVpcReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntity:getProjectsEntity": {
            "properties": {
                "accountReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityAccountReferenceList:getProjectsEntityAccountReferenceList"
                    },
                    "description": "List of accounts associated with the project.\n* `account_reference_list.#.kind` - The kind name. Default value is `account`\n* `account_reference_list.#.uuid` - The UUID of an account.\n* `account_reference_list.#.name` - The name of an account.\n"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "version of the API\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityCategory:getProjectsEntityCategory"
                    }
                },
                "defaultSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for project.\n"
                },
                "environmentReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityEnvironmentReferenceList:getProjectsEntityEnvironmentReferenceList"
                    },
                    "description": "List of environments associated with the project.\n* `environment_reference_list.#.kind` - The kind name. Default value is `environment`\n* `environment_reference_list.#.uuid` - The UUID of an environment.\n* `environment_reference_list.#.name` - The name of an environment.\n"
                },
                "externalNetworkLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityExternalNetworkList:getProjectsEntityExternalNetworkList"
                    },
                    "description": "List of external networks associated with the project.\n* `external_network_list.#.uuid` - The UUID of a network.\n* `external_network_list.#.name` - The name of a network.\n"
                },
                "externalUserGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityExternalUserGroupReferenceList:getProjectsEntityExternalUserGroupReferenceList"
                    },
                    "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - The UUID of a user_group\n* `external_user_group_reference_list.#.name` - The name of a user_group\n"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resourceDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityResourceDomain:getProjectsEntityResourceDomain"
                    },
                    "description": "The status for a resource domain (limits and values)\n"
                },
                "state": {
                    "type": "string"
                },
                "subnetReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntitySubnetReferenceList:getProjectsEntitySubnetReferenceList"
                    },
                    "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - The UUID of a subnet\n* `subnet_reference_list.#.name` - The name of a subnet.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityUserReferenceList:getProjectsEntityUserReferenceList"
                    },
                    "description": "List of users in the project.\n* `user_reference_list.#.kind` - The kind name. Default value is `user`\n* `user_reference_list.#.uuid` - The UUID of a user\n* `user_reference_list.#.name` - The name of a user.\n"
                }
            },
            "type": "object",
            "required": [
                "accountReferenceLists",
                "apiVersion",
                "categories",
                "defaultSubnetReference",
                "description",
                "environmentReferenceLists",
                "externalNetworkLists",
                "externalUserGroupReferenceLists",
                "isDefault",
                "metadata",
                "name",
                "ownerReference",
                "projectReference",
                "resourceDomains",
                "state",
                "subnetReferenceLists",
                "userReferenceLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityAccountReferenceList:getProjectsEntityAccountReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityCategory:getProjectsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityEnvironmentReferenceList:getProjectsEntityEnvironmentReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityExternalNetworkList:getProjectsEntityExternalNetworkList": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityExternalUserGroupReferenceList:getProjectsEntityExternalUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityResourceDomain:getProjectsEntityResourceDomain": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityResourceDomainResource:getProjectsEntityResourceDomainResource"
                    },
                    "description": "Array of the utilization/limit for resource types\n* `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)\n* `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)\n* `resource_domain.resources.#.units` - The units of the resource type\n* `resource_domain.resources.#.value` - The amount of resource consumed\n"
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityResourceDomainResource:getProjectsEntityResourceDomainResource": {
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "resourceType": {
                    "type": "string"
                },
                "units": {
                    "type": "string"
                },
                "value": {
                    "type": "integer",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "limit",
                "resourceType",
                "units",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntitySubnetReferenceList:getProjectsEntitySubnetReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityUserReferenceList:getProjectsEntityUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityList:getProtectionRuleAvailabilityZoneConnectivityList": {
            "properties": {
                "destinationAvailabilityZoneIndex": {
                    "type": "integer",
                    "description": "(Optional/Computed) Index of the availability zone.\n"
                },
                "snapshotScheduleLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList"
                    },
                    "description": "(Optional/Computed) Snapshot schedules for the pair of the availability zones.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) \"A recovery point objective (RPO) is the maximum acceptable amount of data loss.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n"
                },
                "sourceAvailabilityZoneIndex": {
                    "type": "integer",
                    "description": "(Optional/Computed) Index of the availability zone.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationAvailabilityZoneIndex",
                "snapshotScheduleLists",
                "sourceAvailabilityZoneIndex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList": {
            "properties": {
                "autoSuspendTimeoutSecs": {
                    "type": "integer"
                },
                "localSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy"
                    }
                },
                "recoveryPointObjectiveSecs": {
                    "type": "integer"
                },
                "remoteSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy"
                    }
                },
                "snapshotType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoSuspendTimeoutSecs",
                "localSnapshotRetentionPolicies",
                "recoveryPointObjectiveSecs",
                "remoteSnapshotRetentionPolicies",
                "snapshotType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer"
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer"
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer"
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer"
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleCategory:getProtectionRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleCategoryFilter:getProtectionRuleCategoryFilter": {
            "properties": {
                "kindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional/Computed) List of kinds associated with this filter.\n"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleCategoryFilterParam:getProtectionRuleCategoryFilterParam"
                    },
                    "description": "(Optional/Computed) A list of category key and list of values.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Optional/Computed) The type of the filter being used.\n"
                }
            },
            "type": "object",
            "required": [
                "kindLists",
                "params",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleCategoryFilterParam:getProtectionRuleCategoryFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleOrderedAvailabilityZoneList:getProtectionRuleOrderedAvailabilityZoneList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleOwnerReference:getProtectionRuleOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleProjectReference:getProtectionRuleProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntity:getProtectionRulesEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "version of the API\n"
                },
                "availabilityZoneConnectivityLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityList:getProtectionRulesEntityAvailabilityZoneConnectivityList"
                    },
                    "description": "(Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityCategory:getProtectionRulesEntityCategory"
                    }
                },
                "categoryFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityCategoryFilter:getProtectionRulesEntityCategoryFilter"
                    },
                    "description": "(Optional/Computed)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for protection rule.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "orderedAvailabilityZoneLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityOrderedAvailabilityZoneList:getProtectionRulesEntityOrderedAvailabilityZoneList"
                    },
                    "description": "(Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.\n* `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.\n* `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.\n"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityOwnerReference:getProtectionRulesEntityOwnerReference"
                    }
                },
                "projectReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityProjectReference:getProtectionRulesEntityProjectReference"
                    }
                },
                "startTime": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "availabilityZoneConnectivityLists",
                "categories",
                "categoryFilters",
                "description",
                "metadata",
                "name",
                "orderedAvailabilityZoneLists",
                "ownerReferences",
                "projectReferences",
                "startTime",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityList:getProtectionRulesEntityAvailabilityZoneConnectivityList": {
            "properties": {
                "destinationAvailabilityZoneIndex": {
                    "type": "integer",
                    "description": "(Optional/Computed) Index of the availability zone.\n"
                },
                "snapshotScheduleLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList"
                    },
                    "description": "(Optional/Computed) Snapshot schedules for the pair of the availability zones.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) \"A recovery point objective (RPO) is the maximum acceptable amount of data loss.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n"
                },
                "sourceAvailabilityZoneIndex": {
                    "type": "integer",
                    "description": "(Optional/Computed) Index of the availability zone.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationAvailabilityZoneIndex",
                "snapshotScheduleLists",
                "sourceAvailabilityZoneIndex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList": {
            "properties": {
                "autoSuspendTimeoutSecs": {
                    "type": "integer"
                },
                "localSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy"
                    }
                },
                "recoveryPointObjectiveSecs": {
                    "type": "integer"
                },
                "remoteSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy"
                    }
                },
                "snapshotType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoSuspendTimeoutSecs",
                "localSnapshotRetentionPolicies",
                "recoveryPointObjectiveSecs",
                "remoteSnapshotRetentionPolicies",
                "snapshotType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer"
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer"
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer"
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer"
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityCategory:getProtectionRulesEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityCategoryFilter:getProtectionRulesEntityCategoryFilter": {
            "properties": {
                "kindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional/Computed) List of kinds associated with this filter.\n"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityCategoryFilterParam:getProtectionRulesEntityCategoryFilterParam"
                    },
                    "description": "(Optional/Computed) A list of category key and list of values.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Optional/Computed) The type of the filter being used.\n"
                }
            },
            "type": "object",
            "required": [
                "kindLists",
                "params",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityCategoryFilterParam:getProtectionRulesEntityCategoryFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityOrderedAvailabilityZoneList:getProtectionRulesEntityOrderedAvailabilityZoneList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityOwnerReference:getProtectionRulesEntityOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityProjectReference:getProtectionRulesEntityProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanCategory:getRecoveryPlanCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanOwnerReference:getRecoveryPlanOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameter:getRecoveryPlanParameter": {
            "properties": {
                "floatingIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentList"
                    },
                    "description": "(Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n* `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.\n"
                },
                "networkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingList:getRecoveryPlanParameterNetworkMappingList"
                    },
                    "description": "(Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.\n"
                }
            },
            "type": "object",
            "required": [
                "floatingIpAssignmentLists",
                "networkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "vmIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList"
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "vmIpAssignmentLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList": {
            "properties": {
                "recoveryFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig"
                    }
                },
                "testFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig"
                    }
                },
                "vmNicInformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation"
                    }
                },
                "vmReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference"
                    }
                }
            },
            "type": "object",
            "required": [
                "recoveryFloatingIpConfigs",
                "testFloatingIpConfigs",
                "vmNicInformations",
                "vmReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "shouldAllocateDynamically": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "shouldAllocateDynamically": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingList:getRecoveryPlanParameterNetworkMappingList": {
            "properties": {
                "areNetworksStretched": {
                    "type": "boolean"
                },
                "availabilityZoneNetworkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList"
                    }
                }
            },
            "type": "object",
            "required": [
                "areNetworksStretched",
                "availabilityZoneNetworkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList"
                    }
                },
                "recoveryIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList"
                    }
                },
                "recoveryNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork"
                    }
                },
                "testIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList"
                    }
                },
                "testNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork"
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterReferenceLists",
                "recoveryIpAssignmentLists",
                "recoveryNetworks",
                "testIpAssignmentLists",
                "testNetworks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList"
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference"
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList"
                    }
                },
                "useVpcReference": {
                    "type": "boolean"
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference"
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string"
                },
                "gatewayIp": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList"
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference"
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList"
                    }
                },
                "useVpcReference": {
                    "type": "boolean"
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference"
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string"
                },
                "gatewayIp": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanProjectReference:getRecoveryPlanProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageList:getRecoveryPlanStageList": {
            "properties": {
                "delayTimeSecs": {
                    "type": "integer",
                    "description": "(Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.\n"
                },
                "stageUuid": {
                    "type": "string",
                    "description": "(Optional/Computed) UUID of stage.\n"
                },
                "stageWorks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWork:getRecoveryPlanStageListStageWork"
                    },
                    "description": "(Required) A stage specifies the work to be performed when the Recovery Plan is executed.\n"
                }
            },
            "type": "object",
            "required": [
                "delayTimeSecs",
                "stageUuid",
                "stageWorks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWork:getRecoveryPlanStageListStageWork": {
            "properties": {
                "recoverEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntity:getRecoveryPlanStageListStageWorkRecoverEntity"
                    },
                    "description": "(Optional/Computed) Information about entities to be recovered.\n"
                }
            },
            "type": "object",
            "required": [
                "recoverEntities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntity:getRecoveryPlanStageListStageWorkRecoverEntity": {
            "properties": {
                "entityInfoLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList"
                    },
                    "description": "(Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.\n"
                }
            },
            "type": "object",
            "required": [
                "entityInfoLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList": {
            "properties": {
                "anyEntityReferenceKind": {
                    "type": "string"
                },
                "anyEntityReferenceName": {
                    "type": "string"
                },
                "anyEntityReferenceUuid": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory"
                    }
                },
                "scriptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList"
                    }
                }
            },
            "type": "object",
            "required": [
                "anyEntityReferenceKind",
                "anyEntityReferenceName",
                "anyEntityReferenceUuid",
                "categories",
                "scriptLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList": {
            "properties": {
                "enableScriptExec": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enableScriptExec",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntity:getRecoveryPlansEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "version of the API\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityCategory:getRecoveryPlansEntityCategory"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description for recovery plan.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityOwnerReference:getRecoveryPlansEntityOwnerReference"
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameter:getRecoveryPlansEntityParameter"
                    },
                    "description": "(Required) Parameters for the Recovery Plan.\n"
                },
                "projectReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityProjectReference:getRecoveryPlansEntityProjectReference"
                    }
                },
                "stageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageList:getRecoveryPlansEntityStageList"
                    },
                    "description": "(Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.\n"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReferences",
                "parameters",
                "projectReferences",
                "stageLists",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityCategory:getRecoveryPlansEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityOwnerReference:getRecoveryPlansEntityOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameter:getRecoveryPlansEntityParameter": {
            "properties": {
                "floatingIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentList"
                    },
                    "description": "(Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n* `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.\n"
                },
                "networkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingList"
                    },
                    "description": "(Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.\n"
                }
            },
            "type": "object",
            "required": [
                "floatingIpAssignmentLists",
                "networkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "vmIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList"
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "vmIpAssignmentLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList": {
            "properties": {
                "recoveryFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig"
                    }
                },
                "testFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig"
                    }
                },
                "vmNicInformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation"
                    }
                },
                "vmReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference"
                    }
                }
            },
            "type": "object",
            "required": [
                "recoveryFloatingIpConfigs",
                "testFloatingIpConfigs",
                "vmNicInformations",
                "vmReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "shouldAllocateDynamically": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "shouldAllocateDynamically": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingList": {
            "properties": {
                "areNetworksStretched": {
                    "type": "boolean"
                },
                "availabilityZoneNetworkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList"
                    }
                }
            },
            "type": "object",
            "required": [
                "areNetworksStretched",
                "availabilityZoneNetworkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string"
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList"
                    }
                },
                "recoveryIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList"
                    }
                },
                "recoveryNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork"
                    }
                },
                "testIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList"
                    }
                },
                "testNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork"
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterReferenceLists",
                "recoveryIpAssignmentLists",
                "recoveryNetworks",
                "testIpAssignmentLists",
                "testNetworks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList"
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference"
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList"
                    }
                },
                "useVpcReference": {
                    "type": "boolean"
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference"
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string"
                },
                "gatewayIp": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList"
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference"
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList"
                    }
                },
                "useVpcReference": {
                    "type": "boolean"
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference"
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string"
                },
                "gatewayIp": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityProjectReference:getRecoveryPlansEntityProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageList:getRecoveryPlansEntityStageList": {
            "properties": {
                "delayTimeSecs": {
                    "type": "integer",
                    "description": "(Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.\n"
                },
                "stageUuid": {
                    "type": "string",
                    "description": "(Optional/Computed) UUID of stage.\n"
                },
                "stageWorks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWork:getRecoveryPlansEntityStageListStageWork"
                    },
                    "description": "(Required) A stage specifies the work to be performed when the Recovery Plan is executed.\n"
                }
            },
            "type": "object",
            "required": [
                "delayTimeSecs",
                "stageUuid",
                "stageWorks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWork:getRecoveryPlansEntityStageListStageWork": {
            "properties": {
                "recoverEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntity:getRecoveryPlansEntityStageListStageWorkRecoverEntity"
                    },
                    "description": "(Optional/Computed) Information about entities to be recovered.\n"
                }
            },
            "type": "object",
            "required": [
                "recoverEntities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntity:getRecoveryPlansEntityStageListStageWorkRecoverEntity": {
            "properties": {
                "entityInfoLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList"
                    },
                    "description": "(Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.\n"
                }
            },
            "type": "object",
            "required": [
                "entityInfoLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList": {
            "properties": {
                "anyEntityReferenceKind": {
                    "type": "string"
                },
                "anyEntityReferenceName": {
                    "type": "string"
                },
                "anyEntityReferenceUuid": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory"
                    }
                },
                "scriptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList"
                    }
                }
            },
            "type": "object",
            "required": [
                "anyEntityReferenceKind",
                "anyEntityReferenceName",
                "anyEntityReferenceUuid",
                "categories",
                "scriptLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList": {
            "properties": {
                "enableScriptExec": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enableScriptExec",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRoleCategory:getRoleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolePermissionReferenceList:getRolePermissionReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesEntity:getRolesEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRolesEntityCategory:getRolesEntityCategory"
                    },
                    "description": "- Categories for the role.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- The description of the role.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The role kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a user.\n"
                },
                "permissionReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRolesEntityPermissionReferenceList:getRolesEntityPermissionReferenceList"
                    },
                    "description": "- (Required) List of permission references.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a project.\n"
                },
                "roleId": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the role.\n"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "permissionReferenceLists",
                "projectReference",
                "roleId",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesEntityCategory:getRolesEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesEntityPermissionReferenceList:getRolesEntityPermissionReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesMetadata:getRolesMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project)(Required).\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceList:getServiceGroupServiceList": {
            "properties": {
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupServiceListIcmpTypeCodeList:getServiceGroupServiceListIcmpTypeCodeList"
                    }
                },
                "protocol": {
                    "type": "string"
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupServiceListTcpPortRangeList:getServiceGroupServiceListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupServiceListUdpPortRangeList:getServiceGroupServiceListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpTypeCodeLists",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceListIcmpTypeCodeList:getServiceGroupServiceListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceListTcpPortRangeList:getServiceGroupServiceListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceListUdpPortRangeList:getServiceGroupServiceListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntity:getServiceGroupsEntity": {
            "properties": {
                "associatedPoliciesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityAssociatedPoliciesList:getServiceGroupsEntityAssociatedPoliciesList"
                    }
                },
                "serviceGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroup:getServiceGroupsEntityServiceGroup"
                    }
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "associatedPoliciesLists",
                "serviceGroups",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityAssociatedPoliciesList:getServiceGroupsEntityAssociatedPoliciesList": {
            "properties": {
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroup:getServiceGroupsEntityServiceGroup": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "isSystemDefined": {
                    "type": "boolean",
                    "description": "specifying whether it is a system defined service group\n"
                },
                "name": {
                    "type": "string"
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceList:getServiceGroupsEntityServiceGroupServiceList"
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "isSystemDefined",
                "name",
                "serviceLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceList:getServiceGroupsEntityServiceGroupServiceList": {
            "properties": {
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList:getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList"
                    }
                },
                "protocol": {
                    "type": "string"
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList:getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList"
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList:getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpTypeCodeLists",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList:getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList:getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList:getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "startPort": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsMetadata:getServiceGroupsMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpec:getStaticRoutesSpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResource:getStaticRoutesSpecResource"
                    },
                    "description": "VPC route table resources status\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResource:getStaticRoutesSpecResource": {
            "properties": {
                "defaultRouteNexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResourceDefaultRouteNexthop:getStaticRoutesSpecResourceDefaultRouteNexthop"
                    },
                    "description": "default routes (present in spec resource)\n"
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResourceStaticRoutesList:getStaticRoutesSpecResourceStaticRoutesList"
                    },
                    "description": "list of static routes\n"
                }
            },
            "type": "object",
            "required": [
                "defaultRouteNexthops",
                "staticRoutesLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResourceDefaultRouteNexthop:getStaticRoutesSpecResourceDefaultRouteNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n"
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResourceStaticRoutesList:getStaticRoutesSpecResourceStaticRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n"
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResourceStaticRoutesListNexthop:getStaticRoutesSpecResourceStaticRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "nexthops"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResourceStaticRoutesListNexthop:getStaticRoutesSpecResourceStaticRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n"
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatus:getStaticRoutesStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusExecutionContext:getStaticRoutesStatusExecutionContext"
                    },
                    "description": "Execution Context of VPC.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResource:getStaticRoutesStatusResource"
                    },
                    "description": "VPC route table resources status\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the vpc_route_table.\n"
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusExecutionContext:getStaticRoutesStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResource:getStaticRoutesStatusResource": {
            "properties": {
                "defaultRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDefaultRoute:getStaticRoutesStatusResourceDefaultRoute"
                    },
                    "description": "default route. (present in status resource only )\n"
                },
                "dynamicRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDynamicRoutesList:getStaticRoutesStatusResourceDynamicRoutesList"
                    },
                    "description": "list of dynamic routes (present in status resource only)\n"
                },
                "localRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceLocalRoutesList:getStaticRoutesStatusResourceLocalRoutesList"
                    },
                    "description": "list of local routes (present in status resource only )\n"
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceStaticRoutesList:getStaticRoutesStatusResourceStaticRoutesList"
                    },
                    "description": "list of static routes\n"
                }
            },
            "type": "object",
            "required": [
                "defaultRoutes",
                "dynamicRoutesLists",
                "localRoutesLists",
                "staticRoutesLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDefaultRoute:getStaticRoutesStatusResourceDefaultRoute": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n"
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDefaultRouteNexthop:getStaticRoutesStatusResourceDefaultRouteNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDefaultRouteNexthop:getStaticRoutesStatusResourceDefaultRouteNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "nexthopIpAddress": {
                    "type": "string"
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n"
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDynamicRoutesList:getStaticRoutesStatusResourceDynamicRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n"
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDynamicRoutesListNexthop:getStaticRoutesStatusResourceDynamicRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDynamicRoutesListNexthop:getStaticRoutesStatusResourceDynamicRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "nexthopIpAddress": {
                    "type": "string"
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n"
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceLocalRoutesList:getStaticRoutesStatusResourceLocalRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n"
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceLocalRoutesListNexthop:getStaticRoutesStatusResourceLocalRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceLocalRoutesListNexthop:getStaticRoutesStatusResourceLocalRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "nexthopIpAddress": {
                    "type": "string"
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n"
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceStaticRoutesList:getStaticRoutesStatusResourceStaticRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n"
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceStaticRoutesListNexthop:getStaticRoutesStatusResourceStaticRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceStaticRoutesListNexthop:getStaticRoutesStatusResourceStaticRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n"
                },
                "nexthopIpAddress": {
                    "type": "string"
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n"
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetAdditionalFilter:getSubnetAdditionalFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/getSubnetCategory:getSubnetCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetMessageList:getSubnetMessageList": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "details",
                "message",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsEntity:getSubnetsEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "version of the API\n"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a availability_zone.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getSubnetsEntityCategory:getSubnetsEntityCategory"
                    },
                    "description": "The API Version.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of a cluster.\n"
                },
                "clusterReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a cluster.\n"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "defaultGatewayIp": {
                    "type": "string",
                    "description": "Default gateway IP address.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for subnet.\n"
                },
                "dhcpDomainNameServerLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dhcpDomainSearchLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DHCP domain search list for a subnet.\n"
                },
                "dhcpOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Spec for defining DHCP options.\n"
                },
                "dhcpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Host address.\n"
                },
                "dhcpServerAddressPort": {
                    "type": "integer",
                    "description": "Port Number.\n"
                },
                "enableNat": {
                    "type": "boolean"
                },
                "ipConfigPoolListRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isExternal": {
                    "type": "boolean"
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getSubnetsEntityMessageList:getSubnetsEntityMessageList"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The subnet kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a network_function_chain.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a user.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "-. IP prefix length of the Subnet.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a project.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the subnet.\n"
                },
                "subnetId": {
                    "type": "string"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "Subnet IP address.\n"
                },
                "subnetName": {
                    "type": "string"
                },
                "subnetType": {
                    "type": "string",
                    "description": "The type of the subnet.\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "VLAN assigned to the subnet.\n"
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "vswitchName": {
                    "type": "string",
                    "description": "The name of the vswitch.\n"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "availabilityZoneReference",
                "categories",
                "clusterName",
                "clusterReference",
                "clusterUuid",
                "defaultGatewayIp",
                "description",
                "dhcpDomainNameServerLists",
                "dhcpDomainSearchLists",
                "dhcpOptions",
                "dhcpServerAddress",
                "dhcpServerAddressPort",
                "enableNat",
                "ipConfigPoolListRanges",
                "isExternal",
                "messageLists",
                "metadata",
                "name",
                "networkFunctionChainReference",
                "ownerReference",
                "prefixLength",
                "projectReference",
                "state",
                "subnetId",
                "subnetIp",
                "subnetName",
                "subnetType",
                "vlanId",
                "vpcReference",
                "vswitchName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsEntityCategory:getSubnetsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsEntityMessageList:getSubnetsEntityMessageList": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "details",
                "message",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsMetadata:getSubnetsMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind name (Default value: project.\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserAccessControlPolicyReferenceList:getUserAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) The name for the user\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (Optional) The UUID for the user.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserCategory:getUserCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- (Optional) The name for the user\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserDirectoryServiceUser:getUserDirectoryServiceUser": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string"
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserDirectoryServiceUserDirectoryServiceReference:getUserDirectoryServiceUserDirectoryServiceReference"
                    },
                    "description": "- (Optional) The reference to a directory service. See #reference for to look the supported attributes.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "- (Optional) The UserPrincipalName of the user from the directory service.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "userPrincipalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserDirectoryServiceUserDirectoryServiceReference:getUserDirectoryServiceUserDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) The name for the user\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (Optional) The UUID for the user.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupAccessControlPolicyReferenceList:getUserGroupAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupCategory:getUserGroupCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupDirectoryServiceUserGroup:getUserGroupDirectoryServiceUserGroup": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string"
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupDirectoryServiceUserGroupDirectoryServiceReference"
                    },
                    "description": "- The reference to a directory service. See #reference for to look the supported attributes.\n"
                },
                "distinguishedName": {
                    "type": "string",
                    "description": "- The Distinguished name for the user group\n"
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "distinguishedName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupDirectoryServiceUserGroupDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupProjectReferenceList:getUserGroupProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntity:getUserGroupsEntity": {
            "properties": {
                "accessControlPolicyReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityAccessControlPolicyReferenceList:getUserGroupsEntityAccessControlPolicyReferenceList"
                    },
                    "description": "- List of ACP references. See #reference for more details.\n"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityCategory:getUserGroupsEntityCategory"
                    },
                    "description": "- The Categories for the user group.\n"
                },
                "directoryServiceUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityDirectoryServiceUserGroup:getUserGroupsEntityDirectoryServiceUserGroup"
                    },
                    "description": "- A Directory Service User Group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "- The display name of the user group.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The user group kind metadata.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a project.\n"
                },
                "projectReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityProjectReferenceList:getUserGroupsEntityProjectReferenceList"
                    },
                    "description": "- A list of projects the user is part of. See #reference for more details.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the entity.\n"
                },
                "userGroupType": {
                    "type": "string",
                    "description": "- The type of the user group.\n"
                }
            },
            "type": "object",
            "required": [
                "accessControlPolicyReferenceLists",
                "apiVersion",
                "categories",
                "directoryServiceUserGroups",
                "displayName",
                "metadata",
                "ownerReference",
                "projectReferenceLists",
                "state",
                "userGroupType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityAccessControlPolicyReferenceList:getUserGroupsEntityAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityCategory:getUserGroupsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the key name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityDirectoryServiceUserGroup:getUserGroupsEntityDirectoryServiceUserGroup": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string"
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference"
                    },
                    "description": "- The reference to a directory service. See #reference for to look the supported attributes.\n"
                },
                "distinguishedName": {
                    "type": "string",
                    "description": "- The Distinguished name for the user group\n"
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "distinguishedName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n\nFor `access_control_policy_reference_list` and `project_reference_list` are the same as reference but used as list.\n\nSee detailed information in [Nutanix Users](https://www.nutanix.dev/api_references/prism-central-v3/#/6016c890e9122-get-a-list-of-existing-user-groups).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityProjectReferenceList:getUserGroupsEntityProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsMetadata:getUserGroupsMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserIdentityProviderUser:getUserIdentityProviderUser": {
            "properties": {
                "identityProviderReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserIdentityProviderUserIdentityProviderReference:getUserIdentityProviderUserIdentityProviderReference"
                    },
                    "description": "- (Optional) The reference to a identity provider. See #reference for to look the supported attributes.\n"
                },
                "username": {
                    "type": "string",
                    "description": "- (Optional) The username from identity provider. Name ID for SAML Identity Provider.\n"
                }
            },
            "type": "object",
            "required": [
                "identityProviderReferences",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserIdentityProviderUserIdentityProviderReference:getUserIdentityProviderUserIdentityProviderReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) The name for the user\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (Optional) The UUID for the user.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserProjectReferenceList:getUserProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) The name for the user\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- (Optional) The UUID for the user.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntity:getUsersEntity": {
            "properties": {
                "accessControlPolicyReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityAccessControlPolicyReferenceList:getUsersEntityAccessControlPolicyReferenceList"
                    },
                    "description": "- List of ACP references. See #reference for more details.\n"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityCategory:getUsersEntityCategory"
                    },
                    "description": "- (Optional) Categories for the user.\n"
                },
                "directoryServiceUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityDirectoryServiceUser:getUsersEntityDirectoryServiceUser"
                    },
                    "description": "- (Optional) The directory service user configuration. See below for more information.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "- The display name of the user (common name) provided by the directory service.\n"
                },
                "identityProviderUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityIdentityProviderUser:getUsersEntityIdentityProviderUser"
                    },
                    "description": "- (Optional) (Optional) The identity provider user configuration. See below for more information.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The user kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "projectReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityProjectReferenceList:getUsersEntityProjectReferenceList"
                    },
                    "description": "- A list of projects the user is part of. See #reference for more details.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the entity.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "- The name of the user.\n"
                }
            },
            "type": "object",
            "required": [
                "accessControlPolicyReferenceLists",
                "apiVersion",
                "categories",
                "directoryServiceUsers",
                "displayName",
                "identityProviderUsers",
                "metadata",
                "name",
                "ownerReference",
                "projectReferenceLists",
                "state",
                "userType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityAccessControlPolicyReferenceList:getUsersEntityAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityCategory:getUsersEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityDirectoryServiceUser:getUsersEntityDirectoryServiceUser": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string"
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityDirectoryServiceUserDirectoryServiceReference:getUsersEntityDirectoryServiceUserDirectoryServiceReference"
                    },
                    "description": "- (Optional) The reference to a directory service. See #reference for to look the supported attributes.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "- (Optional) The UserPrincipalName of the user from the directory service.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "userPrincipalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityDirectoryServiceUserDirectoryServiceReference:getUsersEntityDirectoryServiceUserDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityIdentityProviderUser:getUsersEntityIdentityProviderUser": {
            "properties": {
                "identityProviderReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityIdentityProviderUserIdentityProviderReference:getUsersEntityIdentityProviderUserIdentityProviderReference"
                    },
                    "description": "- (Optional) The reference to a identity provider. See #reference for to look the supported attributes.\n"
                },
                "username": {
                    "type": "string",
                    "description": "- (Optional) The username from identity provider. Name ID for SAML Identity Provider.\n"
                }
            },
            "type": "object",
            "required": [
                "identityProviderReferences",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityIdentityProviderUserIdentityProviderReference:getUsersEntityIdentityProviderUserIdentityProviderReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityProjectReferenceList:getUsersEntityProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID(Required).\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersMetadata:getUsersMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "- The kind name. (Default depends on the resource you are referencing)\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineCategory:getVirtualMachineCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "- value of the key.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskList:getVirtualMachineDiskList": {
            "properties": {
                "dataSourceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a data source.\n"
                },
                "deviceProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineDiskListDeviceProperty:getVirtualMachineDiskListDeviceProperty"
                    },
                    "description": "Properties to a device.\n"
                },
                "diskSizeBytes": {
                    "type": "integer",
                    "description": "Size of the disk in Bytes.\n"
                },
                "diskSizeMib": {
                    "type": "integer",
                    "description": "Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.\n"
                },
                "storageConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineDiskListStorageConfig:getVirtualMachineDiskListStorageConfig"
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                },
                "volumeGroupReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a volume group.\n"
                }
            },
            "type": "object",
            "required": [
                "dataSourceReference",
                "deviceProperties",
                "diskSizeBytes",
                "diskSizeMib",
                "storageConfigs",
                "uuid",
                "volumeGroupReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskListDeviceProperty:getVirtualMachineDiskListDeviceProperty": {
            "properties": {
                "deviceType": {
                    "type": "string",
                    "description": "- A Disk type (default: DISK).\n"
                },
                "diskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Address of disk to boot from.\n"
                }
            },
            "type": "object",
            "required": [
                "deviceType",
                "diskAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskListStorageConfig:getVirtualMachineDiskListStorageConfig": {
            "properties": {
                "flashMode": {
                    "type": "string",
                    "description": "- State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.\n"
                },
                "storageContainerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineDiskListStorageConfigStorageContainerReference:getVirtualMachineDiskListStorageConfigStorageContainerReference"
                    },
                    "description": "- Reference to a kind. Either one of (kind, uuid) or url needs to be specified.\n* `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.\n* `storage_container_reference.#.kind`: - kind of the container reference\n* `storage_container_reference.#.name`: - name of the container reference\n* `storage_container_reference.#.uuid`: - uiid of the container reference\n"
                }
            },
            "type": "object",
            "required": [
                "flashMode",
                "storageContainerReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskListStorageConfigStorageContainerReference:getVirtualMachineDiskListStorageConfigStorageContainerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "url",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineGpuList:getVirtualMachineGpuList": {
            "properties": {
                "deviceId": {
                    "type": "integer",
                    "description": "- (Computed) The device ID of the GPU.\n"
                },
                "fraction": {
                    "type": "integer",
                    "description": "Fraction of the physical GPU assigned.\n"
                },
                "frameBufferSizeMib": {
                    "type": "integer",
                    "description": "- GPU frame buffer size in MiB.\n"
                },
                "guestDriverVersion": {
                    "type": "string",
                    "description": "- Last determined guest driver version.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "- The mode of this GPU.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "numVirtualDisplayHeads": {
                    "type": "integer",
                    "description": "- Number of supported virtual display heads.\n"
                },
                "pciAddress": {
                    "type": "string",
                    "description": "GPU {segment:bus:device:function} (sbdf) address if assigned.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "- The vendor of the GPU.\n* `UUID`: - UUID of the GPU.\n"
                }
            },
            "type": "object",
            "required": [
                "deviceId",
                "fraction",
                "frameBufferSizeMib",
                "guestDriverVersion",
                "mode",
                "name",
                "numVirtualDisplayHeads",
                "pciAddress",
                "uuid",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineMessageList:getVirtualMachineMessageList": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "details",
                "message",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineNicList:getVirtualMachineNicList": {
            "properties": {
                "floatingIp": {
                    "type": "string",
                    "description": "-  The Floating IP associated with the vnic.\n"
                },
                "ipEndpointLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineNicListIpEndpointList:getVirtualMachineNicListIpEndpointList"
                    },
                    "description": "- IP endpoints for the adapter. Currently, IPv4 addresses are supported.\n"
                },
                "isConnected": {
                    "type": "string",
                    "description": "- Indicates whether the serial port connection is connected or not (`true` or `false`).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "- The MAC address for the adapter.\n"
                },
                "model": {
                    "type": "string",
                    "description": "- The model of this NIC. (Options : VIRTIO , E1000).\n"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The reference to a network_function_chain.\n"
                },
                "networkFunctionNicType": {
                    "type": "string",
                    "description": "- The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).\n"
                },
                "nicType": {
                    "type": "string",
                    "description": "- The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).\n"
                },
                "numQueues": {
                    "type": "integer",
                    "description": "- The number of tx/rx queue pairs for this NIC.\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "- The name of the subnet reference to.\n"
                },
                "subnetUuid": {
                    "type": "string",
                    "description": "- The reference to a subnet.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "- the UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "floatingIp",
                "ipEndpointLists",
                "isConnected",
                "macAddress",
                "model",
                "networkFunctionChainReference",
                "networkFunctionNicType",
                "nicType",
                "numQueues",
                "subnetName",
                "subnetUuid",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineNicListIpEndpointList:getVirtualMachineNicListIpEndpointList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "- Address string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "- Address type. It can only be \"ASSIGNED\" in the spec. If no type is specified in the spec, the default type is set to \"ASSIGNED\". (Options : ASSIGNED , LEARNED)\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineSerialPortList:getVirtualMachineSerialPortList": {
            "properties": {
                "index": {
                    "type": "integer",
                    "description": "- Index of the serial port (int).\n"
                },
                "isConnected": {
                    "type": "boolean",
                    "description": "- Indicates whether the serial port connection is connected or not (`true` or `false`).\n"
                }
            },
            "type": "object",
            "required": [
                "index",
                "isConnected"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpec:getVpcSpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResource:getVpcSpecResource"
                    },
                    "description": "VPC resources status\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResource:getVpcSpecResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResourceCommonDomainNameServerIpList:getVpcSpecResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResourceExternalSubnetList:getVpcSpecResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResourceExternallyRoutablePrefixList:getVpcSpecResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n"
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResourceCommonDomainNameServerIpList:getVpcSpecResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResourceExternalSubnetList:getVpcSpecResourceExternalSubnetList": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResourceExternallyRoutablePrefixList:getVpcSpecResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatus:getVpcStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusExecutionContext:getVpcStatusExecutionContext"
                    },
                    "description": "Execution Context of VPC.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResource:getVpcStatusResource"
                    },
                    "description": "VPC resources status\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the VPC\n"
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusExecutionContext:getVpcStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResource:getVpcStatusResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceCommonDomainNameServerIpList:getVpcStatusResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceExternalSubnetList:getVpcStatusResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceExternallyRoutablePrefixList:getVpcStatusResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n"
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceCommonDomainNameServerIpList:getVpcStatusResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceExternalSubnetList:getVpcStatusResourceExternalSubnetList": {
            "properties": {
                "activeGatewayNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceExternalSubnetListActiveGatewayNode:getVpcStatusResourceExternalSubnetListActiveGatewayNode"
                    },
                    "description": "Active Gateway Node. Only present in VPC Status Resources.\n"
                },
                "externalIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets attached to this VPC. Only present in VPC Status Resources .\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "activeGatewayNodes",
                "externalIpLists",
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceExternalSubnetListActiveGatewayNode:getVpcStatusResourceExternalSubnetListActiveGatewayNode": {
            "properties": {
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to host.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "ip address.\n"
                }
            },
            "type": "object",
            "required": [
                "hostReference",
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceExternallyRoutablePrefixList:getVpcStatusResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntity:getVpcsEntity": {
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The vpc kind metadata.\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpec:getVpcsEntitySpec"
                    },
                    "description": "VPC input spec\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatus:getVpcsEntityStatus"
                    },
                    "description": "VPC output status\n"
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "specs",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpec:getVpcsEntitySpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResource:getVpcsEntitySpecResource"
                    },
                    "description": "VPC resources status\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResource:getVpcsEntitySpecResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResourceCommonDomainNameServerIpList:getVpcsEntitySpecResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResourceExternalSubnetList:getVpcsEntitySpecResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResourceExternallyRoutablePrefixList:getVpcsEntitySpecResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n"
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResourceCommonDomainNameServerIpList:getVpcsEntitySpecResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResourceExternalSubnetList:getVpcsEntitySpecResourceExternalSubnetList": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResourceExternallyRoutablePrefixList:getVpcsEntitySpecResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatus:getVpcsEntityStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusExecutionContext:getVpcsEntityStatusExecutionContext"
                    },
                    "description": "Execution Context of VPC.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResource:getVpcsEntityStatusResource"
                    },
                    "description": "VPC resources status\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the VPC\n"
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusExecutionContext:getVpcsEntityStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResource:getVpcsEntityStatusResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceCommonDomainNameServerIpList:getVpcsEntityStatusResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceExternalSubnetList:getVpcsEntityStatusResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceExternallyRoutablePrefixList:getVpcsEntityStatusResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n"
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceCommonDomainNameServerIpList:getVpcsEntityStatusResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceExternalSubnetList:getVpcsEntityStatusResourceExternalSubnetList": {
            "properties": {
                "activeGatewayNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode:getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode"
                    },
                    "description": "Active Gateway Node. Only present in VPC Status Resources.\n"
                },
                "externalIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets attached to this VPC. Only present in VPC Status Resources .\n"
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "activeGatewayNodes",
                "externalIpLists",
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode:getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode": {
            "properties": {
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to host.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "ip address.\n"
                }
            },
            "type": "object",
            "required": [
                "hostReference",
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceExternallyRoutablePrefixList:getVpcsEntityStatusResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsMetadata:getVpcsMetadata": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "- The kind name (Default value: project).\n"
                },
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortAttribute": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                },
                "totalMatches": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the nutanix package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string",
                "description": "URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an\nindividual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS\nupgrades.\n"
            },
            "foundationEndpoint": {
                "type": "string",
                "description": "endpoint for foundation VM (eg. Foundation VM IP)\n"
            },
            "foundationPort": {
                "type": "string",
                "description": "Port for foundation VM\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`\n"
            },
            "ndbEndpoint": {
                "type": "string",
                "description": "endpoint for Era VM (era ip)\n"
            },
            "ndbPassword": {
                "type": "string"
            },
            "ndbUsername": {
                "type": "string"
            },
            "password": {
                "type": "string",
                "description": "Password for provided user name.\n"
            },
            "port": {
                "type": "string",
                "description": "Port for Nutanix Prism.\n"
            },
            "proxyUrl": {
                "type": "string"
            },
            "sessionAuth": {
                "type": "boolean",
                "description": "Use session authentification instead of basic auth for each request\n"
            },
            "username": {
                "type": "string",
                "description": "User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.\n"
            },
            "waitTimeout": {
                "type": "integer",
                "description": "Set if you know that the creation o update of a resource may take long time (minutes)\n"
            }
        },
        "inputProperties": {
            "endpoint": {
                "type": "string",
                "description": "URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an\nindividual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS\nupgrades.\n"
            },
            "foundationEndpoint": {
                "type": "string",
                "description": "endpoint for foundation VM (eg. Foundation VM IP)\n"
            },
            "foundationPort": {
                "type": "string",
                "description": "Port for foundation VM\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`\n"
            },
            "ndbEndpoint": {
                "type": "string",
                "description": "endpoint for Era VM (era ip)\n"
            },
            "ndbPassword": {
                "type": "string"
            },
            "ndbUsername": {
                "type": "string"
            },
            "password": {
                "type": "string",
                "description": "Password for provided user name.\n"
            },
            "port": {
                "type": "string",
                "description": "Port for Nutanix Prism.\n"
            },
            "proxyUrl": {
                "type": "string"
            },
            "sessionAuth": {
                "type": "boolean",
                "description": "Use session authentification instead of basic auth for each request\n"
            },
            "username": {
                "type": "string",
                "description": "User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.\n"
            },
            "waitTimeout": {
                "type": "integer",
                "description": "Set if you know that the creation o update of a resource may take long time (minutes)\n"
            }
        }
    },
    "resources": {
        "nutanix:index/accessControlPolicy:AccessControlPolicy": {
            "description": "Provides a resource to create an access control policy based on the input parameters.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_access_control_policy\" \"test\" {\n\tname        = \"NAME OF ACCESS CONTROL POLICY\"\n\tdescription = \"DESCRIPTION OF THE ACCESS CONTROL POLICY\"\n\trole_reference {\n\t\tkind = \"role\"\n\t\tuuid = \"UUID of role\"\n\t}\n\tuser_reference_list{\n\t\tuuid = \"UUID of User existent\"\n\t\tname = \"admin\"\n\t}\n\n\tcontext_filter_list{\n        entity_filter_expression_list{\n            operator = \"IN\"\n            left_hand_side_entity_type = \"cluster\"\n            right_hand_side{\n                uuid_list = [\"00058ef8-c31c-f0bc-0000-000000007b23\"]\n            }\n        }\n        entity_filter_expression_list{\n            operator = \"IN\"\n            left_hand_side_entity_type = \"image\"\n            right_hand_side{\n                collection = \"ALL\"\n            }\n        }\n        entity_filter_expression_list{\n            operator = \"IN\"\n            left_hand_side_entity_type = \"category\"\n            right_hand_side{\n                collection = \"ALL\"\n            }\n        }\n        entity_filter_expression_list{\n            operator = \"IN\"\n            left_hand_side_entity_type = \"marketplace_item\"\n            right_hand_side{\n                collection = \"SELF_OWNED\"\n            }\n        }\n        entity_filter_expression_list{\n            operator = \"IN\"\n            left_hand_side_entity_type = \"app_task\"\n            right_hand_side{\n                collection = \"SELF_OWNED\"\n            }\n        }\n        entity_filter_expression_list{\n            operator = \"IN\"\n            left_hand_side_entity_type = \"app_variable\"\n            right_hand_side{\n                collection = \"SELF_OWNED\"\n            }\n        }\n    }\n}\n```\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory"
                    },
                    "description": "- (Optional) Categories for the Access Control Policy.\n"
                },
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description of Access Control Policy.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The Access Control Policy kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference",
                    "description": "- (Optional) The reference to a user.\n"
                },
                "roleReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference",
                    "description": "- (Required) The reference to a role.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the Access Control Policy.\n"
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList"
                    },
                    "description": "- (Optional) The User group(s) being assigned a given role.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList"
                    },
                    "description": "- (Optional) The User(s) being assigned a given role.\n"
                }
            },
            "required": [
                "apiVersion",
                "categories",
                "contextFilterLists",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "roleReference",
                "state",
                "userGroupReferenceLists",
                "userReferenceLists"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory"
                    },
                    "description": "- (Optional) Categories for the Access Control Policy.\n"
                },
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description of Access Control Policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the Access Control Policy.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference",
                    "description": "- (Optional) The reference to a user.\n"
                },
                "roleReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference",
                    "description": "- (Required) The reference to a role.\n"
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList"
                    },
                    "description": "- (Optional) The User group(s) being assigned a given role.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList"
                    },
                    "description": "- (Optional) The User(s) being assigned a given role.\n"
                }
            },
            "requiredInputs": [
                "roleReference"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessControlPolicy resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory"
                        },
                        "description": "- (Optional) Categories for the Access Control Policy.\n"
                    },
                    "contextFilterLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) The description of Access Control Policy.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The Access Control Policy kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Optional) Name of the Access Control Policy.\n"
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference",
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "roleReference": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference",
                        "description": "- (Required) The reference to a role.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the Access Control Policy.\n"
                    },
                    "userGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList"
                        },
                        "description": "- (Optional) The User group(s) being assigned a given role.\n"
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList"
                        },
                        "description": "- (Optional) The User(s) being assigned a given role.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/addressGroup:AddressGroup": {
            "description": "Provides a resource to create a address group based on the input parameters.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_address_group\" \"test_address\" {\n\tname = \"test\"\n\tdescription = \"test address groups resource\"\n\n\tip_address_block_list {\n\t\tip = \"10.0.0.0\"\n\t\tprefix_length = 24\n\t}\n}\n```\n",
            "properties": {
                "addressGroupString": {
                    "type": "string",
                    "description": "- (ReadOnly) Address Group string\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) Description of the service group\n"
                },
                "ipAddressBlockLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList"
                    },
                    "description": "- (Required) list of IP address blocks with their prefix length\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the service group\n"
                }
            },
            "required": [
                "addressGroupString",
                "ipAddressBlockLists",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) Description of the service group\n"
                },
                "ipAddressBlockLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList"
                    },
                    "description": "- (Required) list of IP address blocks with their prefix length\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the service group\n"
                }
            },
            "requiredInputs": [
                "ipAddressBlockLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AddressGroup resources.\n",
                "properties": {
                    "addressGroupString": {
                        "type": "string",
                        "description": "- (ReadOnly) Address Group string\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) Description of the service group\n"
                    },
                    "ipAddressBlockLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList"
                        },
                        "description": "- (Required) list of IP address blocks with their prefix length\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) Name of the service group\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/categoryKey:CategoryKey": {
            "description": "Provides a Nutanix Category key resource to Create a category key name.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst test = new nutanix.CategoryKey(\"test\", {description: \"App Support Category Key\"});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.CategoryKey(\"test\", description=\"App Support Category Key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Nutanix.CategoryKey(\"test\", new()\n    {\n        Description = \"App Support Category Key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewCategoryKey(ctx, \"test\", \u0026nutanix.CategoryKeyArgs{\n\t\t\tDescription: pulumi.String(\"App Support Category Key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.CategoryKey;\nimport com.pulumi.nutanix.CategoryKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new CategoryKey(\"test\", CategoryKeyArgs.builder()\n            .description(\"App Support Category Key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nutanix:CategoryKey\n    properties:\n      description: App Support Category Key\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Optional) The version of the API.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for category key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the category key.\n"
                },
                "systemDefined": {
                    "type": "boolean",
                    "description": "- Specifying whether its a system defined category.\n"
                }
            },
            "required": [
                "apiVersion",
                "description",
                "name",
                "systemDefined"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for category key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the category key.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CategoryKey resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Optional) The version of the API.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) A description for category key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) The name for the category key.\n"
                    },
                    "systemDefined": {
                        "type": "boolean",
                        "description": "- Specifying whether its a system defined category.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/categoryValue:CategoryValue": {
            "description": "Provides a Nutanix Category value resource to Create a category value.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst test_category_key = new nutanix.CategoryKey(\"test-category-key\", {description: \"App Support Category Key\"});\nconst test = new nutanix.CategoryValue(\"test\", {\n    description: \"Test Category Value\",\n    value: \"test-value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest_category_key = nutanix.CategoryKey(\"test-category-key\", description=\"App Support Category Key\")\ntest = nutanix.CategoryValue(\"test\",\n    description=\"Test Category Value\",\n    value=\"test-value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_category_key = new Nutanix.CategoryKey(\"test-category-key\", new()\n    {\n        Description = \"App Support Category Key\",\n    });\n\n    var test = new Nutanix.CategoryValue(\"test\", new()\n    {\n        Description = \"Test Category Value\",\n        Value = \"test-value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewCategoryKey(ctx, \"test-category-key\", \u0026nutanix.CategoryKeyArgs{\n\t\t\tDescription: pulumi.String(\"App Support Category Key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewCategoryValue(ctx, \"test\", \u0026nutanix.CategoryValueArgs{\n\t\t\tDescription: pulumi.String(\"Test Category Value\"),\n\t\t\tValue:       pulumi.String(\"test-value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.CategoryKey;\nimport com.pulumi.nutanix.CategoryKeyArgs;\nimport com.pulumi.nutanix.CategoryValue;\nimport com.pulumi.nutanix.CategoryValueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_category_key = new CategoryKey(\"test-category-key\", CategoryKeyArgs.builder()\n            .description(\"App Support Category Key\")\n            .build());\n\n        var test = new CategoryValue(\"test\", CategoryValueArgs.builder()\n            .description(\"Test Category Value\")\n            .value(\"test-value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-category-key:\n    type: nutanix:CategoryKey\n    properties:\n      description: App Support Category Key\n  test:\n    type: nutanix:CategoryValue\n    properties:\n      description: Test Category Value\n      value: test-value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Optional) The version of the API.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for category value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The category_key name for the category value.\n"
                },
                "systemDefined": {
                    "type": "boolean",
                    "description": "- Specifying whether its a system defined category.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value for the category value.\n"
                }
            },
            "required": [
                "apiVersion",
                "description",
                "name",
                "systemDefined",
                "value"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for category value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The category_key name for the category value.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value for the category value.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CategoryValue resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Optional) The version of the API.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) A description for category value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) The category_key name for the category value.\n"
                    },
                    "systemDefined": {
                        "type": "boolean",
                        "description": "- Specifying whether its a system defined category.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value for the category value.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/floatingIp:FloatingIp": {
            "description": "Provides Nutanix resource to create Floating IPs. \n\n## create Floating IP with External Subnet UUID\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst fip1 = new nutanix.FloatingIp(\"fip1\", {externalSubnetReferenceUuid: \"{{ext_sub_uuid}}\"});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nfip1 = nutanix.FloatingIp(\"fip1\", external_subnet_reference_uuid=\"{{ext_sub_uuid}}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fip1 = new Nutanix.FloatingIp(\"fip1\", new()\n    {\n        ExternalSubnetReferenceUuid = \"{{ext_sub_uuid}}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewFloatingIp(ctx, \"fip1\", \u0026nutanix.FloatingIpArgs{\n\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_sub_uuid}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.FloatingIp;\nimport com.pulumi.nutanix.FloatingIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fip1 = new FloatingIp(\"fip1\", FloatingIpArgs.builder()\n            .externalSubnetReferenceUuid(\"{{ext_sub_uuid}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fip1:\n    type: nutanix:FloatingIp\n    properties:\n      externalSubnetReferenceUuid: '{{ext_sub_uuid}}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## create Floating IP with vpc name with external subnet name\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst fip2 = new nutanix.FloatingIp(\"fip2\", {\n    externalSubnetReferenceName: \"{{ext_sub_name}}\",\n    privateIp: \"{{ip_address}}\",\n    vpcReferenceName: \"{{vpc_name}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nfip2 = nutanix.FloatingIp(\"fip2\",\n    external_subnet_reference_name=\"{{ext_sub_name}}\",\n    private_ip=\"{{ip_address}}\",\n    vpc_reference_name=\"{{vpc_name}}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fip2 = new Nutanix.FloatingIp(\"fip2\", new()\n    {\n        ExternalSubnetReferenceName = \"{{ext_sub_name}}\",\n        PrivateIp = \"{{ip_address}}\",\n        VpcReferenceName = \"{{vpc_name}}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewFloatingIp(ctx, \"fip2\", \u0026nutanix.FloatingIpArgs{\n\t\t\tExternalSubnetReferenceName: pulumi.String(\"{{ext_sub_name}}\"),\n\t\t\tPrivateIp:                   pulumi.String(\"{{ip_address}}\"),\n\t\t\tVpcReferenceName:            pulumi.String(\"{{vpc_name}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.FloatingIp;\nimport com.pulumi.nutanix.FloatingIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fip2 = new FloatingIp(\"fip2\", FloatingIpArgs.builder()\n            .externalSubnetReferenceName(\"{{ext_sub_name}}\")\n            .privateIp(\"{{ip_address}}\")\n            .vpcReferenceName(\"{{vpc_name}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fip2:\n    type: nutanix:FloatingIp\n    properties:\n      externalSubnetReferenceName: '{{ext_sub_name}}'\n      privateIp: '{{ip_address}}'\n      vpcReferenceName: '{{vpc_name}}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "externalSubnetReferenceName": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with \n{external_subnet_reference_uuid} .\n"
                },
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with {external_subnet_reference_name} .\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The floating_ips kind metadata.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP with which floating IP is associated. Should be used with vpc_reference .\n"
                },
                "vmNicReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vm_nic .\n"
                },
                "vpcReferenceName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}.\n"
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_name}.\n"
                }
            },
            "required": [
                "apiVersion",
                "externalSubnetReferenceUuid",
                "metadata",
                "vpcReferenceUuid"
            ],
            "inputProperties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "externalSubnetReferenceName": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with \n{external_subnet_reference_uuid} .\n",
                    "willReplaceOnChanges": true
                },
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with {external_subnet_reference_name} .\n",
                    "willReplaceOnChanges": true
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP with which floating IP is associated. Should be used with vpc_reference .\n"
                },
                "vmNicReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vm_nic .\n"
                },
                "vpcReferenceName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}.\n"
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_name}.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIp resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "externalSubnetReferenceName": {
                        "type": "string",
                        "description": "The reference to a subnet. Should not be used with \n{external_subnet_reference_uuid} .\n",
                        "willReplaceOnChanges": true
                    },
                    "externalSubnetReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a subnet. Should not be used with {external_subnet_reference_name} .\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The floating_ips kind metadata.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Private IP with which floating IP is associated. Should be used with vpc_reference .\n"
                    },
                    "vmNicReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a vm_nic .\n"
                    },
                    "vpcReferenceName": {
                        "type": "string",
                        "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}.\n"
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a vpc. Should not be used with {vpc_reference_name}.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationCentralApiKeys:FoundationCentralApiKeys": {
            "description": "Provides a resource to create a new API key for nodes registration with Foundation Central. \n\n## Example Usage\n\n``` hcl\nresource \"nutanix_foundation_central_api_keys\" \"new_api_key\" {\n\talias = \"\u003cNAME-FOR-API-KEY\u003e\"\n}\n```\n",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "- (Required) Alias for the api key to be created.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "Api key in string format.\n"
                },
                "createdTimestamp": {
                    "type": "string",
                    "description": "Time when the api key was created.\n"
                },
                "currentTime": {
                    "type": "string",
                    "description": "Current time of Foundation Central.\n"
                },
                "keyUuid": {
                    "type": "string",
                    "description": "UUID of the api key.\n"
                }
            },
            "required": [
                "alias",
                "apiKey",
                "createdTimestamp",
                "currentTime",
                "keyUuid"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "- (Required) Alias for the api key to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "alias"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationCentralApiKeys resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "- (Required) Alias for the api key to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "Api key in string format.\n"
                    },
                    "createdTimestamp": {
                        "type": "string",
                        "description": "Time when the api key was created.\n"
                    },
                    "currentTime": {
                        "type": "string",
                        "description": "Current time of Foundation Central.\n"
                    },
                    "keyUuid": {
                        "type": "string",
                        "description": "UUID of the api key.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationCentralImageCluster:FoundationCentralImageCluster": {
            "properties": {
                "aosPackageSha256sum": {
                    "type": "string",
                    "description": "Sha256sum of AOS package.\n"
                },
                "aosPackageUrl": {
                    "type": "string",
                    "description": "URL to download AOS package. Required only if imaging is needed.\n"
                },
                "archived": {
                    "type": "boolean"
                },
                "clusterExternalIp": {
                    "type": "string",
                    "description": "External management ip of the cluster.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "Name of the cluster.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "Number of nodes in the cluster.\n"
                },
                "clusterStatus": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus"
                },
                "commonNetworkSettings": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings",
                    "description": "Common network settings across the nodes in the cluster.\n"
                },
                "createdTimestamp": {
                    "type": "string"
                },
                "currentTime": {
                    "type": "string"
                },
                "destroyed": {
                    "type": "boolean"
                },
                "foundationInitConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfig:FoundationCentralImageClusterFoundationInitConfig"
                    }
                },
                "foundationInitNodeUuid": {
                    "type": "string"
                },
                "hypervisorIsoDetails": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails",
                    "description": "Details of the hypervisor iso.\n"
                },
                "imageClusterUuid": {
                    "type": "string"
                },
                "imagedClusterUuid": {
                    "type": "string",
                    "description": "Unique id of the cluster.\n"
                },
                "imagedNodeUuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList"
                    }
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": "Redundancy factor of the cluster.\n"
                },
                "skipClusterCreation": {
                    "type": "boolean"
                },
                "storageNodeCount": {
                    "type": "integer",
                    "description": "Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone to be set on the cluster.\n"
                },
                "workflowType": {
                    "type": "string"
                }
            },
            "required": [
                "aosPackageSha256sum",
                "aosPackageUrl",
                "archived",
                "clusterExternalIp",
                "clusterName",
                "clusterSize",
                "clusterStatus",
                "commonNetworkSettings",
                "createdTimestamp",
                "currentTime",
                "destroyed",
                "foundationInitConfigs",
                "foundationInitNodeUuid",
                "hypervisorIsoDetails",
                "imageClusterUuid",
                "imagedClusterUuid",
                "imagedNodeUuidLists",
                "nodeLists",
                "redundancyFactor",
                "storageNodeCount",
                "timezone",
                "workflowType"
            ],
            "inputProperties": {
                "aosPackageSha256sum": {
                    "type": "string",
                    "description": "Sha256sum of AOS package.\n"
                },
                "aosPackageUrl": {
                    "type": "string",
                    "description": "URL to download AOS package. Required only if imaging is needed.\n"
                },
                "clusterExternalIp": {
                    "type": "string",
                    "description": "External management ip of the cluster.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "Name of the cluster.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "Number of nodes in the cluster.\n"
                },
                "clusterStatus": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus"
                },
                "commonNetworkSettings": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings",
                    "description": "Common network settings across the nodes in the cluster.\n"
                },
                "hypervisorIsoDetails": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails",
                    "description": "Details of the hypervisor iso.\n"
                },
                "imageClusterUuid": {
                    "type": "string"
                },
                "nodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList"
                    }
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": "Redundancy factor of the cluster.\n"
                },
                "skipClusterCreation": {
                    "type": "boolean"
                },
                "storageNodeCount": {
                    "type": "integer",
                    "description": "Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone to be set on the cluster.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationCentralImageCluster resources.\n",
                "properties": {
                    "aosPackageSha256sum": {
                        "type": "string",
                        "description": "Sha256sum of AOS package.\n"
                    },
                    "aosPackageUrl": {
                        "type": "string",
                        "description": "URL to download AOS package. Required only if imaging is needed.\n"
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "clusterExternalIp": {
                        "type": "string",
                        "description": "External management ip of the cluster.\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "Name of the cluster.\n"
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "Number of nodes in the cluster.\n"
                    },
                    "clusterStatus": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus"
                    },
                    "commonNetworkSettings": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings",
                        "description": "Common network settings across the nodes in the cluster.\n"
                    },
                    "createdTimestamp": {
                        "type": "string"
                    },
                    "currentTime": {
                        "type": "string"
                    },
                    "destroyed": {
                        "type": "boolean"
                    },
                    "foundationInitConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfig:FoundationCentralImageClusterFoundationInitConfig"
                        }
                    },
                    "foundationInitNodeUuid": {
                        "type": "string"
                    },
                    "hypervisorIsoDetails": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails",
                        "description": "Details of the hypervisor iso.\n"
                    },
                    "imageClusterUuid": {
                        "type": "string"
                    },
                    "imagedClusterUuid": {
                        "type": "string",
                        "description": "Unique id of the cluster.\n"
                    },
                    "imagedNodeUuidLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodeLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList"
                        }
                    },
                    "redundancyFactor": {
                        "type": "integer",
                        "description": "Redundancy factor of the cluster.\n"
                    },
                    "skipClusterCreation": {
                        "type": "boolean"
                    },
                    "storageNodeCount": {
                        "type": "integer",
                        "description": "Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone to be set on the cluster.\n"
                    },
                    "workflowType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationImage:FoundationImage": {
            "description": "Uploads hypervisor or AOS image to foundation.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst nos_image = new nutanix.FoundationImage(\"nos-image\", {\n    filename: \"nos_image.tar\",\n    installerType: \"nos\",\n    source: \"../../../files/nutanix_installer_x86_64.tar\",\n});\nconst hypervisor_image = new nutanix.FoundationImage(\"hypervisor-image\", {\n    filename: \"esx_image.iso\",\n    installerType: \"esx\",\n    source: \"../../../files/VMware-Installer.x86_64.iso\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnos_image = nutanix.FoundationImage(\"nos-image\",\n    filename=\"nos_image.tar\",\n    installer_type=\"nos\",\n    source=\"../../../files/nutanix_installer_x86_64.tar\")\nhypervisor_image = nutanix.FoundationImage(\"hypervisor-image\",\n    filename=\"esx_image.iso\",\n    installer_type=\"esx\",\n    source=\"../../../files/VMware-Installer.x86_64.iso\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nos_image = new Nutanix.FoundationImage(\"nos-image\", new()\n    {\n        Filename = \"nos_image.tar\",\n        InstallerType = \"nos\",\n        Source = \"../../../files/nutanix_installer_x86_64.tar\",\n    });\n\n    var hypervisor_image = new Nutanix.FoundationImage(\"hypervisor-image\", new()\n    {\n        Filename = \"esx_image.iso\",\n        InstallerType = \"esx\",\n        Source = \"../../../files/VMware-Installer.x86_64.iso\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewFoundationImage(ctx, \"nos-image\", \u0026nutanix.FoundationImageArgs{\n\t\t\tFilename:      pulumi.String(\"nos_image.tar\"),\n\t\t\tInstallerType: pulumi.String(\"nos\"),\n\t\t\tSource:        pulumi.String(\"../../../files/nutanix_installer_x86_64.tar\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewFoundationImage(ctx, \"hypervisor-image\", \u0026nutanix.FoundationImageArgs{\n\t\t\tFilename:      pulumi.String(\"esx_image.iso\"),\n\t\t\tInstallerType: pulumi.String(\"esx\"),\n\t\t\tSource:        pulumi.String(\"../../../files/VMware-Installer.x86_64.iso\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.FoundationImage;\nimport com.pulumi.nutanix.FoundationImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nos_image = new FoundationImage(\"nos-image\", FoundationImageArgs.builder()\n            .filename(\"nos_image.tar\")\n            .installerType(\"nos\")\n            .source(\"../../../files/nutanix_installer_x86_64.tar\")\n            .build());\n\n        var hypervisor_image = new FoundationImage(\"hypervisor-image\", FoundationImageArgs.builder()\n            .filename(\"esx_image.iso\")\n            .installerType(\"esx\")\n            .source(\"../../../files/VMware-Installer.x86_64.iso\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nos-image:\n    type: nutanix:FoundationImage\n    properties:\n      filename: nos_image.tar\n      installerType: nos\n      source: ../../../files/nutanix_installer_x86_64.tar\n  hypervisor-image:\n    type: nutanix:FoundationImage\n    properties:\n      filename: esx_image.iso\n      installerType: esx\n      source: ../../../files/VMware-Installer.x86_64.iso\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## lifecycle\n\n* `Update` : - Resource will trigger new resource create call for any kind of update in resource config and delete existing image from foundation vm.\n\nSee detailed information in [Nutanix Foundation Image](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjM0MDQ-upload-hypervisor-or-aos-image-to-foundation).\n",
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "- (Required) Name of installer file to be kept in foundation vm.\n"
                },
                "inWhitelist": {
                    "type": "boolean",
                    "description": "- If hypervisor ISO is in whitelist.\n"
                },
                "installerType": {
                    "type": "string",
                    "description": "- (Required) One of \"kvm\", \"esx\", \"hyperv\", \"xen\", or \"nos\".\n"
                },
                "md5sum": {
                    "type": "string",
                    "description": "- md5sum of the ISO.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- file location in foundation vm\n"
                },
                "source": {
                    "type": "string",
                    "description": "- (Required) Complete path to the file in machine where the .tf  files runs.\n"
                }
            },
            "required": [
                "filename",
                "inWhitelist",
                "installerType",
                "md5sum",
                "name",
                "source"
            ],
            "inputProperties": {
                "filename": {
                    "type": "string",
                    "description": "- (Required) Name of installer file to be kept in foundation vm.\n",
                    "willReplaceOnChanges": true
                },
                "installerType": {
                    "type": "string",
                    "description": "- (Required) One of \"kvm\", \"esx\", \"hyperv\", \"xen\", or \"nos\".\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "- (Required) Complete path to the file in machine where the .tf  files runs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "filename",
                "installerType",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationImage resources.\n",
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "- (Required) Name of installer file to be kept in foundation vm.\n",
                        "willReplaceOnChanges": true
                    },
                    "inWhitelist": {
                        "type": "boolean",
                        "description": "- If hypervisor ISO is in whitelist.\n"
                    },
                    "installerType": {
                        "type": "string",
                        "description": "- (Required) One of \"kvm\", \"esx\", \"hyperv\", \"xen\", or \"nos\".\n",
                        "willReplaceOnChanges": true
                    },
                    "md5sum": {
                        "type": "string",
                        "description": "- md5sum of the ISO.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- file location in foundation vm\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "- (Required) Complete path to the file in machine where the .tf  files runs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationImageNodes:FoundationImageNodes": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock"
                    }
                },
                "clusterUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesClusterUrl:FoundationImageNodesClusterUrl"
                    },
                    "description": "- list containing cluster name and cluster urls for created clusters in current session\n* `cluster_urls.#.cluster_name` :- cluster_name\n* `cluster_urls.#.cluster_url` :- url to access the cluster login\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster"
                    }
                },
                "cvmGateway": {
                    "type": "string",
                    "description": "- (Required) CVM gateway.\n"
                },
                "cvmNetmask": {
                    "type": "string",
                    "description": "- (Required) CVM netmask.\n"
                },
                "eosMetadata": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata",
                    "description": "- Contains user data from Eos portal.\n"
                },
                "fcSettings": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings",
                    "description": "- Foundation Central specific settings.\n"
                },
                "hypervExternalVnic": {
                    "type": "string",
                    "description": "- Hyperv External virtual network adapter name.\n"
                },
                "hypervExternalVswitch": {
                    "type": "string",
                    "description": "- Hyperv External vswitch name.\n"
                },
                "hypervProductKey": {
                    "type": "string",
                    "description": "- Hyperv product key.\n"
                },
                "hypervSku": {
                    "type": "boolean",
                    "description": "- Hyperv SKU.\n"
                },
                "hypervisorGateway": {
                    "type": "string",
                    "description": "- (Required) Hypervisor gateway.\n"
                },
                "hypervisorIso": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso",
                    "description": "- Hypervisor ISO.\n"
                },
                "hypervisorNameserver": {
                    "type": "string"
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "description": "- (Required) Hypervisor netmask.\n"
                },
                "hypervisorPassword": {
                    "type": "string",
                    "description": "- Hypervisor password.\n"
                },
                "installScript": {
                    "type": "string",
                    "description": "- install script.\n"
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) default IPMI gateway\n"
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) default IPMI netmask\n"
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) IPMI password.\n"
                },
                "ipmiUser": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) IPMI username.\n"
                },
                "layoutEggUuid": {
                    "type": "string",
                    "description": "- Id of the custom layout which needs to be passed to imaging request.\n"
                },
                "nosPackage": {
                    "type": "string",
                    "description": "- (Required) NOS package.\n"
                },
                "sessionId": {
                    "type": "string",
                    "description": "- session_id of the imaging session\n"
                },
                "skipHypervisor": {
                    "type": "boolean",
                    "description": "- If hypervisor installation should be skipped.\n"
                },
                "svmRescueArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.\n"
                },
                "tests": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests",
                    "description": "- Types of tests to be performed.\n"
                },
                "ucsmIp": {
                    "type": "string",
                    "description": "- UCSM IP address.\n"
                },
                "ucsmPassword": {
                    "type": "string",
                    "description": "- UCSM password.\n"
                },
                "ucsmUser": {
                    "type": "string",
                    "description": "- UCSM username.\n"
                },
                "uncPassword": {
                    "type": "string",
                    "description": "- UNC password.\n"
                },
                "uncPath": {
                    "type": "string",
                    "description": "- UNC Path.\n"
                },
                "uncUsername": {
                    "type": "string",
                    "description": "- UNC username.\n"
                },
                "xenConfigType": {
                    "type": "string",
                    "description": "- xen config types.\n"
                },
                "xsMasterIp": {
                    "type": "string",
                    "description": "- xen server master IP address.\n"
                },
                "xsMasterLabel": {
                    "type": "string",
                    "description": "- xen server master label.\n"
                },
                "xsMasterPassword": {
                    "type": "string",
                    "description": "- xen server master password.\n"
                },
                "xsMasterUsername": {
                    "type": "string",
                    "description": "- xen server master username.\n"
                }
            },
            "required": [
                "blocks",
                "clusterUrls",
                "cvmGateway",
                "cvmNetmask",
                "hypervisorGateway",
                "hypervisorNetmask",
                "nosPackage",
                "sessionId"
            ],
            "inputProperties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock"
                    },
                    "willReplaceOnChanges": true
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster"
                    },
                    "willReplaceOnChanges": true
                },
                "cvmGateway": {
                    "type": "string",
                    "description": "- (Required) CVM gateway.\n",
                    "willReplaceOnChanges": true
                },
                "cvmNetmask": {
                    "type": "string",
                    "description": "- (Required) CVM netmask.\n",
                    "willReplaceOnChanges": true
                },
                "eosMetadata": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata",
                    "description": "- Contains user data from Eos portal.\n",
                    "willReplaceOnChanges": true
                },
                "fcSettings": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings",
                    "description": "- Foundation Central specific settings.\n",
                    "willReplaceOnChanges": true
                },
                "hypervExternalVnic": {
                    "type": "string",
                    "description": "- Hyperv External virtual network adapter name.\n",
                    "willReplaceOnChanges": true
                },
                "hypervExternalVswitch": {
                    "type": "string",
                    "description": "- Hyperv External vswitch name.\n",
                    "willReplaceOnChanges": true
                },
                "hypervProductKey": {
                    "type": "string",
                    "description": "- Hyperv product key.\n",
                    "willReplaceOnChanges": true
                },
                "hypervSku": {
                    "type": "boolean",
                    "description": "- Hyperv SKU.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorGateway": {
                    "type": "string",
                    "description": "- (Required) Hypervisor gateway.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorIso": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso",
                    "description": "- Hypervisor ISO.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorNameserver": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "description": "- (Required) Hypervisor netmask.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorPassword": {
                    "type": "string",
                    "description": "- Hypervisor password.\n",
                    "willReplaceOnChanges": true
                },
                "installScript": {
                    "type": "string",
                    "description": "- install script.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) default IPMI gateway\n",
                    "willReplaceOnChanges": true
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) default IPMI netmask\n",
                    "willReplaceOnChanges": true
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) IPMI password.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiUser": {
                    "type": "string",
                    "description": "- (Required incase using IPMI based imaging either here or inside node spec) IPMI username.\n",
                    "willReplaceOnChanges": true
                },
                "layoutEggUuid": {
                    "type": "string",
                    "description": "- Id of the custom layout which needs to be passed to imaging request.\n",
                    "willReplaceOnChanges": true
                },
                "nosPackage": {
                    "type": "string",
                    "description": "- (Required) NOS package.\n",
                    "willReplaceOnChanges": true
                },
                "skipHypervisor": {
                    "type": "boolean",
                    "description": "- If hypervisor installation should be skipped.\n",
                    "willReplaceOnChanges": true
                },
                "svmRescueArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.\n",
                    "willReplaceOnChanges": true
                },
                "tests": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests",
                    "description": "- Types of tests to be performed.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmIp": {
                    "type": "string",
                    "description": "- UCSM IP address.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmPassword": {
                    "type": "string",
                    "description": "- UCSM password.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmUser": {
                    "type": "string",
                    "description": "- UCSM username.\n",
                    "willReplaceOnChanges": true
                },
                "uncPassword": {
                    "type": "string",
                    "description": "- UNC password.\n",
                    "willReplaceOnChanges": true
                },
                "uncPath": {
                    "type": "string",
                    "description": "- UNC Path.\n",
                    "willReplaceOnChanges": true
                },
                "uncUsername": {
                    "type": "string",
                    "description": "- UNC username.\n",
                    "willReplaceOnChanges": true
                },
                "xenConfigType": {
                    "type": "string",
                    "description": "- xen config types.\n",
                    "willReplaceOnChanges": true
                },
                "xsMasterIp": {
                    "type": "string",
                    "description": "- xen server master IP address.\n",
                    "willReplaceOnChanges": true
                },
                "xsMasterLabel": {
                    "type": "string",
                    "description": "- xen server master label.\n",
                    "willReplaceOnChanges": true
                },
                "xsMasterPassword": {
                    "type": "string",
                    "description": "- xen server master password.\n",
                    "willReplaceOnChanges": true
                },
                "xsMasterUsername": {
                    "type": "string",
                    "description": "- xen server master username.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "blocks",
                "cvmGateway",
                "cvmNetmask",
                "hypervisorGateway",
                "hypervisorNetmask",
                "nosPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationImageNodes resources.\n",
                "properties": {
                    "blocks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock"
                        },
                        "willReplaceOnChanges": true
                    },
                    "clusterUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationImageNodesClusterUrl:FoundationImageNodesClusterUrl"
                        },
                        "description": "- list containing cluster name and cluster urls for created clusters in current session\n* `cluster_urls.#.cluster_name` :- cluster_name\n* `cluster_urls.#.cluster_url` :- url to access the cluster login\n"
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster"
                        },
                        "willReplaceOnChanges": true
                    },
                    "cvmGateway": {
                        "type": "string",
                        "description": "- (Required) CVM gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "cvmNetmask": {
                        "type": "string",
                        "description": "- (Required) CVM netmask.\n",
                        "willReplaceOnChanges": true
                    },
                    "eosMetadata": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata",
                        "description": "- Contains user data from Eos portal.\n",
                        "willReplaceOnChanges": true
                    },
                    "fcSettings": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings",
                        "description": "- Foundation Central specific settings.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervExternalVnic": {
                        "type": "string",
                        "description": "- Hyperv External virtual network adapter name.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervExternalVswitch": {
                        "type": "string",
                        "description": "- Hyperv External vswitch name.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervProductKey": {
                        "type": "string",
                        "description": "- Hyperv product key.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervSku": {
                        "type": "boolean",
                        "description": "- Hyperv SKU.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorGateway": {
                        "type": "string",
                        "description": "- (Required) Hypervisor gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorIso": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso",
                        "description": "- Hypervisor ISO.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorNameserver": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorNetmask": {
                        "type": "string",
                        "description": "- (Required) Hypervisor netmask.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorPassword": {
                        "type": "string",
                        "description": "- Hypervisor password.\n",
                        "willReplaceOnChanges": true
                    },
                    "installScript": {
                        "type": "string",
                        "description": "- install script.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiGateway": {
                        "type": "string",
                        "description": "- (Required incase using IPMI based imaging either here or inside node spec) default IPMI gateway\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiNetmask": {
                        "type": "string",
                        "description": "- (Required incase using IPMI based imaging either here or inside node spec) default IPMI netmask\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiPassword": {
                        "type": "string",
                        "description": "- (Required incase using IPMI based imaging either here or inside node spec) IPMI password.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiUser": {
                        "type": "string",
                        "description": "- (Required incase using IPMI based imaging either here or inside node spec) IPMI username.\n",
                        "willReplaceOnChanges": true
                    },
                    "layoutEggUuid": {
                        "type": "string",
                        "description": "- Id of the custom layout which needs to be passed to imaging request.\n",
                        "willReplaceOnChanges": true
                    },
                    "nosPackage": {
                        "type": "string",
                        "description": "- (Required) NOS package.\n",
                        "willReplaceOnChanges": true
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "- session_id of the imaging session\n"
                    },
                    "skipHypervisor": {
                        "type": "boolean",
                        "description": "- If hypervisor installation should be skipped.\n",
                        "willReplaceOnChanges": true
                    },
                    "svmRescueArgs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.\n",
                        "willReplaceOnChanges": true
                    },
                    "tests": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests",
                        "description": "- Types of tests to be performed.\n",
                        "willReplaceOnChanges": true
                    },
                    "ucsmIp": {
                        "type": "string",
                        "description": "- UCSM IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "ucsmPassword": {
                        "type": "string",
                        "description": "- UCSM password.\n",
                        "willReplaceOnChanges": true
                    },
                    "ucsmUser": {
                        "type": "string",
                        "description": "- UCSM username.\n",
                        "willReplaceOnChanges": true
                    },
                    "uncPassword": {
                        "type": "string",
                        "description": "- UNC password.\n",
                        "willReplaceOnChanges": true
                    },
                    "uncPath": {
                        "type": "string",
                        "description": "- UNC Path.\n",
                        "willReplaceOnChanges": true
                    },
                    "uncUsername": {
                        "type": "string",
                        "description": "- UNC username.\n",
                        "willReplaceOnChanges": true
                    },
                    "xenConfigType": {
                        "type": "string",
                        "description": "- xen config types.\n",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterIp": {
                        "type": "string",
                        "description": "- xen server master IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterLabel": {
                        "type": "string",
                        "description": "- xen server master label.\n",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterPassword": {
                        "type": "string",
                        "description": "- xen server master password.\n",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterUsername": {
                        "type": "string",
                        "description": "- xen server master username.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationIpmiConfig:FoundationIpmiConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock"
                    },
                    "description": "- (Required) List of blocks.\n"
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": "- (Required) IPMI gateway.\n"
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": "- (Required) IPMI netmask.\n"
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": "- (Required) IPMI password.\n"
                },
                "ipmiUser": {
                    "type": "string",
                    "description": "- (Required) IPMI username.\n"
                }
            },
            "required": [
                "blocks",
                "ipmiGateway",
                "ipmiNetmask",
                "ipmiPassword",
                "ipmiUser"
            ],
            "inputProperties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock"
                    },
                    "description": "- (Required) List of blocks.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": "- (Required) IPMI gateway.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": "- (Required) IPMI netmask.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": "- (Required) IPMI password.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiUser": {
                    "type": "string",
                    "description": "- (Required) IPMI username.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "blocks",
                "ipmiGateway",
                "ipmiNetmask",
                "ipmiPassword",
                "ipmiUser"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationIpmiConfig resources.\n",
                "properties": {
                    "blocks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock"
                        },
                        "description": "- (Required) List of blocks.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiGateway": {
                        "type": "string",
                        "description": "- (Required) IPMI gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiNetmask": {
                        "type": "string",
                        "description": "- (Required) IPMI netmask.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiPassword": {
                        "type": "string",
                        "description": "- (Required) IPMI password.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiUser": {
                        "type": "string",
                        "description": "- (Required) IPMI username.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/image:Image": {
            "description": "Provides a Nutanix Image resource to Create a image.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst test = new nutanix.Image(\"test\", {\n    description: \"Ubuntu\",\n    sourceUri: \"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.Image(\"test\",\n    description=\"Ubuntu\",\n    source_uri=\"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Nutanix.Image(\"test\", new()\n    {\n        Description = \"Ubuntu\",\n        SourceUri = \"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewImage(ctx, \"test\", \u0026nutanix.ImageArgs{\n\t\t\tDescription: pulumi.String(\"Ubuntu\"),\n\t\t\tSourceUri:   pulumi.String(\"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.Image;\nimport com.pulumi.nutanix.ImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Image(\"test\", ImageArgs.builder()\n            .description(\"Ubuntu\")\n            .sourceUri(\"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nutanix:Image\n    properties:\n      description: Ubuntu\n      sourceUri: http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "- (Optional) The supported CPU architecture for a disk image.\n"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a availability_zone.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageCategory:ImageCategory"
                    },
                    "description": "- (Optional) Categories for the image.\n"
                },
                "checksum": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n"
                },
                "clusterName": {
                    "type": "string"
                },
                "clusterReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageClusterReference:ImageClusterReference"
                    }
                },
                "clusterUuid": {
                    "type": "string"
                },
                "currentClusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageCurrentClusterReferenceList:ImageCurrentClusterReferenceList"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for image.\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "- (Optional) The type of image.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The image kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the image.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "retrievalUriLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- List of URIs where the raw image data can be accessed.\n"
                },
                "sizeBytes": {
                    "type": "integer",
                    "description": "- The size of the image in bytes.\n"
                },
                "sourcePath": {
                    "type": "string",
                    "description": "- (Optional) A local path to upload an image.\n"
                },
                "sourceUri": {
                    "type": "string",
                    "description": "- (Optional) The source URI points at the location of the source image which is used to create/update image.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the image.\n"
                },
                "version": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The image version.\n"
                }
            },
            "required": [
                "apiVersion",
                "architecture",
                "availabilityZoneReference",
                "categories",
                "checksum",
                "clusterName",
                "clusterReferences",
                "clusterUuid",
                "currentClusterReferenceLists",
                "description",
                "imageType",
                "metadata",
                "name",
                "ownerReference",
                "retrievalUriLists",
                "sizeBytes",
                "sourcePath",
                "sourceUri",
                "state",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "type": "string",
                    "description": "- (Optional) The supported CPU architecture for a disk image.\n"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a availability_zone.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageCategory:ImageCategory"
                    },
                    "description": "- (Optional) Categories for the image.\n"
                },
                "checksum": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n"
                },
                "clusterReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageClusterReference:ImageClusterReference"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for image.\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "- (Optional) The type of image.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the image.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "sourcePath": {
                    "type": "string",
                    "description": "- (Optional) A local path to upload an image.\n"
                },
                "sourceUri": {
                    "type": "string",
                    "description": "- (Optional) The source URI points at the location of the source image which is used to create/update image.\n"
                },
                "version": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The image version.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Image resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "architecture": {
                        "type": "string",
                        "description": "- (Optional) The supported CPU architecture for a disk image.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a availability_zone.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ImageCategory:ImageCategory"
                        },
                        "description": "- (Optional) Categories for the image.\n"
                    },
                    "checksum": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ImageClusterReference:ImageClusterReference"
                        }
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "currentClusterReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ImageCurrentClusterReferenceList:ImageCurrentClusterReferenceList"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) A description for image.\n"
                    },
                    "imageType": {
                        "type": "string",
                        "description": "- (Optional) The type of image.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The image kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) The name for the image.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a project.\n"
                    },
                    "retrievalUriLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- List of URIs where the raw image data can be accessed.\n"
                    },
                    "sizeBytes": {
                        "type": "integer",
                        "description": "- The size of the image in bytes.\n"
                    },
                    "sourcePath": {
                        "type": "string",
                        "description": "- (Optional) A local path to upload an image.\n"
                    },
                    "sourceUri": {
                        "type": "string",
                        "description": "- (Optional) The source URI points at the location of the source image which is used to create/update image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the image.\n"
                    },
                    "version": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The image version.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/karbonCluster:KarbonCluster": {
            "description": "Provides a Nutanix Karbon Cluster resource to Create a k8s cluster.\n\n**Note:** Minimum tested version is Karbon 2.2\n\n**Note:** Kubernetes and Node OS upgrades are not supported using this provider.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst exampleCluster = new nutanix.KarbonCluster(\"exampleCluster\", {\n    cniConfig: {\n        nodeCidrMaskSize: 24,\n        podIpv4Cidr: \"172.20.0.0/16\",\n        serviceIpv4Cidr: \"172.19.0.0/16\",\n    },\n    etcdNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n    masterNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n    storageClassConfig: {\n        reclaimPolicy: \"Delete\",\n        volumesConfig: {\n            fileSystem: \"ext4\",\n            flashMode: false,\n            password: \"my_pe_pw\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n            storageContainer: \"my_storage_container_name\",\n            username: \"my_pe_username\",\n        },\n    },\n    version: \"1.18.15-1\",\n    workerNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nexample_cluster = nutanix.KarbonCluster(\"exampleCluster\",\n    cni_config=nutanix.KarbonClusterCniConfigArgs(\n        node_cidr_mask_size=24,\n        pod_ipv4_cidr=\"172.20.0.0/16\",\n        service_ipv4_cidr=\"172.19.0.0/16\",\n    ),\n    etcd_node_pool=nutanix.KarbonClusterEtcdNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterEtcdNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ),\n    master_node_pool=nutanix.KarbonClusterMasterNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterMasterNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ),\n    storage_class_config=nutanix.KarbonClusterStorageClassConfigArgs(\n        reclaim_policy=\"Delete\",\n        volumes_config=nutanix.KarbonClusterStorageClassConfigVolumesConfigArgs(\n            file_system=\"ext4\",\n            flash_mode=False,\n            password=\"my_pe_pw\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n            storage_container=\"my_storage_container_name\",\n            username=\"my_pe_username\",\n        ),\n    ),\n    version=\"1.18.15-1\",\n    worker_node_pool=nutanix.KarbonClusterWorkerNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterWorkerNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCluster = new Nutanix.KarbonCluster(\"exampleCluster\", new()\n    {\n        CniConfig = new Nutanix.Inputs.KarbonClusterCniConfigArgs\n        {\n            NodeCidrMaskSize = 24,\n            PodIpv4Cidr = \"172.20.0.0/16\",\n            ServiceIpv4Cidr = \"172.19.0.0/16\",\n        },\n        EtcdNodePool = new Nutanix.Inputs.KarbonClusterEtcdNodePoolArgs\n        {\n            AhvConfig = new Nutanix.Inputs.KarbonClusterEtcdNodePoolAhvConfigArgs\n            {\n                NetworkUuid = \"my_subnet_id\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n            },\n            NodeOsVersion = \"ntnx-1.0\",\n            NumInstances = 1,\n        },\n        MasterNodePool = new Nutanix.Inputs.KarbonClusterMasterNodePoolArgs\n        {\n            AhvConfig = new Nutanix.Inputs.KarbonClusterMasterNodePoolAhvConfigArgs\n            {\n                NetworkUuid = \"my_subnet_id\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n            },\n            NodeOsVersion = \"ntnx-1.0\",\n            NumInstances = 1,\n        },\n        StorageClassConfig = new Nutanix.Inputs.KarbonClusterStorageClassConfigArgs\n        {\n            ReclaimPolicy = \"Delete\",\n            VolumesConfig = new Nutanix.Inputs.KarbonClusterStorageClassConfigVolumesConfigArgs\n            {\n                FileSystem = \"ext4\",\n                FlashMode = false,\n                Password = \"my_pe_pw\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n                StorageContainer = \"my_storage_container_name\",\n                Username = \"my_pe_username\",\n            },\n        },\n        Version = \"1.18.15-1\",\n        WorkerNodePool = new Nutanix.Inputs.KarbonClusterWorkerNodePoolArgs\n        {\n            AhvConfig = new Nutanix.Inputs.KarbonClusterWorkerNodePoolAhvConfigArgs\n            {\n                NetworkUuid = \"my_subnet_id\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n            },\n            NodeOsVersion = \"ntnx-1.0\",\n            NumInstances = 1,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewKarbonCluster(ctx, \"exampleCluster\", \u0026nutanix.KarbonClusterArgs{\n\t\t\tCniConfig: \u0026nutanix.KarbonClusterCniConfigArgs{\n\t\t\t\tNodeCidrMaskSize: pulumi.Int(24),\n\t\t\t\tPodIpv4Cidr:      pulumi.String(\"172.20.0.0/16\"),\n\t\t\t\tServiceIpv4Cidr:  pulumi.String(\"172.19.0.0/16\"),\n\t\t\t},\n\t\t\tEtcdNodePool: \u0026nutanix.KarbonClusterEtcdNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026nutanix.KarbonClusterEtcdNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t\tMasterNodePool: \u0026nutanix.KarbonClusterMasterNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026nutanix.KarbonClusterMasterNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t\tStorageClassConfig: \u0026nutanix.KarbonClusterStorageClassConfigArgs{\n\t\t\t\tReclaimPolicy: pulumi.String(\"Delete\"),\n\t\t\t\tVolumesConfig: \u0026nutanix.KarbonClusterStorageClassConfigVolumesConfigArgs{\n\t\t\t\t\tFileSystem:              pulumi.String(\"ext4\"),\n\t\t\t\t\tFlashMode:               pulumi.Bool(false),\n\t\t\t\t\tPassword:                pulumi.String(\"my_pe_pw\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t\tStorageContainer:        pulumi.String(\"my_storage_container_name\"),\n\t\t\t\t\tUsername:                pulumi.String(\"my_pe_username\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVersion: pulumi.String(\"1.18.15-1\"),\n\t\t\tWorkerNodePool: \u0026nutanix.KarbonClusterWorkerNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026nutanix.KarbonClusterWorkerNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.KarbonCluster;\nimport com.pulumi.nutanix.KarbonClusterArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterCniConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterEtcdNodePoolArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterEtcdNodePoolAhvConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterMasterNodePoolArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterMasterNodePoolAhvConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterStorageClassConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterStorageClassConfigVolumesConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterWorkerNodePoolArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterWorkerNodePoolAhvConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCluster = new KarbonCluster(\"exampleCluster\", KarbonClusterArgs.builder()\n            .cniConfig(KarbonClusterCniConfigArgs.builder()\n                .nodeCidrMaskSize(24)\n                .podIpv4Cidr(\"172.20.0.0/16\")\n                .serviceIpv4Cidr(\"172.19.0.0/16\")\n                .build())\n            .etcdNodePool(KarbonClusterEtcdNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterEtcdNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .masterNodePool(KarbonClusterMasterNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterMasterNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .storageClassConfig(KarbonClusterStorageClassConfigArgs.builder()\n                .reclaimPolicy(\"Delete\")\n                .volumesConfig(KarbonClusterStorageClassConfigVolumesConfigArgs.builder()\n                    .fileSystem(\"ext4\")\n                    .flashMode(false)\n                    .password(\"my_pe_pw\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .storageContainer(\"my_storage_container_name\")\n                    .username(\"my_pe_username\")\n                    .build())\n                .build())\n            .version(\"1.18.15-1\")\n            .workerNodePool(KarbonClusterWorkerNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterWorkerNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCluster:\n    type: nutanix:KarbonCluster\n    properties:\n      cniConfig:\n        nodeCidrMaskSize: 24\n        podIpv4Cidr: 172.20.0.0/16\n        serviceIpv4Cidr: 172.19.0.0/16\n      etcdNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n      masterNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n      storageClassConfig:\n        reclaimPolicy: Delete\n        volumesConfig:\n          fileSystem: ext4\n          flashMode: false\n          password: my_pe_pw\n          prismElementClusterUuid: my_pe_cluster_uuid\n          storageContainer: my_storage_container_name\n          username: my_pe_username\n      version: 1.18.15-1\n      workerNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### resource to create karbon cluster with timeouts\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst exampleCluster = new nutanix.KarbonCluster(\"exampleCluster\", {\n    cniConfig: {\n        nodeCidrMaskSize: 24,\n        podIpv4Cidr: \"172.20.0.0/16\",\n        serviceIpv4Cidr: \"172.19.0.0/16\",\n    },\n    etcdNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n    masterNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n    storageClassConfig: {\n        reclaimPolicy: \"Delete\",\n        volumesConfig: {\n            fileSystem: \"ext4\",\n            flashMode: false,\n            password: \"my_pe_pw\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n            storageContainer: \"my_storage_container_name\",\n            username: \"my_pe_username\",\n        },\n    },\n    version: \"1.18.15-1\",\n    workerNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nexample_cluster = nutanix.KarbonCluster(\"exampleCluster\",\n    cni_config=nutanix.KarbonClusterCniConfigArgs(\n        node_cidr_mask_size=24,\n        pod_ipv4_cidr=\"172.20.0.0/16\",\n        service_ipv4_cidr=\"172.19.0.0/16\",\n    ),\n    etcd_node_pool=nutanix.KarbonClusterEtcdNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterEtcdNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ),\n    master_node_pool=nutanix.KarbonClusterMasterNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterMasterNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ),\n    storage_class_config=nutanix.KarbonClusterStorageClassConfigArgs(\n        reclaim_policy=\"Delete\",\n        volumes_config=nutanix.KarbonClusterStorageClassConfigVolumesConfigArgs(\n            file_system=\"ext4\",\n            flash_mode=False,\n            password=\"my_pe_pw\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n            storage_container=\"my_storage_container_name\",\n            username=\"my_pe_username\",\n        ),\n    ),\n    version=\"1.18.15-1\",\n    worker_node_pool=nutanix.KarbonClusterWorkerNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterWorkerNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCluster = new Nutanix.KarbonCluster(\"exampleCluster\", new()\n    {\n        CniConfig = new Nutanix.Inputs.KarbonClusterCniConfigArgs\n        {\n            NodeCidrMaskSize = 24,\n            PodIpv4Cidr = \"172.20.0.0/16\",\n            ServiceIpv4Cidr = \"172.19.0.0/16\",\n        },\n        EtcdNodePool = new Nutanix.Inputs.KarbonClusterEtcdNodePoolArgs\n        {\n            AhvConfig = new Nutanix.Inputs.KarbonClusterEtcdNodePoolAhvConfigArgs\n            {\n                NetworkUuid = \"my_subnet_id\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n            },\n            NodeOsVersion = \"ntnx-1.0\",\n            NumInstances = 1,\n        },\n        MasterNodePool = new Nutanix.Inputs.KarbonClusterMasterNodePoolArgs\n        {\n            AhvConfig = new Nutanix.Inputs.KarbonClusterMasterNodePoolAhvConfigArgs\n            {\n                NetworkUuid = \"my_subnet_id\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n            },\n            NodeOsVersion = \"ntnx-1.0\",\n            NumInstances = 1,\n        },\n        StorageClassConfig = new Nutanix.Inputs.KarbonClusterStorageClassConfigArgs\n        {\n            ReclaimPolicy = \"Delete\",\n            VolumesConfig = new Nutanix.Inputs.KarbonClusterStorageClassConfigVolumesConfigArgs\n            {\n                FileSystem = \"ext4\",\n                FlashMode = false,\n                Password = \"my_pe_pw\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n                StorageContainer = \"my_storage_container_name\",\n                Username = \"my_pe_username\",\n            },\n        },\n        Version = \"1.18.15-1\",\n        WorkerNodePool = new Nutanix.Inputs.KarbonClusterWorkerNodePoolArgs\n        {\n            AhvConfig = new Nutanix.Inputs.KarbonClusterWorkerNodePoolAhvConfigArgs\n            {\n                NetworkUuid = \"my_subnet_id\",\n                PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n            },\n            NodeOsVersion = \"ntnx-1.0\",\n            NumInstances = 1,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewKarbonCluster(ctx, \"exampleCluster\", \u0026nutanix.KarbonClusterArgs{\n\t\t\tCniConfig: \u0026nutanix.KarbonClusterCniConfigArgs{\n\t\t\t\tNodeCidrMaskSize: pulumi.Int(24),\n\t\t\t\tPodIpv4Cidr:      pulumi.String(\"172.20.0.0/16\"),\n\t\t\t\tServiceIpv4Cidr:  pulumi.String(\"172.19.0.0/16\"),\n\t\t\t},\n\t\t\tEtcdNodePool: \u0026nutanix.KarbonClusterEtcdNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026nutanix.KarbonClusterEtcdNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t\tMasterNodePool: \u0026nutanix.KarbonClusterMasterNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026nutanix.KarbonClusterMasterNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t\tStorageClassConfig: \u0026nutanix.KarbonClusterStorageClassConfigArgs{\n\t\t\t\tReclaimPolicy: pulumi.String(\"Delete\"),\n\t\t\t\tVolumesConfig: \u0026nutanix.KarbonClusterStorageClassConfigVolumesConfigArgs{\n\t\t\t\t\tFileSystem:              pulumi.String(\"ext4\"),\n\t\t\t\t\tFlashMode:               pulumi.Bool(false),\n\t\t\t\t\tPassword:                pulumi.String(\"my_pe_pw\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t\tStorageContainer:        pulumi.String(\"my_storage_container_name\"),\n\t\t\t\t\tUsername:                pulumi.String(\"my_pe_username\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVersion: pulumi.String(\"1.18.15-1\"),\n\t\t\tWorkerNodePool: \u0026nutanix.KarbonClusterWorkerNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026nutanix.KarbonClusterWorkerNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.KarbonCluster;\nimport com.pulumi.nutanix.KarbonClusterArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterCniConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterEtcdNodePoolArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterEtcdNodePoolAhvConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterMasterNodePoolArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterMasterNodePoolAhvConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterStorageClassConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterStorageClassConfigVolumesConfigArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterWorkerNodePoolArgs;\nimport com.pulumi.nutanix.inputs.KarbonClusterWorkerNodePoolAhvConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCluster = new KarbonCluster(\"exampleCluster\", KarbonClusterArgs.builder()\n            .cniConfig(KarbonClusterCniConfigArgs.builder()\n                .nodeCidrMaskSize(24)\n                .podIpv4Cidr(\"172.20.0.0/16\")\n                .serviceIpv4Cidr(\"172.19.0.0/16\")\n                .build())\n            .etcdNodePool(KarbonClusterEtcdNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterEtcdNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .masterNodePool(KarbonClusterMasterNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterMasterNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .storageClassConfig(KarbonClusterStorageClassConfigArgs.builder()\n                .reclaimPolicy(\"Delete\")\n                .volumesConfig(KarbonClusterStorageClassConfigVolumesConfigArgs.builder()\n                    .fileSystem(\"ext4\")\n                    .flashMode(false)\n                    .password(\"my_pe_pw\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .storageContainer(\"my_storage_container_name\")\n                    .username(\"my_pe_username\")\n                    .build())\n                .build())\n            .version(\"1.18.15-1\")\n            .workerNodePool(KarbonClusterWorkerNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterWorkerNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCluster:\n    type: nutanix:KarbonCluster\n    properties:\n      cniConfig:\n        nodeCidrMaskSize: 24\n        podIpv4Cidr: 172.20.0.0/16\n        serviceIpv4Cidr: 172.19.0.0/16\n      etcdNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n      masterNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n      storageClassConfig:\n        reclaimPolicy: Delete\n        volumesConfig:\n          fileSystem: ext4\n          flashMode: false\n          password: my_pe_pw\n          prismElementClusterUuid: my_pe_cluster_uuid\n          storageContainer: my_storage_container_name\n          username: my_pe_username\n      version: 1.18.15-1\n      workerNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "activePassiveConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig",
                    "description": "- (Optional) The active passive mode uses the Virtual Router Redundancy Protocol (VRRP) protocol to provide high availability of the master. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "cniConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig",
                    "description": "- (Required) K8s cluster networking configuration. The flannel or the calico configuration needs to be provided. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "deploymentType": {
                    "type": "string"
                },
                "etcdNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool",
                    "description": "- (Required) Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.\n"
                },
                "externalLbConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig",
                    "description": "- (Optional) The external load balancer configuration in the case of a multi-master-external-load-balancer type master deployment. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "kubeapiServerIpv4Address": {
                    "type": "string"
                },
                "masterNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool",
                    "description": "- (Required) Configuration of the master node pools.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry"
                    },
                    "description": "- (Optional) Allows the Karbon cluster to pull images of a list of private registries.\n"
                },
                "singleMasterConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig",
                    "description": "- (Optional) Configuration of a single master node. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "status": {
                    "type": "string"
                },
                "storageClassConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig",
                    "description": "- (Required) Storage class configuration attribute for defining the persistent volume attributes. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "version": {
                    "type": "string",
                    "description": "- (Required) K8s version of the cluster. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "waitTimeoutMinutes": {
                    "type": "integer",
                    "description": "- (Optional) Maximum wait time for the Karbon cluster to provision.\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "workerNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool"
                }
            },
            "required": [
                "cniConfig",
                "deploymentType",
                "etcdNodePool",
                "kubeapiServerIpv4Address",
                "masterNodePool",
                "name",
                "status",
                "storageClassConfig",
                "version",
                "workerNodePool"
            ],
            "inputProperties": {
                "activePassiveConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig",
                    "description": "- (Optional) The active passive mode uses the Virtual Router Redundancy Protocol (VRRP) protocol to provide high availability of the master. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "cniConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig",
                    "description": "- (Required) K8s cluster networking configuration. The flannel or the calico configuration needs to be provided. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "etcdNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool",
                    "description": "- (Required) Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.\n"
                },
                "externalLbConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig",
                    "description": "- (Optional) The external load balancer configuration in the case of a multi-master-external-load-balancer type master deployment. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "masterNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool",
                    "description": "- (Required) Configuration of the master node pools.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry"
                    },
                    "description": "- (Optional) Allows the Karbon cluster to pull images of a list of private registries.\n"
                },
                "singleMasterConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig",
                    "description": "- (Optional) Configuration of a single master node. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "storageClassConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig",
                    "description": "- (Required) Storage class configuration attribute for defining the persistent volume attributes. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "- (Required) K8s version of the cluster. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "waitTimeoutMinutes": {
                    "type": "integer",
                    "description": "- (Optional) Maximum wait time for the Karbon cluster to provision.\n",
                    "deprecationMessage": "use timeouts instead"
                },
                "workerNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool"
                }
            },
            "requiredInputs": [
                "cniConfig",
                "etcdNodePool",
                "masterNodePool",
                "storageClassConfig",
                "version",
                "workerNodePool"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KarbonCluster resources.\n",
                "properties": {
                    "activePassiveConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig",
                        "description": "- (Optional) The active passive mode uses the Virtual Router Redundancy Protocol (VRRP) protocol to provide high availability of the master. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "cniConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig",
                        "description": "- (Required) K8s cluster networking configuration. The flannel or the calico configuration needs to be provided. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "deploymentType": {
                        "type": "string"
                    },
                    "etcdNodePool": {
                        "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool",
                        "description": "- (Required) Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.\n"
                    },
                    "externalLbConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig",
                        "description": "- (Optional) The external load balancer configuration in the case of a multi-master-external-load-balancer type master deployment. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "kubeapiServerIpv4Address": {
                        "type": "string"
                    },
                    "masterNodePool": {
                        "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool",
                        "description": "- (Required) Configuration of the master node pools.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateRegistries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry"
                        },
                        "description": "- (Optional) Allows the Karbon cluster to pull images of a list of private registries.\n"
                    },
                    "singleMasterConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig",
                        "description": "- (Optional) Configuration of a single master node. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "storageClassConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig",
                        "description": "- (Required) Storage class configuration attribute for defining the persistent volume attributes. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "- (Required) K8s version of the cluster. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitTimeoutMinutes": {
                        "type": "integer",
                        "description": "- (Optional) Maximum wait time for the Karbon cluster to provision.\n",
                        "deprecationMessage": "use timeouts instead"
                    },
                    "workerNodePool": {
                        "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/karbonPrivateRegistry:KarbonPrivateRegistry": {
            "description": "Provides a Nutanix Karbon Registry resource to Create a private registry entry in Karbon.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst registries = nutanix.getKarbonPrivateRegistry({});\nconst registry = new nutanix.KarbonPrivateRegistry(\"registry\", {});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nregistries = nutanix.get_karbon_private_registry()\nregistry = nutanix.KarbonPrivateRegistry(\"registry\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var registries = Nutanix.GetKarbonPrivateRegistry.Invoke();\n\n    var registry = new Nutanix.KarbonPrivateRegistry(\"registry\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupKarbonPrivateRegistry(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewKarbonPrivateRegistry(ctx, \"registry\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetKarbonPrivateRegistryArgs;\nimport com.pulumi.nutanix.KarbonPrivateRegistry;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var registries = NutanixFunctions.getKarbonPrivateRegistry();\n\n        var registry = new KarbonPrivateRegistry(\"registry\");\n\n    }\n}\n```\n```yaml\nresources:\n  registry:\n    type: nutanix:KarbonPrivateRegistry\nvariables:\n  registries:\n    fn::invoke:\n      Function: nutanix:getKarbonPrivateRegistry\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "cert": {
                    "type": "string",
                    "description": "- (Optional) Certificate of the private registry in format of base64-encoded byte array. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "- Endpoint of the private in format `url:port`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the private registry configuration. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "password": {
                    "type": "string",
                    "description": "- (Optional) Password for authentication to the private registry. **Note:** Updates to this attribute forces new resource creation.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "- (Optional) Port of the private registry.\n"
                },
                "url": {
                    "type": "string",
                    "description": "- (Optional) URL of the private registry. **Note:** Updates to this attribute forces new resource creation.\n"
                },
                "username": {
                    "type": "string",
                    "description": "- (Optional) Username for authentication to the private registry. **Note:** Updates to this attribute forces new resource creation.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "url"
            ],
            "inputProperties": {
                "cert": {
                    "type": "string",
                    "description": "- (Optional) Certificate of the private registry in format of base64-encoded byte array. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the private registry configuration. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "- (Optional) Password for authentication to the private registry. **Note:** Updates to this attribute forces new resource creation.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "- (Optional) Port of the private registry.\n"
                },
                "url": {
                    "type": "string",
                    "description": "- (Optional) URL of the private registry. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "- (Optional) Username for authentication to the private registry. **Note:** Updates to this attribute forces new resource creation.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KarbonPrivateRegistry resources.\n",
                "properties": {
                    "cert": {
                        "type": "string",
                        "description": "- (Optional) Certificate of the private registry in format of base64-encoded byte array. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "- Endpoint of the private in format `url:port`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) Name of the private registry configuration. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "- (Optional) Password for authentication to the private registry. **Note:** Updates to this attribute forces new resource creation.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "- (Optional) Port of the private registry.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "- (Optional) URL of the private registry. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "- (Optional) Username for authentication to the private registry. **Note:** Updates to this attribute forces new resource creation.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool": {
            "properties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonWorkerNodepoolAhvConfig:KarbonWorkerNodepoolAhvConfig"
                },
                "clusterName": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nodeOsVersion": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonWorkerNodepoolNode:KarbonWorkerNodepoolNode"
                    }
                },
                "numInstances": {
                    "type": "integer"
                }
            },
            "required": [
                "ahvConfig",
                "clusterName",
                "labels",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "inputProperties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonWorkerNodepoolAhvConfig:KarbonWorkerNodepoolAhvConfig"
                },
                "clusterName": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nodeOsVersion": {
                    "type": "string"
                },
                "numInstances": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "clusterName",
                "numInstances"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KarbonWorkerNodepool resources.\n",
                "properties": {
                    "ahvConfig": {
                        "$ref": "#/types/nutanix:index/KarbonWorkerNodepoolAhvConfig:KarbonWorkerNodepoolAhvConfig"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeOsVersion": {
                        "type": "string"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/KarbonWorkerNodepoolNode:KarbonWorkerNodepoolNode"
                        }
                    },
                    "numInstances": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver": {
            "description": "Provides a resource to authorize db server VMs for cloning of database instance based on the input parameters. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbAuthorizeDbserver(\"name\", {\n    dbserversIds: [\"{{ dbServer_IDs}}\"],\n    timeMachineName: \"test-pg-inst\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbAuthorizeDbserver(\"name\",\n    dbservers_ids=[\"{{ dbServer_IDs}}\"],\n    time_machine_name=\"test-pg-inst\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbAuthorizeDbserver(\"name\", new()\n    {\n        DbserversIds = new[]\n        {\n            \"{{ dbServer_IDs}}\",\n        },\n        TimeMachineName = \"test-pg-inst\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbAuthorizeDbserver(ctx, \"name\", \u0026nutanix.NdbAuthorizeDbserverArgs{\n\t\t\tDbserversIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"{{ dbServer_IDs}}\"),\n\t\t\t},\n\t\t\tTimeMachineName: pulumi.String(\"test-pg-inst\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbAuthorizeDbserver;\nimport com.pulumi.nutanix.NdbAuthorizeDbserverArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbAuthorizeDbserver(\"name\", NdbAuthorizeDbserverArgs.builder()\n            .dbserversIds(\"{{ dbServer_IDs}}\")\n            .timeMachineName(\"test-pg-inst\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbAuthorizeDbserver\n    properties:\n      dbserversIds:\n        - '{{ dbServer_IDs}}'\n      timeMachineName: test-pg-inst\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "dbserversIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timeMachineName": {
                    "type": "string",
                    "description": "* `dbservers_id `: (Required)\n"
                }
            },
            "inputProperties": {
                "dbserversIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timeMachineName": {
                    "type": "string",
                    "description": "* `dbservers_id `: (Required)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbAuthorizeDbserver resources.\n",
                "properties": {
                    "dbserversIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "timeMachineName": {
                        "type": "string",
                        "description": "* `dbservers_id `: (Required)\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbClone:NdbClone": {
            "description": "Provides a resource to perform the clone of database instance based on the input parameters. \n\n## resource for cloning using Point in time given time machine name\n\n    resource \"nutanix.NdbClone\" \"name\" {\n        time_machine_name = \"test-pg-inst\"\n        name = \"test-inst-tf-check\"\n        nx_cluster_id = \"{{ nx_Cluster_id }}\"\n        ssh_public_key = \"{{ sshkey }}\"\n        user_pitr_timestamp=  \"{{ point_in_time }}\"\n        time_zone = \"Asia/Calcutta\"\n        create_dbserver = true\n        compute_profile_id = \"{{ compute_profile_id }}\"\n        network_profile_id =\"{{ network_profile_id }}\"\n        database_parameter_profile_id =  \"{{ databse_profile_id }}\"\n        nodes{\n            vm_name= \"test_vm_clone\"\n            compute_profile_id = \"{{ compute_profile_id }}\"\n            network_profile_id =\"{{ network_profile_id }}\"\n            nx_cluster_id = \"{{ nx_Cluster_id }}\"\n        }\n        postgresql_info{\n            vm_name=\"test_vm_clone\"\n            db_password= \"pass\"\n        }\n    }\n```\n",
            "properties": {
                "actionarguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneActionargument:NdbCloneActionargument"
                    },
                    "description": "if any action arguments is required\n"
                },
                "clone": {
                    "type": "boolean",
                    "description": "cloned or not\n"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clone will be clustered or not\n"
                },
                "computeProfileId": {
                    "type": "string",
                    "description": "specify the compute profile id\n"
                },
                "createDbserver": {
                    "type": "boolean",
                    "description": "create new dbserver\n"
                },
                "databaseClusterType": {
                    "type": "string",
                    "description": "database cluster type\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "database name\n"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneDatabaseNode:NdbCloneDatabaseNode"
                    },
                    "description": "database nodes associated with database instance\n"
                },
                "databaseParameterProfileId": {
                    "type": "string",
                    "description": "specify the database parameter profile id\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for clone\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "last modified date for clone\n"
                },
                "dbserverClusterId": {
                    "type": "string",
                    "description": "dbserver cluster id\n"
                },
                "dbserverId": {
                    "type": "string",
                    "description": "Specify if you want to create a database server. This value can be set to true or false as required.\n"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "dbserver logical cluster\n"
                },
                "dbserverLogicalClusterId": {
                    "type": "string",
                    "description": "dbserver logical cluster id\n"
                },
                "delete": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database clone from the VM. Default value is true\n"
                },
                "deleteLogicalCluster": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the logical cluster. Default is true\n"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "forced": {
                    "type": "boolean",
                    "description": "- (Optional) Force delete of instance. Default is false\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneInfo:NdbCloneInfo"
                    },
                    "description": "info of clone\n"
                },
                "latestSnapshot": {
                    "type": "boolean",
                    "description": "latest snapshot\n"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneLcmConfig:NdbCloneLcmConfig"
                    },
                    "description": "LCM Config contains the expiry details and refresh details\n"
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneLinkedDatabase:NdbCloneLinkedDatabase"
                    },
                    "description": "linked databases within database instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "networkProfileId": {
                    "type": "string",
                    "description": "specify the network profile id\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "Node count. Default is 1 for single instance\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneNode:NdbCloneNode"
                    },
                    "description": "Nodes contain info about dbservers vm\n"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "cluster id on where clone will be present\n"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "postgresqlInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClonePostgresqlInfo:NdbClonePostgresqlInfo"
                    },
                    "description": "postgresql info for the clone\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneProperty:NdbCloneProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "remove": {
                    "type": "boolean",
                    "description": "- (Optional) Unregister the database clone from NDB. Default value is false\n"
                },
                "removeLogicalCluster": {
                    "type": "boolean",
                    "description": "remove logical cluster. Default value is false\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id from where clone is created\n"
                },
                "softRemove": {
                    "type": "boolean",
                    "description": "- (Optional) Soft remove. Default will be false\n"
                },
                "sshPublicKey": {
                    "type": "string",
                    "description": "ssh public key\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "status of clone\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTag:NdbCloneTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "time machine id\n"
                },
                "timeMachineName": {
                    "type": "string",
                    "description": "time machine name\n"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTimeMachine:NdbCloneTimeMachine"
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of clone\n"
                },
                "userPitrTimestamp": {
                    "type": "string",
                    "description": "point in time for clone to be created\n"
                },
                "vmPassword": {
                    "type": "string",
                    "description": "vm password\n",
                    "secret": true
                }
            },
            "required": [
                "clone",
                "databaseClusterType",
                "databaseName",
                "databaseNodes",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "infos",
                "linkedDatabases",
                "metric",
                "name",
                "nodes",
                "nxClusterId",
                "parentDatabaseId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeZone",
                "type"
            ],
            "inputProperties": {
                "actionarguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneActionargument:NdbCloneActionargument"
                    },
                    "description": "if any action arguments is required\n"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clone will be clustered or not\n"
                },
                "computeProfileId": {
                    "type": "string",
                    "description": "specify the compute profile id\n"
                },
                "createDbserver": {
                    "type": "boolean",
                    "description": "create new dbserver\n"
                },
                "databaseParameterProfileId": {
                    "type": "string",
                    "description": "specify the database parameter profile id\n"
                },
                "dbserverClusterId": {
                    "type": "string",
                    "description": "dbserver cluster id\n"
                },
                "dbserverId": {
                    "type": "string",
                    "description": "Specify if you want to create a database server. This value can be set to true or false as required.\n"
                },
                "dbserverLogicalClusterId": {
                    "type": "string",
                    "description": "dbserver logical cluster id\n"
                },
                "delete": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database clone from the VM. Default value is true\n"
                },
                "deleteLogicalCluster": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the logical cluster. Default is true\n"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "description": {
                    "type": "string",
                    "description": "database instance description\n"
                },
                "forced": {
                    "type": "boolean",
                    "description": "- (Optional) Force delete of instance. Default is false\n"
                },
                "latestSnapshot": {
                    "type": "boolean",
                    "description": "latest snapshot\n"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneLcmConfig:NdbCloneLcmConfig"
                    },
                    "description": "LCM Config contains the expiry details and refresh details\n"
                },
                "name": {
                    "type": "string",
                    "description": "database instance name\n"
                },
                "networkProfileId": {
                    "type": "string",
                    "description": "specify the network profile id\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "Node count. Default is 1 for single instance\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneNode:NdbCloneNode"
                    },
                    "description": "Nodes contain info about dbservers vm\n"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "cluster id on where clone will be present\n"
                },
                "postgresqlInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClonePostgresqlInfo:NdbClonePostgresqlInfo"
                    },
                    "description": "postgresql info for the clone\n"
                },
                "remove": {
                    "type": "boolean",
                    "description": "- (Optional) Unregister the database clone from NDB. Default value is false\n"
                },
                "removeLogicalCluster": {
                    "type": "boolean",
                    "description": "remove logical cluster. Default value is false\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id from where clone is created\n"
                },
                "softRemove": {
                    "type": "boolean",
                    "description": "- (Optional) Soft remove. Default will be false\n"
                },
                "sshPublicKey": {
                    "type": "string",
                    "description": "ssh public key\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbCloneTag:NdbCloneTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "time machine id\n"
                },
                "timeMachineName": {
                    "type": "string",
                    "description": "time machine name\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone\n"
                },
                "userPitrTimestamp": {
                    "type": "string",
                    "description": "point in time for clone to be created\n"
                },
                "vmPassword": {
                    "type": "string",
                    "description": "vm password\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "nodes",
                "nxClusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbClone resources.\n",
                "properties": {
                    "actionarguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneActionargument:NdbCloneActionargument"
                        },
                        "description": "if any action arguments is required\n"
                    },
                    "clone": {
                        "type": "boolean",
                        "description": "cloned or not\n"
                    },
                    "clustered": {
                        "type": "boolean",
                        "description": "clone will be clustered or not\n"
                    },
                    "computeProfileId": {
                        "type": "string",
                        "description": "specify the compute profile id\n"
                    },
                    "createDbserver": {
                        "type": "boolean",
                        "description": "create new dbserver\n"
                    },
                    "databaseClusterType": {
                        "type": "string",
                        "description": "database cluster type\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "database name\n"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneDatabaseNode:NdbCloneDatabaseNode"
                        },
                        "description": "database nodes associated with database instance\n"
                    },
                    "databaseParameterProfileId": {
                        "type": "string",
                        "description": "specify the database parameter profile id\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "date created for clone\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "last modified date for clone\n"
                    },
                    "dbserverClusterId": {
                        "type": "string",
                        "description": "dbserver cluster id\n"
                    },
                    "dbserverId": {
                        "type": "string",
                        "description": "Specify if you want to create a database server. This value can be set to true or false as required.\n"
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "dbserver logical cluster\n"
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string",
                        "description": "dbserver logical cluster id\n"
                    },
                    "delete": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the database clone from the VM. Default value is true\n"
                    },
                    "deleteLogicalCluster": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the logical cluster. Default is true\n"
                    },
                    "deleteTimeMachine": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "database instance description\n"
                    },
                    "forced": {
                        "type": "boolean",
                        "description": "- (Optional) Force delete of instance. Default is false\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneInfo:NdbCloneInfo"
                        },
                        "description": "info of clone\n"
                    },
                    "latestSnapshot": {
                        "type": "boolean",
                        "description": "latest snapshot\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneLcmConfig:NdbCloneLcmConfig"
                        },
                        "description": "LCM Config contains the expiry details and refresh details\n"
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneLinkedDatabase:NdbCloneLinkedDatabase"
                        },
                        "description": "linked databases within database instance\n"
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "database instance name\n"
                    },
                    "networkProfileId": {
                        "type": "string",
                        "description": "specify the network profile id\n"
                    },
                    "nodeCount": {
                        "type": "integer",
                        "description": "Node count. Default is 1 for single instance\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneNode:NdbCloneNode"
                        },
                        "description": "Nodes contain info about dbservers vm\n"
                    },
                    "nxClusterId": {
                        "type": "string",
                        "description": "cluster id on where clone will be present\n"
                    },
                    "parentDatabaseId": {
                        "type": "string"
                    },
                    "postgresqlInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbClonePostgresqlInfo:NdbClonePostgresqlInfo"
                        },
                        "description": "postgresql info for the clone\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneProperty:NdbCloneProperty"
                        },
                        "description": "List of all the properties\n"
                    },
                    "remove": {
                        "type": "boolean",
                        "description": "- (Optional) Unregister the database clone from NDB. Default value is false\n"
                    },
                    "removeLogicalCluster": {
                        "type": "boolean",
                        "description": "remove logical cluster. Default value is false\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "snapshot id from where clone is created\n"
                    },
                    "softRemove": {
                        "type": "boolean",
                        "description": "- (Optional) Soft remove. Default will be false\n"
                    },
                    "sshPublicKey": {
                        "type": "string",
                        "description": "ssh public key\n",
                        "secret": true
                    },
                    "status": {
                        "type": "string",
                        "description": "status of clone\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneTag:NdbCloneTag"
                        },
                        "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "time machine id\n"
                    },
                    "timeMachineName": {
                        "type": "string",
                        "description": "time machine name\n"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbCloneTimeMachine:NdbCloneTimeMachine"
                        }
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "timezone\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of clone\n"
                    },
                    "userPitrTimestamp": {
                        "type": "string",
                        "description": "point in time for clone to be created\n"
                    },
                    "vmPassword": {
                        "type": "string",
                        "description": "vm password\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbCloneRefresh:NdbCloneRefresh": {
            "description": "Provides a resource to perform the refresh clone of database based on the input parameters. \n\n## Example Usage\n\n### resource to refresh clone with snapshot id\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst acctest_managed = new nutanix.NdbCloneRefresh(\"acctest-managed\", {\n    cloneId: \"{{ clone_id }}\",\n    snapshotId: \"{{ snapshot_id }}\",\n    timezone: \"Asia/Calcutta\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nacctest_managed = nutanix.NdbCloneRefresh(\"acctest-managed\",\n    clone_id=\"{{ clone_id }}\",\n    snapshot_id=\"{{ snapshot_id }}\",\n    timezone=\"Asia/Calcutta\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acctest_managed = new Nutanix.NdbCloneRefresh(\"acctest-managed\", new()\n    {\n        CloneId = \"{{ clone_id }}\",\n        SnapshotId = \"{{ snapshot_id }}\",\n        Timezone = \"Asia/Calcutta\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbCloneRefresh(ctx, \"acctest-managed\", \u0026nutanix.NdbCloneRefreshArgs{\n\t\t\tCloneId:    pulumi.String(\"{{ clone_id }}\"),\n\t\t\tSnapshotId: pulumi.String(\"{{ snapshot_id }}\"),\n\t\t\tTimezone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbCloneRefresh;\nimport com.pulumi.nutanix.NdbCloneRefreshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var acctest_managed = new NdbCloneRefresh(\"acctest-managed\", NdbCloneRefreshArgs.builder()\n            .cloneId(\"{{ clone_id }}\")\n            .snapshotId(\"{{ snapshot_id }}\")\n            .timezone(\"Asia/Calcutta\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acctest-managed:\n    type: nutanix:NdbCloneRefresh\n    properties:\n      cloneId: '{{ clone_id }}'\n      snapshotId: '{{ snapshot_id }}'\n      timezone: Asia/Calcutta\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### resource to refresh clone with user pitr timestamp\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  acctest-managed:\n    type: nutanix:NdbCloneRefresh\n    properties:\n      cloneId: '{{ clone_id }}'\n      timezone: Asia/Calcutta\n      userPitrStamp: '{{ timestamp }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "cloneId": {
                    "type": "string",
                    "description": "clone id\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id where clone has to be refreshed\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone. Default is Asia/Calcutta. \n\nSee detailed information in [NDB Clone Refresh](https://www.nutanix.dev/api_references/ndb/#/d4e53fff274fa-start-refresh-operation-for-the-given-clone).\n"
                },
                "userPitrTimestamp": {
                    "type": "string"
                }
            },
            "required": [
                "cloneId"
            ],
            "inputProperties": {
                "cloneId": {
                    "type": "string",
                    "description": "clone id\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id where clone has to be refreshed\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone. Default is Asia/Calcutta. \n\nSee detailed information in [NDB Clone Refresh](https://www.nutanix.dev/api_references/ndb/#/d4e53fff274fa-start-refresh-operation-for-the-given-clone).\n"
                },
                "userPitrTimestamp": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "cloneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbCloneRefresh resources.\n",
                "properties": {
                    "cloneId": {
                        "type": "string",
                        "description": "clone id\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "snapshot id where clone has to be refreshed\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "timezone. Default is Asia/Calcutta. \n\nSee detailed information in [NDB Clone Refresh](https://www.nutanix.dev/api_references/ndb/#/d4e53fff274fa-start-refresh-operation-for-the-given-clone).\n"
                    },
                    "userPitrTimestamp": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbCluster:NdbCluster": {
            "description": "Provides a resource to add a Nutanix cluster based on the input parameters. \n\n",
            "properties": {
                "agentNetworkInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterAgentNetworkInfo:NdbClusterAgentNetworkInfo"
                    },
                    "description": "agent network info to register cluster\n"
                },
                "agentVmPrefix": {
                    "type": "string"
                },
                "cloudInfo": {
                    "type": "string",
                    "description": "- cloud info\n"
                },
                "cloudType": {
                    "type": "string",
                    "description": "- cloud type\n"
                },
                "clusterIp": {
                    "type": "string",
                    "description": "Prism Element IP address\n"
                },
                "clusterType": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "- creation date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "- date modified\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of cluster\n"
                },
                "entityCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterEntityCount:NdbClusterEntityCount"
                    },
                    "description": "- no. of entities related\n"
                },
                "fqdns": {
                    "type": "string",
                    "description": "- fqdn\n"
                },
                "healthy": {
                    "type": "boolean",
                    "description": "- if healthy status\n"
                },
                "hypervisorType": {
                    "type": "string",
                    "description": "- hypervisor type\n"
                },
                "hypervisorVersion": {
                    "type": "string",
                    "description": "- hypervisor version\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- IP address\n"
                },
                "managementServerInfo": {
                    "type": "string",
                    "description": "- NA\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the cluster to be registered\n"
                },
                "networksInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterNetworksInfo:NdbClusterNetworksInfo"
                    },
                    "description": "network segmentation to segment the network traffic of the agent VM.\n"
                },
                "nxClusterUuid": {
                    "type": "string",
                    "description": "- nutanix cluster uuid\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "- owner UUID\n"
                },
                "password": {
                    "type": "string",
                    "description": "Prism Element password\n",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterProperty:NdbClusterProperty"
                    },
                    "description": "- list of properties\n"
                },
                "protocol": {
                    "type": "string"
                },
                "referenceCount": {
                    "type": "integer",
                    "description": "- NA\n"
                },
                "resourceConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterResourceConfig:NdbClusterResourceConfig"
                    },
                    "description": "- resource related consumption info\n"
                },
                "status": {
                    "type": "string",
                    "description": "- current status\n"
                },
                "storageContainer": {
                    "type": "string",
                    "description": "select a storage container which is used for performing database operations in the cluster\n"
                },
                "uniqueName": {
                    "type": "string",
                    "description": "- unique name of cluster\n"
                },
                "username": {
                    "type": "string",
                    "description": "username of the Prism Element administrator\n"
                },
                "version": {
                    "type": "string",
                    "description": "- version\n"
                }
            },
            "required": [
                "agentNetworkInfos",
                "cloudInfo",
                "cloudType",
                "clusterIp",
                "dateCreated",
                "dateModified",
                "entityCounts",
                "fqdns",
                "healthy",
                "hypervisorType",
                "hypervisorVersion",
                "ipAddresses",
                "managementServerInfo",
                "name",
                "networksInfos",
                "nxClusterUuid",
                "ownerId",
                "password",
                "properties",
                "referenceCount",
                "resourceConfigs",
                "status",
                "storageContainer",
                "uniqueName",
                "username"
            ],
            "inputProperties": {
                "agentNetworkInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterAgentNetworkInfo:NdbClusterAgentNetworkInfo"
                    },
                    "description": "agent network info to register cluster\n"
                },
                "agentVmPrefix": {
                    "type": "string"
                },
                "clusterIp": {
                    "type": "string",
                    "description": "Prism Element IP address\n"
                },
                "clusterType": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "description of cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the cluster to be registered\n"
                },
                "networksInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbClusterNetworksInfo:NdbClusterNetworksInfo"
                    },
                    "description": "network segmentation to segment the network traffic of the agent VM.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Prism Element password\n",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "storageContainer": {
                    "type": "string",
                    "description": "select a storage container which is used for performing database operations in the cluster\n"
                },
                "username": {
                    "type": "string",
                    "description": "username of the Prism Element administrator\n"
                },
                "version": {
                    "type": "string",
                    "description": "- version\n"
                }
            },
            "requiredInputs": [
                "agentNetworkInfos",
                "clusterIp",
                "networksInfos",
                "password",
                "storageContainer",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbCluster resources.\n",
                "properties": {
                    "agentNetworkInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbClusterAgentNetworkInfo:NdbClusterAgentNetworkInfo"
                        },
                        "description": "agent network info to register cluster\n"
                    },
                    "agentVmPrefix": {
                        "type": "string"
                    },
                    "cloudInfo": {
                        "type": "string",
                        "description": "- cloud info\n"
                    },
                    "cloudType": {
                        "type": "string",
                        "description": "- cloud type\n"
                    },
                    "clusterIp": {
                        "type": "string",
                        "description": "Prism Element IP address\n"
                    },
                    "clusterType": {
                        "type": "string"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "- creation date\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "- date modified\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of cluster\n"
                    },
                    "entityCounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbClusterEntityCount:NdbClusterEntityCount"
                        },
                        "description": "- no. of entities related\n"
                    },
                    "fqdns": {
                        "type": "string",
                        "description": "- fqdn\n"
                    },
                    "healthy": {
                        "type": "boolean",
                        "description": "- if healthy status\n"
                    },
                    "hypervisorType": {
                        "type": "string",
                        "description": "- hypervisor type\n"
                    },
                    "hypervisorVersion": {
                        "type": "string",
                        "description": "- hypervisor version\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- IP address\n"
                    },
                    "managementServerInfo": {
                        "type": "string",
                        "description": "- NA\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the cluster to be registered\n"
                    },
                    "networksInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbClusterNetworksInfo:NdbClusterNetworksInfo"
                        },
                        "description": "network segmentation to segment the network traffic of the agent VM.\n"
                    },
                    "nxClusterUuid": {
                        "type": "string",
                        "description": "- nutanix cluster uuid\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "- owner UUID\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Prism Element password\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbClusterProperty:NdbClusterProperty"
                        },
                        "description": "- list of properties\n"
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "referenceCount": {
                        "type": "integer",
                        "description": "- NA\n"
                    },
                    "resourceConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbClusterResourceConfig:NdbClusterResourceConfig"
                        },
                        "description": "- resource related consumption info\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "- current status\n"
                    },
                    "storageContainer": {
                        "type": "string",
                        "description": "select a storage container which is used for performing database operations in the cluster\n"
                    },
                    "uniqueName": {
                        "type": "string",
                        "description": "- unique name of cluster\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "username of the Prism Element administrator\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "- version\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbDatabase:NdbDatabase": {
            "description": "Provides a resource to create database instance based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.\n\n## Example Usage\n\n### NDB database resource with new database server VM\n\n``` hcl\nresource \"nutanix_ndb_database\" \"dbp\" {\n\n    // name of database type\n    databasetype = \"postgres_database\"\n\n    // required name of db instance\n    name = \"test-inst\"\n    description = \"add description\"\n\n    // adding the profiles details\n    softwareprofileid = \"{{ software_profile_id }}\"\n    softwareprofileversionid =  \"{{ software_profile_version_id }}\"\n    computeprofileid =  \"{{ compute_profile_id }}\"\n    networkprofileid = \"{{ network_profile_id }}\"\n    dbparameterprofileid = \"{{ db_parameter_profile_id }}\"\n\n    // postgreSQL Info\n    postgresql_info{\n        listener_port = \"{{ listner_port }}\"\n\n        database_size= \"{{ 200 }}\"\n\n        db_password =  \"password\"\n\n        database_names= \"testdb1\"\n    }\n\n    // era cluster id\n    nxclusterid= local.clusters.EraCluster.id\n\n    // ssh-key\n    sshpublickey= \"{{ ssh-public-key }}\"\n\n    // node for single instance\n    nodes{\n        // name of dbserver vm \n        vmname= \"test-era-vm1\"\n\n        // network profile id\n        networkprofileid= \"\u003cnetwork-profile-uuid\u003e\"\n    }\n\n    // time machine info \n    timemachineinfo {\n        name= \"test-pg-inst\"\n        description=\"description of time machine\"\n        slaid= \"{{ sla_id }}\"\n\n        // schedule info fields are optional.\n        schedule {\n            snapshottimeofday{\n                hours= 16\n                minutes= 0\n                seconds= 0\n            }\n            continuousschedule{\n                enabled=true\n                logbackupinterval= 30\n                snapshotsperday=1\n            }\n            weeklyschedule{\n                enabled=true\n                dayofweek= \"WEDNESDAY\"\n            }\n            monthlyschedule{\n                enabled = true\n                dayofmonth= \"27\"\n            }\n            quartelyschedule{\n                enabled=true\n                startmonth=\"JANUARY\"\n                dayofmonth= 27\n            }\n            yearlyschedule{\n                enabled= false\n                dayofmonth= 31\n                month=\"DECEMBER\"\n            }\n        }\n    }\n}\n```\n\n\n### NDB database resource to provision HA instance with new database server VM\n\n``` hcl\nresource \"nutanix_ndb_database\" \"dbp\" {\n    databasetype = \"postgres_database\"\n    name = \"test-pg-inst-HA-tf\"\n    description = \"adding description\"\n\n    // adding the profiles details\n    softwareprofileid = \"{{ software_profile_id }}\"\n    softwareprofileversionid =  \"{{ software_profile_version_id }}\"\n    computeprofileid =  \"{{ compute_profile_id }}\"\n    networkprofileid = \"{{ network_profile_id }}\"\n    dbparameterprofileid = \"{{ db_parameter_profile_id }}\"\n\n    // required for HA instance\n    createdbserver = true\n    clustered = true\n\n    // node count (with haproxy server node)\n    nodecount= 4 \n\n    // min required details for provisioning HA instance\n    postgresql_info{\n      listener_port = \"5432\"\n\n      database_size= \"200\"\n\n      db_password =  \"{{ database password}}\"\n\n      database_names= \"testdb1\"\n\n      ha_instance{\n      proxy_read_port= \"5001\"\n\n      proxy_write_port = \"5000\"\n\n      cluster_name= \"{{ cluster_name }}\"\n\n      patroni_cluster_name = \" {{ patroni_cluster_name }}\"\n      }\n    }\n  \n  nxclusterid= \"1c42ca25-32f4-42d9-a2bd-6a21f925b725\"\n  sshpublickey= \"{{ ssh_public_key }}\"\n  \n  // nodes are required.\n\n  // HA proxy node \n  nodes{\n    properties{\n      name =  \"node_type\"\n      value = \"haproxy\"\n    }\n    vmname =  \"{{ vm name }}\"\n    nx_cluster_id =  \"{{ nx_cluster_id }}\"\n  }\n\n  // Primary node for read/write ops\n  nodes{\n    properties{\n      name= \"role\"\n      value=  \"Primary\"\n    }\n    properties{\n      name= \"failover_mode\"\n      value=  \"Automatic\"\n    }\n    properties{\n      name= \"node_type\"\n      value=  \"database\"\n    }\n\n    vmname = \"{{ name of vm }}\"\n    networkprofileid=\"{{ network_profile_id }}\"\n    computeprofileid= \"{{ compute_profile_id }}\"\n    nx_cluster_id=  \"{{ nx_cluster_id }}\"\n  }\n\n  // secondary nodes for read ops\n  nodes{\n    properties{\n      name= \"role\"\n      value=  \"Secondary\"\n    }\n    properties{\n      name= \"failover_mode\"\n      value=  \"Automatic\"\n    }\n    properties{\n      name= \"node_type\"\n      value=  \"database\"\n    }\n    vmname = \"{{ name of vm }}\"\n    networkprofileid=\"{{ network_profile_id }}\"\n    computeprofileid= \"{{ compute_profile_id }}\"\n    nx_cluster_id=  \"{{ nx_cluster_id }}\"\n  }\n  nodes{\n    properties{\n      name= \"role\"\n      value=  \"Secondary\"\n    }\n    properties{\n      name= \"failover_mode\"\n      value=  \"Automatic\"\n    }\n    properties{\n      name= \"node_type\"\n      value=  \"database\"\n    }\n    \n    vmname = \"{{ name of vm }}\"\n    networkprofileid=\"{{ network_profile_id }}\"\n    computeprofileid= \"{{ compute_profile_id }}\"\n    nx_cluster_id=  \"{{ nx_cluster_id }}\"\n  }\n\n  // time machine required \n  timemachineinfo {\n    name= \"test-pg-inst-HA\"\n    description=\"\"\n    sla_details{\n      primary_sla{\n        sla_id= \"{{ required SLA}}0\"\n        nx_cluster_ids=  [\n          \"{{ nx_cluster_id}}\"\n        ]\n      }\n    }\n    // schedule fields are optional\n    schedule {\n      snapshottimeofday{\n        hours= 16\n        minutes= 0\n        seconds= 0\n      }\n      continuousschedule{\n        enabled=true\n        logbackupinterval= 30\n        snapshotsperday=1\n      }\n      weeklyschedule{\n        enabled=true\n        dayofweek= \"WEDNESDAY\"\n      }\n      monthlyschedule{\n        enabled = true\n        dayofmonth= \"27\"\n      }\n      quartelyschedule{\n        enabled=true\n        startmonth=\"JANUARY\"\n        dayofmonth= 27\n      }\n      yearlyschedule{\n        enabled= false\n        dayofmonth= 31\n        month=\"DECEMBER\"\n      }\n    }\n  }\n  \n  vm_password= \"{{ vm_password}}\"\n  autotunestagingdrive= true\n}\n```\n\n### NDB database resource with registered database server VM\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst dbp = new nutanix.NdbDatabase(\"dbp\", {\n    actionarguments: [{\n        name: \"host_ip\",\n        value: \"{{ hostIP }}\",\n    }],\n    createdbserver: false,\n    databasetype: \"postgres_database\",\n    dbparameterprofileid: \"{{ db_parameter_profile_id }}\",\n    dbserverId: \"{{ dbserver_id }}\",\n    description: \"add description\",\n    nodes: [{\n        dbserverid: \"{{ dbserver_id }}\",\n    }],\n    postgresqlInfo: {\n        databaseNames: \"testdb1\",\n        databaseSize: \"{{ 200 }}\",\n        dbPassword: \"password\",\n        listenerPort: \"{{ listner_port }}\",\n    },\n    timemachineinfo: {\n        description: \"description of time machine\",\n        name: \"test-pg-inst\",\n        schedule: {\n            continuousschedule: {\n                enabled: true,\n                logbackupinterval: 30,\n                snapshotsperday: 1,\n            },\n            monthlyschedule: {\n                dayofmonth: 27,\n                enabled: true,\n            },\n            quartelyschedule: {\n                dayofmonth: 27,\n                enabled: true,\n                startmonth: \"JANUARY\",\n            },\n            snapshottimeofday: {\n                hours: 16,\n                minutes: 0,\n                seconds: 0,\n            },\n            weeklyschedule: {\n                dayofweek: \"WEDNESDAY\",\n                enabled: true,\n            },\n            yearlyschedule: {\n                dayofmonth: 31,\n                enabled: false,\n                month: \"DECEMBER\",\n            },\n        },\n        slaid: \"{{ sla_id }}\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ndbp = nutanix.NdbDatabase(\"dbp\",\n    actionarguments=[nutanix.NdbDatabaseActionargumentArgs(\n        name=\"host_ip\",\n        value=\"{{ hostIP }}\",\n    )],\n    createdbserver=False,\n    databasetype=\"postgres_database\",\n    dbparameterprofileid=\"{{ db_parameter_profile_id }}\",\n    dbserver_id=\"{{ dbserver_id }}\",\n    description=\"add description\",\n    nodes=[nutanix.NdbDatabaseNodeArgs(\n        dbserverid=\"{{ dbserver_id }}\",\n    )],\n    postgresql_info=nutanix.NdbDatabasePostgresqlInfoArgs(\n        database_names=\"testdb1\",\n        database_size=\"{{ 200 }}\",\n        db_password=\"password\",\n        listener_port=\"{{ listner_port }}\",\n    ),\n    timemachineinfo=nutanix.NdbDatabaseTimemachineinfoArgs(\n        description=\"description of time machine\",\n        name=\"test-pg-inst\",\n        schedule=nutanix.NdbDatabaseTimemachineinfoScheduleArgs(\n            continuousschedule=nutanix.NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs(\n                enabled=True,\n                logbackupinterval=30,\n                snapshotsperday=1,\n            ),\n            monthlyschedule=nutanix.NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs(\n                dayofmonth=27,\n                enabled=True,\n            ),\n            quartelyschedule=nutanix.NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs(\n                dayofmonth=27,\n                enabled=True,\n                startmonth=\"JANUARY\",\n            ),\n            snapshottimeofday=nutanix.NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs(\n                hours=16,\n                minutes=0,\n                seconds=0,\n            ),\n            weeklyschedule=nutanix.NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs(\n                dayofweek=\"WEDNESDAY\",\n                enabled=True,\n            ),\n            yearlyschedule=nutanix.NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs(\n                dayofmonth=31,\n                enabled=False,\n                month=\"DECEMBER\",\n            ),\n        ),\n        slaid=\"{{ sla_id }}\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbp = new Nutanix.NdbDatabase(\"dbp\", new()\n    {\n        Actionarguments = new[]\n        {\n            new Nutanix.Inputs.NdbDatabaseActionargumentArgs\n            {\n                Name = \"host_ip\",\n                Value = \"{{ hostIP }}\",\n            },\n        },\n        Createdbserver = false,\n        Databasetype = \"postgres_database\",\n        Dbparameterprofileid = \"{{ db_parameter_profile_id }}\",\n        DbserverId = \"{{ dbserver_id }}\",\n        Description = \"add description\",\n        Nodes = new[]\n        {\n            new Nutanix.Inputs.NdbDatabaseNodeArgs\n            {\n                Dbserverid = \"{{ dbserver_id }}\",\n            },\n        },\n        PostgresqlInfo = new Nutanix.Inputs.NdbDatabasePostgresqlInfoArgs\n        {\n            DatabaseNames = \"testdb1\",\n            DatabaseSize = \"{{ 200 }}\",\n            DbPassword = \"password\",\n            ListenerPort = \"{{ listner_port }}\",\n        },\n        Timemachineinfo = new Nutanix.Inputs.NdbDatabaseTimemachineinfoArgs\n        {\n            Description = \"description of time machine\",\n            Name = \"test-pg-inst\",\n            Schedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleArgs\n            {\n                Continuousschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs\n                {\n                    Enabled = true,\n                    Logbackupinterval = 30,\n                    Snapshotsperday = 1,\n                },\n                Monthlyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs\n                {\n                    Dayofmonth = 27,\n                    Enabled = true,\n                },\n                Quartelyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs\n                {\n                    Dayofmonth = 27,\n                    Enabled = true,\n                    Startmonth = \"JANUARY\",\n                },\n                Snapshottimeofday = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs\n                {\n                    Hours = 16,\n                    Minutes = 0,\n                    Seconds = 0,\n                },\n                Weeklyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs\n                {\n                    Dayofweek = \"WEDNESDAY\",\n                    Enabled = true,\n                },\n                Yearlyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs\n                {\n                    Dayofmonth = 31,\n                    Enabled = false,\n                    Month = \"DECEMBER\",\n                },\n            },\n            Slaid = \"{{ sla_id }}\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbDatabase(ctx, \"dbp\", \u0026nutanix.NdbDatabaseArgs{\n\t\t\tActionarguments: nutanix.NdbDatabaseActionargumentArray{\n\t\t\t\t\u0026nutanix.NdbDatabaseActionargumentArgs{\n\t\t\t\t\tName:  pulumi.String(\"host_ip\"),\n\t\t\t\t\tValue: pulumi.String(\"{{ hostIP }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCreatedbserver:       pulumi.Bool(false),\n\t\t\tDatabasetype:         pulumi.String(\"postgres_database\"),\n\t\t\tDbparameterprofileid: pulumi.String(\"{{ db_parameter_profile_id }}\"),\n\t\t\tDbserverId:           pulumi.String(\"{{ dbserver_id }}\"),\n\t\t\tDescription:          pulumi.String(\"add description\"),\n\t\t\tNodes: nutanix.NdbDatabaseNodeArray{\n\t\t\t\t\u0026nutanix.NdbDatabaseNodeArgs{\n\t\t\t\t\tDbserverid: pulumi.String(\"{{ dbserver_id }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPostgresqlInfo: \u0026nutanix.NdbDatabasePostgresqlInfoArgs{\n\t\t\t\tDatabaseNames: pulumi.String(\"testdb1\"),\n\t\t\t\tDatabaseSize:  pulumi.String(\"{{ 200 }}\"),\n\t\t\t\tDbPassword:    pulumi.String(\"password\"),\n\t\t\t\tListenerPort:  pulumi.String(\"{{ listner_port }}\"),\n\t\t\t},\n\t\t\tTimemachineinfo: \u0026nutanix.NdbDatabaseTimemachineinfoArgs{\n\t\t\t\tDescription: pulumi.String(\"description of time machine\"),\n\t\t\t\tName:        pulumi.String(\"test-pg-inst\"),\n\t\t\t\tSchedule: \u0026nutanix.NdbDatabaseTimemachineinfoScheduleArgs{\n\t\t\t\t\tContinuousschedule: \u0026nutanix.NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs{\n\t\t\t\t\t\tEnabled:           pulumi.Bool(true),\n\t\t\t\t\t\tLogbackupinterval: pulumi.Int(30),\n\t\t\t\t\t\tSnapshotsperday:   pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t\tMonthlyschedule: \u0026nutanix.NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs{\n\t\t\t\t\t\tDayofmonth: pulumi.Int(27),\n\t\t\t\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t\tQuartelyschedule: \u0026nutanix.NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs{\n\t\t\t\t\t\tDayofmonth: pulumi.Int(27),\n\t\t\t\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\t\t\t\tStartmonth: pulumi.String(\"JANUARY\"),\n\t\t\t\t\t},\n\t\t\t\t\tSnapshottimeofday: \u0026nutanix.NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs{\n\t\t\t\t\t\tHours:   pulumi.Int(16),\n\t\t\t\t\t\tMinutes: pulumi.Int(0),\n\t\t\t\t\t\tSeconds: pulumi.Int(0),\n\t\t\t\t\t},\n\t\t\t\t\tWeeklyschedule: \u0026nutanix.NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs{\n\t\t\t\t\t\tDayofweek: pulumi.String(\"WEDNESDAY\"),\n\t\t\t\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t\tYearlyschedule: \u0026nutanix.NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs{\n\t\t\t\t\t\tDayofmonth: pulumi.Int(31),\n\t\t\t\t\t\tEnabled:    pulumi.Bool(false),\n\t\t\t\t\t\tMonth:      pulumi.String(\"DECEMBER\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSlaid: pulumi.String(\"{{ sla_id }}\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbDatabase;\nimport com.pulumi.nutanix.NdbDatabaseArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseActionargumentArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseNodeArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabasePostgresqlInfoArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoScheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbp = new NdbDatabase(\"dbp\", NdbDatabaseArgs.builder()\n            .actionarguments(NdbDatabaseActionargumentArgs.builder()\n                .name(\"host_ip\")\n                .value(\"{{ hostIP }}\")\n                .build())\n            .createdbserver(false)\n            .databasetype(\"postgres_database\")\n            .dbparameterprofileid(\"{{ db_parameter_profile_id }}\")\n            .dbserverId(\"{{ dbserver_id }}\")\n            .description(\"add description\")\n            .nodes(NdbDatabaseNodeArgs.builder()\n                .dbserverid(\"{{ dbserver_id }}\")\n                .build())\n            .postgresqlInfo(NdbDatabasePostgresqlInfoArgs.builder()\n                .databaseNames(\"testdb1\")\n                .databaseSize(\"{{ 200 }}\")\n                .dbPassword(\"password\")\n                .listenerPort(\"{{ listner_port }}\")\n                .build())\n            .timemachineinfo(NdbDatabaseTimemachineinfoArgs.builder()\n                .description(\"description of time machine\")\n                .name(\"test-pg-inst\")\n                .schedule(NdbDatabaseTimemachineinfoScheduleArgs.builder()\n                    .continuousschedule(NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs.builder()\n                        .enabled(true)\n                        .logbackupinterval(30)\n                        .snapshotsperday(1)\n                        .build())\n                    .monthlyschedule(NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs.builder()\n                        .dayofmonth(\"27\")\n                        .enabled(true)\n                        .build())\n                    .quartelyschedule(NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs.builder()\n                        .dayofmonth(27)\n                        .enabled(true)\n                        .startmonth(\"JANUARY\")\n                        .build())\n                    .snapshottimeofday(NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs.builder()\n                        .hours(16)\n                        .minutes(0)\n                        .seconds(0)\n                        .build())\n                    .weeklyschedule(NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs.builder()\n                        .dayofweek(\"WEDNESDAY\")\n                        .enabled(true)\n                        .build())\n                    .yearlyschedule(NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs.builder()\n                        .dayofmonth(31)\n                        .enabled(false)\n                        .month(\"DECEMBER\")\n                        .build())\n                    .build())\n                .slaid(\"{{ sla_id }}\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbp:\n    type: nutanix:NdbDatabase\n    properties:\n      actionarguments:\n        - name: host_ip\n          value: '{{ hostIP }}'\n      createdbserver: false\n      # name of database type\n      databasetype: postgres_database\n      # adding the profiles details\n      dbparameterprofileid: '{{ db_parameter_profile_id }}'\n      # required dbserver id\n      dbserverId: '{{ dbserver_id }}'\n      description: add description\n      # node for single instance\n      nodes:\n        - dbserverid: '{{ dbserver_id }}'\n      # postgreSQL Info\n      postgresqlInfo:\n        databaseNames: testdb1\n        databaseSize: '{{ 200 }}'\n        dbPassword: password\n        listenerPort: '{{ listner_port }}'\n      # time machine info\n      timemachineinfo:\n        description: description of time machine\n        name: test-pg-inst\n        schedule:\n          continuousschedule:\n            enabled: true\n            logbackupinterval: 30\n            snapshotsperday: 1\n          monthlyschedule:\n            dayofmonth: '27'\n            enabled: true\n          quartelyschedule:\n            dayofmonth: 27\n            enabled: true\n            startmonth: JANUARY\n          snapshottimeofday:\n            hours: 16\n            minutes: 0\n            seconds: 0\n          weeklyschedule:\n            dayofweek: WEDNESDAY\n            enabled: true\n          yearlyschedule:\n            dayofmonth: 31\n            enabled: false\n            month: DECEMBER\n        slaid: '{{ sla_id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## lifecycle\n\n* `Update` : - Currently only update of instance's name and description is supported using this resource\n\nSee detailed information in [NDB Database Instance](https://www.nutanix.dev/api_references/ndb/#/9d9eee4304496-provision-a-database).\n",
            "properties": {
                "actionarguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseActionargument:NdbDatabaseActionargument"
                    },
                    "description": "- (Optional) action arguments for database. For postgress, you can use postgresql_info\n"
                },
                "autotunestagingdrive": {
                    "type": "boolean",
                    "description": "- (Optional) Enable auto tuning of staging drive. Default: true\n"
                },
                "clone": {
                    "type": "boolean"
                },
                "clusterInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseClusterInfo:NdbDatabaseClusterInfo"
                    }
                },
                "clustered": {
                    "type": "boolean",
                    "description": "- (Optional) If clustered database. Default: false\n"
                },
                "computeprofileid": {
                    "type": "string",
                    "description": "- (Optional) ID of compute profile\n"
                },
                "createdbserver": {
                    "type": "boolean",
                    "description": "- (Optional) Set this to create new DB server VM. Default: true\n"
                },
                "databaseClusterType": {
                    "type": "string"
                },
                "databaseInstanceId": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseDatabaseNode:NdbDatabaseDatabaseNode"
                    }
                },
                "databasetype": {
                    "type": "string",
                    "description": "- (Required) Type of database. Valid values: postgres_database\n"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbparameterprofileid": {
                    "type": "string",
                    "description": "- (Optional) DB parameters profile ID\n"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverLogicalClusterId": {
                    "type": "string"
                },
                "dbserverid": {
                    "type": "string",
                    "description": "- (Optional) DB server VM ID for creating instance on registered DB server VM\n"
                },
                "delete": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database from the VM. Default value is true\n"
                },
                "deleteLogicalCluster": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the logical cluster. Default is true\n"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "forced": {
                    "type": "boolean",
                    "description": "- (Optional) Force delete of instance. Default is false\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseInfo:NdbDatabaseInfo"
                    }
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseLcmConfig:NdbDatabaseLcmConfig"
                    }
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseLinkedDatabase:NdbDatabaseLinkedDatabase"
                    }
                },
                "maintenanceTasks": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseMaintenanceTasks:NdbDatabaseMaintenanceTasks"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "networkprofileid": {
                    "type": "string",
                    "description": "- (Optional) ID of network profile\n"
                },
                "newdbservertimezone": {
                    "type": "string",
                    "description": "- (Optional) Timezone of new DB server VM\n"
                },
                "nodecount": {
                    "type": "integer",
                    "description": "- (Optional) No. of nodes/db server vms. Default: 1\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseNode:NdbDatabaseNode"
                    },
                    "description": "- (Optional) nodes info\n"
                },
                "nxclusterid": {
                    "type": "string",
                    "description": "- (Optional) Cluster ID for DB server VM\n"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "postgresqlInfo": {
                    "$ref": "#/types/nutanix:index/NdbDatabasePostgresqlInfo:NdbDatabasePostgresqlInfo",
                    "description": "- (Optional) action arguments for postgress type database.\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseProperty:NdbDatabaseProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "remove": {
                    "type": "boolean",
                    "description": "- (Optional) Unregister the database from NDB. Default value is true\n"
                },
                "softRemove": {
                    "type": "boolean",
                    "description": "- (Optional) Soft remove. Default will be false\n"
                },
                "softwareprofileid": {
                    "type": "string",
                    "description": "- (Optional) ID of software profile\n"
                },
                "softwareprofileversionid": {
                    "type": "string",
                    "description": "- (Optional) ID of version in software profile\n"
                },
                "sshpublickey": {
                    "type": "string",
                    "description": "- (Optional) public key for ssh access to DB server VM\n",
                    "secret": true
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTag:NdbDatabaseTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachine:NdbDatabaseTimeMachine"
                    }
                },
                "timeZone": {
                    "type": "string"
                },
                "timemachineinfo": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfo:NdbDatabaseTimemachineinfo",
                    "description": "- (Optional) time machine config\n"
                },
                "type": {
                    "type": "string"
                },
                "vmPassword": {
                    "type": "string",
                    "description": "- (Optional) password for DB server VM and era drive user\n",
                    "secret": true
                }
            },
            "required": [
                "clone",
                "databaseClusterType",
                "databaseInstanceId",
                "databaseName",
                "databaseNodes",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "dbserverLogicalClusterId",
                "infos",
                "lcmConfigs",
                "linkedDatabases",
                "metric",
                "name",
                "nodes",
                "parentDatabaseId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeMachineId",
                "timeZone",
                "type"
            ],
            "inputProperties": {
                "actionarguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseActionargument:NdbDatabaseActionargument"
                    },
                    "description": "- (Optional) action arguments for database. For postgress, you can use postgresql_info\n"
                },
                "autotunestagingdrive": {
                    "type": "boolean",
                    "description": "- (Optional) Enable auto tuning of staging drive. Default: true\n"
                },
                "clusterInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseClusterInfo:NdbDatabaseClusterInfo"
                    }
                },
                "clustered": {
                    "type": "boolean",
                    "description": "- (Optional) If clustered database. Default: false\n"
                },
                "computeprofileid": {
                    "type": "string",
                    "description": "- (Optional) ID of compute profile\n",
                    "willReplaceOnChanges": true
                },
                "createdbserver": {
                    "type": "boolean",
                    "description": "- (Optional) Set this to create new DB server VM. Default: true\n"
                },
                "databaseInstanceId": {
                    "type": "string"
                },
                "databasetype": {
                    "type": "string",
                    "description": "- (Required) Type of database. Valid values: postgres_database\n",
                    "willReplaceOnChanges": true
                },
                "dbparameterprofileid": {
                    "type": "string",
                    "description": "- (Optional) DB parameters profile ID\n",
                    "willReplaceOnChanges": true
                },
                "dbserverid": {
                    "type": "string",
                    "description": "- (Optional) DB server VM ID for creating instance on registered DB server VM\n",
                    "willReplaceOnChanges": true
                },
                "delete": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database from the VM. Default value is true\n"
                },
                "deleteLogicalCluster": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the logical cluster. Default is true\n"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description\n"
                },
                "forced": {
                    "type": "boolean",
                    "description": "- (Optional) Force delete of instance. Default is false\n"
                },
                "maintenanceTasks": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseMaintenanceTasks:NdbDatabaseMaintenanceTasks"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the instance.\n"
                },
                "networkprofileid": {
                    "type": "string",
                    "description": "- (Optional) ID of network profile\n",
                    "willReplaceOnChanges": true
                },
                "newdbservertimezone": {
                    "type": "string",
                    "description": "- (Optional) Timezone of new DB server VM\n",
                    "willReplaceOnChanges": true
                },
                "nodecount": {
                    "type": "integer",
                    "description": "- (Optional) No. of nodes/db server vms. Default: 1\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseNode:NdbDatabaseNode"
                    },
                    "description": "- (Optional) nodes info\n",
                    "willReplaceOnChanges": true
                },
                "nxclusterid": {
                    "type": "string",
                    "description": "- (Optional) Cluster ID for DB server VM\n",
                    "willReplaceOnChanges": true
                },
                "postgresqlInfo": {
                    "$ref": "#/types/nutanix:index/NdbDatabasePostgresqlInfo:NdbDatabasePostgresqlInfo",
                    "description": "- (Optional) action arguments for postgress type database.\n"
                },
                "remove": {
                    "type": "boolean",
                    "description": "- (Optional) Unregister the database from NDB. Default value is true\n"
                },
                "softRemove": {
                    "type": "boolean",
                    "description": "- (Optional) Soft remove. Default will be false\n"
                },
                "softwareprofileid": {
                    "type": "string",
                    "description": "- (Optional) ID of software profile\n",
                    "willReplaceOnChanges": true
                },
                "softwareprofileversionid": {
                    "type": "string",
                    "description": "- (Optional) ID of version in software profile\n",
                    "willReplaceOnChanges": true
                },
                "sshpublickey": {
                    "type": "string",
                    "description": "- (Optional) public key for ssh access to DB server VM\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTag:NdbDatabaseTag"
                    }
                },
                "timemachineinfo": {
                    "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfo:NdbDatabaseTimemachineinfo",
                    "description": "- (Optional) time machine config\n",
                    "willReplaceOnChanges": true
                },
                "vmPassword": {
                    "type": "string",
                    "description": "- (Optional) password for DB server VM and era drive user\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbDatabase resources.\n",
                "properties": {
                    "actionarguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseActionargument:NdbDatabaseActionargument"
                        },
                        "description": "- (Optional) action arguments for database. For postgress, you can use postgresql_info\n"
                    },
                    "autotunestagingdrive": {
                        "type": "boolean",
                        "description": "- (Optional) Enable auto tuning of staging drive. Default: true\n"
                    },
                    "clone": {
                        "type": "boolean"
                    },
                    "clusterInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseClusterInfo:NdbDatabaseClusterInfo"
                        }
                    },
                    "clustered": {
                        "type": "boolean",
                        "description": "- (Optional) If clustered database. Default: false\n"
                    },
                    "computeprofileid": {
                        "type": "string",
                        "description": "- (Optional) ID of compute profile\n",
                        "willReplaceOnChanges": true
                    },
                    "createdbserver": {
                        "type": "boolean",
                        "description": "- (Optional) Set this to create new DB server VM. Default: true\n"
                    },
                    "databaseClusterType": {
                        "type": "string"
                    },
                    "databaseInstanceId": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseDatabaseNode:NdbDatabaseDatabaseNode"
                        }
                    },
                    "databasetype": {
                        "type": "string",
                        "description": "- (Required) Type of database. Valid values: postgres_database\n",
                        "willReplaceOnChanges": true
                    },
                    "dateCreated": {
                        "type": "string"
                    },
                    "dateModified": {
                        "type": "string"
                    },
                    "dbparameterprofileid": {
                        "type": "string",
                        "description": "- (Optional) DB parameters profile ID\n",
                        "willReplaceOnChanges": true
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string"
                    },
                    "dbserverid": {
                        "type": "string",
                        "description": "- (Optional) DB server VM ID for creating instance on registered DB server VM\n",
                        "willReplaceOnChanges": true
                    },
                    "delete": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the database from the VM. Default value is true\n"
                    },
                    "deleteLogicalCluster": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the logical cluster. Default is true\n"
                    },
                    "deleteTimeMachine": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) The description\n"
                    },
                    "forced": {
                        "type": "boolean",
                        "description": "- (Optional) Force delete of instance. Default is false\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseInfo:NdbDatabaseInfo"
                        }
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseLcmConfig:NdbDatabaseLcmConfig"
                        }
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseLinkedDatabase:NdbDatabaseLinkedDatabase"
                        }
                    },
                    "maintenanceTasks": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseMaintenanceTasks:NdbDatabaseMaintenanceTasks"
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) Name of the instance.\n"
                    },
                    "networkprofileid": {
                        "type": "string",
                        "description": "- (Optional) ID of network profile\n",
                        "willReplaceOnChanges": true
                    },
                    "newdbservertimezone": {
                        "type": "string",
                        "description": "- (Optional) Timezone of new DB server VM\n",
                        "willReplaceOnChanges": true
                    },
                    "nodecount": {
                        "type": "integer",
                        "description": "- (Optional) No. of nodes/db server vms. Default: 1\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseNode:NdbDatabaseNode"
                        },
                        "description": "- (Optional) nodes info\n",
                        "willReplaceOnChanges": true
                    },
                    "nxclusterid": {
                        "type": "string",
                        "description": "- (Optional) Cluster ID for DB server VM\n",
                        "willReplaceOnChanges": true
                    },
                    "parentDatabaseId": {
                        "type": "string"
                    },
                    "postgresqlInfo": {
                        "$ref": "#/types/nutanix:index/NdbDatabasePostgresqlInfo:NdbDatabasePostgresqlInfo",
                        "description": "- (Optional) action arguments for postgress type database.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseProperty:NdbDatabaseProperty"
                        },
                        "description": "List of all the properties\n"
                    },
                    "remove": {
                        "type": "boolean",
                        "description": "- (Optional) Unregister the database from NDB. Default value is true\n"
                    },
                    "softRemove": {
                        "type": "boolean",
                        "description": "- (Optional) Soft remove. Default will be false\n"
                    },
                    "softwareprofileid": {
                        "type": "string",
                        "description": "- (Optional) ID of software profile\n",
                        "willReplaceOnChanges": true
                    },
                    "softwareprofileversionid": {
                        "type": "string",
                        "description": "- (Optional) ID of version in software profile\n",
                        "willReplaceOnChanges": true
                    },
                    "sshpublickey": {
                        "type": "string",
                        "description": "- (Optional) public key for ssh access to DB server VM\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseTag:NdbDatabaseTag"
                        }
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseTimeMachine:NdbDatabaseTimeMachine"
                        }
                    },
                    "timeZone": {
                        "type": "string"
                    },
                    "timemachineinfo": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseTimemachineinfo:NdbDatabaseTimemachineinfo",
                        "description": "- (Optional) time machine config\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    },
                    "vmPassword": {
                        "type": "string",
                        "description": "- (Optional) password for DB server VM and era drive user\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbDatabaseRestore:NdbDatabaseRestore": {
            "description": "Provides a resource to restore the database instance based on the input parameters. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbDatabaseRestore(\"name\", {\n    databaseId: \"{{ database_id }}\",\n    snapshotId: \"{{ snapshot id }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbDatabaseRestore(\"name\",\n    database_id=\"{{ database_id }}\",\n    snapshot_id=\"{{ snapshot id }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbDatabaseRestore(\"name\", new()\n    {\n        DatabaseId = \"{{ database_id }}\",\n        SnapshotId = \"{{ snapshot id }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbDatabaseRestore(ctx, \"name\", \u0026nutanix.NdbDatabaseRestoreArgs{\n\t\t\tDatabaseId: pulumi.String(\"{{ database_id }}\"),\n\t\t\tSnapshotId: pulumi.String(\"{{ snapshot id }}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbDatabaseRestore;\nimport com.pulumi.nutanix.NdbDatabaseRestoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbDatabaseRestore(\"name\", NdbDatabaseRestoreArgs.builder()\n            .databaseId(\"{{ database_id }}\")\n            .snapshotId(\"{{ snapshot id }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbDatabaseRestore\n    properties:\n      databaseId: '{{ database_id }}'\n      snapshotId: '{{ snapshot id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "clone": {
                    "type": "boolean",
                    "description": "whether instance is cloned or not\n"
                },
                "databaseClusterType": {
                    "type": "string",
                    "description": "database cluster type\n"
                },
                "databaseId": {
                    "type": "string",
                    "description": "database id\n"
                },
                "databaseInstanceId": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "name of database\n"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreDatabaseNode:NdbDatabaseRestoreDatabaseNode"
                    },
                    "description": "database nodes associated with database instance\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "dbserver logical cluster\n"
                },
                "dbserverLogicalClusterId": {
                    "type": "string",
                    "description": "dbserver logical cluster id\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfo:NdbDatabaseRestoreInfo"
                    },
                    "description": "info of instance\n"
                },
                "latestSnapshot": {
                    "type": "string",
                    "description": "latest snapshot id\n"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLcmConfig:NdbDatabaseRestoreLcmConfig"
                    },
                    "description": "LCM config of instance\n"
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLinkedDatabase:NdbDatabaseRestoreLinkedDatabase"
                    },
                    "description": "linked databases within database instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreProperty:NdbDatabaseRestoreProperty"
                    },
                    "description": "properties of database created\n"
                },
                "restoreVersion": {
                    "type": "integer",
                    "description": "helps to restore the database with same config.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id from you want to use for restoring the instance\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTag:NdbDatabaseRestoreTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "time machine id of instance\n"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachine:NdbDatabaseRestoreTimeMachine"
                    },
                    "description": "Time Machine details of instance\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone on which instance is created xw\n"
                },
                "timeZonePitr": {
                    "type": "string",
                    "description": "timezone . Should be used with  `user_pitr_timestamp`\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                },
                "userPitrTimestamp": {
                    "type": "string",
                    "description": "the time to which you want to restore your instance.\n"
                }
            },
            "required": [
                "clone",
                "databaseClusterType",
                "databaseId",
                "databaseInstanceId",
                "databaseName",
                "databaseNodes",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "dbserverLogicalClusterId",
                "description",
                "infos",
                "lcmConfigs",
                "linkedDatabases",
                "metric",
                "name",
                "parentDatabaseId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeMachineId",
                "timeZone",
                "type"
            ],
            "inputProperties": {
                "databaseId": {
                    "type": "string",
                    "description": "database id\n",
                    "willReplaceOnChanges": true
                },
                "latestSnapshot": {
                    "type": "string",
                    "description": "latest snapshot id\n"
                },
                "restoreVersion": {
                    "type": "integer",
                    "description": "helps to restore the database with same config.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "snapshot id from you want to use for restoring the instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTag:NdbDatabaseRestoreTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "timeZonePitr": {
                    "type": "string",
                    "description": "timezone . Should be used with  `user_pitr_timestamp`\n"
                },
                "userPitrTimestamp": {
                    "type": "string",
                    "description": "the time to which you want to restore your instance.\n"
                }
            },
            "requiredInputs": [
                "databaseId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbDatabaseRestore resources.\n",
                "properties": {
                    "clone": {
                        "type": "boolean",
                        "description": "whether instance is cloned or not\n"
                    },
                    "databaseClusterType": {
                        "type": "string",
                        "description": "database cluster type\n"
                    },
                    "databaseId": {
                        "type": "string",
                        "description": "database id\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseInstanceId": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "name of database\n"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseRestoreDatabaseNode:NdbDatabaseRestoreDatabaseNode"
                        },
                        "description": "database nodes associated with database instance\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "date created for db instance\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "date modified for instance\n"
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "dbserver logical cluster\n"
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string",
                        "description": "dbserver logical cluster id\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of database instance\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseRestoreInfo:NdbDatabaseRestoreInfo"
                        },
                        "description": "info of instance\n"
                    },
                    "latestSnapshot": {
                        "type": "string",
                        "description": "latest snapshot id\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLcmConfig:NdbDatabaseRestoreLcmConfig"
                        },
                        "description": "LCM config of instance\n"
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseRestoreLinkedDatabase:NdbDatabaseRestoreLinkedDatabase"
                        },
                        "description": "linked databases within database instance\n"
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of database instance\n"
                    },
                    "parentDatabaseId": {
                        "type": "string",
                        "description": "parent database id\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseRestoreProperty:NdbDatabaseRestoreProperty"
                        },
                        "description": "properties of database created\n"
                    },
                    "restoreVersion": {
                        "type": "integer",
                        "description": "helps to restore the database with same config.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "snapshot id from you want to use for restoring the instance\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of instance\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTag:NdbDatabaseRestoreTag"
                        },
                        "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "time machine id of instance\n"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseRestoreTimeMachine:NdbDatabaseRestoreTimeMachine"
                        },
                        "description": "Time Machine details of instance\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "timezone on which instance is created xw\n"
                    },
                    "timeZonePitr": {
                        "type": "string",
                        "description": "timezone . Should be used with  `user_pitr_timestamp`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of database\n"
                    },
                    "userPitrTimestamp": {
                        "type": "string",
                        "description": "the time to which you want to restore your instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbDatabaseScale:NdbDatabaseScale": {
            "description": "Provides a resource to scale the database instance based on the input parameters. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst scale = new nutanix.NdbDatabaseScale(\"scale\", {\n    applicationType: \"{{ Application Type }}\",\n    dataStorageSize: 1,\n    databaseUuid: \"{{ database_id }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nscale = nutanix.NdbDatabaseScale(\"scale\",\n    application_type=\"{{ Application Type }}\",\n    data_storage_size=1,\n    database_uuid=\"{{ database_id }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var scale = new Nutanix.NdbDatabaseScale(\"scale\", new()\n    {\n        ApplicationType = \"{{ Application Type }}\",\n        DataStorageSize = 1,\n        DatabaseUuid = \"{{ database_id }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbDatabaseScale(ctx, \"scale\", \u0026nutanix.NdbDatabaseScaleArgs{\n\t\t\tApplicationType: pulumi.String(\"{{ Application Type }}\"),\n\t\t\tDataStorageSize: pulumi.Int(1),\n\t\t\tDatabaseUuid:    pulumi.String(\"{{ database_id }}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbDatabaseScale;\nimport com.pulumi.nutanix.NdbDatabaseScaleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var scale = new NdbDatabaseScale(\"scale\", NdbDatabaseScaleArgs.builder()\n            .applicationType(\"{{ Application Type }}\")\n            .dataStorageSize(1)\n            .databaseUuid(\"{{ database_id }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  scale:\n    type: nutanix:NdbDatabaseScale\n    properties:\n      applicationType: '{{ Application Type }}'\n      dataStorageSize: 1\n      databaseUuid: '{{ database_id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "applicationType": {
                    "type": "string",
                    "description": "type of instance. eg: postgres_database\n"
                },
                "clone": {
                    "type": "boolean",
                    "description": "whether instance is cloned or not\n"
                },
                "dataStorageSize": {
                    "type": "integer",
                    "description": "data area (in GiB) to be added to the existing database.\n"
                },
                "databaseClusterType": {
                    "type": "string",
                    "description": "database cluster type\n"
                },
                "databaseInstanceId": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "name of database\n"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleDatabaseNode:NdbDatabaseScaleDatabaseNode"
                    },
                    "description": "database nodes associated with database instance\n"
                },
                "databaseUuid": {
                    "type": "string",
                    "description": "Database id\n"
                },
                "databasetype": {
                    "type": "string",
                    "description": "type of database\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "dbserver logical cluster\n"
                },
                "dbserverLogicalClusterId": {
                    "type": "string",
                    "description": "dbserver logical cluster id\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of database instance\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfo:NdbDatabaseScaleInfo"
                    },
                    "description": "info of instance\n"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleLcmConfig:NdbDatabaseScaleLcmConfig"
                    },
                    "description": "LCM config of instance\n"
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleLinkedDatabase:NdbDatabaseScaleLinkedDatabase"
                    },
                    "description": "linked databases within database instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentSourceDatabaseId": {
                    "type": "string"
                },
                "postScriptCmd": {
                    "type": "string",
                    "description": "post script command\n"
                },
                "preScriptCmd": {
                    "type": "string",
                    "description": "pre script command\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleProperty:NdbDatabaseScaleProperty"
                    },
                    "description": "properties of database created\n"
                },
                "scaleCount": {
                    "type": "integer",
                    "description": "scale count helps to scale the same instance with same config\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTag:NdbDatabaseScaleTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "time machine id of instance\n"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachine:NdbDatabaseScaleTimeMachine"
                    },
                    "description": "Time Machine details of instance\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone on which instance is created xw\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                }
            },
            "required": [
                "applicationType",
                "clone",
                "dataStorageSize",
                "databaseClusterType",
                "databaseInstanceId",
                "databaseName",
                "databaseNodes",
                "databaseUuid",
                "databasetype",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "dbserverLogicalClusterId",
                "description",
                "infos",
                "lcmConfigs",
                "linkedDatabases",
                "metric",
                "name",
                "parentDatabaseId",
                "parentSourceDatabaseId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeMachineId",
                "timeZone",
                "type"
            ],
            "inputProperties": {
                "applicationType": {
                    "type": "string",
                    "description": "type of instance. eg: postgres_database\n"
                },
                "dataStorageSize": {
                    "type": "integer",
                    "description": "data area (in GiB) to be added to the existing database.\n"
                },
                "databaseUuid": {
                    "type": "string",
                    "description": "Database id\n"
                },
                "postScriptCmd": {
                    "type": "string",
                    "description": "post script command\n"
                },
                "preScriptCmd": {
                    "type": "string",
                    "description": "pre script command\n"
                },
                "scaleCount": {
                    "type": "integer",
                    "description": "scale count helps to scale the same instance with same config\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseScaleTag:NdbDatabaseScaleTag"
                    },
                    "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                }
            },
            "requiredInputs": [
                "applicationType",
                "dataStorageSize",
                "databaseUuid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbDatabaseScale resources.\n",
                "properties": {
                    "applicationType": {
                        "type": "string",
                        "description": "type of instance. eg: postgres_database\n"
                    },
                    "clone": {
                        "type": "boolean",
                        "description": "whether instance is cloned or not\n"
                    },
                    "dataStorageSize": {
                        "type": "integer",
                        "description": "data area (in GiB) to be added to the existing database.\n"
                    },
                    "databaseClusterType": {
                        "type": "string",
                        "description": "database cluster type\n"
                    },
                    "databaseInstanceId": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "name of database\n"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseScaleDatabaseNode:NdbDatabaseScaleDatabaseNode"
                        },
                        "description": "database nodes associated with database instance\n"
                    },
                    "databaseUuid": {
                        "type": "string",
                        "description": "Database id\n"
                    },
                    "databasetype": {
                        "type": "string",
                        "description": "type of database\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "date created for db instance\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "date modified for instance\n"
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "dbserver logical cluster\n"
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string",
                        "description": "dbserver logical cluster id\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of database instance\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseScaleInfo:NdbDatabaseScaleInfo"
                        },
                        "description": "info of instance\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseScaleLcmConfig:NdbDatabaseScaleLcmConfig"
                        },
                        "description": "LCM config of instance\n"
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseScaleLinkedDatabase:NdbDatabaseScaleLinkedDatabase"
                        },
                        "description": "linked databases within database instance\n"
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of database instance\n"
                    },
                    "parentDatabaseId": {
                        "type": "string",
                        "description": "parent database id\n"
                    },
                    "parentSourceDatabaseId": {
                        "type": "string"
                    },
                    "postScriptCmd": {
                        "type": "string",
                        "description": "post script command\n"
                    },
                    "preScriptCmd": {
                        "type": "string",
                        "description": "pre script command\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseScaleProperty:NdbDatabaseScaleProperty"
                        },
                        "description": "properties of database created\n"
                    },
                    "scaleCount": {
                        "type": "integer",
                        "description": "scale count helps to scale the same instance with same config\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of instance\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseScaleTag:NdbDatabaseScaleTag"
                        },
                        "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "time machine id of instance\n"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseScaleTimeMachine:NdbDatabaseScaleTimeMachine"
                        },
                        "description": "Time Machine details of instance\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "timezone on which instance is created xw\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of database\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot": {
            "description": "Provides a resource to perform the snapshot for database instance based on the input parameters. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbDatabaseSnapshot(\"name\", {\n    removeScheduleInDays: 1,\n    timeMachineName: \"{{ tms_name }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbDatabaseSnapshot(\"name\",\n    remove_schedule_in_days=1,\n    time_machine_name=\"{{ tms_name }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbDatabaseSnapshot(\"name\", new()\n    {\n        RemoveScheduleInDays = 1,\n        TimeMachineName = \"{{ tms_name }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbDatabaseSnapshot(ctx, \"name\", \u0026nutanix.NdbDatabaseSnapshotArgs{\n\t\t\tRemoveScheduleInDays: pulumi.Int(1),\n\t\t\tTimeMachineName:      pulumi.String(\"{{ tms_name }}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbDatabaseSnapshot;\nimport com.pulumi.nutanix.NdbDatabaseSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbDatabaseSnapshot(\"name\", NdbDatabaseSnapshotArgs.builder()\n            .removeScheduleInDays(1)\n            .timeMachineName(\"{{ tms_name }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbDatabaseSnapshot\n    properties:\n      removeScheduleInDays: 1\n      timeMachineName: '{{ tms_name }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "appInfoVersion": {
                    "type": "string",
                    "description": "App info version\n"
                },
                "applicableTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Applicable types\n"
                },
                "databaseNodeId": {
                    "type": "string",
                    "description": "database node id\n"
                },
                "databaseSnapshot": {
                    "type": "boolean",
                    "description": "database snapshot\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "created date\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date\n"
                },
                "dbserverId": {
                    "type": "string",
                    "description": "dbserver id\n"
                },
                "dbserverIp": {
                    "type": "string",
                    "description": "dbserver ip\n"
                },
                "dbserverName": {
                    "type": "string",
                    "description": "dbserver name\n"
                },
                "dbserverStorageMetadataVersion": {
                    "type": "integer",
                    "description": "dbserver storage metadata version\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of snapshot\n"
                },
                "expiryDateTimezone": {
                    "type": "string",
                    "description": "Default is set to Asia/Calcutta\n"
                },
                "fromTimestamp": {
                    "type": "string",
                    "description": "from timestamp\n"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotLcmConfig:NdbDatabaseSnapshotLcmConfig"
                    },
                    "description": "LCM config\n"
                },
                "name": {
                    "type": "string",
                    "description": "Snapshot name. Default value is era_manual_snapshot.\n"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "nx cluster id\n"
                },
                "parentSnapshot": {
                    "type": "boolean",
                    "description": "parent snapshot\n"
                },
                "parentSnapshotId": {
                    "type": "string",
                    "description": "parent snapshot id\n"
                },
                "processed": {
                    "type": "boolean",
                    "description": "processed\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotProperty:NdbDatabaseSnapshotProperty"
                    },
                    "description": "properties\n"
                },
                "protectionDomainId": {
                    "type": "string",
                    "description": "protection domain\n"
                },
                "removeScheduleInDays": {
                    "type": "integer",
                    "description": "Removal schedule after which the snapshot should be removed.\n"
                },
                "replicateToClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "snapshots to be replicated to clusters.\n"
                },
                "replicatedSnapshots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "replicated snapshots\n"
                },
                "santized": {
                    "type": "boolean"
                },
                "santizedFromSnapshotId": {
                    "type": "string"
                },
                "santizedSnapshots": {
                    "type": "string"
                },
                "snapshotFamily": {
                    "type": "string",
                    "description": "snapshot family\n"
                },
                "snapshotSize": {
                    "type": "number",
                    "description": "snapshot size\n"
                },
                "snapshotTimestamp": {
                    "type": "string",
                    "description": "snapshot timeStamp\n"
                },
                "snapshotTimestampDate": {
                    "type": "integer",
                    "description": "snapshot timestamp date\n"
                },
                "snapshotUuid": {
                    "type": "string",
                    "description": "snapshot uuid\n"
                },
                "softwareDatabaseSnapshot": {
                    "type": "boolean",
                    "description": "software database snapshot\n"
                },
                "softwareSnapshot": {
                    "type": "string",
                    "description": "software snapshot\n"
                },
                "softwareSnapshotId": {
                    "type": "string",
                    "description": "software snapshot id\n"
                },
                "status": {
                    "type": "string",
                    "description": "status\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotTag:NdbDatabaseSnapshotTag"
                    },
                    "description": "tags\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "Time Machine Id\n"
                },
                "timeMachineName": {
                    "type": "string",
                    "description": "Time Machine Name\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone\n"
                },
                "toTimestamp": {
                    "type": "string",
                    "description": "to timestamp\n"
                },
                "type": {
                    "type": "string",
                    "description": "type\n"
                }
            },
            "required": [
                "appInfoVersion",
                "applicableTypes",
                "databaseNodeId",
                "databaseSnapshot",
                "dateCreated",
                "dateModified",
                "dbserverId",
                "dbserverIp",
                "dbserverName",
                "dbserverStorageMetadataVersion",
                "description",
                "fromTimestamp",
                "lcmConfigs",
                "name",
                "nxClusterId",
                "parentSnapshot",
                "parentSnapshotId",
                "processed",
                "properties",
                "protectionDomainId",
                "replicatedSnapshots",
                "santized",
                "santizedFromSnapshotId",
                "santizedSnapshots",
                "snapshotFamily",
                "snapshotSize",
                "snapshotTimestamp",
                "snapshotTimestampDate",
                "snapshotUuid",
                "softwareDatabaseSnapshot",
                "softwareSnapshot",
                "softwareSnapshotId",
                "status",
                "tags",
                "timezone",
                "toTimestamp",
                "type"
            ],
            "inputProperties": {
                "expiryDateTimezone": {
                    "type": "string",
                    "description": "Default is set to Asia/Calcutta\n"
                },
                "name": {
                    "type": "string",
                    "description": "Snapshot name. Default value is era_manual_snapshot.\n"
                },
                "removeScheduleInDays": {
                    "type": "integer",
                    "description": "Removal schedule after which the snapshot should be removed.\n"
                },
                "replicateToClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "snapshots to be replicated to clusters.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotTag:NdbDatabaseSnapshotTag"
                    },
                    "description": "tags\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "Time Machine Id\n"
                },
                "timeMachineName": {
                    "type": "string",
                    "description": "Time Machine Name\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbDatabaseSnapshot resources.\n",
                "properties": {
                    "appInfoVersion": {
                        "type": "string",
                        "description": "App info version\n"
                    },
                    "applicableTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Applicable types\n"
                    },
                    "databaseNodeId": {
                        "type": "string",
                        "description": "database node id\n"
                    },
                    "databaseSnapshot": {
                        "type": "boolean",
                        "description": "database snapshot\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "created date\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "modified date\n"
                    },
                    "dbserverId": {
                        "type": "string",
                        "description": "dbserver id\n"
                    },
                    "dbserverIp": {
                        "type": "string",
                        "description": "dbserver ip\n"
                    },
                    "dbserverName": {
                        "type": "string",
                        "description": "dbserver name\n"
                    },
                    "dbserverStorageMetadataVersion": {
                        "type": "integer",
                        "description": "dbserver storage metadata version\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of snapshot\n"
                    },
                    "expiryDateTimezone": {
                        "type": "string",
                        "description": "Default is set to Asia/Calcutta\n"
                    },
                    "fromTimestamp": {
                        "type": "string",
                        "description": "from timestamp\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotLcmConfig:NdbDatabaseSnapshotLcmConfig"
                        },
                        "description": "LCM config\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Snapshot name. Default value is era_manual_snapshot.\n"
                    },
                    "nxClusterId": {
                        "type": "string",
                        "description": "nx cluster id\n"
                    },
                    "parentSnapshot": {
                        "type": "boolean",
                        "description": "parent snapshot\n"
                    },
                    "parentSnapshotId": {
                        "type": "string",
                        "description": "parent snapshot id\n"
                    },
                    "processed": {
                        "type": "boolean",
                        "description": "processed\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotProperty:NdbDatabaseSnapshotProperty"
                        },
                        "description": "properties\n"
                    },
                    "protectionDomainId": {
                        "type": "string",
                        "description": "protection domain\n"
                    },
                    "removeScheduleInDays": {
                        "type": "integer",
                        "description": "Removal schedule after which the snapshot should be removed.\n"
                    },
                    "replicateToClusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "snapshots to be replicated to clusters.\n"
                    },
                    "replicatedSnapshots": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "replicated snapshots\n"
                    },
                    "santized": {
                        "type": "boolean"
                    },
                    "santizedFromSnapshotId": {
                        "type": "string"
                    },
                    "santizedSnapshots": {
                        "type": "string"
                    },
                    "snapshotFamily": {
                        "type": "string",
                        "description": "snapshot family\n"
                    },
                    "snapshotSize": {
                        "type": "number",
                        "description": "snapshot size\n"
                    },
                    "snapshotTimestamp": {
                        "type": "string",
                        "description": "snapshot timeStamp\n"
                    },
                    "snapshotTimestampDate": {
                        "type": "integer",
                        "description": "snapshot timestamp date\n"
                    },
                    "snapshotUuid": {
                        "type": "string",
                        "description": "snapshot uuid\n"
                    },
                    "softwareDatabaseSnapshot": {
                        "type": "boolean",
                        "description": "software database snapshot\n"
                    },
                    "softwareSnapshot": {
                        "type": "string",
                        "description": "software snapshot\n"
                    },
                    "softwareSnapshotId": {
                        "type": "string",
                        "description": "software snapshot id\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDatabaseSnapshotTag:NdbDatabaseSnapshotTag"
                        },
                        "description": "tags\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "Time Machine Id\n"
                    },
                    "timeMachineName": {
                        "type": "string",
                        "description": "Time Machine Name\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "timezone\n"
                    },
                    "toTimestamp": {
                        "type": "string",
                        "description": "to timestamp\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbDbserverVm:NdbDbserverVm": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "computeProfileId": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmCredential:NdbDbserverVmCredential"
                    }
                },
                "databaseType": {
                    "type": "string"
                },
                "dbserverClusterId": {
                    "type": "string"
                },
                "delete": {
                    "type": "boolean"
                },
                "deleteVgs": {
                    "type": "boolean"
                },
                "deleteVmSnapshots": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "eraDriveId": {
                    "type": "string"
                },
                "eraVersion": {
                    "type": "string"
                },
                "fqdns": {
                    "type": "string"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latestSnapshot": {
                    "type": "boolean"
                },
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maintenanceTasks": {
                    "$ref": "#/types/nutanix:index/NdbDbserverVmMaintenanceTasks:NdbDbserverVmMaintenanceTasks"
                },
                "name": {
                    "type": "string"
                },
                "networkProfileId": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmPostgresDatabase:NdbDbserverVmPostgresDatabase"
                    }
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmProperty:NdbDbserverVmProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "remove": {
                    "type": "boolean"
                },
                "snapshotId": {
                    "type": "string"
                },
                "softRemove": {
                    "type": "boolean"
                },
                "softwareProfileId": {
                    "type": "string"
                },
                "softwareProfileVersionId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmTag:NdbDbserverVmTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vmClusterName": {
                    "type": "string"
                },
                "vmClusterUuid": {
                    "type": "string"
                },
                "vmPassword": {
                    "type": "string",
                    "secret": true
                },
                "vmTimezone": {
                    "type": "string"
                }
            },
            "required": [
                "clientId",
                "computeProfileId",
                "databaseType",
                "dbserverClusterId",
                "description",
                "eraDriveId",
                "eraVersion",
                "fqdns",
                "ipAddresses",
                "macAddresses",
                "name",
                "networkProfileId",
                "nxClusterId",
                "properties",
                "status",
                "tags",
                "type",
                "vmClusterName",
                "vmClusterUuid",
                "vmTimezone"
            ],
            "inputProperties": {
                "computeProfileId": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmCredential:NdbDbserverVmCredential"
                    }
                },
                "databaseType": {
                    "type": "string"
                },
                "delete": {
                    "type": "boolean"
                },
                "deleteVgs": {
                    "type": "boolean"
                },
                "deleteVmSnapshots": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "latestSnapshot": {
                    "type": "boolean"
                },
                "maintenanceTasks": {
                    "$ref": "#/types/nutanix:index/NdbDbserverVmMaintenanceTasks:NdbDbserverVmMaintenanceTasks"
                },
                "networkProfileId": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmPostgresDatabase:NdbDbserverVmPostgresDatabase"
                    }
                },
                "remove": {
                    "type": "boolean"
                },
                "snapshotId": {
                    "type": "string"
                },
                "softRemove": {
                    "type": "boolean"
                },
                "softwareProfileId": {
                    "type": "string"
                },
                "softwareProfileVersionId": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmTag:NdbDbserverVmTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "vmPassword": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "computeProfileId",
                "databaseType",
                "networkProfileId",
                "nxClusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbDbserverVm resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string"
                    },
                    "computeProfileId": {
                        "type": "string"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDbserverVmCredential:NdbDbserverVmCredential"
                        }
                    },
                    "databaseType": {
                        "type": "string"
                    },
                    "dbserverClusterId": {
                        "type": "string"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "deleteVgs": {
                        "type": "boolean"
                    },
                    "deleteVmSnapshots": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "eraDriveId": {
                        "type": "string"
                    },
                    "eraVersion": {
                        "type": "string"
                    },
                    "fqdns": {
                        "type": "string"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "latestSnapshot": {
                        "type": "boolean"
                    },
                    "macAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "maintenanceTasks": {
                        "$ref": "#/types/nutanix:index/NdbDbserverVmMaintenanceTasks:NdbDbserverVmMaintenanceTasks"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkProfileId": {
                        "type": "string"
                    },
                    "nxClusterId": {
                        "type": "string"
                    },
                    "postgresDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDbserverVmPostgresDatabase:NdbDbserverVmPostgresDatabase"
                        }
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDbserverVmProperty:NdbDbserverVmProperty"
                        },
                        "description": "List of all the properties\n"
                    },
                    "remove": {
                        "type": "boolean"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "softRemove": {
                        "type": "boolean"
                    },
                    "softwareProfileId": {
                        "type": "string"
                    },
                    "softwareProfileVersionId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbDbserverVmTag:NdbDbserverVmTag"
                        }
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vmClusterName": {
                        "type": "string"
                    },
                    "vmClusterUuid": {
                        "type": "string"
                    },
                    "vmPassword": {
                        "type": "string",
                        "secret": true
                    },
                    "vmTimezone": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbLinkedDatabases:NdbLinkedDatabases": {
            "properties": {
                "databaseId": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseStatus": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbLinkedDatabasesInfo:NdbLinkedDatabasesInfo"
                    }
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "parentLinkedDatabaseId": {
                    "type": "string"
                },
                "snapshotId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "required": [
                "databaseId",
                "databaseStatus",
                "dateCreated",
                "dateModified",
                "description",
                "infos",
                "metric",
                "name",
                "parentDatabaseId",
                "parentLinkedDatabaseId",
                "snapshotId",
                "status",
                "timezone"
            ],
            "inputProperties": {
                "databaseId": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "databaseId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbLinkedDatabases resources.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "databaseStatus": {
                        "type": "string"
                    },
                    "dateCreated": {
                        "type": "string"
                    },
                    "dateModified": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbLinkedDatabasesInfo:NdbLinkedDatabasesInfo"
                        }
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentDatabaseId": {
                        "type": "string"
                    },
                    "parentLinkedDatabaseId": {
                        "type": "string"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbLogCatchups:NdbLogCatchups": {
            "description": "Provides a resource to perform the log cactup for database instance based on the input parameters. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbLogCatchups(\"name\", {databaseId: \"{{ DatabaseID }}\"});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbLogCatchups(\"name\", database_id=\"{{ DatabaseID }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbLogCatchups(\"name\", new()\n    {\n        DatabaseId = \"{{ DatabaseID }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbLogCatchups(ctx, \"name\", \u0026nutanix.NdbLogCatchupsArgs{\n\t\t\tDatabaseId: pulumi.String(\"{{ DatabaseID }}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbLogCatchups;\nimport com.pulumi.nutanix.NdbLogCatchupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbLogCatchups(\"name\", NdbLogCatchupsArgs.builder()\n            .databaseId(\"{{ DatabaseID }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbLogCatchups\n    properties:\n      databaseId: '{{ DatabaseID }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "databaseId": {
                    "type": "string"
                },
                "forRestore": {
                    "type": "boolean",
                    "description": "Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.\n"
                },
                "logCatchupVersion": {
                    "type": "integer",
                    "description": "it helps to perform same operation with same config.\n\n\nSee detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "Time machine id of\n"
                }
            },
            "inputProperties": {
                "databaseId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "forRestore": {
                    "type": "boolean",
                    "description": "Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.\n"
                },
                "logCatchupVersion": {
                    "type": "integer",
                    "description": "it helps to perform same operation with same config.\n\n\nSee detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "Time machine id of\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbLogCatchups resources.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "forRestore": {
                        "type": "boolean",
                        "description": "Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.\n"
                    },
                    "logCatchupVersion": {
                        "type": "integer",
                        "description": "it helps to perform same operation with same config.\n\n\nSee detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "Time machine id of\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask": {
            "description": "Provides a resource to associate a maintenance window with database server VM based on the input parameters. \n\n## Example Usage\n\n### resource to associated maintenance window with OS_PATCHING\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbMaintenanceTask(\"name\", {\n    dbserverIds: [\"{{ dbserver_vm_id }}\"],\n    maintenanceWindowId: \"{{ maintenance_window_id }}\",\n    tasks: [{\n        taskType: \"OS_PATCHING\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbMaintenanceTask(\"name\",\n    dbserver_ids=[\"{{ dbserver_vm_id }}\"],\n    maintenance_window_id=\"{{ maintenance_window_id }}\",\n    tasks=[nutanix.NdbMaintenanceTaskTaskArgs(\n        task_type=\"OS_PATCHING\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbMaintenanceTask(\"name\", new()\n    {\n        DbserverIds = new[]\n        {\n            \"{{ dbserver_vm_id }}\",\n        },\n        MaintenanceWindowId = \"{{ maintenance_window_id }}\",\n        Tasks = new[]\n        {\n            new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs\n            {\n                TaskType = \"OS_PATCHING\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbMaintenanceTask(ctx, \"name\", \u0026nutanix.NdbMaintenanceTaskArgs{\n\t\t\tDbserverIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"{{ dbserver_vm_id }}\"),\n\t\t\t},\n\t\t\tMaintenanceWindowId: pulumi.String(\"{{ maintenance_window_id }}\"),\n\t\t\tTasks: nutanix.NdbMaintenanceTaskTaskArray{\n\t\t\t\t\u0026nutanix.NdbMaintenanceTaskTaskArgs{\n\t\t\t\t\tTaskType: pulumi.String(\"OS_PATCHING\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbMaintenanceTask;\nimport com.pulumi.nutanix.NdbMaintenanceTaskArgs;\nimport com.pulumi.nutanix.inputs.NdbMaintenanceTaskTaskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbMaintenanceTask(\"name\", NdbMaintenanceTaskArgs.builder()\n            .dbserverIds(\"{{ dbserver_vm_id }}\")\n            .maintenanceWindowId(\"{{ maintenance_window_id }}\")\n            .tasks(NdbMaintenanceTaskTaskArgs.builder()\n                .taskType(\"OS_PATCHING\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbMaintenanceTask\n    properties:\n      dbserverIds:\n        - '{{ dbserver_vm_id }}'\n      maintenanceWindowId: '{{ maintenance_window_id }}'\n      tasks:\n        - taskType: OS_PATCHING\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### resource to associated maintenance window with DB_PATCHING\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbMaintenanceTask(\"name\", {\n    dbserverIds: [\"{{ dbserver_vm_id }}\"],\n    maintenanceWindowId: \"{{ maintenance_window_id }}\",\n    tasks: [{\n        taskType: \"DB_PATCHING\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbMaintenanceTask(\"name\",\n    dbserver_ids=[\"{{ dbserver_vm_id }}\"],\n    maintenance_window_id=\"{{ maintenance_window_id }}\",\n    tasks=[nutanix.NdbMaintenanceTaskTaskArgs(\n        task_type=\"DB_PATCHING\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbMaintenanceTask(\"name\", new()\n    {\n        DbserverIds = new[]\n        {\n            \"{{ dbserver_vm_id }}\",\n        },\n        MaintenanceWindowId = \"{{ maintenance_window_id }}\",\n        Tasks = new[]\n        {\n            new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs\n            {\n                TaskType = \"DB_PATCHING\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbMaintenanceTask(ctx, \"name\", \u0026nutanix.NdbMaintenanceTaskArgs{\n\t\t\tDbserverIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"{{ dbserver_vm_id }}\"),\n\t\t\t},\n\t\t\tMaintenanceWindowId: pulumi.String(\"{{ maintenance_window_id }}\"),\n\t\t\tTasks: nutanix.NdbMaintenanceTaskTaskArray{\n\t\t\t\t\u0026nutanix.NdbMaintenanceTaskTaskArgs{\n\t\t\t\t\tTaskType: pulumi.String(\"DB_PATCHING\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbMaintenanceTask;\nimport com.pulumi.nutanix.NdbMaintenanceTaskArgs;\nimport com.pulumi.nutanix.inputs.NdbMaintenanceTaskTaskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbMaintenanceTask(\"name\", NdbMaintenanceTaskArgs.builder()\n            .dbserverIds(\"{{ dbserver_vm_id }}\")\n            .maintenanceWindowId(\"{{ maintenance_window_id }}\")\n            .tasks(NdbMaintenanceTaskTaskArgs.builder()\n                .taskType(\"DB_PATCHING\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbMaintenanceTask\n    properties:\n      dbserverIds:\n        - '{{ dbserver_vm_id }}'\n      maintenanceWindowId: '{{ maintenance_window_id }}'\n      tasks:\n        - taskType: DB_PATCHING\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### resource to associated maintenance window with pre and post command on each task\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbMaintenanceTask(\"name\", {\n    dbserverIds: [\"{{ dbserver_vm_id }}\"],\n    maintenanceWindowId: \"{{ maintenance_window_id }}\",\n    tasks: [\n        {\n            postCommand: \"{{ post_command for db patching }}\",\n            preCommand: \"{{ pre_command for db patching }}\",\n            taskType: \"DB_PATCHING\",\n        },\n        {\n            postCommand: \"{{ post_command for os patching }}\",\n            preCommand: \"{{ pre_command for os patching}}\",\n            taskType: \"OS_PATCHING\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbMaintenanceTask(\"name\",\n    dbserver_ids=[\"{{ dbserver_vm_id }}\"],\n    maintenance_window_id=\"{{ maintenance_window_id }}\",\n    tasks=[\n        nutanix.NdbMaintenanceTaskTaskArgs(\n            post_command=\"{{ post_command for db patching }}\",\n            pre_command=\"{{ pre_command for db patching }}\",\n            task_type=\"DB_PATCHING\",\n        ),\n        nutanix.NdbMaintenanceTaskTaskArgs(\n            post_command=\"{{ post_command for os patching }}\",\n            pre_command=\"{{ pre_command for os patching}}\",\n            task_type=\"OS_PATCHING\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbMaintenanceTask(\"name\", new()\n    {\n        DbserverIds = new[]\n        {\n            \"{{ dbserver_vm_id }}\",\n        },\n        MaintenanceWindowId = \"{{ maintenance_window_id }}\",\n        Tasks = new[]\n        {\n            new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs\n            {\n                PostCommand = \"{{ post_command for db patching }}\",\n                PreCommand = \"{{ pre_command for db patching }}\",\n                TaskType = \"DB_PATCHING\",\n            },\n            new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs\n            {\n                PostCommand = \"{{ post_command for os patching }}\",\n                PreCommand = \"{{ pre_command for os patching}}\",\n                TaskType = \"OS_PATCHING\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbMaintenanceTask(ctx, \"name\", \u0026nutanix.NdbMaintenanceTaskArgs{\n\t\t\tDbserverIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"{{ dbserver_vm_id }}\"),\n\t\t\t},\n\t\t\tMaintenanceWindowId: pulumi.String(\"{{ maintenance_window_id }}\"),\n\t\t\tTasks: nutanix.NdbMaintenanceTaskTaskArray{\n\t\t\t\t\u0026nutanix.NdbMaintenanceTaskTaskArgs{\n\t\t\t\t\tPostCommand: pulumi.String(\"{{ post_command for db patching }}\"),\n\t\t\t\t\tPreCommand:  pulumi.String(\"{{ pre_command for db patching }}\"),\n\t\t\t\t\tTaskType:    pulumi.String(\"DB_PATCHING\"),\n\t\t\t\t},\n\t\t\t\t\u0026nutanix.NdbMaintenanceTaskTaskArgs{\n\t\t\t\t\tPostCommand: pulumi.String(\"{{ post_command for os patching }}\"),\n\t\t\t\t\tPreCommand:  pulumi.String(\"{{ pre_command for os patching}}\"),\n\t\t\t\t\tTaskType:    pulumi.String(\"OS_PATCHING\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbMaintenanceTask;\nimport com.pulumi.nutanix.NdbMaintenanceTaskArgs;\nimport com.pulumi.nutanix.inputs.NdbMaintenanceTaskTaskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbMaintenanceTask(\"name\", NdbMaintenanceTaskArgs.builder()\n            .dbserverIds(\"{{ dbserver_vm_id }}\")\n            .maintenanceWindowId(\"{{ maintenance_window_id }}\")\n            .tasks(            \n                NdbMaintenanceTaskTaskArgs.builder()\n                    .postCommand(\"{{ post_command for db patching }}\")\n                    .preCommand(\"{{ pre_command for db patching }}\")\n                    .taskType(\"DB_PATCHING\")\n                    .build(),\n                NdbMaintenanceTaskTaskArgs.builder()\n                    .postCommand(\"{{ post_command for os patching }}\")\n                    .preCommand(\"{{ pre_command for os patching}}\")\n                    .taskType(\"OS_PATCHING\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbMaintenanceTask\n    properties:\n      dbserverIds:\n        - '{{ dbserver_vm_id }}'\n      maintenanceWindowId: '{{ maintenance_window_id }}'\n      tasks:\n        - postCommand: '{{ post_command for db patching }}'\n          preCommand: '{{ pre_command for db patching }}'\n          taskType: DB_PATCHING\n        - postCommand: '{{ post_command for os patching }}'\n          preCommand: '{{ pre_command for os patching}}'\n          taskType: OS_PATCHING\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "dbserverClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "dbserver cluster ids. Conflicts with \"dbserver_id\"\n"
                },
                "dbserverIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "dbserver vm id. Conflicts with \"dbserver_cluster\"\n"
                },
                "entityTaskAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceTaskEntityTaskAssociation:NdbMaintenanceTaskEntityTaskAssociation"
                    },
                    "description": "Entity Task Association  List.\n"
                },
                "maintenanceWindowId": {
                    "type": "string",
                    "description": "maintenance window id which has to be associated\n"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceTaskTask:NdbMaintenanceTaskTask"
                    },
                    "description": "task input for Operating System Patching or Database Patching or both\n"
                }
            },
            "required": [
                "entityTaskAssociations",
                "maintenanceWindowId"
            ],
            "inputProperties": {
                "dbserverClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "dbserver cluster ids. Conflicts with \"dbserver_id\"\n"
                },
                "dbserverIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "dbserver vm id. Conflicts with \"dbserver_cluster\"\n"
                },
                "maintenanceWindowId": {
                    "type": "string",
                    "description": "maintenance window id which has to be associated\n"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceTaskTask:NdbMaintenanceTaskTask"
                    },
                    "description": "task input for Operating System Patching or Database Patching or both\n"
                }
            },
            "requiredInputs": [
                "maintenanceWindowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbMaintenanceTask resources.\n",
                "properties": {
                    "dbserverClusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "dbserver cluster ids. Conflicts with \"dbserver_id\"\n"
                    },
                    "dbserverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "dbserver vm id. Conflicts with \"dbserver_cluster\"\n"
                    },
                    "entityTaskAssociations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbMaintenanceTaskEntityTaskAssociation:NdbMaintenanceTaskEntityTaskAssociation"
                        },
                        "description": "Entity Task Association  List.\n"
                    },
                    "maintenanceWindowId": {
                        "type": "string",
                        "description": "maintenance window id which has to be associated\n"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbMaintenanceTaskTask:NdbMaintenanceTaskTask"
                        },
                        "description": "task input for Operating System Patching or Database Patching or both\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbMaintenanceWindow:NdbMaintenanceWindow": {
            "description": "Provides a resource to create maintenance window based on the input parameters. \n\n## Example Usage\n\n### resource to create weekly maintenance window\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst acctest_managed = new nutanix.NdbMaintenanceWindow(\"acctest-managed\", {\n    dayOfWeek: \"TUESDAY\",\n    description: \"desc\",\n    duration: 3,\n    recurrence: \"WEEKLY\",\n    startTime: \"17:04:47\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nacctest_managed = nutanix.NdbMaintenanceWindow(\"acctest-managed\",\n    day_of_week=\"TUESDAY\",\n    description=\"desc\",\n    duration=3,\n    recurrence=\"WEEKLY\",\n    start_time=\"17:04:47\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acctest_managed = new Nutanix.NdbMaintenanceWindow(\"acctest-managed\", new()\n    {\n        DayOfWeek = \"TUESDAY\",\n        Description = \"desc\",\n        Duration = 3,\n        Recurrence = \"WEEKLY\",\n        StartTime = \"17:04:47\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbMaintenanceWindow(ctx, \"acctest-managed\", \u0026nutanix.NdbMaintenanceWindowArgs{\n\t\t\tDayOfWeek:   pulumi.String(\"TUESDAY\"),\n\t\t\tDescription: pulumi.String(\"desc\"),\n\t\t\tDuration:    pulumi.Int(3),\n\t\t\tRecurrence:  pulumi.String(\"WEEKLY\"),\n\t\t\tStartTime:   pulumi.String(\"17:04:47\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbMaintenanceWindow;\nimport com.pulumi.nutanix.NdbMaintenanceWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var acctest_managed = new NdbMaintenanceWindow(\"acctest-managed\", NdbMaintenanceWindowArgs.builder()\n            .dayOfWeek(\"TUESDAY\")\n            .description(\"desc\")\n            .duration(3)\n            .recurrence(\"WEEKLY\")\n            .startTime(\"17:04:47\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acctest-managed:\n    type: nutanix:NdbMaintenanceWindow\n    properties:\n      dayOfWeek: TUESDAY\n      description: desc\n      duration: 3\n      recurrence: WEEKLY\n      startTime: 17:04:47\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### resource to create monthly maintenance window\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst acctest_managed = new nutanix.NdbMaintenanceWindow(\"acctest-managed\", {\n    dayOfWeek: \"TUESDAY\",\n    description: \"description\",\n    duration: 2,\n    recurrence: \"MONTHLY\",\n    startTime: \"17:04:47\",\n    weekOfMonth: 4,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nacctest_managed = nutanix.NdbMaintenanceWindow(\"acctest-managed\",\n    day_of_week=\"TUESDAY\",\n    description=\"description\",\n    duration=2,\n    recurrence=\"MONTHLY\",\n    start_time=\"17:04:47\",\n    week_of_month=4)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acctest_managed = new Nutanix.NdbMaintenanceWindow(\"acctest-managed\", new()\n    {\n        DayOfWeek = \"TUESDAY\",\n        Description = \"description\",\n        Duration = 2,\n        Recurrence = \"MONTHLY\",\n        StartTime = \"17:04:47\",\n        WeekOfMonth = 4,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbMaintenanceWindow(ctx, \"acctest-managed\", \u0026nutanix.NdbMaintenanceWindowArgs{\n\t\t\tDayOfWeek:   pulumi.String(\"TUESDAY\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tDuration:    pulumi.Int(2),\n\t\t\tRecurrence:  pulumi.String(\"MONTHLY\"),\n\t\t\tStartTime:   pulumi.String(\"17:04:47\"),\n\t\t\tWeekOfMonth: pulumi.Int(4),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbMaintenanceWindow;\nimport com.pulumi.nutanix.NdbMaintenanceWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var acctest_managed = new NdbMaintenanceWindow(\"acctest-managed\", NdbMaintenanceWindowArgs.builder()\n            .dayOfWeek(\"TUESDAY\")\n            .description(\"description\")\n            .duration(2)\n            .recurrence(\"MONTHLY\")\n            .startTime(\"17:04:47\")\n            .weekOfMonth(4)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acctest-managed:\n    type: nutanix:NdbMaintenanceWindow\n    properties:\n      dayOfWeek: TUESDAY\n      description: description\n      duration: 2\n      recurrence: MONTHLY\n      startTime: 17:04:47\n      weekOfMonth: 4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "access level\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "created date of maintenance window\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of maintenance window\n"
                },
                "dayOfWeek": {
                    "type": "string",
                    "description": "Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for maintenance window\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "duration in hours. Default is 2\n"
                },
                "entityTaskAssocs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowEntityTaskAssoc:NdbMaintenanceWindowEntityTaskAssoc"
                    },
                    "description": "entity task association for maintenance window\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the maintenance window.\n"
                },
                "nextRunTime": {
                    "type": "string",
                    "description": "next run time for maintenance window to trigger\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "owner id of maintenance window\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowProperty:NdbMaintenanceWindowProperty"
                    },
                    "description": "properties of maintenance window\n"
                },
                "recurrence": {
                    "type": "string",
                    "description": "Supported values [ MONTHLY, WEEKLY ]\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowSchedule:NdbMaintenanceWindowSchedule"
                    },
                    "description": "schedule of maintenance window\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "start time for maintenance window to trigger\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of maintennace window\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowTag:NdbMaintenanceWindowTag"
                    },
                    "description": "tags of maintenance window\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone . Default is Asia/Calcutta .\n"
                },
                "weekOfMonth": {
                    "type": "integer",
                    "description": "week of the month. Supports [1, 2, 3, 4] .\n"
                }
            },
            "required": [
                "accessLevel",
                "dateCreated",
                "dateModified",
                "entityTaskAssocs",
                "name",
                "nextRunTime",
                "ownerId",
                "properties",
                "recurrence",
                "schedules",
                "startTime",
                "status",
                "tags"
            ],
            "inputProperties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for maintenance window\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "duration in hours. Default is 2\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the maintenance window.\n"
                },
                "recurrence": {
                    "type": "string",
                    "description": "Supported values [ MONTHLY, WEEKLY ]\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "start time for maintenance window to trigger\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbMaintenanceWindowTag:NdbMaintenanceWindowTag"
                    },
                    "description": "tags of maintenance window\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "timezone . Default is Asia/Calcutta .\n"
                },
                "weekOfMonth": {
                    "type": "integer",
                    "description": "week of the month. Supports [1, 2, 3, 4] .\n"
                }
            },
            "requiredInputs": [
                "recurrence",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbMaintenanceWindow resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "access level\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "created date of maintenance window\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "modified date of maintenance window\n"
                    },
                    "dayOfWeek": {
                        "type": "string",
                        "description": "Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for maintenance window\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "duration in hours. Default is 2\n"
                    },
                    "entityTaskAssocs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbMaintenanceWindowEntityTaskAssoc:NdbMaintenanceWindowEntityTaskAssoc"
                        },
                        "description": "entity task association for maintenance window\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the maintenance window.\n"
                    },
                    "nextRunTime": {
                        "type": "string",
                        "description": "next run time for maintenance window to trigger\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "owner id of maintenance window\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbMaintenanceWindowProperty:NdbMaintenanceWindowProperty"
                        },
                        "description": "properties of maintenance window\n"
                    },
                    "recurrence": {
                        "type": "string",
                        "description": "Supported values [ MONTHLY, WEEKLY ]\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbMaintenanceWindowSchedule:NdbMaintenanceWindowSchedule"
                        },
                        "description": "schedule of maintenance window\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "start time for maintenance window to trigger\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of maintennace window\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbMaintenanceWindowTag:NdbMaintenanceWindowTag"
                        },
                        "description": "tags of maintenance window\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "timezone . Default is Asia/Calcutta .\n"
                    },
                    "weekOfMonth": {
                        "type": "integer",
                        "description": "week of the month. Supports [1, 2, 3, 4] .\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbNetwork:NdbNetwork": {
            "description": "Provides a resource to create VLANs and IP address pools that are managed both in NDB and outside NDB. \n\n## Example Usage\n\n### resource to create network for NDB\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbNetwork(\"name\", {\n    clusterId: \"{{ cluster_id }}\",\n    gateway: \"{{ gatway for the vlan }}\",\n    ipPools: [{\n        endIp: \"{{ ending address range }}\",\n        startIp: \"{{ starting address range}}\",\n    }],\n    primaryDns: \" {{ primary dns for the vlan }}\",\n    secondaryDns: \"{{secondary dns for the vlan }}\",\n    subnetMask: \"{{ subnet mask for the vlan}}\",\n    type: \"Static\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbNetwork(\"name\",\n    cluster_id=\"{{ cluster_id }}\",\n    gateway=\"{{ gatway for the vlan }}\",\n    ip_pools=[nutanix.NdbNetworkIpPoolArgs(\n        end_ip=\"{{ ending address range }}\",\n        start_ip=\"{{ starting address range}}\",\n    )],\n    primary_dns=\" {{ primary dns for the vlan }}\",\n    secondary_dns=\"{{secondary dns for the vlan }}\",\n    subnet_mask=\"{{ subnet mask for the vlan}}\",\n    type=\"Static\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbNetwork(\"name\", new()\n    {\n        ClusterId = \"{{ cluster_id }}\",\n        Gateway = \"{{ gatway for the vlan }}\",\n        IpPools = new[]\n        {\n            new Nutanix.Inputs.NdbNetworkIpPoolArgs\n            {\n                EndIp = \"{{ ending address range }}\",\n                StartIp = \"{{ starting address range}}\",\n            },\n        },\n        PrimaryDns = \" {{ primary dns for the vlan }}\",\n        SecondaryDns = \"{{secondary dns for the vlan }}\",\n        SubnetMask = \"{{ subnet mask for the vlan}}\",\n        Type = \"Static\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbNetwork(ctx, \"name\", \u0026nutanix.NdbNetworkArgs{\n\t\t\tClusterId: pulumi.String(\"{{ cluster_id }}\"),\n\t\t\tGateway:   pulumi.String(\"{{ gatway for the vlan }}\"),\n\t\t\tIpPools: nutanix.NdbNetworkIpPoolArray{\n\t\t\t\t\u0026nutanix.NdbNetworkIpPoolArgs{\n\t\t\t\t\tEndIp:   pulumi.String(\"{{ ending address range }}\"),\n\t\t\t\t\tStartIp: pulumi.String(\"{{ starting address range}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPrimaryDns:   pulumi.String(\" {{ primary dns for the vlan }}\"),\n\t\t\tSecondaryDns: pulumi.String(\"{{secondary dns for the vlan }}\"),\n\t\t\tSubnetMask:   pulumi.String(\"{{ subnet mask for the vlan}}\"),\n\t\t\tType:         pulumi.String(\"Static\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbNetwork;\nimport com.pulumi.nutanix.NdbNetworkArgs;\nimport com.pulumi.nutanix.inputs.NdbNetworkIpPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbNetwork(\"name\", NdbNetworkArgs.builder()\n            .clusterId(\"{{ cluster_id }}\")\n            .gateway(\"{{ gatway for the vlan }}\")\n            .ipPools(NdbNetworkIpPoolArgs.builder()\n                .endIp(\"{{ ending address range }}\")\n                .startIp(\"{{ starting address range}}\")\n                .build())\n            .primaryDns(\" {{ primary dns for the vlan }}\")\n            .secondaryDns(\"{{secondary dns for the vlan }}\")\n            .subnetMask(\"{{ subnet mask for the vlan}}\")\n            .type(\"Static\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbNetwork\n    properties:\n      clusterId: '{{ cluster_id }}'\n      gateway: '{{ gatway for the vlan }}'\n      ipPools:\n        - endIp: '{{ ending address range }}'\n          startIp: '{{ starting address range}}'\n      primaryDns: ' {{ primary dns for the vlan }}'\n      secondaryDns: '{{secondary dns for the vlan }}'\n      subnetMask: '{{ subnet mask for the vlan}}'\n      type: Static\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "Select the Nutanix cluster on which you want to add the VLAN.\n"
                },
                "dnsDomain": {
                    "type": "string",
                    "description": "dns domain for vlan. (Static IP address assignment only)\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for vlan. Supports in Static IP address assignment only\n"
                },
                "ipPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbNetworkIpPool:NdbNetworkIpPool"
                    },
                    "description": "Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Managed by NDB or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the vlan to be attached in NDB\n"
                },
                "primaryDns": {
                    "type": "string",
                    "description": "primary dns for vlan. (Static IP address assignment only)\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbNetworkProperty:NdbNetworkProperty"
                    },
                    "description": "properties of network\n"
                },
                "propertiesMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbNetworkPropertiesMap:NdbNetworkPropertiesMap"
                    },
                    "description": "properties map of network\n"
                },
                "secondaryDns": {
                    "type": "string",
                    "description": "secondary dns for vlan. (Static IP address assignment only)\n"
                },
                "stretchedVlanId": {
                    "type": "string",
                    "description": "stretched vlan id\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask for vlan. (Static IP address assignment only)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Vlan type. Supports [DHCP, Static]\n"
                }
            },
            "required": [
                "clusterId",
                "ipPools",
                "managed",
                "name",
                "properties",
                "propertiesMaps",
                "stretchedVlanId",
                "type"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "Select the Nutanix cluster on which you want to add the VLAN.\n"
                },
                "dnsDomain": {
                    "type": "string",
                    "description": "dns domain for vlan. (Static IP address assignment only)\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for vlan. Supports in Static IP address assignment only\n"
                },
                "ipPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbNetworkIpPool:NdbNetworkIpPool"
                    },
                    "description": "Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the vlan to be attached in NDB\n"
                },
                "primaryDns": {
                    "type": "string",
                    "description": "primary dns for vlan. (Static IP address assignment only)\n"
                },
                "secondaryDns": {
                    "type": "string",
                    "description": "secondary dns for vlan. (Static IP address assignment only)\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask for vlan. (Static IP address assignment only)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Vlan type. Supports [DHCP, Static]\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbNetwork resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "Select the Nutanix cluster on which you want to add the VLAN.\n"
                    },
                    "dnsDomain": {
                        "type": "string",
                        "description": "dns domain for vlan. (Static IP address assignment only)\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway for vlan. Supports in Static IP address assignment only\n"
                    },
                    "ipPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbNetworkIpPool:NdbNetworkIpPool"
                        },
                        "description": "Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Managed by NDB or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the vlan to be attached in NDB\n"
                    },
                    "primaryDns": {
                        "type": "string",
                        "description": "primary dns for vlan. (Static IP address assignment only)\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbNetworkProperty:NdbNetworkProperty"
                        },
                        "description": "properties of network\n"
                    },
                    "propertiesMaps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbNetworkPropertiesMap:NdbNetworkPropertiesMap"
                        },
                        "description": "properties map of network\n"
                    },
                    "secondaryDns": {
                        "type": "string",
                        "description": "secondary dns for vlan. (Static IP address assignment only)\n"
                    },
                    "stretchedVlanId": {
                        "type": "string",
                        "description": "stretched vlan id\n"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "Subnet mask for vlan. (Static IP address assignment only)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Vlan type. Supports [DHCP, Static]\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbProfile:NdbProfile": {
            "properties": {
                "assocDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "assocDbServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clusterAvailabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileClusterAvailability:NdbProfileClusterAvailability"
                    }
                },
                "computeProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileComputeProfile:NdbProfileComputeProfile"
                    }
                },
                "databaseParameterProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileDatabaseParameterProfile:NdbProfileDatabaseParameterProfile"
                    }
                },
                "description": {
                    "type": "string"
                },
                "engineType": {
                    "type": "string"
                },
                "latestVersion": {
                    "type": "string"
                },
                "latestVersionId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networkProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileNetworkProfile:NdbProfileNetworkProfile"
                    }
                },
                "nxClusterId": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "published": {
                    "type": "boolean"
                },
                "softwareProfile": {
                    "$ref": "#/types/nutanix:index/NdbProfileSoftwareProfile:NdbProfileSoftwareProfile"
                },
                "status": {
                    "type": "string"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileVersion:NdbProfileVersion"
                    }
                }
            },
            "required": [
                "assocDatabases",
                "assocDbServers",
                "clusterAvailabilities",
                "engineType",
                "latestVersion",
                "latestVersionId",
                "name",
                "nxClusterId",
                "owner",
                "status",
                "versions"
            ],
            "inputProperties": {
                "computeProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileComputeProfile:NdbProfileComputeProfile"
                    }
                },
                "databaseParameterProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileDatabaseParameterProfile:NdbProfileDatabaseParameterProfile"
                    }
                },
                "description": {
                    "type": "string"
                },
                "engineType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networkProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbProfileNetworkProfile:NdbProfileNetworkProfile"
                    }
                },
                "published": {
                    "type": "boolean"
                },
                "softwareProfile": {
                    "$ref": "#/types/nutanix:index/NdbProfileSoftwareProfile:NdbProfileSoftwareProfile"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbProfile resources.\n",
                "properties": {
                    "assocDatabases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assocDbServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clusterAvailabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbProfileClusterAvailability:NdbProfileClusterAvailability"
                        }
                    },
                    "computeProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbProfileComputeProfile:NdbProfileComputeProfile"
                        }
                    },
                    "databaseParameterProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbProfileDatabaseParameterProfile:NdbProfileDatabaseParameterProfile"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "engineType": {
                        "type": "string"
                    },
                    "latestVersion": {
                        "type": "string"
                    },
                    "latestVersionId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbProfileNetworkProfile:NdbProfileNetworkProfile"
                        }
                    },
                    "nxClusterId": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "published": {
                        "type": "boolean"
                    },
                    "softwareProfile": {
                        "$ref": "#/types/nutanix:index/NdbProfileSoftwareProfile:NdbProfileSoftwareProfile"
                    },
                    "status": {
                        "type": "string"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbProfileVersion:NdbProfileVersion"
                        }
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase": {
            "description": "Provides a resource to register the database based on the input parameters. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\n// register PostgreSQL database with instance not registered on VM\nconst name = new nutanix.NdbRegisterDatabase(\"name\", {\n    category: \"DEFAULT\",\n    databaseName: \"test-inst\",\n    databaseType: \"postgres_database\",\n    description: \"added by terraform\",\n    nxClusterId: \"{{ cluster_ID }}\",\n    postgressInfos: [{\n        backupPolicy: \"prefer_secondary\",\n        dbName: \"testdb1\",\n        dbPassword: \"pass\",\n        dbUser: \"postgres\",\n        listenerPort: \"5432\",\n        postgresSoftwareHome: \"{{ directory where the PostgreSQL database software is installed }}\",\n    }],\n    resetDescriptionInNxCluster: false,\n    timeMachineInfo: {\n        description: \"description of tms\",\n        name: \"test-pg-inst-regis\",\n        schedule: {\n            continuousschedule: {\n                enabled: true,\n                logbackupinterval: 30,\n                snapshotsperday: 1,\n            },\n            monthlyschedule: {\n                dayofmonth: 27,\n                enabled: true,\n            },\n            quartelyschedule: {\n                dayofmonth: 27,\n                enabled: true,\n                startmonth: \"JANUARY\",\n            },\n            snapshottimeofday: {\n                hours: 16,\n                minutes: 0,\n                seconds: 0,\n            },\n            weeklyschedule: {\n                dayofweek: \"WEDNESDAY\",\n                enabled: true,\n            },\n            yearlyschedule: {\n                dayofmonth: 31,\n                enabled: false,\n                month: \"DECEMBER\",\n            },\n        },\n        slaid: \" {{ SLA ID}}\",\n    },\n    vmIp: \"{{ vm_ip }}\",\n    vmPassword: \"{{ vm_password }}\",\n    vmUsername: \"{{ vm_username }}\",\n    workingDirectory: \"/tmp\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\n# register PostgreSQL database with instance not registered on VM\nname = nutanix.NdbRegisterDatabase(\"name\",\n    category=\"DEFAULT\",\n    database_name=\"test-inst\",\n    database_type=\"postgres_database\",\n    description=\"added by terraform\",\n    nx_cluster_id=\"{{ cluster_ID }}\",\n    postgress_infos=[nutanix.NdbRegisterDatabasePostgressInfoArgs(\n        backup_policy=\"prefer_secondary\",\n        db_name=\"testdb1\",\n        db_password=\"pass\",\n        db_user=\"postgres\",\n        listener_port=\"5432\",\n        postgres_software_home=\"{{ directory where the PostgreSQL database software is installed }}\",\n    )],\n    reset_description_in_nx_cluster=False,\n    time_machine_info=nutanix.NdbRegisterDatabaseTimeMachineInfoArgs(\n        description=\"description of tms\",\n        name=\"test-pg-inst-regis\",\n        schedule=nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleArgs(\n            continuousschedule=nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs(\n                enabled=True,\n                logbackupinterval=30,\n                snapshotsperday=1,\n            ),\n            monthlyschedule=nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs(\n                dayofmonth=27,\n                enabled=True,\n            ),\n            quartelyschedule=nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs(\n                dayofmonth=27,\n                enabled=True,\n                startmonth=\"JANUARY\",\n            ),\n            snapshottimeofday=nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs(\n                hours=16,\n                minutes=0,\n                seconds=0,\n            ),\n            weeklyschedule=nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs(\n                dayofweek=\"WEDNESDAY\",\n                enabled=True,\n            ),\n            yearlyschedule=nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs(\n                dayofmonth=31,\n                enabled=False,\n                month=\"DECEMBER\",\n            ),\n        ),\n        slaid=\" {{ SLA ID}}\",\n    ),\n    vm_ip=\"{{ vm_ip }}\",\n    vm_password=\"{{ vm_password }}\",\n    vm_username=\"{{ vm_username }}\",\n    working_directory=\"/tmp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // register PostgreSQL database with instance not registered on VM\n    var name = new Nutanix.NdbRegisterDatabase(\"name\", new()\n    {\n        Category = \"DEFAULT\",\n        DatabaseName = \"test-inst\",\n        DatabaseType = \"postgres_database\",\n        Description = \"added by terraform\",\n        NxClusterId = \"{{ cluster_ID }}\",\n        PostgressInfos = new[]\n        {\n            new Nutanix.Inputs.NdbRegisterDatabasePostgressInfoArgs\n            {\n                BackupPolicy = \"prefer_secondary\",\n                DbName = \"testdb1\",\n                DbPassword = \"pass\",\n                DbUser = \"postgres\",\n                ListenerPort = \"5432\",\n                PostgresSoftwareHome = \"{{ directory where the PostgreSQL database software is installed }}\",\n            },\n        },\n        ResetDescriptionInNxCluster = false,\n        TimeMachineInfo = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoArgs\n        {\n            Description = \"description of tms\",\n            Name = \"test-pg-inst-regis\",\n            Schedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleArgs\n            {\n                Continuousschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs\n                {\n                    Enabled = true,\n                    Logbackupinterval = 30,\n                    Snapshotsperday = 1,\n                },\n                Monthlyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs\n                {\n                    Dayofmonth = 27,\n                    Enabled = true,\n                },\n                Quartelyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs\n                {\n                    Dayofmonth = 27,\n                    Enabled = true,\n                    Startmonth = \"JANUARY\",\n                },\n                Snapshottimeofday = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs\n                {\n                    Hours = 16,\n                    Minutes = 0,\n                    Seconds = 0,\n                },\n                Weeklyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs\n                {\n                    Dayofweek = \"WEDNESDAY\",\n                    Enabled = true,\n                },\n                Yearlyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs\n                {\n                    Dayofmonth = 31,\n                    Enabled = false,\n                    Month = \"DECEMBER\",\n                },\n            },\n            Slaid = \" {{ SLA ID}}\",\n        },\n        VmIp = \"{{ vm_ip }}\",\n        VmPassword = \"{{ vm_password }}\",\n        VmUsername = \"{{ vm_username }}\",\n        WorkingDirectory = \"/tmp\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// register PostgreSQL database with instance not registered on VM\n\t\t_, err := nutanix.NewNdbRegisterDatabase(ctx, \"name\", \u0026nutanix.NdbRegisterDatabaseArgs{\n\t\t\tCategory:     pulumi.String(\"DEFAULT\"),\n\t\t\tDatabaseName: pulumi.String(\"test-inst\"),\n\t\t\tDatabaseType: pulumi.String(\"postgres_database\"),\n\t\t\tDescription:  pulumi.String(\"added by terraform\"),\n\t\t\tNxClusterId:  pulumi.String(\"{{ cluster_ID }}\"),\n\t\t\tPostgressInfos: nutanix.NdbRegisterDatabasePostgressInfoArray{\n\t\t\t\t\u0026nutanix.NdbRegisterDatabasePostgressInfoArgs{\n\t\t\t\t\tBackupPolicy:         pulumi.String(\"prefer_secondary\"),\n\t\t\t\t\tDbName:               pulumi.String(\"testdb1\"),\n\t\t\t\t\tDbPassword:           pulumi.String(\"pass\"),\n\t\t\t\t\tDbUser:               pulumi.String(\"postgres\"),\n\t\t\t\t\tListenerPort:         pulumi.String(\"5432\"),\n\t\t\t\t\tPostgresSoftwareHome: pulumi.String(\"{{ directory where the PostgreSQL database software is installed }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResetDescriptionInNxCluster: pulumi.Bool(false),\n\t\t\tTimeMachineInfo: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoArgs{\n\t\t\t\tDescription: pulumi.String(\"description of tms\"),\n\t\t\t\tName:        pulumi.String(\"test-pg-inst-regis\"),\n\t\t\t\tSchedule: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleArgs{\n\t\t\t\t\tContinuousschedule: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs{\n\t\t\t\t\t\tEnabled:           pulumi.Bool(true),\n\t\t\t\t\t\tLogbackupinterval: pulumi.Int(30),\n\t\t\t\t\t\tSnapshotsperday:   pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t\tMonthlyschedule: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs{\n\t\t\t\t\t\tDayofmonth: pulumi.Int(27),\n\t\t\t\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t\tQuartelyschedule: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs{\n\t\t\t\t\t\tDayofmonth: pulumi.Int(27),\n\t\t\t\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\t\t\t\tStartmonth: pulumi.String(\"JANUARY\"),\n\t\t\t\t\t},\n\t\t\t\t\tSnapshottimeofday: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs{\n\t\t\t\t\t\tHours:   pulumi.Int(16),\n\t\t\t\t\t\tMinutes: pulumi.Int(0),\n\t\t\t\t\t\tSeconds: pulumi.Int(0),\n\t\t\t\t\t},\n\t\t\t\t\tWeeklyschedule: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs{\n\t\t\t\t\t\tDayofweek: pulumi.String(\"WEDNESDAY\"),\n\t\t\t\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t\tYearlyschedule: \u0026nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs{\n\t\t\t\t\t\tDayofmonth: pulumi.Int(31),\n\t\t\t\t\t\tEnabled:    pulumi.Bool(false),\n\t\t\t\t\t\tMonth:      pulumi.String(\"DECEMBER\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSlaid: pulumi.String(\" {{ SLA ID}}\"),\n\t\t\t},\n\t\t\tVmIp:             pulumi.String(\"{{ vm_ip }}\"),\n\t\t\tVmPassword:       pulumi.String(\"{{ vm_password }}\"),\n\t\t\tVmUsername:       pulumi.String(\"{{ vm_username }}\"),\n\t\t\tWorkingDirectory: pulumi.String(\"/tmp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbRegisterDatabase;\nimport com.pulumi.nutanix.NdbRegisterDatabaseArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabasePostgressInfoArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoScheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs;\nimport com.pulumi.nutanix.inputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // register PostgreSQL database with instance not registered on VM\n        var name = new NdbRegisterDatabase(\"name\", NdbRegisterDatabaseArgs.builder()\n            .category(\"DEFAULT\")\n            .databaseName(\"test-inst\")\n            .databaseType(\"postgres_database\")\n            .description(\"added by terraform\")\n            .nxClusterId(\"{{ cluster_ID }}\")\n            .postgressInfos(NdbRegisterDatabasePostgressInfoArgs.builder()\n                .backupPolicy(\"prefer_secondary\")\n                .dbName(\"testdb1\")\n                .dbPassword(\"pass\")\n                .dbUser(\"postgres\")\n                .listenerPort(\"5432\")\n                .postgresSoftwareHome(\"{{ directory where the PostgreSQL database software is installed }}\")\n                .build())\n            .resetDescriptionInNxCluster(false)\n            .timeMachineInfo(NdbRegisterDatabaseTimeMachineInfoArgs.builder()\n                .description(\"description of tms\")\n                .name(\"test-pg-inst-regis\")\n                .schedule(NdbRegisterDatabaseTimeMachineInfoScheduleArgs.builder()\n                    .continuousschedule(NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs.builder()\n                        .enabled(true)\n                        .logbackupinterval(30)\n                        .snapshotsperday(1)\n                        .build())\n                    .monthlyschedule(NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs.builder()\n                        .dayofmonth(\"27\")\n                        .enabled(true)\n                        .build())\n                    .quartelyschedule(NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs.builder()\n                        .dayofmonth(27)\n                        .enabled(true)\n                        .startmonth(\"JANUARY\")\n                        .build())\n                    .snapshottimeofday(NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs.builder()\n                        .hours(16)\n                        .minutes(0)\n                        .seconds(0)\n                        .build())\n                    .weeklyschedule(NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs.builder()\n                        .dayofweek(\"WEDNESDAY\")\n                        .enabled(true)\n                        .build())\n                    .yearlyschedule(NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs.builder()\n                        .dayofmonth(31)\n                        .enabled(false)\n                        .month(\"DECEMBER\")\n                        .build())\n                    .build())\n                .slaid(\" {{ SLA ID}}\")\n                .build())\n            .vmIp(\"{{ vm_ip }}\")\n            .vmPassword(\"{{ vm_password }}\")\n            .vmUsername(\"{{ vm_username }}\")\n            .workingDirectory(\"/tmp\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # register PostgreSQL database with instance not registered on VM\n  name:\n    type: nutanix:NdbRegisterDatabase\n    properties:\n      category: DEFAULT\n      databaseName: test-inst\n      databaseType: postgres_database\n      description: added by terraform\n      nxClusterId: '{{ cluster_ID }}'\n      postgressInfos:\n        - backupPolicy: prefer_secondary\n          dbName: testdb1\n          dbPassword: pass\n          dbUser: postgres\n          listenerPort: '5432'\n          postgresSoftwareHome: '{{ directory where the PostgreSQL database software is installed }}'\n      resetDescriptionInNxCluster: false\n      # time Machine Info\n      timeMachineInfo:\n        description: description of tms\n        name: test-pg-inst-regis\n        schedule:\n          continuousschedule:\n            enabled: true\n            logbackupinterval: 30\n            snapshotsperday: 1\n          monthlyschedule:\n            dayofmonth: '27'\n            enabled: true\n          quartelyschedule:\n            dayofmonth: 27\n            enabled: true\n            startmonth: JANUARY\n          snapshottimeofday:\n            hours: 16\n            minutes: 0\n            seconds: 0\n          weeklyschedule:\n            dayofweek: WEDNESDAY\n            enabled: true\n          yearlyschedule:\n            dayofmonth: 31\n            enabled: false\n            month: DECEMBER\n        slaid: ' {{ SLA ID}}'\n      # registered vm info\n      vmIp: '{{ vm_ip }}'\n      vmPassword: '{{ vm_password }}'\n      vmUsername: '{{ vm_username }}'\n      # optional\n      workingDirectory: /tmp\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "actionarguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseActionargument:NdbRegisterDatabaseActionargument"
                    },
                    "description": "action arguments\n"
                },
                "autoTuneStagingDrive": {
                    "type": "boolean",
                    "description": "auto tune staging drive. Default is true\n"
                },
                "category": {
                    "type": "string",
                    "description": "category of database. Default is \"DEFAULT\"\n"
                },
                "clone": {
                    "type": "boolean",
                    "description": "whether instance is cloned or not\n"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clustered or not. Default is false\n"
                },
                "databaseClusterType": {
                    "type": "string",
                    "description": "database cluster type\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "name of database\n"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseDatabaseNode:NdbRegisterDatabaseDatabaseNode"
                    },
                    "description": "database nodes associated with database instance\n"
                },
                "databaseStatus": {
                    "type": "string",
                    "description": "status of database\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "type of database. Required value: postgres_database\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "date created for db instance\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "date modified for instance\n"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "dbserver logical cluster\n"
                },
                "dbserverLogicalClusterId": {
                    "type": "string",
                    "description": "dbserver logical cluster id\n"
                },
                "delete": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database from the VM. Default value is false\n"
                },
                "deleteLogicalCluster": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the logical cluster. Default is true\n"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "forced": {
                    "type": "boolean",
                    "description": "- (Optional) Force delete of instance. Default is false\n"
                },
                "forcedInstall": {
                    "type": "boolean",
                    "description": "forced install. Default:  true\n"
                },
                "groupInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfo:NdbRegisterDatabaseInfo"
                    },
                    "description": "info of instance\n"
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLcmConfig:NdbRegisterDatabaseLcmConfig"
                    },
                    "description": "LCM config of instance\n"
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLinkedDatabase:NdbRegisterDatabaseLinkedDatabase"
                    },
                    "description": "linked databases within database instance\n"
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of database instance\n"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "cluster on which NDB is present\n"
                },
                "parentDatabaseId": {
                    "type": "string",
                    "description": "parent database id\n"
                },
                "parentSourceDatabaseId": {
                    "type": "string",
                    "description": "parent source database id\n"
                },
                "parentTimeMachineId": {
                    "type": "string",
                    "description": "parent time machine id\n"
                },
                "postgressInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabasePostgressInfo:NdbRegisterDatabasePostgressInfo"
                    },
                    "description": "Postgress_Info for registering.\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseProperty:NdbRegisterDatabaseProperty"
                    },
                    "description": "properties of database created\n"
                },
                "remove": {
                    "type": "boolean",
                    "description": "- (Optional) Unregister the database from NDB. Default value is true\n"
                },
                "resetDescriptionInNxCluster": {
                    "type": "boolean",
                    "description": "Reset description in cluster\n"
                },
                "softRemove": {
                    "type": "boolean",
                    "description": "- (Optional) Soft remove. Default will be false\n"
                },
                "status": {
                    "type": "string",
                    "description": "status of instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTag:NdbRegisterDatabaseTag"
                    },
                    "description": "tags\n"
                },
                "timeMachineId": {
                    "type": "string",
                    "description": "time machine id of instance\n"
                },
                "timeMachineInfo": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfo:NdbRegisterDatabaseTimeMachineInfo",
                    "description": "Time Machine info\n"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachine:NdbRegisterDatabaseTimeMachine"
                    },
                    "description": "Time Machine details of instance\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "timezone on which instance is created xw\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of database\n"
                },
                "vmDescription": {
                    "type": "string",
                    "description": "description for VM\n"
                },
                "vmIp": {
                    "type": "string",
                    "description": "IP address of dbserver VM\n"
                },
                "vmPassword": {
                    "type": "string",
                    "description": "password of the NDB drive user account.\n",
                    "secret": true
                },
                "vmSshkey": {
                    "type": "string",
                    "description": "ssh key for vm\n",
                    "secret": true
                },
                "vmUsername": {
                    "type": "string",
                    "description": "username of the NDB drive user account that has sudo access.\n"
                },
                "workingDirectory": {
                    "type": "string",
                    "description": "working directory. Default is /tmp\n"
                }
            },
            "required": [
                "clone",
                "databaseClusterType",
                "databaseName",
                "databaseNodes",
                "databaseStatus",
                "databaseType",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "dbserverLogicalClusterId",
                "groupInfo",
                "infos",
                "lcmConfigs",
                "linkedDatabases",
                "metric",
                "name",
                "parentDatabaseId",
                "parentSourceDatabaseId",
                "parentTimeMachineId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeMachineId",
                "timeZone",
                "type",
                "vmIp"
            ],
            "inputProperties": {
                "actionarguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseActionargument:NdbRegisterDatabaseActionargument"
                    },
                    "description": "action arguments\n"
                },
                "autoTuneStagingDrive": {
                    "type": "boolean",
                    "description": "auto tune staging drive. Default is true\n"
                },
                "category": {
                    "type": "string",
                    "description": "category of database. Default is \"DEFAULT\"\n"
                },
                "clustered": {
                    "type": "boolean",
                    "description": "clustered or not. Default is false\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "name of database\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "type of database. Required value: postgres_database\n"
                },
                "delete": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database from the VM. Default value is false\n"
                },
                "deleteLogicalCluster": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the logical cluster. Default is true\n"
                },
                "deleteTimeMachine": {
                    "type": "boolean",
                    "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                },
                "description": {
                    "type": "string",
                    "description": "description\n"
                },
                "forced": {
                    "type": "boolean",
                    "description": "- (Optional) Force delete of instance. Default is false\n"
                },
                "forcedInstall": {
                    "type": "boolean",
                    "description": "forced install. Default:  true\n"
                },
                "nxClusterId": {
                    "type": "string",
                    "description": "cluster on which NDB is present\n"
                },
                "postgressInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabasePostgressInfo:NdbRegisterDatabasePostgressInfo"
                    },
                    "description": "Postgress_Info for registering.\n"
                },
                "remove": {
                    "type": "boolean",
                    "description": "- (Optional) Unregister the database from NDB. Default value is true\n"
                },
                "resetDescriptionInNxCluster": {
                    "type": "boolean",
                    "description": "Reset description in cluster\n"
                },
                "softRemove": {
                    "type": "boolean",
                    "description": "- (Optional) Soft remove. Default will be false\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTag:NdbRegisterDatabaseTag"
                    },
                    "description": "tags\n"
                },
                "timeMachineInfo": {
                    "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfo:NdbRegisterDatabaseTimeMachineInfo",
                    "description": "Time Machine info\n",
                    "willReplaceOnChanges": true
                },
                "vmDescription": {
                    "type": "string",
                    "description": "description for VM\n"
                },
                "vmIp": {
                    "type": "string",
                    "description": "IP address of dbserver VM\n"
                },
                "vmPassword": {
                    "type": "string",
                    "description": "password of the NDB drive user account.\n",
                    "secret": true
                },
                "vmSshkey": {
                    "type": "string",
                    "description": "ssh key for vm\n",
                    "secret": true
                },
                "vmUsername": {
                    "type": "string",
                    "description": "username of the NDB drive user account that has sudo access.\n"
                },
                "workingDirectory": {
                    "type": "string",
                    "description": "working directory. Default is /tmp\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "databaseType",
                "vmIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbRegisterDatabase resources.\n",
                "properties": {
                    "actionarguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseActionargument:NdbRegisterDatabaseActionargument"
                        },
                        "description": "action arguments\n"
                    },
                    "autoTuneStagingDrive": {
                        "type": "boolean",
                        "description": "auto tune staging drive. Default is true\n"
                    },
                    "category": {
                        "type": "string",
                        "description": "category of database. Default is \"DEFAULT\"\n"
                    },
                    "clone": {
                        "type": "boolean",
                        "description": "whether instance is cloned or not\n"
                    },
                    "clustered": {
                        "type": "boolean",
                        "description": "clustered or not. Default is false\n"
                    },
                    "databaseClusterType": {
                        "type": "string",
                        "description": "database cluster type\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "name of database\n"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseDatabaseNode:NdbRegisterDatabaseDatabaseNode"
                        },
                        "description": "database nodes associated with database instance\n"
                    },
                    "databaseStatus": {
                        "type": "string",
                        "description": "status of database\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "type of database. Required value: postgres_database\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "date created for db instance\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "date modified for instance\n"
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "dbserver logical cluster\n"
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string",
                        "description": "dbserver logical cluster id\n"
                    },
                    "delete": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the database from the VM. Default value is false\n"
                    },
                    "deleteLogicalCluster": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the logical cluster. Default is true\n"
                    },
                    "deleteTimeMachine": {
                        "type": "boolean",
                        "description": "- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description\n"
                    },
                    "forced": {
                        "type": "boolean",
                        "description": "- (Optional) Force delete of instance. Default is false\n"
                    },
                    "forcedInstall": {
                        "type": "boolean",
                        "description": "forced install. Default:  true\n"
                    },
                    "groupInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseInfo:NdbRegisterDatabaseInfo"
                        },
                        "description": "info of instance\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLcmConfig:NdbRegisterDatabaseLcmConfig"
                        },
                        "description": "LCM config of instance\n"
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseLinkedDatabase:NdbRegisterDatabaseLinkedDatabase"
                        },
                        "description": "linked databases within database instance\n"
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of database instance\n"
                    },
                    "nxClusterId": {
                        "type": "string",
                        "description": "cluster on which NDB is present\n"
                    },
                    "parentDatabaseId": {
                        "type": "string",
                        "description": "parent database id\n"
                    },
                    "parentSourceDatabaseId": {
                        "type": "string",
                        "description": "parent source database id\n"
                    },
                    "parentTimeMachineId": {
                        "type": "string",
                        "description": "parent time machine id\n"
                    },
                    "postgressInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabasePostgressInfo:NdbRegisterDatabasePostgressInfo"
                        },
                        "description": "Postgress_Info for registering.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseProperty:NdbRegisterDatabaseProperty"
                        },
                        "description": "properties of database created\n"
                    },
                    "remove": {
                        "type": "boolean",
                        "description": "- (Optional) Unregister the database from NDB. Default value is true\n"
                    },
                    "resetDescriptionInNxCluster": {
                        "type": "boolean",
                        "description": "Reset description in cluster\n"
                    },
                    "softRemove": {
                        "type": "boolean",
                        "description": "- (Optional) Soft remove. Default will be false\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of instance\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTag:NdbRegisterDatabaseTag"
                        },
                        "description": "tags\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "time machine id of instance\n"
                    },
                    "timeMachineInfo": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachineInfo:NdbRegisterDatabaseTimeMachineInfo",
                        "description": "Time Machine info\n",
                        "willReplaceOnChanges": true
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDatabaseTimeMachine:NdbRegisterDatabaseTimeMachine"
                        },
                        "description": "Time Machine details of instance\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "timezone on which instance is created xw\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of database\n"
                    },
                    "vmDescription": {
                        "type": "string",
                        "description": "description for VM\n"
                    },
                    "vmIp": {
                        "type": "string",
                        "description": "IP address of dbserver VM\n"
                    },
                    "vmPassword": {
                        "type": "string",
                        "description": "password of the NDB drive user account.\n",
                        "secret": true
                    },
                    "vmSshkey": {
                        "type": "string",
                        "description": "ssh key for vm\n",
                        "secret": true
                    },
                    "vmUsername": {
                        "type": "string",
                        "description": "username of the NDB drive user account that has sudo access.\n"
                    },
                    "workingDirectory": {
                        "type": "string",
                        "description": "working directory. Default is /tmp\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDbserverCredential:NdbRegisterDbserverCredential"
                    }
                },
                "databaseType": {
                    "type": "string"
                },
                "dbserverClusterId": {
                    "type": "string"
                },
                "delete": {
                    "type": "boolean"
                },
                "deleteVgs": {
                    "type": "boolean"
                },
                "deleteVmSnapshots": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "eraCreated": {
                    "type": "boolean"
                },
                "eraDriveId": {
                    "type": "string"
                },
                "eraVersion": {
                    "type": "string"
                },
                "forcedInstall": {
                    "type": "boolean"
                },
                "fqdns": {
                    "type": "string"
                },
                "internal": {
                    "type": "boolean"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nxclusterId": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDbserverPostgresDatabase:NdbRegisterDbserverPostgresDatabase"
                    }
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDbserverProperty:NdbRegisterDbserverProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "remove": {
                    "type": "boolean"
                },
                "softRemove": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDbserverTag:NdbRegisterDbserverTag"
                    }
                },
                "type": {
                    "type": "string"
                },
                "updateNameDescriptionInCluster": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                },
                "vmClusterName": {
                    "type": "string"
                },
                "vmClusterUuid": {
                    "type": "string"
                },
                "vmIp": {
                    "type": "string"
                },
                "vmTimezone": {
                    "type": "string"
                },
                "workingDirectory": {
                    "type": "string"
                }
            },
            "required": [
                "clientId",
                "databaseType",
                "dbserverClusterId",
                "description",
                "eraCreated",
                "eraDriveId",
                "eraVersion",
                "fqdns",
                "internal",
                "ipAddresses",
                "macAddresses",
                "name",
                "properties",
                "status",
                "tags",
                "type",
                "vmClusterName",
                "vmClusterUuid",
                "vmIp",
                "vmTimezone"
            ],
            "inputProperties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDbserverCredential:NdbRegisterDbserverCredential"
                    }
                },
                "databaseType": {
                    "type": "string"
                },
                "delete": {
                    "type": "boolean"
                },
                "deleteVgs": {
                    "type": "boolean"
                },
                "deleteVmSnapshots": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "forcedInstall": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "nxclusterId": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDbserverPostgresDatabase:NdbRegisterDbserverPostgresDatabase"
                    }
                },
                "remove": {
                    "type": "boolean"
                },
                "softRemove": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbRegisterDbserverTag:NdbRegisterDbserverTag"
                    }
                },
                "updateNameDescriptionInCluster": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                },
                "vmIp": {
                    "type": "string"
                },
                "workingDirectory": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "databaseType",
                "vmIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbRegisterDbserver resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDbserverCredential:NdbRegisterDbserverCredential"
                        }
                    },
                    "databaseType": {
                        "type": "string"
                    },
                    "dbserverClusterId": {
                        "type": "string"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "deleteVgs": {
                        "type": "boolean"
                    },
                    "deleteVmSnapshots": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "eraCreated": {
                        "type": "boolean"
                    },
                    "eraDriveId": {
                        "type": "string"
                    },
                    "eraVersion": {
                        "type": "string"
                    },
                    "forcedInstall": {
                        "type": "boolean"
                    },
                    "fqdns": {
                        "type": "string"
                    },
                    "internal": {
                        "type": "boolean"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "macAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nxclusterId": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "postgresDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDbserverPostgresDatabase:NdbRegisterDbserverPostgresDatabase"
                        }
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDbserverProperty:NdbRegisterDbserverProperty"
                        },
                        "description": "List of all the properties\n"
                    },
                    "remove": {
                        "type": "boolean"
                    },
                    "softRemove": {
                        "type": "boolean"
                    },
                    "sshKey": {
                        "type": "string",
                        "secret": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbRegisterDbserverTag:NdbRegisterDbserverTag"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "updateNameDescriptionInCluster": {
                        "type": "boolean"
                    },
                    "username": {
                        "type": "string"
                    },
                    "vmClusterName": {
                        "type": "string"
                    },
                    "vmClusterUuid": {
                        "type": "string"
                    },
                    "vmIp": {
                        "type": "string"
                    },
                    "vmTimezone": {
                        "type": "string"
                    },
                    "workingDirectory": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbScaleDatabase:NdbScaleDatabase": {
            "properties": {
                "applicationType": {
                    "type": "string"
                },
                "clone": {
                    "type": "boolean"
                },
                "dataStorageSize": {
                    "type": "integer"
                },
                "databaseClusterType": {
                    "type": "string"
                },
                "databaseInstanceId": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseDatabaseNode:NdbScaleDatabaseDatabaseNode"
                    }
                },
                "databaseUuid": {
                    "type": "string"
                },
                "databasetype": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dbserverLogicalCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dbserverLogicalClusterId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfo:NdbScaleDatabaseInfo"
                    }
                },
                "lcmConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseLcmConfig:NdbScaleDatabaseLcmConfig"
                    }
                },
                "linkedDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseLinkedDatabase:NdbScaleDatabaseLinkedDatabase"
                    }
                },
                "metric": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parentDatabaseId": {
                    "type": "string"
                },
                "parentSourceDatabaseId": {
                    "type": "string"
                },
                "postScriptCmd": {
                    "type": "string"
                },
                "preScriptCmd": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseProperty:NdbScaleDatabaseProperty"
                    },
                    "description": "List of all the properties\n"
                },
                "scaleCount": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTag:NdbScaleDatabaseTag"
                    }
                },
                "timeMachineId": {
                    "type": "string"
                },
                "timeMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachine:NdbScaleDatabaseTimeMachine"
                    }
                },
                "timeZone": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "applicationType",
                "clone",
                "dataStorageSize",
                "databaseClusterType",
                "databaseInstanceId",
                "databaseName",
                "databaseNodes",
                "databaseUuid",
                "databasetype",
                "dateCreated",
                "dateModified",
                "dbserverLogicalCluster",
                "dbserverLogicalClusterId",
                "description",
                "infos",
                "lcmConfigs",
                "linkedDatabases",
                "metric",
                "name",
                "parentDatabaseId",
                "parentSourceDatabaseId",
                "properties",
                "status",
                "tags",
                "timeMachines",
                "timeMachineId",
                "timeZone",
                "type"
            ],
            "inputProperties": {
                "applicationType": {
                    "type": "string"
                },
                "dataStorageSize": {
                    "type": "integer"
                },
                "databaseUuid": {
                    "type": "string"
                },
                "postScriptCmd": {
                    "type": "string"
                },
                "preScriptCmd": {
                    "type": "string"
                },
                "scaleCount": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbScaleDatabaseTag:NdbScaleDatabaseTag"
                    }
                }
            },
            "requiredInputs": [
                "applicationType",
                "dataStorageSize",
                "databaseUuid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbScaleDatabase resources.\n",
                "properties": {
                    "applicationType": {
                        "type": "string"
                    },
                    "clone": {
                        "type": "boolean"
                    },
                    "dataStorageSize": {
                        "type": "integer"
                    },
                    "databaseClusterType": {
                        "type": "string"
                    },
                    "databaseInstanceId": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbScaleDatabaseDatabaseNode:NdbScaleDatabaseDatabaseNode"
                        }
                    },
                    "databaseUuid": {
                        "type": "string"
                    },
                    "databasetype": {
                        "type": "string"
                    },
                    "dateCreated": {
                        "type": "string"
                    },
                    "dateModified": {
                        "type": "string"
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbScaleDatabaseInfo:NdbScaleDatabaseInfo"
                        }
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbScaleDatabaseLcmConfig:NdbScaleDatabaseLcmConfig"
                        }
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbScaleDatabaseLinkedDatabase:NdbScaleDatabaseLinkedDatabase"
                        }
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentDatabaseId": {
                        "type": "string"
                    },
                    "parentSourceDatabaseId": {
                        "type": "string"
                    },
                    "postScriptCmd": {
                        "type": "string"
                    },
                    "preScriptCmd": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbScaleDatabaseProperty:NdbScaleDatabaseProperty"
                        },
                        "description": "List of all the properties\n"
                    },
                    "scaleCount": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbScaleDatabaseTag:NdbScaleDatabaseTag"
                        }
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbScaleDatabaseTimeMachine:NdbScaleDatabaseTimeMachine"
                        }
                    },
                    "timeZone": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbSla:NdbSla": {
            "description": "Provides a resource to create SLAs based on the input parameters. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst sla = new nutanix.NdbSla(\"sla\", {\n    continuousRetention: 30,\n    dailyRetention: 3,\n    description: \"here goes description\",\n    monthlyRetention: 1,\n    quarterlyRetention: 1,\n    weeklyRetention: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsla = nutanix.NdbSla(\"sla\",\n    continuous_retention=30,\n    daily_retention=3,\n    description=\"here goes description\",\n    monthly_retention=1,\n    quarterly_retention=1,\n    weekly_retention=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sla = new Nutanix.NdbSla(\"sla\", new()\n    {\n        ContinuousRetention = 30,\n        DailyRetention = 3,\n        Description = \"here goes description\",\n        MonthlyRetention = 1,\n        QuarterlyRetention = 1,\n        WeeklyRetention = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbSla(ctx, \"sla\", \u0026nutanix.NdbSlaArgs{\n\t\t\tContinuousRetention: pulumi.Int(30),\n\t\t\tDailyRetention:      pulumi.Int(3),\n\t\t\tDescription:         pulumi.String(\"here goes description\"),\n\t\t\tMonthlyRetention:    pulumi.Int(1),\n\t\t\tQuarterlyRetention:  pulumi.Int(1),\n\t\t\tWeeklyRetention:     pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbSla;\nimport com.pulumi.nutanix.NdbSlaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sla = new NdbSla(\"sla\", NdbSlaArgs.builder()\n            .continuousRetention(30)\n            .dailyRetention(3)\n            .description(\"here goes description\")\n            .monthlyRetention(1)\n            .quarterlyRetention(1)\n            .weeklyRetention(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sla:\n    type: nutanix:NdbSla\n    properties:\n      # Rentention args are optional with default values\n      continuousRetention: 30\n      dailyRetention: 3\n      description: here goes description\n      monthlyRetention: 1\n      quarterlyRetention: 1\n      weeklyRetention: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "continuousRetention": {
                    "type": "integer",
                    "description": "Duration in days for which transaction logs are retained in NDB.\n"
                },
                "currentActiveFrequency": {
                    "type": "string",
                    "description": "slas current frequency\n"
                },
                "dailyRetention": {
                    "type": "integer",
                    "description": "Duration in days for which a daily snapshot must be retained in NDB.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "sla created data\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "sla last modified date\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of profile\n"
                },
                "monthlyRetention": {
                    "type": "integer",
                    "description": "Duration in months for which a monthly snapshot must be retained in NDB\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of profile\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "owner id\n"
                },
                "pitrEnabled": {
                    "type": "boolean",
                    "description": "pitr enabled\n"
                },
                "quarterlyRetention": {
                    "type": "integer",
                    "description": "Duration in number of quarters for which a quarterly snapshot must be retained in NDB.\n"
                },
                "referenceCount": {
                    "type": "integer",
                    "description": "reference count\n"
                },
                "systemSla": {
                    "type": "boolean",
                    "description": "refers whether sla is custom or built-in\n"
                },
                "uniqueName": {
                    "type": "string",
                    "description": "name of sla\n"
                },
                "weeklyRetention": {
                    "type": "integer",
                    "description": "Duration in weeks for which a weekly snapshot must be retained in NDB.\n"
                },
                "yearlyRetention": {
                    "type": "integer",
                    "description": "Not supported as of now.\n"
                }
            },
            "required": [
                "currentActiveFrequency",
                "dateCreated",
                "dateModified",
                "name",
                "ownerId",
                "pitrEnabled",
                "referenceCount",
                "systemSla",
                "uniqueName",
                "yearlyRetention"
            ],
            "inputProperties": {
                "continuousRetention": {
                    "type": "integer",
                    "description": "Duration in days for which transaction logs are retained in NDB.\n"
                },
                "dailyRetention": {
                    "type": "integer",
                    "description": "Duration in days for which a daily snapshot must be retained in NDB.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of profile\n"
                },
                "monthlyRetention": {
                    "type": "integer",
                    "description": "Duration in months for which a monthly snapshot must be retained in NDB\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of profile\n"
                },
                "quarterlyRetention": {
                    "type": "integer",
                    "description": "Duration in number of quarters for which a quarterly snapshot must be retained in NDB.\n"
                },
                "weeklyRetention": {
                    "type": "integer",
                    "description": "Duration in weeks for which a weekly snapshot must be retained in NDB.\n"
                },
                "yearlyRetention": {
                    "type": "integer",
                    "description": "Not supported as of now.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbSla resources.\n",
                "properties": {
                    "continuousRetention": {
                        "type": "integer",
                        "description": "Duration in days for which transaction logs are retained in NDB.\n"
                    },
                    "currentActiveFrequency": {
                        "type": "string",
                        "description": "slas current frequency\n"
                    },
                    "dailyRetention": {
                        "type": "integer",
                        "description": "Duration in days for which a daily snapshot must be retained in NDB.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "sla created data\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "sla last modified date\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of profile\n"
                    },
                    "monthlyRetention": {
                        "type": "integer",
                        "description": "Duration in months for which a monthly snapshot must be retained in NDB\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of profile\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "owner id\n"
                    },
                    "pitrEnabled": {
                        "type": "boolean",
                        "description": "pitr enabled\n"
                    },
                    "quarterlyRetention": {
                        "type": "integer",
                        "description": "Duration in number of quarters for which a quarterly snapshot must be retained in NDB.\n"
                    },
                    "referenceCount": {
                        "type": "integer",
                        "description": "reference count\n"
                    },
                    "systemSla": {
                        "type": "boolean",
                        "description": "refers whether sla is custom or built-in\n"
                    },
                    "uniqueName": {
                        "type": "string",
                        "description": "name of sla\n"
                    },
                    "weeklyRetention": {
                        "type": "integer",
                        "description": "Duration in weeks for which a weekly snapshot must be retained in NDB.\n"
                    },
                    "yearlyRetention": {
                        "type": "integer",
                        "description": "Not supported as of now.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile": {
            "properties": {
                "availableClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dbVersion": {
                    "type": "string"
                },
                "deprecated": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "engineType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfilePostgresDatabase:NdbSoftwareVersionProfilePostgresDatabase"
                    }
                },
                "profileId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfileProperty:NdbSoftwareVersionProfileProperty"
                    }
                },
                "propertiesMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "published": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "systemProfile": {
                    "type": "boolean"
                },
                "topology": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "versionClusterAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfileVersionClusterAssociation:NdbSoftwareVersionProfileVersionClusterAssociation"
                    }
                }
            },
            "required": [
                "dbVersion",
                "deprecated",
                "engineType",
                "name",
                "owner",
                "profileId",
                "properties",
                "propertiesMap",
                "published",
                "systemProfile",
                "topology",
                "version",
                "versionClusterAssociations"
            ],
            "inputProperties": {
                "availableClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "engineType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "postgresDatabases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfilePostgresDatabase:NdbSoftwareVersionProfilePostgresDatabase"
                    }
                },
                "profileId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "engineType",
                "profileId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbSoftwareVersionProfile resources.\n",
                "properties": {
                    "availableClusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dbVersion": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "engineType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "postgresDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfilePostgresDatabase:NdbSoftwareVersionProfilePostgresDatabase"
                        }
                    },
                    "profileId": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfileProperty:NdbSoftwareVersionProfileProperty"
                        }
                    },
                    "propertiesMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "published": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string"
                    },
                    "systemProfile": {
                        "type": "boolean"
                    },
                    "topology": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "versionClusterAssociations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbSoftwareVersionProfileVersionClusterAssociation:NdbSoftwareVersionProfileVersionClusterAssociation"
                        }
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbStretchedVlan:NdbStretchedVlan": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/types/nutanix:index/NdbStretchedVlanMetadata:NdbStretchedVlanMetadata"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vlansLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NdbStretchedVlanVlansList:NdbStretchedVlanVlansList"
                    }
                }
            },
            "required": [
                "metadata",
                "name",
                "type",
                "vlanIds",
                "vlansLists"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/types/nutanix:index/NdbStretchedVlanMetadata:NdbStretchedVlanMetadata"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "type",
                "vlanIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbStretchedVlan resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/types/nutanix:index/NdbStretchedVlanMetadata:NdbStretchedVlanMetadata"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "vlansLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NdbStretchedVlanVlansList:NdbStretchedVlanVlansList"
                        }
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbTag:NdbTag": {
            "description": "Provides a resource to create tags based on the input parameters. \n\n## Example Usage\n\n### resource to create tag\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbTag(\"name\", {\n    description: \"this is desc ok\",\n    entityType: \"DATABASE\",\n    required: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbTag(\"name\",\n    description=\"this is desc ok\",\n    entity_type=\"DATABASE\",\n    required=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbTag(\"name\", new()\n    {\n        Description = \"this is desc ok\",\n        EntityType = \"DATABASE\",\n        Required = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbTag(ctx, \"name\", \u0026nutanix.NdbTagArgs{\n\t\t\tDescription: pulumi.String(\"this is desc ok\"),\n\t\t\tEntityType:  pulumi.String(\"DATABASE\"),\n\t\t\tRequired:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbTag;\nimport com.pulumi.nutanix.NdbTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbTag(\"name\", NdbTagArgs.builder()\n            .description(\"this is desc ok\")\n            .entityType(\"DATABASE\")\n            .required(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbTag\n    properties:\n      description: this is desc ok\n      entityType: DATABASE\n      required: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### resource to update tag with status\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst name = new nutanix.NdbTag(\"name\", {\n    description: \"this is desc ok\",\n    entityType: \"DATABASE\",\n    required: true,\n    status: \"DEPRECATED\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.NdbTag(\"name\",\n    description=\"this is desc ok\",\n    entity_type=\"DATABASE\",\n    required=True,\n    status=\"DEPRECATED\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = new Nutanix.NdbTag(\"name\", new()\n    {\n        Description = \"this is desc ok\",\n        EntityType = \"DATABASE\",\n        Required = true,\n        Status = \"DEPRECATED\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNdbTag(ctx, \"name\", \u0026nutanix.NdbTagArgs{\n\t\t\tDescription: pulumi.String(\"this is desc ok\"),\n\t\t\tEntityType:  pulumi.String(\"DATABASE\"),\n\t\t\tRequired:    pulumi.Bool(true),\n\t\t\tStatus:      pulumi.String(\"DEPRECATED\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NdbTag;\nimport com.pulumi.nutanix.NdbTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var name = new NdbTag(\"name\", NdbTagArgs.builder()\n            .description(\"this is desc ok\")\n            .entityType(\"DATABASE\")\n            .required(true)\n            .status(\"DEPRECATED\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  name:\n    type: nutanix:NdbTag\n    properties:\n      description: this is desc ok\n      entityType: DATABASE\n      required: true\n      status: DEPRECATED\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "dateCreated": {
                    "type": "string",
                    "description": "date created of the tag\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "modified date of tha tag\n"
                },
                "description": {
                    "type": "string",
                    "description": "description for the tag\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tag\n"
                },
                "owner": {
                    "type": "string",
                    "description": "owner id of the tag\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "provide a tag value for entities.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the tag. Supported values are [ ENABLED, DEPRECATED ]\n"
                },
                "values": {
                    "type": "integer",
                    "description": "value for the tag\n"
                }
            },
            "required": [
                "dateCreated",
                "dateModified",
                "entityType",
                "name",
                "owner",
                "status",
                "values"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "description for the tag\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tag\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "provide a tag value for entities.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the tag. Supported values are [ ENABLED, DEPRECATED ]\n"
                }
            },
            "requiredInputs": [
                "entityType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbTag resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "date created of the tag\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "modified date of tha tag\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description for the tag\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name for the tag\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "owner id of the tag\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "provide a tag value for entities.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the tag. Supported values are [ ENABLED, DEPRECATED ]\n"
                    },
                    "values": {
                        "type": "integer",
                        "description": "value for the tag\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/ndbTmsCluster:NdbTmsCluster": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "logDriveId": {
                    "type": "string"
                },
                "logDriveStatus": {
                    "type": "string"
                },
                "nxClusterId": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "scheduleId": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "source": {
                    "type": "boolean"
                },
                "sourceClusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timeMachineId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "dateCreated",
                "dateModified",
                "description",
                "logDriveId",
                "logDriveStatus",
                "nxClusterId",
                "ownerId",
                "scheduleId",
                "slaId",
                "source",
                "sourceClusters",
                "status",
                "timeMachineId"
            ],
            "inputProperties": {
                "nxClusterId": {
                    "type": "string"
                },
                "slaId": {
                    "type": "string"
                },
                "timeMachineId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "nxClusterId",
                "slaId",
                "timeMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NdbTmsCluster resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string"
                    },
                    "dateModified": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "logDriveId": {
                        "type": "string"
                    },
                    "logDriveStatus": {
                        "type": "string"
                    },
                    "nxClusterId": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "scheduleId": {
                        "type": "string"
                    },
                    "slaId": {
                        "type": "string"
                    },
                    "source": {
                        "type": "boolean"
                    },
                    "sourceClusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/networkSecurityRule:NetworkSecurityRule": {
            "description": "Provides a Nutanix network security rule resource to Create a network security rule.\n\n\u003e NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow\n\n## Example Usage\n\n### Isolation Rule Example\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst isolation = new nutanix.NetworkSecurityRule(\"isolation\", {\n    description: \"Isolation Rule Example\",\n    isolationRuleAction: \"APPLY\",\n    isolationRuleFirstEntityFilterKindLists: [\"vm\"],\n    isolationRuleFirstEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Dev\"],\n    }],\n    isolationRuleFirstEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n    isolationRuleSecondEntityFilterKindLists: [\"vm\"],\n    isolationRuleSecondEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Production\"],\n    }],\n    isolationRuleSecondEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nisolation = nutanix.NetworkSecurityRule(\"isolation\",\n    description=\"Isolation Rule Example\",\n    isolation_rule_action=\"APPLY\",\n    isolation_rule_first_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_first_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Dev\"],\n    )],\n    isolation_rule_first_entity_filter_type=\"CATEGORIES_MATCH_ALL\",\n    isolation_rule_second_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_second_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Production\"],\n    )],\n    isolation_rule_second_entity_filter_type=\"CATEGORIES_MATCH_ALL\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var isolation = new Nutanix.NetworkSecurityRule(\"isolation\", new()\n    {\n        Description = \"Isolation Rule Example\",\n        IsolationRuleAction = \"APPLY\",\n        IsolationRuleFirstEntityFilterKindLists = new[]\n        {\n            \"vm\",\n        },\n        IsolationRuleFirstEntityFilterParams = new[]\n        {\n            new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs\n            {\n                Name = \"Environment\",\n                Values = new[]\n                {\n                    \"Dev\",\n                },\n            },\n        },\n        IsolationRuleFirstEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n        IsolationRuleSecondEntityFilterKindLists = new[]\n        {\n            \"vm\",\n        },\n        IsolationRuleSecondEntityFilterParams = new[]\n        {\n            new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs\n            {\n                Name = \"Environment\",\n                Values = new[]\n                {\n                    \"Production\",\n                },\n            },\n        },\n        IsolationRuleSecondEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNetworkSecurityRule(ctx, \"isolation\", \u0026nutanix.NetworkSecurityRuleArgs{\n\t\t\tDescription:         pulumi.String(\"Isolation Rule Example\"),\n\t\t\tIsolationRuleAction: pulumi.String(\"APPLY\"),\n\t\t\tIsolationRuleFirstEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterParams: nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArray{\n\t\t\t\t\u0026nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t\tIsolationRuleSecondEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterParams: nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArray{\n\t\t\t\t\u0026nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Production\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NetworkSecurityRule;\nimport com.pulumi.nutanix.NetworkSecurityRuleArgs;\nimport com.pulumi.nutanix.inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs;\nimport com.pulumi.nutanix.inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var isolation = new NetworkSecurityRule(\"isolation\", NetworkSecurityRuleArgs.builder()\n            .description(\"Isolation Rule Example\")\n            .isolationRuleAction(\"APPLY\")\n            .isolationRuleFirstEntityFilterKindLists(\"vm\")\n            .isolationRuleFirstEntityFilterParams(NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Dev\")\n                .build())\n            .isolationRuleFirstEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .isolationRuleSecondEntityFilterKindLists(\"vm\")\n            .isolationRuleSecondEntityFilterParams(NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Production\")\n                .build())\n            .isolationRuleSecondEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  isolation:\n    type: nutanix:NetworkSecurityRule\n    properties:\n      description: Isolation Rule Example\n      isolationRuleAction: APPLY\n      isolationRuleFirstEntityFilterKindLists:\n        - vm\n      isolationRuleFirstEntityFilterParams:\n        - name: Environment\n          values:\n            - Dev\n      isolationRuleFirstEntityFilterType: CATEGORIES_MATCH_ALL\n      isolationRuleSecondEntityFilterKindLists:\n        - vm\n      isolationRuleSecondEntityFilterParams:\n        - name: Environment\n          values:\n            - Production\n      isolationRuleSecondEntityFilterType: CATEGORIES_MATCH_ALL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Usage with service and address groups\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst service1 = new nutanix.ServiceGroup(\"service1\", {\n    description: \"test\",\n    serviceLists: [{\n        protocol: \"TCP\",\n        tcpPortRangeLists: [\n            {\n                startPort: 22,\n                endPort: 22,\n            },\n            {\n                startPort: 2222,\n                endPort: 2222,\n            },\n        ],\n    }],\n});\nconst address1 = new nutanix.AddressGroup(\"address1\", {\n    description: \"test\",\n    ipAddressBlockLists: [{\n        ip: \"10.0.0.0\",\n        prefixLength: 24,\n    }],\n});\nconst ad_group_user_1 = new nutanix.CategoryValue(\"ad-group-user-1\", {\n    description: \"group user category value\",\n    value: \"AD\",\n});\nconst vDI = new nutanix.NetworkSecurityRule(\"vDI\", {\n    adRuleAction: \"APPLY\",\n    description: \"test\",\n    adRuleInboundAllowLists: [{\n        ipSubnet: \"10.0.0.0\",\n        ipSubnetPrefixLength: \"8\",\n        peerSpecificationType: \"IP_SUBNET\",\n        protocol: \"ALL\",\n    }],\n    adRuleTargetGroupDefaultInternalPolicy: \"DENY_ALL\",\n    adRuleTargetGroupFilterKindLists: [\"vm\"],\n    adRuleTargetGroupFilterParams: [{\n        name: \"AD\",\n        values: [\"AD\"],\n    }],\n    adRuleTargetGroupFilterType: \"CATEGORIES_MATCH_ALL\",\n    adRuleTargetGroupPeerSpecificationType: \"FILTER\",\n    adRuleOutboundAllowLists: [{\n        peerSpecificationType: \"ALL\",\n        serviceGroupLists: [{\n            kind: \"service_group\",\n            uuid: service1.id,\n        }],\n        addressGroupInclusionLists: [{\n            kind: \"address_group\",\n            uuid: address1.id,\n        }],\n    }],\n}, {\n    dependsOn: [ad_group_user_1],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nservice1 = nutanix.ServiceGroup(\"service1\",\n    description=\"test\",\n    service_lists=[nutanix.ServiceGroupServiceListArgs(\n        protocol=\"TCP\",\n        tcp_port_range_lists=[\n            nutanix.ServiceGroupServiceListTcpPortRangeListArgs(\n                start_port=22,\n                end_port=22,\n            ),\n            nutanix.ServiceGroupServiceListTcpPortRangeListArgs(\n                start_port=2222,\n                end_port=2222,\n            ),\n        ],\n    )])\naddress1 = nutanix.AddressGroup(\"address1\",\n    description=\"test\",\n    ip_address_block_lists=[nutanix.AddressGroupIpAddressBlockListArgs(\n        ip=\"10.0.0.0\",\n        prefix_length=24,\n    )])\nad_group_user_1 = nutanix.CategoryValue(\"ad-group-user-1\",\n    description=\"group user category value\",\n    value=\"AD\")\nv_di = nutanix.NetworkSecurityRule(\"vDI\",\n    ad_rule_action=\"APPLY\",\n    description=\"test\",\n    ad_rule_inbound_allow_lists=[nutanix.NetworkSecurityRuleAdRuleInboundAllowListArgs(\n        ip_subnet=\"10.0.0.0\",\n        ip_subnet_prefix_length=\"8\",\n        peer_specification_type=\"IP_SUBNET\",\n        protocol=\"ALL\",\n    )],\n    ad_rule_target_group_default_internal_policy=\"DENY_ALL\",\n    ad_rule_target_group_filter_kind_lists=[\"vm\"],\n    ad_rule_target_group_filter_params=[nutanix.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs(\n        name=\"AD\",\n        values=[\"AD\"],\n    )],\n    ad_rule_target_group_filter_type=\"CATEGORIES_MATCH_ALL\",\n    ad_rule_target_group_peer_specification_type=\"FILTER\",\n    ad_rule_outbound_allow_lists=[nutanix.NetworkSecurityRuleAdRuleOutboundAllowListArgs(\n        peer_specification_type=\"ALL\",\n        service_group_lists=[nutanix.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs(\n            kind=\"service_group\",\n            uuid=service1.id,\n        )],\n        address_group_inclusion_lists=[nutanix.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs(\n            kind=\"address_group\",\n            uuid=address1.id,\n        )],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[ad_group_user_1]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var service1 = new Nutanix.ServiceGroup(\"service1\", new()\n    {\n        Description = \"test\",\n        ServiceLists = new[]\n        {\n            new Nutanix.Inputs.ServiceGroupServiceListArgs\n            {\n                Protocol = \"TCP\",\n                TcpPortRangeLists = new[]\n                {\n                    new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs\n                    {\n                        StartPort = 22,\n                        EndPort = 22,\n                    },\n                    new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs\n                    {\n                        StartPort = 2222,\n                        EndPort = 2222,\n                    },\n                },\n            },\n        },\n    });\n\n    var address1 = new Nutanix.AddressGroup(\"address1\", new()\n    {\n        Description = \"test\",\n        IpAddressBlockLists = new[]\n        {\n            new Nutanix.Inputs.AddressGroupIpAddressBlockListArgs\n            {\n                Ip = \"10.0.0.0\",\n                PrefixLength = 24,\n            },\n        },\n    });\n\n    var ad_group_user_1 = new Nutanix.CategoryValue(\"ad-group-user-1\", new()\n    {\n        Description = \"group user category value\",\n        Value = \"AD\",\n    });\n\n    var vDI = new Nutanix.NetworkSecurityRule(\"vDI\", new()\n    {\n        AdRuleAction = \"APPLY\",\n        Description = \"test\",\n        AdRuleInboundAllowLists = new[]\n        {\n            new Nutanix.Inputs.NetworkSecurityRuleAdRuleInboundAllowListArgs\n            {\n                IpSubnet = \"10.0.0.0\",\n                IpSubnetPrefixLength = \"8\",\n                PeerSpecificationType = \"IP_SUBNET\",\n                Protocol = \"ALL\",\n            },\n        },\n        AdRuleTargetGroupDefaultInternalPolicy = \"DENY_ALL\",\n        AdRuleTargetGroupFilterKindLists = new[]\n        {\n            \"vm\",\n        },\n        AdRuleTargetGroupFilterParams = new[]\n        {\n            new Nutanix.Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs\n            {\n                Name = \"AD\",\n                Values = new[]\n                {\n                    \"AD\",\n                },\n            },\n        },\n        AdRuleTargetGroupFilterType = \"CATEGORIES_MATCH_ALL\",\n        AdRuleTargetGroupPeerSpecificationType = \"FILTER\",\n        AdRuleOutboundAllowLists = new[]\n        {\n            new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListArgs\n            {\n                PeerSpecificationType = \"ALL\",\n                ServiceGroupLists = new[]\n                {\n                    new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs\n                    {\n                        Kind = \"service_group\",\n                        Uuid = service1.Id,\n                    },\n                },\n                AddressGroupInclusionLists = new[]\n                {\n                    new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs\n                    {\n                        Kind = \"address_group\",\n                        Uuid = address1.Id,\n                    },\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            ad_group_user_1,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tservice1, err := nutanix.NewServiceGroup(ctx, \"service1\", \u0026nutanix.ServiceGroupArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tServiceLists: nutanix.ServiceGroupServiceListArray{\n\t\t\t\t\u0026nutanix.ServiceGroupServiceListArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tTcpPortRangeLists: nutanix.ServiceGroupServiceListTcpPortRangeListArray{\n\t\t\t\t\t\t\u0026nutanix.ServiceGroupServiceListTcpPortRangeListArgs{\n\t\t\t\t\t\t\tStartPort: pulumi.Int(22),\n\t\t\t\t\t\t\tEndPort:   pulumi.Int(22),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026nutanix.ServiceGroupServiceListTcpPortRangeListArgs{\n\t\t\t\t\t\t\tStartPort: pulumi.Int(2222),\n\t\t\t\t\t\t\tEndPort:   pulumi.Int(2222),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\taddress1, err := nutanix.NewAddressGroup(ctx, \"address1\", \u0026nutanix.AddressGroupArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIpAddressBlockLists: nutanix.AddressGroupIpAddressBlockListArray{\n\t\t\t\t\u0026nutanix.AddressGroupIpAddressBlockListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"10.0.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(24),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewCategoryValue(ctx, \"ad-group-user-1\", \u0026nutanix.CategoryValueArgs{\n\t\t\tDescription: pulumi.String(\"group user category value\"),\n\t\t\tValue:       pulumi.String(\"AD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewNetworkSecurityRule(ctx, \"vDI\", \u0026nutanix.NetworkSecurityRuleArgs{\n\t\t\tAdRuleAction: pulumi.String(\"APPLY\"),\n\t\t\tDescription:  pulumi.String(\"test\"),\n\t\t\tAdRuleInboundAllowLists: nutanix.NetworkSecurityRuleAdRuleInboundAllowListArray{\n\t\t\t\t\u0026nutanix.NetworkSecurityRuleAdRuleInboundAllowListArgs{\n\t\t\t\t\tIpSubnet:              pulumi.String(\"10.0.0.0\"),\n\t\t\t\t\tIpSubnetPrefixLength:  pulumi.String(\"8\"),\n\t\t\t\t\tPeerSpecificationType: pulumi.String(\"IP_SUBNET\"),\n\t\t\t\t\tProtocol:              pulumi.String(\"ALL\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdRuleTargetGroupDefaultInternalPolicy: pulumi.String(\"DENY_ALL\"),\n\t\t\tAdRuleTargetGroupFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tAdRuleTargetGroupFilterParams: nutanix.NetworkSecurityRuleAdRuleTargetGroupFilterParamArray{\n\t\t\t\t\u0026nutanix.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"AD\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"AD\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdRuleTargetGroupFilterType:            pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t\tAdRuleTargetGroupPeerSpecificationType: pulumi.String(\"FILTER\"),\n\t\t\tAdRuleOutboundAllowLists: nutanix.NetworkSecurityRuleAdRuleOutboundAllowListArray{\n\t\t\t\t\u0026nutanix.NetworkSecurityRuleAdRuleOutboundAllowListArgs{\n\t\t\t\t\tPeerSpecificationType: pulumi.String(\"ALL\"),\n\t\t\t\t\tServiceGroupLists: nutanix.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArray{\n\t\t\t\t\t\t\u0026nutanix.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs{\n\t\t\t\t\t\t\tKind: pulumi.String(\"service_group\"),\n\t\t\t\t\t\t\tUuid: service1.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAddressGroupInclusionLists: nutanix.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArray{\n\t\t\t\t\t\t\u0026nutanix.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs{\n\t\t\t\t\t\t\tKind: pulumi.String(\"address_group\"),\n\t\t\t\t\t\t\tUuid: address1.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tad_group_user_1,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.ServiceGroup;\nimport com.pulumi.nutanix.ServiceGroupArgs;\nimport com.pulumi.nutanix.inputs.ServiceGroupServiceListArgs;\nimport com.pulumi.nutanix.AddressGroup;\nimport com.pulumi.nutanix.AddressGroupArgs;\nimport com.pulumi.nutanix.inputs.AddressGroupIpAddressBlockListArgs;\nimport com.pulumi.nutanix.CategoryValue;\nimport com.pulumi.nutanix.CategoryValueArgs;\nimport com.pulumi.nutanix.NetworkSecurityRule;\nimport com.pulumi.nutanix.NetworkSecurityRuleArgs;\nimport com.pulumi.nutanix.inputs.NetworkSecurityRuleAdRuleInboundAllowListArgs;\nimport com.pulumi.nutanix.inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs;\nimport com.pulumi.nutanix.inputs.NetworkSecurityRuleAdRuleOutboundAllowListArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var service1 = new ServiceGroup(\"service1\", ServiceGroupArgs.builder()\n            .description(\"test\")\n            .serviceLists(ServiceGroupServiceListArgs.builder()\n                .protocol(\"TCP\")\n                .tcpPortRangeLists(                \n                    ServiceGroupServiceListTcpPortRangeListArgs.builder()\n                        .startPort(22)\n                        .endPort(22)\n                        .build(),\n                    ServiceGroupServiceListTcpPortRangeListArgs.builder()\n                        .startPort(2222)\n                        .endPort(2222)\n                        .build())\n                .build())\n            .build());\n\n        var address1 = new AddressGroup(\"address1\", AddressGroupArgs.builder()\n            .description(\"test\")\n            .ipAddressBlockLists(AddressGroupIpAddressBlockListArgs.builder()\n                .ip(\"10.0.0.0\")\n                .prefixLength(24)\n                .build())\n            .build());\n\n        var ad_group_user_1 = new CategoryValue(\"ad-group-user-1\", CategoryValueArgs.builder()\n            .description(\"group user category value\")\n            .value(\"AD\")\n            .build());\n\n        var vDI = new NetworkSecurityRule(\"vDI\", NetworkSecurityRuleArgs.builder()\n            .adRuleAction(\"APPLY\")\n            .description(\"test\")\n            .adRuleInboundAllowLists(NetworkSecurityRuleAdRuleInboundAllowListArgs.builder()\n                .ipSubnet(\"10.0.0.0\")\n                .ipSubnetPrefixLength(\"8\")\n                .peerSpecificationType(\"IP_SUBNET\")\n                .protocol(\"ALL\")\n                .build())\n            .adRuleTargetGroupDefaultInternalPolicy(\"DENY_ALL\")\n            .adRuleTargetGroupFilterKindLists(\"vm\")\n            .adRuleTargetGroupFilterParams(NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs.builder()\n                .name(\"AD\")\n                .values(\"AD\")\n                .build())\n            .adRuleTargetGroupFilterType(\"CATEGORIES_MATCH_ALL\")\n            .adRuleTargetGroupPeerSpecificationType(\"FILTER\")\n            .adRuleOutboundAllowLists(NetworkSecurityRuleAdRuleOutboundAllowListArgs.builder()\n                .peerSpecificationType(\"ALL\")\n                .serviceGroupLists(NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs.builder()\n                    .kind(\"service_group\")\n                    .uuid(service1.id())\n                    .build())\n                .addressGroupInclusionLists(NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs.builder()\n                    .kind(\"address_group\")\n                    .uuid(address1.id())\n                    .build())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(ad_group_user_1)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  service1:\n    type: nutanix:ServiceGroup\n    properties:\n      description: test\n      serviceLists:\n        - protocol: TCP\n          tcpPortRangeLists:\n            - startPort: 22\n              endPort: 22\n            - startPort: 2222\n              endPort: 2222\n  address1:\n    type: nutanix:AddressGroup\n    properties:\n      description: test\n      ipAddressBlockLists:\n        - ip: 10.0.0.0\n          prefixLength: 24\n  ad-group-user-1:\n    type: nutanix:CategoryValue\n    properties:\n      description: group user category value\n      value: AD\n  vDI:\n    type: nutanix:NetworkSecurityRule\n    properties:\n      adRuleAction: APPLY\n      description: test\n      #   app_rule_action = \"APPLY\"\n      adRuleInboundAllowLists:\n        - ipSubnet: 10.0.0.0\n          ipSubnetPrefixLength: '8'\n          peerSpecificationType: IP_SUBNET\n          protocol: ALL\n      adRuleTargetGroupDefaultInternalPolicy: DENY_ALL\n      adRuleTargetGroupFilterKindLists:\n        - vm\n      adRuleTargetGroupFilterParams:\n        - name: AD\n          values:\n            - AD\n      adRuleTargetGroupFilterType: CATEGORIES_MATCH_ALL\n      adRuleTargetGroupPeerSpecificationType: FILTER\n      adRuleOutboundAllowLists:\n        - peerSpecificationType: ALL\n          serviceGroupLists:\n            - kind: service_group\n              uuid: ${service1.id}\n          addressGroupInclusionLists:\n            - kind: address_group\n              uuid: ${address1.id}\n    options:\n      dependson:\n        - ${[\"ad-group-user-1\"]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "adRuleAction": {
                    "type": "string",
                    "description": "- (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                },
                "adRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList"
                    },
                    "description": "- (Optional) The set of categories that matching VMs need to have.\n"
                },
                "adRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList"
                    },
                    "description": "- (Optional)\n"
                },
                "adRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string",
                    "description": "- (Optional) - Default policy for communication within target group.\n"
                },
                "adRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "adRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "adRuleTargetGroupFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "adRuleTargetGroupPeerSpecificationType": {
                    "type": "string",
                    "description": "- (Optional) - Way to identify the object for which rule is applied.\n"
                },
                "allowIpv6Traffic": {
                    "type": "boolean"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "appRuleAction": {
                    "type": "string",
                    "description": "- (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                },
                "appRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList"
                    },
                    "description": "- (Optional) The set of categories that matching VMs need to have.\n"
                },
                "appRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList"
                    },
                    "description": "- (Optional)\n"
                },
                "appRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string",
                    "description": "- (Optional) - Default policy for communication within target group.\n"
                },
                "appRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "appRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "appRuleTargetGroupFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "appRuleTargetGroupPeerSpecificationType": {
                    "type": "string",
                    "description": "- (Optional) - Way to identify the object for which rule is applied.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory"
                    },
                    "description": "- (Optional) Categories for the network_security_rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for network_security_rule.\n"
                },
                "isPolicyHitlogEnabled": {
                    "type": "boolean"
                },
                "isolationRuleAction": {
                    "type": "string",
                    "description": "- (Optional) - These rules are used for environmental isolation.\n"
                },
                "isolationRuleFirstEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "isolationRuleFirstEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "isolationRuleFirstEntityFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "isolationRuleSecondEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "isolationRuleSecondEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "isolationRuleSecondEntityFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The network_security_rule kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                }
            },
            "required": [
                "adRuleAction",
                "adRuleInboundAllowLists",
                "adRuleOutboundAllowLists",
                "adRuleTargetGroupFilterKindLists",
                "adRuleTargetGroupFilterParams",
                "adRuleTargetGroupFilterType",
                "allowIpv6Traffic",
                "apiVersion",
                "appRuleAction",
                "appRuleInboundAllowLists",
                "appRuleOutboundAllowLists",
                "appRuleTargetGroupFilterKindLists",
                "appRuleTargetGroupFilterParams",
                "appRuleTargetGroupFilterType",
                "categories",
                "description",
                "isPolicyHitlogEnabled",
                "isolationRuleAction",
                "isolationRuleFirstEntityFilterKindLists",
                "isolationRuleFirstEntityFilterParams",
                "isolationRuleFirstEntityFilterType",
                "isolationRuleSecondEntityFilterKindLists",
                "isolationRuleSecondEntityFilterParams",
                "isolationRuleSecondEntityFilterType",
                "metadata",
                "name",
                "ownerReference",
                "projectReference"
            ],
            "inputProperties": {
                "adRuleAction": {
                    "type": "string",
                    "description": "- (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                },
                "adRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList"
                    },
                    "description": "- (Optional) The set of categories that matching VMs need to have.\n"
                },
                "adRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList"
                    },
                    "description": "- (Optional)\n"
                },
                "adRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string",
                    "description": "- (Optional) - Default policy for communication within target group.\n"
                },
                "adRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "adRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "adRuleTargetGroupFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "adRuleTargetGroupPeerSpecificationType": {
                    "type": "string",
                    "description": "- (Optional) - Way to identify the object for which rule is applied.\n"
                },
                "allowIpv6Traffic": {
                    "type": "boolean"
                },
                "appRuleAction": {
                    "type": "string",
                    "description": "- (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                },
                "appRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList"
                    },
                    "description": "- (Optional) The set of categories that matching VMs need to have.\n"
                },
                "appRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList"
                    },
                    "description": "- (Optional)\n"
                },
                "appRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string",
                    "description": "- (Optional) - Default policy for communication within target group.\n"
                },
                "appRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "appRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "appRuleTargetGroupFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "appRuleTargetGroupPeerSpecificationType": {
                    "type": "string",
                    "description": "- (Optional) - Way to identify the object for which rule is applied.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory"
                    },
                    "description": "- (Optional) Categories for the network_security_rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for network_security_rule.\n"
                },
                "isPolicyHitlogEnabled": {
                    "type": "boolean"
                },
                "isolationRuleAction": {
                    "type": "string",
                    "description": "- (Optional) - These rules are used for environmental isolation.\n"
                },
                "isolationRuleFirstEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "isolationRuleFirstEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "isolationRuleFirstEntityFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "isolationRuleSecondEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) - List of kinds associated with this filter.\n"
                },
                "isolationRuleSecondEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                    },
                    "description": "- (Optional) - A list of category key and list of values.\n"
                },
                "isolationRuleSecondEntityFilterType": {
                    "type": "string",
                    "description": "- (Optional) - The type of the filter being used.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the network_security_rule.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkSecurityRule resources.\n",
                "properties": {
                    "adRuleAction": {
                        "type": "string",
                        "description": "- (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                    },
                    "adRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList"
                        },
                        "description": "- (Optional) The set of categories that matching VMs need to have.\n"
                    },
                    "adRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList"
                        },
                        "description": "- (Optional)\n"
                    },
                    "adRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string",
                        "description": "- (Optional) - Default policy for communication within target group.\n"
                    },
                    "adRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- (Optional) - List of kinds associated with this filter.\n"
                    },
                    "adRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam"
                        },
                        "description": "- (Optional) - A list of category key and list of values.\n"
                    },
                    "adRuleTargetGroupFilterType": {
                        "type": "string",
                        "description": "- (Optional) - The type of the filter being used.\n"
                    },
                    "adRuleTargetGroupPeerSpecificationType": {
                        "type": "string",
                        "description": "- (Optional) - Way to identify the object for which rule is applied.\n"
                    },
                    "allowIpv6Traffic": {
                        "type": "boolean"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "appRuleAction": {
                        "type": "string",
                        "description": "- (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                    },
                    "appRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList"
                        },
                        "description": "- (Optional) The set of categories that matching VMs need to have.\n"
                    },
                    "appRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList"
                        },
                        "description": "- (Optional)\n"
                    },
                    "appRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string",
                        "description": "- (Optional) - Default policy for communication within target group.\n"
                    },
                    "appRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- (Optional) - List of kinds associated with this filter.\n"
                    },
                    "appRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam"
                        },
                        "description": "- (Optional) - A list of category key and list of values.\n"
                    },
                    "appRuleTargetGroupFilterType": {
                        "type": "string",
                        "description": "- (Optional) - The type of the filter being used.\n"
                    },
                    "appRuleTargetGroupPeerSpecificationType": {
                        "type": "string",
                        "description": "- (Optional) - Way to identify the object for which rule is applied.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory"
                        },
                        "description": "- (Optional) Categories for the network_security_rule.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) A description for network_security_rule.\n"
                    },
                    "isPolicyHitlogEnabled": {
                        "type": "boolean"
                    },
                    "isolationRuleAction": {
                        "type": "string",
                        "description": "- (Optional) - These rules are used for environmental isolation.\n"
                    },
                    "isolationRuleFirstEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- (Optional) - List of kinds associated with this filter.\n"
                    },
                    "isolationRuleFirstEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                        },
                        "description": "- (Optional) - A list of category key and list of values.\n"
                    },
                    "isolationRuleFirstEntityFilterType": {
                        "type": "string",
                        "description": "- (Optional) - The type of the filter being used.\n"
                    },
                    "isolationRuleSecondEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- (Optional) - List of kinds associated with this filter.\n"
                    },
                    "isolationRuleSecondEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                        },
                        "description": "- (Optional) - A list of category key and list of values.\n"
                    },
                    "isolationRuleSecondEntityFilterType": {
                        "type": "string",
                        "description": "- (Optional) - The type of the filter being used.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The network_security_rule kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) The name for the network_security_rule.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a project.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/pbr:Pbr": {
            "description": "Provides Nutanix resource to create Policy Based Routing inside VPCs.\n\n## Example Usage\n\n### pbr creation with vpc name with any source or destination or protocol with permit action\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst pbr = new nutanix.Pbr(\"pbr\", {\n    action: \"PERMIT\",\n    destination: {\n        addressType: \"ALL\",\n    },\n    priority: 123,\n    protocolType: \"ALL\",\n    source: {\n        addressType: \"ALL\",\n    },\n    vpcName: \"test123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\npbr = nutanix.Pbr(\"pbr\",\n    action=\"PERMIT\",\n    destination=nutanix.PbrDestinationArgs(\n        address_type=\"ALL\",\n    ),\n    priority=123,\n    protocol_type=\"ALL\",\n    source=nutanix.PbrSourceArgs(\n        address_type=\"ALL\",\n    ),\n    vpc_name=\"test123\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pbr = new Nutanix.Pbr(\"pbr\", new()\n    {\n        Action = \"PERMIT\",\n        Destination = new Nutanix.Inputs.PbrDestinationArgs\n        {\n            AddressType = \"ALL\",\n        },\n        Priority = 123,\n        ProtocolType = \"ALL\",\n        Source = new Nutanix.Inputs.PbrSourceArgs\n        {\n            AddressType = \"ALL\",\n        },\n        VpcName = \"test123\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewPbr(ctx, \"pbr\", \u0026nutanix.PbrArgs{\n\t\t\tAction: pulumi.String(\"PERMIT\"),\n\t\t\tDestination: \u0026nutanix.PbrDestinationArgs{\n\t\t\t\tAddressType: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t\tPriority:     pulumi.Int(123),\n\t\t\tProtocolType: pulumi.String(\"ALL\"),\n\t\t\tSource: \u0026nutanix.PbrSourceArgs{\n\t\t\t\tAddressType: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t\tVpcName: pulumi.String(\"test123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.Pbr;\nimport com.pulumi.nutanix.PbrArgs;\nimport com.pulumi.nutanix.inputs.PbrDestinationArgs;\nimport com.pulumi.nutanix.inputs.PbrSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pbr = new Pbr(\"pbr\", PbrArgs.builder()\n            .action(\"PERMIT\")\n            .destination(PbrDestinationArgs.builder()\n                .addressType(\"ALL\")\n                .build())\n            .priority(123)\n            .protocolType(\"ALL\")\n            .source(PbrSourceArgs.builder()\n                .addressType(\"ALL\")\n                .build())\n            .vpcName(\"test123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pbr:\n    type: nutanix:Pbr\n    properties:\n      action: PERMIT\n      destination:\n        addressType: ALL\n      priority: 123\n      protocolType: ALL\n      source:\n        addressType: ALL\n      vpcName: test123\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .\n"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "destination": {
                    "$ref": "#/types/nutanix:index/PbrDestination:PbrDestination"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The routing policies kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of policy\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of policy\n"
                },
                "protocolParameters": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParameters:PbrProtocolParameters"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of network services. This field is valid only when action is REROUTE.\n"
                },
                "source": {
                    "$ref": "#/types/nutanix:index/PbrSource:PbrSource"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}\n"
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc . Should not be used with {vpc_name} .\n"
                }
            },
            "required": [
                "action",
                "apiVersion",
                "destination",
                "isBidirectional",
                "metadata",
                "name",
                "priority",
                "protocolType",
                "serviceIpLists",
                "source",
                "vpcName",
                "vpcReferenceUuid"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .\n",
                    "willReplaceOnChanges": true
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "destination": {
                    "$ref": "#/types/nutanix:index/PbrDestination:PbrDestination"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of policy\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of policy\n"
                },
                "protocolParameters": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParameters:PbrProtocolParameters"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of network services. This field is valid only when action is REROUTE.\n"
                },
                "source": {
                    "$ref": "#/types/nutanix:index/PbrSource:PbrSource"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}\n",
                    "willReplaceOnChanges": true
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc . Should not be used with {vpc_name} .\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "destination",
                "priority",
                "protocolType",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pbr resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .\n",
                        "willReplaceOnChanges": true
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "destination": {
                        "$ref": "#/types/nutanix:index/PbrDestination:PbrDestination"
                    },
                    "isBidirectional": {
                        "type": "boolean",
                        "description": "Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The routing policies kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of policy\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "priority of policy\n"
                    },
                    "protocolParameters": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParameters:PbrProtocolParameters"
                    },
                    "protocolType": {
                        "type": "string",
                        "description": "Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .\n"
                    },
                    "serviceIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP addresses of network services. This field is valid only when action is REROUTE.\n"
                    },
                    "source": {
                        "$ref": "#/types/nutanix:index/PbrSource:PbrSource"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a vpc . Should not be used with {vpc_name} .\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/project:Project": {
            "description": "Provides a Nutanix Project resource to Create a Project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst subnet = new nutanix.Subnet(\"subnet\", {\n    clusterUuid: \"\u003cYOUR_CLUSTER_ID\u003e\",\n    description: \"Description of my unit test VLAN\",\n    vlanId: 31,\n    subnetType: \"VLAN\",\n    subnetIp: \"10.250.140.0\",\n    defaultGatewayIp: \"10.250.140.1\",\n    prefixLength: 24,\n    dhcpOptions: {\n        boot_file_name: \"bootfile\",\n        domain_name: \"nutanix\",\n        tftp_server_name: \"10.250.140.200\",\n    },\n    dhcpDomainNameServerLists: [\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcpDomainSearchLists: [\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ],\n});\nconst projectTestProject = new nutanix.Project(\"projectTestProject\", {\n    description: \"This is my project\",\n    categories: [{\n        name: \"Environment\",\n        value: \"Staging\",\n    }],\n    resourceDomain: {\n        resources: [{\n            limit: 4,\n            resourceType: \"STORAGE\",\n        }],\n    },\n    defaultSubnetReference: {\n        uuid: subnet.metadata.uuid,\n    },\n    apiVersion: \"3.1\",\n});\n// set use_project_internal flag to create project with acps\nconst projectTestIndex_projectProject = new nutanix.Project(\"projectTestIndex/projectProject\", {\n    description: \"This is my project\",\n    clusterUuid: \"\u003cYOUR_CLUSTER_ID\u003e\",\n    useProjectInternal: true,\n    defaultSubnetReference: {\n        uuid: subnet.metadata.uuid,\n    },\n    userReferenceLists: [{\n        name: \"{{user_name}}\",\n        kind: \"user\",\n        uuid: \"{{user_uuid}}\",\n    }],\n    subnetReferenceLists: [{\n        uuid: resource.nutanix_subnet.sub.id,\n    }],\n    acps: [{\n        name: \"{{acp_name}}\",\n        roleReference: {\n            kind: \"role\",\n            uuid: \"{{role_uuid}}\",\n            name: \"Developer\",\n        },\n        userReferenceLists: [{\n            name: \"{{user_name}}\",\n            kind: \"user\",\n            uuid: \"{{user_uuid}}\",\n        }],\n        description: \"{{description}}\",\n    }],\n    apiVersion: \"3.1\",\n});\n//# Create a project with user which not added in the PC\nconst projectTestNutanixIndex_projectProject = new nutanix.Project(\"projectTestNutanixIndex/projectProject\", {\n    description: \"This is my project\",\n    clusterUuid: \"\u003cYOUR_CLUSTER_ID\u003e\",\n    useProjectInternal: true,\n    defaultSubnetReference: {\n        uuid: subnet.metadata.uuid,\n    },\n    userReferenceLists: [{\n        name: \"{{user_name}}\",\n        kind: \"user\",\n        uuid: \"{{user_uuid}}\",\n    }],\n    subnetReferenceLists: [{\n        uuid: resource.nutanix_subnet.sub.id,\n    }],\n    acps: [{\n        name: \"{{acp_name}}\",\n        roleReference: {\n            kind: \"role\",\n            uuid: \"{{role_uuid}}\",\n            name: \"Developer\",\n        },\n        userReferenceLists: [{\n            name: \"{{user_name}}\",\n            kind: \"user\",\n            uuid: \"{{user_uuid}}\",\n        }],\n        description: \"{{description}}\",\n    }],\n    userLists: [{\n        metadata: {\n            kind: \"user\",\n            uuid: \"{{ UUID of the USER }}\",\n        },\n        directoryServiceUser: {\n            userPrincipalName: \"{{ Name of user }}\",\n            directoryServiceReference: {\n                uuid: \"{{ DIRECTORY SERVICE UUID }}\",\n                kind: \"directory_service\",\n            },\n        },\n    }],\n    apiVersion: \"3.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsubnet = nutanix.Subnet(\"subnet\",\n    cluster_uuid=\"\u003cYOUR_CLUSTER_ID\u003e\",\n    description=\"Description of my unit test VLAN\",\n    vlan_id=31,\n    subnet_type=\"VLAN\",\n    subnet_ip=\"10.250.140.0\",\n    default_gateway_ip=\"10.250.140.1\",\n    prefix_length=24,\n    dhcp_options={\n        \"boot_file_name\": \"bootfile\",\n        \"domain_name\": \"nutanix\",\n        \"tftp_server_name\": \"10.250.140.200\",\n    },\n    dhcp_domain_name_server_lists=[\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcp_domain_search_lists=[\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ])\nproject_test_project = nutanix.Project(\"projectTestProject\",\n    description=\"This is my project\",\n    categories=[nutanix.ProjectCategoryArgs(\n        name=\"Environment\",\n        value=\"Staging\",\n    )],\n    resource_domain=nutanix.ProjectResourceDomainArgs(\n        resources=[nutanix.ProjectResourceDomainResourceArgs(\n            limit=4,\n            resource_type=\"STORAGE\",\n        )],\n    ),\n    default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(\n        uuid=subnet.metadata[\"uuid\"],\n    ),\n    api_version=\"3.1\")\n# set use_project_internal flag to create project with acps\nproject_test_index_project_project = nutanix.Project(\"projectTestIndex/projectProject\",\n    description=\"This is my project\",\n    cluster_uuid=\"\u003cYOUR_CLUSTER_ID\u003e\",\n    use_project_internal=True,\n    default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(\n        uuid=subnet.metadata[\"uuid\"],\n    ),\n    user_reference_lists=[nutanix.ProjectUserReferenceListArgs(\n        name=\"{{user_name}}\",\n        kind=\"user\",\n        uuid=\"{{user_uuid}}\",\n    )],\n    subnet_reference_lists=[nutanix.ProjectSubnetReferenceListArgs(\n        uuid=resource[\"nutanix_subnet\"][\"sub\"][\"id\"],\n    )],\n    acps=[nutanix.ProjectAcpArgs(\n        name=\"{{acp_name}}\",\n        role_reference=nutanix.ProjectAcpRoleReferenceArgs(\n            kind=\"role\",\n            uuid=\"{{role_uuid}}\",\n            name=\"Developer\",\n        ),\n        user_reference_lists=[nutanix.ProjectAcpUserReferenceListArgs(\n            name=\"{{user_name}}\",\n            kind=\"user\",\n            uuid=\"{{user_uuid}}\",\n        )],\n        description=\"{{description}}\",\n    )],\n    api_version=\"3.1\")\n## Create a project with user which not added in the PC\nproject_test_nutanix_index_project_project = nutanix.Project(\"projectTestNutanixIndex/projectProject\",\n    description=\"This is my project\",\n    cluster_uuid=\"\u003cYOUR_CLUSTER_ID\u003e\",\n    use_project_internal=True,\n    default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(\n        uuid=subnet.metadata[\"uuid\"],\n    ),\n    user_reference_lists=[nutanix.ProjectUserReferenceListArgs(\n        name=\"{{user_name}}\",\n        kind=\"user\",\n        uuid=\"{{user_uuid}}\",\n    )],\n    subnet_reference_lists=[nutanix.ProjectSubnetReferenceListArgs(\n        uuid=resource[\"nutanix_subnet\"][\"sub\"][\"id\"],\n    )],\n    acps=[nutanix.ProjectAcpArgs(\n        name=\"{{acp_name}}\",\n        role_reference=nutanix.ProjectAcpRoleReferenceArgs(\n            kind=\"role\",\n            uuid=\"{{role_uuid}}\",\n            name=\"Developer\",\n        ),\n        user_reference_lists=[nutanix.ProjectAcpUserReferenceListArgs(\n            name=\"{{user_name}}\",\n            kind=\"user\",\n            uuid=\"{{user_uuid}}\",\n        )],\n        description=\"{{description}}\",\n    )],\n    user_lists=[nutanix.ProjectUserListArgs(\n        metadata={\n            \"kind\": \"user\",\n            \"uuid\": \"{{ UUID of the USER }}\",\n        },\n        directory_service_user=nutanix.ProjectUserListDirectoryServiceUserArgs(\n            user_principal_name=\"{{ Name of user }}\",\n            directory_service_reference=nutanix.ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs(\n                uuid=\"{{ DIRECTORY SERVICE UUID }}\",\n                kind=\"directory_service\",\n            ),\n        ),\n    )],\n    api_version=\"3.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var subnet = new Nutanix.Subnet(\"subnet\", new()\n    {\n        ClusterUuid = \"\u003cYOUR_CLUSTER_ID\u003e\",\n        Description = \"Description of my unit test VLAN\",\n        VlanId = 31,\n        SubnetType = \"VLAN\",\n        SubnetIp = \"10.250.140.0\",\n        DefaultGatewayIp = \"10.250.140.1\",\n        PrefixLength = 24,\n        DhcpOptions = \n        {\n            { \"boot_file_name\", \"bootfile\" },\n            { \"domain_name\", \"nutanix\" },\n            { \"tftp_server_name\", \"10.250.140.200\" },\n        },\n        DhcpDomainNameServerLists = new[]\n        {\n            \"8.8.8.8\",\n            \"4.2.2.2\",\n        },\n        DhcpDomainSearchLists = new[]\n        {\n            \"terraform.nutanix.com\",\n            \"terraform.unit.test.com\",\n        },\n    });\n\n    var projectTestProject = new Nutanix.Project(\"projectTestProject\", new()\n    {\n        Description = \"This is my project\",\n        Categories = new[]\n        {\n            new Nutanix.Inputs.ProjectCategoryArgs\n            {\n                Name = \"Environment\",\n                Value = \"Staging\",\n            },\n        },\n        ResourceDomain = new Nutanix.Inputs.ProjectResourceDomainArgs\n        {\n            Resources = new[]\n            {\n                new Nutanix.Inputs.ProjectResourceDomainResourceArgs\n                {\n                    Limit = 4,\n                    ResourceType = \"STORAGE\",\n                },\n            },\n        },\n        DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs\n        {\n            Uuid = subnet.Metadata.Apply(metadata =\u003e metadata.Uuid),\n        },\n        ApiVersion = \"3.1\",\n    });\n\n    // set use_project_internal flag to create project with acps\n    var projectTestIndex_projectProject = new Nutanix.Project(\"projectTestIndex/projectProject\", new()\n    {\n        Description = \"This is my project\",\n        ClusterUuid = \"\u003cYOUR_CLUSTER_ID\u003e\",\n        UseProjectInternal = true,\n        DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs\n        {\n            Uuid = subnet.Metadata.Apply(metadata =\u003e metadata.Uuid),\n        },\n        UserReferenceLists = new[]\n        {\n            new Nutanix.Inputs.ProjectUserReferenceListArgs\n            {\n                Name = \"{{user_name}}\",\n                Kind = \"user\",\n                Uuid = \"{{user_uuid}}\",\n            },\n        },\n        SubnetReferenceLists = new[]\n        {\n            new Nutanix.Inputs.ProjectSubnetReferenceListArgs\n            {\n                Uuid = resource.Nutanix_subnet.Sub.Id,\n            },\n        },\n        Acps = new[]\n        {\n            new Nutanix.Inputs.ProjectAcpArgs\n            {\n                Name = \"{{acp_name}}\",\n                RoleReference = new Nutanix.Inputs.ProjectAcpRoleReferenceArgs\n                {\n                    Kind = \"role\",\n                    Uuid = \"{{role_uuid}}\",\n                    Name = \"Developer\",\n                },\n                UserReferenceLists = new[]\n                {\n                    new Nutanix.Inputs.ProjectAcpUserReferenceListArgs\n                    {\n                        Name = \"{{user_name}}\",\n                        Kind = \"user\",\n                        Uuid = \"{{user_uuid}}\",\n                    },\n                },\n                Description = \"{{description}}\",\n            },\n        },\n        ApiVersion = \"3.1\",\n    });\n\n    //# Create a project with user which not added in the PC\n    var projectTestNutanixIndex_projectProject = new Nutanix.Project(\"projectTestNutanixIndex/projectProject\", new()\n    {\n        Description = \"This is my project\",\n        ClusterUuid = \"\u003cYOUR_CLUSTER_ID\u003e\",\n        UseProjectInternal = true,\n        DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs\n        {\n            Uuid = subnet.Metadata.Apply(metadata =\u003e metadata.Uuid),\n        },\n        UserReferenceLists = new[]\n        {\n            new Nutanix.Inputs.ProjectUserReferenceListArgs\n            {\n                Name = \"{{user_name}}\",\n                Kind = \"user\",\n                Uuid = \"{{user_uuid}}\",\n            },\n        },\n        SubnetReferenceLists = new[]\n        {\n            new Nutanix.Inputs.ProjectSubnetReferenceListArgs\n            {\n                Uuid = resource.Nutanix_subnet.Sub.Id,\n            },\n        },\n        Acps = new[]\n        {\n            new Nutanix.Inputs.ProjectAcpArgs\n            {\n                Name = \"{{acp_name}}\",\n                RoleReference = new Nutanix.Inputs.ProjectAcpRoleReferenceArgs\n                {\n                    Kind = \"role\",\n                    Uuid = \"{{role_uuid}}\",\n                    Name = \"Developer\",\n                },\n                UserReferenceLists = new[]\n                {\n                    new Nutanix.Inputs.ProjectAcpUserReferenceListArgs\n                    {\n                        Name = \"{{user_name}}\",\n                        Kind = \"user\",\n                        Uuid = \"{{user_uuid}}\",\n                    },\n                },\n                Description = \"{{description}}\",\n            },\n        },\n        UserLists = new[]\n        {\n            new Nutanix.Inputs.ProjectUserListArgs\n            {\n                Metadata = \n                {\n                    { \"kind\", \"user\" },\n                    { \"uuid\", \"{{ UUID of the USER }}\" },\n                },\n                DirectoryServiceUser = new Nutanix.Inputs.ProjectUserListDirectoryServiceUserArgs\n                {\n                    UserPrincipalName = \"{{ Name of user }}\",\n                    DirectoryServiceReference = new Nutanix.Inputs.ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs\n                    {\n                        Uuid = \"{{ DIRECTORY SERVICE UUID }}\",\n                        Kind = \"directory_service\",\n                    },\n                },\n            },\n        },\n        ApiVersion = \"3.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsubnet, err := nutanix.NewSubnet(ctx, \"subnet\", \u0026nutanix.SubnetArgs{\n\t\t\tClusterUuid:      pulumi.String(\"\u003cYOUR_CLUSTER_ID\u003e\"),\n\t\t\tDescription:      pulumi.String(\"Description of my unit test VLAN\"),\n\t\t\tVlanId:           pulumi.Int(31),\n\t\t\tSubnetType:       pulumi.String(\"VLAN\"),\n\t\t\tSubnetIp:         pulumi.String(\"10.250.140.0\"),\n\t\t\tDefaultGatewayIp: pulumi.String(\"10.250.140.1\"),\n\t\t\tPrefixLength:     pulumi.Int(24),\n\t\t\tDhcpOptions: pulumi.StringMap{\n\t\t\t\t\"boot_file_name\":   pulumi.String(\"bootfile\"),\n\t\t\t\t\"domain_name\":      pulumi.String(\"nutanix\"),\n\t\t\t\t\"tftp_server_name\": pulumi.String(\"10.250.140.200\"),\n\t\t\t},\n\t\t\tDhcpDomainNameServerLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"4.2.2.2\"),\n\t\t\t},\n\t\t\tDhcpDomainSearchLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform.nutanix.com\"),\n\t\t\t\tpulumi.String(\"terraform.unit.test.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewProject(ctx, \"projectTestProject\", \u0026nutanix.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"This is my project\"),\n\t\t\tCategories: nutanix.ProjectCategoryArray{\n\t\t\t\t\u0026nutanix.ProjectCategoryArgs{\n\t\t\t\t\tName:  pulumi.String(\"Environment\"),\n\t\t\t\t\tValue: pulumi.String(\"Staging\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResourceDomain: \u0026nutanix.ProjectResourceDomainArgs{\n\t\t\t\tResources: nutanix.ProjectResourceDomainResourceArray{\n\t\t\t\t\t\u0026nutanix.ProjectResourceDomainResourceArgs{\n\t\t\t\t\t\tLimit:        pulumi.Int(4),\n\t\t\t\t\t\tResourceType: pulumi.String(\"STORAGE\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDefaultSubnetReference: \u0026nutanix.ProjectDefaultSubnetReferenceArgs{\n\t\t\t\tUuid: subnet.Metadata.ApplyT(func(metadata map[string]string) (string, error) {\n\t\t\t\t\treturn metadata.Uuid, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tApiVersion: pulumi.String(\"3.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewProject(ctx, \"projectTestIndex/projectProject\", \u0026nutanix.ProjectArgs{\n\t\t\tDescription:        pulumi.String(\"This is my project\"),\n\t\t\tClusterUuid:        pulumi.String(\"\u003cYOUR_CLUSTER_ID\u003e\"),\n\t\t\tUseProjectInternal: pulumi.Bool(true),\n\t\t\tDefaultSubnetReference: \u0026nutanix.ProjectDefaultSubnetReferenceArgs{\n\t\t\t\tUuid: subnet.Metadata.ApplyT(func(metadata map[string]string) (string, error) {\n\t\t\t\t\treturn metadata.Uuid, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tUserReferenceLists: nutanix.ProjectUserReferenceListArray{\n\t\t\t\t\u0026nutanix.ProjectUserReferenceListArgs{\n\t\t\t\t\tName: pulumi.String(\"{{user_name}}\"),\n\t\t\t\t\tKind: pulumi.String(\"user\"),\n\t\t\t\t\tUuid: pulumi.String(\"{{user_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSubnetReferenceLists: nutanix.ProjectSubnetReferenceListArray{\n\t\t\t\t\u0026nutanix.ProjectSubnetReferenceListArgs{\n\t\t\t\t\tUuid: pulumi.Any(resource.Nutanix_subnet.Sub.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAcps: nutanix.ProjectAcpArray{\n\t\t\t\t\u0026nutanix.ProjectAcpArgs{\n\t\t\t\t\tName: pulumi.String(\"{{acp_name}}\"),\n\t\t\t\t\tRoleReference: \u0026nutanix.ProjectAcpRoleReferenceArgs{\n\t\t\t\t\t\tKind: pulumi.String(\"role\"),\n\t\t\t\t\t\tUuid: pulumi.String(\"{{role_uuid}}\"),\n\t\t\t\t\t\tName: pulumi.String(\"Developer\"),\n\t\t\t\t\t},\n\t\t\t\t\tUserReferenceLists: nutanix.ProjectAcpUserReferenceListArray{\n\t\t\t\t\t\t\u0026nutanix.ProjectAcpUserReferenceListArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"{{user_name}}\"),\n\t\t\t\t\t\t\tKind: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tUuid: pulumi.String(\"{{user_uuid}}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDescription: pulumi.String(\"{{description}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tApiVersion: pulumi.String(\"3.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewProject(ctx, \"projectTestNutanixIndex/projectProject\", \u0026nutanix.ProjectArgs{\n\t\t\tDescription:        pulumi.String(\"This is my project\"),\n\t\t\tClusterUuid:        pulumi.String(\"\u003cYOUR_CLUSTER_ID\u003e\"),\n\t\t\tUseProjectInternal: pulumi.Bool(true),\n\t\t\tDefaultSubnetReference: \u0026nutanix.ProjectDefaultSubnetReferenceArgs{\n\t\t\t\tUuid: subnet.Metadata.ApplyT(func(metadata map[string]string) (string, error) {\n\t\t\t\t\treturn metadata.Uuid, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tUserReferenceLists: nutanix.ProjectUserReferenceListArray{\n\t\t\t\t\u0026nutanix.ProjectUserReferenceListArgs{\n\t\t\t\t\tName: pulumi.String(\"{{user_name}}\"),\n\t\t\t\t\tKind: pulumi.String(\"user\"),\n\t\t\t\t\tUuid: pulumi.String(\"{{user_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSubnetReferenceLists: nutanix.ProjectSubnetReferenceListArray{\n\t\t\t\t\u0026nutanix.ProjectSubnetReferenceListArgs{\n\t\t\t\t\tUuid: pulumi.Any(resource.Nutanix_subnet.Sub.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAcps: nutanix.ProjectAcpArray{\n\t\t\t\t\u0026nutanix.ProjectAcpArgs{\n\t\t\t\t\tName: pulumi.String(\"{{acp_name}}\"),\n\t\t\t\t\tRoleReference: \u0026nutanix.ProjectAcpRoleReferenceArgs{\n\t\t\t\t\t\tKind: pulumi.String(\"role\"),\n\t\t\t\t\t\tUuid: pulumi.String(\"{{role_uuid}}\"),\n\t\t\t\t\t\tName: pulumi.String(\"Developer\"),\n\t\t\t\t\t},\n\t\t\t\t\tUserReferenceLists: nutanix.ProjectAcpUserReferenceListArray{\n\t\t\t\t\t\t\u0026nutanix.ProjectAcpUserReferenceListArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"{{user_name}}\"),\n\t\t\t\t\t\t\tKind: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tUuid: pulumi.String(\"{{user_uuid}}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDescription: pulumi.String(\"{{description}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUserLists: nutanix.ProjectUserListArray{\n\t\t\t\t\u0026nutanix.ProjectUserListArgs{\n\t\t\t\t\tMetadata: pulumi.StringMap{\n\t\t\t\t\t\t\"kind\": pulumi.String(\"user\"),\n\t\t\t\t\t\t\"uuid\": pulumi.String(\"{{ UUID of the USER }}\"),\n\t\t\t\t\t},\n\t\t\t\t\tDirectoryServiceUser: \u0026nutanix.ProjectUserListDirectoryServiceUserArgs{\n\t\t\t\t\t\tUserPrincipalName: pulumi.String(\"{{ Name of user }}\"),\n\t\t\t\t\t\tDirectoryServiceReference: \u0026nutanix.ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs{\n\t\t\t\t\t\t\tUuid: pulumi.String(\"{{ DIRECTORY SERVICE UUID }}\"),\n\t\t\t\t\t\t\tKind: pulumi.String(\"directory_service\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tApiVersion: pulumi.String(\"3.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.Subnet;\nimport com.pulumi.nutanix.SubnetArgs;\nimport com.pulumi.nutanix.Project;\nimport com.pulumi.nutanix.ProjectArgs;\nimport com.pulumi.nutanix.inputs.ProjectCategoryArgs;\nimport com.pulumi.nutanix.inputs.ProjectResourceDomainArgs;\nimport com.pulumi.nutanix.inputs.ProjectDefaultSubnetReferenceArgs;\nimport com.pulumi.nutanix.inputs.ProjectUserReferenceListArgs;\nimport com.pulumi.nutanix.inputs.ProjectSubnetReferenceListArgs;\nimport com.pulumi.nutanix.inputs.ProjectAcpArgs;\nimport com.pulumi.nutanix.inputs.ProjectAcpRoleReferenceArgs;\nimport com.pulumi.nutanix.inputs.ProjectUserListArgs;\nimport com.pulumi.nutanix.inputs.ProjectUserListDirectoryServiceUserArgs;\nimport com.pulumi.nutanix.inputs.ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var subnet = new Subnet(\"subnet\", SubnetArgs.builder()\n            .clusterUuid(\"\u003cYOUR_CLUSTER_ID\u003e\")\n            .description(\"Description of my unit test VLAN\")\n            .vlanId(31)\n            .subnetType(\"VLAN\")\n            .subnetIp(\"10.250.140.0\")\n            .defaultGatewayIp(\"10.250.140.1\")\n            .prefixLength(24)\n            .dhcpOptions(Map.ofEntries(\n                Map.entry(\"boot_file_name\", \"bootfile\"),\n                Map.entry(\"domain_name\", \"nutanix\"),\n                Map.entry(\"tftp_server_name\", \"10.250.140.200\")\n            ))\n            .dhcpDomainNameServerLists(            \n                \"8.8.8.8\",\n                \"4.2.2.2\")\n            .dhcpDomainSearchLists(            \n                \"terraform.nutanix.com\",\n                \"terraform.unit.test.com\")\n            .build());\n\n        var projectTestProject = new Project(\"projectTestProject\", ProjectArgs.builder()\n            .description(\"This is my project\")\n            .categories(ProjectCategoryArgs.builder()\n                .name(\"Environment\")\n                .value(\"Staging\")\n                .build())\n            .resourceDomain(ProjectResourceDomainArgs.builder()\n                .resources(ProjectResourceDomainResourceArgs.builder()\n                    .limit(4)\n                    .resourceType(\"STORAGE\")\n                    .build())\n                .build())\n            .defaultSubnetReference(ProjectDefaultSubnetReferenceArgs.builder()\n                .uuid(subnet.metadata().applyValue(metadata -\u003e metadata.uuid()))\n                .build())\n            .apiVersion(\"3.1\")\n            .build());\n\n        // set use_project_internal flag to create project with acps\n        var projectTestIndex_projectProject = new Project(\"projectTestIndex/projectProject\", ProjectArgs.builder()\n            .description(\"This is my project\")\n            .clusterUuid(\"\u003cYOUR_CLUSTER_ID\u003e\")\n            .useProjectInternal(true)\n            .defaultSubnetReference(ProjectDefaultSubnetReferenceArgs.builder()\n                .uuid(subnet.metadata().applyValue(metadata -\u003e metadata.uuid()))\n                .build())\n            .userReferenceLists(ProjectUserReferenceListArgs.builder()\n                .name(\"{{user_name}}\")\n                .kind(\"user\")\n                .uuid(\"{{user_uuid}}\")\n                .build())\n            .subnetReferenceLists(ProjectSubnetReferenceListArgs.builder()\n                .uuid(resource.nutanix_subnet().sub().id())\n                .build())\n            .acps(ProjectAcpArgs.builder()\n                .name(\"{{acp_name}}\")\n                .roleReference(ProjectAcpRoleReferenceArgs.builder()\n                    .kind(\"role\")\n                    .uuid(\"{{role_uuid}}\")\n                    .name(\"Developer\")\n                    .build())\n                .userReferenceLists(ProjectAcpUserReferenceListArgs.builder()\n                    .name(\"{{user_name}}\")\n                    .kind(\"user\")\n                    .uuid(\"{{user_uuid}}\")\n                    .build())\n                .description(\"{{description}}\")\n                .build())\n            .apiVersion(\"3.1\")\n            .build());\n\n        //# Create a project with user which not added in the PC\n        var projectTestNutanixIndex_projectProject = new Project(\"projectTestNutanixIndex/projectProject\", ProjectArgs.builder()\n            .description(\"This is my project\")\n            .clusterUuid(\"\u003cYOUR_CLUSTER_ID\u003e\")\n            .useProjectInternal(true)\n            .defaultSubnetReference(ProjectDefaultSubnetReferenceArgs.builder()\n                .uuid(subnet.metadata().applyValue(metadata -\u003e metadata.uuid()))\n                .build())\n            .userReferenceLists(ProjectUserReferenceListArgs.builder()\n                .name(\"{{user_name}}\")\n                .kind(\"user\")\n                .uuid(\"{{user_uuid}}\")\n                .build())\n            .subnetReferenceLists(ProjectSubnetReferenceListArgs.builder()\n                .uuid(resource.nutanix_subnet().sub().id())\n                .build())\n            .acps(ProjectAcpArgs.builder()\n                .name(\"{{acp_name}}\")\n                .roleReference(ProjectAcpRoleReferenceArgs.builder()\n                    .kind(\"role\")\n                    .uuid(\"{{role_uuid}}\")\n                    .name(\"Developer\")\n                    .build())\n                .userReferenceLists(ProjectAcpUserReferenceListArgs.builder()\n                    .name(\"{{user_name}}\")\n                    .kind(\"user\")\n                    .uuid(\"{{user_uuid}}\")\n                    .build())\n                .description(\"{{description}}\")\n                .build())\n            .userLists(ProjectUserListArgs.builder()\n                .metadata(Map.ofEntries(\n                    Map.entry(\"kind\", \"user\"),\n                    Map.entry(\"uuid\", \"{{ UUID of the USER }}\")\n                ))\n                .directoryServiceUser(ProjectUserListDirectoryServiceUserArgs.builder()\n                    .userPrincipalName(\"{{ Name of user }}\")\n                    .directoryServiceReference(ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs.builder()\n                        .uuid(\"{{ DIRECTORY SERVICE UUID }}\")\n                        .kind(\"directory_service\")\n                        .build())\n                    .build())\n                .build())\n            .apiVersion(\"3.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  subnet:\n    type: nutanix:Subnet\n    properties:\n      clusterUuid: \u003cYOUR_CLUSTER_ID\u003e\n      description: Description of my unit test VLAN\n      vlanId: 31\n      subnetType: VLAN\n      subnetIp: 10.250.140.0\n      defaultGatewayIp: 10.250.140.1\n      prefixLength: 24\n      dhcpOptions:\n        boot_file_name: bootfile\n        domain_name: nutanix\n        tftp_server_name: 10.250.140.200\n      dhcpDomainNameServerLists:\n        - 8.8.8.8\n        - 4.2.2.2\n      dhcpDomainSearchLists:\n        - terraform.nutanix.com\n        - terraform.unit.test.com\n  projectTestProject: # set use_project_internal flag to create project with acps\n    type: nutanix:Project\n    properties:\n      description: This is my project\n      categories:\n        - name: Environment\n          value: Staging\n      resourceDomain:\n        resources:\n          - limit: 4\n            resourceType: STORAGE\n      defaultSubnetReference:\n        uuid: ${subnet.metadata.uuid}\n      apiVersion: '3.1'\n  projectTestIndex/projectProject: ## Create a project with user which not added in the PC\n    type: nutanix:Project\n    properties:\n      description: This is my project\n      clusterUuid: \u003cYOUR_CLUSTER_ID\u003e\n      useProjectInternal: true\n      defaultSubnetReference:\n        uuid: ${subnet.metadata.uuid}\n      userReferenceLists:\n        - name: '{{user_name}}'\n          kind: user\n          uuid: '{{user_uuid}}'\n      subnetReferenceLists:\n        - uuid: ${resource.nutanix_subnet.sub.id}\n      acps:\n        - name: '{{acp_name}}'\n          roleReference:\n            kind: role\n            uuid: '{{role_uuid}}'\n            name: Developer\n          userReferenceLists:\n            - name: '{{user_name}}'\n              kind: user\n              uuid: '{{user_uuid}}'\n          description: '{{description}}'\n      apiVersion: '3.1'\n  projectTestNutanixIndex/projectProject:\n    type: nutanix:Project\n    properties:\n      description: This is my project\n      clusterUuid: \u003cYOUR_CLUSTER_ID\u003e\n      useProjectInternal: true\n      defaultSubnetReference:\n        uuid: ${subnet.metadata.uuid}\n      userReferenceLists:\n        - name: '{{user_name}}'\n          kind: user\n          uuid: '{{user_uuid}}'\n      subnetReferenceLists:\n        - uuid: ${resource.nutanix_subnet.sub.id}\n      acps:\n        - name: '{{acp_name}}'\n          roleReference:\n            kind: role\n            uuid: '{{role_uuid}}'\n            name: Developer\n          userReferenceLists:\n            - name: '{{user_name}}'\n              kind: user\n              uuid: '{{user_uuid}}'\n          description: '{{description}}'\n      userLists:\n        - metadata:\n            kind: user\n            uuid: '{{ UUID of the USER }}'\n          directoryServiceUser:\n            userPrincipalName: '{{ Name of user }}'\n            directoryServiceReference:\n              uuid: '{{ DIRECTORY SERVICE UUID }}'\n              kind: directory_service\n      apiVersion: '3.1'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accountReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList"
                    }
                },
                "acps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAcp:ProjectAcp"
                    }
                },
                "apiVersion": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectCategory:ProjectCategory"
                    },
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectClusterReferenceList:ProjectClusterReferenceList"
                    }
                },
                "clusterUuid": {
                    "type": "string",
                    "description": "The UUID of cluster. (Required when using project_internal flag).\n"
                },
                "defaultEnvironmentReference": {
                    "$ref": "#/types/nutanix:index/ProjectDefaultEnvironmentReference:ProjectDefaultEnvironmentReference"
                },
                "defaultSubnetReference": {
                    "$ref": "#/types/nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference"
                },
                "description": {
                    "type": "string",
                    "description": "A description for project.\n"
                },
                "enableCollab": {
                    "type": "boolean",
                    "description": "flag to allow collaboration of projects. (Use with project_internal flag)\n"
                },
                "environmentReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList"
                    }
                },
                "externalNetworkLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList"
                    }
                },
                "externalUserGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList"
                    }
                },
                "isDefault": {
                    "type": "boolean"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resourceDomain": {
                    "$ref": "#/types/nutanix:index/ProjectResourceDomain:ProjectResourceDomain"
                },
                "state": {
                    "type": "string"
                },
                "subnetReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList"
                    }
                },
                "tunnelReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectTunnelReferenceList:ProjectTunnelReferenceList"
                    }
                },
                "useProjectInternal": {
                    "type": "boolean",
                    "description": "flag to use project internal for user role mapping\n"
                },
                "userGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserGroupList:ProjectUserGroupList"
                    }
                },
                "userLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserList:ProjectUserList"
                    }
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList"
                    },
                    "description": "List of Reference of users.\n"
                },
                "vpcReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectVpcReferenceList:ProjectVpcReferenceList"
                    }
                }
            },
            "required": [
                "accountReferenceLists",
                "apiVersion",
                "categories",
                "clusterReferenceLists",
                "defaultEnvironmentReference",
                "defaultSubnetReference",
                "description",
                "environmentReferenceLists",
                "externalNetworkLists",
                "externalUserGroupReferenceLists",
                "isDefault",
                "metadata",
                "name",
                "ownerReference",
                "projectReference",
                "state",
                "subnetReferenceLists",
                "tunnelReferenceLists",
                "userReferenceLists",
                "vpcReferenceLists"
            ],
            "inputProperties": {
                "accountReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList"
                    }
                },
                "acps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAcp:ProjectAcp"
                    }
                },
                "apiVersion": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectCategory:ProjectCategory"
                    },
                    "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectClusterReferenceList:ProjectClusterReferenceList"
                    }
                },
                "clusterUuid": {
                    "type": "string",
                    "description": "The UUID of cluster. (Required when using project_internal flag).\n"
                },
                "defaultEnvironmentReference": {
                    "$ref": "#/types/nutanix:index/ProjectDefaultEnvironmentReference:ProjectDefaultEnvironmentReference"
                },
                "defaultSubnetReference": {
                    "$ref": "#/types/nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference"
                },
                "description": {
                    "type": "string",
                    "description": "A description for project.\n"
                },
                "enableCollab": {
                    "type": "boolean",
                    "description": "flag to allow collaboration of projects. (Use with project_internal flag)\n"
                },
                "environmentReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList"
                    }
                },
                "externalNetworkLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList"
                    }
                },
                "externalUserGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resourceDomain": {
                    "$ref": "#/types/nutanix:index/ProjectResourceDomain:ProjectResourceDomain"
                },
                "subnetReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList"
                    }
                },
                "tunnelReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectTunnelReferenceList:ProjectTunnelReferenceList"
                    }
                },
                "useProjectInternal": {
                    "type": "boolean",
                    "description": "flag to use project internal for user role mapping\n"
                },
                "userGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserGroupList:ProjectUserGroupList"
                    }
                },
                "userLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserList:ProjectUserList"
                    }
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList"
                    },
                    "description": "List of Reference of users.\n"
                },
                "vpcReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectVpcReferenceList:ProjectVpcReferenceList"
                    }
                }
            },
            "requiredInputs": [
                "defaultSubnetReference",
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "accountReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList"
                        }
                    },
                    "acps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectAcp:ProjectAcp"
                        }
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectCategory:ProjectCategory"
                        },
                        "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                    },
                    "clusterReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectClusterReferenceList:ProjectClusterReferenceList"
                        }
                    },
                    "clusterUuid": {
                        "type": "string",
                        "description": "The UUID of cluster. (Required when using project_internal flag).\n"
                    },
                    "defaultEnvironmentReference": {
                        "$ref": "#/types/nutanix:index/ProjectDefaultEnvironmentReference:ProjectDefaultEnvironmentReference"
                    },
                    "defaultSubnetReference": {
                        "$ref": "#/types/nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for project.\n"
                    },
                    "enableCollab": {
                        "type": "boolean",
                        "description": "flag to allow collaboration of projects. (Use with project_internal flag)\n"
                    },
                    "environmentReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList"
                        }
                    },
                    "externalNetworkLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList"
                        }
                    },
                    "externalUserGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList"
                        }
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the project.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "resourceDomain": {
                        "$ref": "#/types/nutanix:index/ProjectResourceDomain:ProjectResourceDomain"
                    },
                    "state": {
                        "type": "string"
                    },
                    "subnetReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList"
                        }
                    },
                    "tunnelReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectTunnelReferenceList:ProjectTunnelReferenceList"
                        }
                    },
                    "useProjectInternal": {
                        "type": "boolean",
                        "description": "flag to use project internal for user role mapping\n"
                    },
                    "userGroupLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectUserGroupList:ProjectUserGroupList"
                        }
                    },
                    "userLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectUserList:ProjectUserList"
                        }
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList"
                        },
                        "description": "List of Reference of users.\n"
                    },
                    "vpcReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectVpcReferenceList:ProjectVpcReferenceList"
                        }
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/protectionRule:ProtectionRule": {
            "description": "Provides a Nutanix Protection Rule resource to Create a Protection Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst protectionRuleTest = new nutanix.ProtectionRule(\"protectionRuleTest\", {\n    availabilityZoneConnectivityLists: [{\n        snapshotScheduleLists: [{\n            localSnapshotRetentionPolicy: {\n                numSnapshots: 1,\n            },\n            recoveryPointObjectiveSecs: 3600,\n            snapshotType: \"CRASH_CONSISTENT\",\n        }],\n    }],\n    categoryFilter: {\n        params: [{\n            name: \"Environment\",\n            values: [\"Dev\"],\n        }],\n    },\n    description: \"test\",\n    orderedAvailabilityZoneLists: [{\n        availabilityZoneUrl: \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprotection_rule_test = nutanix.ProtectionRule(\"protectionRuleTest\",\n    availability_zone_connectivity_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListArgs(\n        snapshot_schedule_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs(\n            local_snapshot_retention_policy=nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs(\n                num_snapshots=1,\n            ),\n            recovery_point_objective_secs=3600,\n            snapshot_type=\"CRASH_CONSISTENT\",\n        )],\n    )],\n    category_filter=nutanix.ProtectionRuleCategoryFilterArgs(\n        params=[nutanix.ProtectionRuleCategoryFilterParamArgs(\n            name=\"Environment\",\n            values=[\"Dev\"],\n        )],\n    ),\n    description=\"test\",\n    ordered_availability_zone_lists=[nutanix.ProtectionRuleOrderedAvailabilityZoneListArgs(\n        availability_zone_url=\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var protectionRuleTest = new Nutanix.ProtectionRule(\"protectionRuleTest\", new()\n    {\n        AvailabilityZoneConnectivityLists = new[]\n        {\n            new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs\n            {\n                SnapshotScheduleLists = new[]\n                {\n                    new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs\n                    {\n                        LocalSnapshotRetentionPolicy = new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs\n                        {\n                            NumSnapshots = 1,\n                        },\n                        RecoveryPointObjectiveSecs = 3600,\n                        SnapshotType = \"CRASH_CONSISTENT\",\n                    },\n                },\n            },\n        },\n        CategoryFilter = new Nutanix.Inputs.ProtectionRuleCategoryFilterArgs\n        {\n            Params = new[]\n            {\n                new Nutanix.Inputs.ProtectionRuleCategoryFilterParamArgs\n                {\n                    Name = \"Environment\",\n                    Values = new[]\n                    {\n                        \"Dev\",\n                    },\n                },\n            },\n        },\n        Description = \"test\",\n        OrderedAvailabilityZoneLists = new[]\n        {\n            new Nutanix.Inputs.ProtectionRuleOrderedAvailabilityZoneListArgs\n            {\n                AvailabilityZoneUrl = \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewProtectionRule(ctx, \"protectionRuleTest\", \u0026nutanix.ProtectionRuleArgs{\n\t\t\tAvailabilityZoneConnectivityLists: nutanix.ProtectionRuleAvailabilityZoneConnectivityListArray{\n\t\t\t\t\u0026nutanix.ProtectionRuleAvailabilityZoneConnectivityListArgs{\n\t\t\t\t\tSnapshotScheduleLists: nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArray{\n\t\t\t\t\t\t\u0026nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs{\n\t\t\t\t\t\t\tLocalSnapshotRetentionPolicy: \u0026nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs{\n\t\t\t\t\t\t\t\tNumSnapshots: pulumi.Int(1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRecoveryPointObjectiveSecs: pulumi.Int(3600),\n\t\t\t\t\t\t\tSnapshotType:               pulumi.String(\"CRASH_CONSISTENT\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCategoryFilter: \u0026nutanix.ProtectionRuleCategoryFilterArgs{\n\t\t\t\tParams: nutanix.ProtectionRuleCategoryFilterParamArray{\n\t\t\t\t\t\u0026nutanix.ProtectionRuleCategoryFilterParamArgs{\n\t\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tOrderedAvailabilityZoneLists: nutanix.ProtectionRuleOrderedAvailabilityZoneListArray{\n\t\t\t\t\u0026nutanix.ProtectionRuleOrderedAvailabilityZoneListArgs{\n\t\t\t\t\tAvailabilityZoneUrl: pulumi.String(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.ProtectionRule;\nimport com.pulumi.nutanix.ProtectionRuleArgs;\nimport com.pulumi.nutanix.inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs;\nimport com.pulumi.nutanix.inputs.ProtectionRuleCategoryFilterArgs;\nimport com.pulumi.nutanix.inputs.ProtectionRuleOrderedAvailabilityZoneListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var protectionRuleTest = new ProtectionRule(\"protectionRuleTest\", ProtectionRuleArgs.builder()\n            .availabilityZoneConnectivityLists(ProtectionRuleAvailabilityZoneConnectivityListArgs.builder()\n                .snapshotScheduleLists(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs.builder()\n                    .localSnapshotRetentionPolicy(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs.builder()\n                        .numSnapshots(1)\n                        .build())\n                    .recoveryPointObjectiveSecs(3600)\n                    .snapshotType(\"CRASH_CONSISTENT\")\n                    .build())\n                .build())\n            .categoryFilter(ProtectionRuleCategoryFilterArgs.builder()\n                .params(ProtectionRuleCategoryFilterParamArgs.builder()\n                    .name(\"Environment\")\n                    .values(\"Dev\")\n                    .build())\n                .build())\n            .description(\"test\")\n            .orderedAvailabilityZoneLists(ProtectionRuleOrderedAvailabilityZoneListArgs.builder()\n                .availabilityZoneUrl(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  protectionRuleTest:\n    type: nutanix:ProtectionRule\n    properties:\n      availabilityZoneConnectivityLists:\n        - snapshotScheduleLists:\n            - localSnapshotRetentionPolicy:\n                numSnapshots: 1\n              recoveryPointObjectiveSecs: 3600\n              snapshotType: CRASH_CONSISTENT\n      categoryFilter:\n        params:\n          - name: Environment\n            values:\n              - Dev\n      description: test\n      orderedAvailabilityZoneLists:\n        - availabilityZoneUrl: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "availabilityZoneConnectivityLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory"
                    }
                },
                "categoryFilter": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter"
                },
                "description": {
                    "type": "string",
                    "description": "A description for protection rule.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "orderedAvailabilityZoneLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList"
                    }
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference"
                },
                "startTime": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "availabilityZoneConnectivityLists",
                "categories",
                "categoryFilter",
                "description",
                "metadata",
                "name",
                "orderedAvailabilityZoneLists",
                "ownerReference",
                "projectReference",
                "startTime",
                "state"
            ],
            "inputProperties": {
                "availabilityZoneConnectivityLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory"
                    }
                },
                "categoryFilter": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter"
                },
                "description": {
                    "type": "string",
                    "description": "A description for protection rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "orderedAvailabilityZoneLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList"
                    }
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference"
                },
                "startTime": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "availabilityZoneConnectivityLists",
                "orderedAvailabilityZoneLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProtectionRule resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "availabilityZoneConnectivityLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory"
                        }
                    },
                    "categoryFilter": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for protection rule.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the protection rule.\n"
                    },
                    "orderedAvailabilityZoneLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList"
                        }
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference"
                    },
                    "projectReference": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/recoveryPlan:RecoveryPlan": {
            "description": "Provides a Nutanix Recovery Plan resource to Create a Recovery Plan.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.RecoveryPlan;\nimport com.pulumi.nutanix.RecoveryPlanArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanParametersArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanStageListArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanStageListStageWorkArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanStageListStageWorkRecoverEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var recoveryPlanTest = new RecoveryPlan(\"recoveryPlanTest\", RecoveryPlanArgs.builder()\n            .description(\"%s\")\n            .parameters()\n            .stageLists(RecoveryPlanStageListArgs.builder()\n                .delayTimeSecs(0)\n                .stageUuid(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .stageWork(RecoveryPlanStageListStageWorkArgs.builder()\n                    .recoverEntities(RecoveryPlanStageListStageWorkRecoverEntitiesArgs.builder()\n                        .entityInfoList(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  recoveryPlanTest:\n    type: nutanix:RecoveryPlan\n    properties:\n      description: '%s'\n      parameters: {}\n      stageLists:\n        - delayTimeSecs: 0\n          stageUuid: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n          stageWork:\n            recoverEntities:\n              entityInfoList:\n                - categories:\n                    - name: Environment\n                      value: Dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description for Recovery Plan.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference"
                },
                "parameters": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference"
                },
                "stageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList"
                    }
                },
                "state": {
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "parameters",
                "projectReference",
                "stageLists",
                "state"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description for Recovery Plan.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference"
                },
                "parameters": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference"
                },
                "stageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList"
                    }
                }
            },
            "requiredInputs": [
                "parameters",
                "stageLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RecoveryPlan resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for Recovery Plan.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the Recovery Plan.\n"
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference"
                    },
                    "parameters": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters"
                    },
                    "projectReference": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference"
                    },
                    "stageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList"
                        }
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/role:Role": {
            "description": "Provides a resource to create a role based on the input parameters.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_role\" \"test\" {\n\tname        = \"NAME\"\n\tdescription = \"DESCRIPTION\"\n\tpermission_reference_list {\n\t\tkind = \"permission\"\n\t\tuuid = \"ID OF PERMISSION\"\n\t}\n\tpermission_reference_list {\n\t\tkind = \"permission\"\n\t\tuuid = \"ID OF PERMISSION\"\n\t}\n\tpermission_reference_list {\n\t\tkind = \"permission\"\n\t\tuuid = \"ID OF PERMISSION\"\n\t}\n}\n```\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RoleCategory:RoleCategory"
                    },
                    "description": "- (Optional) Categories for the role.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description of the role.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The role kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the role.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RoleOwnerReference:RoleOwnerReference",
                    "description": "- (Optional) The reference to a user.\n"
                },
                "permissionReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList"
                    },
                    "description": "- (Required) List of permission references.\n"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RoleProjectReference:RoleProjectReference",
                    "description": "- (Optional) The reference to a project.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the role.\n"
                }
            },
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "permissionReferenceLists",
                "projectReference",
                "state"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RoleCategory:RoleCategory"
                    },
                    "description": "- (Optional) Categories for the role.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) The description of the role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Name of the role.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RoleOwnerReference:RoleOwnerReference",
                    "description": "- (Optional) The reference to a user.\n"
                },
                "permissionReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList"
                    },
                    "description": "- (Required) List of permission references.\n"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RoleProjectReference:RoleProjectReference",
                    "description": "- (Optional) The reference to a project.\n"
                }
            },
            "requiredInputs": [
                "permissionReferenceLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RoleCategory:RoleCategory"
                        },
                        "description": "- (Optional) Categories for the role.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) The description of the role.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The role kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Optional) Name of the role.\n"
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/RoleOwnerReference:RoleOwnerReference",
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "permissionReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList"
                        },
                        "description": "- (Required) List of permission references.\n"
                    },
                    "projectReference": {
                        "$ref": "#/types/nutanix:index/RoleProjectReference:RoleProjectReference",
                        "description": "- (Optional) The reference to a project.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the role.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/serviceGroup:ServiceGroup": {
            "description": "Provides a resource to create a service group based on the input parameters.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_service_group\" \"test\" {\n\t\tname = \"test_service_gp\"\n\t\tdescription = \"this is service group\"\n\n\t\tservice_list {\n\t\t\tprotocol = \"TCP\"\n\t\t\ttcp_port_range_list {\n\t\t\t\tstart_port = 22\n\t\t\t\tend_port = 22\n\t\t\t}\n\t\t\ttcp_port_range_list {\n\t\t\t\tstart_port = 2222\n\t\t\t\tend_port = 2222\n\t\t\t}\n\t\t}\n\t}\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) Description of the service group\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the service group\n"
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList"
                    },
                    "description": "- (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details\n"
                },
                "systemDefined": {
                    "type": "boolean",
                    "description": "- (ReadOnly) boolean value to denote if the service group is system defined\n"
                }
            },
            "required": [
                "name",
                "serviceLists",
                "systemDefined"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "- (Optional) Description of the service group\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) Name of the service group\n"
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList"
                    },
                    "description": "- (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details\n"
                }
            },
            "requiredInputs": [
                "serviceLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "- (Optional) Description of the service group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) Name of the service group\n"
                    },
                    "serviceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList"
                        },
                        "description": "- (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details\n"
                    },
                    "systemDefined": {
                        "type": "boolean",
                        "description": "- (ReadOnly) boolean value to denote if the service group is system defined\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/staticRoutes:StaticRoutes": {
            "description": "Provides Nutanix resource to create Static Routes within VPCs.\n\n## create one static route for vpc uuid with external subnet\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst scn = new nutanix.StaticRoutes(\"scn\", {\n    staticRoutesLists: [{\n        destination: \"10.x.x.x/x\",\n        externalSubnetReferenceUuid: \"{{ext_subnet_uuid}}\",\n    }],\n    vpcUuid: \"{{vpc_uuid}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nscn = nutanix.StaticRoutes(\"scn\",\n    static_routes_lists=[nutanix.StaticRoutesStaticRoutesListArgs(\n        destination=\"10.x.x.x/x\",\n        external_subnet_reference_uuid=\"{{ext_subnet_uuid}}\",\n    )],\n    vpc_uuid=\"{{vpc_uuid}}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var scn = new Nutanix.StaticRoutes(\"scn\", new()\n    {\n        StaticRoutesLists = new[]\n        {\n            new Nutanix.Inputs.StaticRoutesStaticRoutesListArgs\n            {\n                Destination = \"10.x.x.x/x\",\n                ExternalSubnetReferenceUuid = \"{{ext_subnet_uuid}}\",\n            },\n        },\n        VpcUuid = \"{{vpc_uuid}}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewStaticRoutes(ctx, \"scn\", \u0026nutanix.StaticRoutesArgs{\n\t\t\tStaticRoutesLists: nutanix.StaticRoutesStaticRoutesListArray{\n\t\t\t\t\u0026nutanix.StaticRoutesStaticRoutesListArgs{\n\t\t\t\t\tDestination:                 pulumi.String(\"10.x.x.x/x\"),\n\t\t\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_subnet_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVpcUuid: pulumi.String(\"{{vpc_uuid}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.StaticRoutes;\nimport com.pulumi.nutanix.StaticRoutesArgs;\nimport com.pulumi.nutanix.inputs.StaticRoutesStaticRoutesListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var scn = new StaticRoutes(\"scn\", StaticRoutesArgs.builder()\n            .staticRoutesLists(StaticRoutesStaticRoutesListArgs.builder()\n                .destination(\"10.x.x.x/x\")\n                .externalSubnetReferenceUuid(\"{{ext_subnet_uuid}}\")\n                .build())\n            .vpcUuid(\"{{vpc_uuid}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  scn:\n    type: nutanix:StaticRoutes\n    properties:\n      staticRoutesLists:\n        - destination: 10.x.x.x/x\n          externalSubnetReferenceUuid: '{{ext_subnet_uuid}}'\n      vpcUuid: '{{vpc_uuid}}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n## create one static route with default route for vpc name with external subnet\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst scn = new nutanix.StaticRoutes(\"scn\", {\n    defaultRouteNexthops: [{\n        externalSubnetReferenceUuid: \"{{ext_subnet_uuid}}\",\n    }],\n    staticRoutesLists: [{\n        destination: \"10.x.x.x/x\",\n        externalSubnetReferenceUuid: \"{{ext_subnet_uuid}}\",\n    }],\n    vpcName: \"{{vpc_name}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nscn = nutanix.StaticRoutes(\"scn\",\n    default_route_nexthops=[nutanix.StaticRoutesDefaultRouteNexthopArgs(\n        external_subnet_reference_uuid=\"{{ext_subnet_uuid}}\",\n    )],\n    static_routes_lists=[nutanix.StaticRoutesStaticRoutesListArgs(\n        destination=\"10.x.x.x/x\",\n        external_subnet_reference_uuid=\"{{ext_subnet_uuid}}\",\n    )],\n    vpc_name=\"{{vpc_name}}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var scn = new Nutanix.StaticRoutes(\"scn\", new()\n    {\n        DefaultRouteNexthops = new[]\n        {\n            new Nutanix.Inputs.StaticRoutesDefaultRouteNexthopArgs\n            {\n                ExternalSubnetReferenceUuid = \"{{ext_subnet_uuid}}\",\n            },\n        },\n        StaticRoutesLists = new[]\n        {\n            new Nutanix.Inputs.StaticRoutesStaticRoutesListArgs\n            {\n                Destination = \"10.x.x.x/x\",\n                ExternalSubnetReferenceUuid = \"{{ext_subnet_uuid}}\",\n            },\n        },\n        VpcName = \"{{vpc_name}}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewStaticRoutes(ctx, \"scn\", \u0026nutanix.StaticRoutesArgs{\n\t\t\tDefaultRouteNexthops: nutanix.StaticRoutesDefaultRouteNexthopArray{\n\t\t\t\t\u0026nutanix.StaticRoutesDefaultRouteNexthopArgs{\n\t\t\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_subnet_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStaticRoutesLists: nutanix.StaticRoutesStaticRoutesListArray{\n\t\t\t\t\u0026nutanix.StaticRoutesStaticRoutesListArgs{\n\t\t\t\t\tDestination:                 pulumi.String(\"10.x.x.x/x\"),\n\t\t\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_subnet_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVpcName: pulumi.String(\"{{vpc_name}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.StaticRoutes;\nimport com.pulumi.nutanix.StaticRoutesArgs;\nimport com.pulumi.nutanix.inputs.StaticRoutesDefaultRouteNexthopArgs;\nimport com.pulumi.nutanix.inputs.StaticRoutesStaticRoutesListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var scn = new StaticRoutes(\"scn\", StaticRoutesArgs.builder()\n            .defaultRouteNexthops(StaticRoutesDefaultRouteNexthopArgs.builder()\n                .externalSubnetReferenceUuid(\"{{ext_subnet_uuid}}\")\n                .build())\n            .staticRoutesLists(StaticRoutesStaticRoutesListArgs.builder()\n                .destination(\"10.x.x.x/x\")\n                .externalSubnetReferenceUuid(\"{{ext_subnet_uuid}}\")\n                .build())\n            .vpcName(\"{{vpc_name}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  scn:\n    type: nutanix:StaticRoutes\n    properties:\n      defaultRouteNexthops:\n        - externalSubnetReferenceUuid: '{{ext_subnet_uuid}}'\n      staticRoutesLists:\n        - destination: 10.x.x.x/x\n          externalSubnetReferenceUuid: '{{ext_subnet_uuid}}'\n      vpcName: '{{vpc_name}}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n#### Note: destination with 0.0.0.0/0 will be default route.\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "defaultRouteNexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop"
                    },
                    "description": "Default Route\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The vpc_route_table kind metadata.\n"
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList"
                    },
                    "description": "Static Routes.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "vpc Name. Should not be used with vpc_uuid.\n"
                },
                "vpcUuid": {
                    "type": "string",
                    "description": "Reference to a VPC UUID. Should not be used with vpc_name.\n"
                }
            },
            "required": [
                "apiVersion",
                "metadata",
                "vpcUuid"
            ],
            "inputProperties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "defaultRouteNexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop"
                    },
                    "description": "Default Route\n"
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList"
                    },
                    "description": "Static Routes.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "vpc Name. Should not be used with vpc_uuid.\n"
                },
                "vpcUuid": {
                    "type": "string",
                    "description": "Reference to a VPC UUID. Should not be used with vpc_name.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StaticRoutes resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "defaultRouteNexthops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop"
                        },
                        "description": "Default Route\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The vpc_route_table kind metadata.\n"
                    },
                    "staticRoutesLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList"
                        },
                        "description": "Static Routes.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "vpc Name. Should not be used with vpc_uuid.\n"
                    },
                    "vpcUuid": {
                        "type": "string",
                        "description": "Reference to a VPC UUID. Should not be used with vpc_name.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/subnet:Subnet": {
            "description": "Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.\n\n## Example Usage\n\n``` hcl\ndata \"nutanix_clusters\" \"clusters\" {\n  metadata = {\n    length = 2\n  }\n}\n\noutput \"cluster\" {\n  value = data.nutanix_clusters.clusters.entities.0.metadata.uuid\n}\n\nresource \"nutanix_subnet\" \"next-iac-managed\" {\n  # What cluster will this VLAN live on?\n  cluster_uuid = \"${data.nutanix_clusters.clusters.entities.0.metadata.uuid}\"\n\n  # General Information\n  name        = \"next-iac-managed-example\"\n  vlan_id     = 101\n  subnet_type = \"VLAN\"\n\n  # Managed L3 Networks\n  # This bit is only needed if you intend to turn on IPAM\n  prefix_length = 20\n\n  default_gateway_ip = \"10.5.80.1\"\n  subnet_ip          = \"10.5.80.0\"\n\n  dhcp_domain_name_server_list = [\"8.8.8.8\", \"4.2.2.2\"]\n  dhcp_domain_search_list      = [\"nutanix.com\", \"eng.nutanix.com\"]\n}\n```\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a availability_zone.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/SubnetCategory:SubnetCategory"
                    },
                    "description": "- (Optional) The categories of the resource.\n"
                },
                "clusterName": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string",
                    "description": "- (Required) The UUID of the cluster.\n"
                },
                "defaultGatewayIp": {
                    "type": "string",
                    "description": "- (Optional) Default gateway IP address.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for subnet.\n"
                },
                "dhcpDomainNameServerLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional). List of Domain Name Server addresses .\n"
                },
                "dhcpDomainSearchLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional).The DNS domain search list .\n"
                },
                "dhcpOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Spec for defining DHCP options.\n"
                },
                "dhcpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Host address.\n"
                },
                "dhcpServerAddressPort": {
                    "type": "integer",
                    "description": "- (Optional) Port Number.\n"
                },
                "enableNat": {
                    "type": "boolean",
                    "description": "- (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.\n"
                },
                "ipConfigPoolListRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "-(Optional) Range of IPs.\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "- (Optional) Whether the subnet is external subnet or not.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Required) The subnet kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Subnet name (Readonly).\n"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a network_function_chain.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "- (Optional).\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the subnet.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "- (Optional) Subnet IP address.\n"
                },
                "subnetType": {
                    "type": "string",
                    "description": "- (Optional). Valid Types are [\"VLAN\", \"OVERLAY\"]\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "- (Optional). For VLAN subnet.\n"
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "VPC reference uuid\n"
                },
                "vswitchName": {
                    "type": "string",
                    "description": "- (Optional).\n"
                }
            },
            "required": [
                "apiVersion",
                "availabilityZoneReference",
                "categories",
                "clusterName",
                "defaultGatewayIp",
                "description",
                "dhcpDomainNameServerLists",
                "dhcpDomainSearchLists",
                "dhcpOptions",
                "dhcpServerAddress",
                "dhcpServerAddressPort",
                "enableNat",
                "ipConfigPoolListRanges",
                "isExternal",
                "metadata",
                "name",
                "networkFunctionChainReference",
                "ownerReference",
                "prefixLength",
                "projectReference",
                "state",
                "subnetIp",
                "subnetType",
                "vlanId",
                "vpcReferenceUuid",
                "vswitchName"
            ],
            "inputProperties": {
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a availability_zone.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/SubnetCategory:SubnetCategory"
                    },
                    "description": "- (Optional) The categories of the resource.\n"
                },
                "clusterUuid": {
                    "type": "string",
                    "description": "- (Required) The UUID of the cluster.\n"
                },
                "defaultGatewayIp": {
                    "type": "string",
                    "description": "- (Optional) Default gateway IP address.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for subnet.\n"
                },
                "dhcpDomainNameServerLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional). List of Domain Name Server addresses .\n"
                },
                "dhcpDomainSearchLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional).The DNS domain search list .\n"
                },
                "dhcpOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Spec for defining DHCP options.\n"
                },
                "dhcpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Host address.\n"
                },
                "dhcpServerAddressPort": {
                    "type": "integer",
                    "description": "- (Optional) Port Number.\n"
                },
                "enableNat": {
                    "type": "boolean",
                    "description": "- (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.\n"
                },
                "ipConfigPoolListRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "-(Optional) Range of IPs.\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "- (Optional) Whether the subnet is external subnet or not.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "- (Optional) Subnet name (Readonly).\n"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a network_function_chain.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "- (Optional).\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "subnetIp": {
                    "type": "string",
                    "description": "- (Optional) Subnet IP address.\n"
                },
                "subnetType": {
                    "type": "string",
                    "description": "- (Optional). Valid Types are [\"VLAN\", \"OVERLAY\"]\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "- (Optional). For VLAN subnet.\n",
                    "willReplaceOnChanges": true
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "VPC reference uuid\n",
                    "willReplaceOnChanges": true
                },
                "vswitchName": {
                    "type": "string",
                    "description": "- (Optional).\n"
                }
            },
            "requiredInputs": [
                "subnetType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a availability_zone.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/SubnetCategory:SubnetCategory"
                        },
                        "description": "- (Optional) The categories of the resource.\n"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterUuid": {
                        "type": "string",
                        "description": "- (Required) The UUID of the cluster.\n"
                    },
                    "defaultGatewayIp": {
                        "type": "string",
                        "description": "- (Optional) Default gateway IP address.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) A description for subnet.\n"
                    },
                    "dhcpDomainNameServerLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- (Optional). List of Domain Name Server addresses .\n"
                    },
                    "dhcpDomainSearchLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- (Optional).The DNS domain search list .\n"
                    },
                    "dhcpOptions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) Spec for defining DHCP options.\n"
                    },
                    "dhcpServerAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) Host address.\n"
                    },
                    "dhcpServerAddressPort": {
                        "type": "integer",
                        "description": "- (Optional) Port Number.\n"
                    },
                    "enableNat": {
                        "type": "boolean",
                        "description": "- (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.\n"
                    },
                    "ipConfigPoolListRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "-(Optional) Range of IPs.\n"
                    },
                    "isExternal": {
                        "type": "boolean",
                        "description": "- (Optional) Whether the subnet is external subnet or not.\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Required) The subnet kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Optional) Subnet name (Readonly).\n"
                    },
                    "networkFunctionChainReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a network_function_chain.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "- (Optional).\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a project.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the subnet.\n"
                    },
                    "subnetIp": {
                        "type": "string",
                        "description": "- (Optional) Subnet IP address.\n"
                    },
                    "subnetType": {
                        "type": "string",
                        "description": "- (Optional). Valid Types are [\"VLAN\", \"OVERLAY\"]\n"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "- (Optional). For VLAN subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "description": "VPC reference uuid\n",
                        "willReplaceOnChanges": true
                    },
                    "vswitchName": {
                        "type": "string",
                        "description": "- (Optional).\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/user:User": {
            "description": "Provides a resource to create a user based on the input parameters.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_user\" \"user\" {\n\tdirectory_service_user {\n\t\tuser_principal_name = \"test-user@ntnxlab.local\"\n\t\tdirectory_service_reference {\n\t\tuuid = \"\u003cdirectory-service-uuid\u003e\"\n\t\t}\n\t}\n}\n```\n\n\n``` hcl\nresource \"nutanix_user\" \"user\" {\n\tidentity_provider_user {\n\t\tusername = \"username\"\n\t\tidentity_provider_reference {\n\t\tuuid = \"\u003cidentity-provider-uuid\u003e\"\n\t\t}\n\t}\n}\n```\n",
            "properties": {
                "accessControlPolicyReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserAccessControlPolicyReferenceList:UserAccessControlPolicyReferenceList"
                    },
                    "description": "- List of ACP references. See #reference for more details.\n"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserCategory:UserCategory"
                    },
                    "description": "- (Optional) Categories for the Access Control Policy.\n"
                },
                "directoryServiceUser": {
                    "$ref": "#/types/nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser",
                    "description": "- (Optional) The directory service user configuration. See below for more information.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "- The display name of the user (common name) provided by the directory service.\n"
                },
                "identityProviderUser": {
                    "$ref": "#/types/nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser",
                    "description": "- (Optional) (Optional) The identity provider user configuration. See below for more information.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The vm kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- the name(Optional).\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "projectReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserProjectReferenceList:UserProjectReferenceList"
                    },
                    "description": "- A list of projects the user is part of. See #reference for more details.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the entity.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "- The name of the user.\n"
                }
            },
            "required": [
                "accessControlPolicyReferenceLists",
                "apiVersion",
                "categories",
                "directoryServiceUser",
                "displayName",
                "identityProviderUser",
                "metadata",
                "name",
                "ownerReference",
                "projectReferenceLists",
                "state",
                "userType"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserCategory:UserCategory"
                    },
                    "description": "- (Optional) Categories for the Access Control Policy.\n"
                },
                "directoryServiceUser": {
                    "$ref": "#/types/nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser",
                    "description": "- (Optional) The directory service user configuration. See below for more information.\n"
                },
                "identityProviderUser": {
                    "$ref": "#/types/nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser",
                    "description": "- (Optional) (Optional) The identity provider user configuration. See below for more information.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accessControlPolicyReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserAccessControlPolicyReferenceList:UserAccessControlPolicyReferenceList"
                        },
                        "description": "- List of ACP references. See #reference for more details.\n"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserCategory:UserCategory"
                        },
                        "description": "- (Optional) Categories for the Access Control Policy.\n"
                    },
                    "directoryServiceUser": {
                        "$ref": "#/types/nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser",
                        "description": "- (Optional) The directory service user configuration. See below for more information.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "- The display name of the user (common name) provided by the directory service.\n"
                    },
                    "identityProviderUser": {
                        "$ref": "#/types/nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser",
                        "description": "- (Optional) (Optional) The identity provider user configuration. See below for more information.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The vm kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name(Optional).\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a project.\n"
                    },
                    "projectReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserProjectReferenceList:UserProjectReferenceList"
                        },
                        "description": "- A list of projects the user is part of. See #reference for more details.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the entity.\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "- The name of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/userGroups:UserGroups": {
            "description": "Provides a resource to add a User group to the system..\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_user_groups\" \"user_grp\" {\n\tdirectory_service_user_group{\n\t\tdistinguished_name = \"\u003cdistinguished name for the user group\u003e\"\n\t}\n}\n```\n\n\n``` hcl\nresource \"nutanix_user_groups\" \"user_grp\" {\n\tsaml_user_group{\n    name = \"\u003cname of saml group\u003e\"\n    idp_uuid = \"\u003cidp uuid of the group\u003e\"\n  }\n}\n```\n",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsCategory:UserGroupsCategory"
                    }
                },
                "directoryServiceOus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsDirectoryServiceOus:UserGroupsDirectoryServiceOus"
                    },
                    "description": "- (Optional) A Directory Service organizational unit.\n"
                },
                "directoryServiceUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsDirectoryServiceUserGroup:UserGroupsDirectoryServiceUserGroup"
                    },
                    "description": "- (Optional) A Directory Service user group.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user_group kind metadata.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "samlUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsSamlUserGroup:UserGroupsSamlUserGroup"
                    },
                    "description": "- (Optional) A SAML Service user group.\n"
                }
            },
            "required": [
                "categories",
                "metadata",
                "ownerReference"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsCategory:UserGroupsCategory"
                    }
                },
                "directoryServiceOus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsDirectoryServiceOus:UserGroupsDirectoryServiceOus"
                    },
                    "description": "- (Optional) A Directory Service organizational unit.\n"
                },
                "directoryServiceUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsDirectoryServiceUserGroup:UserGroupsDirectoryServiceUserGroup"
                    },
                    "description": "- (Optional) A Directory Service user group.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "samlUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserGroupsSamlUserGroup:UserGroupsSamlUserGroup"
                    },
                    "description": "- (Optional) A SAML Service user group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroups resources.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserGroupsCategory:UserGroupsCategory"
                        }
                    },
                    "directoryServiceOus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserGroupsDirectoryServiceOus:UserGroupsDirectoryServiceOus"
                        },
                        "description": "- (Optional) A Directory Service organizational unit.\n"
                    },
                    "directoryServiceUserGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserGroupsDirectoryServiceUserGroup:UserGroupsDirectoryServiceUserGroup"
                        },
                        "description": "- (Optional) A Directory Service user group.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user_group kind metadata.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "samlUserGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserGroupsSamlUserGroup:UserGroupsSamlUserGroup"
                        },
                        "description": "- (Optional) A SAML Service user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/virtualMachine:VirtualMachine": {
            "description": "Provides a Nutanix Virtual Machine resource to Create a virtual machine.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getClusters({});\nconst vm1 = new nutanix.VirtualMachine(\"vm1\", {\n    clusterUuid: clusters.then(clusters =\u003e clusters.entities?.[0]?.metadata?.uuid),\n    categories: [{\n        name: \"Environment\",\n        value: \"Staging\",\n    }],\n    numVcpusPerSocket: 1,\n    numSockets: 1,\n    memorySizeMib: 2048,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_clusters()\nvm1 = nutanix.VirtualMachine(\"vm1\",\n    cluster_uuid=clusters.entities[0].metadata[\"uuid\"],\n    categories=[nutanix.VirtualMachineCategoryArgs(\n        name=\"Environment\",\n        value=\"Staging\",\n    )],\n    num_vcpus_per_socket=1,\n    num_sockets=1,\n    memory_size_mib=2048)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clusters = Nutanix.GetClusters.Invoke();\n\n    var vm1 = new Nutanix.VirtualMachine(\"vm1\", new()\n    {\n        ClusterUuid = clusters.Apply(getClustersResult =\u003e getClustersResult.Entities[0]?.Metadata?.Uuid),\n        Categories = new[]\n        {\n            new Nutanix.Inputs.VirtualMachineCategoryArgs\n            {\n                Name = \"Environment\",\n                Value = \"Staging\",\n            },\n        },\n        NumVcpusPerSocket = 1,\n        NumSockets = 1,\n        MemorySizeMib = 2048,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclusters, err := nutanix.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewVirtualMachine(ctx, \"vm1\", \u0026nutanix.VirtualMachineArgs{\n\t\t\tClusterUuid: pulumi.String(clusters.Entities[0].Metadata.Uuid),\n\t\t\tCategories: nutanix.VirtualMachineCategoryArray{\n\t\t\t\t\u0026nutanix.VirtualMachineCategoryArgs{\n\t\t\t\t\tName:  pulumi.String(\"Environment\"),\n\t\t\t\t\tValue: pulumi.String(\"Staging\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNumVcpusPerSocket: pulumi.Int(1),\n\t\t\tNumSockets:        pulumi.Int(1),\n\t\t\tMemorySizeMib:     pulumi.Int(2048),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.VirtualMachine;\nimport com.pulumi.nutanix.VirtualMachineArgs;\nimport com.pulumi.nutanix.inputs.VirtualMachineCategoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = NutanixFunctions.getClusters();\n\n        var vm1 = new VirtualMachine(\"vm1\", VirtualMachineArgs.builder()\n            .clusterUuid(clusters.applyValue(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()))\n            .categories(VirtualMachineCategoryArgs.builder()\n                .name(\"Environment\")\n                .value(\"Staging\")\n                .build())\n            .numVcpusPerSocket(1)\n            .numSockets(1)\n            .memorySizeMib(2048)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vm1:\n    type: nutanix:VirtualMachine\n    properties:\n      clusterUuid: ${clusters.entities[0].metadata.uuid}\n      categories:\n        - name: Environment\n          value: Staging\n      numVcpusPerSocket: 1\n      numSockets: 1\n      memorySizeMib: 2048\nvariables:\n  clusters:\n    fn::invoke:\n      Function: nutanix:getClusters\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### With Storage Config\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getClusters({});\nconst vm = new nutanix.VirtualMachine(\"vm\", {\n    clusterUuid: clusters.then(clusters =\u003e clusters.entities?.[0]?.metadata?.uuid),\n    numVcpusPerSocket: 1,\n    numSockets: 1,\n    memorySizeMib: 186,\n    diskLists: [{\n        diskSizeBytes: 68157440,\n        diskSizeMib: 65,\n        storageConfig: {\n            storageContainerReferences: [{\n                kind: \"storage_container\",\n                uuid: \"2bbe67bc-fd14-4637-8de1-6379257f4219\",\n            }],\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_clusters()\nvm = nutanix.VirtualMachine(\"vm\",\n    cluster_uuid=clusters.entities[0].metadata[\"uuid\"],\n    num_vcpus_per_socket=1,\n    num_sockets=1,\n    memory_size_mib=186,\n    disk_lists=[nutanix.VirtualMachineDiskListArgs(\n        disk_size_bytes=68157440,\n        disk_size_mib=65,\n        storage_config=nutanix.VirtualMachineDiskListStorageConfigArgs(\n            storage_container_references=[nutanix.VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs(\n                kind=\"storage_container\",\n                uuid=\"2bbe67bc-fd14-4637-8de1-6379257f4219\",\n            )],\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clusters = Nutanix.GetClusters.Invoke();\n\n    var vm = new Nutanix.VirtualMachine(\"vm\", new()\n    {\n        ClusterUuid = clusters.Apply(getClustersResult =\u003e getClustersResult.Entities[0]?.Metadata?.Uuid),\n        NumVcpusPerSocket = 1,\n        NumSockets = 1,\n        MemorySizeMib = 186,\n        DiskLists = new[]\n        {\n            new Nutanix.Inputs.VirtualMachineDiskListArgs\n            {\n                DiskSizeBytes = 68157440,\n                DiskSizeMib = 65,\n                StorageConfig = new Nutanix.Inputs.VirtualMachineDiskListStorageConfigArgs\n                {\n                    StorageContainerReferences = new[]\n                    {\n                        new Nutanix.Inputs.VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs\n                        {\n                            Kind = \"storage_container\",\n                            Uuid = \"2bbe67bc-fd14-4637-8de1-6379257f4219\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclusters, err := nutanix.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewVirtualMachine(ctx, \"vm\", \u0026nutanix.VirtualMachineArgs{\n\t\t\tClusterUuid:       pulumi.String(clusters.Entities[0].Metadata.Uuid),\n\t\t\tNumVcpusPerSocket: pulumi.Int(1),\n\t\t\tNumSockets:        pulumi.Int(1),\n\t\t\tMemorySizeMib:     pulumi.Int(186),\n\t\t\tDiskLists: nutanix.VirtualMachineDiskListArray{\n\t\t\t\t\u0026nutanix.VirtualMachineDiskListArgs{\n\t\t\t\t\tDiskSizeBytes: pulumi.Int(68157440),\n\t\t\t\t\tDiskSizeMib:   pulumi.Int(65),\n\t\t\t\t\tStorageConfig: \u0026nutanix.VirtualMachineDiskListStorageConfigArgs{\n\t\t\t\t\t\tStorageContainerReferences: nutanix.VirtualMachineDiskListStorageConfigStorageContainerReferenceArray{\n\t\t\t\t\t\t\t\u0026nutanix.VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs{\n\t\t\t\t\t\t\t\tKind: pulumi.String(\"storage_container\"),\n\t\t\t\t\t\t\t\tUuid: pulumi.String(\"2bbe67bc-fd14-4637-8de1-6379257f4219\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.VirtualMachine;\nimport com.pulumi.nutanix.VirtualMachineArgs;\nimport com.pulumi.nutanix.inputs.VirtualMachineDiskListArgs;\nimport com.pulumi.nutanix.inputs.VirtualMachineDiskListStorageConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = NutanixFunctions.getClusters();\n\n        var vm = new VirtualMachine(\"vm\", VirtualMachineArgs.builder()\n            .clusterUuid(clusters.applyValue(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()))\n            .numVcpusPerSocket(1)\n            .numSockets(1)\n            .memorySizeMib(186)\n            .diskLists(VirtualMachineDiskListArgs.builder()\n                .diskSizeBytes(68157440)\n                .diskSizeMib(65)\n                .storageConfig(VirtualMachineDiskListStorageConfigArgs.builder()\n                    .storageContainerReferences(VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs.builder()\n                        .kind(\"storage_container\")\n                        .uuid(\"2bbe67bc-fd14-4637-8de1-6379257f4219\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vm:\n    type: nutanix:VirtualMachine\n    properties:\n      clusterUuid: ${clusters.entities[0].metadata.uuid}\n      numVcpusPerSocket: 1\n      numSockets: 1\n      memorySizeMib: 186\n      diskLists:\n        - diskSizeBytes: 6.815744e+07\n          diskSizeMib: 65\n          storageConfig:\n            storageContainerReferences:\n              - kind: storage_container\n                uuid: 2bbe67bc-fd14-4637-8de1-6379257f4219\nvariables:\n  clusters:\n    fn::invoke:\n      Function: nutanix:getClusters\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNutanix Virtual machines can be imported using the `UUID` eg,\n\n`\n\n```sh\n$ pulumi import nutanix:index/virtualMachine:VirtualMachine vm01 0F75E6A7-55FB-44D9-A50D-14AD72E2CF7C\n```\n\n`\n\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a availability_zone.\n"
                },
                "bootDeviceDiskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Address of disk to boot from.\n"
                },
                "bootDeviceMacAddress": {
                    "type": "string",
                    "description": "- (Optional) MAC address of nic to boot from.\n"
                },
                "bootDeviceOrderLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "- (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineCategory:VirtualMachineCategory"
                    },
                    "description": "- (Optional) Categories for the vm.\n"
                },
                "cloudInitCdromUuid": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string",
                    "description": "- The name of the cluster.\n"
                },
                "clusterUuid": {
                    "type": "string",
                    "description": "- (Required) The UUID of the cluster.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for vm.\n"
                },
                "diskLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList"
                    },
                    "description": "Disks attached to the VM.\n"
                },
                "enableCpuPassthrough": {
                    "type": "boolean",
                    "description": "- (Optional) Add true to enable CPU passthrough.\n"
                },
                "enableScriptExec": {
                    "type": "boolean",
                    "description": "- (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n"
                },
                "gpuLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList"
                    },
                    "description": "- (Optional) GPUs attached to the VM.\n"
                },
                "guestCustomizationCloudInitCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Generic key value pair used for custom attributes in cloud init.\n"
                },
                "guestCustomizationCloudInitMetaData": {
                    "type": "string",
                    "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n"
                },
                "guestCustomizationCloudInitUserData": {
                    "type": "string",
                    "description": "- (Optional) The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
                },
                "guestCustomizationIsOverridable": {
                    "type": "boolean",
                    "description": "- (Optional) Flag to allow override of customization by deployer.\n"
                },
                "guestCustomizationSysprep": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n"
                },
                "guestCustomizationSysprepCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "- (Optional) Generic key value pair used for custom attributes in sysprep.\n"
                },
                "guestOsId": {
                    "type": "string",
                    "description": "- (Optional) Guest OS Identifier. For ESX, refer to VMware documentation [link](https://www.vmware.com/support/developer/converter-sdk/conv43_apireference/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html) for the list of guest OS identifiers.\n"
                },
                "hardwareClockTimezone": {
                    "type": "string",
                    "description": "- (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n"
                },
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- Reference to a host.\n"
                },
                "hypervisorType": {
                    "type": "string",
                    "description": "- The hypervisor type for the hypervisor the VM is hosted on.\n"
                },
                "isVcpuHardPinned": {
                    "type": "boolean",
                    "description": "- (Optional) Add true to enable CPU pinning.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "- Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n"
                },
                "memorySizeMib": {
                    "type": "integer",
                    "description": "- (Optional) Memory size in MiB. On updating memory to powered ON VMs should only be done in 1GB increments.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- The vm kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the vm.\n"
                },
                "ngtCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "- (Ooptional) Credentials to login server.\n"
                },
                "ngtEnabledCapabilityLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Application names that are enabled.\n"
                },
                "nicListStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicListStatus:VirtualMachineNicListStatus"
                    },
                    "description": "- Status NICs attached to the VM.\n"
                },
                "nicLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicList:VirtualMachineNicList"
                    },
                    "description": "- (Optional) Spec NICs attached to the VM.\n"
                },
                "numSockets": {
                    "type": "integer",
                    "description": "- (Optional) Number of vCPU sockets.\n"
                },
                "numVcpusPerSocket": {
                    "type": "integer",
                    "description": "- (Optional) Number of vCPUs per socket.\n"
                },
                "numVnumaNodes": {
                    "type": "integer",
                    "description": "- (Optional) Number of vNUMA nodes. 0 means vNUMA is disabled.\n"
                },
                "nutanixGuestTools": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Information regarding Nutanix Guest Tools.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "parentReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Reference to an entity that the VM cloned from.\n"
                },
                "powerState": {
                    "type": "string",
                    "description": "- (Optional) The current or desired power state of the VM. (Options : ON , OFF)\n"
                },
                "powerStateMechanism": {
                    "type": "string",
                    "description": "- (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "serialPortLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList"
                    },
                    "description": "- (Optional) Serial Ports configured on the VM.\n"
                },
                "shouldFailOnScriptFailure": {
                    "type": "boolean",
                    "description": "- (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n"
                },
                "state": {
                    "type": "string",
                    "description": "- The state of the vm.\n"
                },
                "useHotAdd": {
                    "type": "boolean",
                    "description": "- (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.\n"
                },
                "vgaConsoleEnabled": {
                    "type": "boolean",
                    "description": "- (Optional) Indicates whether VGA console should be enabled or not.\n"
                }
            },
            "required": [
                "apiVersion",
                "availabilityZoneReference",
                "bootDeviceDiskAddress",
                "bootDeviceMacAddress",
                "bootDeviceOrderLists",
                "bootType",
                "categories",
                "cloudInitCdromUuid",
                "clusterName",
                "clusterUuid",
                "description",
                "diskLists",
                "enableScriptExec",
                "gpuLists",
                "guestCustomizationCloudInitCustomKeyValues",
                "guestCustomizationCloudInitMetaData",
                "guestCustomizationCloudInitUserData",
                "guestCustomizationIsOverridable",
                "guestCustomizationSysprep",
                "guestCustomizationSysprepCustomKeyValues",
                "guestOsId",
                "hardwareClockTimezone",
                "hostReference",
                "hypervisorType",
                "machineType",
                "memorySizeMib",
                "metadata",
                "name",
                "ngtCredentials",
                "ngtEnabledCapabilityLists",
                "nicLists",
                "nicListStatuses",
                "numSockets",
                "numVcpusPerSocket",
                "numVnumaNodes",
                "nutanixGuestTools",
                "ownerReference",
                "parentReference",
                "powerState",
                "powerStateMechanism",
                "projectReference",
                "shouldFailOnScriptFailure",
                "state",
                "vgaConsoleEnabled"
            ],
            "inputProperties": {
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a availability_zone.\n"
                },
                "bootDeviceDiskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Address of disk to boot from.\n"
                },
                "bootDeviceMacAddress": {
                    "type": "string",
                    "description": "- (Optional) MAC address of nic to boot from.\n"
                },
                "bootDeviceOrderLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "- (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n",
                    "willReplaceOnChanges": true
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineCategory:VirtualMachineCategory"
                    },
                    "description": "- (Optional) Categories for the vm.\n"
                },
                "cloudInitCdromUuid": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string",
                    "description": "- (Required) The UUID of the cluster.\n"
                },
                "description": {
                    "type": "string",
                    "description": "- (Optional) A description for vm.\n"
                },
                "diskLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList"
                    },
                    "description": "Disks attached to the VM.\n"
                },
                "enableCpuPassthrough": {
                    "type": "boolean",
                    "description": "- (Optional) Add true to enable CPU passthrough.\n"
                },
                "enableScriptExec": {
                    "type": "boolean",
                    "description": "- (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n"
                },
                "gpuLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList"
                    },
                    "description": "- (Optional) GPUs attached to the VM.\n"
                },
                "guestCustomizationCloudInitCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Generic key value pair used for custom attributes in cloud init.\n"
                },
                "guestCustomizationCloudInitMetaData": {
                    "type": "string",
                    "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n",
                    "willReplaceOnChanges": true
                },
                "guestCustomizationCloudInitUserData": {
                    "type": "string",
                    "description": "- (Optional) The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n",
                    "willReplaceOnChanges": true
                },
                "guestCustomizationIsOverridable": {
                    "type": "boolean",
                    "description": "- (Optional) Flag to allow override of customization by deployer.\n"
                },
                "guestCustomizationSysprep": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n",
                    "willReplaceOnChanges": true
                },
                "guestCustomizationSysprepCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "- (Optional) Generic key value pair used for custom attributes in sysprep.\n",
                    "willReplaceOnChanges": true
                },
                "guestOsId": {
                    "type": "string",
                    "description": "- (Optional) Guest OS Identifier. For ESX, refer to VMware documentation [link](https://www.vmware.com/support/developer/converter-sdk/conv43_apireference/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html) for the list of guest OS identifiers.\n"
                },
                "hardwareClockTimezone": {
                    "type": "string",
                    "description": "- (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n"
                },
                "isVcpuHardPinned": {
                    "type": "boolean",
                    "description": "- (Optional) Add true to enable CPU pinning.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "- Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n"
                },
                "memorySizeMib": {
                    "type": "integer",
                    "description": "- (Optional) Memory size in MiB. On updating memory to powered ON VMs should only be done in 1GB increments.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- (Required) The name for the vm.\n"
                },
                "ngtCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "- (Ooptional) Credentials to login server.\n"
                },
                "ngtEnabledCapabilityLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Application names that are enabled.\n"
                },
                "nicLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicList:VirtualMachineNicList"
                    },
                    "description": "- (Optional) Spec NICs attached to the VM.\n"
                },
                "numSockets": {
                    "type": "integer",
                    "description": "- (Optional) Number of vCPU sockets.\n"
                },
                "numVcpusPerSocket": {
                    "type": "integer",
                    "description": "- (Optional) Number of vCPUs per socket.\n"
                },
                "numVnumaNodes": {
                    "type": "integer",
                    "description": "- (Optional) Number of vNUMA nodes. 0 means vNUMA is disabled.\n"
                },
                "nutanixGuestTools": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Information regarding Nutanix Guest Tools.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a user.\n"
                },
                "parentReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) Reference to an entity that the VM cloned from.\n"
                },
                "powerStateMechanism": {
                    "type": "string",
                    "description": "- (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "- (Optional) The reference to a project.\n"
                },
                "serialPortLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList"
                    },
                    "description": "- (Optional) Serial Ports configured on the VM.\n",
                    "willReplaceOnChanges": true
                },
                "shouldFailOnScriptFailure": {
                    "type": "boolean",
                    "description": "- (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n"
                },
                "useHotAdd": {
                    "type": "boolean",
                    "description": "- (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.\n"
                },
                "vgaConsoleEnabled": {
                    "type": "boolean",
                    "description": "- (Optional) Indicates whether VGA console should be enabled or not.\n"
                }
            },
            "requiredInputs": [
                "clusterUuid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualMachine resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a availability_zone.\n"
                    },
                    "bootDeviceDiskAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) Address of disk to boot from.\n"
                    },
                    "bootDeviceMacAddress": {
                        "type": "string",
                        "description": "- (Optional) MAC address of nic to boot from.\n"
                    },
                    "bootDeviceOrderLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n"
                    },
                    "bootType": {
                        "type": "string",
                        "description": "- (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n",
                        "willReplaceOnChanges": true
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineCategory:VirtualMachineCategory"
                        },
                        "description": "- (Optional) Categories for the vm.\n"
                    },
                    "cloudInitCdromUuid": {
                        "type": "string"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "- The name of the cluster.\n"
                    },
                    "clusterUuid": {
                        "type": "string",
                        "description": "- (Required) The UUID of the cluster.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (Optional) A description for vm.\n"
                    },
                    "diskLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList"
                        },
                        "description": "Disks attached to the VM.\n"
                    },
                    "enableCpuPassthrough": {
                        "type": "boolean",
                        "description": "- (Optional) Add true to enable CPU passthrough.\n"
                    },
                    "enableScriptExec": {
                        "type": "boolean",
                        "description": "- (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n"
                    },
                    "gpuLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList"
                        },
                        "description": "- (Optional) GPUs attached to the VM.\n"
                    },
                    "guestCustomizationCloudInitCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) Generic key value pair used for custom attributes in cloud init.\n"
                    },
                    "guestCustomizationCloudInitMetaData": {
                        "type": "string",
                        "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n",
                        "willReplaceOnChanges": true
                    },
                    "guestCustomizationCloudInitUserData": {
                        "type": "string",
                        "description": "- (Optional) The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n",
                        "willReplaceOnChanges": true
                    },
                    "guestCustomizationIsOverridable": {
                        "type": "boolean",
                        "description": "- (Optional) Flag to allow override of customization by deployer.\n"
                    },
                    "guestCustomizationSysprep": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n",
                        "willReplaceOnChanges": true
                    },
                    "guestCustomizationSysprepCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "- (Optional) Generic key value pair used for custom attributes in sysprep.\n",
                        "willReplaceOnChanges": true
                    },
                    "guestOsId": {
                        "type": "string",
                        "description": "- (Optional) Guest OS Identifier. For ESX, refer to VMware documentation [link](https://www.vmware.com/support/developer/converter-sdk/conv43_apireference/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html) for the list of guest OS identifiers.\n"
                    },
                    "hardwareClockTimezone": {
                        "type": "string",
                        "description": "- (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n"
                    },
                    "hostReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Reference to a host.\n"
                    },
                    "hypervisorType": {
                        "type": "string",
                        "description": "- The hypervisor type for the hypervisor the VM is hosted on.\n"
                    },
                    "isVcpuHardPinned": {
                        "type": "boolean",
                        "description": "- (Optional) Add true to enable CPU pinning.\n"
                    },
                    "machineType": {
                        "type": "string",
                        "description": "- Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n"
                    },
                    "memorySizeMib": {
                        "type": "integer",
                        "description": "- (Optional) Memory size in MiB. On updating memory to powered ON VMs should only be done in 1GB increments.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The vm kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (Required) The name for the vm.\n"
                    },
                    "ngtCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "- (Ooptional) Credentials to login server.\n"
                    },
                    "ngtEnabledCapabilityLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Application names that are enabled.\n"
                    },
                    "nicListStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineNicListStatus:VirtualMachineNicListStatus"
                        },
                        "description": "- Status NICs attached to the VM.\n"
                    },
                    "nicLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineNicList:VirtualMachineNicList"
                        },
                        "description": "- (Optional) Spec NICs attached to the VM.\n"
                    },
                    "numSockets": {
                        "type": "integer",
                        "description": "- (Optional) Number of vCPU sockets.\n"
                    },
                    "numVcpusPerSocket": {
                        "type": "integer",
                        "description": "- (Optional) Number of vCPUs per socket.\n"
                    },
                    "numVnumaNodes": {
                        "type": "integer",
                        "description": "- (Optional) Number of vNUMA nodes. 0 means vNUMA is disabled.\n"
                    },
                    "nutanixGuestTools": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) Information regarding Nutanix Guest Tools.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "parentReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) Reference to an entity that the VM cloned from.\n"
                    },
                    "powerState": {
                        "type": "string",
                        "description": "- (Optional) The current or desired power state of the VM. (Options : ON , OFF)\n"
                    },
                    "powerStateMechanism": {
                        "type": "string",
                        "description": "- (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a project.\n"
                    },
                    "serialPortLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList"
                        },
                        "description": "- (Optional) Serial Ports configured on the VM.\n",
                        "willReplaceOnChanges": true
                    },
                    "shouldFailOnScriptFailure": {
                        "type": "boolean",
                        "description": "- (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the vm.\n"
                    },
                    "useHotAdd": {
                        "type": "boolean",
                        "description": "- (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.\n"
                    },
                    "vgaConsoleEnabled": {
                        "type": "boolean",
                        "description": "- (Optional) Indicates whether VGA console should be enabled or not.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/vpc:Vpc": {
            "description": "Provides Nutanix resource to create VPC.\n\n## Example Usage\n\n### vpc creation with external subnet name\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst vpc = new nutanix.Vpc(\"vpc\", {\n    commonDomainNameServerIpLists: [\n        {\n            ip: \"8.8.8.8\",\n        },\n        {\n            ip: \"8.8.8.9\",\n        },\n    ],\n    externalSubnetReferenceNames: [\n        \"test-Ext1\",\n        \"test-ext2\",\n    ],\n    externallyRoutablePrefixLists: [{\n        ip: \"192.43.0.0\",\n        prefixLength: 16,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nvpc = nutanix.Vpc(\"vpc\",\n    common_domain_name_server_ip_lists=[\n        nutanix.VpcCommonDomainNameServerIpListArgs(\n            ip=\"8.8.8.8\",\n        ),\n        nutanix.VpcCommonDomainNameServerIpListArgs(\n            ip=\"8.8.8.9\",\n        ),\n    ],\n    external_subnet_reference_names=[\n        \"test-Ext1\",\n        \"test-ext2\",\n    ],\n    externally_routable_prefix_lists=[nutanix.VpcExternallyRoutablePrefixListArgs(\n        ip=\"192.43.0.0\",\n        prefix_length=16,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc = new Nutanix.Vpc(\"vpc\", new()\n    {\n        CommonDomainNameServerIpLists = new[]\n        {\n            new Nutanix.Inputs.VpcCommonDomainNameServerIpListArgs\n            {\n                Ip = \"8.8.8.8\",\n            },\n            new Nutanix.Inputs.VpcCommonDomainNameServerIpListArgs\n            {\n                Ip = \"8.8.8.9\",\n            },\n        },\n        ExternalSubnetReferenceNames = new[]\n        {\n            \"test-Ext1\",\n            \"test-ext2\",\n        },\n        ExternallyRoutablePrefixLists = new[]\n        {\n            new Nutanix.Inputs.VpcExternallyRoutablePrefixListArgs\n            {\n                Ip = \"192.43.0.0\",\n                PrefixLength = 16,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewVpc(ctx, \"vpc\", \u0026nutanix.VpcArgs{\n\t\t\tCommonDomainNameServerIpLists: nutanix.VpcCommonDomainNameServerIpListArray{\n\t\t\t\t\u0026nutanix.VpcCommonDomainNameServerIpListArgs{\n\t\t\t\t\tIp: pulumi.String(\"8.8.8.8\"),\n\t\t\t\t},\n\t\t\t\t\u0026nutanix.VpcCommonDomainNameServerIpListArgs{\n\t\t\t\t\tIp: pulumi.String(\"8.8.8.9\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExternalSubnetReferenceNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test-Ext1\"),\n\t\t\t\tpulumi.String(\"test-ext2\"),\n\t\t\t},\n\t\t\tExternallyRoutablePrefixLists: nutanix.VpcExternallyRoutablePrefixListArray{\n\t\t\t\t\u0026nutanix.VpcExternallyRoutablePrefixListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"192.43.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(16),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.Vpc;\nimport com.pulumi.nutanix.VpcArgs;\nimport com.pulumi.nutanix.inputs.VpcCommonDomainNameServerIpListArgs;\nimport com.pulumi.nutanix.inputs.VpcExternallyRoutablePrefixListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc = new Vpc(\"vpc\", VpcArgs.builder()\n            .commonDomainNameServerIpLists(            \n                VpcCommonDomainNameServerIpListArgs.builder()\n                    .ip(\"8.8.8.8\")\n                    .build(),\n                VpcCommonDomainNameServerIpListArgs.builder()\n                    .ip(\"8.8.8.9\")\n                    .build())\n            .externalSubnetReferenceNames(            \n                \"test-Ext1\",\n                \"test-ext2\")\n            .externallyRoutablePrefixLists(VpcExternallyRoutablePrefixListArgs.builder()\n                .ip(\"192.43.0.0\")\n                .prefixLength(16)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc:\n    type: nutanix:Vpc\n    properties:\n      commonDomainNameServerIpLists:\n        - ip: 8.8.8.8\n        - ip: 8.8.8.9\n      externalSubnetReferenceNames:\n        - test-Ext1\n        - test-ext2\n      externallyRoutablePrefixLists:\n        - ip: 192.43.0.0\n          prefixLength: 16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### vpc creation with external subnet uuid\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst vpc = new nutanix.Vpc(\"vpc\", {\n    commonDomainNameServerIpLists: [{\n        ip: \"8.8.8.8\",\n    }],\n    externalSubnetReferenceUuids: [\"\u003csubnet_uuid\u003e\"],\n    externallyRoutablePrefixLists: [\n        {\n            ip: \"192.43.0.0\",\n            prefixLength: 16,\n        },\n        {\n            ip: \"192.42.0.0\",\n            prefixLength: 16,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nvpc = nutanix.Vpc(\"vpc\",\n    common_domain_name_server_ip_lists=[nutanix.VpcCommonDomainNameServerIpListArgs(\n        ip=\"8.8.8.8\",\n    )],\n    external_subnet_reference_uuids=[\"\u003csubnet_uuid\u003e\"],\n    externally_routable_prefix_lists=[\n        nutanix.VpcExternallyRoutablePrefixListArgs(\n            ip=\"192.43.0.0\",\n            prefix_length=16,\n        ),\n        nutanix.VpcExternallyRoutablePrefixListArgs(\n            ip=\"192.42.0.0\",\n            prefix_length=16,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc = new Nutanix.Vpc(\"vpc\", new()\n    {\n        CommonDomainNameServerIpLists = new[]\n        {\n            new Nutanix.Inputs.VpcCommonDomainNameServerIpListArgs\n            {\n                Ip = \"8.8.8.8\",\n            },\n        },\n        ExternalSubnetReferenceUuids = new[]\n        {\n            \"\u003csubnet_uuid\u003e\",\n        },\n        ExternallyRoutablePrefixLists = new[]\n        {\n            new Nutanix.Inputs.VpcExternallyRoutablePrefixListArgs\n            {\n                Ip = \"192.43.0.0\",\n                PrefixLength = 16,\n            },\n            new Nutanix.Inputs.VpcExternallyRoutablePrefixListArgs\n            {\n                Ip = \"192.42.0.0\",\n                PrefixLength = 16,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewVpc(ctx, \"vpc\", \u0026nutanix.VpcArgs{\n\t\t\tCommonDomainNameServerIpLists: nutanix.VpcCommonDomainNameServerIpListArray{\n\t\t\t\t\u0026nutanix.VpcCommonDomainNameServerIpListArgs{\n\t\t\t\t\tIp: pulumi.String(\"8.8.8.8\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExternalSubnetReferenceUuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003csubnet_uuid\u003e\"),\n\t\t\t},\n\t\t\tExternallyRoutablePrefixLists: nutanix.VpcExternallyRoutablePrefixListArray{\n\t\t\t\t\u0026nutanix.VpcExternallyRoutablePrefixListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"192.43.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(16),\n\t\t\t\t},\n\t\t\t\t\u0026nutanix.VpcExternallyRoutablePrefixListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"192.42.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(16),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.Vpc;\nimport com.pulumi.nutanix.VpcArgs;\nimport com.pulumi.nutanix.inputs.VpcCommonDomainNameServerIpListArgs;\nimport com.pulumi.nutanix.inputs.VpcExternallyRoutablePrefixListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc = new Vpc(\"vpc\", VpcArgs.builder()\n            .commonDomainNameServerIpLists(VpcCommonDomainNameServerIpListArgs.builder()\n                .ip(\"8.8.8.8\")\n                .build())\n            .externalSubnetReferenceUuids(\"\u003csubnet_uuid\u003e\")\n            .externallyRoutablePrefixLists(            \n                VpcExternallyRoutablePrefixListArgs.builder()\n                    .ip(\"192.43.0.0\")\n                    .prefixLength(16)\n                    .build(),\n                VpcExternallyRoutablePrefixListArgs.builder()\n                    .ip(\"192.42.0.0\")\n                    .prefixLength(16)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc:\n    type: nutanix:Vpc\n    properties:\n      commonDomainNameServerIpLists:\n        - ip: 8.8.8.8\n      externalSubnetReferenceUuids:\n        - \u003csubnet_uuid\u003e\n      externallyRoutablePrefixLists:\n        - ip: 192.43.0.0\n          prefixLength: 16\n        - ip: 192.42.0.0\n          prefixLength: 16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetListStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcExternalSubnetListStatus:VpcExternalSubnetListStatus"
                    },
                    "description": "Status of List of external subnets attached to this VPC\n"
                },
                "externalSubnetReferenceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets name attached to this VPC. Should not be used with external_subnet_reference_uuid.\n"
                },
                "externalSubnetReferenceUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets uuid attached to this VPC. Should not be used with external_subnet_reference_name.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList"
                    },
                    "description": "List Externally Routable IP Addresses. Required when external subnet with NoNAT is used.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The vpc kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the VPC.\n"
                }
            },
            "required": [
                "apiVersion",
                "commonDomainNameServerIpLists",
                "externalSubnetListStatuses",
                "externalSubnetReferenceUuids",
                "externallyRoutablePrefixLists",
                "metadata",
                "name"
            ],
            "inputProperties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetReferenceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets name attached to this VPC. Should not be used with external_subnet_reference_uuid.\n"
                },
                "externalSubnetReferenceUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets uuid attached to this VPC. Should not be used with external_subnet_reference_name.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList"
                    },
                    "description": "List Externally Routable IP Addresses. Required when external subnet with NoNAT is used.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the VPC.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "commonDomainNameServerIpLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList"
                        },
                        "description": "List of domain name server IPs.\n"
                    },
                    "externalSubnetListStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VpcExternalSubnetListStatus:VpcExternalSubnetListStatus"
                        },
                        "description": "Status of List of external subnets attached to this VPC\n"
                    },
                    "externalSubnetReferenceNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of external subnets name attached to this VPC. Should not be used with external_subnet_reference_uuid.\n"
                    },
                    "externalSubnetReferenceUuids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of external subnets uuid attached to this VPC. Should not be used with external_subnet_reference_name.\n"
                    },
                    "externallyRoutablePrefixLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList"
                        },
                        "description": "List Externally Routable IP Addresses. Required when external subnet with NoNAT is used.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The vpc kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the VPC.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "nutanix:index/getAccessControlPolicies:getAccessControlPolicies": {
            "description": "Describes a list of access control policies.\n\n## Example Usage\n\n``` hcl\ndata \"nutanix_access_control_policies\" \"test\" {}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessControlPolicies.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPoliciesMetadata:getAccessControlPoliciesMetadata"
                        },
                        "description": "- The Access Control Policy kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccessControlPolicies.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntity:getAccessControlPoliciesEntity"
                        },
                        "description": "List of Access Control Policies\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPoliciesMetadata:getAccessControlPoliciesMetadata"
                        },
                        "description": "- The Access Control Policy kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getAccessControlPolicy:getAccessControlPolicy": {
            "description": "Describes an Access Control Policy.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_access_control_policy\" \"test\" {\n\tname        = \"NAME OF ACCESS CONTROL POLICY\"\n\tdescription = \"DESCRIPTION OF THE ACCESS CONTROL POLICY\"\n\trole_reference {\n\t\tkind = \"role\"\n\t\tuuid = \"UUID of role\"\n\t}\n}\ndata \"nutanix_access_control_policy\" \"test\" {\n    access_control_policy_id = nutanix_access_control_policy.test.id\n}\n\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessControlPolicy.\n",
                "properties": {
                    "accessControlPolicyId": {
                        "type": "string",
                        "description": "- (Required) The UUID of an access control policy.\n"
                    },
                    "accessControlPolicyName": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyCategory:getAccessControlPolicyCategory"
                        },
                        "description": "- The category values represented as a dictionary of key \u003e list of values.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccessControlPolicy.\n",
                "properties": {
                    "accessControlPolicyId": {
                        "type": "string"
                    },
                    "accessControlPolicyName": {
                        "type": "string"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyCategory:getAccessControlPolicyCategory"
                        },
                        "description": "- The category values represented as a dictionary of key \u003e list of values.\n"
                    },
                    "contextFilterLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterList:getAccessControlPolicyContextFilterList"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "- The description of the Access Control Policy.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The Access Control Policy kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name(Optional).\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a project.\n"
                    },
                    "roleReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyRoleReference:getAccessControlPolicyRoleReference"
                        },
                        "description": "- The reference to a role.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the Access Control Policy.\n"
                    },
                    "userGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyUserGroupReferenceList:getAccessControlPolicyUserGroupReferenceList"
                        },
                        "description": "- The User group(s) being assigned a given role.\n"
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyUserReferenceList:getAccessControlPolicyUserReferenceList"
                        },
                        "description": "- The User(s) being assigned a given role.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "contextFilterLists",
                    "description",
                    "metadata",
                    "name",
                    "ownerReference",
                    "projectReference",
                    "roleReferences",
                    "state",
                    "userGroupReferenceLists",
                    "userReferenceLists",
                    "id"
                ]
            }
        },
        "nutanix:index/getAddressGroup:getAddressGroup": {
            "description": "Provides a datasource to retrieve a address group.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_address_group\" \"test_address\" {\n  \t\t\tname = \"test\"\n  \t\t\tdescription = \"test address groups resource\"\n\n  \t\t\tip_address_block_list {\n    \t\t\tip = \"10.0.0.0\"\n    \t\t\tprefix_length = 24\n  \t\t\t}\n\t\t}\n\n  data \"nutanix_address_group\" \"addr_group\" {\n    uuid = nutanix_address_group.test_address.id\n  }\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAddressGroup.\n",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "- (Required) UUID of the address group\n"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAddressGroup.\n",
                "properties": {
                    "addressGroupString": {
                        "type": "string",
                        "description": "- (ReadOnly) Address Group string\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- (ReadOnly) Description of the address group\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddressBlockLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupIpAddressBlockList:getAddressGroupIpAddressBlockList"
                        },
                        "description": "- (ReadOnly) list of IP address blocks with their prefix length\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- (ReadOnly) Name of the address group\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "- (Required) UUID of the address group\n"
                    }
                },
                "type": "object",
                "required": [
                    "addressGroupString",
                    "description",
                    "ipAddressBlockLists",
                    "name",
                    "uuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getAddressGroups:getAddressGroups": {
            "description": "Provides a datasource to retrieve list of address groups.\n\n## Example Usage\n\n``` hcl\n  data \"nutanix_address_groups\" \"addr_groups\" {}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAddressGroups.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupsMetadata:getAddressGroupsMetadata"
                        },
                        "description": "- (Optional) Use metadata to specify filters\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAddressGroups.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupsEntity:getAddressGroupsEntity"
                        },
                        "description": "- (ReadOnly) List of address groups\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupsMetadata:getAddressGroupsMetadata"
                        },
                        "description": "- (Optional) Use metadata to specify filters\n"
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getAssertHelper:getAssertHelper": {
            "inputs": {
                "description": "A collection of arguments for invoking getAssertHelper.\n",
                "properties": {
                    "checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAssertHelperCheck:getAssertHelperCheck"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAssertHelper.\n",
                "properties": {
                    "checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAssertHelperCheck:getAssertHelperCheck"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "nutanix:index/getCategoryKey:getCategoryKey": {
            "description": "Describe a Nutanix Category Key and its values (if it has them).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCategoryKey.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "- (Required) The name for the category key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCategoryKey.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- A description for category key.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "systemDefined": {
                        "type": "boolean",
                        "description": "- Specifying whether its a system defined category.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- A list of the values from this category key (if it has them).\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "description",
                    "name",
                    "systemDefined",
                    "values",
                    "id"
                ]
            }
        },
        "nutanix:index/getCluster:getCluster": {
            "description": "Describes Clusters\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterCategory:getClusterCategory"
                        },
                        "description": "- Categories for the image.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Represents clusters uuid\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Represents the name of cluster\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "analysisVmEfficiencyMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)\n"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n"
                    },
                    "authorizedPublicKeyLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterAuthorizedPublicKeyList:getClusterAuthorizedPublicKeyList"
                        }
                    },
                    "build": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Cluster build details.\n"
                    },
                    "caCertificateLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterCaCertificateList:getClusterCaCertificateList"
                        },
                        "description": "- Zone name used in value of TZ environment variable.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterCategory:getClusterCategory"
                        },
                        "description": "- Categories for the image.\n"
                    },
                    "certificationSigningInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Customer information used in Certificate Signing Request for creating digital certificates.\n"
                    },
                    "clientAuth": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Client authentication config.\n"
                    },
                    "clusterArch": {
                        "type": "string",
                        "description": "- Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "domainServerCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Cluster domain credentials.\n"
                    },
                    "domainServerName": {
                        "type": "string",
                        "description": "- Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.\n"
                    },
                    "domainServerNameserver": {
                        "type": "string",
                        "description": "-  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.\n"
                    },
                    "enabledFeatureLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- Array of enabled features.\n"
                    },
                    "encryptionStatus": {
                        "type": "string",
                        "description": "- Cluster encryption status.\n"
                    },
                    "externalDataServicesIp": {
                        "type": "string",
                        "description": "- The cluster IP address that provides external entities access to various cluster data services.\n"
                    },
                    "externalIp": {
                        "type": "string",
                        "description": "- The local IP of cluster visible externally.\n"
                    },
                    "externalSubnet": {
                        "type": "string",
                        "description": "- External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)\n"
                    },
                    "gpuDriverVersion": {
                        "type": "string",
                        "description": "- GPU driver version.\n"
                    },
                    "httpProxyLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterHttpProxyList:getClusterHttpProxyList"
                        },
                        "description": "- List of proxies to connect to the service centers.\n"
                    },
                    "httpProxyWhitelists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterHttpProxyWhitelist:getClusterHttpProxyWhitelist"
                        },
                        "description": "- HTTP proxy whitelist.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalSubnet": {
                        "type": "string",
                        "description": "- The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.\n"
                    },
                    "isAvailable": {
                        "type": "boolean",
                        "description": "- Indicates if cluster is available to contact. (Readonly)\n"
                    },
                    "managementServerLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterManagementServerList:getClusterManagementServerList"
                        },
                        "description": "- List of cluster management servers. (Readonly)\n"
                    },
                    "masqueradingIp": {
                        "type": "string",
                        "description": "- The cluster NAT'd or proxy IP which maps to the cluster local IP.\n"
                    },
                    "masqueradingPort": {
                        "type": "integer",
                        "description": "- Port used together with masquerading_ip to connect to the cluster.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The image kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name.\n"
                    },
                    "nameServerIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- The list of IP addresses of the name servers.\n"
                    },
                    "nfsSubnetWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterNode:getClusterNode"
                        }
                    },
                    "ntpServerIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- The list of IP addresses or FQDNs of the NTP servers.\n"
                    },
                    "operationMode": {
                        "type": "string",
                        "description": "- Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a project.\n"
                    },
                    "serviceLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.\n"
                    },
                    "smtpServerAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- SMTP Server Address.\n"
                    },
                    "smtpServerCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- SMTP Server Credentials.\n"
                    },
                    "smtpServerEmailAddress": {
                        "type": "string",
                        "description": "- SMTP Server Email Address.\n"
                    },
                    "smtpServerProxyTypeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- SMTP Server Proxy Type List\n"
                    },
                    "smtpServerType": {
                        "type": "string",
                        "description": "- SMTP Server type.\n"
                    },
                    "softwareMapNcc": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "- Map of software on the cluster with software type as the key.\n"
                    },
                    "softwareMapNos": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "- Map of software on the cluster with software type as the key.\n"
                    },
                    "sslKeyExpireDatetime": {
                        "type": "string",
                        "description": "- UTC date and time in RFC-3339 format when the key expires\n"
                    },
                    "sslKeyName": {
                        "type": "string"
                    },
                    "sslKeySigningInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Customer information used in Certificate Signing Request for creating digital certificates.\n"
                    },
                    "sslKeyType": {
                        "type": "string",
                        "description": "- SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the cluster entity.\n"
                    },
                    "supportedInformationVerbosity": {
                        "type": "string",
                        "description": "- Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "- Zone name used in value of TZ environment variable.\n"
                    }
                },
                "type": "object",
                "required": [
                    "analysisVmEfficiencyMap",
                    "apiVersion",
                    "authorizedPublicKeyLists",
                    "build",
                    "caCertificateLists",
                    "categories",
                    "certificationSigningInfo",
                    "clientAuth",
                    "clusterArch",
                    "clusterId",
                    "domainServerCredentials",
                    "domainServerName",
                    "domainServerNameserver",
                    "enabledFeatureLists",
                    "encryptionStatus",
                    "externalDataServicesIp",
                    "externalIp",
                    "externalSubnet",
                    "gpuDriverVersion",
                    "httpProxyLists",
                    "httpProxyWhitelists",
                    "internalSubnet",
                    "isAvailable",
                    "managementServerLists",
                    "masqueradingIp",
                    "masqueradingPort",
                    "metadata",
                    "name",
                    "nameServerIpLists",
                    "nfsSubnetWhitelists",
                    "nodes",
                    "ntpServerIpLists",
                    "operationMode",
                    "ownerReference",
                    "projectReference",
                    "serviceLists",
                    "smtpServerAddress",
                    "smtpServerCredentials",
                    "smtpServerEmailAddress",
                    "smtpServerProxyTypeLists",
                    "smtpServerType",
                    "softwareMapNcc",
                    "softwareMapNos",
                    "sslKeyExpireDatetime",
                    "sslKeyName",
                    "sslKeySigningInfo",
                    "sslKeyType",
                    "state",
                    "supportedInformationVerbosity",
                    "timezone",
                    "id"
                ]
            }
        },
        "nutanix:index/getClusters:getClusters": {
            "description": "Describes Clusters\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getClusters({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_clusters()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clusters = Nutanix.GetClusters.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = NutanixFunctions.getClusters();\n\n    }\n}\n```\n```yaml\nvariables:\n  clusters:\n    fn::invoke:\n      Function: nutanix:getClusters\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Reference\n\nThe `project_reference`, `owner_reference`, `availability_zone_reference`, `cluster_reference`, attributes supports the following:\n\n* `kind`: - The kind name (Default value: project).\n* `name`: - the name.\n* `UUID`: - the UUID.\n\n### Version\n\nThe version attribute supports the following:\n\n* `product_name`: - Name of the producer/distribution of the image. For example windows or red hat.\n* `product_version`: - Version string for the disk image.\n\nSee detailed information in [Nutanix Clusters](https://www.nutanix.dev/api_references/prism-central-v3/#/d93c30e04327e-get-a-list-of-existing-clusters).\n",
            "outputs": {
                "description": "A collection of values returned by getClusters.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClustersEntity:getClustersEntity"
                        },
                        "description": "List of Clusters\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getFloatingIp:getFloatingIp": {
            "description": "Provides a datasource to retrieve floating IPs with floating_ip_uuid .\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIp.\n",
                "properties": {
                    "floatingIpUuid": {
                        "type": "string",
                        "description": "Floating IP UUID\n"
                    }
                },
                "type": "object",
                "required": [
                    "floatingIpUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIp.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "floatingIpUuid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The floating_ip kind metadata.\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpSpec:getFloatingIpSpec"
                        },
                        "description": "Floating IP spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpStatus:getFloatingIpStatus"
                        },
                        "description": "Floating IP output status\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "floatingIpUuid",
                    "metadata",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getFloatingIps:getFloatingIps": {
            "description": "Provides a datasource to retrieve all the floating IPs .\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = nutanix.getFloatingIps({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_floating_ips()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nutanix.GetFloatingIps.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFloatingIps(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFloatingIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NutanixFunctions.getFloatingIps();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nutanix:getFloatingIps\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIps.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpsMetadata:getFloatingIpsMetadata"
                        },
                        "description": "- The floating_ip kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIps.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpsEntity:getFloatingIpsEntity"
                        },
                        "description": "List of Floating IPs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpsMetadata:getFloatingIpsMetadata"
                        },
                        "description": "- The floating_ip kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralApiKeys:getFoundationCentralApiKeys": {
            "description": "Get an api key given its UUID.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst apiKeysList = nutanix.getFoundationCentralApiKeys({\n    keyUuid: \"\u003cKEY_UUID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\napi_keys_list = nutanix.get_foundation_central_api_keys(key_uuid=\"\u003cKEY_UUID\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apiKeysList = Nutanix.GetFoundationCentralApiKeys.Invoke(new()\n    {\n        KeyUuid = \"\u003cKEY_UUID\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupFoundationCentralApiKeys(ctx, \u0026nutanix.LookupFoundationCentralApiKeysArgs{\n\t\t\tKeyUuid: \"\u003cKEY_UUID\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFoundationCentralApiKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var apiKeysList = NutanixFunctions.getFoundationCentralApiKeys(GetFoundationCentralApiKeysArgs.builder()\n            .keyUuid(\"\u003cKEY_UUID\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  apiKeysList:\n    fn::invoke:\n      Function: nutanix:getFoundationCentralApiKeys\n      Arguments:\n        keyUuid: \u003cKEY_UUID\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralApiKeys.\n",
                "properties": {
                    "keyUuid": {
                        "type": "string",
                        "description": "UUID of the key which needs to be fetched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "keyUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralApiKeys.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Alias of the api key.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "Api key in string format.\n",
                        "secret": true
                    },
                    "createdTimestamp": {
                        "type": "string",
                        "description": "Time when the api key was created.\n"
                    },
                    "currentTime": {
                        "type": "string",
                        "description": "Current time of Foundation Central.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keyUuid": {
                        "type": "string",
                        "description": "UUID of the api key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "apiKey",
                    "createdTimestamp",
                    "currentTime",
                    "keyUuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralClusterDetails:getFoundationCentralClusterDetails": {
            "description": "Get a cluster details created using Foundation Central.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst imagedClusterDetails = nutanix.getFoundationCentralClusterDetails({\n    imagedClusterUuid: \"\u003cCLUSTER-UUID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nimaged_cluster_details = nutanix.get_foundation_central_cluster_details(imaged_cluster_uuid=\"\u003cCLUSTER-UUID\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var imagedClusterDetails = Nutanix.GetFoundationCentralClusterDetails.Invoke(new()\n    {\n        ImagedClusterUuid = \"\u003cCLUSTER-UUID\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationCentralClusterDetails(ctx, \u0026nutanix.GetFoundationCentralClusterDetailsArgs{\n\t\t\tImagedClusterUuid: \"\u003cCLUSTER-UUID\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFoundationCentralClusterDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var imagedClusterDetails = NutanixFunctions.getFoundationCentralClusterDetails(GetFoundationCentralClusterDetailsArgs.builder()\n            .imagedClusterUuid(\"\u003cCLUSTER-UUID\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  imagedClusterDetails:\n    fn::invoke:\n      Function: nutanix:getFoundationCentralClusterDetails\n      Arguments:\n        imagedClusterUuid: \u003cCLUSTER-UUID\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralClusterDetails.\n",
                "properties": {
                    "clusterExternalIp": {
                        "type": "string",
                        "description": "External management ip of the cluster.\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "Cluster name.\n"
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "Number of nodes in the cluster.\n"
                    },
                    "clusterStatus": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatus:getFoundationCentralClusterDetailsClusterStatus",
                        "description": "Details of cluster creation process.\n"
                    },
                    "commonNetworkSettings": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsCommonNetworkSettings:getFoundationCentralClusterDetailsCommonNetworkSettings",
                        "description": "Common network settings across the nodes in the cluster.\n"
                    },
                    "imagedClusterUuid": {
                        "type": "string",
                        "description": "UUID of the cluster whose details need to be fetched.\n"
                    },
                    "redundancyFactor": {
                        "type": "integer",
                        "description": "Redundancy factor of the cluster.\n"
                    },
                    "storageNodeCount": {
                        "type": "integer",
                        "description": "Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.\n"
                    }
                },
                "type": "object",
                "required": [
                    "imagedClusterUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralClusterDetails.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "True if the cluster creation request is archived, False otherwise\n"
                    },
                    "clusterExternalIp": {
                        "type": "string",
                        "description": "External management ip of the cluster.\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "Cluster name.\n"
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "Number of nodes in the cluster.\n"
                    },
                    "clusterStatus": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatus:getFoundationCentralClusterDetailsClusterStatus",
                        "description": "Details of cluster creation process.\n"
                    },
                    "commonNetworkSettings": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsCommonNetworkSettings:getFoundationCentralClusterDetailsCommonNetworkSettings",
                        "description": "Common network settings across the nodes in the cluster.\n"
                    },
                    "createdTimestamp": {
                        "type": "string",
                        "description": "Time when the cluster creation request was received in Foundation Central.\n"
                    },
                    "currentTime": {
                        "type": "string",
                        "description": "Current time of Foundation Central.\n"
                    },
                    "destroyed": {
                        "type": "boolean",
                        "description": "True if the cluster is destroyed, False otherwise\n"
                    },
                    "foundationInitConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfig:getFoundationCentralClusterDetailsFoundationInitConfig"
                        },
                        "description": "Json config used by Foundation to create the cluster.\n"
                    },
                    "foundationInitNodeUuid": {
                        "type": "string",
                        "description": "UUID of the first node coordinating cluster creation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedClusterUuid": {
                        "type": "string",
                        "description": "UUID of the cluster.\n"
                    },
                    "imagedNodeUuidLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of UUIDs of imaged nodes.\n"
                    },
                    "redundancyFactor": {
                        "type": "integer",
                        "description": "Redundancy factor of the cluster.\n"
                    },
                    "storageNodeCount": {
                        "type": "integer",
                        "description": "Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.\n"
                    },
                    "workflowType": {
                        "type": "string",
                        "description": "If imaging and cluster creation is coordinated by Foundation, value will be FOUNDATION_WF. If the nodes are in phoenix, value will be PHOENIX_WF.\n"
                    }
                },
                "type": "object",
                "required": [
                    "archived",
                    "clusterExternalIp",
                    "clusterName",
                    "clusterSize",
                    "clusterStatus",
                    "commonNetworkSettings",
                    "createdTimestamp",
                    "currentTime",
                    "destroyed",
                    "foundationInitConfigs",
                    "foundationInitNodeUuid",
                    "imagedClusterUuid",
                    "imagedNodeUuidLists",
                    "storageNodeCount",
                    "workflowType",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersList:getFoundationCentralImagedClustersList": {
            "description": "List all the clusters created using Foundation Central.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst imagedClustersList = nutanix.getFoundationCentralImagedClustersList({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nimaged_clusters_list = nutanix.get_foundation_central_imaged_clusters_list()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var imagedClustersList = Nutanix.GetFoundationCentralImagedClustersList.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationCentralImagedClustersList(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFoundationCentralImagedClustersListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var imagedClustersList = NutanixFunctions.getFoundationCentralImagedClustersList();\n\n    }\n}\n```\n```yaml\nvariables:\n  imagedClustersList:\n    fn::invoke:\n      Function: nutanix:getFoundationCentralImagedClustersList\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralImagedClustersList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListFilters:getFoundationCentralImagedClustersListFilters"
                    },
                    "length": {
                        "type": "integer",
                        "description": "The number of records retrieved.\n"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Offset from the start of the object list.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralImagedClustersList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListFilters:getFoundationCentralImagedClustersListFilters"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedClusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedCluster:getFoundationCentralImagedClustersListImagedCluster"
                        }
                    },
                    "length": {
                        "type": "integer",
                        "description": "The number of records retrieved.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListMetadata:getFoundationCentralImagedClustersListMetadata"
                        }
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Offset from the start of the object list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "imagedClusters",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralImagedNodeDetails:getFoundationCentralImagedNodeDetails": {
            "description": "Get the details of a single node given its UUID.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nodesDetails = nutanix.getFoundationCentralImagedNodeDetails({\n    imagedNodeUuid: \"\u003cIMAGED-NODE-UUID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnodes_details = nutanix.get_foundation_central_imaged_node_details(imaged_node_uuid=\"\u003cIMAGED-NODE-UUID\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nodesDetails = Nutanix.GetFoundationCentralImagedNodeDetails.Invoke(new()\n    {\n        ImagedNodeUuid = \"\u003cIMAGED-NODE-UUID\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationCentralImagedNodeDetails(ctx, \u0026nutanix.GetFoundationCentralImagedNodeDetailsArgs{\n\t\t\tImagedNodeUuid: \"\u003cIMAGED-NODE-UUID\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFoundationCentralImagedNodeDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nodesDetails = NutanixFunctions.getFoundationCentralImagedNodeDetails(GetFoundationCentralImagedNodeDetailsArgs.builder()\n            .imagedNodeUuid(\"\u003cIMAGED-NODE-UUID\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  nodesDetails:\n    fn::invoke:\n      Function: nutanix:getFoundationCentralImagedNodeDetails\n      Arguments:\n        imagedNodeUuid: \u003cIMAGED-NODE-UUID\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralImagedNodeDetails.\n",
                "properties": {
                    "imagedNodeUuid": {
                        "type": "string",
                        "description": "UUID of the node whose details need to be fetched.\n"
                    },
                    "ipv6Interface": {
                        "type": "string",
                        "description": "Name of the cvm interface having ipv6 address.\n"
                    },
                    "objectVersion": {
                        "type": "integer",
                        "description": "Version of the node used for CAS.\n"
                    }
                },
                "type": "object",
                "required": [
                    "imagedNodeUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralImagedNodeDetails.\n",
                "properties": {
                    "aosVersion": {
                        "type": "string",
                        "description": "AOS version currently installed on the node.\n"
                    },
                    "apiKeyUuid": {
                        "type": "string",
                        "description": "API key used to register the node.\n"
                    },
                    "available": {
                        "type": "boolean",
                        "description": "Specifies whether the node is available for cluster creation.\n"
                    },
                    "blockSerial": {
                        "type": "string",
                        "description": "Serial number of the block to which the node belongs.\n"
                    },
                    "createdTimestamp": {
                        "type": "string",
                        "description": "Time when the node was discovered in Foundation Central.\n"
                    },
                    "currentTime": {
                        "type": "string",
                        "description": "Current time of Foundation Central.\n"
                    },
                    "cvmGateway": {
                        "type": "string",
                        "description": "gateway of the cvm.\n"
                    },
                    "cvmIp": {
                        "type": "string",
                        "description": "IP address of the cvm.\n"
                    },
                    "cvmIpv6": {
                        "type": "string",
                        "description": "IPv6 address of the cvm.\n"
                    },
                    "cvmNetmask": {
                        "type": "string",
                        "description": "netmask of the cvm.\n"
                    },
                    "cvmUp": {
                        "type": "boolean",
                        "description": "Denotes whether the CVM is up or not on this node.\n"
                    },
                    "cvmUuid": {
                        "type": "string",
                        "description": "Node UUID from the node's cvm.\n"
                    },
                    "cvmVlanId": {
                        "type": "integer",
                        "description": "Vlan tag of the cvm, if the cvm is on a vlan.\n"
                    },
                    "foundationVersion": {
                        "type": "string",
                        "description": "Foundation version installed on the node.\n"
                    },
                    "hardwareAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Hardware attributes json of the node.\n"
                    },
                    "hypervisorGateway": {
                        "type": "string",
                        "description": "gateway of the hypervisor.\n"
                    },
                    "hypervisorHostname": {
                        "type": "string",
                        "description": "Name of the hypervisor host.\n"
                    },
                    "hypervisorIp": {
                        "type": "string",
                        "description": "IP address of the hypervisor.\n"
                    },
                    "hypervisorNetmask": {
                        "type": "string",
                        "description": "netmask of the hypervisor.\n"
                    },
                    "hypervisorType": {
                        "type": "string",
                        "description": "Hypervisor type currently installed on the node. Must be one of {kvm, esx, hyperv}.\n"
                    },
                    "hypervisorVersion": {
                        "type": "string",
                        "description": "Version of the hypervisor currently installed on the node.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedClusterUuid": {
                        "type": "string",
                        "description": "UUID of the cluster to which the node belongs, if any.\n"
                    },
                    "imagedNodeUuid": {
                        "type": "string",
                        "description": "UUID of the node.\n"
                    },
                    "ipmiGateway": {
                        "type": "string",
                        "description": "gateway of the ipmi.\n"
                    },
                    "ipmiIp": {
                        "type": "string",
                        "description": "IP address of the ipmi.\n"
                    },
                    "ipmiNetmask": {
                        "type": "string",
                        "description": "netmask of the ipmi.\n"
                    },
                    "ipv6Interface": {
                        "type": "string",
                        "description": "Name of the cvm interface having ipv6 address.\n"
                    },
                    "latestHbTsLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of timestamps when the node has sent heartbeats to Foundation Central.\n"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model of the node.\n"
                    },
                    "nodePosition": {
                        "type": "string",
                        "description": "Position of the node in the block.\n"
                    },
                    "nodeSerial": {
                        "type": "string",
                        "description": "Serial number of the node.\n"
                    },
                    "nodeState": {
                        "type": "string",
                        "description": "Specifies whether the node is discovering, available or unavailable for cluster creation.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "Specifies the type of node - on-prem, AWS, GCP etc.\n"
                    },
                    "objectVersion": {
                        "type": "integer",
                        "description": "Version of the node used for CAS.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aosVersion",
                    "apiKeyUuid",
                    "available",
                    "blockSerial",
                    "createdTimestamp",
                    "currentTime",
                    "cvmGateway",
                    "cvmIp",
                    "cvmIpv6",
                    "cvmNetmask",
                    "cvmUp",
                    "cvmUuid",
                    "cvmVlanId",
                    "foundationVersion",
                    "hardwareAttributes",
                    "hypervisorGateway",
                    "hypervisorHostname",
                    "hypervisorIp",
                    "hypervisorNetmask",
                    "hypervisorType",
                    "hypervisorVersion",
                    "imagedClusterUuid",
                    "imagedNodeUuid",
                    "ipmiGateway",
                    "ipmiIp",
                    "ipmiNetmask",
                    "ipv6Interface",
                    "latestHbTsLists",
                    "model",
                    "nodePosition",
                    "nodeSerial",
                    "nodeState",
                    "nodeType",
                    "objectVersion",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralImagedNodesList:getFoundationCentralImagedNodesList": {
            "description": "List all the nodes registered with Foundation Central\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nodesList = nutanix.getFoundationCentralImagedNodesList({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnodes_list = nutanix.get_foundation_central_imaged_nodes_list()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nodesList = Nutanix.GetFoundationCentralImagedNodesList.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationCentralImagedNodesList(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFoundationCentralImagedNodesListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nodesList = NutanixFunctions.getFoundationCentralImagedNodesList();\n\n    }\n}\n```\n```yaml\nvariables:\n  nodesList:\n    fn::invoke:\n      Function: nutanix:getFoundationCentralImagedNodesList\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralImagedNodesList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListFilters:getFoundationCentralImagedNodesListFilters"
                    },
                    "length": {
                        "type": "integer",
                        "description": "The number of records retrieved.\n"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Offset from the start of the object list.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralImagedNodesList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListFilters:getFoundationCentralImagedNodesListFilters"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListImagedNode:getFoundationCentralImagedNodesListImagedNode"
                        }
                    },
                    "length": {
                        "type": "integer",
                        "description": "The number of records retrieved.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListMetadata:getFoundationCentralImagedNodesListMetadata"
                        },
                        "description": "List metadata output for all list apis.\n"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Offset from the start of the object list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "imagedNodes",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralListApiKeys:getFoundationCentralListApiKeys": {
            "description": "List all the api keys created in Foundation Central.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst apiKeysList = nutanix.getFoundationCentralListApiKeys({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\napi_keys_list = nutanix.get_foundation_central_list_api_keys()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apiKeysList = Nutanix.GetFoundationCentralListApiKeys.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationCentralListApiKeys(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFoundationCentralListApiKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var apiKeysList = NutanixFunctions.getFoundationCentralListApiKeys();\n\n    }\n}\n```\n```yaml\nvariables:\n  apiKeysList:\n    fn::invoke:\n      Function: nutanix:getFoundationCentralListApiKeys\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralListApiKeys.\n",
                "properties": {
                    "length": {
                        "type": "integer",
                        "description": "The number of records retrieved.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralListApiKeysMetadata:getFoundationCentralListApiKeysMetadata",
                        "description": "List metadata output for all list apis.\n"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Offset from the start of the object list.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralListApiKeys.\n",
                "properties": {
                    "apiKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralListApiKeysApiKey:getFoundationCentralListApiKeysApiKey"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "length": {
                        "type": "integer",
                        "description": "The number of records retrieved.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralListApiKeysMetadata:getFoundationCentralListApiKeysMetadata",
                        "description": "List metadata output for all list apis.\n"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Offset from the start of the object list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiKeys",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationDiscoverNodes:getFoundationDiscoverNodes": {
            "description": "Discovers and lists Nutanix-imaged nodes within an IPv6 network.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst discoveredNodes = nutanix.getFoundationDiscoverNodes({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ndiscovered_nodes = nutanix.get_foundation_discover_nodes()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var discoveredNodes = Nutanix.GetFoundationDiscoverNodes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationDiscoverNodes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var discoveredNodes = NutanixFunctions.getFoundationDiscoverNodes();\n\n    }\n}\n```\n```yaml\nvariables:\n  discoveredNodes:\n    fn::invoke:\n      Function: nutanix:getFoundationDiscoverNodes\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getFoundationDiscoverNodes.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationDiscoverNodesEntity:getFoundationDiscoverNodesEntity"
                        },
                        "description": "List of Nutanix-imaged nodes within an IPv6 network\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationHypervisorIsos:getFoundationHypervisorIsos": {
            "description": "Describes a list of hypervisor isos image file details present in foundation vm\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst hypervisorIsos = nutanix.getFoundationHypervisorIsos({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nhypervisor_isos = nutanix.get_foundation_hypervisor_isos()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var hypervisorIsos = Nutanix.GetFoundationHypervisorIsos.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationHypervisorIsos(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var hypervisorIsos = NutanixFunctions.getFoundationHypervisorIsos();\n\n    }\n}\n```\n```yaml\nvariables:\n  hypervisorIsos:\n    fn::invoke:\n      Function: nutanix:getFoundationHypervisorIsos\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Note\n\n* This data source only lists .iso files details.\n\nSee detailed information in [Nutanix Foundation Hypervisor Isos](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjM0MDE-list-hypervisor-images-available-in-foundation).\n",
            "outputs": {
                "description": "A collection of values returned by getFoundationHypervisorIsos.\n",
                "properties": {
                    "esxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosEsx:getFoundationHypervisorIsosEsx"
                        },
                        "description": "List of esx isos and theirdetails present in foundation vm\n"
                    },
                    "hypervs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosHyperv:getFoundationHypervisorIsosHyperv"
                        },
                        "description": "List of hyperv isos and their details present in foundation vm\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kvms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosKvm:getFoundationHypervisorIsosKvm"
                        },
                        "description": "List of kvm isos and their details present in foundation vm\n"
                    },
                    "linuxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosLinux:getFoundationHypervisorIsosLinux"
                        },
                        "description": "List of linux isos and their details present in foundation vm\n"
                    },
                    "xens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosXen:getFoundationHypervisorIsosXen"
                        },
                        "description": "List of esx isos and theirdetails present in foundation vm\n"
                    }
                },
                "type": "object",
                "required": [
                    "esxes",
                    "hypervs",
                    "kvms",
                    "linuxes",
                    "xens",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationNodeNetworkDetails:getFoundationNodeNetworkDetails": {
            "description": "Gets hypervisor, CVM \u0026 IPMI info of the discovered nodes using their ipv6 address.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst networkDetails = nutanix.getFoundationNodeNetworkDetails({\n    ipv6Addresses: [\n        \"\u003cipv6-address-1\u003e\",\n        \"\u003cipv6-address-2\u003e\",\n    ],\n    timeout: \"30\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnetwork_details = nutanix.get_foundation_node_network_details(ipv6_addresses=[\n        \"\u003cipv6-address-1\u003e\",\n        \"\u003cipv6-address-2\u003e\",\n    ],\n    timeout=\"30\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var networkDetails = Nutanix.GetFoundationNodeNetworkDetails.Invoke(new()\n    {\n        Ipv6Addresses = new[]\n        {\n            \"\u003cipv6-address-1\u003e\",\n            \"\u003cipv6-address-2\u003e\",\n        },\n        Timeout = \"30\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationNodeNetworkDetails(ctx, \u0026nutanix.GetFoundationNodeNetworkDetailsArgs{\n\t\t\tIpv6Addresses: []string{\n\t\t\t\t\"\u003cipv6-address-1\u003e\",\n\t\t\t\t\"\u003cipv6-address-2\u003e\",\n\t\t\t},\n\t\t\tTimeout: pulumi.StringRef(\"30\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetFoundationNodeNetworkDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var networkDetails = NutanixFunctions.getFoundationNodeNetworkDetails(GetFoundationNodeNetworkDetailsArgs.builder()\n            .ipv6Addresses(            \n                \"\u003cipv6-address-1\u003e\",\n                \"\u003cipv6-address-2\u003e\")\n            .timeout(\"30\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  networkDetails:\n    fn::invoke:\n      Function: nutanix:getFoundationNodeNetworkDetails\n      Arguments:\n        ipv6Addresses:\n          - \u003cipv6-address-1\u003e\n          - \u003cipv6-address-2\u003e\n        timeout: '30'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationNodeNetworkDetails.\n",
                "properties": {
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of ipv6 addresses\n"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "timeout in seconds\n"
                    }
                },
                "type": "object",
                "required": [
                    "ipv6Addresses"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationNodeNetworkDetails.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationNodeNetworkDetailsNode:getFoundationNodeNetworkDetailsNode"
                        },
                        "description": "nodes array.\n"
                    },
                    "timeout": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ipv6Addresses",
                    "nodes",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationNosPackages:getFoundationNosPackages": {
            "description": "Describes a list of nos (aos) packages present in foundation vm\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nosPackages = nutanix.getFoundationNosPackages({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnos_packages = nutanix.get_foundation_nos_packages()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nosPackages = Nutanix.GetFoundationNosPackages.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationNosPackages(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nosPackages = NutanixFunctions.getFoundationNosPackages();\n\n    }\n}\n```\n```yaml\nvariables:\n  nosPackages:\n    fn::invoke:\n      Function: nutanix:getFoundationNosPackages\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Note\n\n* This data source only lists .tar file names.\n\nSee detailed information in [Nutanix Foundation Nos Packages](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjMzODg-get-list-of-aos-packages-available-in-foundation).\n",
            "outputs": {
                "description": "A collection of values returned by getFoundationNosPackages.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of nos packages file names present in foundation vm\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getHost:getHost": {
            "description": "Describes a Host\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHost.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostCategory:getHostCategory"
                        },
                        "description": "- Categories for the image.\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "Represents hosts uuid\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHost.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n"
                    },
                    "block": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Host block config info.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostCategory:getHostCategory"
                        },
                        "description": "- Categories for the image.\n"
                    },
                    "clusterReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Reference to a kind. Either one of (kind, uuid) or url needs to be specified.\n"
                    },
                    "controllerVm": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Host controller vm information.\n"
                    },
                    "cpuCapacityHz": {
                        "type": "integer",
                        "description": "- Host CPU capacity.\n"
                    },
                    "cpuModel": {
                        "type": "string",
                        "description": "- Host CPU model.\n"
                    },
                    "failoverCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Hyper-V failover cluster.\n"
                    },
                    "gpuDriverVersion": {
                        "type": "string",
                        "description": "- Host GPU driver version.\n"
                    },
                    "gpuLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostGpuList:getHostGpuList"
                        },
                        "description": "- List of GPUs on the host.\n"
                    },
                    "hostDisksReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostHostDisksReferenceList:getHostHostDisksReferenceList"
                        },
                        "description": "- The reference to a disk.\n"
                    },
                    "hostId": {
                        "type": "string"
                    },
                    "hostNicsIdLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- Host NICs.\n"
                    },
                    "hostType": {
                        "type": "string",
                        "description": "- Host type.\n"
                    },
                    "hypervisor": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Host Hypervisor information.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipmi": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Host IPMI info.\n"
                    },
                    "memoryCapacityMib": {
                        "type": "integer",
                        "description": "- Host memory capacity in MiB.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "monitoringState": {
                        "type": "string",
                        "description": "- Host monitoring status.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name.\n"
                    },
                    "numCpuCores": {
                        "type": "integer",
                        "description": "- Number of CPU cores on Host.\n"
                    },
                    "numCpuSockets": {
                        "type": "integer",
                        "description": "- Number of CPU sockets.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a project.\n"
                    },
                    "rackableUnitReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a rackable_unit.\n"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "- Node serial number.\n"
                    },
                    "windowsDomain": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "block",
                    "categories",
                    "clusterReference",
                    "controllerVm",
                    "cpuCapacityHz",
                    "cpuModel",
                    "failoverCluster",
                    "gpuDriverVersion",
                    "gpuLists",
                    "hostDisksReferenceLists",
                    "hostId",
                    "hostNicsIdLists",
                    "hostType",
                    "hypervisor",
                    "ipmi",
                    "memoryCapacityMib",
                    "metadata",
                    "monitoringState",
                    "name",
                    "numCpuCores",
                    "numCpuSockets",
                    "ownerReference",
                    "projectReference",
                    "rackableUnitReference",
                    "serialNumber",
                    "windowsDomain",
                    "id"
                ]
            }
        },
        "nutanix:index/getHosts:getHosts": {
            "description": "Describes a list of hosts\n\n",
            "outputs": {
                "description": "A collection of values returned by getHosts.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostsEntity:getHostsEntity"
                        },
                        "description": "List of Hosts\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getImage:getImage": {
            "description": "Describes a Image\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageCategory:getImageCategory"
                        },
                        "description": "- Categories for the image.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "Represents image UUID\n"
                    },
                    "imageName": {
                        "type": "string",
                        "description": "Represents image name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "architecture": {
                        "type": "string",
                        "description": "- The supported CPU architecture for a disk image.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a availability_zone.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageCategory:getImageCategory"
                        },
                        "description": "- Categories for the image.\n"
                    },
                    "checksum": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageClusterReference:getImageClusterReference"
                        }
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "currentClusterReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageCurrentClusterReferenceList:getImageCurrentClusterReferenceList"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "- A description for image.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "imageName": {
                        "type": "string"
                    },
                    "imageType": {
                        "type": "string",
                        "description": "- The type of image.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The image kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a project.\n"
                    },
                    "retrievalUriLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- List of URIs where the raw image data can be accessed.\n"
                    },
                    "sizeBytes": {
                        "type": "integer",
                        "description": "- The size of the image in bytes.\n"
                    },
                    "sourceUri": {
                        "type": "string",
                        "description": "- The source URI points at the location of the source image which is used to create/update image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the image.\n"
                    },
                    "version": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The image version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "architecture",
                    "availabilityZoneReference",
                    "categories",
                    "checksum",
                    "clusterName",
                    "clusterReferences",
                    "clusterUuid",
                    "currentClusterReferenceLists",
                    "description",
                    "imageType",
                    "metadata",
                    "name",
                    "ownerReference",
                    "projectReference",
                    "retrievalUriLists",
                    "sizeBytes",
                    "sourceUri",
                    "state",
                    "version",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonCluster:getKarbonCluster": {
            "description": "Describes a Karbon Cluster\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst cluster = nutanix.getKarbonCluster({\n    karbonClusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ncluster = nutanix.get_karbon_cluster(karbon_cluster_id=\"\u003cYOUR-CLUSTER-ID\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cluster = Nutanix.GetKarbonCluster.Invoke(new()\n    {\n        KarbonClusterId = \"\u003cYOUR-CLUSTER-ID\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupKarbonCluster(ctx, \u0026nutanix.LookupKarbonClusterArgs{\n\t\t\tKarbonClusterId: pulumi.StringRef(\"\u003cYOUR-CLUSTER-ID\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetKarbonClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var cluster = NutanixFunctions.getKarbonCluster(GetKarbonClusterArgs.builder()\n            .karbonClusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  cluster:\n    fn::invoke:\n      Function: nutanix:getKarbonCluster\n      Arguments:\n        karbonClusterId: \u003cYOUR-CLUSTER-ID\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonCluster.\n",
                "properties": {
                    "karbonClusterId": {
                        "type": "string",
                        "description": "Represents karbon cluster uuid\n"
                    },
                    "karbonClusterName": {
                        "type": "string",
                        "description": "Represents the name of karbon cluster\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonCluster.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string"
                    },
                    "etcdNodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClusterEtcdNodePool:getKarbonClusterEtcdNodePool"
                        },
                        "description": "- Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    },
                    "kubeapiServerIpv4Address": {
                        "type": "string"
                    },
                    "masterNodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClusterMasterNodePool:getKarbonClusterMasterNodePool"
                        },
                        "description": "- Configuration of the master node pools.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Unique name of the node pool.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string",
                        "description": "- K8s version of the cluster.\n"
                    },
                    "workerNodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClusterWorkerNodePool:getKarbonClusterWorkerNodePool"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "deploymentType",
                    "etcdNodePools",
                    "kubeapiServerIpv4Address",
                    "masterNodePools",
                    "name",
                    "status",
                    "uuid",
                    "version",
                    "workerNodePools",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonClusterKubeConfig:getKarbonClusterKubeConfig": {
            "description": "Describes the SSH config from a Karbon Cluster\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst configbyid = nutanix.getKarbonClusterKubeConfig({\n    karbonClusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n});\nconst configbyname = nutanix.getKarbonClusterKubeConfig({\n    karbonClusterName: \"\u003cYOUR-CLUSTER-NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nconfigbyid = nutanix.get_karbon_cluster_kube_config(karbon_cluster_id=\"\u003cYOUR-CLUSTER-ID\u003e\")\nconfigbyname = nutanix.get_karbon_cluster_kube_config(karbon_cluster_name=\"\u003cYOUR-CLUSTER-NAME\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var configbyid = Nutanix.GetKarbonClusterKubeConfig.Invoke(new()\n    {\n        KarbonClusterId = \"\u003cYOUR-CLUSTER-ID\u003e\",\n    });\n\n    var configbyname = Nutanix.GetKarbonClusterKubeConfig.Invoke(new()\n    {\n        KarbonClusterName = \"\u003cYOUR-CLUSTER-NAME\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetKarbonClusterKubeConfig(ctx, \u0026nutanix.GetKarbonClusterKubeConfigArgs{\n\t\t\tKarbonClusterId: pulumi.StringRef(\"\u003cYOUR-CLUSTER-ID\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetKarbonClusterKubeConfig(ctx, \u0026nutanix.GetKarbonClusterKubeConfigArgs{\n\t\t\tKarbonClusterName: pulumi.StringRef(\"\u003cYOUR-CLUSTER-NAME\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetKarbonClusterKubeConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var configbyid = NutanixFunctions.getKarbonClusterKubeConfig(GetKarbonClusterKubeConfigArgs.builder()\n            .karbonClusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build());\n\n        final var configbyname = NutanixFunctions.getKarbonClusterKubeConfig(GetKarbonClusterKubeConfigArgs.builder()\n            .karbonClusterName(\"\u003cYOUR-CLUSTER-NAME\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  configbyid:\n    fn::invoke:\n      Function: nutanix:getKarbonClusterKubeConfig\n      Arguments:\n        karbonClusterId: \u003cYOUR-CLUSTER-ID\u003e\n  configbyname:\n    fn::invoke:\n      Function: nutanix:getKarbonClusterKubeConfig\n      Arguments:\n        karbonClusterName: \u003cYOUR-CLUSTER-NAME\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonClusterKubeConfig.\n",
                "properties": {
                    "karbonClusterId": {
                        "type": "string",
                        "description": "Represents karbon cluster uuid\n"
                    },
                    "karbonClusterName": {
                        "type": "string",
                        "description": "Represents the name of karbon cluster\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonClusterKubeConfig.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "secret": true
                    },
                    "clusterCaCertificate": {
                        "type": "string"
                    },
                    "clusterUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "clusterCaCertificate",
                    "clusterUrl",
                    "name",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonClusterSsh:getKarbonClusterSsh": {
            "description": "Describes the SSH config from a Karbon Cluster\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst sshbyid = nutanix.getKarbonClusterSsh({\n    karbonClusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n});\nconst sshbyname = nutanix.getKarbonClusterSsh({\n    karbonClusterName: \"\u003cYOUR-CLUSTER-NAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsshbyid = nutanix.get_karbon_cluster_ssh(karbon_cluster_id=\"\u003cYOUR-CLUSTER-ID\u003e\")\nsshbyname = nutanix.get_karbon_cluster_ssh(karbon_cluster_name=\"\u003cYOUR-CLUSTER-NAME\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshbyid = Nutanix.GetKarbonClusterSsh.Invoke(new()\n    {\n        KarbonClusterId = \"\u003cYOUR-CLUSTER-ID\u003e\",\n    });\n\n    var sshbyname = Nutanix.GetKarbonClusterSsh.Invoke(new()\n    {\n        KarbonClusterName = \"\u003cYOUR-CLUSTER-NAME\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetKarbonClusterSsh(ctx, \u0026nutanix.GetKarbonClusterSshArgs{\n\t\t\tKarbonClusterId: pulumi.StringRef(\"\u003cYOUR-CLUSTER-ID\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetKarbonClusterSsh(ctx, \u0026nutanix.GetKarbonClusterSshArgs{\n\t\t\tKarbonClusterName: pulumi.StringRef(\"\u003cYOUR-CLUSTER-NAME\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetKarbonClusterSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sshbyid = NutanixFunctions.getKarbonClusterSsh(GetKarbonClusterSshArgs.builder()\n            .karbonClusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build());\n\n        final var sshbyname = NutanixFunctions.getKarbonClusterSsh(GetKarbonClusterSshArgs.builder()\n            .karbonClusterName(\"\u003cYOUR-CLUSTER-NAME\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sshbyid:\n    fn::invoke:\n      Function: nutanix:getKarbonClusterSsh\n      Arguments:\n        karbonClusterId: \u003cYOUR-CLUSTER-ID\u003e\n  sshbyname:\n    fn::invoke:\n      Function: nutanix:getKarbonClusterSsh\n      Arguments:\n        karbonClusterName: \u003cYOUR-CLUSTER-NAME\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonClusterSsh.\n",
                "properties": {
                    "karbonClusterId": {
                        "type": "string",
                        "description": "Represents karbon cluster uuid\n"
                    },
                    "karbonClusterName": {
                        "type": "string",
                        "description": "Represents the name of karbon cluster\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonClusterSsh.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "Certificate of the user for SSH access.\n"
                    },
                    "expiryTime": {
                        "type": "string",
                        "description": "Timestamp of certificate expiry in the ISO 8601 format (YYYY-MM-DDThh:mm:ss.sssZ).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key of the user for SSH access.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for which credentials are returned.\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificate",
                    "expiryTime",
                    "privateKey",
                    "username",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonClusters:getKarbonClusters": {
            "description": "Describes Karbon Clusters\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getKarbonClusters({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_karbon_clusters()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clusters = Nutanix.GetKarbonClusters.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetKarbonClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = NutanixFunctions.getKarbonClusters();\n\n    }\n}\n```\n```yaml\nvariables:\n  clusters:\n    fn::invoke:\n      Function: nutanix:getKarbonClusters\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getKarbonClusters.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClustersCluster:getKarbonClustersCluster"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonPrivateRegistries:getKarbonPrivateRegistries": {
            "description": "Describes a List of Karbon private registry entry\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var registry = NutanixFunctions.getKarbonPrivateRegistries(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  registry:\n    fn::invoke:\n      Function: nutanix:getKarbonPrivateRegistries\n      Arguments:\n        clusterId: \u003cYOUR-CLUSTER-ID\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getKarbonPrivateRegistries.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "privateRegistries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonPrivateRegistriesPrivateRegistry:getKarbonPrivateRegistriesPrivateRegistry"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "privateRegistries",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonPrivateRegistry:getKarbonPrivateRegistry": {
            "description": "Describes Karbon private registry entry\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetKarbonPrivateRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var registry = NutanixFunctions.getKarbonPrivateRegistry(GetKarbonPrivateRegistryArgs.builder()\n            .clusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  registry:\n    fn::invoke:\n      Function: nutanix:getKarbonPrivateRegistry\n      Arguments:\n        clusterId: \u003cYOUR-CLUSTER-ID\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonPrivateRegistry.\n",
                "properties": {
                    "privateRegistryId": {
                        "type": "string",
                        "description": "Represents karbon private registry uuid\n"
                    },
                    "privateRegistryName": {
                        "type": "string",
                        "description": "Represents the name of karbon private registry\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonPrivateRegistry.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "- Endpoint of the private in format `url:port`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the private registry.\n"
                    },
                    "privateRegistryId": {
                        "type": "string"
                    },
                    "privateRegistryName": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "- UUID of the private registry.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endpoint",
                    "name",
                    "uuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbClone:getNdbClone": {
            "description": "Describes the clone present in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst name = nutanix.getNdbClone({\n    cloneName: \"test-inst-tf-check\",\n    filters: [{\n        detailed: \"true\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nname = nutanix.get_ndb_clone(clone_name=\"test-inst-tf-check\",\n    filters=[nutanix.GetNdbCloneFilterArgs(\n        detailed=\"true\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var name = Nutanix.GetNdbClone.Invoke(new()\n    {\n        CloneName = \"test-inst-tf-check\",\n        Filters = new[]\n        {\n            new Nutanix.Inputs.GetNdbCloneFilterInputArgs\n            {\n                Detailed = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupNdbClone(ctx, \u0026nutanix.LookupNdbCloneArgs{\n\t\t\tCloneName: pulumi.StringRef(\"test-inst-tf-check\"),\n\t\t\tFilters: []nutanix.GetNdbCloneFilter{\n\t\t\t\t{\n\t\t\t\t\tDetailed: pulumi.StringRef(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbCloneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var name = NutanixFunctions.getNdbClone(GetNdbCloneArgs.builder()\n            .cloneName(\"test-inst-tf-check\")\n            .filters(GetNdbCloneFilterArgs.builder()\n                .detailed(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  name:\n    fn::invoke:\n      Function: nutanix:getNdbClone\n      Arguments:\n        cloneName: test-inst-tf-check\n        filters:\n          - detailed: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbClone.\n",
                "properties": {
                    "cloneId": {
                        "type": "string",
                        "description": "Clone id\n"
                    },
                    "cloneName": {
                        "type": "string",
                        "description": "Clone Name\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneFilter:getNdbCloneFilter"
                        },
                        "description": "Fetches info based on filter\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneTag:getNdbCloneTag"
                        },
                        "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbClone.\n",
                "properties": {
                    "clone": {
                        "type": "boolean",
                        "description": "clone or not\n"
                    },
                    "cloneId": {
                        "type": "string"
                    },
                    "cloneName": {
                        "type": "string"
                    },
                    "clustered": {
                        "type": "boolean",
                        "description": "clustered or not\n"
                    },
                    "databaseClusterType": {
                        "type": "string",
                        "description": "database cluster type\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "database name\n"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneDatabaseNode:getNdbCloneDatabaseNode"
                        },
                        "description": "database nodes associated with database instance\n"
                    },
                    "databaseStatus": {
                        "type": "string",
                        "description": "database status\n"
                    },
                    "databases": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "database for a cloned instance\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "date created for clone\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "last modified date for clone\n"
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "dbserver logical cluster\n"
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string",
                        "description": "dbserver logical cluster id\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "cloned description\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneFilter:getNdbCloneFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "cloned id\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneInfo:getNdbCloneInfo"
                        },
                        "description": "cloned info\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneLcmConfig:getNdbCloneLcmConfig"
                        },
                        "description": "LCM Config\n"
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneLinkedDatabase:getNdbCloneLinkedDatabase"
                        },
                        "description": "linked databases within database instance\n"
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metric of clone\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "cloned name\n"
                    },
                    "parentDatabaseId": {
                        "type": "string",
                        "description": "parent database id\n"
                    },
                    "parentSourceDatabaseId": {
                        "type": "string",
                        "description": "parent source database id\n"
                    },
                    "parentTimeMachineId": {
                        "type": "string",
                        "description": "parent time machine id\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneProperty:getNdbCloneProperty"
                        },
                        "description": "properties of clone\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of clone\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneTag:getNdbCloneTag"
                        },
                        "description": "allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "time machine id\n"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbCloneTimeMachine:getNdbCloneTimeMachine"
                        },
                        "description": "Time machine info\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "time zone\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type\n"
                    }
                },
                "type": "object",
                "required": [
                    "clone",
                    "clustered",
                    "databaseClusterType",
                    "databaseName",
                    "databaseNodes",
                    "databaseStatus",
                    "databases",
                    "dateCreated",
                    "dateModified",
                    "dbserverLogicalCluster",
                    "dbserverLogicalClusterId",
                    "description",
                    "id",
                    "infos",
                    "lcmConfigs",
                    "linkedDatabases",
                    "metric",
                    "name",
                    "parentDatabaseId",
                    "parentSourceDatabaseId",
                    "parentTimeMachineId",
                    "properties",
                    "status",
                    "tags",
                    "timeMachines",
                    "timeMachineId",
                    "timeZone",
                    "type"
                ]
            }
        },
        "nutanix:index/getNdbClones:getNdbClones": {
            "description": "List all the clone present in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clones = nutanix.getNdbClones({\n    filters: [{\n        detailed: \"true\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclones = nutanix.get_ndb_clones(filters=[nutanix.GetNdbClonesFilterArgs(\n    detailed=\"true\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clones = Nutanix.GetNdbClones.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Nutanix.Inputs.GetNdbClonesFilterInputArgs\n            {\n                Detailed = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbClones(ctx, \u0026nutanix.GetNdbClonesArgs{\n\t\t\tFilters: []nutanix.GetNdbClonesFilter{\n\t\t\t\t{\n\t\t\t\t\tDetailed: pulumi.StringRef(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbClonesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clones = NutanixFunctions.getNdbClones(GetNdbClonesArgs.builder()\n            .filters(GetNdbClonesFilterArgs.builder()\n                .detailed(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  clones:\n    fn::invoke:\n      Function: nutanix:getNdbClones\n      Arguments:\n        filters:\n          - detailed: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbClones.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbClonesFilter:getNdbClonesFilter"
                        },
                        "description": "Fetches the clone info based on given params\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbClones.\n",
                "properties": {
                    "clones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbClonesClone:getNdbClonesClone"
                        },
                        "description": "List of clones based on filters\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbClonesFilter:getNdbClonesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clones",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbCluster:getNdbCluster": {
            "description": "Describes a cluster in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst c1 = nutanix.getNdbCluster({\n    clusterName: \"\u003cera-cluster-name\u003e\",\n});\nexport const cluster = c1;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nc1 = nutanix.get_ndb_cluster(cluster_name=\"\u003cera-cluster-name\u003e\")\npulumi.export(\"cluster\", c1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var c1 = Nutanix.GetNdbCluster.Invoke(new()\n    {\n        ClusterName = \"\u003cera-cluster-name\u003e\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"cluster\"] = c1,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tc1, err := nutanix.LookupNdbCluster(ctx, \u0026nutanix.LookupNdbClusterArgs{\n\t\t\tClusterName: pulumi.StringRef(\"\u003cera-cluster-name\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"cluster\", c1)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var c1 = NutanixFunctions.getNdbCluster(GetNdbClusterArgs.builder()\n            .clusterName(\"\u003cera-cluster-name\u003e\")\n            .build());\n\n        ctx.export(\"cluster\", c1.applyValue(getNdbClusterResult -\u003e getNdbClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  c1:\n    fn::invoke:\n      Function: nutanix:getNdbCluster\n      Arguments:\n        clusterName: \u003cera-cluster-name\u003e\noutputs:\n  cluster: ${c1}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "ID of cluster\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "and `cluster_id` are mutually exclusive.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbCluster.\n",
                "properties": {
                    "cloudInfo": {
                        "type": "string",
                        "description": "- cloud info\n"
                    },
                    "cloudType": {
                        "type": "string",
                        "description": "- cloud type\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "- creation date\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "- date modified\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- description\n"
                    },
                    "entityCounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbClusterEntityCount:getNdbClusterEntityCount"
                        },
                        "description": "- no. of entities related\n"
                    },
                    "fqdns": {
                        "type": "string",
                        "description": "- fqdn\n"
                    },
                    "healthy": {
                        "type": "boolean",
                        "description": "- if healthy status\n"
                    },
                    "hypervisorType": {
                        "type": "string",
                        "description": "- hypervisor type\n"
                    },
                    "hypervisorVersion": {
                        "type": "string",
                        "description": "- hypervisor version\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "- id of cluster\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- IP address\n"
                    },
                    "managementServerInfo": {
                        "type": "string",
                        "description": "- NA\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- name of cluster\n"
                    },
                    "nxClusterUuid": {
                        "type": "string",
                        "description": "- nutanix cluster uuid\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "- owner UUID\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "- password\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbClusterProperty:getNdbClusterProperty"
                        },
                        "description": "- list of properties\n"
                    },
                    "referenceCount": {
                        "type": "integer",
                        "description": "- NA\n"
                    },
                    "resourceConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbClusterResourceConfig:getNdbClusterResourceConfig"
                        },
                        "description": "- resource related consumption info\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "- current status\n"
                    },
                    "uniqueName": {
                        "type": "string",
                        "description": "- unique name of cluster\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "- username\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "- version\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudInfo",
                    "cloudType",
                    "dateCreated",
                    "dateModified",
                    "description",
                    "entityCounts",
                    "fqdns",
                    "healthy",
                    "hypervisorType",
                    "hypervisorVersion",
                    "id",
                    "ipAddresses",
                    "managementServerInfo",
                    "name",
                    "nxClusterUuid",
                    "ownerId",
                    "password",
                    "properties",
                    "referenceCount",
                    "resourceConfigs",
                    "status",
                    "uniqueName",
                    "username",
                    "version"
                ]
            }
        },
        "nutanix:index/getNdbClusters:getNdbClusters": {
            "description": "List all clusters in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getNdbClusters({});\nexport const clustersOp = clusters;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_ndb_clusters()\npulumi.export(\"clustersOp\", clusters)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clusters = Nutanix.GetNdbClusters.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"clustersOp\"] = clusters,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclusters, err := nutanix.GetNdbClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"clustersOp\", clusters)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = NutanixFunctions.getNdbClusters();\n\n        ctx.export(\"clustersOp\", clusters.applyValue(getNdbClustersResult -\u003e getNdbClustersResult));\n    }\n}\n```\n```yaml\nvariables:\n  clusters:\n    fn::invoke:\n      Function: nutanix:getNdbClusters\n      Arguments: {}\noutputs:\n  clustersOp: ${clusters}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## clusters\n\nThe following attributes are exported for each cluster:\n\n* `id`: - id of cluster\n* `name`: - name of cluster\n* `unique_name`: - unique name of cluster\n* `ip_addresses`: - IP address\n* `fqdns`: - fqdn\n* `nx_cluster_uuid`: - nutanix cluster uuid\n* `description`: - description\n* `cloud_type`: - cloud type\n* `date_created`: - creation date\n* `date_modified`: - date modified\n* `version`: - version\n* `owner_id`: - owner UUID\n* `status`: - current status\n* `hypervisor_type`: - hypervisor type\n* `hypervisor_version`: - hypervisor version\n* `properties`: - list of properties\n* `reference_count`: - NA\n* `username`: - username \n* `password`: - password\n* `cloud_info`: - cloud info\n* `resource_config`: - resource related consumption info\n* `management_server_info`: - NA\n* `entity_counts`: - no. of entities related\n* `healthy`: - if healthy status\n\nSee detailed information in [NDB Clusters](https://www.nutanix.dev/api_references/ndb/#/b00cac8329db1-get-a-list-of-all-clusters).\n",
            "outputs": {
                "description": "A collection of values returned by getNdbClusters.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbClustersCluster:getNdbClustersCluster"
                        },
                        "description": "list of clusters\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbDatabase:getNdbDatabase": {
            "description": "Describes a database instance in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst db1 = nutanix.getNdbDatabase({\n    databaseId: \"\u003csample-id\u003e\",\n});\nexport const db1Output = db1;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ndb1 = nutanix.get_ndb_database(database_id=\"\u003csample-id\u003e\")\npulumi.export(\"db1Output\", db1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var db1 = Nutanix.GetNdbDatabase.Invoke(new()\n    {\n        DatabaseId = \"\u003csample-id\u003e\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"db1Output\"] = db1,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdb1, err := nutanix.LookupNdbDatabase(ctx, \u0026nutanix.LookupNdbDatabaseArgs{\n\t\t\tDatabaseId: \"\u003csample-id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"db1Output\", db1)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var db1 = NutanixFunctions.getNdbDatabase(GetNdbDatabaseArgs.builder()\n            .databaseId(\"\u003csample-id\u003e\")\n            .build());\n\n        ctx.export(\"db1Output\", db1.applyValue(getNdbDatabaseResult -\u003e getNdbDatabaseResult));\n    }\n}\n```\n```yaml\nvariables:\n  db1:\n    fn::invoke:\n      Function: nutanix:getNdbDatabase\n      Arguments:\n        databaseId: \u003csample-id\u003e\noutputs:\n  db1Output: ${db1}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbDatabase.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "ID of database instance\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseTag:getNdbDatabaseTag"
                        },
                        "description": "- tags attached\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNdbDatabase.\n",
                "properties": {
                    "clone": {
                        "type": "boolean",
                        "description": "- if cloned\n"
                    },
                    "clustered": {
                        "type": "boolean",
                        "description": "- if clustered or not\n"
                    },
                    "databaseClusterType": {
                        "type": "string"
                    },
                    "databaseId": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "- database instance name\n"
                    },
                    "databaseNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseDatabaseNode:getNdbDatabaseDatabaseNode"
                        },
                        "description": "- nodes info\n"
                    },
                    "databases": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "- creation date\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "- date modified\n"
                    },
                    "dbserverLogicalCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- NA\n"
                    },
                    "dbserverLogicalClusterId": {
                        "type": "string",
                        "description": "- NA\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- description\n"
                    },
                    "eraCreated": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "- id of database instance\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseInfo:getNdbDatabaseInfo"
                        },
                        "description": "- info regarding disks, vm, storage, etc.\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseLcmConfig:getNdbDatabaseLcmConfig"
                        },
                        "description": "- lcm configuration\n"
                    },
                    "linkedDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseLinkedDatabase:getNdbDatabaseLinkedDatabase"
                        },
                        "description": "- list of databases created in instance with info\n"
                    },
                    "metric": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- metrics\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- name of database instance\n"
                    },
                    "parentDatabaseId": {
                        "type": "string",
                        "description": "- parent database ID\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseProperty:getNdbDatabaseProperty"
                        },
                        "description": "- properties\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "- status of database instance\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseTag:getNdbDatabaseTag"
                        },
                        "description": "- tags attached\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "- time machine ID\n"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabaseTimeMachine:getNdbDatabaseTimeMachine"
                        },
                        "description": "- time machine related config info\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "- timezone\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "- database engine type\n"
                    }
                },
                "type": "object",
                "required": [
                    "clone",
                    "clustered",
                    "databaseClusterType",
                    "databaseId",
                    "databaseName",
                    "databaseNodes",
                    "databases",
                    "dateCreated",
                    "dateModified",
                    "dbserverLogicalCluster",
                    "dbserverLogicalClusterId",
                    "description",
                    "eraCreated",
                    "id",
                    "infos",
                    "lcmConfigs",
                    "linkedDatabases",
                    "metric",
                    "name",
                    "parentDatabaseId",
                    "properties",
                    "status",
                    "tags",
                    "timeMachines",
                    "timeMachineId",
                    "timeZone",
                    "type"
                ]
            }
        },
        "nutanix:index/getNdbDatabases:getNdbDatabases": {
            "description": "List all database instances in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst dbs = nutanix.getNdbDatabases({});\nexport const dbsOutput = dbs;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ndbs = nutanix.get_ndb_databases()\npulumi.export(\"dbsOutput\", dbs)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbs = Nutanix.GetNdbDatabases.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dbsOutput\"] = dbs,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdbs, err := nutanix.GetNdbDatabases(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dbsOutput\", dbs)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dbs = NutanixFunctions.getNdbDatabases();\n\n        ctx.export(\"dbsOutput\", dbs.applyValue(getNdbDatabasesResult -\u003e getNdbDatabasesResult));\n    }\n}\n```\n```yaml\nvariables:\n  dbs:\n    fn::invoke:\n      Function: nutanix:getNdbDatabases\n      Arguments: {}\noutputs:\n  dbsOutput: ${dbs}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## database_instances\n\nThe following attributes are exported for each database_instances:\n\n* `id`: - id of database instance\n* `name`: - name of database instance\n* `description`: - description\n* `date_created`: - creation date\n* `date_modified`: - date modified \n* `properties`: - properties\n* `tags`: - tags attached\n* `clustered`: - if clustered or not\n* `clone`: - if cloned\n* `database_name`: - database instance name\n* `type`: - database engine type\n* `status`: - status of database instance\n* `dbserver_logical_cluster_id`: - NA\n* `time_machine_id`: - time machine ID\n* `time_zone`: - timezone\n* `info`: - info regarding disks, vm, storage, etc.\n* `metric`: - metrics\n* `parent_database_id`: - parent database ID\n* `lcm_config`: - lcm configuration\n* `time_machine`: - time machine related config info\n* `database_nodes`: - nodes info\n* `dbserver_logical_cluster`: - NA\n* `linked_databases`: - list of databases created in instance with info\n\n\nSee detailed information in [List Database Instances](https://www.nutanix.dev/api_references/ndb/#/1e508756bcdcc-get-all-the-databases).\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbDatabases.\n",
                "properties": {
                    "databaseType": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbDatabases.\n",
                "properties": {
                    "databaseInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDatabasesDatabaseInstance:getNdbDatabasesDatabaseInstance"
                        },
                        "description": "- list of database instances\n"
                    },
                    "databaseType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseInstances",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbDbserver:getNdbDbserver": {
            "description": "Describes Database Server VM in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst dbserver = nutanix.getNdbDbserver({\n    ip: \"{{ dbserver_vm_ip }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ndbserver = nutanix.get_ndb_dbserver(ip=\"{{ dbserver_vm_ip }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbserver = Nutanix.GetNdbDbserver.Invoke(new()\n    {\n        Ip = \"{{ dbserver_vm_ip }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbDbserver(ctx, \u0026nutanix.GetNdbDbserverArgs{\n\t\t\tIp: pulumi.StringRef(\"{{ dbserver_vm_ip }}\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbDbserverArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dbserver = NutanixFunctions.getNdbDbserver(GetNdbDbserverArgs.builder()\n            .ip(\"{{ dbserver_vm_ip }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dbserver:\n    fn::invoke:\n      Function: nutanix:getNdbDbserver\n      Arguments:\n        ip: '{{ dbserver_vm_ip }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbDbserver.\n",
                "properties": {
                    "dbserverClusterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of database server vm\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "ip of database server vm\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of database server vm\n"
                    },
                    "nxClusterId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDbserverTag:getNdbDbserverTag"
                        },
                        "description": "tags for db server vm\n"
                    },
                    "vmClusterId": {
                        "type": "string",
                        "description": "vm cluster id of database server\n"
                    },
                    "vmClusterName": {
                        "type": "string",
                        "description": "vm cluster name of database server\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbDbserver.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "access key id of dbserver vm\n"
                    },
                    "accessLevel": {
                        "type": "string",
                        "description": "access level\n"
                    },
                    "associatedTimeMachineIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "associated time machines ids\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "client id\n"
                    },
                    "clustered": {
                        "type": "boolean",
                        "description": "clustered or not\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "database type\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "date created of db server vm\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "date modified of db server vm\n"
                    },
                    "dbserverClusterId": {
                        "type": "string"
                    },
                    "dbserverInvalidEaState": {
                        "type": "boolean",
                        "description": "dbserver invalid ea state\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of db server vm\n"
                    },
                    "eraDriveId": {
                        "type": "string",
                        "description": "era drive id\n"
                    },
                    "eraVersion": {
                        "type": "string",
                        "description": "era version\n"
                    },
                    "fqdns": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ip": {
                        "type": "string"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP addresses of the dbserver vm\n"
                    },
                    "isServerDriven": {
                        "type": "boolean",
                        "description": "is server down or not\n"
                    },
                    "macAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Mac addresses of dbserver vm\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nxClusterId": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDbserverProperty:getNdbDbserverProperty"
                        },
                        "description": "properties of db server vm\n"
                    },
                    "protectionDomainId": {
                        "type": "string",
                        "description": "protection domain id\n"
                    },
                    "queryCount": {
                        "type": "integer",
                        "description": "query count\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Dbserver . Active or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDbserverTag:getNdbDbserverTag"
                        },
                        "description": "tags for db server vm\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of entity. i.e. Dbserver\n"
                    },
                    "validDiagnosticBundleState": {
                        "type": "boolean",
                        "description": "valid diagnostic bundle state\n"
                    },
                    "vmClusterId": {
                        "type": "string"
                    },
                    "vmClusterName": {
                        "type": "string"
                    },
                    "vmClusterUuid": {
                        "type": "string",
                        "description": "clusetr uuid for dbserver vm\n"
                    },
                    "vmInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDbserverVmInfo:getNdbDbserverVmInfo"
                        },
                        "description": "info of dbserver vm\n"
                    },
                    "vmTimezone": {
                        "type": "string",
                        "description": "timezone of dbserver vm\n"
                    },
                    "windowsDbServer": {
                        "type": "boolean",
                        "description": "window db server\n"
                    },
                    "workingDirectory": {
                        "type": "string",
                        "description": "working directory of db server vm\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessKeyId",
                    "accessLevel",
                    "associatedTimeMachineIds",
                    "clientId",
                    "clustered",
                    "databaseType",
                    "dateCreated",
                    "dateModified",
                    "dbserverClusterId",
                    "dbserverInvalidEaState",
                    "description",
                    "eraDriveId",
                    "eraVersion",
                    "fqdns",
                    "id",
                    "ipAddresses",
                    "isServerDriven",
                    "macAddresses",
                    "name",
                    "properties",
                    "protectionDomainId",
                    "queryCount",
                    "status",
                    "tags",
                    "type",
                    "validDiagnosticBundleState",
                    "vmClusterName",
                    "vmClusterUuid",
                    "vmInfos",
                    "vmTimezone",
                    "windowsDbServer",
                    "workingDirectory"
                ]
            }
        },
        "nutanix:index/getNdbDbservers:getNdbDbservers": {
            "description": "List of all Database Server VM in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst dbservers = nutanix.getNdbDbservers({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ndbservers = nutanix.get_ndb_dbservers()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbservers = Nutanix.GetNdbDbservers.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbDbservers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dbservers = NutanixFunctions.getNdbDbservers();\n\n    }\n}\n```\n```yaml\nvariables:\n  dbservers:\n    fn::invoke:\n      Function: nutanix:getNdbDbservers\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getNdbDbservers.\n",
                "properties": {
                    "dbservers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbDbserversDbserver:getNdbDbserversDbserver"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dbservers",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbMaintenanceWindow:getNdbMaintenanceWindow": {
            "description": "Describes a maintenance window in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst window = nutanix.getNdbMaintenanceWindow({\n    id: \"{{ maintenance_window_id }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nwindow = nutanix.get_ndb_maintenance_window(id=\"{{ maintenance_window_id }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var window = Nutanix.GetNdbMaintenanceWindow.Invoke(new()\n    {\n        Id = \"{{ maintenance_window_id }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupNdbMaintenanceWindow(ctx, \u0026nutanix.LookupNdbMaintenanceWindowArgs{\n\t\t\tId: \"{{ maintenance_window_id }}\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbMaintenanceWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var window = NutanixFunctions.getNdbMaintenanceWindow(GetNdbMaintenanceWindowArgs.builder()\n            .id(\"{{ maintenance_window_id }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  window:\n    fn::invoke:\n      Function: nutanix:getNdbMaintenanceWindow\n      Arguments:\n        id: '{{ maintenance_window_id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbMaintenanceWindow.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Maintenance window id.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowTag:getNdbMaintenanceWindowTag"
                        },
                        "description": "tags of maintenance window\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNdbMaintenanceWindow.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "access level\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "created date of maintenance window\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "modified date of maintenance window\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of maintenance window\n"
                    },
                    "entityTaskAssocs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowEntityTaskAssoc:getNdbMaintenanceWindowEntityTaskAssoc"
                        },
                        "description": "entity task association for maintenance window\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of maintenance window\n"
                    },
                    "nextRunTime": {
                        "type": "string",
                        "description": "next run time for maintenance window to trigger\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "owner id of maintenance window\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowProperty:getNdbMaintenanceWindowProperty"
                        },
                        "description": "properties of maintenance window\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowSchedule:getNdbMaintenanceWindowSchedule"
                        },
                        "description": "schedule of maintenance window\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of maintennace window\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowTag:getNdbMaintenanceWindowTag"
                        },
                        "description": "tags of maintenance window\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "timezone\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessLevel",
                    "dateCreated",
                    "dateModified",
                    "description",
                    "entityTaskAssocs",
                    "id",
                    "name",
                    "nextRunTime",
                    "ownerId",
                    "properties",
                    "schedules",
                    "status",
                    "tags",
                    "timezone"
                ]
            }
        },
        "nutanix:index/getNdbMaintenanceWindows:getNdbMaintenanceWindows": {
            "description": "List of maintenance windows in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst windows = nutanix.getNdbMaintenanceWindows({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nwindows = nutanix.get_ndb_maintenance_windows()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var windows = Nutanix.GetNdbMaintenanceWindows.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbMaintenanceWindows(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var windows = NutanixFunctions.getNdbMaintenanceWindows();\n\n    }\n}\n```\n```yaml\nvariables:\n  windows:\n    fn::invoke:\n      Function: nutanix:getNdbMaintenanceWindows\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getNdbMaintenanceWindows.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbMaintenanceWindowsMaintenanceWindow:getNdbMaintenanceWindowsMaintenanceWindow"
                        },
                        "description": "List of maintenance windows\n"
                    }
                },
                "type": "object",
                "required": [
                    "maintenanceWindows",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbNetwork:getNdbNetwork": {
            "description": "Describes a network in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nw = nutanix.getNdbNetwork({\n    id: \"{{ id of network }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnw = nutanix.get_ndb_network(id=\"{{ id of network }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nw = Nutanix.GetNdbNetwork.Invoke(new()\n    {\n        Id = \"{{ id of network }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupNdbNetwork(ctx, \u0026nutanix.LookupNdbNetworkArgs{\n\t\t\tId: pulumi.StringRef(\"{{ id of network }}\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nw = NutanixFunctions.getNdbNetwork(GetNdbNetworkArgs.builder()\n            .id(\"{{ id of network }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  nw:\n    fn::invoke:\n      Function: nutanix:getNdbNetwork\n      Arguments:\n        id: '{{ id of network }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of network\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbNetwork.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "cluster id where network is present\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "network id\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbNetworkIpAddress:getNdbNetworkIpAddress"
                        },
                        "description": "IP addresses of network\n"
                    },
                    "ipPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbNetworkIpPool:getNdbNetworkIpPool"
                        },
                        "description": "IP Pools of network\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "network managed by NDB or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "network name\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbNetworkProperty:getNdbNetworkProperty"
                        },
                        "description": "properties of network\n"
                    },
                    "propertiesMaps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbNetworkPropertiesMap:getNdbNetworkPropertiesMap"
                        },
                        "description": "properties map of network\n"
                    },
                    "stretchedVlanId": {
                        "type": "string",
                        "description": "stretched vlan id\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of network\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "id",
                    "ipAddresses",
                    "ipPools",
                    "managed",
                    "name",
                    "properties",
                    "propertiesMaps",
                    "stretchedVlanId",
                    "type"
                ]
            }
        },
        "nutanix:index/getNdbNetworkAvailableIps:getNdbNetworkAvailableIps": {
            "description": "List of available IPs in Network\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst network = nutanix.getNdbNetworkAvailableIps({\n    profileId: \"{{ network_profile_id }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnetwork = nutanix.get_ndb_network_available_ips(profile_id=\"{{ network_profile_id }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var network = Nutanix.GetNdbNetworkAvailableIps.Invoke(new()\n    {\n        ProfileId = \"{{ network_profile_id }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbNetworkAvailableIps(ctx, \u0026nutanix.GetNdbNetworkAvailableIpsArgs{\n\t\t\tProfileId: \"{{ network_profile_id }}\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbNetworkAvailableIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var network = NutanixFunctions.getNdbNetworkAvailableIps(GetNdbNetworkAvailableIpsArgs.builder()\n            .profileId(\"{{ network_profile_id }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  network:\n    fn::invoke:\n      Function: nutanix:getNdbNetworkAvailableIps\n      Arguments:\n        profileId: '{{ network_profile_id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbNetworkAvailableIps.\n",
                "properties": {
                    "profileId": {
                        "type": "string",
                        "description": "(Required) Network Profile id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "profileId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNdbNetworkAvailableIps.\n",
                "properties": {
                    "availableIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbNetworkAvailableIpsAvailableIp:getNdbNetworkAvailableIpsAvailableIp"
                        },
                        "description": "List of network available ips\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "(Required) Network Profile id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "availableIps",
                    "profileId",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbNetworks:getNdbNetworks": {
            "description": "List of networks in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nw = nutanix.getNdbNetworks({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnw = nutanix.get_ndb_networks()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nw = Nutanix.GetNdbNetworks.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbNetworks(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nw = NutanixFunctions.getNdbNetworks();\n\n    }\n}\n```\n```yaml\nvariables:\n  nw:\n    fn::invoke:\n      Function: nutanix:getNdbNetworks\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getNdbNetworks.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbNetworksNetwork:getNdbNetworksNetwork"
                        },
                        "description": "List of networks in NDB\n"
                    }
                },
                "type": "object",
                "required": [
                    "networks",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbProfile:getNdbProfile": {
            "description": "Describes a profile in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst profile1 = nutanix.getNdbProfile({\n    profileType: \"Network\",\n    profileName: \"TEST_NETWORK_PROFILE\",\n});\nexport const profile = profile1;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprofile1 = nutanix.get_ndb_profile(profile_type=\"Network\",\n    profile_name=\"TEST_NETWORK_PROFILE\")\npulumi.export(\"profile\", profile1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var profile1 = Nutanix.GetNdbProfile.Invoke(new()\n    {\n        ProfileType = \"Network\",\n        ProfileName = \"TEST_NETWORK_PROFILE\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"profile\"] = profile1,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprofile1, err := nutanix.LookupNdbProfile(ctx, \u0026nutanix.LookupNdbProfileArgs{\n\t\t\tProfileType: pulumi.StringRef(\"Network\"),\n\t\t\tProfileName: pulumi.StringRef(\"TEST_NETWORK_PROFILE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"profile\", profile1)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var profile1 = NutanixFunctions.getNdbProfile(GetNdbProfileArgs.builder()\n            .profileType(\"Network\")\n            .profileName(\"TEST_NETWORK_PROFILE\")\n            .build());\n\n        ctx.export(\"profile\", profile1.applyValue(getNdbProfileResult -\u003e getNdbProfileResult));\n    }\n}\n```\n```yaml\nvariables:\n  profile1:\n    fn::invoke:\n      Function: nutanix:getNdbProfile\n      Arguments:\n        profileType: Network\n        profileName: TEST_NETWORK_PROFILE\noutputs:\n  profile: ${profile1}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbProfile.\n",
                "properties": {
                    "engine": {
                        "type": "string",
                        "description": "Database engine. For eg. postgres_database\n"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "Profile ID for query\n"
                    },
                    "profileName": {
                        "type": "string",
                        "description": "Profile Name for query\n"
                    },
                    "profileType": {
                        "type": "string",
                        "description": "Profile type. Types: Software, Compute, Network and Database_Parameter\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbProfile.\n",
                "properties": {
                    "assocDatabases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- associated databases\n"
                    },
                    "assocDbServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- associated DB servers\n"
                    },
                    "clusterAvailabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbProfileClusterAvailability:getNdbProfileClusterAvailability"
                        },
                        "description": "- list of clusters availability\n"
                    },
                    "dbVersion": {
                        "type": "string",
                        "description": "- database version\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- description of profile\n"
                    },
                    "engine": {
                        "type": "string"
                    },
                    "engineType": {
                        "type": "string",
                        "description": "- database engine type\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "- id of profile\n"
                    },
                    "latestVersion": {
                        "type": "string",
                        "description": "- latest version for engine software\n"
                    },
                    "latestVersionId": {
                        "type": "string",
                        "description": "- ID of latest version for engine software\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- profile name\n"
                    },
                    "nxClusterId": {
                        "type": "string",
                        "description": "- era cluster ID\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "- owner name\n"
                    },
                    "profileId": {
                        "type": "string"
                    },
                    "profileName": {
                        "type": "string"
                    },
                    "profileType": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "- status of profile\n"
                    },
                    "systemProfile": {
                        "type": "boolean",
                        "description": "- if system profile or not\n"
                    },
                    "topology": {
                        "type": "string",
                        "description": "- topology\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbProfileVersion:getNdbProfileVersion"
                        },
                        "description": "- profile's different version config\n"
                    }
                },
                "type": "object",
                "required": [
                    "assocDatabases",
                    "assocDbServers",
                    "clusterAvailabilities",
                    "dbVersion",
                    "description",
                    "engineType",
                    "id",
                    "latestVersion",
                    "latestVersionId",
                    "name",
                    "nxClusterId",
                    "owner",
                    "status",
                    "systemProfile",
                    "topology",
                    "type",
                    "versions"
                ]
            }
        },
        "nutanix:index/getNdbProfiles:getNdbProfiles": {
            "description": "List profiles in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst profiles = nutanix.getNdbProfiles({});\nexport const profilesList = profiles;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprofiles = nutanix.get_ndb_profiles()\npulumi.export(\"profilesList\", profiles)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var profiles = Nutanix.GetNdbProfiles.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"profilesList\"] = profiles,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprofiles, err := nutanix.GetNdbProfiles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"profilesList\", profiles)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbProfilesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var profiles = NutanixFunctions.getNdbProfiles();\n\n        ctx.export(\"profilesList\", profiles.applyValue(getNdbProfilesResult -\u003e getNdbProfilesResult));\n    }\n}\n```\n```yaml\nvariables:\n  profiles:\n    fn::invoke:\n      Function: nutanix:getNdbProfiles\n      Arguments: {}\noutputs:\n  profilesList: ${profiles}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## profiles\n\nThe following attributes are exported for each profile:\n\n* `id`: - id of profile\n* `name`: - profile name\n* `description`: - description of profile\n* `status`: - status of profile\n* `owner`: - owner name\n* `engine_type`: - database engine type\n* `db_version`: - database version\n* `topology`: - topology\n* `system_profile`: - if system profile or not\n* `assoc_db_servers`: - associated DB servers\n* `assoc_databases`: - associated databases\n* `latest_version`: - latest version for engine software\n* `latest_version_id`: - ID of latest version for engine software\n* `versions`: - profile's different version config\n* `cluster_availability`: - list of clusters availability\n* `nx_cluster_id`: - era cluster ID\n\nSee detailed information in [Nutanix Database Service Profiles](https://www.nutanix.dev/api_references/ndb/#/74ae456d63b24-get-all-profiles).\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbProfiles.\n",
                "properties": {
                    "engine": {
                        "type": "string",
                        "description": "Database engine. For eg. postgres_database\n"
                    },
                    "profileType": {
                        "type": "string",
                        "description": "profile type. Types: Software, Compute, Network and Database_Parameter\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbProfiles.\n",
                "properties": {
                    "engine": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "profileType": {
                        "type": "string"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbProfilesProfile:getNdbProfilesProfile"
                        },
                        "description": "List of profiles\n"
                    }
                },
                "type": "object",
                "required": [
                    "profiles",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbSla:getNdbSla": {
            "description": "Describes a SLA in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst sla1 = nutanix.getNdbSla({\n    slaName: \"test-sla\",\n});\nexport const sla = sla1;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsla1 = nutanix.get_ndb_sla(sla_name=\"test-sla\")\npulumi.export(\"sla\", sla1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sla1 = Nutanix.GetNdbSla.Invoke(new()\n    {\n        SlaName = \"test-sla\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"sla\"] = sla1,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsla1, err := nutanix.LookupNdbSla(ctx, \u0026nutanix.LookupNdbSlaArgs{\n\t\t\tSlaName: pulumi.StringRef(\"test-sla\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"sla\", sla1)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbSlaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sla1 = NutanixFunctions.getNdbSla(GetNdbSlaArgs.builder()\n            .slaName(\"test-sla\")\n            .build());\n\n        ctx.export(\"sla\", sla1.applyValue(getNdbSlaResult -\u003e getNdbSlaResult));\n    }\n}\n```\n```yaml\nvariables:\n  sla1:\n    fn::invoke:\n      Function: nutanix:getNdbSla\n      Arguments:\n        slaName: test-sla\noutputs:\n  sla: ${sla1}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbSla.\n",
                "properties": {
                    "slaId": {
                        "type": "string",
                        "description": "and `sla_name` are mutually exclusive.\n"
                    },
                    "slaName": {
                        "type": "string",
                        "description": "SLA Name for query\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbSla.\n",
                "properties": {
                    "continuousRetention": {
                        "type": "integer",
                        "description": "- continuous retention of logs limit\n"
                    },
                    "currentActiveFrequency": {
                        "type": "string",
                        "description": "- Current active frequency\n"
                    },
                    "dailyRetention": {
                        "type": "integer",
                        "description": "- Daily snapshots retention limit\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "- creation date\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "- last modified\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- description of sla\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "- id of sla\n"
                    },
                    "monthlyRetention": {
                        "type": "integer",
                        "description": "- Monthly snapshots retention limit\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- sla name\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "- owner ID\n"
                    },
                    "pitrEnabled": {
                        "type": "boolean",
                        "description": "- If point in time recovery enabled\n"
                    },
                    "quartelyRetention": {
                        "type": "integer",
                        "description": "- Daily snapshots retention limit\n"
                    },
                    "referenceCount": {
                        "type": "integer",
                        "description": "- Reference count\n"
                    },
                    "slaId": {
                        "type": "string"
                    },
                    "slaName": {
                        "type": "string"
                    },
                    "systemSla": {
                        "type": "boolean",
                        "description": "- if system sla\n"
                    },
                    "uniqueName": {
                        "type": "string",
                        "description": "- unique name\n"
                    },
                    "weeklyRetention": {
                        "type": "integer",
                        "description": "- weeky snapshots retention limit\n"
                    },
                    "yearlyRetention": {
                        "type": "integer",
                        "description": "- Yearly snapshots retention limit\n"
                    }
                },
                "type": "object",
                "required": [
                    "continuousRetention",
                    "currentActiveFrequency",
                    "dailyRetention",
                    "dateCreated",
                    "dateModified",
                    "description",
                    "id",
                    "monthlyRetention",
                    "name",
                    "ownerId",
                    "pitrEnabled",
                    "quartelyRetention",
                    "referenceCount",
                    "systemSla",
                    "uniqueName",
                    "weeklyRetention",
                    "yearlyRetention"
                ]
            }
        },
        "nutanix:index/getNdbSlas:getNdbSlas": {
            "description": "Lists all SLAs in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst slas = nutanix.getNdbSlas({});\nexport const sla = slas;\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nslas = nutanix.get_ndb_slas()\npulumi.export(\"sla\", slas)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var slas = Nutanix.GetNdbSlas.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"sla\"] = slas,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tslas, err := nutanix.GetNdbSlas(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"sla\", slas)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var slas = NutanixFunctions.getNdbSlas();\n\n        ctx.export(\"sla\", slas.applyValue(getNdbSlasResult -\u003e getNdbSlasResult));\n    }\n}\n```\n```yaml\nvariables:\n  slas:\n    fn::invoke:\n      Function: nutanix:getNdbSlas\n      Arguments: {}\noutputs:\n  sla: ${slas}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getNdbSlas.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "slas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSlasSla:getNdbSlasSla"
                        },
                        "description": "- list of slas\n"
                    }
                },
                "type": "object",
                "required": [
                    "slas",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbSnapshot:getNdbSnapshot": {
            "description": "Describes the snapshot present in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst snaps = nutanix.getNdbSnapshot({\n    filters: [{\n        loadReplicatedChildSnapshots: \"true\",\n    }],\n    snapshotId: \"{{ snapshot_id }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsnaps = nutanix.get_ndb_snapshot(filters=[nutanix.GetNdbSnapshotFilterArgs(\n        load_replicated_child_snapshots=\"true\",\n    )],\n    snapshot_id=\"{{ snapshot_id }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snaps = Nutanix.GetNdbSnapshot.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Nutanix.Inputs.GetNdbSnapshotFilterInputArgs\n            {\n                LoadReplicatedChildSnapshots = \"true\",\n            },\n        },\n        SnapshotId = \"{{ snapshot_id }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbSnapshot(ctx, \u0026nutanix.GetNdbSnapshotArgs{\n\t\t\tFilters: []nutanix.GetNdbSnapshotFilter{\n\t\t\t\t{\n\t\t\t\t\tLoadReplicatedChildSnapshots: pulumi.StringRef(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSnapshotId: \"{{ snapshot_id }}\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snaps = NutanixFunctions.getNdbSnapshot(GetNdbSnapshotArgs.builder()\n            .filters(GetNdbSnapshotFilterArgs.builder()\n                .loadReplicatedChildSnapshots(true)\n                .build())\n            .snapshotId(\"{{ snapshot_id }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  snaps:\n    fn::invoke:\n      Function: nutanix:getNdbSnapshot\n      Arguments:\n        filters:\n          - loadReplicatedChildSnapshots: true\n        snapshotId: '{{ snapshot_id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbSnapshot.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotFilter:getNdbSnapshotFilter"
                        },
                        "description": "Filters will fetch the snapshot details as per input\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "Snapshot ID to be given\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotTag:getNdbSnapshotTag"
                        },
                        "description": "tags\n"
                    }
                },
                "type": "object",
                "required": [
                    "snapshotId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNdbSnapshot.\n",
                "properties": {
                    "appInfoVersion": {
                        "type": "string",
                        "description": "App info version\n"
                    },
                    "applicableTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Applicable types\n"
                    },
                    "databaseNodeId": {
                        "type": "string",
                        "description": "database node id\n"
                    },
                    "databaseSnapshot": {
                        "type": "boolean",
                        "description": "database snapshot\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "created date\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "modified date\n"
                    },
                    "dbserverId": {
                        "type": "string",
                        "description": "dbserver id\n"
                    },
                    "dbserverIp": {
                        "type": "string",
                        "description": "dbserver ip\n"
                    },
                    "dbserverName": {
                        "type": "string",
                        "description": "dbserver name\n"
                    },
                    "dbserverStorageMetadataVersion": {
                        "type": "integer",
                        "description": "dbserver storage metadata version\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of snapshot\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotFilter:getNdbSnapshotFilter"
                        }
                    },
                    "fromTimestamp": {
                        "type": "string",
                        "description": "from timestamp\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "name of snapshot\n"
                    },
                    "lcmConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotLcmConfig:getNdbSnapshotLcmConfig"
                        },
                        "description": "LCM config\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nxClusterId": {
                        "type": "string",
                        "description": "nx cluster id\n"
                    },
                    "parentSnapshot": {
                        "type": "boolean",
                        "description": "parent snapshot\n"
                    },
                    "parentSnapshotId": {
                        "type": "string",
                        "description": "parent snapshot id\n"
                    },
                    "processed": {
                        "type": "boolean",
                        "description": "processed\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotProperty:getNdbSnapshotProperty"
                        },
                        "description": "properties\n"
                    },
                    "protectionDomainId": {
                        "type": "string",
                        "description": "protection domain\n"
                    },
                    "replicatedSnapshots": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "replicated snapshots\n"
                    },
                    "santized": {
                        "type": "boolean"
                    },
                    "santizedFromSnapshotId": {
                        "type": "string"
                    },
                    "santizedSnapshots": {
                        "type": "string"
                    },
                    "snapshotFamily": {
                        "type": "string",
                        "description": "snapshot family\n"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "snapshotSize": {
                        "type": "number",
                        "description": "snapshot size\n"
                    },
                    "snapshotTimestamp": {
                        "type": "string",
                        "description": "snapshot timeStamp\n"
                    },
                    "snapshotTimestampDate": {
                        "type": "integer",
                        "description": "snapshot timestamp date\n"
                    },
                    "snapshotUuid": {
                        "type": "string",
                        "description": "snapshot uuid\n"
                    },
                    "softwareDatabaseSnapshot": {
                        "type": "boolean",
                        "description": "software database snapshot\n"
                    },
                    "softwareSnapshot": {
                        "type": "string",
                        "description": "software snapshot\n"
                    },
                    "softwareSnapshotId": {
                        "type": "string",
                        "description": "software snapshot id\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotTag:getNdbSnapshotTag"
                        },
                        "description": "tags\n"
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "timezone\n"
                    },
                    "toTimestamp": {
                        "type": "string",
                        "description": "to timestamp\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type\n"
                    }
                },
                "type": "object",
                "required": [
                    "appInfoVersion",
                    "applicableTypes",
                    "databaseNodeId",
                    "databaseSnapshot",
                    "dateCreated",
                    "dateModified",
                    "dbserverId",
                    "dbserverIp",
                    "dbserverName",
                    "dbserverStorageMetadataVersion",
                    "description",
                    "fromTimestamp",
                    "id",
                    "lcmConfigs",
                    "name",
                    "nxClusterId",
                    "parentSnapshot",
                    "parentSnapshotId",
                    "processed",
                    "properties",
                    "protectionDomainId",
                    "replicatedSnapshots",
                    "santized",
                    "santizedFromSnapshotId",
                    "santizedSnapshots",
                    "snapshotFamily",
                    "snapshotId",
                    "snapshotSize",
                    "snapshotTimestamp",
                    "snapshotTimestampDate",
                    "snapshotUuid",
                    "softwareDatabaseSnapshot",
                    "softwareSnapshot",
                    "softwareSnapshotId",
                    "status",
                    "tags",
                    "timeMachineId",
                    "timezone",
                    "toTimestamp",
                    "type"
                ]
            }
        },
        "nutanix:index/getNdbSnapshots:getNdbSnapshots": {
            "description": "List all snapshots present in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst snaps = nutanix.getNdbSnapshots({\n    filters: [{\n        timeMachineId: \"{{ time_machine_id }}\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsnaps = nutanix.get_ndb_snapshots(filters=[nutanix.GetNdbSnapshotsFilterArgs(\n    time_machine_id=\"{{ time_machine_id }}\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snaps = Nutanix.GetNdbSnapshots.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Nutanix.Inputs.GetNdbSnapshotsFilterInputArgs\n            {\n                TimeMachineId = \"{{ time_machine_id }}\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbSnapshots(ctx, \u0026nutanix.GetNdbSnapshotsArgs{\n\t\t\tFilters: []nutanix.GetNdbSnapshotsFilter{\n\t\t\t\t{\n\t\t\t\t\tTimeMachineId: pulumi.StringRef(\"{{ time_machine_id }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbSnapshotsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snaps = NutanixFunctions.getNdbSnapshots(GetNdbSnapshotsArgs.builder()\n            .filters(GetNdbSnapshotsFilterArgs.builder()\n                .timeMachineId(\"{{ time_machine_id }}\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  snaps:\n    fn::invoke:\n      Function: nutanix:getNdbSnapshots\n      Arguments:\n        filters:\n          - timeMachineId: '{{ time_machine_id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Attribute Reference \n\n* `snapshots`: List of snapshots\n\n### snapshots\n\n* `id`: name of snapshot\n* `description`: description of snapshot\n* `properties`: properties \n* `owner_id`: owner id \n* `date_created`: created date\n* `date_modified`: modified date\n* `properties`: properties \n* `tags`: tags\n* `snapshot_uuid`: snapshot uuid \n* `nx_cluster_id`: nx cluster id\n* `protection_domain_id`: protection domain\n* `parent_snapshot_id`: parent snapshot id\n* `database_node_id`: database node id\n* `app_info_version`: App info version\n* `status`: status\n* `type`: type\n* `applicable_types`: Applicable types\n* `snapshot_timestamp`: snapshot timeStamp\n* `metadata`: metadata of snapshot \n* `software_snapshot_id`: software snapshot id\n* `software_database_snapshot`: software database snapshot\n* `dbserver_storage_metadata_version`: dbserver storage metadata version\n* `santised_from_snapshot_id`: sanitized  snapshot id\n* `timezone`: timezone\n* `processed`: processed\n* `database_snapshot`: database snapshot\n* `from_timestamp`: from timestamp\n* `to_timestamp`: to timestamp\n* `dbserver_id`: dbserver id\n* `dbserver_name`: dbserver name\n* `dbserver_ip`:dbserver ip\n* `replicated_snapshots`: replicated snapshots\n* `software_snapshot`: software snapshot\n* `santised_snapshots`:santised snapshots\n* `snapshot_family`: snapshot family\n* `snapshot_timestamp_date`: snapshot timestamp date\n* `lcm_config`: LCM config\n* `parent_snapshot`: parent snapshot\n* `snapshot_size`: snapshot size\n\n\nSee detailed information in [NDB Snapshots](https://www.nutanix.dev/api_references/ndb/#/d0b89ff892448-get-list-of-all-snapshots).\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbSnapshots.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotsFilter:getNdbSnapshotsFilter"
                        },
                        "description": "filters help to fetch the snapshots based on input\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbSnapshots.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotsFilter:getNdbSnapshotsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "snapshots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbSnapshotsSnapshot:getNdbSnapshotsSnapshot"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "snapshots",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbTag:getNdbTag": {
            "description": "Describes a tag in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst tag = nutanix.getNdbTag({\n    id: \"{{ tag id }}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntag = nutanix.get_ndb_tag(id=\"{{ tag id }}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tag = Nutanix.GetNdbTag.Invoke(new()\n    {\n        Id = \"{{ tag id }}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupNdbTag(ctx, \u0026nutanix.LookupNdbTagArgs{\n\t\t\tId: pulumi.StringRef(\"{{ tag id }}\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tag = NutanixFunctions.getNdbTag(GetNdbTagArgs.builder()\n            .id(\"{{ tag id }}\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tag:\n    fn::invoke:\n      Function: nutanix:getNdbTag\n      Arguments:\n        id: '{{ tag id }}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbTag.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "tag id. Conflicts with  name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "tag name. Conflicts with id.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbTag.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "date created of the tag\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "modified date of tha tag\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description for the tag\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "entity for the tag to be associated with.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "name for the tag\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "owner id of the tag\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "tag value for entities.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the tag\n"
                    },
                    "values": {
                        "type": "integer",
                        "description": "value for the tag\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateCreated",
                    "dateModified",
                    "description",
                    "entityType",
                    "id",
                    "name",
                    "owner",
                    "required",
                    "status",
                    "values"
                ]
            }
        },
        "nutanix:index/getNdbTags:getNdbTags": {
            "description": "List of tags in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst tags = nutanix.getNdbTags({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntags = nutanix.get_ndb_tags()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tags = Nutanix.GetNdbTags.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbTags(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNdbTagsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tags = NutanixFunctions.getNdbTags();\n\n    }\n}\n```\n```yaml\nvariables:\n  tags:\n    fn::invoke:\n      Function: nutanix:getNdbTags\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbTags.\n",
                "properties": {
                    "entityType": {
                        "type": "string",
                        "description": "entity for the tag to be associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbTags.\n",
                "properties": {
                    "entityType": {
                        "type": "string",
                        "description": "entity for the tag to be associated with.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTagsTag:getNdbTagsTag"
                        },
                        "description": "List of tags present in NDB.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tags",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbTimeMachine:getNdbTimeMachine": {
            "description": "Describes a time machine present in Nutanix Database Service\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNdbTimeMachine.\n",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTimeMachineTag:getNdbTimeMachineTag"
                        },
                        "description": "tags\n"
                    },
                    "timeMachineId": {
                        "type": "string",
                        "description": "time machine id\n"
                    },
                    "timeMachineName": {
                        "type": "string",
                        "description": "time machine name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNdbTimeMachine.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "access level to time machines\n"
                    },
                    "category": {
                        "type": "string",
                        "description": "category of time machine\n"
                    },
                    "clone": {
                        "type": "boolean",
                        "description": "clone time machine or not\n"
                    },
                    "clones": {
                        "type": "string",
                        "description": "clone info\n"
                    },
                    "clustered": {
                        "type": "boolean",
                        "description": "clustered or not\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "database info\n"
                    },
                    "databaseId": {
                        "type": "string",
                        "description": "database id\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "date created\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "date modified\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "time machine description\n"
                    },
                    "eaStatus": {
                        "type": "string",
                        "description": "ea status of time machine\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "time machine id\n"
                    },
                    "internal": {
                        "type": "boolean"
                    },
                    "metric": {
                        "type": "string",
                        "description": "Metric info\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "time machine name\n"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTimeMachineProperty:getNdbTimeMachineProperty"
                        },
                        "description": "properties of time machines\n"
                    },
                    "scheduleId": {
                        "type": "string",
                        "description": "schedule id\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTimeMachineSchedule:getNdbTimeMachineSchedule"
                        },
                        "description": "schedule info\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "scope\n"
                    },
                    "slaId": {
                        "type": "string",
                        "description": "sla id\n"
                    },
                    "slaUpdateInProgress": {
                        "type": "boolean",
                        "description": "sla update in progress\n"
                    },
                    "slaUpdateMetadata": {
                        "type": "string",
                        "description": "sla update metadata\n"
                    },
                    "slas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTimeMachineSla:getNdbTimeMachineSla"
                        },
                        "description": "sla info\n"
                    },
                    "sourceNxClusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "source clusters\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of time machine\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTimeMachineTag:getNdbTimeMachineTag"
                        },
                        "description": "tags\n"
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "timeMachineName": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of time machine\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessLevel",
                    "category",
                    "clone",
                    "clones",
                    "clustered",
                    "database",
                    "databaseId",
                    "dateCreated",
                    "dateModified",
                    "description",
                    "eaStatus",
                    "id",
                    "internal",
                    "metric",
                    "name",
                    "ownerId",
                    "properties",
                    "schedules",
                    "scheduleId",
                    "scope",
                    "slas",
                    "slaId",
                    "slaUpdateInProgress",
                    "slaUpdateMetadata",
                    "sourceNxClusters",
                    "status",
                    "tags",
                    "type"
                ]
            }
        },
        "nutanix:index/getNdbTimeMachines:getNdbTimeMachines": {
            "description": "List all time machines present in Nutanix Database Service\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst tms = nutanix.getNdbTimeMachines({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntms = nutanix.get_ndb_time_machines()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tms = Nutanix.GetNdbTimeMachines.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetNdbTimeMachines(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tms = NutanixFunctions.getNdbTimeMachines();\n\n    }\n}\n```\n```yaml\nvariables:\n  tms:\n    fn::invoke:\n      Function: nutanix:getNdbTimeMachines\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getNdbTimeMachines.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "timeMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTimeMachinesTimeMachine:getNdbTimeMachinesTimeMachine"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "timeMachines",
                    "id"
                ]
            }
        },
        "nutanix:index/getNdbTmsCapability:getNdbTmsCapability": {
            "inputs": {
                "description": "A collection of arguments for invoking getNdbTmsCapability.\n",
                "properties": {
                    "timeMachineId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "timeMachineId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNdbTmsCapability.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTmsCapabilityCapability:getNdbTmsCapabilityCapability"
                        }
                    },
                    "capabilityResetTime": {
                        "type": "string"
                    },
                    "databaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "healWithResetCapability": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastContinuousSnapshotTime": {
                        "type": "string"
                    },
                    "lastContinuousSnapshots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastContinuousSnapshot:getNdbTmsCapabilityLastContinuousSnapshot"
                        }
                    },
                    "lastDbLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNdbTmsCapabilityLastDbLog:getNdbTmsCapabilityLastDbLog"
                        }
                    },
                    "logCatchupStartTime": {
                        "type": "string"
                    },
                    "logTimeInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "nxClusterAssociationType": {
                        "type": "string"
                    },
                    "nxClusterId": {
                        "type": "string"
                    },
                    "outputTimeZone": {
                        "type": "string"
                    },
                    "overallContinuousRangeEndTime": {
                        "type": "string"
                    },
                    "slaId": {
                        "type": "string"
                    },
                    "source": {
                        "type": "boolean"
                    },
                    "timeMachineId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "capabilities",
                    "capabilityResetTime",
                    "databaseIds",
                    "healWithResetCapability",
                    "lastContinuousSnapshots",
                    "lastContinuousSnapshotTime",
                    "lastDbLogs",
                    "logCatchupStartTime",
                    "logTimeInfo",
                    "nxClusterAssociationType",
                    "nxClusterId",
                    "outputTimeZone",
                    "overallContinuousRangeEndTime",
                    "slaId",
                    "source",
                    "timeMachineId",
                    "type",
                    "id"
                ]
            }
        },
        "nutanix:index/getNetworkSecurityRule:getNetworkSecurityRule": {
            "description": "Describes a Network security rule\n\n\u003e NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow\n\n## Example Usage\n\n### Isolate Development VMs From Production VMs And Get Its Information)\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst isolation = new nutanix.NetworkSecurityRule(\"isolation\", {\n    description: \"Isolation Rule Example\",\n    isolationRuleAction: \"APPLY\",\n    isolationRuleFirstEntityFilterKindLists: [\"vm\"],\n    isolationRuleFirstEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Dev\"],\n    }],\n    isolationRuleFirstEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n    isolationRuleSecondEntityFilterKindLists: [\"vm\"],\n    isolationRuleSecondEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Production\"],\n    }],\n    isolationRuleSecondEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n});\nconst test = nutanix.getNetworkSecurityRuleOutput({\n    networkSecurityRuleId: isolation.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nisolation = nutanix.NetworkSecurityRule(\"isolation\",\n    description=\"Isolation Rule Example\",\n    isolation_rule_action=\"APPLY\",\n    isolation_rule_first_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_first_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Dev\"],\n    )],\n    isolation_rule_first_entity_filter_type=\"CATEGORIES_MATCH_ALL\",\n    isolation_rule_second_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_second_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Production\"],\n    )],\n    isolation_rule_second_entity_filter_type=\"CATEGORIES_MATCH_ALL\")\ntest = nutanix.get_network_security_rule_output(network_security_rule_id=isolation.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var isolation = new Nutanix.NetworkSecurityRule(\"isolation\", new()\n    {\n        Description = \"Isolation Rule Example\",\n        IsolationRuleAction = \"APPLY\",\n        IsolationRuleFirstEntityFilterKindLists = new[]\n        {\n            \"vm\",\n        },\n        IsolationRuleFirstEntityFilterParams = new[]\n        {\n            new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs\n            {\n                Name = \"Environment\",\n                Values = new[]\n                {\n                    \"Dev\",\n                },\n            },\n        },\n        IsolationRuleFirstEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n        IsolationRuleSecondEntityFilterKindLists = new[]\n        {\n            \"vm\",\n        },\n        IsolationRuleSecondEntityFilterParams = new[]\n        {\n            new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs\n            {\n                Name = \"Environment\",\n                Values = new[]\n                {\n                    \"Production\",\n                },\n            },\n        },\n        IsolationRuleSecondEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n    });\n\n    var test = Nutanix.GetNetworkSecurityRule.Invoke(new()\n    {\n        NetworkSecurityRuleId = isolation.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tisolation, err := nutanix.NewNetworkSecurityRule(ctx, \"isolation\", \u0026nutanix.NetworkSecurityRuleArgs{\n\t\t\tDescription:         pulumi.String(\"Isolation Rule Example\"),\n\t\t\tIsolationRuleAction: pulumi.String(\"APPLY\"),\n\t\t\tIsolationRuleFirstEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterParams: nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArray{\n\t\t\t\t\u0026nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t\tIsolationRuleSecondEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterParams: nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArray{\n\t\t\t\t\u0026nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Production\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nutanix.LookupNetworkSecurityRuleOutput(ctx, nutanix.GetNetworkSecurityRuleOutputArgs{\n\t\t\tNetworkSecurityRuleId: isolation.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NetworkSecurityRule;\nimport com.pulumi.nutanix.NetworkSecurityRuleArgs;\nimport com.pulumi.nutanix.inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs;\nimport com.pulumi.nutanix.inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetNetworkSecurityRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var isolation = new NetworkSecurityRule(\"isolation\", NetworkSecurityRuleArgs.builder()\n            .description(\"Isolation Rule Example\")\n            .isolationRuleAction(\"APPLY\")\n            .isolationRuleFirstEntityFilterKindLists(\"vm\")\n            .isolationRuleFirstEntityFilterParams(NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Dev\")\n                .build())\n            .isolationRuleFirstEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .isolationRuleSecondEntityFilterKindLists(\"vm\")\n            .isolationRuleSecondEntityFilterParams(NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Production\")\n                .build())\n            .isolationRuleSecondEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .build());\n\n        final var test = NutanixFunctions.getNetworkSecurityRule(GetNetworkSecurityRuleArgs.builder()\n            .networkSecurityRuleId(isolation.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  isolation:\n    type: nutanix:NetworkSecurityRule\n    properties:\n      description: Isolation Rule Example\n      isolationRuleAction: APPLY\n      isolationRuleFirstEntityFilterKindLists:\n        - vm\n      isolationRuleFirstEntityFilterParams:\n        - name: Environment\n          values:\n            - Dev\n      isolationRuleFirstEntityFilterType: CATEGORIES_MATCH_ALL\n      isolationRuleSecondEntityFilterKindLists:\n        - vm\n      isolationRuleSecondEntityFilterParams:\n        - name: Environment\n          values:\n            - Production\n      isolationRuleSecondEntityFilterType: CATEGORIES_MATCH_ALL\nvariables:\n  test:\n    fn::invoke:\n      Function: nutanix:getNetworkSecurityRule\n      Arguments:\n        networkSecurityRuleId: ${isolation.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkSecurityRule.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleCategory:getNetworkSecurityRuleCategory"
                        },
                        "description": "Categories for the network_security_rule.\n"
                    },
                    "networkSecurityRuleId": {
                        "type": "string",
                        "description": "Represents network security rule UUID\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkSecurityRuleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkSecurityRule.\n",
                "properties": {
                    "adRuleAction": {
                        "type": "string",
                        "description": "- These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                    },
                    "adRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowList:getNetworkSecurityRuleAdRuleInboundAllowList"
                        },
                        "description": "The set of categories that matching VMs need to have.\n"
                    },
                    "adRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowList:getNetworkSecurityRuleAdRuleOutboundAllowList"
                        }
                    },
                    "adRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string",
                        "description": "- Default policy for communication within target group.\n"
                    },
                    "adRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- List of kinds associated with this filter.\n"
                    },
                    "adRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleTargetGroupFilterParam:getNetworkSecurityRuleAdRuleTargetGroupFilterParam"
                        },
                        "description": "- A list of category key and list of values.\n"
                    },
                    "adRuleTargetGroupFilterType": {
                        "type": "string",
                        "description": "- The type of the filter being used.\n"
                    },
                    "adRuleTargetGroupPeerSpecificationType": {
                        "type": "string",
                        "description": "- Way to identify the object for which rule is applied.\n"
                    },
                    "allowIpv6Traffic": {
                        "type": "boolean"
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "appRuleAction": {
                        "type": "string",
                        "description": "- These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                    },
                    "appRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowList:getNetworkSecurityRuleAppRuleInboundAllowList"
                        }
                    },
                    "appRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowList:getNetworkSecurityRuleAppRuleOutboundAllowList"
                        }
                    },
                    "appRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string",
                        "description": "- Default policy for communication within target group.\n"
                    },
                    "appRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- List of kinds associated with this filter.\n"
                    },
                    "appRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleTargetGroupFilterParam:getNetworkSecurityRuleAppRuleTargetGroupFilterParam"
                        },
                        "description": "- A list of category key and list of values.\n"
                    },
                    "appRuleTargetGroupFilterType": {
                        "type": "string",
                        "description": "- The type of the filter being used.\n"
                    },
                    "appRuleTargetGroupPeerSpecificationType": {
                        "type": "string",
                        "description": "- Way to identify the object for which rule is applied.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleCategory:getNetworkSecurityRuleCategory"
                        },
                        "description": "Categories for the network_security_rule.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for network_security_rule.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isPolicyHitlogEnabled": {
                        "type": "boolean"
                    },
                    "isolationRuleAction": {
                        "type": "string",
                        "description": "- These rules are used for environmental isolation.\n"
                    },
                    "isolationRuleFirstEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- List of kinds associated with this filter.\n"
                    },
                    "isolationRuleFirstEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam:getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                        },
                        "description": "- A list of category key and list of values.\n"
                    },
                    "isolationRuleFirstEntityFilterType": {
                        "type": "string",
                        "description": "- The type of the filter being used.\n"
                    },
                    "isolationRuleSecondEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- List of kinds associated with this filter.\n"
                    },
                    "isolationRuleSecondEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam:getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                        },
                        "description": "- A list of category key and list of values.\n"
                    },
                    "isolationRuleSecondEntityFilterType": {
                        "type": "string",
                        "description": "- The type of the filter being used.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name.\n"
                    },
                    "networkSecurityRuleId": {
                        "type": "string",
                        "description": "(Required) The ID for the rule you want to retrieve.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a project.\n"
                    },
                    "quarantineRuleAction": {
                        "type": "string",
                        "description": "These rules are used for quarantining suspected VMs. Target group is a required attribute. Empty inbound_allow_list will not allow anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                    },
                    "quarantineRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowList:getNetworkSecurityRuleQuarantineRuleInboundAllowList"
                        }
                    },
                    "quarantineRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowList:getNetworkSecurityRuleQuarantineRuleOutboundAllowList"
                        }
                    },
                    "quarantineRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string",
                        "description": "- Default policy for communication within target group.\n"
                    },
                    "quarantineRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- List of kinds associated with this filter.\n"
                    },
                    "quarantineRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam:getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam"
                        },
                        "description": "- A list of category key and list of values.\n"
                    },
                    "quarantineRuleTargetGroupFilterType": {
                        "type": "string",
                        "description": "- The type of the filter being used.\n"
                    },
                    "quarantineRuleTargetGroupPeerSpecificationType": {
                        "type": "string",
                        "description": "- Way to identify the object for which rule is applied.\n"
                    }
                },
                "type": "object",
                "required": [
                    "adRuleAction",
                    "adRuleInboundAllowLists",
                    "adRuleOutboundAllowLists",
                    "adRuleTargetGroupDefaultInternalPolicy",
                    "adRuleTargetGroupFilterKindLists",
                    "adRuleTargetGroupFilterParams",
                    "adRuleTargetGroupFilterType",
                    "adRuleTargetGroupPeerSpecificationType",
                    "allowIpv6Traffic",
                    "apiVersion",
                    "appRuleAction",
                    "appRuleInboundAllowLists",
                    "appRuleOutboundAllowLists",
                    "appRuleTargetGroupDefaultInternalPolicy",
                    "appRuleTargetGroupFilterKindLists",
                    "appRuleTargetGroupFilterParams",
                    "appRuleTargetGroupFilterType",
                    "appRuleTargetGroupPeerSpecificationType",
                    "categories",
                    "description",
                    "isPolicyHitlogEnabled",
                    "isolationRuleAction",
                    "isolationRuleFirstEntityFilterKindLists",
                    "isolationRuleFirstEntityFilterParams",
                    "isolationRuleFirstEntityFilterType",
                    "isolationRuleSecondEntityFilterKindLists",
                    "isolationRuleSecondEntityFilterParams",
                    "isolationRuleSecondEntityFilterType",
                    "metadata",
                    "name",
                    "networkSecurityRuleId",
                    "ownerReference",
                    "projectReference",
                    "quarantineRuleAction",
                    "quarantineRuleInboundAllowLists",
                    "quarantineRuleOutboundAllowLists",
                    "quarantineRuleTargetGroupDefaultInternalPolicy",
                    "quarantineRuleTargetGroupFilterKindLists",
                    "quarantineRuleTargetGroupFilterParams",
                    "quarantineRuleTargetGroupFilterType",
                    "quarantineRuleTargetGroupPeerSpecificationType",
                    "id"
                ]
            }
        },
        "nutanix:index/getPbr:getPbr": {
            "description": "Provides a datasource to retrieve PBR with pbr_uuid .\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPbr.\n",
                "properties": {
                    "pbrUuid": {
                        "type": "string",
                        "description": "pbr UUID\n"
                    }
                },
                "type": "object",
                "required": [
                    "pbrUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPbr.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The routing policies kind metadata.\n"
                    },
                    "pbrUuid": {
                        "type": "string"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrSpec:getPbrSpec"
                        },
                        "description": "PBR input spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrStatus:getPbrStatus"
                        },
                        "description": "PBR output status\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "metadata",
                    "pbrUuid",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getPbrs:getPbrs": {
            "description": "Provides a datasource to retrieve all the pbrs.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = nutanix.getPbrs({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_pbrs()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nutanix.GetPbrs.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetPbrs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetPbrsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NutanixFunctions.getPbrs();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nutanix:getPbrs\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPbrs.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrsMetadata:getPbrsMetadata"
                        },
                        "description": "- The routing policies kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPbrs.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrsEntity:getPbrsEntity"
                        },
                        "description": "List of PBRs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrsMetadata:getPbrsMetadata"
                        },
                        "description": "- The routing policies kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getPermission:getPermission": {
            "description": "Describe a Nutanix Permission and its values (if it has them).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst byuuid = nutanix.getPermission({\n    permissionId: \"26b81a55-2bca-48c6-9fab-4f82c6bb4284\",\n});\nconst byname = nutanix.getPermission({\n    permissionName: \"Access_Console_Virtual_Machine\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nbyuuid = nutanix.get_permission(permission_id=\"26b81a55-2bca-48c6-9fab-4f82c6bb4284\")\nbyname = nutanix.get_permission(permission_name=\"Access_Console_Virtual_Machine\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byuuid = Nutanix.GetPermission.Invoke(new()\n    {\n        PermissionId = \"26b81a55-2bca-48c6-9fab-4f82c6bb4284\",\n    });\n\n    var byname = Nutanix.GetPermission.Invoke(new()\n    {\n        PermissionName = \"Access_Console_Virtual_Machine\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetPermission(ctx, \u0026nutanix.GetPermissionArgs{\n\t\t\tPermissionId: pulumi.StringRef(\"26b81a55-2bca-48c6-9fab-4f82c6bb4284\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetPermission(ctx, \u0026nutanix.GetPermissionArgs{\n\t\t\tPermissionName: pulumi.StringRef(\"Access_Console_Virtual_Machine\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byuuid = NutanixFunctions.getPermission(GetPermissionArgs.builder()\n            .permissionId(\"26b81a55-2bca-48c6-9fab-4f82c6bb4284\")\n            .build());\n\n        final var byname = NutanixFunctions.getPermission(GetPermissionArgs.builder()\n            .permissionName(\"Access_Console_Virtual_Machine\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byuuid:\n    fn::invoke:\n      Function: nutanix:getPermission\n      Arguments:\n        permissionId: 26b81a55-2bca-48c6-9fab-4f82c6bb4284\n  byname:\n    fn::invoke:\n      Function: nutanix:getPermission\n      Arguments:\n        permissionName: Access_Console_Virtual_Machine\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPermission.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionCategory:getPermissionCategory"
                        },
                        "description": "The categories for this resource.\n"
                    },
                    "permissionId": {
                        "type": "string",
                        "description": "The `id` of the permission.\n"
                    },
                    "permissionName": {
                        "type": "string",
                        "description": "The `name` of the permission.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPermission.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionCategory:getPermissionCategory"
                        },
                        "description": "The categories for this resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the permission.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionField:getPermissionField"
                        },
                        "description": ". The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required) The kind name (Default value: `project`).\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The permission kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name.\n"
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation that is being performed on a given kind.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a user.\n"
                    },
                    "permissionId": {
                        "type": "string"
                    },
                    "permissionName": {
                        "type": "string"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a project.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the permission.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "description",
                    "fields",
                    "kind",
                    "metadata",
                    "name",
                    "operation",
                    "ownerReference",
                    "projectReference",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getPermissions:getPermissions": {
            "description": "Provides a datasource to retrieve all the permissions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst permissions = nutanix.getPermission({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\npermissions = nutanix.get_permission()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var permissions = Nutanix.GetPermission.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetPermission(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var permissions = NutanixFunctions.getPermission();\n\n    }\n}\n```\n```yaml\nvariables:\n  permissions:\n    fn::invoke:\n      Function: nutanix:getPermission\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPermissions.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionsMetadata:getPermissionsMetadata"
                        },
                        "description": "The permission kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPermissions.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionsEntity:getPermissionsEntity"
                        },
                        "description": "List of Permissions\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionsMetadata:getPermissionsMetadata"
                        },
                        "description": "The permission kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getProject:getProject": {
            "description": "Describe a Nutanix Project and its values (if it has them).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst subnet = new nutanix.Subnet(\"subnet\", {\n    clusterUuid: \"\u003cYOUR_CLUSTER_ID\u003e\",\n    description: \"Description of my unit test VLAN\",\n    vlanId: 31,\n    subnetType: \"VLAN\",\n    subnetIp: \"10.250.140.0\",\n    defaultGatewayIp: \"10.250.140.1\",\n    prefixLength: 24,\n    dhcpOptions: {\n        boot_file_name: \"bootfile\",\n        domain_name: \"nutanix\",\n        tftp_server_name: \"10.250.140.200\",\n    },\n    dhcpDomainNameServerLists: [\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcpDomainSearchLists: [\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ],\n});\nconst projectTest = new nutanix.Project(\"projectTest\", {\n    description: \"This is my project\",\n    categories: [{\n        name: \"Environment\",\n        value: \"Staging\",\n    }],\n    resourceDomain: {\n        resources: [{\n            limit: 4,\n            resourceType: \"STORAGE\",\n        }],\n    },\n    defaultSubnetReference: {\n        uuid: subnet.metadata.uuid,\n    },\n    apiVersion: \"3.1\",\n});\nconst test = nutanix.getProjectOutput({\n    projectId: projectTest.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsubnet = nutanix.Subnet(\"subnet\",\n    cluster_uuid=\"\u003cYOUR_CLUSTER_ID\u003e\",\n    description=\"Description of my unit test VLAN\",\n    vlan_id=31,\n    subnet_type=\"VLAN\",\n    subnet_ip=\"10.250.140.0\",\n    default_gateway_ip=\"10.250.140.1\",\n    prefix_length=24,\n    dhcp_options={\n        \"boot_file_name\": \"bootfile\",\n        \"domain_name\": \"nutanix\",\n        \"tftp_server_name\": \"10.250.140.200\",\n    },\n    dhcp_domain_name_server_lists=[\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcp_domain_search_lists=[\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ])\nproject_test = nutanix.Project(\"projectTest\",\n    description=\"This is my project\",\n    categories=[nutanix.ProjectCategoryArgs(\n        name=\"Environment\",\n        value=\"Staging\",\n    )],\n    resource_domain=nutanix.ProjectResourceDomainArgs(\n        resources=[nutanix.ProjectResourceDomainResourceArgs(\n            limit=4,\n            resource_type=\"STORAGE\",\n        )],\n    ),\n    default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(\n        uuid=subnet.metadata[\"uuid\"],\n    ),\n    api_version=\"3.1\")\ntest = nutanix.get_project_output(project_id=project_test.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var subnet = new Nutanix.Subnet(\"subnet\", new()\n    {\n        ClusterUuid = \"\u003cYOUR_CLUSTER_ID\u003e\",\n        Description = \"Description of my unit test VLAN\",\n        VlanId = 31,\n        SubnetType = \"VLAN\",\n        SubnetIp = \"10.250.140.0\",\n        DefaultGatewayIp = \"10.250.140.1\",\n        PrefixLength = 24,\n        DhcpOptions = \n        {\n            { \"boot_file_name\", \"bootfile\" },\n            { \"domain_name\", \"nutanix\" },\n            { \"tftp_server_name\", \"10.250.140.200\" },\n        },\n        DhcpDomainNameServerLists = new[]\n        {\n            \"8.8.8.8\",\n            \"4.2.2.2\",\n        },\n        DhcpDomainSearchLists = new[]\n        {\n            \"terraform.nutanix.com\",\n            \"terraform.unit.test.com\",\n        },\n    });\n\n    var projectTest = new Nutanix.Project(\"projectTest\", new()\n    {\n        Description = \"This is my project\",\n        Categories = new[]\n        {\n            new Nutanix.Inputs.ProjectCategoryArgs\n            {\n                Name = \"Environment\",\n                Value = \"Staging\",\n            },\n        },\n        ResourceDomain = new Nutanix.Inputs.ProjectResourceDomainArgs\n        {\n            Resources = new[]\n            {\n                new Nutanix.Inputs.ProjectResourceDomainResourceArgs\n                {\n                    Limit = 4,\n                    ResourceType = \"STORAGE\",\n                },\n            },\n        },\n        DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs\n        {\n            Uuid = subnet.Metadata.Apply(metadata =\u003e metadata.Uuid),\n        },\n        ApiVersion = \"3.1\",\n    });\n\n    var test = Nutanix.GetProject.Invoke(new()\n    {\n        ProjectId = projectTest.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsubnet, err := nutanix.NewSubnet(ctx, \"subnet\", \u0026nutanix.SubnetArgs{\n\t\t\tClusterUuid:      pulumi.String(\"\u003cYOUR_CLUSTER_ID\u003e\"),\n\t\t\tDescription:      pulumi.String(\"Description of my unit test VLAN\"),\n\t\t\tVlanId:           pulumi.Int(31),\n\t\t\tSubnetType:       pulumi.String(\"VLAN\"),\n\t\t\tSubnetIp:         pulumi.String(\"10.250.140.0\"),\n\t\t\tDefaultGatewayIp: pulumi.String(\"10.250.140.1\"),\n\t\t\tPrefixLength:     pulumi.Int(24),\n\t\t\tDhcpOptions: pulumi.StringMap{\n\t\t\t\t\"boot_file_name\":   pulumi.String(\"bootfile\"),\n\t\t\t\t\"domain_name\":      pulumi.String(\"nutanix\"),\n\t\t\t\t\"tftp_server_name\": pulumi.String(\"10.250.140.200\"),\n\t\t\t},\n\t\t\tDhcpDomainNameServerLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"4.2.2.2\"),\n\t\t\t},\n\t\t\tDhcpDomainSearchLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform.nutanix.com\"),\n\t\t\t\tpulumi.String(\"terraform.unit.test.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprojectTest, err := nutanix.NewProject(ctx, \"projectTest\", \u0026nutanix.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"This is my project\"),\n\t\t\tCategories: nutanix.ProjectCategoryArray{\n\t\t\t\t\u0026nutanix.ProjectCategoryArgs{\n\t\t\t\t\tName:  pulumi.String(\"Environment\"),\n\t\t\t\t\tValue: pulumi.String(\"Staging\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResourceDomain: \u0026nutanix.ProjectResourceDomainArgs{\n\t\t\t\tResources: nutanix.ProjectResourceDomainResourceArray{\n\t\t\t\t\t\u0026nutanix.ProjectResourceDomainResourceArgs{\n\t\t\t\t\t\tLimit:        pulumi.Int(4),\n\t\t\t\t\t\tResourceType: pulumi.String(\"STORAGE\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDefaultSubnetReference: \u0026nutanix.ProjectDefaultSubnetReferenceArgs{\n\t\t\t\tUuid: subnet.Metadata.ApplyT(func(metadata map[string]string) (string, error) {\n\t\t\t\t\treturn metadata.Uuid, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tApiVersion: pulumi.String(\"3.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nutanix.LookupProjectOutput(ctx, nutanix.GetProjectOutputArgs{\n\t\t\tProjectId: projectTest.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.Subnet;\nimport com.pulumi.nutanix.SubnetArgs;\nimport com.pulumi.nutanix.Project;\nimport com.pulumi.nutanix.ProjectArgs;\nimport com.pulumi.nutanix.inputs.ProjectCategoryArgs;\nimport com.pulumi.nutanix.inputs.ProjectResourceDomainArgs;\nimport com.pulumi.nutanix.inputs.ProjectDefaultSubnetReferenceArgs;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var subnet = new Subnet(\"subnet\", SubnetArgs.builder()\n            .clusterUuid(\"\u003cYOUR_CLUSTER_ID\u003e\")\n            .description(\"Description of my unit test VLAN\")\n            .vlanId(31)\n            .subnetType(\"VLAN\")\n            .subnetIp(\"10.250.140.0\")\n            .defaultGatewayIp(\"10.250.140.1\")\n            .prefixLength(24)\n            .dhcpOptions(Map.ofEntries(\n                Map.entry(\"boot_file_name\", \"bootfile\"),\n                Map.entry(\"domain_name\", \"nutanix\"),\n                Map.entry(\"tftp_server_name\", \"10.250.140.200\")\n            ))\n            .dhcpDomainNameServerLists(            \n                \"8.8.8.8\",\n                \"4.2.2.2\")\n            .dhcpDomainSearchLists(            \n                \"terraform.nutanix.com\",\n                \"terraform.unit.test.com\")\n            .build());\n\n        var projectTest = new Project(\"projectTest\", ProjectArgs.builder()\n            .description(\"This is my project\")\n            .categories(ProjectCategoryArgs.builder()\n                .name(\"Environment\")\n                .value(\"Staging\")\n                .build())\n            .resourceDomain(ProjectResourceDomainArgs.builder()\n                .resources(ProjectResourceDomainResourceArgs.builder()\n                    .limit(4)\n                    .resourceType(\"STORAGE\")\n                    .build())\n                .build())\n            .defaultSubnetReference(ProjectDefaultSubnetReferenceArgs.builder()\n                .uuid(subnet.metadata().applyValue(metadata -\u003e metadata.uuid()))\n                .build())\n            .apiVersion(\"3.1\")\n            .build());\n\n        final var test = NutanixFunctions.getProject(GetProjectArgs.builder()\n            .projectId(projectTest.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  subnet:\n    type: nutanix:Subnet\n    properties:\n      clusterUuid: \u003cYOUR_CLUSTER_ID\u003e\n      description: Description of my unit test VLAN\n      vlanId: 31\n      subnetType: VLAN\n      subnetIp: 10.250.140.0\n      defaultGatewayIp: 10.250.140.1\n      prefixLength: 24\n      dhcpOptions:\n        boot_file_name: bootfile\n        domain_name: nutanix\n        tftp_server_name: 10.250.140.200\n      dhcpDomainNameServerLists:\n        - 8.8.8.8\n        - 4.2.2.2\n      dhcpDomainSearchLists:\n        - terraform.nutanix.com\n        - terraform.unit.test.com\n  projectTest:\n    type: nutanix:Project\n    properties:\n      description: This is my project\n      categories:\n        - name: Environment\n          value: Staging\n      resourceDomain:\n        resources:\n          - limit: 4\n            resourceType: STORAGE\n      defaultSubnetReference:\n        uuid: ${subnet.metadata.uuid}\n      apiVersion: '3.1'\nvariables:\n  test:\n    fn::invoke:\n      Function: nutanix:getProject\n      Arguments:\n        projectId: ${projectTest.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectCategory:getProjectCategory"
                        },
                        "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                    },
                    "externalUserGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectExternalUserGroupReferenceList:getProjectExternalUserGroupReferenceList"
                        },
                        "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - The UUID of a user_group\n* `external_user_group_reference_list.#.name` - The name of a user_group\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "- (Required) The `id` of the project.\n"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "subnetReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectSubnetReferenceList:getProjectSubnetReferenceList"
                        },
                        "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - The UUID of a subnet\n* `subnet_reference_list.#.name` - The name of a subnet.\n"
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectUserReferenceList:getProjectUserReferenceList"
                        },
                        "description": "List of Reference of users.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "accountReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectAccountReferenceList:getProjectAccountReferenceList"
                        },
                        "description": "List of accounts associated with the project.\n* `account_reference_list.#.kind` - The kind name. Default value is `account`\n* `account_reference_list.#.uuid` - The UUID of an account.\n* `account_reference_list.#.name` - The name of an account.\n"
                    },
                    "acps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectAcp:getProjectAcp"
                        }
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectCategory:getProjectCategory"
                        },
                        "description": "- (Optional) The category values represented as a dictionary of key \u003e list of values.\n"
                    },
                    "clusterReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectClusterReferenceList:getProjectClusterReferenceList"
                        },
                        "description": "(Optional/Computed) List of clusters associated with the project..\n* `cluster_reference_list.#.kind` - (Optional) The kind name. Default value is `cluster`\n* `cluster_reference_list.#.uuid` - (Required) The UUID of a cluster\n* `cluster_reference_list.#.name` - (Optional/Computed) The name of a cluster.\n"
                    },
                    "defaultEnvironmentReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectDefaultEnvironmentReference:getProjectDefaultEnvironmentReference"
                        },
                        "description": "(Optional/Computed) Reference to a environment.\n"
                    },
                    "defaultSubnetReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Reference to a subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of ACP\n"
                    },
                    "environmentReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectEnvironmentReferenceList:getProjectEnvironmentReferenceList"
                        },
                        "description": "List of environments associated with the project.\n* `environment_reference_list.#.kind` - The kind name. Default value is `environment`\n* `environment_reference_list.#.uuid` - The UUID of an environment.\n* `environment_reference_list.#.name` - The name of an environment.\n"
                    },
                    "externalNetworkLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectExternalNetworkList:getProjectExternalNetworkList"
                        },
                        "description": "List of external networks associated with the project.\n* `external_network_list.#.uuid` - The UUID of a network.\n* `external_network_list.#.name` - The name of a network.\n"
                    },
                    "externalUserGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectExternalUserGroupReferenceList:getProjectExternalUserGroupReferenceList"
                        },
                        "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - The UUID of a user_group\n* `external_user_group_reference_list.#.name` - The name of a user_group\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "the name.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "resourceDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectResourceDomain:getProjectResourceDomain"
                        },
                        "description": "The status for a resource domain (limits and values)\n"
                    },
                    "state": {
                        "type": "string"
                    },
                    "subnetReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectSubnetReferenceList:getProjectSubnetReferenceList"
                        },
                        "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - The UUID of a subnet\n* `subnet_reference_list.#.name` - The name of a subnet.\n"
                    },
                    "tunnelReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectTunnelReferenceList:getProjectTunnelReferenceList"
                        },
                        "description": "(Optional/Computed) List of tunnels associated with the project.\n* `tunnel_reference_list.#.kind` - (Optional) The kind name. Default value is `tunnel`\n* `tunnel_reference_list.#.uuid` - (Required) The UUID of a tunnel\n* `tunnel_reference_list.#.name` - (Optional/Computed) The name of a tunnel.\n"
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectUserReferenceList:getProjectUserReferenceList"
                        },
                        "description": "List of Reference of users.\n"
                    },
                    "vpcReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectVpcReferenceList:getProjectVpcReferenceList"
                        },
                        "description": "(Optional/Computed) List of VPCs associated with the project..\n* `vpc_reference_list.#.kind` - (Optional) The kind name. Default value is `vpc`\n* `vpc_reference_list.#.uuid` - (Required) The UUID of a vpc\n* `vpc_reference_list.#.name` - (Optional/Computed) The name of a vpc.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountReferenceLists",
                    "acps",
                    "apiVersion",
                    "categories",
                    "clusterReferenceLists",
                    "defaultEnvironmentReferences",
                    "defaultSubnetReference",
                    "description",
                    "environmentReferenceLists",
                    "externalNetworkLists",
                    "externalUserGroupReferenceLists",
                    "isDefault",
                    "metadata",
                    "name",
                    "ownerReference",
                    "projectReference",
                    "resourceDomains",
                    "state",
                    "subnetReferenceLists",
                    "tunnelReferenceLists",
                    "userReferenceLists",
                    "vpcReferenceLists",
                    "id"
                ]
            }
        },
        "nutanix:index/getProjects:getProjects": {
            "description": "Describes Projects\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst projects = nutanix.getProjects({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprojects = nutanix.get_projects()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projects = Nutanix.GetProjects.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetProjects(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projects = NutanixFunctions.getProjects();\n\n    }\n}\n```\n```yaml\nvariables:\n  projects:\n    fn::invoke:\n      Function: nutanix:getProjects\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectsEntity:getProjectsEntity"
                        },
                        "description": "List of Projects\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getProtectionRule:getProtectionRule": {
            "description": "Describe a Nutanix Protection Rule and its values (if it has them).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst protectionRuleTest = new nutanix.ProtectionRule(\"protectionRuleTest\", {\n    description: \"test\",\n    orderedAvailabilityZoneLists: [{\n        availabilityZoneUrl: \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    }],\n    availabilityZoneConnectivityLists: [{\n        snapshotScheduleLists: [{\n            recoveryPointObjectiveSecs: 3600,\n            snapshotType: \"CRASH_CONSISTENT\",\n            localSnapshotRetentionPolicy: {\n                numSnapshots: 1,\n            },\n        }],\n    }],\n    categoryFilter: {\n        params: [{\n            name: \"Environment\",\n            values: [\"Dev\"],\n        }],\n    },\n});\nconst test = nutanix.getProtectionRuleOutput({\n    protectionRuleId: protectionRuleTest.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprotection_rule_test = nutanix.ProtectionRule(\"protectionRuleTest\",\n    description=\"test\",\n    ordered_availability_zone_lists=[nutanix.ProtectionRuleOrderedAvailabilityZoneListArgs(\n        availability_zone_url=\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    )],\n    availability_zone_connectivity_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListArgs(\n        snapshot_schedule_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs(\n            recovery_point_objective_secs=3600,\n            snapshot_type=\"CRASH_CONSISTENT\",\n            local_snapshot_retention_policy=nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs(\n                num_snapshots=1,\n            ),\n        )],\n    )],\n    category_filter=nutanix.ProtectionRuleCategoryFilterArgs(\n        params=[nutanix.ProtectionRuleCategoryFilterParamArgs(\n            name=\"Environment\",\n            values=[\"Dev\"],\n        )],\n    ))\ntest = nutanix.get_protection_rule_output(protection_rule_id=protection_rule_test.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var protectionRuleTest = new Nutanix.ProtectionRule(\"protectionRuleTest\", new()\n    {\n        Description = \"test\",\n        OrderedAvailabilityZoneLists = new[]\n        {\n            new Nutanix.Inputs.ProtectionRuleOrderedAvailabilityZoneListArgs\n            {\n                AvailabilityZoneUrl = \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n            },\n        },\n        AvailabilityZoneConnectivityLists = new[]\n        {\n            new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs\n            {\n                SnapshotScheduleLists = new[]\n                {\n                    new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs\n                    {\n                        RecoveryPointObjectiveSecs = 3600,\n                        SnapshotType = \"CRASH_CONSISTENT\",\n                        LocalSnapshotRetentionPolicy = new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs\n                        {\n                            NumSnapshots = 1,\n                        },\n                    },\n                },\n            },\n        },\n        CategoryFilter = new Nutanix.Inputs.ProtectionRuleCategoryFilterArgs\n        {\n            Params = new[]\n            {\n                new Nutanix.Inputs.ProtectionRuleCategoryFilterParamArgs\n                {\n                    Name = \"Environment\",\n                    Values = new[]\n                    {\n                        \"Dev\",\n                    },\n                },\n            },\n        },\n    });\n\n    var test = Nutanix.GetProtectionRule.Invoke(new()\n    {\n        ProtectionRuleId = protectionRuleTest.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprotectionRuleTest, err := nutanix.NewProtectionRule(ctx, \"protectionRuleTest\", \u0026nutanix.ProtectionRuleArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tOrderedAvailabilityZoneLists: nutanix.ProtectionRuleOrderedAvailabilityZoneListArray{\n\t\t\t\t\u0026nutanix.ProtectionRuleOrderedAvailabilityZoneListArgs{\n\t\t\t\t\tAvailabilityZoneUrl: pulumi.String(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAvailabilityZoneConnectivityLists: nutanix.ProtectionRuleAvailabilityZoneConnectivityListArray{\n\t\t\t\t\u0026nutanix.ProtectionRuleAvailabilityZoneConnectivityListArgs{\n\t\t\t\t\tSnapshotScheduleLists: nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArray{\n\t\t\t\t\t\t\u0026nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs{\n\t\t\t\t\t\t\tRecoveryPointObjectiveSecs: pulumi.Int(3600),\n\t\t\t\t\t\t\tSnapshotType:               pulumi.String(\"CRASH_CONSISTENT\"),\n\t\t\t\t\t\t\tLocalSnapshotRetentionPolicy: \u0026nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs{\n\t\t\t\t\t\t\t\tNumSnapshots: pulumi.Int(1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCategoryFilter: \u0026nutanix.ProtectionRuleCategoryFilterArgs{\n\t\t\t\tParams: nutanix.ProtectionRuleCategoryFilterParamArray{\n\t\t\t\t\t\u0026nutanix.ProtectionRuleCategoryFilterParamArgs{\n\t\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nutanix.LookupProtectionRuleOutput(ctx, nutanix.GetProtectionRuleOutputArgs{\n\t\t\tProtectionRuleId: protectionRuleTest.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.ProtectionRule;\nimport com.pulumi.nutanix.ProtectionRuleArgs;\nimport com.pulumi.nutanix.inputs.ProtectionRuleOrderedAvailabilityZoneListArgs;\nimport com.pulumi.nutanix.inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs;\nimport com.pulumi.nutanix.inputs.ProtectionRuleCategoryFilterArgs;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetProtectionRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var protectionRuleTest = new ProtectionRule(\"protectionRuleTest\", ProtectionRuleArgs.builder()\n            .description(\"test\")\n            .orderedAvailabilityZoneLists(ProtectionRuleOrderedAvailabilityZoneListArgs.builder()\n                .availabilityZoneUrl(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .build())\n            .availabilityZoneConnectivityLists(ProtectionRuleAvailabilityZoneConnectivityListArgs.builder()\n                .snapshotScheduleLists(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs.builder()\n                    .recoveryPointObjectiveSecs(3600)\n                    .snapshotType(\"CRASH_CONSISTENT\")\n                    .localSnapshotRetentionPolicy(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs.builder()\n                        .numSnapshots(1)\n                        .build())\n                    .build())\n                .build())\n            .categoryFilter(ProtectionRuleCategoryFilterArgs.builder()\n                .params(ProtectionRuleCategoryFilterParamArgs.builder()\n                    .name(\"Environment\")\n                    .values(\"Dev\")\n                    .build())\n                .build())\n            .build());\n\n        final var test = NutanixFunctions.getProtectionRule(GetProtectionRuleArgs.builder()\n            .protectionRuleId(protectionRuleTest.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  protectionRuleTest:\n    type: nutanix:ProtectionRule\n    properties:\n      description: test\n      orderedAvailabilityZoneLists:\n        - availabilityZoneUrl: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n      availabilityZoneConnectivityLists:\n        - snapshotScheduleLists:\n            - recoveryPointObjectiveSecs: 3600\n              snapshotType: CRASH_CONSISTENT\n              localSnapshotRetentionPolicy:\n                numSnapshots: 1\n      categoryFilter:\n        params:\n          - name: Environment\n            values:\n              - Dev\nvariables:\n  test:\n    fn::invoke:\n      Function: nutanix:getProtectionRule\n      Arguments:\n        protectionRuleId: ${protectionRuleTest.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProtectionRule.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleCategory:getProtectionRuleCategory"
                        }
                    },
                    "protectionRuleId": {
                        "type": "string",
                        "description": "- (Required) The `id` of the protection rule.\n"
                    },
                    "protectionRuleName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProtectionRule.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "availabilityZoneConnectivityLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityList:getProtectionRuleAvailabilityZoneConnectivityList"
                        },
                        "description": "(Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleCategory:getProtectionRuleCategory"
                        }
                    },
                    "categoryFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleCategoryFilter:getProtectionRuleCategoryFilter"
                        },
                        "description": "(Optional/Computed)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for protection rule.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "(Optional) the name.\n"
                    },
                    "orderedAvailabilityZoneLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleOrderedAvailabilityZoneList:getProtectionRuleOrderedAvailabilityZoneList"
                        },
                        "description": "(Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.\n* `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.\n* `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.\n"
                    },
                    "ownerReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleOwnerReference:getProtectionRuleOwnerReference"
                        }
                    },
                    "projectReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleProjectReference:getProtectionRuleProjectReference"
                        }
                    },
                    "protectionRuleId": {
                        "type": "string"
                    },
                    "protectionRuleName": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availabilityZoneConnectivityLists",
                    "categories",
                    "categoryFilters",
                    "description",
                    "metadata",
                    "name",
                    "orderedAvailabilityZoneLists",
                    "ownerReferences",
                    "projectReferences",
                    "startTime",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getProtectionRules:getProtectionRules": {
            "description": "Describes Protection Rules\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst protectionRules = nutanix.getProtectionRules({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprotection_rules = nutanix.get_protection_rules()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var protectionRules = Nutanix.GetProtectionRules.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetProtectionRules(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var protectionRules = NutanixFunctions.getProtectionRules();\n\n    }\n}\n```\n```yaml\nvariables:\n  protectionRules:\n    fn::invoke:\n      Function: nutanix:getProtectionRules\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getProtectionRules.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRulesEntity:getProtectionRulesEntity"
                        },
                        "description": "List of Protection Rules\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getRecoveryPlan:getRecoveryPlan": {
            "description": "Describe a Nutanix Recovery Plan and its values (if it has them).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.RecoveryPlan;\nimport com.pulumi.nutanix.RecoveryPlanArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanParametersArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanStageListArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanStageListStageWorkArgs;\nimport com.pulumi.nutanix.inputs.RecoveryPlanStageListStageWorkRecoverEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var recoveryPlanTest = new RecoveryPlan(\"recoveryPlanTest\", RecoveryPlanArgs.builder()\n            .description(\"%s\")\n            .parameters()\n            .stageLists(RecoveryPlanStageListArgs.builder()\n                .delayTimeSecs(0)\n                .stageUuid(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .stageWork(RecoveryPlanStageListStageWorkArgs.builder()\n                    .recoverEntities(RecoveryPlanStageListStageWorkRecoverEntitiesArgs.builder()\n                        .entityInfoList(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  recoveryPlanTest:\n    type: nutanix:RecoveryPlan\n    properties:\n      description: '%s'\n      parameters: {}\n      stageLists:\n        - delayTimeSecs: 0\n          stageUuid: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n          stageWork:\n            recoverEntities:\n              entityInfoList:\n                - categories:\n                    - name: Environment\n                      value: Dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRecoveryPlan.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanCategory:getRecoveryPlanCategory"
                        }
                    },
                    "recoveryPlanId": {
                        "type": "string",
                        "description": "- (Required) The `id` of the Recovery Plan.\n"
                    },
                    "recoveryPlanName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRecoveryPlan.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanCategory:getRecoveryPlanCategory"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for Recovery Plan.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "(Optional) the name.\n"
                    },
                    "ownerReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanOwnerReference:getRecoveryPlanOwnerReference"
                        }
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanParameter:getRecoveryPlanParameter"
                        },
                        "description": "(Required) Parameters for the Recovery Plan.\n"
                    },
                    "projectReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanProjectReference:getRecoveryPlanProjectReference"
                        }
                    },
                    "recoveryPlanId": {
                        "type": "string"
                    },
                    "recoveryPlanName": {
                        "type": "string"
                    },
                    "stageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanStageList:getRecoveryPlanStageList"
                        },
                        "description": "(Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.\n"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "description",
                    "metadata",
                    "name",
                    "ownerReferences",
                    "parameters",
                    "projectReferences",
                    "stageLists",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getRecoveryPlans:getRecoveryPlans": {
            "description": "Describes Recovery Plans\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst recoveryPlans = nutanix.getRecoveryPlans({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nrecovery_plans = nutanix.get_recovery_plans()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var recoveryPlans = Nutanix.GetRecoveryPlans.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetRecoveryPlans(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var recoveryPlans = NutanixFunctions.getRecoveryPlans();\n\n    }\n}\n```\n```yaml\nvariables:\n  recoveryPlans:\n    fn::invoke:\n      Function: nutanix:getRecoveryPlans\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getRecoveryPlans.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlansEntity:getRecoveryPlansEntity"
                        },
                        "description": "List of Recovery Plans\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getRole:getRole": {
            "description": "Describes a Role.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_role\" \"test\" {\n\tname        = \"NAME\"\n\tdescription = \"DESCRIPTION\"\n\tpermission_reference_list {\n\t\tkind = \"permission\"\n\t\tuuid = \"ID OF PERMISSION\"\n\t}\n}\ndata \"nutanix_role\" \"test\" {\n\trole_id = nutanix_role.test.id\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRoleCategory:getRoleCategory"
                        },
                        "description": "- Categories for the Role.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "- (Optional) The UUID of a Role.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "- (Optional) The name of a Role.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRoleCategory:getRoleCategory"
                        },
                        "description": "- Categories for the Role.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "- The description of the Role.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The role kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name(Optional).\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "permissionReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolePermissionReferenceList:getRolePermissionReferenceList"
                        },
                        "description": "- (Required) List of permission references.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a project.\n"
                    },
                    "roleId": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the role.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "description",
                    "metadata",
                    "name",
                    "ownerReference",
                    "permissionReferenceLists",
                    "projectReference",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getRoles:getRoles": {
            "description": "Describes a list of roles.\n\n## Example Usage\n\n``` hcl\ndata \"nutanix_roles\" \"test\" {}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoles.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolesMetadata:getRolesMetadata"
                        },
                        "description": "- The role kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolesEntity:getRolesEntity"
                        },
                        "description": "List of Roles\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolesMetadata:getRolesMetadata"
                        },
                        "description": "- The role kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getServiceGroup:getServiceGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceGroup.\n",
                "properties": {
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isSystemDefined": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "serviceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupServiceList:getServiceGroupServiceList"
                        }
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "isSystemDefined",
                    "name",
                    "serviceLists",
                    "uuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getServiceGroups:getServiceGroups": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceGroups.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupsMetadata:getServiceGroupsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceGroups.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupsEntity:getServiceGroupsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupsMetadata:getServiceGroupsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getStaticRoutes:getStaticRoutes": {
            "description": "Provides a datasource to retrieve static routes within VPCs given vpc_uuid.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStaticRoutes.\n",
                "properties": {
                    "vpcName": {
                        "type": "string"
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "description": "vpc UUID\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStaticRoutes.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "API version\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The vpc_route_table kind metadata\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getStaticRoutesSpec:getStaticRoutesSpec"
                        },
                        "description": "An intentful representation of a vpc_route_table spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getStaticRoutesStatus:getStaticRoutesStatus"
                        },
                        "description": "An intentful representation of a vpc_route_table status\n"
                    },
                    "vpcName": {
                        "type": "string"
                    },
                    "vpcReferenceUuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "metadata",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getSubnet:getSubnet": {
            "description": "Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSubnet.\n",
                "properties": {
                    "additionalFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetAdditionalFilter:getSubnetAdditionalFilter"
                        },
                        "description": "- Additional filters to narrow down list of subnets.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetCategory:getSubnetCategory"
                        },
                        "description": "The API Version.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "- (Optional) The ID for the subnet.\n"
                    },
                    "subnetName": {
                        "type": "string",
                        "description": "- (Optional) The name for the subnet\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSubnet.\n",
                "properties": {
                    "additionalFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetAdditionalFilter:getSubnetAdditionalFilter"
                        },
                        "description": "- Additional filters to narrow down list of subnets.\n"
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a availability_zone.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetCategory:getSubnetCategory"
                        },
                        "description": "The API Version.\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The name of a cluster.\n"
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "defaultGatewayIp": {
                        "type": "string",
                        "description": "Default gateway IP address.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for subnet.\n"
                    },
                    "dhcpDomainNameServerLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dhcpDomainSearchLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "DHCP domain search list for a subnet.\n"
                    },
                    "dhcpOptions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Spec for defining DHCP options.\n"
                    },
                    "dhcpServerAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Host address.\n"
                    },
                    "dhcpServerAddressPort": {
                        "type": "integer",
                        "description": "Port Number.\n"
                    },
                    "enableNat": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipConfigPoolListRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isExternal": {
                        "type": "boolean"
                    },
                    "messageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetMessageList:getSubnetMessageList"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The subnet kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name(Optional).\n"
                    },
                    "networkFunctionChainReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a network_function_chain.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a user.\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "- (Optional). IP prefix length of the Subnet.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The reference to a project.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the subnet.\n"
                    },
                    "subnetId": {
                        "type": "string"
                    },
                    "subnetIp": {
                        "type": "string",
                        "description": "Subnet IP address.\n"
                    },
                    "subnetName": {
                        "type": "string"
                    },
                    "subnetType": {
                        "type": "string",
                        "description": "The type of the subnet.\n"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "VLAN assigned to the subnet.\n"
                    },
                    "vpcReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "vswitchName": {
                        "type": "string",
                        "description": "The name of the vswitch.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availabilityZoneReference",
                    "categories",
                    "clusterName",
                    "clusterUuid",
                    "defaultGatewayIp",
                    "description",
                    "dhcpDomainNameServerLists",
                    "dhcpDomainSearchLists",
                    "dhcpOptions",
                    "dhcpServerAddress",
                    "dhcpServerAddressPort",
                    "enableNat",
                    "ipConfigPoolListRanges",
                    "isExternal",
                    "messageLists",
                    "metadata",
                    "name",
                    "networkFunctionChainReference",
                    "ownerReference",
                    "prefixLength",
                    "projectReference",
                    "state",
                    "subnetIp",
                    "subnetType",
                    "vlanId",
                    "vpcReference",
                    "vswitchName",
                    "id"
                ]
            }
        },
        "nutanix:index/getSubnets:getSubnets": {
            "description": "Describes a list of subnets\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst subnets = nutanix.getSubnets({});\nconst test = nutanix.getSubnets({\n    metadatas: [{\n        filter: \"name==vlan0_test_2\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsubnets = nutanix.get_subnets()\ntest = nutanix.get_subnets(metadatas=[nutanix.GetSubnetsMetadataArgs(\n    filter=\"name==vlan0_test_2\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var subnets = Nutanix.GetSubnets.Invoke();\n\n    var test = Nutanix.GetSubnets.Invoke(new()\n    {\n        Metadatas = new[]\n        {\n            new Nutanix.Inputs.GetSubnetsMetadataInputArgs\n            {\n                Filter = \"name==vlan0_test_2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetSubnets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetSubnets(ctx, \u0026nutanix.GetSubnetsArgs{\n\t\t\tMetadatas: []nutanix.GetSubnetsMetadata{\n\t\t\t\t{\n\t\t\t\t\tFilter: \"name==vlan0_test_2\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetSubnetsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var subnets = NutanixFunctions.getSubnets();\n\n        final var test = NutanixFunctions.getSubnets(GetSubnetsArgs.builder()\n            .metadatas(GetSubnetsMetadataArgs.builder()\n                .filter(\"name==vlan0_test_2\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  subnets:\n    fn::invoke:\n      Function: nutanix:getSubnets\n      Arguments: {}\n  test:\n    fn::invoke:\n      Function: nutanix:getSubnets\n      Arguments:\n        metadatas:\n          - filter: name==vlan0_test_2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSubnets.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetsMetadata:getSubnetsMetadata"
                        },
                        "description": "The subnet kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSubnets.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetsEntity:getSubnetsEntity"
                        },
                        "description": "List of Subnets\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetsMetadata:getSubnetsMetadata"
                        },
                        "description": "The subnet kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getUser:getUser": {
            "description": "Provides a datasource to retrieve a user based on the input parameters.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_user\" \"user\" {\n\tdirectory_service_user {\n\t\tuser_principal_name = \"test-user@ntnxlab.local\"\n\t\tdirectory_service_reference {\n\t\tuuid = \"\u003cdirectory-service-uuid\u003e\"\n\t\t}\n\t}\n}\n\n//Retrieve by UUID\ndata \"nutanix_user\" \"user\" {\n\tuuid = nutanix_user.user.id\n}\n\n//Retrieve by Name\ndata \"nutanix_user\" \"userbyname\" {\n\tname = nutanix_user.user.name\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserCategory:getUserCategory"
                        },
                        "description": "- (Optional) Categories for the Access Control Policy.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a project.\n"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "accessControlPolicyReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserAccessControlPolicyReferenceList:getUserAccessControlPolicyReferenceList"
                        },
                        "description": "- List of ACP references. See #reference for more details.\n"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserCategory:getUserCategory"
                        },
                        "description": "- (Optional) Categories for the Access Control Policy.\n"
                    },
                    "directoryServiceUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserDirectoryServiceUser:getUserDirectoryServiceUser"
                        },
                        "description": "- (Optional) The directory service user configuration. See below for more information.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "- The display name of the user (common name) provided by the directory service.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identityProviderUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserIdentityProviderUser:getUserIdentityProviderUser"
                        },
                        "description": "- (Optional) (Optional) The identity provider user configuration. See below for more information.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The user kind metadata.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- (Optional) The reference to a project.\n"
                    },
                    "projectReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserProjectReferenceList:getUserProjectReferenceList"
                        },
                        "description": "- A list of projects the user is part of. See #reference for more details.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the entity.\n"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "userType": {
                        "type": "string",
                        "description": "- The name of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessControlPolicyReferenceLists",
                    "apiVersion",
                    "categories",
                    "directoryServiceUsers",
                    "displayName",
                    "identityProviderUsers",
                    "metadata",
                    "ownerReference",
                    "projectReferenceLists",
                    "state",
                    "userType",
                    "id"
                ]
            }
        },
        "nutanix:index/getUserGroup:getUserGroup": {
            "description": "Provides a datasource to retrieve a user group based on the input parameters.\n\n## Example Usage\n\n``` hcl\n\n//Retrieve by UUID\ndata \"nutanix_user_group\" \"usergroup\" {\n\tuser_group_id = \"dd30a856-8e72-4158-b716-98455ceda220\"\n}\n\n//Retrieve by Name\ndata \"nutanix_user_group\" \"usergroupbyname\" {\n\tuser_group_name = \"example-group-1\"\n}\n\n//Retrieve by Distinguished Name\ndata \"nutanix_user_group\" \"test\" {\n\tuser_group_distinguished_name = \"cn=example-group-1,cn=users,dc=ntnxlab,dc=local\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroup.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupCategory:getUserGroupCategory"
                        },
                        "description": "- The Distinguished Categories for the user group.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The Distinguished The reference to a project.\n"
                    },
                    "userGroupDistinguishedName": {
                        "type": "string",
                        "description": "The distinguished name for the user group\n"
                    },
                    "userGroupId": {
                        "type": "string",
                        "description": "- (Optional) The UUID for the user group\n"
                    },
                    "userGroupName": {
                        "type": "string",
                        "description": "- (Optional) The name for the user group\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroup.\n",
                "properties": {
                    "accessControlPolicyReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupAccessControlPolicyReferenceList:getUserGroupAccessControlPolicyReferenceList"
                        },
                        "description": "- List of ACP references. See #reference for more details.\n"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupCategory:getUserGroupCategory"
                        },
                        "description": "- The Distinguished Categories for the user group.\n"
                    },
                    "directoryServiceUserGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupDirectoryServiceUserGroup:getUserGroupDirectoryServiceUserGroup"
                        },
                        "description": "- A Directory Service User Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "- The display name of the user group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The user group kind metadata.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The Distinguished The reference to a project.\n"
                    },
                    "projectReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupProjectReferenceList:getUserGroupProjectReferenceList"
                        },
                        "description": "- A list of projects the user is part of. See #reference for more details.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- The state of the entity.\n"
                    },
                    "userGroupDistinguishedName": {
                        "type": "string"
                    },
                    "userGroupId": {
                        "type": "string"
                    },
                    "userGroupName": {
                        "type": "string"
                    },
                    "userGroupType": {
                        "type": "string",
                        "description": "- The type of the user group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessControlPolicyReferenceLists",
                    "apiVersion",
                    "categories",
                    "directoryServiceUserGroups",
                    "displayName",
                    "metadata",
                    "ownerReference",
                    "projectReferenceLists",
                    "state",
                    "userGroupType",
                    "id"
                ]
            }
        },
        "nutanix:index/getUserGroups:getUserGroups": {
            "description": "Provides a datasource to retrieve all the user groups.\n\n## Example Usage\n\n``` hcl\ndata \"nutanix_user_groups\" \"usergroups\" {}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroups.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupsMetadata:getUserGroupsMetadata"
                        },
                        "description": "- The user group kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroups.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupsEntity:getUserGroupsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupsMetadata:getUserGroupsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getUsers:getUsers": {
            "description": "Provides a datasource to retrieve all the users.\n\n## Example Usage\n\n``` hcl\nresource \"nutanix_user\" \"user\" {\n\tdirectory_service_user {\n\t\tuser_principal_name = \"test-user@ntnxlab.local\"\n\t\tdirectory_service_reference {\n\t\tuuid = \"\u003cdirectory-service-uuid\u003e\"\n\t\t}\n\t}\n}\n\ndata \"nutanix_user\" \"users\" {}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUsersMetadata:getUsersMetadata"
                        },
                        "description": "- The user kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUsersEntity:getUsersEntity"
                        },
                        "description": "List of Users\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUsersMetadata:getUsersMetadata"
                        },
                        "description": "- The user kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getVirtualMachine:getVirtualMachine": {
            "description": "Describes a Virtual Machine\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  vm1:\n    type: nutanix:VirtualMachine\n    properties:\n      clusterUuid: ${clusters.entities[0].metadata.uuid}\n      numVcpusPerSocket: 1\n      numSockets: 1\n      memorySizeMib: 2048\n      powerState: ON\nvariables:\n  clusters:\n    fn::invoke:\n      Function: nutanix:getClusters\n      Arguments:\n        metadata:\n          length: 2\n  nutanixVirtualMachine:\n    fn::invoke:\n      Function: nutanix:getVirtualMachine\n      Arguments:\n        vmId: ${vm1.id}\noutputs:\n  cluster: ${clusters.entities[0].metadata.uuid}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualMachine.\n",
                "properties": {
                    "bootDeviceDiskAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Address of disk to boot from.\n"
                    },
                    "bootDeviceMacAddress": {
                        "type": "string",
                        "description": "- MAC address of nic to boot from.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineCategory:getVirtualMachineCategory"
                        },
                        "description": "- Categories for the vm.\n"
                    },
                    "vmId": {
                        "type": "string",
                        "description": "Represents virtual machine UUID\n"
                    }
                },
                "type": "object",
                "required": [
                    "vmId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualMachine.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a availability_zone.\n"
                    },
                    "bootDeviceDiskAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Address of disk to boot from.\n"
                    },
                    "bootDeviceMacAddress": {
                        "type": "string",
                        "description": "- MAC address of nic to boot from.\n"
                    },
                    "bootDeviceOrderLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n"
                    },
                    "bootType": {
                        "type": "string",
                        "description": "- Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineCategory:getVirtualMachineCategory"
                        },
                        "description": "- Categories for the vm.\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "- The name of the reference to the cluster.\n"
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "- A description for vm.\n"
                    },
                    "diskLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineDiskList:getVirtualMachineDiskList"
                        },
                        "description": "Disks attached to the VM.\n"
                    },
                    "enableCpuPassthrough": {
                        "type": "boolean"
                    },
                    "enableScriptExec": {
                        "type": "boolean",
                        "description": "- Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n"
                    },
                    "gpuLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineGpuList:getVirtualMachineGpuList"
                        },
                        "description": "- GPUs attached to the VM.\n"
                    },
                    "guestCustomizationCloudInitCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "- Generic key value pair used for custom attributes in cloud init.\n"
                    },
                    "guestCustomizationCloudInitMetaData": {
                        "type": "string",
                        "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n"
                    },
                    "guestCustomizationCloudInitUserData": {
                        "type": "string",
                        "description": "- The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
                    },
                    "guestCustomizationIsOverridable": {
                        "type": "boolean",
                        "description": "- Flag to allow override of customization by deployer.\n"
                    },
                    "guestCustomizationSysprep": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n"
                    },
                    "guestCustomizationSysprepCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "- Generic key value pair used for custom attributes in sysprep.\n"
                    },
                    "guestOsId": {
                        "type": "string",
                        "description": "- Guest OS Identifier. For ESX, refer to VMware documentation [link](https://www.vmware.com/support/developer/converter-sdk/conv43_apireference/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html) for the list of guest OS identifiers.\n"
                    },
                    "hardwareClockTimezone": {
                        "type": "string",
                        "description": "- VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n"
                    },
                    "hostReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Reference to a host.\n"
                    },
                    "hypervisorType": {
                        "type": "string",
                        "description": "- The hypervisor type for the hypervisor the VM is hosted on.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isVcpuHardPinned": {
                        "type": "boolean"
                    },
                    "machineType": {
                        "type": "string",
                        "description": "- Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n"
                    },
                    "memorySizeMib": {
                        "type": "integer",
                        "description": "- Memory size in MiB.\n"
                    },
                    "messageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineMessageList:getVirtualMachineMessageList"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The vm kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- the name.\n"
                    },
                    "ngtCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "- Credentials to login server.\n"
                    },
                    "ngtEnabledCapabilityLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Application names that are enabled.\n"
                    },
                    "nicLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineNicList:getVirtualMachineNicList"
                        },
                        "description": "- NICs attached to the VM.\n"
                    },
                    "numSockets": {
                        "type": "integer",
                        "description": "- Number of vCPU sockets.\n"
                    },
                    "numVcpusPerSocket": {
                        "type": "integer",
                        "description": "- Number of vCPUs per socket.\n"
                    },
                    "numVnumaNodes": {
                        "type": "integer",
                        "description": "- Number of vNUMA nodes. 0 means vNUMA is disabled.\n"
                    },
                    "nutanixGuestTools": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- Information regarding Nutanix Guest Tools.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a user.\n"
                    },
                    "parentReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "powerState": {
                        "type": "string",
                        "description": "- The current or desired power state of the VM. (Options : ON , OFF)\n"
                    },
                    "powerStateMechanism": {
                        "type": "string",
                        "description": "- Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The reference to a project.\n"
                    },
                    "serialPortLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineSerialPortList:getVirtualMachineSerialPortList"
                        },
                        "description": "- (Optional) Serial Ports configured on the VM.\n"
                    },
                    "shouldFailOnScriptFailure": {
                        "type": "boolean",
                        "description": "-  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "- Nutanix Guest Tools is enabled or not.\n"
                    },
                    "vgaConsoleEnabled": {
                        "type": "boolean",
                        "description": "- Indicates whether VGA console should be enabled or not.\n"
                    },
                    "vmId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availabilityZoneReference",
                    "bootDeviceDiskAddress",
                    "bootDeviceMacAddress",
                    "bootDeviceOrderLists",
                    "bootType",
                    "categories",
                    "clusterName",
                    "clusterUuid",
                    "description",
                    "diskLists",
                    "enableCpuPassthrough",
                    "enableScriptExec",
                    "gpuLists",
                    "guestCustomizationCloudInitCustomKeyValues",
                    "guestCustomizationCloudInitMetaData",
                    "guestCustomizationCloudInitUserData",
                    "guestCustomizationIsOverridable",
                    "guestCustomizationSysprep",
                    "guestCustomizationSysprepCustomKeyValues",
                    "guestOsId",
                    "hardwareClockTimezone",
                    "hostReference",
                    "hypervisorType",
                    "isVcpuHardPinned",
                    "machineType",
                    "memorySizeMib",
                    "messageLists",
                    "metadata",
                    "name",
                    "ngtCredentials",
                    "ngtEnabledCapabilityLists",
                    "nicLists",
                    "numSockets",
                    "numVcpusPerSocket",
                    "numVnumaNodes",
                    "nutanixGuestTools",
                    "ownerReference",
                    "parentReference",
                    "powerState",
                    "powerStateMechanism",
                    "projectReference",
                    "serialPortLists",
                    "shouldFailOnScriptFailure",
                    "state",
                    "vgaConsoleEnabled",
                    "vmId",
                    "id"
                ]
            }
        },
        "nutanix:index/getVpc:getVpc": {
            "description": "Provides a datasource to retrieve VPC with vpc_uuid or vpc_name .\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpc.\n",
                "properties": {
                    "vpcName": {
                        "type": "string",
                        "description": "vpc Name\n"
                    },
                    "vpcUuid": {
                        "type": "string",
                        "description": "vpc UUID\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpc.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "- The vpc kind metadata.\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcSpec:getVpcSpec"
                        },
                        "description": "VPC input spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcStatus:getVpcStatus"
                        },
                        "description": "VPC output status\n"
                    },
                    "vpcName": {
                        "type": "string"
                    },
                    "vpcUuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "metadata",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getVpcs:getVpcs": {
            "description": "Provides a datasource to retrieve all the vpcs.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = nutanix.getVpcs({});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_vpcs()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nutanix.GetVpcs.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetVpcs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nutanix.NutanixFunctions;\nimport com.pulumi.nutanix.inputs.GetVpcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NutanixFunctions.getVpcs();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nutanix:getVpcs\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcs.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcsMetadata:getVpcsMetadata"
                        },
                        "description": "- The vpc kind metadata.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcs.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the API\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcsEntity:getVpcsEntity"
                        },
                        "description": "List of VPCs\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcsMetadata:getVpcsMetadata"
                        },
                        "description": "- The vpc kind metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        }
    }
}