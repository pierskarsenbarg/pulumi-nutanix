{
    "name": "nutanix",
    "displayName": "Nutanix",
    "description": "A Pulumi package for creating and managing nutanix cloud resources.",
    "keywords": [
        "pulumi",
        "nutanix",
        "category/cloud"
    ],
    "homepage": "https://github.com/pierskarsenbarg/pulumi-nutanix",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`nutanix` Terraform Provider](https://github.com/terraform-providers/terraform-provider-nutanix).",
    "repository": "https://github.com/pierskarsenbarg/pulumi-nutanix",
    "pluginDownloadURL": "https://github.com/pierskarsenbarg/pulumi-nutanix/releases/download/v${VERSION}",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string",
                "description": "URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an\nindividual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS\nupgrades.\n"
            },
            "foundationEndpoint": {
                "type": "string",
                "description": "endpoint for foundation VM (eg. Foundation VM IP)\n"
            },
            "foundationPort": {
                "type": "string",
                "description": "Port for foundation VM\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`\n"
            },
            "password": {
                "type": "string",
                "description": "Password for provided user name.\n"
            },
            "port": {
                "type": "string",
                "description": "Port for Nutanix Prism.\n"
            },
            "proxyUrl": {
                "type": "string"
            },
            "sessionAuth": {
                "type": "boolean",
                "description": "Use session authentification instead of basic auth for each request\n"
            },
            "username": {
                "type": "string",
                "description": "User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.\n"
            },
            "waitTimeout": {
                "type": "integer",
                "description": "Set if you know that the creation o update of a resource may take long time (minutes)\n"
            }
        }
    },
    "types": {
        "nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionList:AccessControlPolicyContextFilterListEntityFilterExpressionList"
                    },
                    "description": "A list of Entity filter expressions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionList:AccessControlPolicyContextFilterListScopeFilterExpressionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityFilterExpressionLists",
                        "scopeFilterExpressionLists"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionList:AccessControlPolicyContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rightHandSide": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator",
                "rightHandSide"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "leftHandSideEntityType",
                        "operator",
                        "rightHandSide"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "categories",
                        "collection",
                        "uuidLists"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "values"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionList:AccessControlPolicyContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rightHandSide": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSide"
            ]
        },
        "nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "categories",
                        "collection",
                        "uuidLists"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories:AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "values"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ]
        },
        "nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus": {
            "properties": {
                "aggregatePercentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterCreationStarted": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatusClusterProgressDetail:FoundationCentralImageClusterClusterStatusClusterProgressDetail"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentFoundationIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "foundationSessionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagingStopped": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatusNodeProgressDetail:FoundationCentralImageClusterClusterStatusNodeProgressDetail"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aggregatePercentComplete",
                        "clusterCreationStarted",
                        "clusterProgressDetails",
                        "currentFoundationIp",
                        "foundationSessionId",
                        "imagingStopped",
                        "intentPickedUp",
                        "nodeProgressDetails"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterClusterStatusClusterProgressDetail:FoundationCentralImageClusterClusterStatusClusterProgressDetail": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "percentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterName",
                        "messageLists",
                        "percentComplete",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterClusterStatusNodeProgressDetail:FoundationCentralImageClusterClusterStatusNodeProgressDetail": {
            "properties": {
                "imagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagingStopped": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "percentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imagedNodeUuid",
                        "imagingStopped",
                        "intentPickedUp",
                        "messageLists",
                        "percentComplete",
                        "status"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings": {
            "properties": {
                "cvmDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cvmDnsServers",
                        "cvmNtpServers",
                        "hypervisorDnsServers",
                        "hypervisorNtpServers"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfig:FoundationCentralImageClusterFoundationInitConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlock:FoundationCentralImageClusterFoundationInitConfigBlock"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigCluster:FoundationCentralImageClusterFoundationInitConfigCluster"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervProductKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIsoUrl": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIsos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigHypervisorIso:FoundationCentralImageClusterFoundationInitConfigHypervisorIso"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nosPackageUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigNosPackageUrl:FoundationCentralImageClusterFoundationInitConfigNosPackageUrl"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blocks",
                        "clusters",
                        "cvmGateway",
                        "cvmNetmask",
                        "dnsServers",
                        "hypervProductKey",
                        "hypervSku",
                        "hypervisorGateway",
                        "hypervisorIsoUrl",
                        "hypervisorIsos",
                        "hypervisorNetmask",
                        "ipmiGateway",
                        "ipmiNetmask",
                        "nosPackageUrls"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlock:FoundationCentralImageClusterFoundationInitConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlockNode:FoundationCentralImageClusterFoundationInitConfigBlockNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockId",
                        "nodes"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigBlockNode:FoundationCentralImageClusterFoundationInitConfigBlockNode": {
            "properties": {
                "cvmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmVlanId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fcImagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorHostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePosition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cvmIp",
                        "cvmVlanId",
                        "fcImagedNodeUuid",
                        "hardwareAttributesOverride",
                        "hypervisor",
                        "hypervisorHostname",
                        "hypervisorIp",
                        "imageNow",
                        "ipmiIp",
                        "ipv6Address",
                        "nodePosition",
                        "nodeSerial"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigCluster:FoundationCentralImageClusterFoundationInitConfigCluster": {
            "properties": {
                "clusterExternalIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterInitNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterInitSuccessful": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmDnsServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNtpServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyFactor": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterExternalIp",
                        "clusterInitNow",
                        "clusterInitSuccessful",
                        "clusterMembers",
                        "clusterName",
                        "cvmDnsServers",
                        "cvmNtpServers",
                        "redundancyFactor",
                        "timezone"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigHypervisorIso:FoundationCentralImageClusterFoundationInitConfigHypervisorIso": {
            "properties": {
                "hypervisorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256sum": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hypervisorType",
                        "sha256sum",
                        "url"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterFoundationInitConfigNosPackageUrl:FoundationCentralImageClusterFoundationInitConfigNosPackageUrl": {
            "properties": {
                "sha256sum": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sha256sum",
                        "url"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails": {
            "properties": {
                "hypervProductKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256sum": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hypervProductKey",
                        "hypervSku",
                        "sha256sum"
                    ]
                }
            }
        },
        "nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList": {
            "properties": {
                "cvmGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmRamGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmVlanId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorHostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdmaPassthrough": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useExistingNetworkSettings": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cvmGateway",
                        "cvmIp",
                        "cvmVlanId",
                        "hardwareAttributesOverride",
                        "hypervisorGateway",
                        "hypervisorHostname",
                        "hypervisorIp",
                        "hypervisorNetmask",
                        "imageNow",
                        "imagedNodeUuid",
                        "ipmiGateway",
                        "ipmiIp"
                    ]
                }
            }
        },
        "nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "description": ": - Block ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlockNode:FoundationImageNodesBlockNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodes"
            ]
        },
        "nutanix:index/FoundationImageNodesBlockNode:FoundationImageNodesBlockNode": {
            "properties": {
                "bondLacpRate": {
                    "type": "string",
                    "description": ":- (Required if node is lacp configured) slow or fast if lacp if being used at the switch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "bondMode": {
                    "type": "string",
                    "description": ":- (Required if node is capable) dynamic if using LACP, static for LAG\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "bondUplinks": {
                    "type": "string",
                    "description": ":- MAC Addresses of NICs in a team/bond\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "clusterId": {
                    "type": "string",
                    "description": ":- ID of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "currentCvmVlanTag": {
                    "type": "integer",
                    "description": ":- Current CVM vlan tag. 0 Value with remove vlan tag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "currentNetworkInterface": {
                    "type": "string",
                    "description": ":- CVM current network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "cvmGbRam": {
                    "type": "integer",
                    "description": ":- RAM capacity of CVM in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "cvmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "cvmNumVcpus": {
                    "type": "integer",
                    "description": ":- Number of CVM vcpus.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "deviceHint": {
                    "type": "string",
                    "description": ":- use \"vm_installer\" to enable CVM imaging from standalone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "exludeBootSerial": {
                    "type": "string",
                    "description": ":- serial of boot device to be excluded (used by NX G6 platforms)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hypervisor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hypervisorHostname": {
                    "type": "string",
                    "description": ":- (Required) Hypervisor Hostname.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hypervisorIp": {
                    "type": "string",
                    "description": ":- (Required) Hypervisor IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "imageDelay": {
                    "type": "integer",
                    "description": ":- Imaging delay.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "imageNow": {
                    "type": "boolean",
                    "description": ":- (Optional, Default = true) If the node should be imaged now.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "imageSuccessful": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiConfigureNow": {
                    "type": "boolean",
                    "description": ":- Whether IPMI should be configured.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiIp": {
                    "type": "string",
                    "description": ":- (Required) IPMI IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiMac": {
                    "type": "string",
                    "description": ":- IPMI MAC address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI username\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiUser": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI password\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipv6Address": {
                    "type": "string",
                    "description": ":- (Required when device_hint = \"vm_installer\" for imaging using node's existing cvm for imaging) IPV6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipv6Interface": {
                    "type": "string",
                    "description": ":- (Required when device_hint = \"vm_installer\" for imaging using node's existing cvm for imaging) ipv6 interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "mitigateLowBootSpace": {
                    "type": "boolean",
                    "description": ":- relocate bootbank files to make space for phoenix files.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodePosition": {
                    "type": "string",
                    "description": ":- (Required) Position of the node in the block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodeSerial": {
                    "type": "string",
                    "description": ":- serial number of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "rdmaMacAddr": {
                    "type": "string",
                    "description": ":- mac address of nic to be used for rdma\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "rdmaPassthrough": {
                    "type": "boolean",
                    "description": ":- (Required if node is capable) passthru RDMA nic to CVM if possible, default to false\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ucsmManagedMode": {
                    "type": "string",
                    "description": ":- UCSM Managed mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ucsmNodeSerial": {
                    "type": "string",
                    "description": ":- UCSM node serial.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ucsmParams": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesBlockNodeUcsmParams:FoundationImageNodesBlockNodeUcsmParams",
                    "description": ":- Object of UCSM parameters.\n* `ucsm_params.native_vlan` :- If the vlan is native.\n* `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.\n* `ucsm_params.mac_pool` :- Mac address pool.\n* `ucsm_params.vlan_name` :- Name of vlan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vswitches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlockNodeVswitch:FoundationImageNodesBlockNodeVswitch"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "hypervisorHostname",
                "hypervisorIp",
                "nodePosition"
            ]
        },
        "nutanix:index/FoundationImageNodesBlockNodeUcsmParams:FoundationImageNodesBlockNodeUcsmParams": {
            "properties": {
                "keepUcsmSettings": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "macPool": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nativeVlan": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vlanName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesBlockNodeVswitch:FoundationImageNodesBlockNodeVswitch": {
            "properties": {
                "bondMode": {
                    "type": "string",
                    "description": ":- (Required if node is capable) dynamic if using LACP, static for LAG\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "lacp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "mtu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "otherConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "uplinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster": {
            "properties": {
                "backplaneNetmask": {
                    "type": "string",
                    "description": ": - Backplane netmask.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "backplaneSubnet": {
                    "type": "string",
                    "description": ": - Backplane subnet address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "backplaneVlan": {
                    "type": "string",
                    "description": ": - Backplane vlan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "clusterExternalIp": {
                    "type": "string",
                    "description": ": - External IP of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "clusterInitNow": {
                    "type": "boolean",
                    "description": ": - (Optional, Default = true) If cluster should be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "clusterInitSuccessful": {
                    "type": "boolean",
                    "description": ": - If cluster initialization was successful.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ": - (Required) Members in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": ": - (Required) Name of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "cvmDnsServers": {
                    "type": "string",
                    "description": ": - DNS servers of CVM.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "cvmNtpServers": {
                    "type": "string",
                    "description": ": - NTP servers of CVM.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "enableNs": {
                    "type": "boolean",
                    "description": ": - If network segmentation should be enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hypervisorNtpServers": {
                    "type": "string",
                    "description": ": - NTP servers of hypervisor.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "redundancyFactor": {
                    "type": "integer",
                    "description": ": - (Required) Cluster Redundancy Factor.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "singleNodeCluster": {
                    "type": "boolean",
                    "description": ": - If it is a single node cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "clusterMembers",
                "clusterName",
                "redundancyFactor"
            ]
        },
        "nutanix:index/FoundationImageNodesClusterUrl:FoundationImageNodesClusterUrl": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": ": - (Required) Name of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterName",
                        "clusterUrl"
                    ]
                }
            }
        },
        "nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata": {
            "properties": {
                "accountNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ": - arrya of account names\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "configId": {
                    "type": "string",
                    "description": ": - Id of the Eos config uploaded in foundation GUI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "email": {
                    "type": "string",
                    "description": ": - Email address of the user who downloaded Eos config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings": {
            "properties": {
                "fcMetadata": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettingsFcMetadata:FoundationImageNodesFcSettingsFcMetadata",
                    "description": ":- Foundation Central metadata which will be transferred to the newly imaged node.\n* `fc_metadata.fc_ip` :- IP address of foundation central.\n* `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "foundationCentral": {
                    "type": "boolean",
                    "description": ":- If this attribute is set to True, FC workflow will be invoked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "fcMetadata",
                "foundationCentral"
            ]
        },
        "nutanix:index/FoundationImageNodesFcSettingsFcMetadata:FoundationImageNodesFcSettingsFcMetadata": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "fcIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "fcIp"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso": {
            "properties": {
                "esx": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoEsx:FoundationImageNodesHypervisorIsoEsx",
                    "description": ": - Details of hypervisor ISO of type esx.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hyperv": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoHyperv:FoundationImageNodesHypervisorIsoHyperv",
                    "description": ": - Details of hypervisor ISO of type hyperv.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "kvm": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoKvm:FoundationImageNodesHypervisorIsoKvm",
                    "description": ": - Details of hypervisor ISO of type kvm.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "xen": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIsoXen:FoundationImageNodesHypervisorIsoXen",
                    "description": ": - Details of hypervisor ISO of type xen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoEsx:FoundationImageNodesHypervisorIsoEsx": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "description": ":- (Required) Filename of hypervisor ISO.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "description": ":- (Required) Checksum for ISO file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoHyperv:FoundationImageNodesHypervisorIsoHyperv": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "description": ":- (Required) Filename of hypervisor ISO.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "description": ":- (Required) Checksum for ISO file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoKvm:FoundationImageNodesHypervisorIsoKvm": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "description": ":- (Required) Filename of hypervisor ISO.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "description": ":- (Required) Checksum for ISO file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesHypervisorIsoXen:FoundationImageNodesHypervisorIsoXen": {
            "properties": {
                "checksum": {
                    "type": "string",
                    "description": ":- (Required) Filename of hypervisor ISO.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "description": ":- (Required) Checksum for ISO file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "checksum",
                "filename"
            ]
        },
        "nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests": {
            "properties": {
                "runNcc": {
                    "type": "boolean",
                    "description": ": - Whether NCC checks should run.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "runSyscheck": {
                    "type": "boolean",
                    "description": ": - Whether system checks should run.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlockNode:FoundationIpmiConfigBlockNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodes"
            ]
        },
        "nutanix:index/FoundationIpmiConfigBlockNode:FoundationIpmiConfigBlockNode": {
            "properties": {
                "ipmiConfigureNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiConfigureSuccessful": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiMac": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipmiConfigureNow",
                "ipmiIp",
                "ipmiMac"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipmiConfigureNow",
                        "ipmiConfigureSuccessful",
                        "ipmiIp",
                        "ipmiMac",
                        "ipmiMessage"
                    ]
                }
            }
        },
        "nutanix:index/ImageCategory:ImageCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ImageClusterReference:ImageClusterReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ImageCurrentClusterReferenceList:ImageCurrentClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig": {
            "properties": {
                "externalIpv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalIpv4Address"
            ]
        },
        "nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig": {
            "properties": {
                "calicoConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterCniConfigCalicoConfig:KarbonClusterCniConfigCalicoConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "flannelConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterCniConfigFlannelConfig:KarbonClusterCniConfigFlannelConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodeCidrMaskSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podIpv4Cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIpv4Cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/KarbonClusterCniConfigCalicoConfig:KarbonClusterCniConfigCalicoConfig": {
            "properties": {
                "ipPoolConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterCniConfigCalicoConfigIpPoolConfig:KarbonClusterCniConfigCalicoConfigIpPoolConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/KarbonClusterCniConfigCalicoConfigIpPoolConfig:KarbonClusterCniConfigCalicoConfigIpPoolConfig": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nutanix:index/KarbonClusterCniConfigFlannelConfig:KarbonClusterCniConfigFlannelConfig": {
            "type": "object"
        },
        "nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool": {
            "properties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePoolAhvConfig:KarbonClusterEtcdNodePoolAhvConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePoolNode:KarbonClusterEtcdNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodeOsVersion",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeOsVersion",
                        "nodes",
                        "numInstances"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterEtcdNodePoolAhvConfig:KarbonClusterEtcdNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkUuid",
                "prismElementClusterUuid"
            ]
        },
        "nutanix:index/KarbonClusterEtcdNodePoolNode:KarbonClusterEtcdNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "ipv4Address"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig": {
            "properties": {
                "externalIpv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterNodesConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfigMasterNodesConfig:KarbonClusterExternalLbConfigMasterNodesConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalIpv4Address",
                "masterNodesConfigs"
            ]
        },
        "nutanix:index/KarbonClusterExternalLbConfigMasterNodesConfig:KarbonClusterExternalLbConfigMasterNodesConfig": {
            "properties": {
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePoolName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipv4Address"
            ]
        },
        "nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool": {
            "properties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePoolAhvConfig:KarbonClusterMasterNodePoolAhvConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePoolNode:KarbonClusterMasterNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nodeOsVersion",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeOsVersion",
                        "nodes",
                        "numInstances"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterMasterNodePoolAhvConfig:KarbonClusterMasterNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkUuid",
                "prismElementClusterUuid"
            ]
        },
        "nutanix:index/KarbonClusterMasterNodePoolNode:KarbonClusterMasterNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "ipv4Address"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry": {
            "properties": {
                "registryName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "registryName"
            ]
        },
        "nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig": {
            "type": "object"
        },
        "nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "reclaimPolicy": {
                    "type": "string",
                    "description": "Reclaim policy for persistent volumes provisioned using the specified storage class.\n* `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.\n* `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.\n* `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.\n* `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.\n* `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.\n* `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumesConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfigVolumesConfig:KarbonClusterStorageClassConfigVolumesConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "volumesConfig"
            ]
        },
        "nutanix:index/KarbonClusterStorageClassConfigVolumesConfig:KarbonClusterStorageClassConfigVolumesConfig": {
            "properties": {
                "fileSystem": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flashMode": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageContainer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "prismElementClusterUuid",
                "storageContainer",
                "username"
            ]
        },
        "nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool": {
            "properties": {
                "ahvConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePoolAhvConfig:KarbonClusterWorkerNodePoolAhvConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePoolNode:KarbonClusterWorkerNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeOsVersion",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeOsVersion",
                        "nodes",
                        "numInstances"
                    ]
                }
            }
        },
        "nutanix:index/KarbonClusterWorkerNodePoolAhvConfig:KarbonClusterWorkerNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkUuid",
                "prismElementClusterUuid"
            ]
        },
        "nutanix:index/KarbonClusterWorkerNodePoolNode:KarbonClusterWorkerNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "ipv4Address"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListFilterParam:NetworkSecurityRuleAdRuleInboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListFilterParam:NetworkSecurityRuleAdRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListFilterParam:NetworkSecurityRuleAdRuleOutboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListFilterParam:NetworkSecurityRuleAdRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListFilterParam:NetworkSecurityRuleAppRuleInboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListFilterParam:NetworkSecurityRuleAppRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListFilterParam:NetworkSecurityRuleAppRuleOutboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressGroupInclusionLists",
                        "expirationTime",
                        "filterKindLists",
                        "filterParams",
                        "filterType",
                        "icmpTypeCodeLists",
                        "ipSubnet",
                        "ipSubnetPrefixLength",
                        "networkFunctionChainReference",
                        "peerSpecificationType",
                        "protocol",
                        "serviceGroupLists",
                        "tcpPortRangeLists",
                        "udpPortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList:NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListFilterParam:NetworkSecurityRuleAppRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList:NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/PbrDestination:PbrDestination": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/PbrProtocolParameters:PbrProtocolParameters": {
            "properties": {
                "icmp": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParametersIcmp:PbrProtocolParametersIcmp",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcp": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParametersTcp:PbrProtocolParametersTcp",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udp": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParametersUdp:PbrProtocolParametersUdp",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/PbrProtocolParametersIcmp:PbrProtocolParametersIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ]
        },
        "nutanix:index/PbrProtocolParametersTcp:PbrProtocolParametersTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersTcpDestinationPortRangeList:PbrProtocolParametersTcpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersTcpSourcePortRangeList:PbrProtocolParametersTcpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "destinationPortRangeLists",
                        "sourcePortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersTcpDestinationPortRangeList:PbrProtocolParametersTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersTcpSourcePortRangeList:PbrProtocolParametersTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersUdp:PbrProtocolParametersUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersUdpDestinationPortRangeList:PbrProtocolParametersUdpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParametersUdpSourcePortRangeList:PbrProtocolParametersUdpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "destinationPortRangeLists",
                        "sourcePortRangeLists"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersUdpDestinationPortRangeList:PbrProtocolParametersUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrProtocolParametersUdpSourcePortRangeList:PbrProtocolParametersUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endPort",
                        "startPort"
                    ]
                }
            }
        },
        "nutanix:index/PbrSource:PbrSource": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectCategory:ProjectCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectResourceDomain:ProjectResourceDomain": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectResourceDomainResource:ProjectResourceDomainResource"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "nutanix:index/ProjectResourceDomainResource:ProjectResourceDomainResource": {
            "properties": {
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "integer",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "limit",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "limit",
                        "resourceType",
                        "units",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList": {
            "properties": {
                "destinationAvailabilityZoneIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotScheduleLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceAvailabilityZoneIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "destinationAvailabilityZoneIndex",
                        "snapshotScheduleLists",
                        "sourceAvailabilityZoneIndex"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList": {
            "properties": {
                "autoSuspendTimeoutSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSnapshotRetentionPolicy": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryPointObjectiveSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteSnapshotRetentionPolicy": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "recoveryPointObjectiveSecs"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoSuspendTimeoutSecs",
                        "localSnapshotRetentionPolicy",
                        "recoveryPointObjectiveSecs",
                        "remoteSnapshotRetentionPolicy",
                        "snapshotType"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "numSnapshots",
                        "rollupRetentionPolicyMultiple",
                        "rollupRetentionPolicySnapshotIntervalType"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "numSnapshots",
                        "rollupRetentionPolicyMultiple",
                        "rollupRetentionPolicySnapshotIntervalType"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter": {
            "properties": {
                "kindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilterParam:ProtectionRuleCategoryFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kindLists",
                        "params",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleCategoryFilterParam:ProtectionRuleCategoryFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityZoneUrl",
                        "clusterUuid"
                    ]
                }
            }
        },
        "nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters": {
            "properties": {
                "floatingIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingList:RecoveryPlanParametersNetworkMappingList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "floatingIpAssignmentLists",
                        "networkMappingLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "vmIpAssignmentLists"
            ]
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList": {
            "properties": {
                "recoveryFloatingIpConfig": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testFloatingIpConfig": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicInformation": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "vmNicInformation",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recoveryFloatingIpConfig",
                        "testFloatingIpConfig",
                        "vmNicInformation",
                        "vmReference"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shouldAllocateDynamically": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "shouldAllocateDynamically"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shouldAllocateDynamically": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "shouldAllocateDynamically"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference:RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingList:RecoveryPlanParametersNetworkMappingList": {
            "properties": {
                "areNetworksStretched": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityZoneNetworkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "areNetworksStretched",
                        "availabilityZoneNetworkMappingLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryNetwork": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testNetwork": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityZoneUrl",
                        "clusterReferenceLists",
                        "recoveryIpAssignmentLists",
                        "recoveryNetwork",
                        "testIpAssignmentLists",
                        "testNetwork"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVpcReference": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "subnetLists",
                        "useVpcReference",
                        "virtualNetworkReference",
                        "vpcReference"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalConnectivityState",
                        "gatewayIp",
                        "prefixLength"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVpcReference": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "subnetLists",
                        "useVpcReference",
                        "virtualNetworkReference",
                        "vpcReference"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalConnectivityState",
                        "gatewayIp",
                        "prefixLength"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList": {
            "properties": {
                "delayTimeSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageWork": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWork:RecoveryPlanStageListStageWork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "stageWork"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "delayTimeSecs",
                        "stageUuid",
                        "stageWork"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWork:RecoveryPlanStageListStageWork": {
            "properties": {
                "recoverEntities": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntities:RecoveryPlanStageListStageWorkRecoverEntities",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recoverEntities"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntities:RecoveryPlanStageListStageWorkRecoverEntities": {
            "properties": {
                "entityInfoLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityInfoLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList": {
            "properties": {
                "anyEntityReferenceKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyEntityReferenceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyEntityReferenceUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scriptLists"
                    ]
                }
            }
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList:RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList": {
            "properties": {
                "enableScriptExec": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableScriptExec"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableScriptExec",
                        "timeout"
                    ]
                }
            }
        },
        "nutanix:index/RoleCategory:RoleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/RoleOwnerReference:RoleOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/RoleProjectReference:RoleProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList": {
            "properties": {
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceListIcmpTypeCodeList:ServiceGroupServiceListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceListTcpPortRangeList:ServiceGroupServiceListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceListUdpPortRangeList:ServiceGroupServiceListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceListIcmpTypeCodeList:ServiceGroupServiceListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceListTcpPortRangeList:ServiceGroupServiceListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "description": "End Port (Int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/ServiceGroupServiceListUdpPortRangeList:ServiceGroupServiceListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "description": "End Port (Int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop": {
            "properties": {
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "Reference to a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "Destination ip with prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "Reference to a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionReferenceUuid": {
                    "type": "string",
                    "description": "Reference to a vpn connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destination"
            ]
        },
        "nutanix:index/SubnetCategory:SubnetCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/UserAccessControlPolicyReferenceList:UserAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/UserCategory:UserCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "directoryServiceReference": {
                    "$ref": "#/types/nutanix:index/UserDirectoryServiceUserDirectoryServiceReference:UserDirectoryServiceUserDirectoryServiceReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directoryServiceReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultUserPrincipalName",
                        "directoryServiceReference",
                        "userPrincipalName"
                    ]
                }
            }
        },
        "nutanix:index/UserDirectoryServiceUserDirectoryServiceReference:UserDirectoryServiceUserDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser": {
            "properties": {
                "identityProviderReference": {
                    "$ref": "#/types/nutanix:index/UserIdentityProviderUserIdentityProviderReference:UserIdentityProviderUserIdentityProviderReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "identityProviderReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "identityProviderReference",
                        "username"
                    ]
                }
            }
        },
        "nutanix:index/UserIdentityProviderUserIdentityProviderReference:UserIdentityProviderUserIdentityProviderReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/UserProjectReferenceList:UserProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineCategory:VirtualMachineCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "value"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList": {
            "properties": {
                "dataSourceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceProperties": {
                    "$ref": "#/types/nutanix:index/VirtualMachineDiskListDeviceProperties:VirtualMachineDiskListDeviceProperties",
                    "description": "Properties to a device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeBytes": {
                    "type": "integer",
                    "description": "Size of the disk in Bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeMib": {
                    "type": "integer",
                    "description": "Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageConfig": {
                    "$ref": "#/types/nutanix:index/VirtualMachineDiskListStorageConfig:VirtualMachineDiskListStorageConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeGroupReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a volume group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dataSourceReference",
                        "deviceProperties",
                        "diskSizeBytes",
                        "diskSizeMib",
                        "storageConfig",
                        "uuid",
                        "volumeGroupReference"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskListDeviceProperties:VirtualMachineDiskListDeviceProperties": {
            "properties": {
                "deviceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskAddress"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskListStorageConfig:VirtualMachineDiskListStorageConfig": {
            "properties": {
                "flashMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageContainerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineDiskListStorageConfigStorageContainerReference:VirtualMachineDiskListStorageConfigStorageContainerReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "storageContainerReferences"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineDiskListStorageConfigStorageContainerReference:VirtualMachineDiskListStorageConfigStorageContainerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "url",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList": {
            "properties": {
                "deviceId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fraction": {
                    "type": "integer",
                    "description": "Fraction of the physical GPU assigned.\n* `mode`: - (Optional) The mode of this GPU.\n* `num_virtual_display_heads`: - (ReadOnly) Number of supported virtual display heads.\n* `guest_driver_version`: - (ReadOnly) Last determined guest driver version.\n* `device_id`: - (Computed) The device ID of the GPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frameBufferSizeMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "guestDriverVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numVirtualDisplayHeads": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pciAddress": {
                    "type": "string",
                    "description": "GPU {segment:bus:device:function} (sbdf) address if assigned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceId",
                        "fraction",
                        "frameBufferSizeMib",
                        "guestDriverVersion",
                        "mode",
                        "name",
                        "numVirtualDisplayHeads",
                        "pciAddress",
                        "uuid",
                        "vendor"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicList:VirtualMachineNicList": {
            "properties": {
                "ipEndpointLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicListIpEndpointList:VirtualMachineNicListIpEndpointList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isConnected": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "model": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionNicType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nicType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numQueues": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipEndpointLists",
                        "macAddress",
                        "model",
                        "networkFunctionChainReference",
                        "networkFunctionNicType",
                        "nicType",
                        "numQueues",
                        "subnetName",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicListIpEndpointList:VirtualMachineNicListIpEndpointList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicListStatus:VirtualMachineNicListStatus": {
            "properties": {
                "floatingIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipEndpointLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicListStatusIpEndpointList:VirtualMachineNicListStatusIpEndpointList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isConnected": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "model": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionNicType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nicType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numQueues": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "floatingIp",
                        "ipEndpointLists",
                        "isConnected",
                        "macAddress",
                        "model",
                        "networkFunctionChainReference",
                        "networkFunctionNicType",
                        "nicType",
                        "numQueues",
                        "subnetName",
                        "subnetUuid",
                        "uuid"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineNicListStatusIpEndpointList:VirtualMachineNicListStatusIpEndpointList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "type"
                    ]
                }
            }
        },
        "nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList": {
            "properties": {
                "index": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isConnected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "index",
                        "isConnected"
                    ]
                }
            }
        },
        "nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip"
                    ]
                }
            }
        },
        "nutanix:index/VpcExternalSubnetListStatus:VpcExternalSubnetListStatus": {
            "properties": {
                "activeGatewayNode": {
                    "$ref": "#/types/nutanix:index/VpcExternalSubnetListStatusActiveGatewayNode:VpcExternalSubnetListStatusActiveGatewayNode",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeGatewayNode",
                        "externalIpLists",
                        "externalSubnetReference"
                    ]
                }
            }
        },
        "nutanix:index/VpcExternalSubnetListStatusActiveGatewayNode:VpcExternalSubnetListStatusActiveGatewayNode": {
            "properties": {
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostReference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostReference",
                        "ipAddress"
                    ]
                }
            }
        },
        "nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ]
        },
        "nutanix:index/getAccessControlPoliciesEntity:getAccessControlPoliciesEntity": {
            "properties": {
                "accessControlPolicyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `state`: - The state of the Access Control Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityCategory:getAccessControlPoliciesEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterList:getAccessControlPoliciesEntityContextFilterList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityRoleReference:getAccessControlPoliciesEntityRoleReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityUserGroupReferenceList:getAccessControlPoliciesEntityUserGroupReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityUserReferenceList:getAccessControlPoliciesEntityUserReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessControlPolicyId",
                "apiVersion",
                "categories",
                "contextFilterLists",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "projectReference",
                "roleReferences",
                "state",
                "userGroupReferenceLists",
                "userReferenceLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityCategory:getAccessControlPoliciesEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterList:getAccessControlPoliciesEntityContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList"
                    },
                    "description": "A list of Entity filter expressions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists",
                "scopeFilterExpressionLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "leftHandSideEntityType",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityRoleReference:getAccessControlPoliciesEntityRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityUserGroupReferenceList:getAccessControlPoliciesEntityUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesEntityUserReferenceList:getAccessControlPoliciesEntityUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPoliciesMetadata:getAccessControlPoliciesMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyCategory:getAccessControlPolicyCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterList:getAccessControlPolicyContextFilterList": {
            "properties": {
                "entityFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionList:getAccessControlPolicyContextFilterListEntityFilterExpressionList"
                    },
                    "description": "A list of Entity filter expressions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopeFilterExpressionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionList:getAccessControlPolicyContextFilterListScopeFilterExpressionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityFilterExpressionLists",
                "scopeFilterExpressionLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionList:getAccessControlPolicyContextFilterListEntityFilterExpressionList": {
            "properties": {
                "leftHandSideEntityType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "leftHandSideEntityType",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionList:getAccessControlPolicyContextFilterListScopeFilterExpressionList": {
            "properties": {
                "leftHandSide": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rightHandSides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "leftHandSide",
                "operator",
                "rightHandSides"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "categories",
                "collection",
                "uuidLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory:getAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyRoleReference:getAccessControlPolicyRoleReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyUserGroupReferenceList:getAccessControlPolicyUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAccessControlPolicyUserReferenceList:getAccessControlPolicyUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupIpAddressBlockList:getAddressGroupIpAddressBlockList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntity:getAddressGroupsEntity": {
            "properties": {
                "addressGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAddressGroupsEntityAddressGroup:getAddressGroupsEntityAddressGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedPoliciesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAddressGroupsEntityAssociatedPoliciesList:getAddressGroupsEntityAssociatedPoliciesList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroups",
                "associatedPoliciesLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntityAddressGroup:getAddressGroupsEntityAddressGroup": {
            "properties": {
                "addressGroupString": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddressBlockLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getAddressGroupsEntityAddressGroupIpAddressBlockList:getAddressGroupsEntityAddressGroupIpAddressBlockList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupString",
                "ipAddressBlockLists",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntityAddressGroupIpAddressBlockList:getAddressGroupsEntityAddressGroupIpAddressBlockList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsEntityAssociatedPoliciesList:getAddressGroupsEntityAssociatedPoliciesList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAddressGroupsMetadata:getAddressGroupsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getAssertHelperCheck:getAssertHelperCheck": {
            "properties": {
                "condition": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "errorMessage"
            ]
        },
        "nutanix:index/getClusterAuthorizedPublicKeyList:getClusterAuthorizedPublicKeyList": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterCaCertificateList:getClusterCaCertificateList": {
            "properties": {
                "caName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caName",
                "certificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterCategory:getClusterCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterHttpProxyList:getClusterHttpProxyList": {
            "properties": {
                "address": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "credentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyTypeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "credentials",
                "proxyTypeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterHttpProxyWhitelist:getClusterHttpProxyWhitelist": {
            "properties": {
                "target": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target",
                "targetType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterManagementServerList:getClusterManagementServerList": {
            "properties": {
                "drsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "drsEnabled",
                "ip",
                "statusLists",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClusterNode:getClusterNode": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntity:getClustersEntity": {
            "properties": {
                "analysisVmEfficiencyMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The API version.\n* `description`: - A description for image.\n* `metadata`: - The image kind metadata.\n* `state`: - The state of the cluster entity.\n* `gpu_driver_version`: - GPU driver version.\n* `client_auth`: - Client authentication config.\n* `authorized_piblic_key_list`: - List of valid ssh keys for the cluster.\n* `software_map_ncc`: - Map of software on the cluster with software type as the key.\n* `software_map_nos`: - Map of software on the cluster with software type as the key.\n* `encryption_status`: - Cluster encryption status.\n* `ssl_key_type`: - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.\n* `ssl_key_signing_info`: - Customer information used in Certificate Signing Request for creating digital certificates.\n* `ssl_key_expire_datetime`: - UTC date and time in RFC-3339 format when the key expires\n* `service_list`: - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.\n* `supported_information_verbosity`: - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)\n* `certification_signing_info`: - Customer information used in Certificate Signing Request for creating digital certificates.\n* `operation_mode`: - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.\n* `ca_certificate_list`: - Zone name used in value of TZ environment variable.\n* `enabled_feature_list`: - Array of enabled features.\n* `is_available`: - Indicates if cluster is available to contact. (Readonly)\n* `build`: - Cluster build details.\n* `timezone`: - Zone name used in value of TZ environment variable.\n* `cluster_arch`: - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)\n* `management_server_list`: - List of cluster management servers. (Readonly)\n* `masquerading_port`: - Port used together with masquerading_ip to connect to the cluster.\n* `masquerading_ip`: - The cluster NAT'd or proxy IP which maps to the cluster local IP.\n* `external_ip`: - The local IP of cluster visible externally.\n* `http_proxy_list`: - List of proxies to connect to the service centers.\n* `smtp_server_type`: - SMTP Server type.\n* `smtp_server_email_address`: - SMTP Server Email Address.\n* `smtp_server_credentials`: - SMTP Server Credentials.\n* `smtp_server_proxy_type_list`: - SMTP Server Proxy Type List\n* `smtp_server_address`: - SMTP Server Address.\n* `ntp_server_ip_list`: - The list of IP addresses or FQDNs of the NTP servers.\n* `external_subnet`: - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)\n* `external_data_services_ip`: - The cluster IP address that provides external entities access to various cluster data services.\n* `internal_subnet`: - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.\n* `domain_server_nameserver`: -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.\n* `domain_server_name`: - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.\n* `domain_server_credentials`: - Cluster domain credentials.\n* `nfs_subnet_whitelist`: - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.\n* `name_server_ip_list`: - The list of IP addresses of the name servers.\n* `http_proxy_whitelist`: - HTTP proxy whitelist.\n* `analysis_vm_efficiency_map`: - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorizedPublicKeyLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityAuthorizedPublicKeyList:getClustersEntityAuthorizedPublicKeyList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "build": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCertificateLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityCaCertificateList:getClustersEntityCaCertificateList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityCategory:getClustersEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificationSigningInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientAuth": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterArch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainServerCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainServerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainServerNameserver": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabledFeatureLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalDataServicesIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpuDriverVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpProxyLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityHttpProxyList:getClustersEntityHttpProxyList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpProxyWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityHttpProxyWhitelist:getClustersEntityHttpProxyWhitelist"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isAvailable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "managementServerLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityManagementServerList:getClustersEntityManagementServerList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masqueradingIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masqueradingPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameServerIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nfsSubnetWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getClustersEntityNode:getClustersEntityNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ntpServerIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpServerCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpServerEmailAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpServerProxyTypeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpServerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "softwareMapNcc": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "softwareMapNos": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslKeyExpireDatetime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslKeyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslKeySigningInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslKeyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedInformationVerbosity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "analysisVmEfficiencyMap",
                "apiVersion",
                "authorizedPublicKeyLists",
                "build",
                "caCertificateLists",
                "categories",
                "certificationSigningInfo",
                "clientAuth",
                "clusterArch",
                "domainServerCredentials",
                "domainServerName",
                "domainServerNameserver",
                "enabledFeatureLists",
                "encryptionStatus",
                "externalDataServicesIp",
                "externalIp",
                "externalSubnet",
                "gpuDriverVersion",
                "httpProxyLists",
                "httpProxyWhitelists",
                "internalSubnet",
                "isAvailable",
                "managementServerLists",
                "masqueradingIp",
                "masqueradingPort",
                "metadata",
                "name",
                "nameServerIpLists",
                "nfsSubnetWhitelists",
                "nodes",
                "ntpServerIpLists",
                "operationMode",
                "ownerReference",
                "projectReference",
                "serviceLists",
                "smtpServerAddress",
                "smtpServerCredentials",
                "smtpServerEmailAddress",
                "smtpServerProxyTypeLists",
                "smtpServerType",
                "softwareMapNcc",
                "softwareMapNos",
                "sslKeyExpireDatetime",
                "sslKeyName",
                "sslKeySigningInfo",
                "sslKeyType",
                "state",
                "supportedInformationVerbosity",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityAuthorizedPublicKeyList:getClustersEntityAuthorizedPublicKeyList": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityCaCertificateList:getClustersEntityCaCertificateList": {
            "properties": {
                "caName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caName",
                "certificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityCategory:getClustersEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityHttpProxyList:getClustersEntityHttpProxyList": {
            "properties": {
                "address": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "credentials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyTypeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "credentials",
                "proxyTypeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityHttpProxyWhitelist:getClustersEntityHttpProxyWhitelist": {
            "properties": {
                "target": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target",
                "targetType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityManagementServerList:getClustersEntityManagementServerList": {
            "properties": {
                "drsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "drsEnabled",
                "ip",
                "statusLists",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getClustersEntityNode:getClustersEntityNode": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpSpec:getFloatingIpSpec": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpSpecResource:getFloatingIpSpecResource"
                    },
                    "description": "Floating IP allocation status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpSpecResource:getFloatingIpSpecResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpStatus:getFloatingIpStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpStatusExecutionContext:getFloatingIpStatusExecutionContext"
                    },
                    "description": "Execution Context of Floating IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "floating_ip Name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpStatusResource:getFloatingIpStatusResource"
                    },
                    "description": "Floating IP allocation status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the floating_ip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpStatusExecutionContext:getFloatingIpStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpStatusResource:getFloatingIpStatusResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingIp": {
                    "type": "string",
                    "description": "Private IP with which the floating IP is associated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "floatingIp",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntity:getFloatingIpsEntity": {
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntitySpec:getFloatingIpsEntitySpec"
                    },
                    "description": "Floating IP spec\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntityStatus:getFloatingIpsEntityStatus"
                    },
                    "description": "Floating IP output status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "specs",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntitySpec:getFloatingIpsEntitySpec": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntitySpecResource:getFloatingIpsEntitySpecResource"
                    },
                    "description": "Floating IP allocation status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntitySpecResource:getFloatingIpsEntitySpecResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntityStatus:getFloatingIpsEntityStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntityStatusExecutionContext:getFloatingIpsEntityStatusExecutionContext"
                    },
                    "description": "Execution Context of Floating IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "floating_ip Name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFloatingIpsEntityStatusResource:getFloatingIpsEntityStatusResource"
                    },
                    "description": "Floating IP allocation status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the floating_ip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntityStatusExecutionContext:getFloatingIpsEntityStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsEntityStatusResource:getFloatingIpsEntityStatusResource": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingIp": {
                    "type": "string",
                    "description": "Private IP with which the floating IP is associated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vm_nic\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpc\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference",
                "floatingIp",
                "vmNicReference",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFloatingIpsMetadata:getFloatingIpsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMatches": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsClusterStatus:getFoundationCentralClusterDetailsClusterStatus": {
            "properties": {
                "aggregatePercentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterCreationStarted": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail:getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentFoundationIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "foundationSessionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagingStopped": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail:getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aggregatePercentComplete",
                "clusterCreationStarted",
                "clusterProgressDetails",
                "currentFoundationIp",
                "foundationSessionId",
                "imagingStopped",
                "intentPickedUp",
                "nodeProgressDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail:getFoundationCentralClusterDetailsClusterStatusClusterProgressDetail": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "percentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail:getFoundationCentralClusterDetailsClusterStatusNodeProgressDetail": {
            "properties": {
                "imagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagingStopped": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "percentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imagedNodeUuid",
                "imagingStopped",
                "intentPickedUp",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsCommonNetworkSettings:getFoundationCentralClusterDetailsCommonNetworkSettings": {
            "properties": {
                "cvmDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cvmDnsServers",
                "cvmNtpServers",
                "hypervisorDnsServers",
                "hypervisorNtpServers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfig:getFoundationCentralClusterDetailsFoundationInitConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlock:getFoundationCentralClusterDetailsFoundationInitConfigBlock"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigCluster:getFoundationCentralClusterDetailsFoundationInitConfigCluster"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervProductKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIsoUrl": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIsos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso:getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nosPackageUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl:getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blocks",
                "clusters",
                "cvmGateway",
                "cvmNetmask",
                "dnsServers",
                "hypervProductKey",
                "hypervSku",
                "hypervisorGateway",
                "hypervisorIsoUrl",
                "hypervisorIsos",
                "hypervisorNetmask",
                "ipmiGateway",
                "ipmiNetmask",
                "nosPackageUrls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlock:getFoundationCentralClusterDetailsFoundationInitConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlockNode:getFoundationCentralClusterDetailsFoundationInitConfigBlockNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockId",
                "nodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigBlockNode:getFoundationCentralClusterDetailsFoundationInitConfigBlockNode": {
            "properties": {
                "cvmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmVlanId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fcImagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorHostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePosition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cvmIp",
                "cvmVlanId",
                "fcImagedNodeUuid",
                "hardwareAttributesOverride",
                "hypervisor",
                "hypervisorHostname",
                "hypervisorIp",
                "imageNow",
                "ipmiIp",
                "ipv6Address",
                "nodePosition",
                "nodeSerial"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigCluster:getFoundationCentralClusterDetailsFoundationInitConfigCluster": {
            "properties": {
                "clusterExternalIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterInitNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterInitSuccessful": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmDnsServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNtpServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyFactor": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterExternalIp",
                "clusterInitNow",
                "clusterInitSuccessful",
                "clusterMembers",
                "clusterName",
                "cvmDnsServers",
                "cvmNtpServers",
                "redundancyFactor",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso:getFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso": {
            "properties": {
                "hypervisorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256sum": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hypervisorType",
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl:getFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl": {
            "properties": {
                "sha256sum": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListFilters:getFoundationCentralImagedClustersListFilters": {
            "properties": {
                "archived": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedCluster:getFoundationCentralImagedClustersListImagedCluster": {
            "properties": {
                "archived": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterExternalIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterStatus": {
                    "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatus:getFoundationCentralImagedClustersListImagedClusterClusterStatus",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commonNetworkSettings": {
                    "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings:getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdTimestamp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destroyed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "foundationInitConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "foundationInitNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagedClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagedNodeUuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyFactor": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageNodeCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workflowType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "archived",
                "clusterExternalIp",
                "clusterName",
                "clusterSize",
                "clusterStatus",
                "commonNetworkSettings",
                "createdTimestamp",
                "currentTime",
                "destroyed",
                "foundationInitConfigs",
                "foundationInitNodeUuid",
                "imagedClusterUuid",
                "imagedNodeUuidLists",
                "storageNodeCount",
                "workflowType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatus:getFoundationCentralImagedClustersListImagedClusterClusterStatus": {
            "properties": {
                "aggregatePercentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterCreationStarted": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentFoundationIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "foundationSessionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagingStopped": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeProgressDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aggregatePercentComplete",
                "clusterCreationStarted",
                "clusterProgressDetails",
                "currentFoundationIp",
                "foundationSessionId",
                "imagingStopped",
                "intentPickedUp",
                "nodeProgressDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "percentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail:getFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail": {
            "properties": {
                "imagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagingStopped": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intentPickedUp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "percentComplete": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imagedNodeUuid",
                "imagingStopped",
                "intentPickedUp",
                "messageLists",
                "percentComplete",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings:getFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings": {
            "properties": {
                "cvmDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNtpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cvmDnsServers",
                "cvmNtpServers",
                "hypervisorDnsServers",
                "hypervisorNtpServers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervProductKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIsoUrl": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIsos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nosPackageUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blocks",
                "clusters",
                "cvmGateway",
                "cvmNetmask",
                "dnsServers",
                "hypervProductKey",
                "hypervSku",
                "hypervisorGateway",
                "hypervisorIsoUrl",
                "hypervisorIsos",
                "hypervisorNetmask",
                "ipmiGateway",
                "ipmiNetmask",
                "nosPackageUrls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockId",
                "nodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode": {
            "properties": {
                "cvmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmVlanId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fcImagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hardwareAttributesOverride": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorHostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePosition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cvmIp",
                "cvmVlanId",
                "fcImagedNodeUuid",
                "hardwareAttributesOverride",
                "hypervisor",
                "hypervisorHostname",
                "hypervisorIp",
                "imageNow",
                "ipmiIp",
                "ipv6Address",
                "nodePosition",
                "nodeSerial"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster": {
            "properties": {
                "clusterExternalIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterInitNow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterInitSuccessful": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmDnsServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNtpServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyFactor": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterExternalIp",
                "clusterInitNow",
                "clusterInitSuccessful",
                "clusterMembers",
                "clusterName",
                "cvmDnsServers",
                "cvmNtpServers",
                "redundancyFactor",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso": {
            "properties": {
                "hypervisorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256sum": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hypervisorType",
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl:getFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl": {
            "properties": {
                "sha256sum": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sha256sum",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersListMetadata:getFoundationCentralImagedClustersListMetadata": {
            "properties": {
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMatches": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "length",
                "offset",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedNodesListFilters:getFoundationCentralImagedNodesListFilters": {
            "properties": {
                "nodeState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "nutanix:index/getFoundationCentralImagedNodesListImagedNode:getFoundationCentralImagedNodesListImagedNode": {
            "properties": {
                "aosVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiKeyUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "available": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blockSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdTimestamp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmIpv6": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmUp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmVlanId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "foundationVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hardwareAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorHostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagedClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imagedNodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Interface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latestHbTsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "model": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePosition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectVersion": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedFeatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aosVersion",
                "apiKeyUuid",
                "available",
                "blockSerial",
                "createdTimestamp",
                "currentTime",
                "cvmGateway",
                "cvmIp",
                "cvmIpv6",
                "cvmNetmask",
                "cvmUp",
                "cvmUuid",
                "cvmVlanId",
                "foundationVersion",
                "hardwareAttributes",
                "hypervisorGateway",
                "hypervisorHostname",
                "hypervisorIp",
                "hypervisorNetmask",
                "hypervisorType",
                "hypervisorVersion",
                "imagedClusterUuid",
                "imagedNodeUuid",
                "ipmiGateway",
                "ipmiIp",
                "ipmiNetmask",
                "ipv6Interface",
                "latestHbTsLists",
                "model",
                "nodePosition",
                "nodeSerial",
                "nodeState",
                "nodeType",
                "objectVersion",
                "supportedFeatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralImagedNodesListMetadata:getFoundationCentralImagedNodesListMetadata": {
            "properties": {
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMatches": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "length",
                "offset",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralListApiKeysApiKey:getFoundationCentralListApiKeysApiKey": {
            "properties": {
                "alias": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdTimestamp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alias",
                "apiKey",
                "createdTimestamp",
                "currentTime",
                "keyUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationCentralListApiKeysMetadata:getFoundationCentralListApiKeysMetadata": {
            "properties": {
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMatches": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "length",
                "offset",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationDiscoverNodesEntity:getFoundationDiscoverNodesEntity": {
            "properties": {
                "blockId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chassisN": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "model": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getFoundationDiscoverNodesEntityNode:getFoundationDiscoverNodesEntityNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockId",
                "chassisN",
                "model",
                "nodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationDiscoverNodesEntityNode:getFoundationDiscoverNodesEntityNode": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configured": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentCvmVlanTag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentNetworkInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "foundationVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "model": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePosition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nosVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "svmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "configured",
                "currentCvmVlanTag",
                "currentNetworkInterface",
                "foundationVersion",
                "hypervisor",
                "hypervisorVersion",
                "ipv6Address",
                "model",
                "nodePosition",
                "nodeSerial",
                "nodeUuid",
                "nosVersion",
                "svmIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosEsx:getFoundationHypervisorIsosEsx": {
            "properties": {
                "filename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supported": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosHyperv:getFoundationHypervisorIsosHyperv": {
            "properties": {
                "filename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supported": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosKvm:getFoundationHypervisorIsosKvm": {
            "properties": {
                "filename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supported": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosLinux:getFoundationHypervisorIsosLinux": {
            "properties": {
                "filename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supported": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationHypervisorIsosXen:getFoundationHypervisorIsosXen": {
            "properties": {
                "filename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supported": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filename",
                "supported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getFoundationNodeNetworkDetailsNode:getFoundationNodeNetworkDetailsNode": {
            "properties": {
                "cvmGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvmVlanId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorHostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmiNetmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cvmGateway",
                "cvmIp",
                "cvmNetmask",
                "cvmVlanId",
                "error",
                "hypervisorGateway",
                "hypervisorHostname",
                "hypervisorIp",
                "hypervisorNetmask",
                "ipmiGateway",
                "ipmiIp",
                "ipmiNetmask",
                "ipv6Address",
                "nodeSerial"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostCategory:getHostCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostGpuList:getHostGpuList": {
            "properties": {
                "assignable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fraction": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frameBufferSizeMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "guestDriverVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxResolution": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numVgpusAllocated": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numVirtualDisplayHeads": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numaNode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pciAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignable",
                "consumerReference",
                "deviceId",
                "fraction",
                "frameBufferSizeMib",
                "guestDriverVersion",
                "index",
                "licenseLists",
                "maxResolution",
                "mode",
                "name",
                "numVgpusAllocated",
                "numVirtualDisplayHeads",
                "numaNode",
                "pciAddress",
                "status",
                "uuid",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostHostDisksReferenceList:getHostHostDisksReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntity:getHostsEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API version.\n* `gpu_driver_version`: - Host GPU driver version.\n* `failover_cluster`: - Hyper-V failover cluster.\n* `ipmi`: - Host IPMI info.\n* `cpu_model`: - Host CPU model.\n* `host_nics_id_list`: - Host NICs.\n* `num_cpu_sockets`: - Number of CPU sockets.\n* `windows_domain`: - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.\n* `gpu_list`: - List of GPUs on the host.\n* `serial_number`: - Node serial number.\n* `cpu_capacity_hz`: - Host CPU capacity.\n* `memory_capacity_mib`: - Host memory capacity in MiB.\n* `host_disks_reference_list`: - The reference to a disk.\n* `monitoring_state`: - Host monitoring status.\n* `hypervisor`: - Host Hypervisor information.\n* `host_type`: - Host type.\n* `num_cpu_cores`: - Number of CPU cores on Host.\n* `rackable_unit_reference`: - The reference to a rackable_unit.\n* `controller_vm`: - Host controller vm information.\n* `block`: - Host block config info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "block": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getHostsEntityCategory:getHostsEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controllerVm": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuCapacityHz": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuModel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverCluster": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpuDriverVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpuLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getHostsEntityGpuList:getHostsEntityGpuList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostDisksReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getHostsEntityHostDisksReferenceList:getHostsEntityHostDisksReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostNicsIdLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hypervisor": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipmi": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryCapacityMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoringState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numCpuCores": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numCpuSockets": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rackableUnitReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serialNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowsDomain": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "block",
                "categories",
                "clusterReference",
                "controllerVm",
                "cpuCapacityHz",
                "cpuModel",
                "failoverCluster",
                "gpuDriverVersion",
                "gpuLists",
                "hostDisksReferenceLists",
                "hostNicsIdLists",
                "hostType",
                "hypervisor",
                "ipmi",
                "memoryCapacityMib",
                "metadata",
                "monitoringState",
                "name",
                "numCpuCores",
                "numCpuSockets",
                "ownerReference",
                "projectReference",
                "rackableUnitReference",
                "serialNumber",
                "windowsDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntityCategory:getHostsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntityGpuList:getHostsEntityGpuList": {
            "properties": {
                "assignable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fraction": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frameBufferSizeMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "guestDriverVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxResolution": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numVgpusAllocated": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numVirtualDisplayHeads": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numaNode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pciAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignable",
                "consumerReference",
                "deviceId",
                "fraction",
                "frameBufferSizeMib",
                "guestDriverVersion",
                "index",
                "licenseLists",
                "maxResolution",
                "mode",
                "name",
                "numVgpusAllocated",
                "numVirtualDisplayHeads",
                "numaNode",
                "pciAddress",
                "status",
                "uuid",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getHostsEntityHostDisksReferenceList:getHostsEntityHostDisksReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getImageCategory:getImageCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getImageClusterReference:getImageClusterReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getImageCurrentClusterReferenceList:getImageCurrentClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterEtcdNodePool:getKarbonClusterEtcdNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterEtcdNodePoolAhvConfig:getKarbonClusterEtcdNodePoolAhvConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterEtcdNodePoolNode:getKarbonClusterEtcdNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterEtcdNodePoolAhvConfig:getKarbonClusterEtcdNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterEtcdNodePoolNode:getKarbonClusterEtcdNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterMasterNodePool:getKarbonClusterMasterNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterMasterNodePoolAhvConfig:getKarbonClusterMasterNodePoolAhvConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterMasterNodePoolNode:getKarbonClusterMasterNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterMasterNodePoolAhvConfig:getKarbonClusterMasterNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterMasterNodePoolNode:getKarbonClusterMasterNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterWorkerNodePool:getKarbonClusterWorkerNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterWorkerNodePoolAhvConfig:getKarbonClusterWorkerNodePoolAhvConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClusterWorkerNodePoolNode:getKarbonClusterWorkerNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterWorkerNodePoolAhvConfig:getKarbonClusterWorkerNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClusterWorkerNodePoolNode:getKarbonClusterWorkerNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersCluster:getKarbonClustersCluster": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "etcdNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterEtcdNodePool:getKarbonClustersClusterEtcdNodePool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeapiServerIpv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterMasterNodePool:getKarbonClustersClusterMasterNodePool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workerNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterWorkerNodePool:getKarbonClustersClusterWorkerNodePool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deploymentType",
                "etcdNodePools",
                "kubeapiServerIpv4Address",
                "masterNodePools",
                "name",
                "status",
                "uuid",
                "version",
                "workerNodePools"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterEtcdNodePool:getKarbonClustersClusterEtcdNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterEtcdNodePoolAhvConfig:getKarbonClustersClusterEtcdNodePoolAhvConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterEtcdNodePoolNode:getKarbonClustersClusterEtcdNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterEtcdNodePoolAhvConfig:getKarbonClustersClusterEtcdNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterEtcdNodePoolNode:getKarbonClustersClusterEtcdNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterMasterNodePool:getKarbonClustersClusterMasterNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterMasterNodePoolAhvConfig:getKarbonClustersClusterMasterNodePoolAhvConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterMasterNodePoolNode:getKarbonClustersClusterMasterNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterMasterNodePoolAhvConfig:getKarbonClustersClusterMasterNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterMasterNodePoolNode:getKarbonClustersClusterMasterNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterWorkerNodePool:getKarbonClustersClusterWorkerNodePool": {
            "properties": {
                "ahvConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterWorkerNodePoolAhvConfig:getKarbonClustersClusterWorkerNodePoolAhvConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeOsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getKarbonClustersClusterWorkerNodePoolNode:getKarbonClustersClusterWorkerNodePoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ahvConfigs",
                "name",
                "nodeOsVersion",
                "nodes",
                "numInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterWorkerNodePoolAhvConfig:getKarbonClustersClusterWorkerNodePoolAhvConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prismElementClusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "diskMib",
                "memoryMib",
                "networkUuid",
                "prismElementClusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonClustersClusterWorkerNodePoolNode:getKarbonClustersClusterWorkerNodePoolNode": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "ipv4Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getKarbonPrivateRegistriesPrivateRegistry:getKarbonPrivateRegistriesPrivateRegistry": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowList:getNetworkSecurityRuleAdRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListFilterParam:getNetworkSecurityRuleAdRuleInboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListFilterParam:getNetworkSecurityRuleAdRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowList:getNetworkSecurityRuleAdRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAdRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAdRuleTargetGroupFilterParam:getNetworkSecurityRuleAdRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowList:getNetworkSecurityRuleAppRuleInboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListFilterParam:getNetworkSecurityRuleAppRuleInboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListFilterParam:getNetworkSecurityRuleAppRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList:getNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowList:getNetworkSecurityRuleAppRuleOutboundAllowList": {
            "properties": {
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam:getNetworkSecurityRuleAppRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleAppRuleTargetGroupFilterParam:getNetworkSecurityRuleAppRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleCategory:getNetworkSecurityRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam:getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam:getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowList:getNetworkSecurityRuleQuarantineRuleInboundAllowList": {
            "properties": {
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowList:getNetworkSecurityRuleQuarantineRuleOutboundAllowList": {
            "properties": {
                "addressGroupInclusionLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnetPrefixLength": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSpecificationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroupLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressGroupInclusionLists",
                "expirationTime",
                "filterKindLists",
                "filterParams",
                "filterType",
                "icmpTypeCodeLists",
                "ipSubnet",
                "ipSubnetPrefixLength",
                "networkFunctionChainReference",
                "peerSpecificationType",
                "protocol",
                "serviceGroupLists",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam:getNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList:getNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam:getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpec:getPbrSpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the PBR\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResource:getPbrSpecResource"
                    },
                    "description": "PBR resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResource:getPbrSpecResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceAction:getPbrSpecResourceAction"
                    },
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceDestination:getPbrSpecResourceDestination"
                    },
                    "description": "destination address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameter:getPbrSpecResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceSource:getPbrSpecResourceSource"
                    },
                    "description": "source address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceAction:getPbrSpecResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceDestination:getPbrSpecResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameter:getPbrSpecResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterIcmp:getPbrSpecResourceProtocolParameterIcmp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterTcp:getPbrSpecResourceProtocolParameterTcp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterUdp:getPbrSpecResourceProtocolParameterUdp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterIcmp:getPbrSpecResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterTcp:getPbrSpecResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterTcpSourcePortRangeList:getPbrSpecResourceProtocolParameterTcpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrSpecResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterTcpSourcePortRangeList:getPbrSpecResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterUdp:getPbrSpecResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrSpecResourceProtocolParameterUdpSourcePortRangeList:getPbrSpecResourceProtocolParameterUdpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrSpecResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceProtocolParameterUdpSourcePortRangeList:getPbrSpecResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrSpecResourceSource:getPbrSpecResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatus:getPbrStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusExecutionContext:getPbrStatusExecutionContext"
                    },
                    "description": "Execution Context of PBR.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PBR\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResource:getPbrStatusResource"
                    },
                    "description": "PBR resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the PBR\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusExecutionContext:getPbrStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResource:getPbrStatusResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceAction:getPbrStatusResourceAction"
                    },
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceDestination:getPbrStatusResourceDestination"
                    },
                    "description": "destination address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameter:getPbrStatusResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routingPolicyCounters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceRoutingPolicyCounter:getPbrStatusResourceRoutingPolicyCounter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceSource:getPbrStatusResourceSource"
                    },
                    "description": "source address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "routingPolicyCounters",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceAction:getPbrStatusResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceDestination:getPbrStatusResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameter:getPbrStatusResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterIcmp:getPbrStatusResourceProtocolParameterIcmp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterTcp:getPbrStatusResourceProtocolParameterTcp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterUdp:getPbrStatusResourceProtocolParameterUdp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterIcmp:getPbrStatusResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterTcp:getPbrStatusResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrStatusResourceProtocolParameterTcpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrStatusResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrStatusResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterUdp:getPbrStatusResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrStatusResourceProtocolParameterUdpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrStatusResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrStatusResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceRoutingPolicyCounter:getPbrStatusResourceRoutingPolicyCounter": {
            "properties": {
                "byteCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packetCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "byteCount",
                "packetCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrStatusResourceSource:getPbrStatusResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntity:getPbrsEntity": {
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpec:getPbrsEntitySpec"
                    },
                    "description": "PBR spec\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatus:getPbrsEntityStatus"
                    },
                    "description": "PBR output status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "specs",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpec:getPbrsEntitySpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the PBR\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResource:getPbrsEntitySpecResource"
                    },
                    "description": "PBR resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResource:getPbrsEntitySpecResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceAction:getPbrsEntitySpecResourceAction"
                    },
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceDestination:getPbrsEntitySpecResourceDestination"
                    },
                    "description": "destination address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameter:getPbrsEntitySpecResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceSource:getPbrsEntitySpecResourceSource"
                    },
                    "description": "source address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceAction:getPbrsEntitySpecResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceDestination:getPbrsEntitySpecResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameter:getPbrsEntitySpecResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterIcmp:getPbrsEntitySpecResourceProtocolParameterIcmp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcp:getPbrsEntitySpecResourceProtocolParameterTcp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdp:getPbrsEntitySpecResourceProtocolParameterUdp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterIcmp:getPbrsEntitySpecResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcp:getPbrsEntitySpecResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdp:getPbrsEntitySpecResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntitySpecResourceSource:getPbrsEntitySpecResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatus:getPbrsEntityStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusExecutionContext:getPbrsEntityStatusExecutionContext"
                    },
                    "description": "Execution Context of PBR.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PBR\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResource:getPbrsEntityStatusResource"
                    },
                    "description": "PBR resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the PBR\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusExecutionContext:getPbrsEntityStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResource:getPbrsEntityStatusResource": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceAction:getPbrsEntityStatusResourceAction"
                    },
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceDestination:getPbrsEntityStatusResourceDestination"
                    },
                    "description": "destination address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Policy in reverse direction.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameter:getPbrsEntityStatusResourceProtocolParameter"
                    },
                    "description": "Routing policy IP protocol parameters\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of routing policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routingPolicyCounters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceRoutingPolicyCounter:getPbrsEntityStatusResourceRoutingPolicyCounter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceSource:getPbrsEntityStatusResourceSource"
                    },
                    "description": "source address of an IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "destinations",
                "isBidirectional",
                "priority",
                "protocolParameters",
                "protocolType",
                "routingPolicyCounters",
                "sources",
                "vpcReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceAction:getPbrsEntityStatusResourceAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "serviceIpLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceDestination:getPbrsEntityStatusResourceDestination": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameter:getPbrsEntityStatusResourceProtocolParameter": {
            "properties": {
                "icmps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterIcmp:getPbrsEntityStatusResourceProtocolParameterIcmp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcp:getPbrsEntityStatusResourceProtocolParameterTcp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdp:getPbrsEntityStatusResourceProtocolParameterUdp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmps",
                "protocolNumber",
                "tcps",
                "udps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterIcmp:getPbrsEntityStatusResourceProtocolParameterIcmp": {
            "properties": {
                "icmpCode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpCode",
                "icmpType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcp:getPbrsEntityStatusResourceProtocolParameterTcp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdp:getPbrsEntityStatusResourceProtocolParameterUdp": {
            "properties": {
                "destinationPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPortRangeLists",
                "sourcePortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList:getPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceRoutingPolicyCounter:getPbrsEntityStatusResourceRoutingPolicyCounter": {
            "properties": {
                "byteCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packetCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "byteCount",
                "packetCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsEntityStatusResourceSource:getPbrsEntityStatusResourceSource": {
            "properties": {
                "addressType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPbrsMetadata:getPbrsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMatches": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionCategory:getPermissionCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionField:getPermissionField": {
            "properties": {
                "fieldMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldNameLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fieldMode",
                "fieldNameLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsEntity:getPermissionsEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPermissionsEntityCategory:getPermissionsEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getPermissionsEntityField:getPermissionsEntityField"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "categories",
                "description",
                "fields",
                "kind",
                "metadata",
                "name",
                "operation",
                "ownerReference",
                "projectReference",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsEntityCategory:getPermissionsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsEntityField:getPermissionsEntityField": {
            "properties": {
                "fieldMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldNameLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fieldMode",
                "fieldNameLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getPermissionsMetadata:getPermissionsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectAccountReferenceList:getProjectAccountReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectCategory:getProjectCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectEnvironmentReferenceList:getProjectEnvironmentReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectExternalNetworkList:getProjectExternalNetworkList": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectExternalUserGroupReferenceList:getProjectExternalUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectResourceDomain:getProjectResourceDomain": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectResourceDomainResource:getProjectResourceDomainResource"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectResourceDomainResource:getProjectResourceDomainResource": {
            "properties": {
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "integer",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "limit",
                "resourceType",
                "units",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectSubnetReferenceList:getProjectSubnetReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectUserReferenceList:getProjectUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntity:getProjectsEntity": {
            "properties": {
                "accountReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityAccountReferenceList:getProjectsEntityAccountReferenceList"
                    },
                    "description": "List of accounts associated with the project.\n* `account_reference_list.#.kind` - The kind name. Default value is `account`\n* `account_reference_list.#.uuid` - The UUID of an account.\n* `account_reference_list.#.name` - The name of an account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityCategory:getProjectsEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n* `default_subnet_reference.kind` - The kind name. Default value is `subnet`\n* `default_subnet_reference.uuid` - The UUID of a subnet.\n* `default_subnet_reference.name` - The name of a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityEnvironmentReferenceList:getProjectsEntityEnvironmentReferenceList"
                    },
                    "description": "List of environments associated with the project.\n* `environment_reference_list.#.kind` - The kind name. Default value is `environment`\n* `environment_reference_list.#.uuid` - The UUID of an environment.\n* `environment_reference_list.#.name` - The name of an environment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalNetworkLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityExternalNetworkList:getProjectsEntityExternalNetworkList"
                    },
                    "description": "List of external networks associated with the project.\n* `external_network_list.#.uuid` - The UUID of a network.\n* `external_network_list.#.name` - The name of a network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalUserGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityExternalUserGroupReferenceList:getProjectsEntityExternalUserGroupReferenceList"
                    },
                    "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - The UUID of a user_group\n* `external_user_group_reference_list.#.name` - The name of a user_group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isDefault": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityResourceDomain:getProjectsEntityResourceDomain"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntitySubnetReferenceList:getProjectsEntitySubnetReferenceList"
                    },
                    "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - The UUID of a subnet\n* `subnet_reference_list.#.name` - The name of a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityUserReferenceList:getProjectsEntityUserReferenceList"
                    },
                    "description": "List of users in the project.\n* `user_reference_list.#.kind` - The kind name. Default value is `user`\n* `user_reference_list.#.uuid` - The UUID of a user\n* `user_reference_list.#.name` - The name of a user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountReferenceLists",
                "apiVersion",
                "categories",
                "defaultSubnetReference",
                "description",
                "environmentReferenceLists",
                "externalNetworkLists",
                "externalUserGroupReferenceLists",
                "isDefault",
                "metadata",
                "name",
                "ownerReference",
                "projectReference",
                "resourceDomains",
                "state",
                "subnetReferenceLists",
                "userReferenceLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityAccountReferenceList:getProjectsEntityAccountReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityCategory:getProjectsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityEnvironmentReferenceList:getProjectsEntityEnvironmentReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityExternalNetworkList:getProjectsEntityExternalNetworkList": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityExternalUserGroupReferenceList:getProjectsEntityExternalUserGroupReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityResourceDomain:getProjectsEntityResourceDomain": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProjectsEntityResourceDomainResource:getProjectsEntityResourceDomainResource"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityResourceDomainResource:getProjectsEntityResourceDomainResource": {
            "properties": {
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "integer",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "limit",
                "resourceType",
                "units",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntitySubnetReferenceList:getProjectsEntitySubnetReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProjectsEntityUserReferenceList:getProjectsEntityUserReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityList:getProtectionRuleAvailabilityZoneConnectivityList": {
            "properties": {
                "destinationAvailabilityZoneIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotScheduleLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceAvailabilityZoneIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationAvailabilityZoneIndex",
                "snapshotScheduleLists",
                "sourceAvailabilityZoneIndex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList": {
            "properties": {
                "autoSuspendTimeoutSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryPointObjectiveSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoSuspendTimeoutSecs",
                "localSnapshotRetentionPolicies",
                "recoveryPointObjectiveSecs",
                "remoteSnapshotRetentionPolicies",
                "snapshotType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleCategory:getProtectionRuleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleCategoryFilter:getProtectionRuleCategoryFilter": {
            "properties": {
                "kindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRuleCategoryFilterParam:getProtectionRuleCategoryFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kindLists",
                "params",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleCategoryFilterParam:getProtectionRuleCategoryFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleOrderedAvailabilityZoneList:getProtectionRuleOrderedAvailabilityZoneList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleOwnerReference:getProtectionRuleOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRuleProjectReference:getProtectionRuleProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntity:getProtectionRulesEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityZoneConnectivityLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityList:getProtectionRulesEntityAvailabilityZoneConnectivityList"
                    },
                    "description": "(Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.\n* `availability_zone_connectivity_list.destination_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.source_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list` - (Optional/Computed) Snapshot schedules for the pair of the availability zones.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) \"A recovery point objective (RPO) is the maximum acceptable amount of data loss.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityCategory:getProtectionRulesEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categoryFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityCategoryFilter:getProtectionRulesEntityCategoryFilter"
                    },
                    "description": "(Optional/Computed)\n* `category_filter.0.type` - (Optional/Computed) The type of the filter being used.\n* `category_filter.0.kind_list` - (Optional/Computed) List of kinds associated with this filter.\n* `category_filter.0.params` - (Optional/Computed) A list of category key and list of values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderedAvailabilityZoneLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityOrderedAvailabilityZoneList:getProtectionRulesEntityOrderedAvailabilityZoneList"
                    },
                    "description": "(Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.\n* `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.\n* `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityOwnerReference:getProtectionRulesEntityOwnerReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityProjectReference:getProtectionRulesEntityProjectReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "availabilityZoneConnectivityLists",
                "categories",
                "categoryFilters",
                "description",
                "metadata",
                "name",
                "orderedAvailabilityZoneLists",
                "ownerReferences",
                "projectReferences",
                "startTime",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityList:getProtectionRulesEntityAvailabilityZoneConnectivityList": {
            "properties": {
                "destinationAvailabilityZoneIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotScheduleLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceAvailabilityZoneIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationAvailabilityZoneIndex",
                "snapshotScheduleLists",
                "sourceAvailabilityZoneIndex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList": {
            "properties": {
                "autoSuspendTimeoutSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryPointObjectiveSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteSnapshotRetentionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoSuspendTimeoutSecs",
                "localSnapshotRetentionPolicies",
                "recoveryPointObjectiveSecs",
                "remoteSnapshotRetentionPolicies",
                "snapshotType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy:getProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy": {
            "properties": {
                "numSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicyMultiple": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollupRetentionPolicySnapshotIntervalType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "numSnapshots",
                "rollupRetentionPolicyMultiple",
                "rollupRetentionPolicySnapshotIntervalType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityCategory:getProtectionRulesEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityCategoryFilter:getProtectionRulesEntityCategoryFilter": {
            "properties": {
                "kindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getProtectionRulesEntityCategoryFilterParam:getProtectionRulesEntityCategoryFilterParam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kindLists",
                "params",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityCategoryFilterParam:getProtectionRulesEntityCategoryFilterParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityOrderedAvailabilityZoneList:getProtectionRulesEntityOrderedAvailabilityZoneList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterUuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityOwnerReference:getProtectionRulesEntityOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getProtectionRulesEntityProjectReference:getProtectionRulesEntityProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanCategory:getRecoveryPlanCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanOwnerReference:getRecoveryPlanOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameter:getRecoveryPlanParameter": {
            "properties": {
                "floatingIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingList:getRecoveryPlanParameterNetworkMappingList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "floatingIpAssignmentLists",
                "networkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "vmIpAssignmentLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList": {
            "properties": {
                "recoveryFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicInformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "recoveryFloatingIpConfigs",
                "testFloatingIpConfigs",
                "vmNicInformations",
                "vmReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shouldAllocateDynamically": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shouldAllocateDynamically": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingList:getRecoveryPlanParameterNetworkMappingList": {
            "properties": {
                "areNetworksStretched": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityZoneNetworkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "areNetworksStretched",
                "availabilityZoneNetworkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterReferenceLists",
                "recoveryIpAssignmentLists",
                "recoveryNetworks",
                "testIpAssignmentLists",
                "testNetworks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVpcReference": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVpcReference": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanProjectReference:getRecoveryPlanProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageList:getRecoveryPlanStageList": {
            "properties": {
                "delayTimeSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageWorks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWork:getRecoveryPlanStageListStageWork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delayTimeSecs",
                "stageUuid",
                "stageWorks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWork:getRecoveryPlanStageListStageWork": {
            "properties": {
                "recoverEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntity:getRecoveryPlanStageListStageWorkRecoverEntity"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "recoverEntities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntity:getRecoveryPlanStageListStageWorkRecoverEntity": {
            "properties": {
                "entityInfoLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityInfoLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList": {
            "properties": {
                "anyEntityReferenceKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyEntityReferenceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyEntityReferenceUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyEntityReferenceKind",
                "anyEntityReferenceName",
                "anyEntityReferenceUuid",
                "categories",
                "scriptLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList": {
            "properties": {
                "enableScriptExec": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableScriptExec",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntity:getRecoveryPlansEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityCategory:getRecoveryPlansEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityOwnerReference:getRecoveryPlansEntityOwnerReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameter:getRecoveryPlansEntityParameter"
                    },
                    "description": "(Required) Parameters for the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list` - (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n* `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.\n* `parameters.0.network_mapping_list` - (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityProjectReference:getRecoveryPlansEntityProjectReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageList:getRecoveryPlansEntityStageList"
                    },
                    "description": "(Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.\n* `stage_list.stage_uuid` - (Optional/Computed) UUID of stage.\n* `stage_list.delay_time_secs` - (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.\n* `stage_list.stage_work` - (Required) A stage specifies the work to be performed when the Recovery Plan is executed.\n* `stage_list.stage_work.0.recover_entities` - (Optional/Computed) Information about entities to be recovered.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list` - (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReferences",
                "parameters",
                "projectReferences",
                "stageLists",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityCategory:getRecoveryPlansEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityOwnerReference:getRecoveryPlansEntityOwnerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameter:getRecoveryPlansEntityParameter": {
            "properties": {
                "floatingIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "floatingIpAssignmentLists",
                "networkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "vmIpAssignmentLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList": {
            "properties": {
                "recoveryFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testFloatingIpConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicInformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "recoveryFloatingIpConfigs",
                "testFloatingIpConfigs",
                "vmNicInformations",
                "vmReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shouldAllocateDynamically": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shouldAllocateDynamically": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "shouldAllocateDynamically"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference:getRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingList": {
            "properties": {
                "areNetworksStretched": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityZoneNetworkMappingLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "areNetworksStretched",
                "availabilityZoneNetworkMappingLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList": {
            "properties": {
                "availabilityZoneUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recoveryNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testIpAssignmentLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZoneUrl",
                "clusterReferenceLists",
                "recoveryIpAssignmentLists",
                "recoveryNetworks",
                "testIpAssignmentLists",
                "testNetworks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVpcReference": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList": {
            "properties": {
                "ipConfigLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmReference": {
                    "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipConfigLists",
                "vmReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVpcReference": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetLists",
                "useVpcReference",
                "virtualNetworkReferences",
                "vpcReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList": {
            "properties": {
                "externalConnectivityState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalConnectivityState",
                "gatewayIp",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference:getRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityProjectReference:getRecoveryPlansEntityProjectReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "(Required) The kind name (Default value: `project`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "(Required) the UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageList:getRecoveryPlansEntityStageList": {
            "properties": {
                "delayTimeSecs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageWorks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWork:getRecoveryPlansEntityStageListStageWork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delayTimeSecs",
                "stageUuid",
                "stageWorks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWork:getRecoveryPlansEntityStageListStageWork": {
            "properties": {
                "recoverEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntity:getRecoveryPlansEntityStageListStageWorkRecoverEntity"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "recoverEntities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntity:getRecoveryPlansEntityStageListStageWorkRecoverEntity": {
            "properties": {
                "entityInfoLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityInfoLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList": {
            "properties": {
                "anyEntityReferenceKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyEntityReferenceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyEntityReferenceUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyEntityReferenceKind",
                "anyEntityReferenceName",
                "anyEntityReferenceUuid",
                "categories",
                "scriptLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Optional) the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "value of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList:getRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList": {
            "properties": {
                "enableScriptExec": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableScriptExec",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRoleCategory:getRoleCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolePermissionReferenceList:getRolePermissionReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesEntity:getRolesEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `state`: - The state of the role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRolesEntityCategory:getRolesEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissionReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getRolesEntityPermissionReferenceList:getRolesEntityPermissionReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "permissionReferenceLists",
                "projectReference",
                "roleId",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesEntityCategory:getRolesEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesEntityPermissionReferenceList:getRolesEntityPermissionReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getRolesMetadata:getRolesMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceList:getServiceGroupServiceList": {
            "properties": {
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupServiceListIcmpTypeCodeList:getServiceGroupServiceListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupServiceListTcpPortRangeList:getServiceGroupServiceListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupServiceListUdpPortRangeList:getServiceGroupServiceListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpTypeCodeLists",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceListIcmpTypeCodeList:getServiceGroupServiceListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceListTcpPortRangeList:getServiceGroupServiceListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupServiceListUdpPortRangeList:getServiceGroupServiceListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntity:getServiceGroupsEntity": {
            "properties": {
                "associatedPoliciesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityAssociatedPoliciesList:getServiceGroupsEntityAssociatedPoliciesList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroup:getServiceGroupsEntityServiceGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "associatedPoliciesLists",
                "serviceGroups",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityAssociatedPoliciesList:getServiceGroupsEntityAssociatedPoliciesList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroup:getServiceGroupsEntityServiceGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSystemDefined": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceList:getServiceGroupsEntityServiceGroupServiceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "isSystemDefined",
                "name",
                "serviceLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceList:getServiceGroupsEntityServiceGroupServiceList": {
            "properties": {
                "icmpTypeCodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList:getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList:getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRangeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList:getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "icmpTypeCodeLists",
                "protocol",
                "tcpPortRangeLists",
                "udpPortRangeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList:getServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList:getServiceGroupsEntityServiceGroupServiceListTcpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList:getServiceGroupsEntityServiceGroupServiceListUdpPortRangeList": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "startPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getServiceGroupsMetadata:getServiceGroupsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpec:getStaticRoutesSpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "vpc_route_table Name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResource:getStaticRoutesSpecResource"
                    },
                    "description": "VPC route table resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResource:getStaticRoutesSpecResource": {
            "properties": {
                "defaultRouteNexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResourceDefaultRouteNexthop:getStaticRoutesSpecResourceDefaultRouteNexthop"
                    },
                    "description": "default routes (present in spec resource)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResourceStaticRoutesList:getStaticRoutesSpecResourceStaticRoutesList"
                    },
                    "description": "list of static routes\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultRouteNexthops",
                "staticRoutesLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResourceDefaultRouteNexthop:getStaticRoutesSpecResourceDefaultRouteNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResourceStaticRoutesList:getStaticRoutesSpecResourceStaticRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesSpecResourceStaticRoutesListNexthop:getStaticRoutesSpecResourceStaticRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destination",
                "nexthops"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesSpecResourceStaticRoutesListNexthop:getStaticRoutesSpecResourceStaticRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatus:getStaticRoutesStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusExecutionContext:getStaticRoutesStatusExecutionContext"
                    },
                    "description": "Execution Context of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResource:getStaticRoutesStatusResource"
                    },
                    "description": "VPC route table resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the vpc_route_table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusExecutionContext:getStaticRoutesStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResource:getStaticRoutesStatusResource": {
            "properties": {
                "defaultRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDefaultRoute:getStaticRoutesStatusResourceDefaultRoute"
                    },
                    "description": "default route. (present in status resource only )\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dynamicRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDynamicRoutesList:getStaticRoutesStatusResourceDynamicRoutesList"
                    },
                    "description": "list of dynamic routes (present in status resource only)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceLocalRoutesList:getStaticRoutesStatusResourceLocalRoutesList"
                    },
                    "description": "list of local routes (present in status resource only )\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceStaticRoutesList:getStaticRoutesStatusResourceStaticRoutesList"
                    },
                    "description": "list of static routes\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultRoutes",
                "dynamicRoutesLists",
                "localRoutesLists",
                "staticRoutesLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDefaultRoute:getStaticRoutesStatusResourceDefaultRoute": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDefaultRouteNexthop:getStaticRoutesStatusResourceDefaultRouteNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDefaultRouteNexthop:getStaticRoutesStatusResourceDefaultRouteNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthopIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDynamicRoutesList:getStaticRoutesStatusResourceDynamicRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceDynamicRoutesListNexthop:getStaticRoutesStatusResourceDynamicRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceDynamicRoutesListNexthop:getStaticRoutesStatusResourceDynamicRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthopIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceLocalRoutesList:getStaticRoutesStatusResourceLocalRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceLocalRoutesListNexthop:getStaticRoutesStatusResourceLocalRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceLocalRoutesListNexthop:getStaticRoutesStatusResourceLocalRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthopIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceStaticRoutesList:getStaticRoutesStatusResourceStaticRoutesList": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "destination ip address with prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether this route is currently active. Present in Status Resources.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getStaticRoutesStatusResourceStaticRoutesListNexthop:getStaticRoutesStatusResourceStaticRoutesListNexthop"
                    },
                    "description": "Targeted link to use as the nexthop in a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destination",
                "isActive",
                "nexthops",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getStaticRoutesStatusResourceStaticRoutesListNexthop:getStaticRoutesStatusResourceStaticRoutesListNexthop": {
            "properties": {
                "directConnectVirtualInterfaceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a direct_connect_virtual_interface\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a subnet\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nexthopIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The reference to a vpn_connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directConnectVirtualInterfaceReference",
                "externalSubnetReference",
                "localSubnetReference",
                "nexthopIpAddress",
                "vpnConnectionReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetAdditionalFilter:getSubnetAdditionalFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "nutanix:index/getSubnetCategory:getSubnetCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetMessageList:getSubnetMessageList": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reason": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "details",
                "message",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsEntity:getSubnetsEntity": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getSubnetsEntityCategory:getSubnetsEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultGatewayIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dhcpDomainNameServerLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dhcpDomainSearchLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dhcpOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dhcpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dhcpServerAddressPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableNat": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipConfigPoolListRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isExternal": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getSubnetsEntityMessageList:getSubnetsEntityMessageList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vswitchName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "availabilityZoneReference",
                "categories",
                "clusterName",
                "clusterReference",
                "clusterUuid",
                "defaultGatewayIp",
                "description",
                "dhcpDomainNameServerLists",
                "dhcpDomainSearchLists",
                "dhcpOptions",
                "dhcpServerAddress",
                "dhcpServerAddressPort",
                "enableNat",
                "ipConfigPoolListRanges",
                "isExternal",
                "messageLists",
                "metadata",
                "name",
                "networkFunctionChainReference",
                "ownerReference",
                "prefixLength",
                "projectReference",
                "state",
                "subnetId",
                "subnetIp",
                "subnetName",
                "subnetType",
                "vlanId",
                "vpcReference",
                "vswitchName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsEntityCategory:getSubnetsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsEntityMessageList:getSubnetsEntityMessageList": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reason": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "details",
                "message",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getSubnetsMetadata:getSubnetsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserAccessControlPolicyReferenceList:getUserAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserCategory:getUserCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserDirectoryServiceUser:getUserDirectoryServiceUser": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserDirectoryServiceUserDirectoryServiceReference:getUserDirectoryServiceUserDirectoryServiceReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "userPrincipalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserDirectoryServiceUserDirectoryServiceReference:getUserDirectoryServiceUserDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupAccessControlPolicyReferenceList:getUserGroupAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupCategory:getUserGroupCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupDirectoryServiceUserGroup:getUserGroupDirectoryServiceUserGroup": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupDirectoryServiceUserGroupDirectoryServiceReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distinguishedName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "distinguishedName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupDirectoryServiceUserGroupDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupProjectReferenceList:getUserGroupProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntity:getUserGroupsEntity": {
            "properties": {
                "accessControlPolicyReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityAccessControlPolicyReferenceList:getUserGroupsEntityAccessControlPolicyReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `metadata`: - The user group kind metadata.\n* `categories`: - The Categories for the user group.\n* `owner_reference`: - The reference to a user.\n* `project_reference`: - The reference to a project.\n* `user_group_type`: - The type of the user group.\n* `display_name`: - The display name of the user group.\n* `directory_service_user_group`: - A Directory Service User Group.\n* `project_reference_list`: - A list of projects the user is part of. See #reference for more details.\n* `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.\n* `state`: - The state of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityCategory:getUserGroupsEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "directoryServiceUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityDirectoryServiceUserGroup:getUserGroupsEntityDirectoryServiceUserGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityProjectReferenceList:getUserGroupsEntityProjectReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userGroupType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessControlPolicyReferenceLists",
                "apiVersion",
                "categories",
                "directoryServiceUserGroups",
                "displayName",
                "metadata",
                "ownerReference",
                "projectReferenceLists",
                "state",
                "userGroupType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityAccessControlPolicyReferenceList:getUserGroupsEntityAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityCategory:getUserGroupsEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityDirectoryServiceUserGroup:getUserGroupsEntityDirectoryServiceUserGroup": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distinguishedName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "distinguishedName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference:getUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsEntityProjectReferenceList:getUserGroupsEntityProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserGroupsMetadata:getUserGroupsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserIdentityProviderUser:getUserIdentityProviderUser": {
            "properties": {
                "identityProviderReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUserIdentityProviderUserIdentityProviderReference:getUserIdentityProviderUserIdentityProviderReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "identityProviderReferences",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserIdentityProviderUserIdentityProviderReference:getUserIdentityProviderUserIdentityProviderReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUserProjectReferenceList:getUserProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntity:getUsersEntity": {
            "properties": {
                "accessControlPolicyReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityAccessControlPolicyReferenceList:getUsersEntityAccessControlPolicyReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `state`: - The state of the entity.\n* `name`: - The name of the user.\n* `user_type`: - The name of the user.\n* `display_name`: - The display name of the user (common name) provided by the directory service.\n* `project_reference_list`: - A list of projects the user is part of. See #reference for more details.\n* `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.\n* `directory_service_user`: - (Optional) The directory service user configuration. See below for more information.\n* `identity_provider_user`: - (Optional) (Optional) The identity provider user configuration. See below for more information.\n* `categories`: - (Optional) Categories for the user.\n* `project_reference`: - (Optional) The reference to a project.\n* `owner_reference`: - (Optional) The reference to a user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityCategory:getUsersEntityCategory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "directoryServiceUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityDirectoryServiceUser:getUsersEntityDirectoryServiceUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "identityProviderUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityIdentityProviderUser:getUsersEntityIdentityProviderUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityProjectReferenceList:getUsersEntityProjectReferenceList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessControlPolicyReferenceLists",
                "apiVersion",
                "categories",
                "directoryServiceUsers",
                "displayName",
                "identityProviderUsers",
                "metadata",
                "name",
                "ownerReference",
                "projectReferenceLists",
                "state",
                "userType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityAccessControlPolicyReferenceList:getUsersEntityAccessControlPolicyReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityCategory:getUsersEntityCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityDirectoryServiceUser:getUsersEntityDirectoryServiceUser": {
            "properties": {
                "defaultUserPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "directoryServiceReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityDirectoryServiceUserDirectoryServiceReference:getUsersEntityDirectoryServiceUserDirectoryServiceReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultUserPrincipalName",
                "directoryServiceReferences",
                "userPrincipalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityDirectoryServiceUserDirectoryServiceReference:getUsersEntityDirectoryServiceUserDirectoryServiceReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityIdentityProviderUser:getUsersEntityIdentityProviderUser": {
            "properties": {
                "identityProviderReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getUsersEntityIdentityProviderUserIdentityProviderReference:getUsersEntityIdentityProviderUserIdentityProviderReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "identityProviderReferences",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityIdentityProviderUserIdentityProviderReference:getUsersEntityIdentityProviderUserIdentityProviderReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersEntityProjectReferenceList:getUsersEntityProjectReferenceList": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getUsersMetadata:getUsersMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineCategory:getVirtualMachineCategory": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskList:getVirtualMachineDiskList": {
            "properties": {
                "dataSourceReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineDiskListDeviceProperty:getVirtualMachineDiskListDeviceProperty"
                    },
                    "description": "Properties to a device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeBytes": {
                    "type": "integer",
                    "description": "Size of the disk in Bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeMib": {
                    "type": "integer",
                    "description": "Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineDiskListStorageConfig:getVirtualMachineDiskListStorageConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeGroupReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a volume group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataSourceReference",
                "deviceProperties",
                "diskSizeBytes",
                "diskSizeMib",
                "storageConfigs",
                "uuid",
                "volumeGroupReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskListDeviceProperty:getVirtualMachineDiskListDeviceProperty": {
            "properties": {
                "deviceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deviceType",
                "diskAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskListStorageConfig:getVirtualMachineDiskListStorageConfig": {
            "properties": {
                "flashMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageContainerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineDiskListStorageConfigStorageContainerReference:getVirtualMachineDiskListStorageConfigStorageContainerReference"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "flashMode",
                "storageContainerReferences"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineDiskListStorageConfigStorageContainerReference:getVirtualMachineDiskListStorageConfigStorageContainerReference": {
            "properties": {
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name",
                "url",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineGpuList:getVirtualMachineGpuList": {
            "properties": {
                "deviceId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fraction": {
                    "type": "integer",
                    "description": "Fraction of the physical GPU assigned.\n* `mode`: - The mode of this GPU.\n* `num_virtual_display_heads`: - Number of supported virtual display heads.\n* `guest_driver_version`: - Last determined guest driver version.\n* `device_id`: - (Computed) The device ID of the GPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frameBufferSizeMib": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "guestDriverVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numVirtualDisplayHeads": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pciAddress": {
                    "type": "string",
                    "description": "GPU {segment:bus:device:function} (sbdf) address if assigned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deviceId",
                "fraction",
                "frameBufferSizeMib",
                "guestDriverVersion",
                "mode",
                "name",
                "numVirtualDisplayHeads",
                "pciAddress",
                "uuid",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineMessageList:getVirtualMachineMessageList": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reason": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "details",
                "message",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineNicList:getVirtualMachineNicList": {
            "properties": {
                "floatingIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipEndpointLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVirtualMachineNicListIpEndpointList:getVirtualMachineNicListIpEndpointList"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isConnected": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "model": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkFunctionNicType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nicType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numQueues": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "floatingIp",
                "ipEndpointLists",
                "isConnected",
                "macAddress",
                "model",
                "networkFunctionChainReference",
                "networkFunctionNicType",
                "nicType",
                "numQueues",
                "subnetName",
                "subnetUuid",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineNicListIpEndpointList:getVirtualMachineNicListIpEndpointList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVirtualMachineSerialPortList:getVirtualMachineSerialPortList": {
            "properties": {
                "index": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isConnected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "isConnected"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpec:getVpcSpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResource:getVpcSpecResource"
                    },
                    "description": "VPC resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResource:getVpcSpecResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResourceCommonDomainNameServerIpList:getVpcSpecResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResourceExternalSubnetList:getVpcSpecResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcSpecResourceExternallyRoutablePrefixList:getVpcSpecResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResourceCommonDomainNameServerIpList:getVpcSpecResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResourceExternalSubnetList:getVpcSpecResourceExternalSubnetList": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcSpecResourceExternallyRoutablePrefixList:getVpcSpecResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatus:getVpcStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusExecutionContext:getVpcStatusExecutionContext"
                    },
                    "description": "Execution Context of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResource:getVpcStatusResource"
                    },
                    "description": "VPC resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusExecutionContext:getVpcStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResource:getVpcStatusResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceCommonDomainNameServerIpList:getVpcStatusResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceExternalSubnetList:getVpcStatusResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceExternallyRoutablePrefixList:getVpcStatusResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceCommonDomainNameServerIpList:getVpcStatusResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceExternalSubnetList:getVpcStatusResourceExternalSubnetList": {
            "properties": {
                "activeGatewayNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcStatusResourceExternalSubnetListActiveGatewayNode:getVpcStatusResourceExternalSubnetListActiveGatewayNode"
                    },
                    "description": "Active Gateway Node. Only present in VPC Status Resources.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets attached to this VPC. Only present in VPC Status Resources .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activeGatewayNodes",
                "externalIpLists",
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceExternalSubnetListActiveGatewayNode:getVpcStatusResourceExternalSubnetListActiveGatewayNode": {
            "properties": {
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostReference",
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcStatusResourceExternallyRoutablePrefixList:getVpcStatusResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntity:getVpcsEntity": {
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpec:getVpcsEntitySpec"
                    },
                    "description": "VPC input spec\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatus:getVpcsEntityStatus"
                    },
                    "description": "VPC output status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "specs",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpec:getVpcsEntitySpec": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResource:getVpcsEntitySpecResource"
                    },
                    "description": "VPC resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResource:getVpcsEntitySpecResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResourceCommonDomainNameServerIpList:getVpcsEntitySpecResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResourceExternalSubnetList:getVpcsEntitySpecResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntitySpecResourceExternallyRoutablePrefixList:getVpcsEntitySpecResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResourceCommonDomainNameServerIpList:getVpcsEntitySpecResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResourceExternalSubnetList:getVpcsEntitySpecResourceExternalSubnetList": {
            "properties": {
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntitySpecResourceExternallyRoutablePrefixList:getVpcsEntitySpecResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatus:getVpcsEntityStatus": {
            "properties": {
                "executionContexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusExecutionContext:getVpcsEntityStatusExecutionContext"
                    },
                    "description": "Execution Context of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResource:getVpcsEntityStatusResource"
                    },
                    "description": "VPC resources status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the VPC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "executionContexts",
                "name",
                "resources",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusExecutionContext:getVpcsEntityStatusExecutionContext": {
            "properties": {
                "taskUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "taskUuids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResource:getVpcsEntityStatusResource": {
            "properties": {
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceCommonDomainNameServerIpList:getVpcsEntityStatusResourceCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceExternalSubnetList:getVpcsEntityStatusResourceExternalSubnetList"
                    },
                    "description": "List of external subnets attached to this VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceExternallyRoutablePrefixList:getVpcsEntityStatusResourceExternallyRoutablePrefixList"
                    },
                    "description": "List of external routable ip and prefix .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonDomainNameServerIpLists",
                "externalSubnetLists",
                "externallyRoutablePrefixLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceCommonDomainNameServerIpList:getVpcsEntityStatusResourceCommonDomainNameServerIpList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceExternalSubnetList:getVpcsEntityStatusResourceExternalSubnetList": {
            "properties": {
                "activeGatewayNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode:getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode"
                    },
                    "description": "Active Gateway Node. Only present in VPC Status Resources.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets attached to this VPC. Only present in VPC Status Resources .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalSubnetReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to a subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activeGatewayNodes",
                "externalIpLists",
                "externalSubnetReference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode:getVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode": {
            "properties": {
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Reference to host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostReference",
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsEntityStatusResourceExternallyRoutablePrefixList:getVpcsEntityStatusResourceExternallyRoutablePrefixList": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "ip address of domain name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "prefix length of routable ip .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "nutanix:index/getVpcsMetadata:getVpcsMetadata": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMatches": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "kind",
                "length",
                "offset",
                "sortAttribute",
                "sortOrder",
                "totalMatches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the nutanix package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string",
                "description": "URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an\nindividual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS\nupgrades.\n"
            },
            "foundationEndpoint": {
                "type": "string",
                "description": "endpoint for foundation VM (eg. Foundation VM IP)\n"
            },
            "foundationPort": {
                "type": "string",
                "description": "Port for foundation VM\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`\n"
            },
            "password": {
                "type": "string",
                "description": "Password for provided user name.\n"
            },
            "port": {
                "type": "string",
                "description": "Port for Nutanix Prism.\n"
            },
            "proxyUrl": {
                "type": "string"
            },
            "sessionAuth": {
                "type": "boolean",
                "description": "Use session authentification instead of basic auth for each request\n"
            },
            "username": {
                "type": "string",
                "description": "User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.\n"
            },
            "waitTimeout": {
                "type": "integer",
                "description": "Set if you know that the creation o update of a resource may take long time (minutes)\n"
            }
        },
        "inputProperties": {
            "endpoint": {
                "type": "string",
                "description": "URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an\nindividual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS\nupgrades.\n"
            },
            "foundationEndpoint": {
                "type": "string",
                "description": "endpoint for foundation VM (eg. Foundation VM IP)\n"
            },
            "foundationPort": {
                "type": "string",
                "description": "Port for foundation VM\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`\n"
            },
            "password": {
                "type": "string",
                "description": "Password for provided user name.\n"
            },
            "port": {
                "type": "string",
                "description": "Port for Nutanix Prism.\n"
            },
            "proxyUrl": {
                "type": "string"
            },
            "sessionAuth": {
                "type": "boolean",
                "description": "Use session authentification instead of basic auth for each request\n"
            },
            "username": {
                "type": "string",
                "description": "User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.\n"
            },
            "waitTimeout": {
                "type": "integer",
                "description": "Set if you know that the creation o update of a resource may take long time (minutes)\n"
            }
        }
    },
    "resources": {
        "nutanix:index/accessControlPolicy:AccessControlPolicy": {
            "description": "Provides a resource to create an access control policy based on the input parameters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = new nutanix.AccessControlPolicy(\"test\", {\n    contextFilterLists: [{\n        entityFilterExpressionLists: [\n            {\n                leftHandSideEntityType: \"cluster\",\n                operator: \"IN\",\n                rightHandSide: {\n                    uuidLists: [\"00058ef8-c31c-f0bc-0000-000000007b23\"],\n                },\n            },\n            {\n                leftHandSideEntityType: \"image\",\n                operator: \"IN\",\n                rightHandSide: {\n                    collection: \"ALL\",\n                },\n            },\n            {\n                leftHandSideEntityType: \"category\",\n                operator: \"IN\",\n                rightHandSide: {\n                    collection: \"ALL\",\n                },\n            },\n            {\n                leftHandSideEntityType: \"marketplace_item\",\n                operator: \"IN\",\n                rightHandSide: {\n                    collection: \"SELF_OWNED\",\n                },\n            },\n            {\n                leftHandSideEntityType: \"app_task\",\n                operator: \"IN\",\n                rightHandSide: {\n                    collection: \"SELF_OWNED\",\n                },\n            },\n            {\n                leftHandSideEntityType: \"app_variable\",\n                operator: \"IN\",\n                rightHandSide: {\n                    collection: \"SELF_OWNED\",\n                },\n            },\n        ],\n    }],\n    description: \"DESCRIPTION OF THE ACCESS CONTROL POLICY\",\n    roleReference: {\n        kind: \"role\",\n        uuid: \"UUID of role\",\n    },\n    userReferenceLists: [{\n        name: \"admin\",\n        uuid: \"UUID of User existent\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.AccessControlPolicy(\"test\",\n    context_filter_lists=[nutanix.AccessControlPolicyContextFilterListArgs(\n        entity_filter_expression_lists=[\n            nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs(\n                left_hand_side_entity_type=\"cluster\",\n                operator=\"IN\",\n                right_hand_side=nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs(\n                    uuid_list=[\"00058ef8-c31c-f0bc-0000-000000007b23\"],\n                ),\n            ),\n            nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs(\n                left_hand_side_entity_type=\"image\",\n                operator=\"IN\",\n                right_hand_side=nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs(\n                    collection=\"ALL\",\n                ),\n            ),\n            nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs(\n                left_hand_side_entity_type=\"category\",\n                operator=\"IN\",\n                right_hand_side=nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs(\n                    collection=\"ALL\",\n                ),\n            ),\n            nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs(\n                left_hand_side_entity_type=\"marketplace_item\",\n                operator=\"IN\",\n                right_hand_side=nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs(\n                    collection=\"SELF_OWNED\",\n                ),\n            ),\n            nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs(\n                left_hand_side_entity_type=\"app_task\",\n                operator=\"IN\",\n                right_hand_side=nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs(\n                    collection=\"SELF_OWNED\",\n                ),\n            ),\n            nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs(\n                left_hand_side_entity_type=\"app_variable\",\n                operator=\"IN\",\n                right_hand_side=nutanix.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs(\n                    collection=\"SELF_OWNED\",\n                ),\n            ),\n        ],\n    )],\n    description=\"DESCRIPTION OF THE ACCESS CONTROL POLICY\",\n    role_reference=nutanix.AccessControlPolicyRoleReferenceArgs(\n        kind=\"role\",\n        uuid=\"UUID of role\",\n    ),\n    user_reference_lists=[nutanix.AccessControlPolicyUserReferenceListArgs(\n        name=\"admin\",\n        uuid=\"UUID of User existent\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Nutanix.AccessControlPolicy(\"test\", new Nutanix.AccessControlPolicyArgs\n        {\n            ContextFilterLists = \n            {\n                new Nutanix.Inputs.AccessControlPolicyContextFilterListArgs\n                {\n                    EntityFilterExpressionLists = \n                    {\n                        new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs\n                        {\n                            LeftHandSideEntityType = \"cluster\",\n                            Operator = \"IN\",\n                            RightHandSide = new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs\n                            {\n                                UuidList = \n                                {\n                                    \"00058ef8-c31c-f0bc-0000-000000007b23\",\n                                },\n                            },\n                        },\n                        new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs\n                        {\n                            LeftHandSideEntityType = \"image\",\n                            Operator = \"IN\",\n                            RightHandSide = new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs\n                            {\n                                Collection = \"ALL\",\n                            },\n                        },\n                        new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs\n                        {\n                            LeftHandSideEntityType = \"category\",\n                            Operator = \"IN\",\n                            RightHandSide = new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs\n                            {\n                                Collection = \"ALL\",\n                            },\n                        },\n                        new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs\n                        {\n                            LeftHandSideEntityType = \"marketplace_item\",\n                            Operator = \"IN\",\n                            RightHandSide = new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs\n                            {\n                                Collection = \"SELF_OWNED\",\n                            },\n                        },\n                        new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs\n                        {\n                            LeftHandSideEntityType = \"app_task\",\n                            Operator = \"IN\",\n                            RightHandSide = new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs\n                            {\n                                Collection = \"SELF_OWNED\",\n                            },\n                        },\n                        new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListArgs\n                        {\n                            LeftHandSideEntityType = \"app_variable\",\n                            Operator = \"IN\",\n                            RightHandSide = new Nutanix.Inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs\n                            {\n                                Collection = \"SELF_OWNED\",\n                            },\n                        },\n                    },\n                },\n            },\n            Description = \"DESCRIPTION OF THE ACCESS CONTROL POLICY\",\n            RoleReference = new Nutanix.Inputs.AccessControlPolicyRoleReferenceArgs\n            {\n                Kind = \"role\",\n                Uuid = \"UUID of role\",\n            },\n            UserReferenceLists = \n            {\n                new Nutanix.Inputs.AccessControlPolicyUserReferenceListArgs\n                {\n                    Name = \"admin\",\n                    Uuid = \"UUID of User existent\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewAccessControlPolicy(ctx, \"test\", \u0026nutanix.AccessControlPolicyArgs{\n\t\t\tContextFilterLists: AccessControlPolicyContextFilterListArray{\n\t\t\t\t\u0026AccessControlPolicyContextFilterListArgs{\n\t\t\t\t\tEntityFilterExpressionLists: AccessControlPolicyContextFilterListEntityFilterExpressionListArray{\n\t\t\t\t\t\t\u0026AccessControlPolicyContextFilterListEntityFilterExpressionListArgs{\n\t\t\t\t\t\t\tLeftHandSideEntityType: pulumi.String(\"cluster\"),\n\t\t\t\t\t\t\tOperator:               pulumi.String(\"IN\"),\n\t\t\t\t\t\t\tRightHandSide: \u0026AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs{\n\t\t\t\t\t\t\t\tUuidList: []string{\n\t\t\t\t\t\t\t\t\t\"00058ef8-c31c-f0bc-0000-000000007b23\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026AccessControlPolicyContextFilterListEntityFilterExpressionListArgs{\n\t\t\t\t\t\t\tLeftHandSideEntityType: pulumi.String(\"image\"),\n\t\t\t\t\t\t\tOperator:               pulumi.String(\"IN\"),\n\t\t\t\t\t\t\tRightHandSide: \u0026AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs{\n\t\t\t\t\t\t\t\tCollection: pulumi.String(\"ALL\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026AccessControlPolicyContextFilterListEntityFilterExpressionListArgs{\n\t\t\t\t\t\t\tLeftHandSideEntityType: pulumi.String(\"category\"),\n\t\t\t\t\t\t\tOperator:               pulumi.String(\"IN\"),\n\t\t\t\t\t\t\tRightHandSide: \u0026AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs{\n\t\t\t\t\t\t\t\tCollection: pulumi.String(\"ALL\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026AccessControlPolicyContextFilterListEntityFilterExpressionListArgs{\n\t\t\t\t\t\t\tLeftHandSideEntityType: pulumi.String(\"marketplace_item\"),\n\t\t\t\t\t\t\tOperator:               pulumi.String(\"IN\"),\n\t\t\t\t\t\t\tRightHandSide: \u0026AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs{\n\t\t\t\t\t\t\t\tCollection: pulumi.String(\"SELF_OWNED\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026AccessControlPolicyContextFilterListEntityFilterExpressionListArgs{\n\t\t\t\t\t\t\tLeftHandSideEntityType: pulumi.String(\"app_task\"),\n\t\t\t\t\t\t\tOperator:               pulumi.String(\"IN\"),\n\t\t\t\t\t\t\tRightHandSide: \u0026AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs{\n\t\t\t\t\t\t\t\tCollection: pulumi.String(\"SELF_OWNED\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026AccessControlPolicyContextFilterListEntityFilterExpressionListArgs{\n\t\t\t\t\t\t\tLeftHandSideEntityType: pulumi.String(\"app_variable\"),\n\t\t\t\t\t\t\tOperator:               pulumi.String(\"IN\"),\n\t\t\t\t\t\t\tRightHandSide: \u0026AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs{\n\t\t\t\t\t\t\t\tCollection: pulumi.String(\"SELF_OWNED\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"DESCRIPTION OF THE ACCESS CONTROL POLICY\"),\n\t\t\tRoleReference: \u0026AccessControlPolicyRoleReferenceArgs{\n\t\t\t\tKind: pulumi.String(\"role\"),\n\t\t\t\tUuid: pulumi.String(\"UUID of role\"),\n\t\t\t},\n\t\t\tUserReferenceLists: AccessControlPolicyUserReferenceListArray{\n\t\t\t\t\u0026AccessControlPolicyUserReferenceListArgs{\n\t\t\t\t\tName: pulumi.String(\"admin\"),\n\t\t\t\t\tUuid: pulumi.String(\"UUID of User existent\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new AccessControlPolicy(\"test\", AccessControlPolicyArgs.builder()        \n            .contextFilterLists(AccessControlPolicyContextFilterListArgs.builder()\n                .entityFilterExpressionLists(                \n                    AccessControlPolicyContextFilterListEntityFilterExpressionListArgs.builder()\n                        .leftHandSideEntityType(\"cluster\")\n                        .operator(\"IN\")\n                        .rightHandSide(AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs.builder()\n                            .uuidList(\"00058ef8-c31c-f0bc-0000-000000007b23\")\n                            .build())\n                        .build(),\n                    AccessControlPolicyContextFilterListEntityFilterExpressionListArgs.builder()\n                        .leftHandSideEntityType(\"image\")\n                        .operator(\"IN\")\n                        .rightHandSide(AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs.builder()\n                            .collection(\"ALL\")\n                            .build())\n                        .build(),\n                    AccessControlPolicyContextFilterListEntityFilterExpressionListArgs.builder()\n                        .leftHandSideEntityType(\"category\")\n                        .operator(\"IN\")\n                        .rightHandSide(AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs.builder()\n                            .collection(\"ALL\")\n                            .build())\n                        .build(),\n                    AccessControlPolicyContextFilterListEntityFilterExpressionListArgs.builder()\n                        .leftHandSideEntityType(\"marketplace_item\")\n                        .operator(\"IN\")\n                        .rightHandSide(AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs.builder()\n                            .collection(\"SELF_OWNED\")\n                            .build())\n                        .build(),\n                    AccessControlPolicyContextFilterListEntityFilterExpressionListArgs.builder()\n                        .leftHandSideEntityType(\"app_task\")\n                        .operator(\"IN\")\n                        .rightHandSide(AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs.builder()\n                            .collection(\"SELF_OWNED\")\n                            .build())\n                        .build(),\n                    AccessControlPolicyContextFilterListEntityFilterExpressionListArgs.builder()\n                        .leftHandSideEntityType(\"app_variable\")\n                        .operator(\"IN\")\n                        .rightHandSide(AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs.builder()\n                            .collection(\"SELF_OWNED\")\n                            .build())\n                        .build())\n                .build())\n            .description(\"DESCRIPTION OF THE ACCESS CONTROL POLICY\")\n            .roleReference(AccessControlPolicyRoleReferenceArgs.builder()\n                .kind(\"role\")\n                .uuid(\"UUID of role\")\n                .build())\n            .userReferenceLists(AccessControlPolicyUserReferenceListArgs.builder()\n                .name(\"admin\")\n                .uuid(\"UUID of User existent\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nutanix:AccessControlPolicy\n    properties:\n      contextFilterLists:\n        - entityFilterExpressionLists:\n            - leftHandSideEntityType: cluster\n              operator: IN\n              rightHandSide:\n                uuidList:\n                  - 00058ef8-c31c-f0bc-0000-000000007b23\n            - leftHandSideEntityType: image\n              operator: IN\n              rightHandSide:\n                collection: ALL\n            - leftHandSideEntityType: category\n              operator: IN\n              rightHandSide:\n                collection: ALL\n            - leftHandSideEntityType: marketplace_item\n              operator: IN\n              rightHandSide:\n                collection: SELF_OWNED\n            - leftHandSideEntityType: app_task\n              operator: IN\n              rightHandSide:\n                collection: SELF_OWNED\n            - leftHandSideEntityType: app_variable\n              operator: IN\n              rightHandSide:\n                collection: SELF_OWNED\n      description: DESCRIPTION OF THE ACCESS CONTROL POLICY\n      roleReference:\n        kind: role\n        uuid: UUID of role\n      userReferenceLists:\n        - name: admin\n          uuid: UUID of User existent\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `state`: - The state of the Access Control Policy.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory"
                    }
                },
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList"
                    }
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference"
                },
                "roleReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference"
                },
                "state": {
                    "type": "string"
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList"
                    }
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList"
                    }
                }
            },
            "required": [
                "apiVersion",
                "categories",
                "contextFilterLists",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "roleReference",
                "state",
                "userGroupReferenceLists",
                "userReferenceLists"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory"
                    }
                },
                "contextFilterLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference"
                },
                "roleReference": {
                    "$ref": "#/types/nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference"
                },
                "userGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList"
                    }
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList"
                    }
                }
            },
            "requiredInputs": [
                "roleReference"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessControlPolicy resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the Access Control Policy.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyCategory:AccessControlPolicyCategory"
                        }
                    },
                    "contextFilterLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyContextFilterList:AccessControlPolicyContextFilterList"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyOwnerReference:AccessControlPolicyOwnerReference"
                    },
                    "roleReference": {
                        "$ref": "#/types/nutanix:index/AccessControlPolicyRoleReference:AccessControlPolicyRoleReference"
                    },
                    "state": {
                        "type": "string"
                    },
                    "userGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyUserGroupReferenceList:AccessControlPolicyUserGroupReferenceList"
                        }
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AccessControlPolicyUserReferenceList:AccessControlPolicyUserReferenceList"
                        }
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/addressGroup:AddressGroup": {
            "description": "Provides a resource to create a address group based on the input parameters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst testAddress = new nutanix.AddressGroup(\"test_address\", {\n    description: \"test address groups resource\",\n    ipAddressBlockLists: [{\n        ip: \"10.0.0.0\",\n        prefixLength: 24,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest_address = nutanix.AddressGroup(\"testAddress\",\n    description=\"test address groups resource\",\n    ip_address_block_lists=[nutanix.AddressGroupIpAddressBlockListArgs(\n        ip=\"10.0.0.0\",\n        prefix_length=24,\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testAddress = new Nutanix.AddressGroup(\"testAddress\", new Nutanix.AddressGroupArgs\n        {\n            Description = \"test address groups resource\",\n            IpAddressBlockLists = \n            {\n                new Nutanix.Inputs.AddressGroupIpAddressBlockListArgs\n                {\n                    Ip = \"10.0.0.0\",\n                    PrefixLength = 24,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewAddressGroup(ctx, \"testAddress\", \u0026nutanix.AddressGroupArgs{\n\t\t\tDescription: pulumi.String(\"test address groups resource\"),\n\t\t\tIpAddressBlockLists: AddressGroupIpAddressBlockListArray{\n\t\t\t\t\u0026AddressGroupIpAddressBlockListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"10.0.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(24),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAddress = new AddressGroup(\"testAddress\", AddressGroupArgs.builder()        \n            .description(\"test address groups resource\")\n            .ipAddressBlockLists(AddressGroupIpAddressBlockListArgs.builder()\n                .ip(\"10.0.0.0\")\n                .prefixLength(24)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAddress:\n    type: nutanix:AddressGroup\n    properties:\n      description: test address groups resource\n      ipAddressBlockLists:\n        - ip: 10.0.0.0\n          prefixLength: 24\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "addressGroupString": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "ipAddressBlockLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList"
                    }
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "addressGroupString",
                "ipAddressBlockLists",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "ipAddressBlockLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList"
                    }
                },
                "name": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "ipAddressBlockLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AddressGroup resources.\n",
                "properties": {
                    "addressGroupString": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ipAddressBlockLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/AddressGroupIpAddressBlockList:AddressGroupIpAddressBlockList"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/categoryKey:CategoryKey": {
            "description": "Provides a Nutanix Category key resource to Create a category key name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = new nutanix.CategoryKey(\"test\", {\n    description: \"App Support Category Key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.CategoryKey(\"test\", description=\"App Support Category Key\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Nutanix.CategoryKey(\"test\", new Nutanix.CategoryKeyArgs\n        {\n            Description = \"App Support Category Key\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewCategoryKey(ctx, \"test\", \u0026nutanix.CategoryKeyArgs{\n\t\t\tDescription: pulumi.String(\"App Support Category Key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new CategoryKey(\"test\", CategoryKeyArgs.builder()        \n            .description(\"App Support Category Key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nutanix:CategoryKey\n    properties:\n      description: App Support Category Key\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Optional) The version of the API.\n"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "systemDefined": {
                    "type": "boolean"
                }
            },
            "required": [
                "apiVersion",
                "description",
                "name",
                "systemDefined"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CategoryKey resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Optional) The version of the API.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "systemDefined": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/categoryValue:CategoryValue": {
            "description": "Provides a Nutanix Category value resource to Create a category value.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst test_category_key = new nutanix.CategoryKey(\"test-category-key\", {description: \"App Support Category Key\"});\nconst test = new nutanix.CategoryValue(\"test\", {\n    description: \"Test Category Value\",\n    value: \"test-value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest_category_key = nutanix.CategoryKey(\"test-category-key\", description=\"App Support Category Key\")\ntest = nutanix.CategoryValue(\"test\",\n    description=\"Test Category Value\",\n    value=\"test-value\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test_category_key = new Nutanix.CategoryKey(\"test-category-key\", new Nutanix.CategoryKeyArgs\n        {\n            Description = \"App Support Category Key\",\n        });\n        var test = new Nutanix.CategoryValue(\"test\", new Nutanix.CategoryValueArgs\n        {\n            Description = \"Test Category Value\",\n            Value = \"test-value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewCategoryKey(ctx, \"test-category-key\", \u0026nutanix.CategoryKeyArgs{\n\t\t\tDescription: pulumi.String(\"App Support Category Key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewCategoryValue(ctx, \"test\", \u0026nutanix.CategoryValueArgs{\n\t\t\tDescription: pulumi.String(\"Test Category Value\"),\n\t\t\tValue:       pulumi.String(\"test-value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_category_key = new CategoryKey(\"test-category-key\", CategoryKeyArgs.builder()        \n            .description(\"App Support Category Key\")\n            .build());\n\n        var test = new CategoryValue(\"test\", CategoryValueArgs.builder()        \n            .description(\"Test Category Value\")\n            .value(\"test-value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-category-key:\n    type: nutanix:CategoryKey\n    properties:\n      description: App Support Category Key\n  test:\n    type: nutanix:CategoryValue\n    properties:\n      description: Test Category Value\n      value: test-value\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Optional) The version of the API.\n"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "systemDefined": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string",
                    "description": "The value for the category value.\n* `description`: - (Optional) A description for category value.\n"
                }
            },
            "required": [
                "apiVersion",
                "description",
                "name",
                "systemDefined",
                "value"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "The value for the category value.\n* `description`: - (Optional) A description for category value.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CategoryValue resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Optional) The version of the API.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "systemDefined": {
                        "type": "boolean"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value for the category value.\n* `description`: - (Optional) A description for category value.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/floatingIp:FloatingIp": {
            "description": "Provides Nutanix resource to create Floating IPs. \n\n## create Floating IP with External Subnet UUID\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst fip1 = new nutanix.FloatingIp(\"fip1\", {\n    externalSubnetReferenceUuid: \"{{ext_sub_uuid}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nfip1 = nutanix.FloatingIp(\"fip1\", external_subnet_reference_uuid=\"{{ext_sub_uuid}}\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fip1 = new Nutanix.FloatingIp(\"fip1\", new Nutanix.FloatingIpArgs\n        {\n            ExternalSubnetReferenceUuid = \"{{ext_sub_uuid}}\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewFloatingIp(ctx, \"fip1\", \u0026nutanix.FloatingIpArgs{\n\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_sub_uuid}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fip1 = new FloatingIp(\"fip1\", FloatingIpArgs.builder()        \n            .externalSubnetReferenceUuid(\"{{ext_sub_uuid}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fip1:\n    type: nutanix:FloatingIp\n    properties:\n      externalSubnetReferenceUuid: '{{ext_sub_uuid}}'\n```\n\n## create Floating IP with vpc name with external subnet name\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst fip2 = new nutanix.FloatingIp(\"fip2\", {\n    externalSubnetReferenceName: \"{{ext_sub_name}}\",\n    privateIp: \"{{ip_address}}\",\n    vpcReferenceName: \"{{vpc_name}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nfip2 = nutanix.FloatingIp(\"fip2\",\n    external_subnet_reference_name=\"{{ext_sub_name}}\",\n    private_ip=\"{{ip_address}}\",\n    vpc_reference_name=\"{{vpc_name}}\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fip2 = new Nutanix.FloatingIp(\"fip2\", new Nutanix.FloatingIpArgs\n        {\n            ExternalSubnetReferenceName = \"{{ext_sub_name}}\",\n            PrivateIp = \"{{ip_address}}\",\n            VpcReferenceName = \"{{vpc_name}}\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewFloatingIp(ctx, \"fip2\", \u0026nutanix.FloatingIpArgs{\n\t\t\tExternalSubnetReferenceName: pulumi.String(\"{{ext_sub_name}}\"),\n\t\t\tPrivateIp:                   pulumi.String(\"{{ip_address}}\"),\n\t\t\tVpcReferenceName:            pulumi.String(\"{{vpc_name}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fip2 = new FloatingIp(\"fip2\", FloatingIpArgs.builder()        \n            .externalSubnetReferenceName(\"{{ext_sub_name}}\")\n            .privateIp(\"{{ip_address}}\")\n            .vpcReferenceName(\"{{vpc_name}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fip2:\n    type: nutanix:FloatingIp\n    properties:\n      externalSubnetReferenceName: '{{ext_sub_name}}'\n      privateIp: '{{ip_address}}'\n      vpcReferenceName: '{{vpc_name}}'\n```\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "externalSubnetReferenceName": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with \n{external_subnet_reference_uuid} .\n"
                },
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with {external_subnet_reference_name} .\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The floating_ips kind metadata.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP with which floating IP is associated. Should be used with vpc_reference .\n"
                },
                "vmNicReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vm_nic .\n"
                },
                "vpcReferenceName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}.\n"
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_name}.\n"
                }
            },
            "required": [
                "apiVersion",
                "externalSubnetReferenceUuid",
                "metadata",
                "vpcReferenceUuid"
            ],
            "inputProperties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "externalSubnetReferenceName": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with \n{external_subnet_reference_uuid} .\n",
                    "willReplaceOnChanges": true
                },
                "externalSubnetReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a subnet. Should not be used with {external_subnet_reference_name} .\n",
                    "willReplaceOnChanges": true
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP with which floating IP is associated. Should be used with vpc_reference .\n"
                },
                "vmNicReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vm_nic .\n"
                },
                "vpcReferenceName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}.\n"
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_name}.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIp resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "externalSubnetReferenceName": {
                        "type": "string",
                        "description": "The reference to a subnet. Should not be used with \n{external_subnet_reference_uuid} .\n",
                        "willReplaceOnChanges": true
                    },
                    "externalSubnetReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a subnet. Should not be used with {external_subnet_reference_name} .\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The floating_ips kind metadata.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Private IP with which floating IP is associated. Should be used with vpc_reference .\n"
                    },
                    "vmNicReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a vm_nic .\n"
                    },
                    "vpcReferenceName": {
                        "type": "string",
                        "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}.\n"
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a vpc. Should not be used with {vpc_reference_name}.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationCentralApiKeys:FoundationCentralApiKeys": {
            "properties": {
                "alias": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "createdTimestamp": {
                    "type": "string"
                },
                "currentTime": {
                    "type": "string"
                },
                "keyUuid": {
                    "type": "string"
                }
            },
            "required": [
                "alias",
                "apiKey",
                "createdTimestamp",
                "currentTime",
                "keyUuid"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "alias"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationCentralApiKeys resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "apiKey": {
                        "type": "string"
                    },
                    "createdTimestamp": {
                        "type": "string"
                    },
                    "currentTime": {
                        "type": "string"
                    },
                    "keyUuid": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationCentralImageCluster:FoundationCentralImageCluster": {
            "properties": {
                "aosPackageSha256sum": {
                    "type": "string"
                },
                "aosPackageUrl": {
                    "type": "string"
                },
                "archived": {
                    "type": "boolean"
                },
                "clusterExternalIp": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string"
                },
                "clusterSize": {
                    "type": "integer"
                },
                "clusterStatus": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus"
                },
                "commonNetworkSettings": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings"
                },
                "createdTimestamp": {
                    "type": "string"
                },
                "currentTime": {
                    "type": "string"
                },
                "destroyed": {
                    "type": "boolean"
                },
                "foundationInitConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfig:FoundationCentralImageClusterFoundationInitConfig"
                    }
                },
                "foundationInitNodeUuid": {
                    "type": "string"
                },
                "hypervisorIsoDetails": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails"
                },
                "imageClusterUuid": {
                    "type": "string"
                },
                "imagedClusterUuid": {
                    "type": "string"
                },
                "imagedNodeUuidLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList"
                    }
                },
                "redundancyFactor": {
                    "type": "integer"
                },
                "skipClusterCreation": {
                    "type": "boolean"
                },
                "storageNodeCount": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                },
                "workflowType": {
                    "type": "string"
                }
            },
            "required": [
                "aosPackageSha256sum",
                "aosPackageUrl",
                "archived",
                "clusterExternalIp",
                "clusterName",
                "clusterSize",
                "clusterStatus",
                "commonNetworkSettings",
                "createdTimestamp",
                "currentTime",
                "destroyed",
                "foundationInitConfigs",
                "foundationInitNodeUuid",
                "hypervisorIsoDetails",
                "imageClusterUuid",
                "imagedClusterUuid",
                "imagedNodeUuidLists",
                "nodeLists",
                "redundancyFactor",
                "storageNodeCount",
                "timezone",
                "workflowType"
            ],
            "inputProperties": {
                "aosPackageSha256sum": {
                    "type": "string"
                },
                "aosPackageUrl": {
                    "type": "string"
                },
                "clusterExternalIp": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string"
                },
                "clusterSize": {
                    "type": "integer"
                },
                "clusterStatus": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus"
                },
                "commonNetworkSettings": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings"
                },
                "hypervisorIsoDetails": {
                    "$ref": "#/types/nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails"
                },
                "imageClusterUuid": {
                    "type": "string"
                },
                "nodeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList"
                    }
                },
                "redundancyFactor": {
                    "type": "integer"
                },
                "skipClusterCreation": {
                    "type": "boolean"
                },
                "storageNodeCount": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationCentralImageCluster resources.\n",
                "properties": {
                    "aosPackageSha256sum": {
                        "type": "string"
                    },
                    "aosPackageUrl": {
                        "type": "string"
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "clusterExternalIp": {
                        "type": "string"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterSize": {
                        "type": "integer"
                    },
                    "clusterStatus": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterClusterStatus:FoundationCentralImageClusterClusterStatus"
                    },
                    "commonNetworkSettings": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterCommonNetworkSettings:FoundationCentralImageClusterCommonNetworkSettings"
                    },
                    "createdTimestamp": {
                        "type": "string"
                    },
                    "currentTime": {
                        "type": "string"
                    },
                    "destroyed": {
                        "type": "boolean"
                    },
                    "foundationInitConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationCentralImageClusterFoundationInitConfig:FoundationCentralImageClusterFoundationInitConfig"
                        }
                    },
                    "foundationInitNodeUuid": {
                        "type": "string"
                    },
                    "hypervisorIsoDetails": {
                        "$ref": "#/types/nutanix:index/FoundationCentralImageClusterHypervisorIsoDetails:FoundationCentralImageClusterHypervisorIsoDetails"
                    },
                    "imageClusterUuid": {
                        "type": "string"
                    },
                    "imagedClusterUuid": {
                        "type": "string"
                    },
                    "imagedNodeUuidLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodeLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationCentralImageClusterNodeList:FoundationCentralImageClusterNodeList"
                        }
                    },
                    "redundancyFactor": {
                        "type": "integer"
                    },
                    "skipClusterCreation": {
                        "type": "boolean"
                    },
                    "storageNodeCount": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "workflowType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationImage:FoundationImage": {
            "description": "Uploads hypervisor or AOS image to foundation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nos_image = new nutanix.FoundationImage(\"nos-image\", {\n    filename: \"nos_image.tar\",\n    installerType: \"nos\",\n    source: \"../../../files/nutanix_installer_x86_64.tar\",\n});\nconst hypervisor_image = new nutanix.FoundationImage(\"hypervisor-image\", {\n    filename: \"esx_image.iso\",\n    installerType: \"esx\",\n    source: \"../../../files/VMware-Installer.x86_64.iso\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnos_image = nutanix.FoundationImage(\"nos-image\",\n    filename=\"nos_image.tar\",\n    installer_type=\"nos\",\n    source=\"../../../files/nutanix_installer_x86_64.tar\")\nhypervisor_image = nutanix.FoundationImage(\"hypervisor-image\",\n    filename=\"esx_image.iso\",\n    installer_type=\"esx\",\n    source=\"../../../files/VMware-Installer.x86_64.iso\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var nos_image = new Nutanix.FoundationImage(\"nos-image\", new Nutanix.FoundationImageArgs\n        {\n            Filename = \"nos_image.tar\",\n            InstallerType = \"nos\",\n            Source = \"../../../files/nutanix_installer_x86_64.tar\",\n        });\n        var hypervisor_image = new Nutanix.FoundationImage(\"hypervisor-image\", new Nutanix.FoundationImageArgs\n        {\n            Filename = \"esx_image.iso\",\n            InstallerType = \"esx\",\n            Source = \"../../../files/VMware-Installer.x86_64.iso\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewFoundationImage(ctx, \"nos-image\", \u0026nutanix.FoundationImageArgs{\n\t\t\tFilename:      pulumi.String(\"nos_image.tar\"),\n\t\t\tInstallerType: pulumi.String(\"nos\"),\n\t\t\tSource:        pulumi.String(\"../../../files/nutanix_installer_x86_64.tar\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewFoundationImage(ctx, \"hypervisor-image\", \u0026nutanix.FoundationImageArgs{\n\t\t\tFilename:      pulumi.String(\"esx_image.iso\"),\n\t\t\tInstallerType: pulumi.String(\"esx\"),\n\t\t\tSource:        pulumi.String(\"../../../files/VMware-Installer.x86_64.iso\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nos_image = new FoundationImage(\"nos-image\", FoundationImageArgs.builder()        \n            .filename(\"nos_image.tar\")\n            .installerType(\"nos\")\n            .source(\"../../../files/nutanix_installer_x86_64.tar\")\n            .build());\n\n        var hypervisor_image = new FoundationImage(\"hypervisor-image\", FoundationImageArgs.builder()        \n            .filename(\"esx_image.iso\")\n            .installerType(\"esx\")\n            .source(\"../../../files/VMware-Installer.x86_64.iso\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nos-image:\n    type: nutanix:FoundationImage\n    properties:\n      filename: nos_image.tar\n      installerType: nos\n      source: ../../../files/nutanix_installer_x86_64.tar\n  hypervisor-image:\n    type: nutanix:FoundationImage\n    properties:\n      filename: esx_image.iso\n      installerType: esx\n      source: ../../../files/VMware-Installer.x86_64.iso\n```\n{{% /example %}}\n{{% /examples %}}\n## lifecycle\n\n* `Update` : - Resource will trigger new resource create call for any kind of update in resource config and delete existing image from foundation vm.\n\nSee detailed information in [Nutanix Foundation Image](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjM0MDQ-upload-hypervisor-or-aos-image-to-foundation).\n",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "inWhitelist": {
                    "type": "boolean"
                },
                "installerType": {
                    "type": "string"
                },
                "md5sum": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            },
            "required": [
                "filename",
                "inWhitelist",
                "installerType",
                "md5sum",
                "name",
                "source"
            ],
            "inputProperties": {
                "filename": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "installerType": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "filename",
                "installerType",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationImage resources.\n",
                "properties": {
                    "filename": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "inWhitelist": {
                        "type": "boolean"
                    },
                    "installerType": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "md5sum": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationImageNodes:FoundationImageNodes": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock"
                    }
                },
                "clusterUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesClusterUrl:FoundationImageNodesClusterUrl"
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster"
                    }
                },
                "cvmGateway": {
                    "type": "string",
                    "description": ": - (Required) CVM gateway.\n"
                },
                "cvmNetmask": {
                    "type": "string",
                    "description": ": - (Required) CVM netmask.\n"
                },
                "eosMetadata": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata",
                    "description": ": - Contains user data from Eos portal.\n"
                },
                "fcSettings": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings",
                    "description": ": - Foundation Central specific settings.\n"
                },
                "hypervExternalVnic": {
                    "type": "string",
                    "description": ": - Hyperv External virtual network adapter name.\n"
                },
                "hypervExternalVswitch": {
                    "type": "string",
                    "description": ": - Hyperv External vswitch name.\n"
                },
                "hypervProductKey": {
                    "type": "string",
                    "description": ": - Hyperv product key.\n"
                },
                "hypervSku": {
                    "type": "boolean",
                    "description": ": - Hyperv SKU.\n"
                },
                "hypervisorGateway": {
                    "type": "string",
                    "description": ": - (Required) Hypervisor gateway.\n"
                },
                "hypervisorIso": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso",
                    "description": ": - Hypervisor ISO.\n"
                },
                "hypervisorNameserver": {
                    "type": "string"
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "description": ": - (Required) Hypervisor netmask.\n"
                },
                "hypervisorPassword": {
                    "type": "string",
                    "description": ": - Hypervisor password.\n"
                },
                "installScript": {
                    "type": "string",
                    "description": ": - install script.\n"
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node\n"
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node\n"
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI username\n"
                },
                "ipmiUser": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI password\n"
                },
                "layoutEggUuid": {
                    "type": "string",
                    "description": ": - Id of the custom layout which needs to be passed to imaging request.\n"
                },
                "nosPackage": {
                    "type": "string",
                    "description": ": - (Required) NOS package.\n"
                },
                "sessionId": {
                    "type": "string"
                },
                "skipHypervisor": {
                    "type": "boolean",
                    "description": ": - If hypervisor installation should be skipped.\n"
                },
                "svmRescueArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ": - Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.\n"
                },
                "tests": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests",
                    "description": ": - Types of tests to be performed.\n"
                },
                "ucsmIp": {
                    "type": "string",
                    "description": ": - UCSM IP address.\n"
                },
                "ucsmPassword": {
                    "type": "string",
                    "description": ": - UCSM password.\n"
                },
                "ucsmUser": {
                    "type": "string",
                    "description": ": - UCSM username.\n"
                },
                "uncPassword": {
                    "type": "string",
                    "description": ": - UNC password.\n"
                },
                "uncPath": {
                    "type": "string",
                    "description": ": - UNC Path.\n"
                },
                "uncUsername": {
                    "type": "string",
                    "description": ": - UNC username.\n"
                },
                "xenConfigType": {
                    "type": "string",
                    "description": ": - xen config types.\n"
                },
                "xsMasterIp": {
                    "type": "string",
                    "description": ": - xen server master IP address.\n"
                },
                "xsMasterLabel": {
                    "type": "string"
                },
                "xsMasterPassword": {
                    "type": "string",
                    "description": ": - xen server master password.\n"
                },
                "xsMasterUsername": {
                    "type": "string",
                    "description": ": - xen server master username.\n"
                }
            },
            "required": [
                "blocks",
                "clusterUrls",
                "cvmGateway",
                "cvmNetmask",
                "hypervisorGateway",
                "hypervisorNetmask",
                "nosPackage",
                "sessionId"
            ],
            "inputProperties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock"
                    },
                    "willReplaceOnChanges": true
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster"
                    },
                    "willReplaceOnChanges": true
                },
                "cvmGateway": {
                    "type": "string",
                    "description": ": - (Required) CVM gateway.\n",
                    "willReplaceOnChanges": true
                },
                "cvmNetmask": {
                    "type": "string",
                    "description": ": - (Required) CVM netmask.\n",
                    "willReplaceOnChanges": true
                },
                "eosMetadata": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata",
                    "description": ": - Contains user data from Eos portal.\n",
                    "willReplaceOnChanges": true
                },
                "fcSettings": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings",
                    "description": ": - Foundation Central specific settings.\n",
                    "willReplaceOnChanges": true
                },
                "hypervExternalVnic": {
                    "type": "string",
                    "description": ": - Hyperv External virtual network adapter name.\n",
                    "willReplaceOnChanges": true
                },
                "hypervExternalVswitch": {
                    "type": "string",
                    "description": ": - Hyperv External vswitch name.\n",
                    "willReplaceOnChanges": true
                },
                "hypervProductKey": {
                    "type": "string",
                    "description": ": - Hyperv product key.\n",
                    "willReplaceOnChanges": true
                },
                "hypervSku": {
                    "type": "boolean",
                    "description": ": - Hyperv SKU.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorGateway": {
                    "type": "string",
                    "description": ": - (Required) Hypervisor gateway.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorIso": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso",
                    "description": ": - Hypervisor ISO.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorNameserver": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "hypervisorNetmask": {
                    "type": "string",
                    "description": ": - (Required) Hypervisor netmask.\n",
                    "willReplaceOnChanges": true
                },
                "hypervisorPassword": {
                    "type": "string",
                    "description": ": - Hypervisor password.\n",
                    "willReplaceOnChanges": true
                },
                "installScript": {
                    "type": "string",
                    "description": ": - install script.\n",
                    "willReplaceOnChanges": true
                },
                "ipmiGateway": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node\n",
                    "willReplaceOnChanges": true
                },
                "ipmiNetmask": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node\n",
                    "willReplaceOnChanges": true
                },
                "ipmiPassword": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI username\n",
                    "willReplaceOnChanges": true
                },
                "ipmiUser": {
                    "type": "string",
                    "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI password\n",
                    "willReplaceOnChanges": true
                },
                "layoutEggUuid": {
                    "type": "string",
                    "description": ": - Id of the custom layout which needs to be passed to imaging request.\n",
                    "willReplaceOnChanges": true
                },
                "nosPackage": {
                    "type": "string",
                    "description": ": - (Required) NOS package.\n",
                    "willReplaceOnChanges": true
                },
                "skipHypervisor": {
                    "type": "boolean",
                    "description": ": - If hypervisor installation should be skipped.\n",
                    "willReplaceOnChanges": true
                },
                "svmRescueArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ": - Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.\n",
                    "willReplaceOnChanges": true
                },
                "tests": {
                    "$ref": "#/types/nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests",
                    "description": ": - Types of tests to be performed.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmIp": {
                    "type": "string",
                    "description": ": - UCSM IP address.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmPassword": {
                    "type": "string",
                    "description": ": - UCSM password.\n",
                    "willReplaceOnChanges": true
                },
                "ucsmUser": {
                    "type": "string",
                    "description": ": - UCSM username.\n",
                    "willReplaceOnChanges": true
                },
                "uncPassword": {
                    "type": "string",
                    "description": ": - UNC password.\n",
                    "willReplaceOnChanges": true
                },
                "uncPath": {
                    "type": "string",
                    "description": ": - UNC Path.\n",
                    "willReplaceOnChanges": true
                },
                "uncUsername": {
                    "type": "string",
                    "description": ": - UNC username.\n",
                    "willReplaceOnChanges": true
                },
                "xenConfigType": {
                    "type": "string",
                    "description": ": - xen config types.\n",
                    "willReplaceOnChanges": true
                },
                "xsMasterIp": {
                    "type": "string",
                    "description": ": - xen server master IP address.\n",
                    "willReplaceOnChanges": true
                },
                "xsMasterLabel": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "xsMasterPassword": {
                    "type": "string",
                    "description": ": - xen server master password.\n",
                    "willReplaceOnChanges": true
                },
                "xsMasterUsername": {
                    "type": "string",
                    "description": ": - xen server master username.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "blocks",
                "cvmGateway",
                "cvmNetmask",
                "hypervisorGateway",
                "hypervisorNetmask",
                "nosPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationImageNodes resources.\n",
                "properties": {
                    "blocks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationImageNodesBlock:FoundationImageNodesBlock"
                        },
                        "willReplaceOnChanges": true
                    },
                    "clusterUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationImageNodesClusterUrl:FoundationImageNodesClusterUrl"
                        }
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationImageNodesCluster:FoundationImageNodesCluster"
                        },
                        "willReplaceOnChanges": true
                    },
                    "cvmGateway": {
                        "type": "string",
                        "description": ": - (Required) CVM gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "cvmNetmask": {
                        "type": "string",
                        "description": ": - (Required) CVM netmask.\n",
                        "willReplaceOnChanges": true
                    },
                    "eosMetadata": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesEosMetadata:FoundationImageNodesEosMetadata",
                        "description": ": - Contains user data from Eos portal.\n",
                        "willReplaceOnChanges": true
                    },
                    "fcSettings": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesFcSettings:FoundationImageNodesFcSettings",
                        "description": ": - Foundation Central specific settings.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervExternalVnic": {
                        "type": "string",
                        "description": ": - Hyperv External virtual network adapter name.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervExternalVswitch": {
                        "type": "string",
                        "description": ": - Hyperv External vswitch name.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervProductKey": {
                        "type": "string",
                        "description": ": - Hyperv product key.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervSku": {
                        "type": "boolean",
                        "description": ": - Hyperv SKU.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorGateway": {
                        "type": "string",
                        "description": ": - (Required) Hypervisor gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorIso": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesHypervisorIso:FoundationImageNodesHypervisorIso",
                        "description": ": - Hypervisor ISO.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorNameserver": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorNetmask": {
                        "type": "string",
                        "description": ": - (Required) Hypervisor netmask.\n",
                        "willReplaceOnChanges": true
                    },
                    "hypervisorPassword": {
                        "type": "string",
                        "description": ": - Hypervisor password.\n",
                        "willReplaceOnChanges": true
                    },
                    "installScript": {
                        "type": "string",
                        "description": ": - install script.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiGateway": {
                        "type": "string",
                        "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiNetmask": {
                        "type": "string",
                        "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiPassword": {
                        "type": "string",
                        "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI username\n",
                        "willReplaceOnChanges": true
                    },
                    "ipmiUser": {
                        "type": "string",
                        "description": ":- (Required incase using IPMI based imaging either here or outside blocks) IPMI password\n",
                        "willReplaceOnChanges": true
                    },
                    "layoutEggUuid": {
                        "type": "string",
                        "description": ": - Id of the custom layout which needs to be passed to imaging request.\n",
                        "willReplaceOnChanges": true
                    },
                    "nosPackage": {
                        "type": "string",
                        "description": ": - (Required) NOS package.\n",
                        "willReplaceOnChanges": true
                    },
                    "sessionId": {
                        "type": "string"
                    },
                    "skipHypervisor": {
                        "type": "boolean",
                        "description": ": - If hypervisor installation should be skipped.\n",
                        "willReplaceOnChanges": true
                    },
                    "svmRescueArgs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ": - Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.\n",
                        "willReplaceOnChanges": true
                    },
                    "tests": {
                        "$ref": "#/types/nutanix:index/FoundationImageNodesTests:FoundationImageNodesTests",
                        "description": ": - Types of tests to be performed.\n",
                        "willReplaceOnChanges": true
                    },
                    "ucsmIp": {
                        "type": "string",
                        "description": ": - UCSM IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "ucsmPassword": {
                        "type": "string",
                        "description": ": - UCSM password.\n",
                        "willReplaceOnChanges": true
                    },
                    "ucsmUser": {
                        "type": "string",
                        "description": ": - UCSM username.\n",
                        "willReplaceOnChanges": true
                    },
                    "uncPassword": {
                        "type": "string",
                        "description": ": - UNC password.\n",
                        "willReplaceOnChanges": true
                    },
                    "uncPath": {
                        "type": "string",
                        "description": ": - UNC Path.\n",
                        "willReplaceOnChanges": true
                    },
                    "uncUsername": {
                        "type": "string",
                        "description": ": - UNC username.\n",
                        "willReplaceOnChanges": true
                    },
                    "xenConfigType": {
                        "type": "string",
                        "description": ": - xen config types.\n",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterIp": {
                        "type": "string",
                        "description": ": - xen server master IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterLabel": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterPassword": {
                        "type": "string",
                        "description": ": - xen server master password.\n",
                        "willReplaceOnChanges": true
                    },
                    "xsMasterUsername": {
                        "type": "string",
                        "description": ": - xen server master username.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/foundationIpmiConfig:FoundationIpmiConfig": {
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock"
                    }
                },
                "ipmiGateway": {
                    "type": "string"
                },
                "ipmiNetmask": {
                    "type": "string"
                },
                "ipmiPassword": {
                    "type": "string"
                },
                "ipmiUser": {
                    "type": "string"
                }
            },
            "required": [
                "blocks",
                "ipmiGateway",
                "ipmiNetmask",
                "ipmiPassword",
                "ipmiUser"
            ],
            "inputProperties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock"
                    },
                    "willReplaceOnChanges": true
                },
                "ipmiGateway": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ipmiNetmask": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ipmiPassword": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ipmiUser": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "blocks",
                "ipmiGateway",
                "ipmiNetmask",
                "ipmiPassword",
                "ipmiUser"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FoundationIpmiConfig resources.\n",
                "properties": {
                    "blocks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/FoundationIpmiConfigBlock:FoundationIpmiConfigBlock"
                        },
                        "willReplaceOnChanges": true
                    },
                    "ipmiGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ipmiNetmask": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ipmiPassword": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ipmiUser": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/image:Image": {
            "description": "Provides a Nutanix Image resource to Create a image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = new nutanix.Image(\"test\", {\n    description: \"Ubuntu\",\n    sourceUri: \"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.Image(\"test\",\n    description=\"Ubuntu\",\n    source_uri=\"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Nutanix.Image(\"test\", new Nutanix.ImageArgs\n        {\n            Description = \"Ubuntu\",\n            SourceUri = \"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewImage(ctx, \"test\", \u0026nutanix.ImageArgs{\n\t\t\tDescription: pulumi.String(\"Ubuntu\"),\n\t\t\tSourceUri:   pulumi.String(\"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Image(\"test\", ImageArgs.builder()        \n            .description(\"Ubuntu\")\n            .sourceUri(\"http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nutanix:Image\n    properties:\n      description: Ubuntu\n      sourceUri: http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "architecture": {
                    "type": "string"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageCategory:ImageCategory"
                    }
                },
                "checksum": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterName": {
                    "type": "string"
                },
                "clusterReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageClusterReference:ImageClusterReference"
                    }
                },
                "clusterUuid": {
                    "type": "string"
                },
                "currentClusterReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageCurrentClusterReferenceList:ImageCurrentClusterReferenceList"
                    }
                },
                "description": {
                    "type": "string"
                },
                "imageType": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "retrievalUriLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sizeBytes": {
                    "type": "integer"
                },
                "sourcePath": {
                    "type": "string"
                },
                "sourceUri": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "version": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "apiVersion",
                "architecture",
                "availabilityZoneReference",
                "categories",
                "checksum",
                "clusterName",
                "clusterReferences",
                "clusterUuid",
                "currentClusterReferenceLists",
                "description",
                "imageType",
                "metadata",
                "name",
                "ownerReference",
                "retrievalUriLists",
                "sizeBytes",
                "sourcePath",
                "sourceUri",
                "state",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "type": "string"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageCategory:ImageCategory"
                    }
                },
                "checksum": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ImageClusterReference:ImageClusterReference"
                    }
                },
                "description": {
                    "type": "string"
                },
                "imageType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sourcePath": {
                    "type": "string"
                },
                "sourceUri": {
                    "type": "string"
                },
                "version": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Image resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ImageCategory:ImageCategory"
                        }
                    },
                    "checksum": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ImageClusterReference:ImageClusterReference"
                        }
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "currentClusterReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ImageCurrentClusterReferenceList:ImageCurrentClusterReferenceList"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "imageType": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "retrievalUriLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sizeBytes": {
                        "type": "integer"
                    },
                    "sourcePath": {
                        "type": "string"
                    },
                    "sourceUri": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "version": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/karbonCluster:KarbonCluster": {
            "description": "Provides a Nutanix Karbon Cluster resource to Create a k8s cluster.\n\n**Note:** Minimum tested version is Karbon 2.2\n\n**Note:** Kubernetes and Node OS upgrades are not supported using this provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst exampleCluster = new nutanix.KarbonCluster(\"example_cluster\", {\n    cniConfig: {\n        nodeCidrMaskSize: 24,\n        podIpv4Cidr: \"172.20.0.0/16\",\n        serviceIpv4Cidr: \"172.19.0.0/16\",\n    },\n    etcdNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n    masterNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n    storageClassConfig: {\n        reclaimPolicy: \"Delete\",\n        volumesConfig: {\n            fileSystem: \"ext4\",\n            flashMode: false,\n            password: \"my_pe_pw\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n            storageContainer: \"my_storage_container_name\",\n            username: \"my_pe_username\",\n        },\n    },\n    version: \"1.18.15-1\",\n    workerNodePool: {\n        ahvConfig: {\n            networkUuid: \"my_subnet_id\",\n            prismElementClusterUuid: \"my_pe_cluster_uuid\",\n        },\n        nodeOsVersion: \"ntnx-1.0\",\n        numInstances: 1,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nexample_cluster = nutanix.KarbonCluster(\"exampleCluster\",\n    cni_config=nutanix.KarbonClusterCniConfigArgs(\n        node_cidr_mask_size=24,\n        pod_ipv4_cidr=\"172.20.0.0/16\",\n        service_ipv4_cidr=\"172.19.0.0/16\",\n    ),\n    etcd_node_pool=nutanix.KarbonClusterEtcdNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterEtcdNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ),\n    master_node_pool=nutanix.KarbonClusterMasterNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterMasterNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ),\n    storage_class_config=nutanix.KarbonClusterStorageClassConfigArgs(\n        reclaim_policy=\"Delete\",\n        volumes_config=nutanix.KarbonClusterStorageClassConfigVolumesConfigArgs(\n            file_system=\"ext4\",\n            flash_mode=False,\n            password=\"my_pe_pw\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n            storage_container=\"my_storage_container_name\",\n            username=\"my_pe_username\",\n        ),\n    ),\n    version=\"1.18.15-1\",\n    worker_node_pool=nutanix.KarbonClusterWorkerNodePoolArgs(\n        ahv_config=nutanix.KarbonClusterWorkerNodePoolAhvConfigArgs(\n            network_uuid=\"my_subnet_id\",\n            prism_element_cluster_uuid=\"my_pe_cluster_uuid\",\n        ),\n        node_os_version=\"ntnx-1.0\",\n        num_instances=1,\n    ))\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleCluster = new Nutanix.KarbonCluster(\"exampleCluster\", new Nutanix.KarbonClusterArgs\n        {\n            CniConfig = new Nutanix.Inputs.KarbonClusterCniConfigArgs\n            {\n                NodeCidrMaskSize = 24,\n                PodIpv4Cidr = \"172.20.0.0/16\",\n                ServiceIpv4Cidr = \"172.19.0.0/16\",\n            },\n            EtcdNodePool = new Nutanix.Inputs.KarbonClusterEtcdNodePoolArgs\n            {\n                AhvConfig = new Nutanix.Inputs.KarbonClusterEtcdNodePoolAhvConfigArgs\n                {\n                    NetworkUuid = \"my_subnet_id\",\n                    PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n                },\n                NodeOsVersion = \"ntnx-1.0\",\n                NumInstances = 1,\n            },\n            MasterNodePool = new Nutanix.Inputs.KarbonClusterMasterNodePoolArgs\n            {\n                AhvConfig = new Nutanix.Inputs.KarbonClusterMasterNodePoolAhvConfigArgs\n                {\n                    NetworkUuid = \"my_subnet_id\",\n                    PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n                },\n                NodeOsVersion = \"ntnx-1.0\",\n                NumInstances = 1,\n            },\n            StorageClassConfig = new Nutanix.Inputs.KarbonClusterStorageClassConfigArgs\n            {\n                ReclaimPolicy = \"Delete\",\n                VolumesConfig = new Nutanix.Inputs.KarbonClusterStorageClassConfigVolumesConfigArgs\n                {\n                    FileSystem = \"ext4\",\n                    FlashMode = false,\n                    Password = \"my_pe_pw\",\n                    PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n                    StorageContainer = \"my_storage_container_name\",\n                    Username = \"my_pe_username\",\n                },\n            },\n            Version = \"1.18.15-1\",\n            WorkerNodePool = new Nutanix.Inputs.KarbonClusterWorkerNodePoolArgs\n            {\n                AhvConfig = new Nutanix.Inputs.KarbonClusterWorkerNodePoolAhvConfigArgs\n                {\n                    NetworkUuid = \"my_subnet_id\",\n                    PrismElementClusterUuid = \"my_pe_cluster_uuid\",\n                },\n                NodeOsVersion = \"ntnx-1.0\",\n                NumInstances = 1,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewKarbonCluster(ctx, \"exampleCluster\", \u0026nutanix.KarbonClusterArgs{\n\t\t\tCniConfig: \u0026KarbonClusterCniConfigArgs{\n\t\t\t\tNodeCidrMaskSize: pulumi.Int(24),\n\t\t\t\tPodIpv4Cidr:      pulumi.String(\"172.20.0.0/16\"),\n\t\t\t\tServiceIpv4Cidr:  pulumi.String(\"172.19.0.0/16\"),\n\t\t\t},\n\t\t\tEtcdNodePool: \u0026KarbonClusterEtcdNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026KarbonClusterEtcdNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t\tMasterNodePool: \u0026KarbonClusterMasterNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026KarbonClusterMasterNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t\tStorageClassConfig: \u0026KarbonClusterStorageClassConfigArgs{\n\t\t\t\tReclaimPolicy: pulumi.String(\"Delete\"),\n\t\t\t\tVolumesConfig: \u0026KarbonClusterStorageClassConfigVolumesConfigArgs{\n\t\t\t\t\tFileSystem:              pulumi.String(\"ext4\"),\n\t\t\t\t\tFlashMode:               pulumi.Bool(false),\n\t\t\t\t\tPassword:                pulumi.String(\"my_pe_pw\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t\tStorageContainer:        pulumi.String(\"my_storage_container_name\"),\n\t\t\t\t\tUsername:                pulumi.String(\"my_pe_username\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVersion: pulumi.String(\"1.18.15-1\"),\n\t\t\tWorkerNodePool: \u0026KarbonClusterWorkerNodePoolArgs{\n\t\t\t\tAhvConfig: \u0026KarbonClusterWorkerNodePoolAhvConfigArgs{\n\t\t\t\t\tNetworkUuid:             pulumi.String(\"my_subnet_id\"),\n\t\t\t\t\tPrismElementClusterUuid: pulumi.String(\"my_pe_cluster_uuid\"),\n\t\t\t\t},\n\t\t\t\tNodeOsVersion: pulumi.String(\"ntnx-1.0\"),\n\t\t\t\tNumInstances:  pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCluster = new KarbonCluster(\"exampleCluster\", KarbonClusterArgs.builder()        \n            .cniConfig(KarbonClusterCniConfigArgs.builder()\n                .nodeCidrMaskSize(24)\n                .podIpv4Cidr(\"172.20.0.0/16\")\n                .serviceIpv4Cidr(\"172.19.0.0/16\")\n                .build())\n            .etcdNodePool(KarbonClusterEtcdNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterEtcdNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .masterNodePool(KarbonClusterMasterNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterMasterNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .storageClassConfig(KarbonClusterStorageClassConfigArgs.builder()\n                .reclaimPolicy(\"Delete\")\n                .volumesConfig(KarbonClusterStorageClassConfigVolumesConfigArgs.builder()\n                    .fileSystem(\"ext4\")\n                    .flashMode(false)\n                    .password(\"my_pe_pw\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .storageContainer(\"my_storage_container_name\")\n                    .username(\"my_pe_username\")\n                    .build())\n                .build())\n            .version(\"1.18.15-1\")\n            .workerNodePool(KarbonClusterWorkerNodePoolArgs.builder()\n                .ahvConfig(KarbonClusterWorkerNodePoolAhvConfigArgs.builder()\n                    .networkUuid(\"my_subnet_id\")\n                    .prismElementClusterUuid(\"my_pe_cluster_uuid\")\n                    .build())\n                .nodeOsVersion(\"ntnx-1.0\")\n                .numInstances(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCluster:\n    type: nutanix:KarbonCluster\n    properties:\n      cniConfig:\n        nodeCidrMaskSize: 24\n        podIpv4Cidr: 172.20.0.0/16\n        serviceIpv4Cidr: 172.19.0.0/16\n      etcdNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n      masterNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n      storageClassConfig:\n        reclaimPolicy: Delete\n        volumesConfig:\n          fileSystem: ext4\n          flashMode: false\n          password: my_pe_pw\n          prismElementClusterUuid: my_pe_cluster_uuid\n          storageContainer: my_storage_container_name\n          username: my_pe_username\n      version: 1.18.15-1\n      workerNodePool:\n        ahvConfig:\n          networkUuid: my_subnet_id\n          prismElementClusterUuid: my_pe_cluster_uuid\n        nodeOsVersion: ntnx-1.0\n        numInstances: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "activePassiveConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig"
                },
                "cniConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig"
                },
                "deploymentType": {
                    "type": "string"
                },
                "etcdNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool"
                },
                "externalLbConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig"
                },
                "kubeapiServerIpv4Address": {
                    "type": "string"
                },
                "masterNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool"
                },
                "name": {
                    "type": "string"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry"
                    }
                },
                "singleMasterConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig"
                },
                "status": {
                    "type": "string"
                },
                "storageClassConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig"
                },
                "version": {
                    "type": "string"
                },
                "waitTimeoutMinutes": {
                    "type": "integer"
                },
                "workerNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool"
                }
            },
            "required": [
                "cniConfig",
                "deploymentType",
                "etcdNodePool",
                "kubeapiServerIpv4Address",
                "masterNodePool",
                "name",
                "status",
                "storageClassConfig",
                "version",
                "workerNodePool"
            ],
            "inputProperties": {
                "activePassiveConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig",
                    "willReplaceOnChanges": true
                },
                "cniConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig",
                    "willReplaceOnChanges": true
                },
                "etcdNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool"
                },
                "externalLbConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig",
                    "willReplaceOnChanges": true
                },
                "masterNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry"
                    }
                },
                "singleMasterConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig",
                    "willReplaceOnChanges": true
                },
                "storageClassConfig": {
                    "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "waitTimeoutMinutes": {
                    "type": "integer"
                },
                "workerNodePool": {
                    "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool"
                }
            },
            "requiredInputs": [
                "cniConfig",
                "etcdNodePool",
                "masterNodePool",
                "storageClassConfig",
                "version",
                "workerNodePool"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KarbonCluster resources.\n",
                "properties": {
                    "activePassiveConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterActivePassiveConfig:KarbonClusterActivePassiveConfig",
                        "willReplaceOnChanges": true
                    },
                    "cniConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterCniConfig:KarbonClusterCniConfig",
                        "willReplaceOnChanges": true
                    },
                    "deploymentType": {
                        "type": "string"
                    },
                    "etcdNodePool": {
                        "$ref": "#/types/nutanix:index/KarbonClusterEtcdNodePool:KarbonClusterEtcdNodePool"
                    },
                    "externalLbConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterExternalLbConfig:KarbonClusterExternalLbConfig",
                        "willReplaceOnChanges": true
                    },
                    "kubeapiServerIpv4Address": {
                        "type": "string"
                    },
                    "masterNodePool": {
                        "$ref": "#/types/nutanix:index/KarbonClusterMasterNodePool:KarbonClusterMasterNodePool"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "privateRegistries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/KarbonClusterPrivateRegistry:KarbonClusterPrivateRegistry"
                        }
                    },
                    "singleMasterConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterSingleMasterConfig:KarbonClusterSingleMasterConfig",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "storageClassConfig": {
                        "$ref": "#/types/nutanix:index/KarbonClusterStorageClassConfig:KarbonClusterStorageClassConfig",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "waitTimeoutMinutes": {
                        "type": "integer"
                    },
                    "workerNodePool": {
                        "$ref": "#/types/nutanix:index/KarbonClusterWorkerNodePool:KarbonClusterWorkerNodePool"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/karbonPrivateRegistry:KarbonPrivateRegistry": {
            "description": "Provides a Nutanix Karbon Registry resource to Create a private registry entry in Karbon.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst registries = pulumi.output(nutanix.getKarbonPrivateRegistry());\nconst registry = new nutanix.KarbonPrivateRegistry(\"registry\", {});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nregistries = nutanix.get_karbon_private_registry()\nregistry = nutanix.KarbonPrivateRegistry(\"registry\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var registries = Output.Create(Nutanix.GetKarbonPrivateRegistry.InvokeAsync());\n        var registry = new Nutanix.KarbonPrivateRegistry(\"registry\", new Nutanix.KarbonPrivateRegistryArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupKarbonPrivateRegistry(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewKarbonPrivateRegistry(ctx, \"registry\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var registries = Output.of(NutanixFunctions.getKarbonPrivateRegistry());\n\n        var registry = new KarbonPrivateRegistry(\"registry\");\n\n    }\n}\n```\n```yaml\nresources:\n  registry:\n    type: nutanix:KarbonPrivateRegistry\nvariables:\n  registries:\n    Fn::Invoke:\n      Function: nutanix:getKarbonPrivateRegistry\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cert": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "endpoint",
                "name",
                "port",
                "url"
            ],
            "inputProperties": {
                "cert": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer"
                },
                "url": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "port",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KarbonPrivateRegistry resources.\n",
                "properties": {
                    "cert": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/networkSecurityRule:NetworkSecurityRule": {
            "description": "Provides a Nutanix network security rule resource to Create a network security rule.\n\n\u003e NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Isolation Rule Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst isolation = new nutanix.NetworkSecurityRule(\"isolation\", {\n    description: \"Isolation Rule Example\",\n    isolationRuleAction: \"APPLY\",\n    isolationRuleFirstEntityFilterKindLists: [\"vm\"],\n    isolationRuleFirstEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Dev\"],\n    }],\n    isolationRuleFirstEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n    isolationRuleSecondEntityFilterKindLists: [\"vm\"],\n    isolationRuleSecondEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Production\"],\n    }],\n    isolationRuleSecondEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nisolation = nutanix.NetworkSecurityRule(\"isolation\",\n    description=\"Isolation Rule Example\",\n    isolation_rule_action=\"APPLY\",\n    isolation_rule_first_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_first_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Dev\"],\n    )],\n    isolation_rule_first_entity_filter_type=\"CATEGORIES_MATCH_ALL\",\n    isolation_rule_second_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_second_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Production\"],\n    )],\n    isolation_rule_second_entity_filter_type=\"CATEGORIES_MATCH_ALL\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var isolation = new Nutanix.NetworkSecurityRule(\"isolation\", new Nutanix.NetworkSecurityRuleArgs\n        {\n            Description = \"Isolation Rule Example\",\n            IsolationRuleAction = \"APPLY\",\n            IsolationRuleFirstEntityFilterKindLists = \n            {\n                \"vm\",\n            },\n            IsolationRuleFirstEntityFilterParams = \n            {\n                new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs\n                {\n                    Name = \"Environment\",\n                    Values = \n                    {\n                        \"Dev\",\n                    },\n                },\n            },\n            IsolationRuleFirstEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n            IsolationRuleSecondEntityFilterKindLists = \n            {\n                \"vm\",\n            },\n            IsolationRuleSecondEntityFilterParams = \n            {\n                new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs\n                {\n                    Name = \"Environment\",\n                    Values = \n                    {\n                        \"Production\",\n                    },\n                },\n            },\n            IsolationRuleSecondEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewNetworkSecurityRule(ctx, \"isolation\", \u0026nutanix.NetworkSecurityRuleArgs{\n\t\t\tDescription:         pulumi.String(\"Isolation Rule Example\"),\n\t\t\tIsolationRuleAction: pulumi.String(\"APPLY\"),\n\t\t\tIsolationRuleFirstEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterParams: NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArray{\n\t\t\t\t\u0026NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t\tIsolationRuleSecondEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterParams: NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArray{\n\t\t\t\t\u0026NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Production\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var isolation = new NetworkSecurityRule(\"isolation\", NetworkSecurityRuleArgs.builder()        \n            .description(\"Isolation Rule Example\")\n            .isolationRuleAction(\"APPLY\")\n            .isolationRuleFirstEntityFilterKindLists(\"vm\")\n            .isolationRuleFirstEntityFilterParams(NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Dev\")\n                .build())\n            .isolationRuleFirstEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .isolationRuleSecondEntityFilterKindLists(\"vm\")\n            .isolationRuleSecondEntityFilterParams(NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Production\")\n                .build())\n            .isolationRuleSecondEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  isolation:\n    type: nutanix:NetworkSecurityRule\n    properties:\n      description: Isolation Rule Example\n      isolationRuleAction: APPLY\n      isolationRuleFirstEntityFilterKindLists:\n        - vm\n      isolationRuleFirstEntityFilterParams:\n        - name: Environment\n          values:\n            - Dev\n      isolationRuleFirstEntityFilterType: CATEGORIES_MATCH_ALL\n      isolationRuleSecondEntityFilterKindLists:\n        - vm\n      isolationRuleSecondEntityFilterParams:\n        - name: Environment\n          values:\n            - Production\n      isolationRuleSecondEntityFilterType: CATEGORIES_MATCH_ALL\n```\n{{% /example %}}\n{{% example %}}\n### Usage with service and address groups\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst service1 = new nutanix.ServiceGroup(\"service1\", {\n    description: \"test\",\n    serviceLists: [{\n        protocol: \"TCP\",\n        tcpPortRangeLists: [\n            {\n                startPort: 22,\n                endPort: 22,\n            },\n            {\n                startPort: 2222,\n                endPort: 2222,\n            },\n        ],\n    }],\n});\nconst address1 = new nutanix.AddressGroup(\"address1\", {\n    description: \"test\",\n    ipAddressBlockLists: [{\n        ip: \"10.0.0.0\",\n        prefixLength: 24,\n    }],\n});\nconst ad_group_user_1 = new nutanix.CategoryValue(\"ad-group-user-1\", {\n    description: \"group user category value\",\n    value: \"AD\",\n});\nconst vDI = new nutanix.NetworkSecurityRule(\"vDI\", {\n    adRuleAction: \"APPLY\",\n    description: \"test\",\n    adRuleInboundAllowLists: [{\n        ipSubnet: \"10.0.0.0\",\n        ipSubnetPrefixLength: \"8\",\n        peerSpecificationType: \"IP_SUBNET\",\n        protocol: \"ALL\",\n    }],\n    adRuleTargetGroupDefaultInternalPolicy: \"DENY_ALL\",\n    adRuleTargetGroupFilterKindLists: [\"vm\"],\n    adRuleTargetGroupFilterParams: [{\n        name: \"AD\",\n        values: [\"AD\"],\n    }],\n    adRuleTargetGroupFilterType: \"CATEGORIES_MATCH_ALL\",\n    adRuleTargetGroupPeerSpecificationType: \"FILTER\",\n    adRuleOutboundAllowLists: [{\n        peerSpecificationType: \"ALL\",\n        serviceGroupLists: [{\n            kind: \"service_group\",\n            uuid: service1.id,\n        }],\n        addressGroupInclusionLists: [{\n            kind: \"address_group\",\n            uuid: address1.id,\n        }],\n    }],\n}, {\n    dependsOn: [ad_group_user_1],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nservice1 = nutanix.ServiceGroup(\"service1\",\n    description=\"test\",\n    service_lists=[nutanix.ServiceGroupServiceListArgs(\n        protocol=\"TCP\",\n        tcp_port_range_lists=[\n            nutanix.ServiceGroupServiceListTcpPortRangeListArgs(\n                start_port=22,\n                end_port=22,\n            ),\n            nutanix.ServiceGroupServiceListTcpPortRangeListArgs(\n                start_port=2222,\n                end_port=2222,\n            ),\n        ],\n    )])\naddress1 = nutanix.AddressGroup(\"address1\",\n    description=\"test\",\n    ip_address_block_lists=[nutanix.AddressGroupIpAddressBlockListArgs(\n        ip=\"10.0.0.0\",\n        prefix_length=24,\n    )])\nad_group_user_1 = nutanix.CategoryValue(\"ad-group-user-1\",\n    description=\"group user category value\",\n    value=\"AD\")\nv_di = nutanix.NetworkSecurityRule(\"vDI\",\n    ad_rule_action=\"APPLY\",\n    description=\"test\",\n    ad_rule_inbound_allow_lists=[nutanix.NetworkSecurityRuleAdRuleInboundAllowListArgs(\n        ip_subnet=\"10.0.0.0\",\n        ip_subnet_prefix_length=\"8\",\n        peer_specification_type=\"IP_SUBNET\",\n        protocol=\"ALL\",\n    )],\n    ad_rule_target_group_default_internal_policy=\"DENY_ALL\",\n    ad_rule_target_group_filter_kind_lists=[\"vm\"],\n    ad_rule_target_group_filter_params=[nutanix.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs(\n        name=\"AD\",\n        values=[\"AD\"],\n    )],\n    ad_rule_target_group_filter_type=\"CATEGORIES_MATCH_ALL\",\n    ad_rule_target_group_peer_specification_type=\"FILTER\",\n    ad_rule_outbound_allow_lists=[nutanix.NetworkSecurityRuleAdRuleOutboundAllowListArgs(\n        peer_specification_type=\"ALL\",\n        service_group_lists=[nutanix.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs(\n            kind=\"service_group\",\n            uuid=service1.id,\n        )],\n        address_group_inclusion_lists=[nutanix.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs(\n            kind=\"address_group\",\n            uuid=address1.id,\n        )],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[ad_group_user_1]))\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var service1 = new Nutanix.ServiceGroup(\"service1\", new Nutanix.ServiceGroupArgs\n        {\n            Description = \"test\",\n            ServiceLists = \n            {\n                new Nutanix.Inputs.ServiceGroupServiceListArgs\n                {\n                    Protocol = \"TCP\",\n                    TcpPortRangeLists = \n                    {\n                        new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs\n                        {\n                            StartPort = 22,\n                            EndPort = 22,\n                        },\n                        new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs\n                        {\n                            StartPort = 2222,\n                            EndPort = 2222,\n                        },\n                    },\n                },\n            },\n        });\n        var address1 = new Nutanix.AddressGroup(\"address1\", new Nutanix.AddressGroupArgs\n        {\n            Description = \"test\",\n            IpAddressBlockLists = \n            {\n                new Nutanix.Inputs.AddressGroupIpAddressBlockListArgs\n                {\n                    Ip = \"10.0.0.0\",\n                    PrefixLength = 24,\n                },\n            },\n        });\n        var ad_group_user_1 = new Nutanix.CategoryValue(\"ad-group-user-1\", new Nutanix.CategoryValueArgs\n        {\n            Description = \"group user category value\",\n            Value = \"AD\",\n        });\n        var vDI = new Nutanix.NetworkSecurityRule(\"vDI\", new Nutanix.NetworkSecurityRuleArgs\n        {\n            AdRuleAction = \"APPLY\",\n            Description = \"test\",\n            AdRuleInboundAllowLists = \n            {\n                new Nutanix.Inputs.NetworkSecurityRuleAdRuleInboundAllowListArgs\n                {\n                    IpSubnet = \"10.0.0.0\",\n                    IpSubnetPrefixLength = \"8\",\n                    PeerSpecificationType = \"IP_SUBNET\",\n                    Protocol = \"ALL\",\n                },\n            },\n            AdRuleTargetGroupDefaultInternalPolicy = \"DENY_ALL\",\n            AdRuleTargetGroupFilterKindLists = \n            {\n                \"vm\",\n            },\n            AdRuleTargetGroupFilterParams = \n            {\n                new Nutanix.Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs\n                {\n                    Name = \"AD\",\n                    Values = \n                    {\n                        \"AD\",\n                    },\n                },\n            },\n            AdRuleTargetGroupFilterType = \"CATEGORIES_MATCH_ALL\",\n            AdRuleTargetGroupPeerSpecificationType = \"FILTER\",\n            AdRuleOutboundAllowLists = \n            {\n                new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListArgs\n                {\n                    PeerSpecificationType = \"ALL\",\n                    ServiceGroupLists = \n                    {\n                        new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs\n                        {\n                            Kind = \"service_group\",\n                            Uuid = service1.Id,\n                        },\n                    },\n                    AddressGroupInclusionLists = \n                    {\n                        new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs\n                        {\n                            Kind = \"address_group\",\n                            Uuid = address1.Id,\n                        },\n                    },\n                },\n            },\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                ad_group_user_1,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tservice1, err := nutanix.NewServiceGroup(ctx, \"service1\", \u0026nutanix.ServiceGroupArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tServiceLists: ServiceGroupServiceListArray{\n\t\t\t\t\u0026ServiceGroupServiceListArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tTcpPortRangeLists: ServiceGroupServiceListTcpPortRangeListArray{\n\t\t\t\t\t\t\u0026ServiceGroupServiceListTcpPortRangeListArgs{\n\t\t\t\t\t\t\tStartPort: pulumi.Int(22),\n\t\t\t\t\t\t\tEndPort:   pulumi.Int(22),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026ServiceGroupServiceListTcpPortRangeListArgs{\n\t\t\t\t\t\t\tStartPort: pulumi.Int(2222),\n\t\t\t\t\t\t\tEndPort:   pulumi.Int(2222),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\taddress1, err := nutanix.NewAddressGroup(ctx, \"address1\", \u0026nutanix.AddressGroupArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIpAddressBlockLists: AddressGroupIpAddressBlockListArray{\n\t\t\t\t\u0026AddressGroupIpAddressBlockListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"10.0.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(24),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewCategoryValue(ctx, \"ad-group-user-1\", \u0026nutanix.CategoryValueArgs{\n\t\t\tDescription: pulumi.String(\"group user category value\"),\n\t\t\tValue:       pulumi.String(\"AD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewNetworkSecurityRule(ctx, \"vDI\", \u0026nutanix.NetworkSecurityRuleArgs{\n\t\t\tAdRuleAction: pulumi.String(\"APPLY\"),\n\t\t\tDescription:  pulumi.String(\"test\"),\n\t\t\tAdRuleInboundAllowLists: NetworkSecurityRuleAdRuleInboundAllowListArray{\n\t\t\t\t\u0026NetworkSecurityRuleAdRuleInboundAllowListArgs{\n\t\t\t\t\tIpSubnet:              pulumi.String(\"10.0.0.0\"),\n\t\t\t\t\tIpSubnetPrefixLength:  pulumi.String(\"8\"),\n\t\t\t\t\tPeerSpecificationType: pulumi.String(\"IP_SUBNET\"),\n\t\t\t\t\tProtocol:              pulumi.String(\"ALL\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdRuleTargetGroupDefaultInternalPolicy: pulumi.String(\"DENY_ALL\"),\n\t\t\tAdRuleTargetGroupFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tAdRuleTargetGroupFilterParams: NetworkSecurityRuleAdRuleTargetGroupFilterParamArray{\n\t\t\t\t\u0026NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"AD\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"AD\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdRuleTargetGroupFilterType:            pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t\tAdRuleTargetGroupPeerSpecificationType: pulumi.String(\"FILTER\"),\n\t\t\tAdRuleOutboundAllowLists: NetworkSecurityRuleAdRuleOutboundAllowListArray{\n\t\t\t\t\u0026NetworkSecurityRuleAdRuleOutboundAllowListArgs{\n\t\t\t\t\tPeerSpecificationType: pulumi.String(\"ALL\"),\n\t\t\t\t\tServiceGroupLists: NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArray{\n\t\t\t\t\t\t\u0026NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs{\n\t\t\t\t\t\t\tKind: pulumi.String(\"service_group\"),\n\t\t\t\t\t\t\tUuid: service1.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAddressGroupInclusionLists: NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArray{\n\t\t\t\t\t\t\u0026NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs{\n\t\t\t\t\t\t\tKind: pulumi.String(\"address_group\"),\n\t\t\t\t\t\t\tUuid: address1.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tad_group_user_1,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.resources.CustomResourceOptions;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var service1 = new ServiceGroup(\"service1\", ServiceGroupArgs.builder()        \n            .description(\"test\")\n            .serviceLists(ServiceGroupServiceListArgs.builder()\n                .protocol(\"TCP\")\n                .tcpPortRangeLists(                \n                    ServiceGroupServiceListTcpPortRangeListArgs.builder()\n                        .startPort(22)\n                        .endPort(22)\n                        .build(),\n                    ServiceGroupServiceListTcpPortRangeListArgs.builder()\n                        .startPort(2222)\n                        .endPort(2222)\n                        .build())\n                .build())\n            .build());\n\n        var address1 = new AddressGroup(\"address1\", AddressGroupArgs.builder()        \n            .description(\"test\")\n            .ipAddressBlockLists(AddressGroupIpAddressBlockListArgs.builder()\n                .ip(\"10.0.0.0\")\n                .prefixLength(24)\n                .build())\n            .build());\n\n        var ad_group_user_1 = new CategoryValue(\"ad-group-user-1\", CategoryValueArgs.builder()        \n            .description(\"group user category value\")\n            .value(\"AD\")\n            .build());\n\n        var vDI = new NetworkSecurityRule(\"vDI\", NetworkSecurityRuleArgs.builder()        \n            .adRuleAction(\"APPLY\")\n            .description(\"test\")\n            .adRuleInboundAllowLists(NetworkSecurityRuleAdRuleInboundAllowListArgs.builder()\n                .ipSubnet(\"10.0.0.0\")\n                .ipSubnetPrefixLength(\"8\")\n                .peerSpecificationType(\"IP_SUBNET\")\n                .protocol(\"ALL\")\n                .build())\n            .adRuleTargetGroupDefaultInternalPolicy(\"DENY_ALL\")\n            .adRuleTargetGroupFilterKindLists(\"vm\")\n            .adRuleTargetGroupFilterParams(NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs.builder()\n                .name(\"AD\")\n                .values(\"AD\")\n                .build())\n            .adRuleTargetGroupFilterType(\"CATEGORIES_MATCH_ALL\")\n            .adRuleTargetGroupPeerSpecificationType(\"FILTER\")\n            .adRuleOutboundAllowLists(NetworkSecurityRuleAdRuleOutboundAllowListArgs.builder()\n                .peerSpecificationType(\"ALL\")\n                .serviceGroupLists(NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs.builder()\n                    .kind(\"service_group\")\n                    .uuid(service1.id())\n                    .build())\n                .addressGroupInclusionLists(NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs.builder()\n                    .kind(\"address_group\")\n                    .uuid(address1.id())\n                    .build())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(ad_group_user_1)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  service1:\n    type: nutanix:ServiceGroup\n    properties:\n      description: test\n      serviceLists:\n        - protocol: TCP\n          tcpPortRangeLists:\n            - startPort: 22\n              endPort: 22\n            - startPort: 2222\n              endPort: 2222\n  address1:\n    type: nutanix:AddressGroup\n    properties:\n      description: test\n      ipAddressBlockLists:\n        - ip: 10.0.0.0\n          prefixLength: 24\n  ad-group-user-1:\n    type: nutanix:CategoryValue\n    properties:\n      description: group user category value\n      value: AD\n  vDI:\n    type: nutanix:NetworkSecurityRule\n    properties:\n      adRuleAction: APPLY\n      description: test\n      adRuleInboundAllowLists:\n        - ipSubnet: 10.0.0.0\n          ipSubnetPrefixLength: 8\n          peerSpecificationType: IP_SUBNET\n          protocol: ALL\n      adRuleTargetGroupDefaultInternalPolicy: DENY_ALL\n      adRuleTargetGroupFilterKindLists:\n        - vm\n      adRuleTargetGroupFilterParams:\n        - name: AD\n          values:\n            - AD\n      adRuleTargetGroupFilterType: CATEGORIES_MATCH_ALL\n      adRuleTargetGroupPeerSpecificationType: FILTER\n      adRuleOutboundAllowLists:\n        - peerSpecificationType: ALL\n          serviceGroupLists:\n            - kind: service_group\n              uuid: ${service1.id}\n          addressGroupInclusionLists:\n            - kind: address_group\n              uuid: ${address1.id}\n    options:\n      dependson:\n        - ${[\"ad-group-user-1\"]}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "adRuleAction": {
                    "type": "string"
                },
                "adRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList"
                    }
                },
                "adRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList"
                    }
                },
                "adRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string"
                },
                "adRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "adRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam"
                    }
                },
                "adRuleTargetGroupFilterType": {
                    "type": "string"
                },
                "adRuleTargetGroupPeerSpecificationType": {
                    "type": "string"
                },
                "allowIpv6Traffic": {
                    "type": "boolean"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "appRuleAction": {
                    "type": "string"
                },
                "appRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList"
                    }
                },
                "appRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList"
                    }
                },
                "appRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string"
                },
                "appRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam"
                    }
                },
                "appRuleTargetGroupFilterType": {
                    "type": "string"
                },
                "appRuleTargetGroupPeerSpecificationType": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory"
                    }
                },
                "description": {
                    "type": "string"
                },
                "isPolicyHitlogEnabled": {
                    "type": "boolean"
                },
                "isolationRuleAction": {
                    "type": "string"
                },
                "isolationRuleFirstEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isolationRuleFirstEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                    }
                },
                "isolationRuleFirstEntityFilterType": {
                    "type": "string"
                },
                "isolationRuleSecondEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isolationRuleSecondEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                    }
                },
                "isolationRuleSecondEntityFilterType": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "adRuleAction",
                "adRuleInboundAllowLists",
                "adRuleOutboundAllowLists",
                "adRuleTargetGroupFilterKindLists",
                "adRuleTargetGroupFilterParams",
                "adRuleTargetGroupFilterType",
                "allowIpv6Traffic",
                "apiVersion",
                "appRuleAction",
                "appRuleInboundAllowLists",
                "appRuleOutboundAllowLists",
                "appRuleTargetGroupFilterKindLists",
                "appRuleTargetGroupFilterParams",
                "appRuleTargetGroupFilterType",
                "categories",
                "description",
                "isPolicyHitlogEnabled",
                "isolationRuleAction",
                "isolationRuleFirstEntityFilterKindLists",
                "isolationRuleFirstEntityFilterParams",
                "isolationRuleFirstEntityFilterType",
                "isolationRuleSecondEntityFilterKindLists",
                "isolationRuleSecondEntityFilterParams",
                "isolationRuleSecondEntityFilterType",
                "metadata",
                "name",
                "ownerReference",
                "projectReference"
            ],
            "inputProperties": {
                "adRuleAction": {
                    "type": "string"
                },
                "adRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList"
                    }
                },
                "adRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList"
                    }
                },
                "adRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string"
                },
                "adRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "adRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam"
                    }
                },
                "adRuleTargetGroupFilterType": {
                    "type": "string"
                },
                "adRuleTargetGroupPeerSpecificationType": {
                    "type": "string"
                },
                "allowIpv6Traffic": {
                    "type": "boolean"
                },
                "appRuleAction": {
                    "type": "string"
                },
                "appRuleInboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList"
                    }
                },
                "appRuleOutboundAllowLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList"
                    }
                },
                "appRuleTargetGroupDefaultInternalPolicy": {
                    "type": "string"
                },
                "appRuleTargetGroupFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appRuleTargetGroupFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam"
                    }
                },
                "appRuleTargetGroupFilterType": {
                    "type": "string"
                },
                "appRuleTargetGroupPeerSpecificationType": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory"
                    }
                },
                "description": {
                    "type": "string"
                },
                "isPolicyHitlogEnabled": {
                    "type": "boolean"
                },
                "isolationRuleAction": {
                    "type": "string"
                },
                "isolationRuleFirstEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isolationRuleFirstEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                    }
                },
                "isolationRuleFirstEntityFilterType": {
                    "type": "string"
                },
                "isolationRuleSecondEntityFilterKindLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isolationRuleSecondEntityFilterParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                    }
                },
                "isolationRuleSecondEntityFilterType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkSecurityRule resources.\n",
                "properties": {
                    "adRuleAction": {
                        "type": "string"
                    },
                    "adRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleInboundAllowList:NetworkSecurityRuleAdRuleInboundAllowList"
                        }
                    },
                    "adRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleOutboundAllowList:NetworkSecurityRuleAdRuleOutboundAllowList"
                        }
                    },
                    "adRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string"
                    },
                    "adRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "adRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAdRuleTargetGroupFilterParam:NetworkSecurityRuleAdRuleTargetGroupFilterParam"
                        }
                    },
                    "adRuleTargetGroupFilterType": {
                        "type": "string"
                    },
                    "adRuleTargetGroupPeerSpecificationType": {
                        "type": "string"
                    },
                    "allowIpv6Traffic": {
                        "type": "boolean"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "appRuleAction": {
                        "type": "string"
                    },
                    "appRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleInboundAllowList:NetworkSecurityRuleAppRuleInboundAllowList"
                        }
                    },
                    "appRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleOutboundAllowList:NetworkSecurityRuleAppRuleOutboundAllowList"
                        }
                    },
                    "appRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string"
                    },
                    "appRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "appRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleAppRuleTargetGroupFilterParam:NetworkSecurityRuleAppRuleTargetGroupFilterParam"
                        }
                    },
                    "appRuleTargetGroupFilterType": {
                        "type": "string"
                    },
                    "appRuleTargetGroupPeerSpecificationType": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleCategory:NetworkSecurityRuleCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "isPolicyHitlogEnabled": {
                        "type": "boolean"
                    },
                    "isolationRuleAction": {
                        "type": "string"
                    },
                    "isolationRuleFirstEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isolationRuleFirstEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleFirstEntityFilterParam:NetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                        }
                    },
                    "isolationRuleFirstEntityFilterType": {
                        "type": "string"
                    },
                    "isolationRuleSecondEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isolationRuleSecondEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/NetworkSecurityRuleIsolationRuleSecondEntityFilterParam:NetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                        }
                    },
                    "isolationRuleSecondEntityFilterType": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/pbr:Pbr": {
            "description": "Provides Nutanix resource to create Policy Based Routing inside VPCs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### pbr creation with vpc name with any source or destination or protocol with permit action\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst pbr = new nutanix.Pbr(\"pbr\", {\n    action: \"PERMIT\",\n    destination: {\n        addressType: \"ALL\",\n    },\n    priority: 123,\n    protocolType: \"ALL\",\n    source: {\n        addressType: \"ALL\",\n    },\n    vpcName: \"test123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\npbr = nutanix.Pbr(\"pbr\",\n    action=\"PERMIT\",\n    destination=nutanix.PbrDestinationArgs(\n        address_type=\"ALL\",\n    ),\n    priority=123,\n    protocol_type=\"ALL\",\n    source=nutanix.PbrSourceArgs(\n        address_type=\"ALL\",\n    ),\n    vpc_name=\"test123\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pbr = new Nutanix.Pbr(\"pbr\", new Nutanix.PbrArgs\n        {\n            Action = \"PERMIT\",\n            Destination = new Nutanix.Inputs.PbrDestinationArgs\n            {\n                AddressType = \"ALL\",\n            },\n            Priority = 123,\n            ProtocolType = \"ALL\",\n            Source = new Nutanix.Inputs.PbrSourceArgs\n            {\n                AddressType = \"ALL\",\n            },\n            VpcName = \"test123\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewPbr(ctx, \"pbr\", \u0026nutanix.PbrArgs{\n\t\t\tAction: pulumi.String(\"PERMIT\"),\n\t\t\tDestination: \u0026PbrDestinationArgs{\n\t\t\t\tAddressType: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t\tPriority:     pulumi.Int(123),\n\t\t\tProtocolType: pulumi.String(\"ALL\"),\n\t\t\tSource: \u0026PbrSourceArgs{\n\t\t\t\tAddressType: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t\tVpcName: pulumi.String(\"test123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pbr = new Pbr(\"pbr\", PbrArgs.builder()        \n            .action(\"PERMIT\")\n            .destination(PbrDestinationArgs.builder()\n                .addressType(\"ALL\")\n                .build())\n            .priority(123)\n            .protocolType(\"ALL\")\n            .source(PbrSourceArgs.builder()\n                .addressType(\"ALL\")\n                .build())\n            .vpcName(\"test123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pbr:\n    type: nutanix:Pbr\n    properties:\n      action: PERMIT\n      destination:\n        addressType: ALL\n      priority: 123\n      protocolType: ALL\n      source:\n        addressType: ALL\n      vpcName: test123\n```\n{{% /example %}}\n{{% /examples %}}\n## source\n\nsource address of an IP packet. This could be either an ip prefix or an address_type . \n\n* `address` - (Optional) address type of source. Should be one of {INTERNET, ALL}.\n* `subnet_ip` - (Optional) IP subnet provided as an address.\n* `prefix_length` - (Optional) prefix length of provided subnet. \n\n## destination\n\ndestination address of an IP packet. This could be either an ip prefix or an address_type . \n\n* `address` - (Optional) address type of source. Should be one of {INTERNET, ALL}.\n* `subnet_ip` - (Optional) IP subnet provided as an address.\n* `prefix_length` - (Optional) prefix length of provided subnet. \n\n## protocol_parameters\n\nRouting policy IP protocol parameters\n\n* `tcp` - (Optional) TCP parameters in routing policy\n* `udp` - (Optional) UDP parameters in routing policy\n* `icmp` - (Optional) ICMP parameters in routing policy.\n* `protocol_number` - (Optional) Protocol number in routing policy\n\n## tcp, udp\n\n* `source_port_range` - (Required) Range of TCP/UDP ports.\n* `destination_port_range` - (Required) Range of TCP/UDP ports.\n\n## source_port_range, destination_port_range\n\n* `start_port` - (Required) start port number\n* `end_port` - (Required) end port number\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .\n"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "destination": {
                    "$ref": "#/types/nutanix:index/PbrDestination:PbrDestination"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The routing policies kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of policy\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of policy\n"
                },
                "protocolParameters": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParameters:PbrProtocolParameters"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of network services. This field is valid only when action is REROUTE.\n"
                },
                "source": {
                    "$ref": "#/types/nutanix:index/PbrSource:PbrSource"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}\n"
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc . Should not be used with {vpc_name} .\n"
                }
            },
            "required": [
                "action",
                "apiVersion",
                "destination",
                "isBidirectional",
                "metadata",
                "name",
                "priority",
                "protocolType",
                "serviceIpLists",
                "source",
                "vpcName",
                "vpcReferenceUuid"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .\n",
                    "willReplaceOnChanges": true
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "destination": {
                    "$ref": "#/types/nutanix:index/PbrDestination:PbrDestination"
                },
                "isBidirectional": {
                    "type": "boolean",
                    "description": "Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of policy\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "priority of policy\n"
                },
                "protocolParameters": {
                    "$ref": "#/types/nutanix:index/PbrProtocolParameters:PbrProtocolParameters"
                },
                "protocolType": {
                    "type": "string",
                    "description": "Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .\n"
                },
                "serviceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of network services. This field is valid only when action is REROUTE.\n"
                },
                "source": {
                    "$ref": "#/types/nutanix:index/PbrSource:PbrSource"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}\n",
                    "willReplaceOnChanges": true
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "description": "The reference to a vpc . Should not be used with {vpc_name} .\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "destination",
                "priority",
                "protocolType",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pbr resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .\n",
                        "willReplaceOnChanges": true
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "destination": {
                        "$ref": "#/types/nutanix:index/PbrDestination:PbrDestination"
                    },
                    "isBidirectional": {
                        "type": "boolean",
                        "description": "Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The routing policies kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of policy\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "priority of policy\n"
                    },
                    "protocolParameters": {
                        "$ref": "#/types/nutanix:index/PbrProtocolParameters:PbrProtocolParameters"
                    },
                    "protocolType": {
                        "type": "string",
                        "description": "Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .\n"
                    },
                    "serviceIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP addresses of network services. This field is valid only when action is REROUTE.\n"
                    },
                    "source": {
                        "$ref": "#/types/nutanix:index/PbrSource:PbrSource"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The reference to a vpc. Should not be used with {vpc_reference_uuid}\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "description": "The reference to a vpc . Should not be used with {vpc_name} .\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/project:Project": {
            "description": "Provides a Nutanix Project resource to Create a Project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\n\nconst subnet = new nutanix.Subnet(\"subnet\", {\n    clusterUuid: \"\u003cYOUR_CLUSTER_ID\u003e\",\n    description: \"Description of my unit test VLAN\",\n    vlanId: 31,\n    subnetType: \"VLAN\",\n    subnetIp: \"10.250.140.0\",\n    defaultGatewayIp: \"10.250.140.1\",\n    prefixLength: 24,\n    dhcpOptions: {\n        boot_file_name: \"bootfile\",\n        domain_name: \"nutanix\",\n        tftp_server_name: \"10.250.140.200\",\n    },\n    dhcpDomainNameServerLists: [\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcpDomainSearchLists: [\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ],\n});\nconst projectTest = new nutanix.Project(\"projectTest\", {\n    description: \"This is my project\",\n    categories: [{\n        name: \"Environment\",\n        value: \"Staging\",\n    }],\n    resourceDomain: {\n        resources: [{\n            limit: 4,\n            resourceType: \"STORAGE\",\n        }],\n    },\n    defaultSubnetReference: {\n        uuid: subnet.metadata.uuid,\n    },\n    apiVersion: \"3.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsubnet = nutanix.Subnet(\"subnet\",\n    cluster_uuid=\"\u003cYOUR_CLUSTER_ID\u003e\",\n    description=\"Description of my unit test VLAN\",\n    vlan_id=31,\n    subnet_type=\"VLAN\",\n    subnet_ip=\"10.250.140.0\",\n    default_gateway_ip=\"10.250.140.1\",\n    prefix_length=24,\n    dhcp_options={\n        \"boot_file_name\": \"bootfile\",\n        \"domain_name\": \"nutanix\",\n        \"tftp_server_name\": \"10.250.140.200\",\n    },\n    dhcp_domain_name_server_lists=[\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcp_domain_search_lists=[\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ])\nproject_test = nutanix.Project(\"projectTest\",\n    description=\"This is my project\",\n    categories=[nutanix.ProjectCategoryArgs(\n        name=\"Environment\",\n        value=\"Staging\",\n    )],\n    resource_domain=nutanix.ProjectResourceDomainArgs(\n        resources=[nutanix.ProjectResourceDomainResourceArgs(\n            limit=4,\n            resource_type=\"STORAGE\",\n        )],\n    ),\n    default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(\n        uuid=subnet.metadata[\"uuid\"],\n    ),\n    api_version=\"3.1\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var subnet = new Nutanix.Subnet(\"subnet\", new Nutanix.SubnetArgs\n        {\n            ClusterUuid = \"\u003cYOUR_CLUSTER_ID\u003e\",\n            Description = \"Description of my unit test VLAN\",\n            VlanId = 31,\n            SubnetType = \"VLAN\",\n            SubnetIp = \"10.250.140.0\",\n            DefaultGatewayIp = \"10.250.140.1\",\n            PrefixLength = 24,\n            DhcpOptions = \n            {\n                { \"boot_file_name\", \"bootfile\" },\n                { \"domain_name\", \"nutanix\" },\n                { \"tftp_server_name\", \"10.250.140.200\" },\n            },\n            DhcpDomainNameServerLists = \n            {\n                \"8.8.8.8\",\n                \"4.2.2.2\",\n            },\n            DhcpDomainSearchLists = \n            {\n                \"terraform.nutanix.com\",\n                \"terraform.unit.test.com\",\n            },\n        });\n        var projectTest = new Nutanix.Project(\"projectTest\", new Nutanix.ProjectArgs\n        {\n            Description = \"This is my project\",\n            Categories = \n            {\n                new Nutanix.Inputs.ProjectCategoryArgs\n                {\n                    Name = \"Environment\",\n                    Value = \"Staging\",\n                },\n            },\n            ResourceDomain = new Nutanix.Inputs.ProjectResourceDomainArgs\n            {\n                Resources = \n                {\n                    new Nutanix.Inputs.ProjectResourceDomainResourceArgs\n                    {\n                        Limit = 4,\n                        ResourceType = \"STORAGE\",\n                    },\n                },\n            },\n            DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs\n            {\n                Uuid = subnet.Metadata.Apply(metadata =\u003e metadata.Uuid),\n            },\n            ApiVersion = \"3.1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsubnet, err := nutanix.NewSubnet(ctx, \"subnet\", \u0026nutanix.SubnetArgs{\n\t\t\tClusterUuid:      pulumi.String(\"\u003cYOUR_CLUSTER_ID\u003e\"),\n\t\t\tDescription:      pulumi.String(\"Description of my unit test VLAN\"),\n\t\t\tVlanId:           pulumi.Int(31),\n\t\t\tSubnetType:       pulumi.String(\"VLAN\"),\n\t\t\tSubnetIp:         pulumi.String(\"10.250.140.0\"),\n\t\t\tDefaultGatewayIp: pulumi.String(\"10.250.140.1\"),\n\t\t\tPrefixLength:     pulumi.Int(24),\n\t\t\tDhcpOptions: pulumi.StringMap{\n\t\t\t\t\"boot_file_name\":   pulumi.String(\"bootfile\"),\n\t\t\t\t\"domain_name\":      pulumi.String(\"nutanix\"),\n\t\t\t\t\"tftp_server_name\": pulumi.String(\"10.250.140.200\"),\n\t\t\t},\n\t\t\tDhcpDomainNameServerLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"4.2.2.2\"),\n\t\t\t},\n\t\t\tDhcpDomainSearchLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform.nutanix.com\"),\n\t\t\t\tpulumi.String(\"terraform.unit.test.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewProject(ctx, \"projectTest\", \u0026nutanix.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"This is my project\"),\n\t\t\tCategories: ProjectCategoryArray{\n\t\t\t\t\u0026ProjectCategoryArgs{\n\t\t\t\t\tName:  pulumi.String(\"Environment\"),\n\t\t\t\t\tValue: pulumi.String(\"Staging\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResourceDomain: \u0026ProjectResourceDomainArgs{\n\t\t\t\tResources: ProjectResourceDomainResourceArray{\n\t\t\t\t\t\u0026ProjectResourceDomainResourceArgs{\n\t\t\t\t\t\tLimit:        pulumi.Int(4),\n\t\t\t\t\t\tResourceType: pulumi.String(\"STORAGE\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDefaultSubnetReference: \u0026ProjectDefaultSubnetReferenceArgs{\n\t\t\t\tUuid: subnet.Metadata.ApplyT(func(metadata map[string]string) (string, error) {\n\t\t\t\t\treturn metadata.Uuid, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tApiVersion: pulumi.String(\"3.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var subnet = new Subnet(\"subnet\", SubnetArgs.builder()        \n            .clusterUuid(\"\u003cYOUR_CLUSTER_ID\u003e\")\n            .description(\"Description of my unit test VLAN\")\n            .vlanId(31)\n            .subnetType(\"VLAN\")\n            .subnetIp(\"10.250.140.0\")\n            .defaultGatewayIp(\"10.250.140.1\")\n            .prefixLength(24)\n            .dhcpOptions(Map.ofEntries(\n                Map.entry(\"boot_file_name\", \"bootfile\"),\n                Map.entry(\"domain_name\", \"nutanix\"),\n                Map.entry(\"tftp_server_name\", \"10.250.140.200\")\n            ))\n            .dhcpDomainNameServerLists(            \n                \"8.8.8.8\",\n                \"4.2.2.2\")\n            .dhcpDomainSearchLists(            \n                \"terraform.nutanix.com\",\n                \"terraform.unit.test.com\")\n            .build());\n\n        var projectTest = new Project(\"projectTest\", ProjectArgs.builder()        \n            .description(\"This is my project\")\n            .categories(ProjectCategoryArgs.builder()\n                .name(\"Environment\")\n                .value(\"Staging\")\n                .build())\n            .resourceDomain(ProjectResourceDomainArgs.builder()\n                .resources(ProjectResourceDomainResourceArgs.builder()\n                    .limit(4)\n                    .resourceType(\"STORAGE\")\n                    .build())\n                .build())\n            .defaultSubnetReference(ProjectDefaultSubnetReferenceArgs.builder()\n                .uuid(subnet.metadata().apply(metadata -\u003e metadata.uuid()))\n                .build())\n            .apiVersion(\"3.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  subnet:\n    type: nutanix:Subnet\n    properties:\n      clusterUuid: \u003cYOUR_CLUSTER_ID\u003e\n      description: Description of my unit test VLAN\n      vlanId: 31\n      subnetType: VLAN\n      subnetIp: 10.250.140.0\n      defaultGatewayIp: 10.250.140.1\n      prefixLength: 24\n      dhcpOptions:\n        boot_file_name: bootfile\n        domain_name: nutanix\n        tftp_server_name: 10.250.140.200\n      dhcpDomainNameServerLists:\n        - 8.8.8.8\n        - 4.2.2.2\n      dhcpDomainSearchLists:\n        - terraform.nutanix.com\n        - terraform.unit.test.com\n  projectTest:\n    type: nutanix:Project\n    properties:\n      description: This is my project\n      categories:\n        - name: Environment\n          value: Staging\n      resourceDomain:\n        resources:\n          - limit: 4\n            resourceType: STORAGE\n      defaultSubnetReference:\n        uuid: ${subnet.metadata.uuid}\n      apiVersion: 3.1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accountReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList"
                    },
                    "description": "List of accounts associated with the project.\n* `account_reference_list.#.kind` - (Optional) The kind name. Default value is `account`\n* `account_reference_list.#.uuid` - (Required) The UUID of an account.\n* `account_reference_list.#.name` - (Optional/Computed) The name of an account.\n"
                },
                "apiVersion": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectCategory:ProjectCategory"
                    }
                },
                "defaultSubnetReference": {
                    "$ref": "#/types/nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference",
                    "description": "Reference to a subnet.\n* `default_subnet_reference.kind` - (Optional) The kind name. Default value is `subnet`\n* `default_subnet_reference.uuid` - (Required) The UUID of a subnet.\n* `default_subnet_reference.name` - (Optional/Computed) The name of a subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for project.\n"
                },
                "environmentReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList"
                    },
                    "description": "List of environments associated with the project.\n* `environment_reference_list.#.kind` - (Optional) The kind name. Default value is `environment`\n* `environment_reference_list.#.uuid` - (Required) The UUID of an environment.\n* `environment_reference_list.#.name` - (Optional/Computed) The name of an environment.\n"
                },
                "externalNetworkLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList"
                    },
                    "description": "List of external networks associated with the project.\n* `external_network_list.#.uuid` - (Required) The UUID of a network.\n* `external_network_list.#.name` - (Optional/Computed) The name of a network.\n"
                },
                "externalUserGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList"
                    },
                    "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - (Optional) The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - (Required) The UUID of a user_group\n* `external_user_group_reference_list.#.name` - (Optional/Computed) The name of a user_group\n"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resourceDomain": {
                    "$ref": "#/types/nutanix:index/ProjectResourceDomain:ProjectResourceDomain",
                    "description": "The status for a resource domain (limits and values)\n* `resource_domain.resources` - (Required) Array of the utilization/limit for resource types\n* `resource_domain.resources.#.limit` - (Required) The resource consumption limit (unspecified is unlimited)\n* `resource_domain.resources.#.resource_type` - (Required) The type of resource (for example storage, CPUs)\n"
                },
                "state": {
                    "type": "string"
                },
                "subnetReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList"
                    },
                    "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - (Optional) The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - (Required) The UUID of a subnet\n* `subnet_reference_list.#.name` - (Optional/Computed) The name of a subnet.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList"
                    },
                    "description": "List of users in the project.\n* `user_reference_list.#.kind` - (Optional) The kind name. Default value is `user`\n* `user_reference_list.#.uuid` - (Required) The UUID of a user\n* `user_reference_list.#.name` - (Optional/Computed) The name of a user.\n"
                }
            },
            "required": [
                "accountReferenceLists",
                "apiVersion",
                "categories",
                "defaultSubnetReference",
                "description",
                "environmentReferenceLists",
                "externalNetworkLists",
                "externalUserGroupReferenceLists",
                "isDefault",
                "metadata",
                "name",
                "ownerReference",
                "projectReference",
                "state",
                "subnetReferenceLists",
                "userReferenceLists"
            ],
            "inputProperties": {
                "accountReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList"
                    },
                    "description": "List of accounts associated with the project.\n* `account_reference_list.#.kind` - (Optional) The kind name. Default value is `account`\n* `account_reference_list.#.uuid` - (Required) The UUID of an account.\n* `account_reference_list.#.name` - (Optional/Computed) The name of an account.\n"
                },
                "apiVersion": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectCategory:ProjectCategory"
                    }
                },
                "defaultSubnetReference": {
                    "$ref": "#/types/nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference",
                    "description": "Reference to a subnet.\n* `default_subnet_reference.kind` - (Optional) The kind name. Default value is `subnet`\n* `default_subnet_reference.uuid` - (Required) The UUID of a subnet.\n* `default_subnet_reference.name` - (Optional/Computed) The name of a subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for project.\n"
                },
                "environmentReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList"
                    },
                    "description": "List of environments associated with the project.\n* `environment_reference_list.#.kind` - (Optional) The kind name. Default value is `environment`\n* `environment_reference_list.#.uuid` - (Required) The UUID of an environment.\n* `environment_reference_list.#.name` - (Optional/Computed) The name of an environment.\n"
                },
                "externalNetworkLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList"
                    },
                    "description": "List of external networks associated with the project.\n* `external_network_list.#.uuid` - (Required) The UUID of a network.\n* `external_network_list.#.name` - (Optional/Computed) The name of a network.\n"
                },
                "externalUserGroupReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList"
                    },
                    "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - (Optional) The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - (Required) The UUID of a user_group\n* `external_user_group_reference_list.#.name` - (Optional/Computed) The name of a user_group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resourceDomain": {
                    "$ref": "#/types/nutanix:index/ProjectResourceDomain:ProjectResourceDomain",
                    "description": "The status for a resource domain (limits and values)\n* `resource_domain.resources` - (Required) Array of the utilization/limit for resource types\n* `resource_domain.resources.#.limit` - (Required) The resource consumption limit (unspecified is unlimited)\n* `resource_domain.resources.#.resource_type` - (Required) The type of resource (for example storage, CPUs)\n"
                },
                "subnetReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList"
                    },
                    "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - (Optional) The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - (Required) The UUID of a subnet\n* `subnet_reference_list.#.name` - (Optional/Computed) The name of a subnet.\n"
                },
                "userReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList"
                    },
                    "description": "List of users in the project.\n* `user_reference_list.#.kind` - (Optional) The kind name. Default value is `user`\n* `user_reference_list.#.uuid` - (Required) The UUID of a user\n* `user_reference_list.#.name` - (Optional/Computed) The name of a user.\n"
                }
            },
            "requiredInputs": [
                "defaultSubnetReference",
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "accountReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectAccountReferenceList:ProjectAccountReferenceList"
                        },
                        "description": "List of accounts associated with the project.\n* `account_reference_list.#.kind` - (Optional) The kind name. Default value is `account`\n* `account_reference_list.#.uuid` - (Required) The UUID of an account.\n* `account_reference_list.#.name` - (Optional/Computed) The name of an account.\n"
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectCategory:ProjectCategory"
                        }
                    },
                    "defaultSubnetReference": {
                        "$ref": "#/types/nutanix:index/ProjectDefaultSubnetReference:ProjectDefaultSubnetReference",
                        "description": "Reference to a subnet.\n* `default_subnet_reference.kind` - (Optional) The kind name. Default value is `subnet`\n* `default_subnet_reference.uuid` - (Required) The UUID of a subnet.\n* `default_subnet_reference.name` - (Optional/Computed) The name of a subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for project.\n"
                    },
                    "environmentReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectEnvironmentReferenceList:ProjectEnvironmentReferenceList"
                        },
                        "description": "List of environments associated with the project.\n* `environment_reference_list.#.kind` - (Optional) The kind name. Default value is `environment`\n* `environment_reference_list.#.uuid` - (Required) The UUID of an environment.\n* `environment_reference_list.#.name` - (Optional/Computed) The name of an environment.\n"
                    },
                    "externalNetworkLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectExternalNetworkList:ProjectExternalNetworkList"
                        },
                        "description": "List of external networks associated with the project.\n* `external_network_list.#.uuid` - (Required) The UUID of a network.\n* `external_network_list.#.name` - (Optional/Computed) The name of a network.\n"
                    },
                    "externalUserGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectExternalUserGroupReferenceList:ProjectExternalUserGroupReferenceList"
                        },
                        "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - (Optional) The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - (Required) The UUID of a user_group\n* `external_user_group_reference_list.#.name` - (Optional/Computed) The name of a user_group\n"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the project.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "resourceDomain": {
                        "$ref": "#/types/nutanix:index/ProjectResourceDomain:ProjectResourceDomain",
                        "description": "The status for a resource domain (limits and values)\n* `resource_domain.resources` - (Required) Array of the utilization/limit for resource types\n* `resource_domain.resources.#.limit` - (Required) The resource consumption limit (unspecified is unlimited)\n* `resource_domain.resources.#.resource_type` - (Required) The type of resource (for example storage, CPUs)\n"
                    },
                    "state": {
                        "type": "string"
                    },
                    "subnetReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectSubnetReferenceList:ProjectSubnetReferenceList"
                        },
                        "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - (Optional) The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - (Required) The UUID of a subnet\n* `subnet_reference_list.#.name` - (Optional/Computed) The name of a subnet.\n"
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProjectUserReferenceList:ProjectUserReferenceList"
                        },
                        "description": "List of users in the project.\n* `user_reference_list.#.kind` - (Optional) The kind name. Default value is `user`\n* `user_reference_list.#.uuid` - (Required) The UUID of a user\n* `user_reference_list.#.name` - (Optional/Computed) The name of a user.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/protectionRule:ProtectionRule": {
            "description": "Provides a Nutanix Protection Rule resource to Create a Protection Rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst protectionRuleTest = new nutanix.ProtectionRule(\"protection_rule_test\", {\n    availabilityZoneConnectivityLists: [{\n        snapshotScheduleLists: [{\n            localSnapshotRetentionPolicy: {\n                numSnapshots: 1,\n            },\n            recoveryPointObjectiveSecs: 3600,\n            snapshotType: \"CRASH_CONSISTENT\",\n        }],\n    }],\n    categoryFilter: {\n        params: [{\n            name: \"Environment\",\n            values: [\"Dev\"],\n        }],\n    },\n    description: \"test\",\n    orderedAvailabilityZoneLists: [{\n        availabilityZoneUrl: \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprotection_rule_test = nutanix.ProtectionRule(\"protectionRuleTest\",\n    availability_zone_connectivity_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListArgs(\n        snapshot_schedule_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs(\n            local_snapshot_retention_policy=nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs(\n                num_snapshots=1,\n            ),\n            recovery_point_objective_secs=3600,\n            snapshot_type=\"CRASH_CONSISTENT\",\n        )],\n    )],\n    category_filter=nutanix.ProtectionRuleCategoryFilterArgs(\n        params=[nutanix.ProtectionRuleCategoryFilterParamArgs(\n            name=\"Environment\",\n            values=[\"Dev\"],\n        )],\n    ),\n    description=\"test\",\n    ordered_availability_zone_lists=[nutanix.ProtectionRuleOrderedAvailabilityZoneListArgs(\n        availability_zone_url=\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var protectionRuleTest = new Nutanix.ProtectionRule(\"protectionRuleTest\", new Nutanix.ProtectionRuleArgs\n        {\n            AvailabilityZoneConnectivityLists = \n            {\n                new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs\n                {\n                    SnapshotScheduleLists = \n                    {\n                        new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs\n                        {\n                            LocalSnapshotRetentionPolicy = new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs\n                            {\n                                NumSnapshots = 1,\n                            },\n                            RecoveryPointObjectiveSecs = 3600,\n                            SnapshotType = \"CRASH_CONSISTENT\",\n                        },\n                    },\n                },\n            },\n            CategoryFilter = new Nutanix.Inputs.ProtectionRuleCategoryFilterArgs\n            {\n                Params = \n                {\n                    new Nutanix.Inputs.ProtectionRuleCategoryFilterParamArgs\n                    {\n                        Name = \"Environment\",\n                        Values = \n                        {\n                            \"Dev\",\n                        },\n                    },\n                },\n            },\n            Description = \"test\",\n            OrderedAvailabilityZoneLists = \n            {\n                new Nutanix.Inputs.ProtectionRuleOrderedAvailabilityZoneListArgs\n                {\n                    AvailabilityZoneUrl = \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewProtectionRule(ctx, \"protectionRuleTest\", \u0026nutanix.ProtectionRuleArgs{\n\t\t\tAvailabilityZoneConnectivityLists: ProtectionRuleAvailabilityZoneConnectivityListArray{\n\t\t\t\t\u0026ProtectionRuleAvailabilityZoneConnectivityListArgs{\n\t\t\t\t\tSnapshotScheduleLists: ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArray{\n\t\t\t\t\t\t\u0026ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs{\n\t\t\t\t\t\t\tLocalSnapshotRetentionPolicy: \u0026ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs{\n\t\t\t\t\t\t\t\tNumSnapshots: pulumi.Int(1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRecoveryPointObjectiveSecs: pulumi.Int(3600),\n\t\t\t\t\t\t\tSnapshotType:               pulumi.String(\"CRASH_CONSISTENT\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCategoryFilter: \u0026ProtectionRuleCategoryFilterArgs{\n\t\t\t\tParams: ProtectionRuleCategoryFilterParamArray{\n\t\t\t\t\t\u0026ProtectionRuleCategoryFilterParamArgs{\n\t\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tOrderedAvailabilityZoneLists: ProtectionRuleOrderedAvailabilityZoneListArray{\n\t\t\t\t\u0026ProtectionRuleOrderedAvailabilityZoneListArgs{\n\t\t\t\t\tAvailabilityZoneUrl: pulumi.String(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var protectionRuleTest = new ProtectionRule(\"protectionRuleTest\", ProtectionRuleArgs.builder()        \n            .availabilityZoneConnectivityLists(ProtectionRuleAvailabilityZoneConnectivityListArgs.builder()\n                .snapshotScheduleLists(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs.builder()\n                    .localSnapshotRetentionPolicy(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs.builder()\n                        .numSnapshots(1)\n                        .build())\n                    .recoveryPointObjectiveSecs(3600)\n                    .snapshotType(\"CRASH_CONSISTENT\")\n                    .build())\n                .build())\n            .categoryFilter(ProtectionRuleCategoryFilterArgs.builder()\n                .params(ProtectionRuleCategoryFilterParamArgs.builder()\n                    .name(\"Environment\")\n                    .values(\"Dev\")\n                    .build())\n                .build())\n            .description(\"test\")\n            .orderedAvailabilityZoneLists(ProtectionRuleOrderedAvailabilityZoneListArgs.builder()\n                .availabilityZoneUrl(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  protectionRuleTest:\n    type: nutanix:ProtectionRule\n    properties:\n      availabilityZoneConnectivityLists:\n        - snapshotScheduleLists:\n            - localSnapshotRetentionPolicy:\n                numSnapshots: 1\n              recoveryPointObjectiveSecs: 3600\n              snapshotType: CRASH_CONSISTENT\n      categoryFilter:\n        params:\n          - name: Environment\n            values:\n              - Dev\n      description: test\n      orderedAvailabilityZoneLists:\n        - availabilityZoneUrl: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "availabilityZoneConnectivityLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList"
                    },
                    "description": "This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.\n* `availability_zone_connectivity_list.destination_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.source_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list` - (Optional/Computed) Snapshot schedules for the pair of the availability zones.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) \"A recovery point objective (RPO) is the maximum acceptable amount of data loss.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory"
                    }
                },
                "categoryFilter": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter",
                    "description": "* `category_filter.0.type` - (Optional/Computed) The type of the filter being used.\n* `category_filter.0.kind_list` - (Optional/Computed) List of kinds associated with this filter.\n* `category_filter.0.params` - (Optional/Computed) A list of category key and list of values.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for protection rule.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "orderedAvailabilityZoneLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList"
                    },
                    "description": "A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.\n* `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.\n* `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference"
                },
                "startTime": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "availabilityZoneConnectivityLists",
                "categories",
                "categoryFilter",
                "description",
                "metadata",
                "name",
                "orderedAvailabilityZoneLists",
                "ownerReference",
                "projectReference",
                "startTime",
                "state"
            ],
            "inputProperties": {
                "availabilityZoneConnectivityLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList"
                    },
                    "description": "This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.\n* `availability_zone_connectivity_list.destination_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.source_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list` - (Optional/Computed) Snapshot schedules for the pair of the availability zones.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) \"A recovery point objective (RPO) is the maximum acceptable amount of data loss.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory"
                    }
                },
                "categoryFilter": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter",
                    "description": "* `category_filter.0.type` - (Optional/Computed) The type of the filter being used.\n* `category_filter.0.kind_list` - (Optional/Computed) List of kinds associated with this filter.\n* `category_filter.0.params` - (Optional/Computed) A list of category key and list of values.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for protection rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the protection rule.\n"
                },
                "orderedAvailabilityZoneLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList"
                    },
                    "description": "A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.\n* `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.\n* `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference"
                },
                "startTime": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "availabilityZoneConnectivityLists",
                "orderedAvailabilityZoneLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProtectionRule resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "availabilityZoneConnectivityLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProtectionRuleAvailabilityZoneConnectivityList:ProtectionRuleAvailabilityZoneConnectivityList"
                        },
                        "description": "This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.\n* `availability_zone_connectivity_list.destination_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.source_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list` - (Optional/Computed) Snapshot schedules for the pair of the availability zones.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) \"A recovery point objective (RPO) is the maximum acceptable amount of data loss.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProtectionRuleCategory:ProtectionRuleCategory"
                        }
                    },
                    "categoryFilter": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleCategoryFilter:ProtectionRuleCategoryFilter",
                        "description": "* `category_filter.0.type` - (Optional/Computed) The type of the filter being used.\n* `category_filter.0.kind_list` - (Optional/Computed) List of kinds associated with this filter.\n* `category_filter.0.params` - (Optional/Computed) A list of category key and list of values.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for protection rule.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the protection rule.\n"
                    },
                    "orderedAvailabilityZoneLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ProtectionRuleOrderedAvailabilityZoneList:ProtectionRuleOrderedAvailabilityZoneList"
                        },
                        "description": "A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.\n* `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.\n* `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.\n"
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleOwnerReference:ProtectionRuleOwnerReference"
                    },
                    "projectReference": {
                        "$ref": "#/types/nutanix:index/ProtectionRuleProjectReference:ProtectionRuleProjectReference"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/recoveryPlan:RecoveryPlan": {
            "description": "Provides a Nutanix Recovery Plan resource to Create a Recovery Plan.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst recoveryPlanTest = new nutanix.RecoveryPlan(\"recovery_plan_test\", {\n    description: \"%s\",\n    parameters: {},\n    stageLists: [{\n        delayTimeSecs: 0,\n        stageUuid: \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n        stageWork: {\n            recoverEntities: {\n                entityInfoLists: [{\n                    categories: [{\n                        name: \"Environment\",\n                        value: \"Dev\",\n                    }],\n                }],\n            },\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nrecovery_plan_test = nutanix.RecoveryPlan(\"recoveryPlanTest\",\n    description=\"%s\",\n    parameters=nutanix.RecoveryPlanParametersArgs(),\n    stage_lists=[nutanix.RecoveryPlanStageListArgs(\n        delay_time_secs=0,\n        stage_uuid=\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n        stage_work=nutanix.RecoveryPlanStageListStageWorkArgs(\n            recover_entities=nutanix.RecoveryPlanStageListStageWorkRecoverEntitiesArgs(\n                entity_info_list=[{\n                    \"categories\": [{\n                        \"name\": \"Environment\",\n                        \"value\": \"Dev\",\n                    }],\n                }],\n            ),\n        ),\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var recoveryPlanTest = new Nutanix.RecoveryPlan(\"recoveryPlanTest\", new Nutanix.RecoveryPlanArgs\n        {\n            Description = \"%s\",\n            Parameters = ,\n            StageLists = \n            {\n                new Nutanix.Inputs.RecoveryPlanStageListArgs\n                {\n                    DelayTimeSecs = 0,\n                    StageUuid = \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n                    StageWork = new Nutanix.Inputs.RecoveryPlanStageListStageWorkArgs\n                    {\n                        RecoverEntities = new Nutanix.Inputs.RecoveryPlanStageListStageWorkRecoverEntitiesArgs\n                        {\n                            EntityInfoList = \n                            {\n                                \n                                {\n                                    { \"categories\", \n                                    {\n                                        \n                                        {\n                                            { \"name\", \"Environment\" },\n                                            { \"value\", \"Dev\" },\n                                        },\n                                    } },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewRecoveryPlan(ctx, \"recoveryPlanTest\", \u0026nutanix.RecoveryPlanArgs{\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"%v%v\", \"%\", \"s\")),\n\t\t\tParameters:  nil,\n\t\t\tStageLists: RecoveryPlanStageListArray{\n\t\t\t\t\u0026RecoveryPlanStageListArgs{\n\t\t\t\t\tDelayTimeSecs: pulumi.Int(0),\n\t\t\t\t\tStageUuid:     pulumi.String(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\"),\n\t\t\t\t\tStageWork: \u0026RecoveryPlanStageListStageWorkArgs{\n\t\t\t\t\t\tRecoverEntities: \u0026RecoveryPlanStageListStageWorkRecoverEntitiesArgs{\n\t\t\t\t\t\t\tEntityInfoList: []map[string]interface{}{\n\t\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"categories\": []map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"name\":  \"Environment\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Dev\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var recoveryPlanTest = new RecoveryPlan(\"recoveryPlanTest\", RecoveryPlanArgs.builder()        \n            .description(\"%s\")\n            .parameters()\n            .stageLists(RecoveryPlanStageListArgs.builder()\n                .delayTimeSecs(0)\n                .stageUuid(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .stageWork(RecoveryPlanStageListStageWorkArgs.builder()\n                    .recoverEntities(RecoveryPlanStageListStageWorkRecoverEntitiesArgs.builder()\n                        .entityInfoList(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  recoveryPlanTest:\n    type: nutanix:RecoveryPlan\n    properties:\n      description: '%s'\n      parameters: {}\n      stageLists:\n        - delayTimeSecs: 0\n          stageUuid: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n          stageWork:\n            recoverEntities:\n              entityInfoList:\n                - categories:\n                    - name: Environment\n                      value: Dev\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description for Recovery Plan.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference"
                },
                "parameters": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters",
                    "description": "Parameters for the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list` - (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n* `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.\n* `parameters.0.network_mapping_list` - (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.\n"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference"
                },
                "stageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList"
                    },
                    "description": "Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.\n* `stage_list.stage_uuid` - (Optional/Computed) UUID of stage.\n* `stage_list.delay_time_secs` - (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.\n* `stage_list.stage_work` - (Required) A stage specifies the work to be performed when the Recovery Plan is executed.\n* `stage_list.stage_work.0.recover_entities` - (Optional/Computed) Information about entities to be recovered.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list` - (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.\n"
                },
                "state": {
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "parameters",
                "projectReference",
                "stageLists",
                "state"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description for Recovery Plan.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Recovery Plan.\n"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference"
                },
                "parameters": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters",
                    "description": "Parameters for the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list` - (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n* `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.\n* `parameters.0.network_mapping_list` - (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.\n"
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference"
                },
                "stageLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList"
                    },
                    "description": "Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.\n* `stage_list.stage_uuid` - (Optional/Computed) UUID of stage.\n* `stage_list.delay_time_secs` - (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.\n* `stage_list.stage_work` - (Required) A stage specifies the work to be performed when the Recovery Plan is executed.\n* `stage_list.stage_work.0.recover_entities` - (Optional/Computed) Information about entities to be recovered.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list` - (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.\n"
                }
            },
            "requiredInputs": [
                "parameters",
                "stageLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RecoveryPlan resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RecoveryPlanCategory:RecoveryPlanCategory"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for Recovery Plan.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the Recovery Plan.\n"
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanOwnerReference:RecoveryPlanOwnerReference"
                    },
                    "parameters": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanParameters:RecoveryPlanParameters",
                        "description": "Parameters for the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list` - (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n* `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.\n* `parameters.0.network_mapping_list` - (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.\n"
                    },
                    "projectReference": {
                        "$ref": "#/types/nutanix:index/RecoveryPlanProjectReference:RecoveryPlanProjectReference"
                    },
                    "stageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RecoveryPlanStageList:RecoveryPlanStageList"
                        },
                        "description": "Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.\n* `stage_list.stage_uuid` - (Optional/Computed) UUID of stage.\n* `stage_list.delay_time_secs` - (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.\n* `stage_list.stage_work` - (Required) A stage specifies the work to be performed when the Recovery Plan is executed.\n* `stage_list.stage_work.0.recover_entities` - (Optional/Computed) Information about entities to be recovered.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list` - (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.\n"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/role:Role": {
            "description": "Provides a resource to create a role based on the input parameters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = new nutanix.Role(\"test\", {\n    description: \"DESCRIPTION\",\n    permissionReferenceLists: [\n        {\n            kind: \"permission\",\n            uuid: \"ID OF PERMISSION\",\n        },\n        {\n            kind: \"permission\",\n            uuid: \"ID OF PERMISSION\",\n        },\n        {\n            kind: \"permission\",\n            uuid: \"ID OF PERMISSION\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.Role(\"test\",\n    description=\"DESCRIPTION\",\n    permission_reference_lists=[\n        nutanix.RolePermissionReferenceListArgs(\n            kind=\"permission\",\n            uuid=\"ID OF PERMISSION\",\n        ),\n        nutanix.RolePermissionReferenceListArgs(\n            kind=\"permission\",\n            uuid=\"ID OF PERMISSION\",\n        ),\n        nutanix.RolePermissionReferenceListArgs(\n            kind=\"permission\",\n            uuid=\"ID OF PERMISSION\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Nutanix.Role(\"test\", new Nutanix.RoleArgs\n        {\n            Description = \"DESCRIPTION\",\n            PermissionReferenceLists = \n            {\n                new Nutanix.Inputs.RolePermissionReferenceListArgs\n                {\n                    Kind = \"permission\",\n                    Uuid = \"ID OF PERMISSION\",\n                },\n                new Nutanix.Inputs.RolePermissionReferenceListArgs\n                {\n                    Kind = \"permission\",\n                    Uuid = \"ID OF PERMISSION\",\n                },\n                new Nutanix.Inputs.RolePermissionReferenceListArgs\n                {\n                    Kind = \"permission\",\n                    Uuid = \"ID OF PERMISSION\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewRole(ctx, \"test\", \u0026nutanix.RoleArgs{\n\t\t\tDescription: pulumi.String(\"DESCRIPTION\"),\n\t\t\tPermissionReferenceLists: RolePermissionReferenceListArray{\n\t\t\t\t\u0026RolePermissionReferenceListArgs{\n\t\t\t\t\tKind: pulumi.String(\"permission\"),\n\t\t\t\t\tUuid: pulumi.String(\"ID OF PERMISSION\"),\n\t\t\t\t},\n\t\t\t\t\u0026RolePermissionReferenceListArgs{\n\t\t\t\t\tKind: pulumi.String(\"permission\"),\n\t\t\t\t\tUuid: pulumi.String(\"ID OF PERMISSION\"),\n\t\t\t\t},\n\t\t\t\t\u0026RolePermissionReferenceListArgs{\n\t\t\t\t\tKind: pulumi.String(\"permission\"),\n\t\t\t\t\tUuid: pulumi.String(\"ID OF PERMISSION\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Role(\"test\", RoleArgs.builder()        \n            .description(\"DESCRIPTION\")\n            .permissionReferenceLists(            \n                RolePermissionReferenceListArgs.builder()\n                    .kind(\"permission\")\n                    .uuid(\"ID OF PERMISSION\")\n                    .build(),\n                RolePermissionReferenceListArgs.builder()\n                    .kind(\"permission\")\n                    .uuid(\"ID OF PERMISSION\")\n                    .build(),\n                RolePermissionReferenceListArgs.builder()\n                    .kind(\"permission\")\n                    .uuid(\"ID OF PERMISSION\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nutanix:Role\n    properties:\n      description: DESCRIPTION\n      permissionReferenceLists:\n        - kind: permission\n          uuid: ID OF PERMISSION\n        - kind: permission\n          uuid: ID OF PERMISSION\n        - kind: permission\n          uuid: ID OF PERMISSION\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `state`: - The state of the role.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RoleCategory:RoleCategory"
                    }
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RoleOwnerReference:RoleOwnerReference"
                },
                "permissionReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList"
                    }
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RoleProjectReference:RoleProjectReference"
                },
                "state": {
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "categories",
                "description",
                "metadata",
                "name",
                "ownerReference",
                "permissionReferenceLists",
                "projectReference",
                "state"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RoleCategory:RoleCategory"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "$ref": "#/types/nutanix:index/RoleOwnerReference:RoleOwnerReference"
                },
                "permissionReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList"
                    }
                },
                "projectReference": {
                    "$ref": "#/types/nutanix:index/RoleProjectReference:RoleProjectReference"
                }
            },
            "requiredInputs": [
                "permissionReferenceLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the role.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RoleCategory:RoleCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "$ref": "#/types/nutanix:index/RoleOwnerReference:RoleOwnerReference"
                    },
                    "permissionReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/RolePermissionReferenceList:RolePermissionReferenceList"
                        }
                    },
                    "projectReference": {
                        "$ref": "#/types/nutanix:index/RoleProjectReference:RoleProjectReference"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/serviceGroup:ServiceGroup": {
            "description": "Provides a resource to create a service group based on the input parameters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = new nutanix.ServiceGroup(\"test\", {\n    description: \"this is service group\",\n    serviceLists: [{\n        protocol: \"TCP\",\n        tcpPortRangeLists: [\n            {\n                endPort: 22,\n                startPort: 22,\n            },\n            {\n                endPort: 2222,\n                startPort: 2222,\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.ServiceGroup(\"test\",\n    description=\"this is service group\",\n    service_lists=[nutanix.ServiceGroupServiceListArgs(\n        protocol=\"TCP\",\n        tcp_port_range_lists=[\n            nutanix.ServiceGroupServiceListTcpPortRangeListArgs(\n                end_port=22,\n                start_port=22,\n            ),\n            nutanix.ServiceGroupServiceListTcpPortRangeListArgs(\n                end_port=2222,\n                start_port=2222,\n            ),\n        ],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Nutanix.ServiceGroup(\"test\", new Nutanix.ServiceGroupArgs\n        {\n            Description = \"this is service group\",\n            ServiceLists = \n            {\n                new Nutanix.Inputs.ServiceGroupServiceListArgs\n                {\n                    Protocol = \"TCP\",\n                    TcpPortRangeLists = \n                    {\n                        new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs\n                        {\n                            EndPort = 22,\n                            StartPort = 22,\n                        },\n                        new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs\n                        {\n                            EndPort = 2222,\n                            StartPort = 2222,\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewServiceGroup(ctx, \"test\", \u0026nutanix.ServiceGroupArgs{\n\t\t\tDescription: pulumi.String(\"this is service group\"),\n\t\t\tServiceLists: ServiceGroupServiceListArray{\n\t\t\t\t\u0026ServiceGroupServiceListArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tTcpPortRangeLists: ServiceGroupServiceListTcpPortRangeListArray{\n\t\t\t\t\t\t\u0026ServiceGroupServiceListTcpPortRangeListArgs{\n\t\t\t\t\t\t\tEndPort:   pulumi.Int(22),\n\t\t\t\t\t\t\tStartPort: pulumi.Int(22),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026ServiceGroupServiceListTcpPortRangeListArgs{\n\t\t\t\t\t\t\tEndPort:   pulumi.Int(2222),\n\t\t\t\t\t\t\tStartPort: pulumi.Int(2222),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ServiceGroup(\"test\", ServiceGroupArgs.builder()        \n            .description(\"this is service group\")\n            .serviceLists(ServiceGroupServiceListArgs.builder()\n                .protocol(\"TCP\")\n                .tcpPortRangeLists(                \n                    ServiceGroupServiceListTcpPortRangeListArgs.builder()\n                        .endPort(22)\n                        .startPort(22)\n                        .build(),\n                    ServiceGroupServiceListTcpPortRangeListArgs.builder()\n                        .endPort(2222)\n                        .startPort(2222)\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nutanix:ServiceGroup\n    properties:\n      description: this is service group\n      serviceLists:\n        - protocol: TCP\n          tcpPortRangeLists:\n            - endPort: 22\n              startPort: 22\n            - endPort: 2222\n              startPort: 2222\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList"
                    }
                },
                "systemDefined": {
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "serviceLists",
                "systemDefined"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList"
                    }
                }
            },
            "requiredInputs": [
                "serviceLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "serviceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/ServiceGroupServiceList:ServiceGroupServiceList"
                        }
                    },
                    "systemDefined": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/staticRoutes:StaticRoutes": {
            "description": "Provides Nutanix resource to create Floating IPs. \n\n## create one static route for vpc uuid with external subnet\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst scn = new nutanix.StaticRoutes(\"scn\", {\n    staticRoutesLists: [{\n        destination: \"10.x.x.x/x\",\n        externalSubnetReferenceUuid: \"{{ext_subnet_uuid}}\",\n    }],\n    vpcUuid: \"{{vpc_uuid}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nscn = nutanix.StaticRoutes(\"scn\",\n    static_routes_lists=[nutanix.StaticRoutesStaticRoutesListArgs(\n        destination=\"10.x.x.x/x\",\n        external_subnet_reference_uuid=\"{{ext_subnet_uuid}}\",\n    )],\n    vpc_uuid=\"{{vpc_uuid}}\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var scn = new Nutanix.StaticRoutes(\"scn\", new Nutanix.StaticRoutesArgs\n        {\n            StaticRoutesLists = \n            {\n                new Nutanix.Inputs.StaticRoutesStaticRoutesListArgs\n                {\n                    Destination = \"10.x.x.x/x\",\n                    ExternalSubnetReferenceUuid = \"{{ext_subnet_uuid}}\",\n                },\n            },\n            VpcUuid = \"{{vpc_uuid}}\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewStaticRoutes(ctx, \"scn\", \u0026nutanix.StaticRoutesArgs{\n\t\t\tStaticRoutesLists: StaticRoutesStaticRoutesListArray{\n\t\t\t\t\u0026StaticRoutesStaticRoutesListArgs{\n\t\t\t\t\tDestination:                 pulumi.String(\"10.x.x.x/x\"),\n\t\t\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_subnet_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVpcUuid: pulumi.String(\"{{vpc_uuid}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var scn = new StaticRoutes(\"scn\", StaticRoutesArgs.builder()        \n            .staticRoutesLists(StaticRoutesStaticRoutesListArgs.builder()\n                .destination(\"10.x.x.x/x\")\n                .externalSubnetReferenceUuid(\"{{ext_subnet_uuid}}\")\n                .build())\n            .vpcUuid(\"{{vpc_uuid}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  scn:\n    type: nutanix:StaticRoutes\n    properties:\n      staticRoutesLists:\n        - destination: 10.x.x.x/x\n          externalSubnetReferenceUuid: '{{ext_subnet_uuid}}'\n      vpcUuid: '{{vpc_uuid}}'\n```\n\n\n## create one static route with default route for vpc name with external subnet\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst scn = new nutanix.StaticRoutes(\"scn\", {\n    defaultRouteNexthops: [{\n        externalSubnetReferenceUuid: \"{{ext_subnet_uuid}}\",\n    }],\n    staticRoutesLists: [{\n        destination: \"10.x.x.x/x\",\n        externalSubnetReferenceUuid: \"{{ext_subnet_uuid}}\",\n    }],\n    vpcName: \"{{vpc_name}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nscn = nutanix.StaticRoutes(\"scn\",\n    default_route_nexthops=[nutanix.StaticRoutesDefaultRouteNexthopArgs(\n        external_subnet_reference_uuid=\"{{ext_subnet_uuid}}\",\n    )],\n    static_routes_lists=[nutanix.StaticRoutesStaticRoutesListArgs(\n        destination=\"10.x.x.x/x\",\n        external_subnet_reference_uuid=\"{{ext_subnet_uuid}}\",\n    )],\n    vpc_name=\"{{vpc_name}}\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var scn = new Nutanix.StaticRoutes(\"scn\", new Nutanix.StaticRoutesArgs\n        {\n            DefaultRouteNexthops = \n            {\n                new Nutanix.Inputs.StaticRoutesDefaultRouteNexthopArgs\n                {\n                    ExternalSubnetReferenceUuid = \"{{ext_subnet_uuid}}\",\n                },\n            },\n            StaticRoutesLists = \n            {\n                new Nutanix.Inputs.StaticRoutesStaticRoutesListArgs\n                {\n                    Destination = \"10.x.x.x/x\",\n                    ExternalSubnetReferenceUuid = \"{{ext_subnet_uuid}}\",\n                },\n            },\n            VpcName = \"{{vpc_name}}\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewStaticRoutes(ctx, \"scn\", \u0026nutanix.StaticRoutesArgs{\n\t\t\tDefaultRouteNexthops: StaticRoutesDefaultRouteNexthopArray{\n\t\t\t\t\u0026StaticRoutesDefaultRouteNexthopArgs{\n\t\t\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_subnet_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStaticRoutesLists: StaticRoutesStaticRoutesListArray{\n\t\t\t\t\u0026StaticRoutesStaticRoutesListArgs{\n\t\t\t\t\tDestination:                 pulumi.String(\"10.x.x.x/x\"),\n\t\t\t\t\tExternalSubnetReferenceUuid: pulumi.String(\"{{ext_subnet_uuid}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVpcName: pulumi.String(\"{{vpc_name}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var scn = new StaticRoutes(\"scn\", StaticRoutesArgs.builder()        \n            .defaultRouteNexthops(StaticRoutesDefaultRouteNexthopArgs.builder()\n                .externalSubnetReferenceUuid(\"{{ext_subnet_uuid}}\")\n                .build())\n            .staticRoutesLists(StaticRoutesStaticRoutesListArgs.builder()\n                .destination(\"10.x.x.x/x\")\n                .externalSubnetReferenceUuid(\"{{ext_subnet_uuid}}\")\n                .build())\n            .vpcName(\"{{vpc_name}}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  scn:\n    type: nutanix:StaticRoutes\n    properties:\n      defaultRouteNexthops:\n        - externalSubnetReferenceUuid: '{{ext_subnet_uuid}}'\n      staticRoutesLists:\n        - destination: 10.x.x.x/x\n          externalSubnetReferenceUuid: '{{ext_subnet_uuid}}'\n      vpcName: '{{vpc_name}}'\n```\n\n#### Note: destination with 0.0.0.0/0 will be default route.\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "defaultRouteNexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop"
                    },
                    "description": "Default Route\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The vpc_route_table kind metadata.\n"
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList"
                    },
                    "description": "Static Routes.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "vpc Name. Should not be used with vpc_uuid.\n"
                },
                "vpcUuid": {
                    "type": "string",
                    "description": "Reference to a VPC UUID. Should not be used with vpc_name.\n"
                }
            },
            "required": [
                "apiVersion",
                "metadata",
                "vpcUuid"
            ],
            "inputProperties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "defaultRouteNexthops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop"
                    },
                    "description": "Default Route\n"
                },
                "staticRoutesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList"
                    },
                    "description": "Static Routes.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "vpc Name. Should not be used with vpc_uuid.\n"
                },
                "vpcUuid": {
                    "type": "string",
                    "description": "Reference to a VPC UUID. Should not be used with vpc_name.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StaticRoutes resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "defaultRouteNexthops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/StaticRoutesDefaultRouteNexthop:StaticRoutesDefaultRouteNexthop"
                        },
                        "description": "Default Route\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The vpc_route_table kind metadata.\n"
                    },
                    "staticRoutesLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/StaticRoutesStaticRoutesList:StaticRoutesStaticRoutesList"
                        },
                        "description": "Static Routes.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "vpc Name. Should not be used with vpc_uuid.\n"
                    },
                    "vpcUuid": {
                        "type": "string",
                        "description": "Reference to a VPC UUID. Should not be used with vpc_name.\n"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/subnet:Subnet": {
            "description": "Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getClusters({\n    metadata: {\n        length: 2,\n    },\n});\nexport const cluster = clusters.then(clusters =\u003e clusters.entities?[0]?.metadata?.uuid);\nconst next_iac_managed = new nutanix.Subnet(\"next-iac-managed\", {\n    clusterUuid: clusters.then(clusters =\u003e clusters.entities?[0]?.metadata?.uuid),\n    vlanId: 101,\n    subnetType: \"VLAN\",\n    prefixLength: 20,\n    defaultGatewayIp: \"10.5.80.1\",\n    subnetIp: \"10.5.80.0\",\n    dhcpDomainNameServerLists: [\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcpDomainSearchLists: [\n        \"nutanix.com\",\n        \"eng.nutanix.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_clusters()\npulumi.export(\"cluster\", clusters.entities[0].metadata[\"uuid\"])\nnext_iac_managed = nutanix.Subnet(\"next-iac-managed\",\n    cluster_uuid=clusters.entities[0].metadata[\"uuid\"],\n    vlan_id=101,\n    subnet_type=\"VLAN\",\n    prefix_length=20,\n    default_gateway_ip=\"10.5.80.1\",\n    subnet_ip=\"10.5.80.0\",\n    dhcp_domain_name_server_lists=[\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcp_domain_search_lists=[\n        \"nutanix.com\",\n        \"eng.nutanix.com\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clusters = Output.Create(Nutanix.GetClusters.InvokeAsync(\n        {\n            { \"metadata\", \n            {\n                { \"length\", 2 },\n            } },\n        }));\n        this.Cluster = clusters.Apply(clusters =\u003e clusters.Entities?[0]?.Metadata?.Uuid);\n        var next_iac_managed = new Nutanix.Subnet(\"next-iac-managed\", new Nutanix.SubnetArgs\n        {\n            ClusterUuid = clusters.Apply(clusters =\u003e clusters.Entities?[0]?.Metadata?.Uuid),\n            VlanId = 101,\n            SubnetType = \"VLAN\",\n            PrefixLength = 20,\n            DefaultGatewayIp = \"10.5.80.1\",\n            SubnetIp = \"10.5.80.0\",\n            DhcpDomainNameServerLists = \n            {\n                \"8.8.8.8\",\n                \"4.2.2.2\",\n            },\n            DhcpDomainSearchLists = \n            {\n                \"nutanix.com\",\n                \"eng.nutanix.com\",\n            },\n        });\n    }\n\n    [Output(\"cluster\")]\n    public Output\u003cstring\u003e Cluster { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclusters, err := nutanix.GetClusters(ctx, map[string]interface{}{\n\t\t\t\"metadata\": map[string]interface{}{\n\t\t\t\t\"length\": 2,\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"cluster\", clusters.Entities[0].Metadata.Uuid)\n\t\t_, err = nutanix.NewSubnet(ctx, \"next-iac-managed\", \u0026nutanix.SubnetArgs{\n\t\t\tClusterUuid:      pulumi.String(clusters.Entities[0].Metadata.Uuid),\n\t\t\tVlanId:           pulumi.Int(101),\n\t\t\tSubnetType:       pulumi.String(\"VLAN\"),\n\t\t\tPrefixLength:     pulumi.Int(20),\n\t\t\tDefaultGatewayIp: pulumi.String(\"10.5.80.1\"),\n\t\t\tSubnetIp:         pulumi.String(\"10.5.80.0\"),\n\t\t\tDhcpDomainNameServerLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"4.2.2.2\"),\n\t\t\t},\n\t\t\tDhcpDomainSearchLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"nutanix.com\"),\n\t\t\t\tpulumi.String(\"eng.nutanix.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = Output.of(NutanixFunctions.getClusters(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n\n        ctx.export(\"cluster\", clusters.apply(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()));\n        var next_iac_managed = new Subnet(\"next-iac-managed\", SubnetArgs.builder()        \n            .clusterUuid(clusters.apply(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()))\n            .vlanId(101)\n            .subnetType(\"VLAN\")\n            .prefixLength(20)\n            .defaultGatewayIp(\"10.5.80.1\")\n            .subnetIp(\"10.5.80.0\")\n            .dhcpDomainNameServerLists(            \n                \"8.8.8.8\",\n                \"4.2.2.2\")\n            .dhcpDomainSearchLists(            \n                \"nutanix.com\",\n                \"eng.nutanix.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  next-iac-managed:\n    type: nutanix:Subnet\n    properties:\n      clusterUuid: ${clusters.entities[0].metadata.uuid}\n      vlanId: 101\n      subnetType: VLAN\n      prefixLength: 20\n      defaultGatewayIp: 10.5.80.1\n      subnetIp: 10.5.80.0\n      dhcpDomainNameServerLists:\n        - 8.8.8.8\n        - 4.2.2.2\n      dhcpDomainSearchLists:\n        - nutanix.com\n        - eng.nutanix.com\nvariables:\n  clusters:\n    Fn::Invoke:\n      Function: nutanix:getClusters\n      Arguments:\n        metadata:\n          length: 2\noutputs:\n  cluster: ${clusters.entities[0].metadata.uuid}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/SubnetCategory:SubnetCategory"
                    }
                },
                "clusterName": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "defaultGatewayIp": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dhcpDomainNameServerLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dhcpDomainSearchLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dhcpOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dhcpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dhcpServerAddressPort": {
                    "type": "integer"
                },
                "enableNat": {
                    "type": "boolean"
                },
                "ipConfigPoolListRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isExternal": {
                    "type": "boolean"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "prefixLength": {
                    "type": "integer"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string"
                },
                "subnetIp": {
                    "type": "string"
                },
                "subnetType": {
                    "type": "string"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vpcReferenceUuid": {
                    "type": "string"
                },
                "vswitchName": {
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "availabilityZoneReference",
                "categories",
                "clusterName",
                "defaultGatewayIp",
                "description",
                "dhcpDomainNameServerLists",
                "dhcpDomainSearchLists",
                "dhcpOptions",
                "dhcpServerAddress",
                "dhcpServerAddressPort",
                "enableNat",
                "ipConfigPoolListRanges",
                "isExternal",
                "metadata",
                "name",
                "networkFunctionChainReference",
                "ownerReference",
                "prefixLength",
                "projectReference",
                "state",
                "subnetIp",
                "subnetType",
                "vlanId",
                "vpcReferenceUuid",
                "vswitchName"
            ],
            "inputProperties": {
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/SubnetCategory:SubnetCategory"
                    }
                },
                "clusterUuid": {
                    "type": "string"
                },
                "defaultGatewayIp": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dhcpDomainNameServerLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dhcpDomainSearchLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dhcpOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dhcpServerAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "dhcpServerAddressPort": {
                    "type": "integer"
                },
                "enableNat": {
                    "type": "boolean"
                },
                "ipConfigPoolListRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isExternal": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string"
                },
                "networkFunctionChainReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "prefixLength": {
                    "type": "integer"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "subnetIp": {
                    "type": "string"
                },
                "subnetType": {
                    "type": "string"
                },
                "vlanId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "vpcReferenceUuid": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "vswitchName": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "subnetType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/SubnetCategory:SubnetCategory"
                        }
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "defaultGatewayIp": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dhcpDomainNameServerLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dhcpDomainSearchLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dhcpOptions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dhcpServerAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dhcpServerAddressPort": {
                        "type": "integer"
                    },
                    "enableNat": {
                        "type": "boolean"
                    },
                    "ipConfigPoolListRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isExternal": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkFunctionChainReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "prefixLength": {
                        "type": "integer"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "subnetIp": {
                        "type": "string"
                    },
                    "subnetType": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vswitchName": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/user:User": {
            "description": "Provides a resource to create a user based on the input parameters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst user = new nutanix.User(\"user\", {\n    directoryServiceUser: {\n        directoryServiceReference: {\n            uuid: \"\u003cdirectory-service-uuid\u003e\",\n        },\n        userPrincipalName: \"test-user@ntnxlab.local\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nuser = nutanix.User(\"user\", directory_service_user=nutanix.UserDirectoryServiceUserArgs(\n    directory_service_reference=nutanix.UserDirectoryServiceUserDirectoryServiceReferenceArgs(\n        uuid=\"\u003cdirectory-service-uuid\u003e\",\n    ),\n    user_principal_name=\"test-user@ntnxlab.local\",\n))\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Nutanix.User(\"user\", new Nutanix.UserArgs\n        {\n            DirectoryServiceUser = new Nutanix.Inputs.UserDirectoryServiceUserArgs\n            {\n                DirectoryServiceReference = new Nutanix.Inputs.UserDirectoryServiceUserDirectoryServiceReferenceArgs\n                {\n                    Uuid = \"\u003cdirectory-service-uuid\u003e\",\n                },\n                UserPrincipalName = \"test-user@ntnxlab.local\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewUser(ctx, \"user\", \u0026nutanix.UserArgs{\n\t\t\tDirectoryServiceUser: \u0026UserDirectoryServiceUserArgs{\n\t\t\t\tDirectoryServiceReference: \u0026UserDirectoryServiceUserDirectoryServiceReferenceArgs{\n\t\t\t\t\tUuid: pulumi.String(\"\u003cdirectory-service-uuid\u003e\"),\n\t\t\t\t},\n\t\t\t\tUserPrincipalName: pulumi.String(\"test-user@ntnxlab.local\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .directoryServiceUser(UserDirectoryServiceUserArgs.builder()\n                .directoryServiceReference(UserDirectoryServiceUserDirectoryServiceReferenceArgs.builder()\n                    .uuid(\"\u003cdirectory-service-uuid\u003e\")\n                    .build())\n                .userPrincipalName(\"test-user@ntnxlab.local\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: nutanix:User\n    properties:\n      directoryServiceUser:\n        directoryServiceReference:\n          uuid: \u003cdirectory-service-uuid\u003e\n        userPrincipalName: test-user@ntnxlab.local\n```\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst user = new nutanix.User(\"user\", {\n    identityProviderUser: {\n        identityProviderReference: {\n            uuid: \"\u003cidentity-provider-uuid\u003e\",\n        },\n        username: \"username\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nuser = nutanix.User(\"user\", identity_provider_user=nutanix.UserIdentityProviderUserArgs(\n    identity_provider_reference=nutanix.UserIdentityProviderUserIdentityProviderReferenceArgs(\n        uuid=\"\u003cidentity-provider-uuid\u003e\",\n    ),\n    username=\"username\",\n))\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Nutanix.User(\"user\", new Nutanix.UserArgs\n        {\n            IdentityProviderUser = new Nutanix.Inputs.UserIdentityProviderUserArgs\n            {\n                IdentityProviderReference = new Nutanix.Inputs.UserIdentityProviderUserIdentityProviderReferenceArgs\n                {\n                    Uuid = \"\u003cidentity-provider-uuid\u003e\",\n                },\n                Username = \"username\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewUser(ctx, \"user\", \u0026nutanix.UserArgs{\n\t\t\tIdentityProviderUser: \u0026UserIdentityProviderUserArgs{\n\t\t\t\tIdentityProviderReference: \u0026UserIdentityProviderUserIdentityProviderReferenceArgs{\n\t\t\t\t\tUuid: pulumi.String(\"\u003cidentity-provider-uuid\u003e\"),\n\t\t\t\t},\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .identityProviderUser(UserIdentityProviderUserArgs.builder()\n                .identityProviderReference(UserIdentityProviderUserIdentityProviderReferenceArgs.builder()\n                    .uuid(\"\u003cidentity-provider-uuid\u003e\")\n                    .build())\n                .username(\"username\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: nutanix:User\n    properties:\n      identityProviderUser:\n        identityProviderReference:\n          uuid: \u003cidentity-provider-uuid\u003e\n        username: username\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessControlPolicyReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserAccessControlPolicyReferenceList:UserAccessControlPolicyReferenceList"
                    }
                },
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `state`: - The state of the entity.\n* `name`: - The name of the user.\n* `user_type`: - The name of the user.\n* `display_name`: - The display name of the user (common name) provided by the directory service.\n* `project_reference_list`: - A list of projects the user is part of. See #reference for more details.\n* `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserCategory:UserCategory"
                    }
                },
                "directoryServiceUser": {
                    "$ref": "#/types/nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser"
                },
                "displayName": {
                    "type": "string"
                },
                "identityProviderUser": {
                    "$ref": "#/types/nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReferenceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserProjectReferenceList:UserProjectReferenceList"
                    }
                },
                "state": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                }
            },
            "required": [
                "accessControlPolicyReferenceLists",
                "apiVersion",
                "categories",
                "directoryServiceUser",
                "displayName",
                "identityProviderUser",
                "metadata",
                "name",
                "ownerReference",
                "projectReferenceLists",
                "state",
                "userType"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/UserCategory:UserCategory"
                    }
                },
                "directoryServiceUser": {
                    "$ref": "#/types/nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser"
                },
                "identityProviderUser": {
                    "$ref": "#/types/nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser"
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accessControlPolicyReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserAccessControlPolicyReferenceList:UserAccessControlPolicyReferenceList"
                        }
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the entity.\n* `name`: - The name of the user.\n* `user_type`: - The name of the user.\n* `display_name`: - The display name of the user (common name) provided by the directory service.\n* `project_reference_list`: - A list of projects the user is part of. See #reference for more details.\n* `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserCategory:UserCategory"
                        }
                    },
                    "directoryServiceUser": {
                        "$ref": "#/types/nutanix:index/UserDirectoryServiceUser:UserDirectoryServiceUser"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "identityProviderUser": {
                        "$ref": "#/types/nutanix:index/UserIdentityProviderUser:UserIdentityProviderUser"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/UserProjectReferenceList:UserProjectReferenceList"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "userType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/virtualMachine:VirtualMachine": {
            "description": "Provides a Nutanix Virtual Machine resource to Create a virtual machine.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getClusters({});\nconst vm1 = new nutanix.VirtualMachine(\"vm1\", {\n    clusterUuid: clusters.then(clusters =\u003e clusters.entities?[0]?.metadata?.uuid),\n    categories: [{\n        name: \"Environment\",\n        value: \"Staging\",\n    }],\n    numVcpusPerSocket: 1,\n    numSockets: 1,\n    memorySizeMib: 2048,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_clusters()\nvm1 = nutanix.VirtualMachine(\"vm1\",\n    cluster_uuid=clusters.entities[0].metadata[\"uuid\"],\n    categories=[nutanix.VirtualMachineCategoryArgs(\n        name=\"Environment\",\n        value=\"Staging\",\n    )],\n    num_vcpus_per_socket=1,\n    num_sockets=1,\n    memory_size_mib=2048)\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clusters = Output.Create(Nutanix.GetClusters.InvokeAsync());\n        var vm1 = new Nutanix.VirtualMachine(\"vm1\", new Nutanix.VirtualMachineArgs\n        {\n            ClusterUuid = clusters.Apply(clusters =\u003e clusters.Entities?[0]?.Metadata?.Uuid),\n            Categories = \n            {\n                new Nutanix.Inputs.VirtualMachineCategoryArgs\n                {\n                    Name = \"Environment\",\n                    Value = \"Staging\",\n                },\n            },\n            NumVcpusPerSocket = 1,\n            NumSockets = 1,\n            MemorySizeMib = 2048,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclusters, err := nutanix.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewVirtualMachine(ctx, \"vm1\", \u0026nutanix.VirtualMachineArgs{\n\t\t\tClusterUuid: pulumi.String(clusters.Entities[0].Metadata.Uuid),\n\t\t\tCategories: VirtualMachineCategoryArray{\n\t\t\t\t\u0026VirtualMachineCategoryArgs{\n\t\t\t\t\tName:  pulumi.String(\"Environment\"),\n\t\t\t\t\tValue: pulumi.String(\"Staging\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNumVcpusPerSocket: pulumi.Int(1),\n\t\t\tNumSockets:        pulumi.Int(1),\n\t\t\tMemorySizeMib:     pulumi.Int(2048),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = Output.of(NutanixFunctions.getClusters());\n\n        var vm1 = new VirtualMachine(\"vm1\", VirtualMachineArgs.builder()        \n            .clusterUuid(clusters.apply(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()))\n            .categories(VirtualMachineCategoryArgs.builder()\n                .name(\"Environment\")\n                .value(\"Staging\")\n                .build())\n            .numVcpusPerSocket(1)\n            .numSockets(1)\n            .memorySizeMib(2048)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vm1:\n    type: nutanix:VirtualMachine\n    properties:\n      clusterUuid: ${clusters.entities[0].metadata.uuid}\n      categories:\n        - name: Environment\n          value: Staging\n      numVcpusPerSocket: 1\n      numSockets: 1\n      memorySizeMib: 2048\nvariables:\n  clusters:\n    Fn::Invoke:\n      Function: nutanix:getClusters\n      Arguments: {}\n```\n\n{{% /example %}}\n{{% example %}}\n### With Storage Config\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = nutanix.getClusters({});\nconst vm = new nutanix.VirtualMachine(\"vm\", {\n    clusterUuid: clusters.then(clusters =\u003e clusters.entities?[0]?.metadata?.uuid),\n    numVcpusPerSocket: 1,\n    numSockets: 1,\n    memorySizeMib: 186,\n    diskLists: [{\n        diskSizeBytes: 68157440,\n        diskSizeMib: 65,\n        storageConfig: {\n            storageContainerReferences: [{\n                kind: \"storage_container\",\n                uuid: \"2bbe67bc-fd14-4637-8de1-6379257f4219\",\n            }],\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_clusters()\nvm = nutanix.VirtualMachine(\"vm\",\n    cluster_uuid=clusters.entities[0].metadata[\"uuid\"],\n    num_vcpus_per_socket=1,\n    num_sockets=1,\n    memory_size_mib=186,\n    disk_lists=[nutanix.VirtualMachineDiskListArgs(\n        disk_size_bytes=68157440,\n        disk_size_mib=65,\n        storage_config=nutanix.VirtualMachineDiskListStorageConfigArgs(\n            storage_container_references=[nutanix.VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs(\n                kind=\"storage_container\",\n                uuid=\"2bbe67bc-fd14-4637-8de1-6379257f4219\",\n            )],\n        ),\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clusters = Output.Create(Nutanix.GetClusters.InvokeAsync());\n        var vm = new Nutanix.VirtualMachine(\"vm\", new Nutanix.VirtualMachineArgs\n        {\n            ClusterUuid = clusters.Apply(clusters =\u003e clusters.Entities?[0]?.Metadata?.Uuid),\n            NumVcpusPerSocket = 1,\n            NumSockets = 1,\n            MemorySizeMib = 186,\n            DiskLists = \n            {\n                new Nutanix.Inputs.VirtualMachineDiskListArgs\n                {\n                    DiskSizeBytes = 68157440,\n                    DiskSizeMib = 65,\n                    StorageConfig = new Nutanix.Inputs.VirtualMachineDiskListStorageConfigArgs\n                    {\n                        StorageContainerReferences = \n                        {\n                            new Nutanix.Inputs.VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs\n                            {\n                                Kind = \"storage_container\",\n                                Uuid = \"2bbe67bc-fd14-4637-8de1-6379257f4219\",\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclusters, err := nutanix.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.NewVirtualMachine(ctx, \"vm\", \u0026nutanix.VirtualMachineArgs{\n\t\t\tClusterUuid:       pulumi.String(clusters.Entities[0].Metadata.Uuid),\n\t\t\tNumVcpusPerSocket: pulumi.Int(1),\n\t\t\tNumSockets:        pulumi.Int(1),\n\t\t\tMemorySizeMib:     pulumi.Int(186),\n\t\t\tDiskLists: VirtualMachineDiskListArray{\n\t\t\t\t\u0026VirtualMachineDiskListArgs{\n\t\t\t\t\tDiskSizeBytes: pulumi.Int(68157440),\n\t\t\t\t\tDiskSizeMib:   pulumi.Int(65),\n\t\t\t\t\tStorageConfig: \u0026VirtualMachineDiskListStorageConfigArgs{\n\t\t\t\t\t\tStorageContainerReferences: VirtualMachineDiskListStorageConfigStorageContainerReferenceArray{\n\t\t\t\t\t\t\t\u0026VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs{\n\t\t\t\t\t\t\t\tKind: pulumi.String(\"storage_container\"),\n\t\t\t\t\t\t\t\tUuid: pulumi.String(\"2bbe67bc-fd14-4637-8de1-6379257f4219\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = Output.of(NutanixFunctions.getClusters());\n\n        var vm = new VirtualMachine(\"vm\", VirtualMachineArgs.builder()        \n            .clusterUuid(clusters.apply(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()))\n            .numVcpusPerSocket(1)\n            .numSockets(1)\n            .memorySizeMib(186)\n            .diskLists(VirtualMachineDiskListArgs.builder()\n                .diskSizeBytes(68157440)\n                .diskSizeMib(65)\n                .storageConfig(VirtualMachineDiskListStorageConfigArgs.builder()\n                    .storageContainerReferences(VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs.builder()\n                        .kind(\"storage_container\")\n                        .uuid(\"2bbe67bc-fd14-4637-8de1-6379257f4219\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vm:\n    type: nutanix:VirtualMachine\n    properties:\n      clusterUuid: ${clusters.entities[0].metadata.uuid}\n      numVcpusPerSocket: 1\n      numSockets: 1\n      memorySizeMib: 186\n      diskLists:\n        - diskSizeBytes: 6.815744e+07\n          diskSizeMib: 65\n          storageConfig:\n            storageContainerReferences:\n              - kind: storage_container\n                uuid: 2bbe67bc-fd14-4637-8de1-6379257f4219\nvariables:\n  clusters:\n    Fn::Invoke:\n      Function: nutanix:getClusters\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n* `state`: - The state of the vm.\n* `cluster_name`: - The name of the cluster.\n* `host_reference`: - Reference to a host.\n* `hypervisor_type`: - The hypervisor type for the hypervisor the VM is hosted on.\n* `nic_list_status`: - Status NICs attached to the VM.\n"
                },
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bootDeviceDiskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bootDeviceMacAddress": {
                    "type": "string"
                },
                "bootDeviceOrderLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bootType": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineCategory:VirtualMachineCategory"
                    }
                },
                "cloudInitCdromUuid": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "diskLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList"
                    },
                    "description": "Disks attached to the VM.\n* `use_hot_add`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.\n* `num_threads_per_core`: - (Optional) Number of threads per core.\n* `enable_cpu_passthrough`: - (Optional) Add true to enable CPU passthrough.\n* `is_vcpu_hard_pinned`: - (Optional) Add true to enable CPU pinning.\n"
                },
                "enableCpuPassthrough": {
                    "type": "boolean"
                },
                "enableScriptExec": {
                    "type": "boolean"
                },
                "gpuLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList"
                    }
                },
                "guestCustomizationCloudInitCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "guestCustomizationCloudInitMetaData": {
                    "type": "string",
                    "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n* `guest_customization_cloud_init_custom_key_values`: - (Optional) Generic key value pair used for custom attributes in cloud init.\n* `guest_customization_is_overridable`: - (Optional) Flag to allow override of customization by deployer.\n* `guest_customization_sysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n* `guest_customization_sysrep_custom_key_values`: - (Optional) Generic key value pair used for custom attributes in sysrep.\n* `should_fail_on_script_failure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n* `enable_script_exec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n* `power_state_mechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n* `vga_console_enabled`: - (Optional) Indicates whether VGA console should be enabled or not.\n"
                },
                "guestCustomizationCloudInitUserData": {
                    "type": "string"
                },
                "guestCustomizationIsOverridable": {
                    "type": "boolean"
                },
                "guestCustomizationSysprep": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "guestCustomizationSysprepCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "guestOsId": {
                    "type": "string"
                },
                "hardwareClockTimezone": {
                    "type": "string"
                },
                "hostReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hypervisorType": {
                    "type": "string"
                },
                "isVcpuHardPinned": {
                    "type": "boolean"
                },
                "machineType": {
                    "type": "string"
                },
                "memorySizeMib": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ngtCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "ngtEnabledCapabilityLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Application names that are enabled.\n* `num_vcpus_per_socket`: - (Optional) Number of vCPUs per socket.\n* `num_sockets`: - (Optional) Number of vCPU sockets.\n* `gpu_list`: - (Optional) GPUs attached to the VM.\n* `parent_referece`: - (Optional) Reference to an entity that the VM cloned from.\n* `memory_size_mib`: - (Optional) Memory size in MiB.\n* `boot_device_order_list`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n* `boot_device_disk_address`: - (Optional) Address of disk to boot from.\n* `boot_device_mac_address`: - (Optional) MAC address of nic to boot from.\n* `boot_type`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n* `machine_type`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n* `hardware_clock_timezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n* `guest_customization_cloud_init_user_data`: - (Optional) The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
                },
                "nicListStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicListStatus:VirtualMachineNicListStatus"
                    }
                },
                "nicLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicList:VirtualMachineNicList"
                    }
                },
                "numSockets": {
                    "type": "integer"
                },
                "numVcpusPerSocket": {
                    "type": "integer"
                },
                "numVnumaNodes": {
                    "type": "integer"
                },
                "nutanixGuestTools": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "parentReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "powerState": {
                    "type": "string"
                },
                "powerStateMechanism": {
                    "type": "string"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "serialPortLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList"
                    }
                },
                "shouldFailOnScriptFailure": {
                    "type": "boolean"
                },
                "state": {
                    "type": "string"
                },
                "useHotAdd": {
                    "type": "boolean"
                },
                "vgaConsoleEnabled": {
                    "type": "boolean"
                }
            },
            "required": [
                "apiVersion",
                "availabilityZoneReference",
                "bootDeviceDiskAddress",
                "bootDeviceMacAddress",
                "bootDeviceOrderLists",
                "bootType",
                "categories",
                "cloudInitCdromUuid",
                "clusterName",
                "clusterUuid",
                "description",
                "diskLists",
                "enableScriptExec",
                "gpuLists",
                "guestCustomizationCloudInitCustomKeyValues",
                "guestCustomizationCloudInitMetaData",
                "guestCustomizationCloudInitUserData",
                "guestCustomizationIsOverridable",
                "guestCustomizationSysprep",
                "guestCustomizationSysprepCustomKeyValues",
                "guestOsId",
                "hardwareClockTimezone",
                "hostReference",
                "hypervisorType",
                "machineType",
                "memorySizeMib",
                "metadata",
                "name",
                "ngtCredentials",
                "ngtEnabledCapabilityLists",
                "nicLists",
                "nicListStatuses",
                "numSockets",
                "numVcpusPerSocket",
                "numVnumaNodes",
                "nutanixGuestTools",
                "ownerReference",
                "parentReference",
                "powerState",
                "powerStateMechanism",
                "projectReference",
                "shouldFailOnScriptFailure",
                "state",
                "vgaConsoleEnabled"
            ],
            "inputProperties": {
                "availabilityZoneReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bootDeviceDiskAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bootDeviceMacAddress": {
                    "type": "string"
                },
                "bootDeviceOrderLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bootType": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineCategory:VirtualMachineCategory"
                    }
                },
                "cloudInitCdromUuid": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "diskLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList"
                    },
                    "description": "Disks attached to the VM.\n* `use_hot_add`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.\n* `num_threads_per_core`: - (Optional) Number of threads per core.\n* `enable_cpu_passthrough`: - (Optional) Add true to enable CPU passthrough.\n* `is_vcpu_hard_pinned`: - (Optional) Add true to enable CPU pinning.\n"
                },
                "enableCpuPassthrough": {
                    "type": "boolean"
                },
                "enableScriptExec": {
                    "type": "boolean"
                },
                "gpuLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList"
                    }
                },
                "guestCustomizationCloudInitCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "guestCustomizationCloudInitMetaData": {
                    "type": "string",
                    "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n* `guest_customization_cloud_init_custom_key_values`: - (Optional) Generic key value pair used for custom attributes in cloud init.\n* `guest_customization_is_overridable`: - (Optional) Flag to allow override of customization by deployer.\n* `guest_customization_sysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n* `guest_customization_sysrep_custom_key_values`: - (Optional) Generic key value pair used for custom attributes in sysrep.\n* `should_fail_on_script_failure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n* `enable_script_exec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n* `power_state_mechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n* `vga_console_enabled`: - (Optional) Indicates whether VGA console should be enabled or not.\n",
                    "willReplaceOnChanges": true
                },
                "guestCustomizationCloudInitUserData": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "guestCustomizationIsOverridable": {
                    "type": "boolean"
                },
                "guestCustomizationSysprep": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "guestCustomizationSysprepCustomKeyValues": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "willReplaceOnChanges": true
                },
                "guestOsId": {
                    "type": "string"
                },
                "hardwareClockTimezone": {
                    "type": "string"
                },
                "isVcpuHardPinned": {
                    "type": "boolean"
                },
                "machineType": {
                    "type": "string"
                },
                "memorySizeMib": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "ngtCredentials": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "ngtEnabledCapabilityLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Application names that are enabled.\n* `num_vcpus_per_socket`: - (Optional) Number of vCPUs per socket.\n* `num_sockets`: - (Optional) Number of vCPU sockets.\n* `gpu_list`: - (Optional) GPUs attached to the VM.\n* `parent_referece`: - (Optional) Reference to an entity that the VM cloned from.\n* `memory_size_mib`: - (Optional) Memory size in MiB.\n* `boot_device_order_list`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n* `boot_device_disk_address`: - (Optional) Address of disk to boot from.\n* `boot_device_mac_address`: - (Optional) MAC address of nic to boot from.\n* `boot_type`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n* `machine_type`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n* `hardware_clock_timezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n* `guest_customization_cloud_init_user_data`: - (Optional) The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
                },
                "nicLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineNicList:VirtualMachineNicList"
                    }
                },
                "numSockets": {
                    "type": "integer"
                },
                "numVcpusPerSocket": {
                    "type": "integer"
                },
                "numVnumaNodes": {
                    "type": "integer"
                },
                "nutanixGuestTools": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ownerReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "parentReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "powerStateMechanism": {
                    "type": "string"
                },
                "projectReference": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "serialPortLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList"
                    },
                    "willReplaceOnChanges": true
                },
                "shouldFailOnScriptFailure": {
                    "type": "boolean"
                },
                "useHotAdd": {
                    "type": "boolean"
                },
                "vgaConsoleEnabled": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "clusterUuid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualMachine resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the vm.\n* `cluster_name`: - The name of the cluster.\n* `host_reference`: - Reference to a host.\n* `hypervisor_type`: - The hypervisor type for the hypervisor the VM is hosted on.\n* `nic_list_status`: - Status NICs attached to the VM.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "bootDeviceDiskAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "bootDeviceMacAddress": {
                        "type": "string"
                    },
                    "bootDeviceOrderLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "bootType": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineCategory:VirtualMachineCategory"
                        }
                    },
                    "cloudInitCdromUuid": {
                        "type": "string"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "diskLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineDiskList:VirtualMachineDiskList"
                        },
                        "description": "Disks attached to the VM.\n* `use_hot_add`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.\n* `num_threads_per_core`: - (Optional) Number of threads per core.\n* `enable_cpu_passthrough`: - (Optional) Add true to enable CPU passthrough.\n* `is_vcpu_hard_pinned`: - (Optional) Add true to enable CPU pinning.\n"
                    },
                    "enableCpuPassthrough": {
                        "type": "boolean"
                    },
                    "enableScriptExec": {
                        "type": "boolean"
                    },
                    "gpuLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineGpuList:VirtualMachineGpuList"
                        }
                    },
                    "guestCustomizationCloudInitCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "guestCustomizationCloudInitMetaData": {
                        "type": "string",
                        "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n* `guest_customization_cloud_init_custom_key_values`: - (Optional) Generic key value pair used for custom attributes in cloud init.\n* `guest_customization_is_overridable`: - (Optional) Flag to allow override of customization by deployer.\n* `guest_customization_sysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n* `guest_customization_sysrep_custom_key_values`: - (Optional) Generic key value pair used for custom attributes in sysrep.\n* `should_fail_on_script_failure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n* `enable_script_exec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n* `power_state_mechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n* `vga_console_enabled`: - (Optional) Indicates whether VGA console should be enabled or not.\n",
                        "willReplaceOnChanges": true
                    },
                    "guestCustomizationCloudInitUserData": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "guestCustomizationIsOverridable": {
                        "type": "boolean"
                    },
                    "guestCustomizationSysprep": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "willReplaceOnChanges": true
                    },
                    "guestCustomizationSysprepCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "willReplaceOnChanges": true
                    },
                    "guestOsId": {
                        "type": "string"
                    },
                    "hardwareClockTimezone": {
                        "type": "string"
                    },
                    "hostReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "hypervisorType": {
                        "type": "string"
                    },
                    "isVcpuHardPinned": {
                        "type": "boolean"
                    },
                    "machineType": {
                        "type": "string"
                    },
                    "memorySizeMib": {
                        "type": "integer"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ngtCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "ngtEnabledCapabilityLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Application names that are enabled.\n* `num_vcpus_per_socket`: - (Optional) Number of vCPUs per socket.\n* `num_sockets`: - (Optional) Number of vCPU sockets.\n* `gpu_list`: - (Optional) GPUs attached to the VM.\n* `parent_referece`: - (Optional) Reference to an entity that the VM cloned from.\n* `memory_size_mib`: - (Optional) Memory size in MiB.\n* `boot_device_order_list`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n* `boot_device_disk_address`: - (Optional) Address of disk to boot from.\n* `boot_device_mac_address`: - (Optional) MAC address of nic to boot from.\n* `boot_type`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n* `machine_type`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n* `hardware_clock_timezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n* `guest_customization_cloud_init_user_data`: - (Optional) The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
                    },
                    "nicListStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineNicListStatus:VirtualMachineNicListStatus"
                        }
                    },
                    "nicLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineNicList:VirtualMachineNicList"
                        }
                    },
                    "numSockets": {
                        "type": "integer"
                    },
                    "numVcpusPerSocket": {
                        "type": "integer"
                    },
                    "numVnumaNodes": {
                        "type": "integer"
                    },
                    "nutanixGuestTools": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "parentReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "powerState": {
                        "type": "string"
                    },
                    "powerStateMechanism": {
                        "type": "string"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "serialPortLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VirtualMachineSerialPortList:VirtualMachineSerialPortList"
                        },
                        "willReplaceOnChanges": true
                    },
                    "shouldFailOnScriptFailure": {
                        "type": "boolean"
                    },
                    "state": {
                        "type": "string"
                    },
                    "useHotAdd": {
                        "type": "boolean"
                    },
                    "vgaConsoleEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "nutanix:index/vpc:Vpc": {
            "description": "Provides Nutanix resource to create VPC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### vpc creation with external subnet name\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst vpc = new nutanix.Vpc(\"vpc\", {\n    commonDomainNameServerIpLists: [\n        {\n            ip: \"8.8.8.8\",\n        },\n        {\n            ip: \"8.8.8.9\",\n        },\n    ],\n    externalSubnetReferenceNames: [\n        \"test-Ext1\",\n        \"test-ext2\",\n    ],\n    externallyRoutablePrefixLists: [{\n        ip: \"192.43.0.0\",\n        prefixLength: 16,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nvpc = nutanix.Vpc(\"vpc\",\n    common_domain_name_server_ip_lists=[\n        nutanix.VpcCommonDomainNameServerIpListArgs(\n            ip=\"8.8.8.8\",\n        ),\n        nutanix.VpcCommonDomainNameServerIpListArgs(\n            ip=\"8.8.8.9\",\n        ),\n    ],\n    external_subnet_reference_names=[\n        \"test-Ext1\",\n        \"test-ext2\",\n    ],\n    externally_routable_prefix_lists=[nutanix.VpcExternallyRoutablePrefixListArgs(\n        ip=\"192.43.0.0\",\n        prefix_length=16,\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vpc = new Nutanix.Vpc(\"vpc\", new Nutanix.VpcArgs\n        {\n            CommonDomainNameServerIpLists = \n            {\n                new Nutanix.Inputs.VpcCommonDomainNameServerIpListArgs\n                {\n                    Ip = \"8.8.8.8\",\n                },\n                new Nutanix.Inputs.VpcCommonDomainNameServerIpListArgs\n                {\n                    Ip = \"8.8.8.9\",\n                },\n            },\n            ExternalSubnetReferenceNames = \n            {\n                \"test-Ext1\",\n                \"test-ext2\",\n            },\n            ExternallyRoutablePrefixLists = \n            {\n                new Nutanix.Inputs.VpcExternallyRoutablePrefixListArgs\n                {\n                    Ip = \"192.43.0.0\",\n                    PrefixLength = 16,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewVpc(ctx, \"vpc\", \u0026nutanix.VpcArgs{\n\t\t\tCommonDomainNameServerIpLists: VpcCommonDomainNameServerIpListArray{\n\t\t\t\t\u0026VpcCommonDomainNameServerIpListArgs{\n\t\t\t\t\tIp: pulumi.String(\"8.8.8.8\"),\n\t\t\t\t},\n\t\t\t\t\u0026VpcCommonDomainNameServerIpListArgs{\n\t\t\t\t\tIp: pulumi.String(\"8.8.8.9\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExternalSubnetReferenceNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test-Ext1\"),\n\t\t\t\tpulumi.String(\"test-ext2\"),\n\t\t\t},\n\t\t\tExternallyRoutablePrefixLists: VpcExternallyRoutablePrefixListArray{\n\t\t\t\t\u0026VpcExternallyRoutablePrefixListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"192.43.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(16),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc = new Vpc(\"vpc\", VpcArgs.builder()        \n            .commonDomainNameServerIpLists(            \n                VpcCommonDomainNameServerIpListArgs.builder()\n                    .ip(\"8.8.8.8\")\n                    .build(),\n                VpcCommonDomainNameServerIpListArgs.builder()\n                    .ip(\"8.8.8.9\")\n                    .build())\n            .externalSubnetReferenceNames(            \n                \"test-Ext1\",\n                \"test-ext2\")\n            .externallyRoutablePrefixLists(VpcExternallyRoutablePrefixListArgs.builder()\n                .ip(\"192.43.0.0\")\n                .prefixLength(16)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc:\n    type: nutanix:Vpc\n    properties:\n      commonDomainNameServerIpLists:\n        - ip: 8.8.8.8\n        - ip: 8.8.8.9\n      externalSubnetReferenceNames:\n        - test-Ext1\n        - test-ext2\n      externallyRoutablePrefixLists:\n        - ip: 192.43.0.0\n          prefixLength: 16\n```\n{{% /example %}}\n{{% example %}}\n### vpc creation with external subnet uuid\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst vpc = new nutanix.Vpc(\"vpc\", {\n    commonDomainNameServerIpLists: [{\n        ip: \"8.8.8.8\",\n    }],\n    externalSubnetReferenceUuids: [\"\u003csubnet_uuid\u003e\"],\n    externallyRoutablePrefixLists: [\n        {\n            ip: \"192.43.0.0\",\n            prefixLength: 16,\n        },\n        {\n            ip: \"192.42.0.0\",\n            prefixLength: 16,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nvpc = nutanix.Vpc(\"vpc\",\n    common_domain_name_server_ip_lists=[nutanix.VpcCommonDomainNameServerIpListArgs(\n        ip=\"8.8.8.8\",\n    )],\n    external_subnet_reference_uuids=[\"\u003csubnet_uuid\u003e\"],\n    externally_routable_prefix_lists=[\n        nutanix.VpcExternallyRoutablePrefixListArgs(\n            ip=\"192.43.0.0\",\n            prefix_length=16,\n        ),\n        nutanix.VpcExternallyRoutablePrefixListArgs(\n            ip=\"192.42.0.0\",\n            prefix_length=16,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vpc = new Nutanix.Vpc(\"vpc\", new Nutanix.VpcArgs\n        {\n            CommonDomainNameServerIpLists = \n            {\n                new Nutanix.Inputs.VpcCommonDomainNameServerIpListArgs\n                {\n                    Ip = \"8.8.8.8\",\n                },\n            },\n            ExternalSubnetReferenceUuids = \n            {\n                \"\u003csubnet_uuid\u003e\",\n            },\n            ExternallyRoutablePrefixLists = \n            {\n                new Nutanix.Inputs.VpcExternallyRoutablePrefixListArgs\n                {\n                    Ip = \"192.43.0.0\",\n                    PrefixLength = 16,\n                },\n                new Nutanix.Inputs.VpcExternallyRoutablePrefixListArgs\n                {\n                    Ip = \"192.42.0.0\",\n                    PrefixLength = 16,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewVpc(ctx, \"vpc\", \u0026nutanix.VpcArgs{\n\t\t\tCommonDomainNameServerIpLists: VpcCommonDomainNameServerIpListArray{\n\t\t\t\t\u0026VpcCommonDomainNameServerIpListArgs{\n\t\t\t\t\tIp: pulumi.String(\"8.8.8.8\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExternalSubnetReferenceUuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003csubnet_uuid\u003e\"),\n\t\t\t},\n\t\t\tExternallyRoutablePrefixLists: VpcExternallyRoutablePrefixListArray{\n\t\t\t\t\u0026VpcExternallyRoutablePrefixListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"192.43.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(16),\n\t\t\t\t},\n\t\t\t\t\u0026VpcExternallyRoutablePrefixListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"192.42.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(16),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc = new Vpc(\"vpc\", VpcArgs.builder()        \n            .commonDomainNameServerIpLists(VpcCommonDomainNameServerIpListArgs.builder()\n                .ip(\"8.8.8.8\")\n                .build())\n            .externalSubnetReferenceUuids(\"\u003csubnet_uuid\u003e\")\n            .externallyRoutablePrefixLists(            \n                VpcExternallyRoutablePrefixListArgs.builder()\n                    .ip(\"192.43.0.0\")\n                    .prefixLength(16)\n                    .build(),\n                VpcExternallyRoutablePrefixListArgs.builder()\n                    .ip(\"192.42.0.0\")\n                    .prefixLength(16)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc:\n    type: nutanix:Vpc\n    properties:\n      commonDomainNameServerIpLists:\n        - ip: 8.8.8.8\n      externalSubnetReferenceUuids:\n        - \u003csubnet_uuid\u003e\n      externallyRoutablePrefixLists:\n        - ip: 192.43.0.0\n          prefixLength: 16\n        - ip: 192.42.0.0\n          prefixLength: 16\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetListStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcExternalSubnetListStatus:VpcExternalSubnetListStatus"
                    },
                    "description": "Status of List of external subnets attached to this VPC\n"
                },
                "externalSubnetReferenceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets name attached to this VPC. Should not be used with external_subnet_reference_uuid.\n"
                },
                "externalSubnetReferenceUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets uuid attached to this VPC. Should not be used with external_subnet_reference_name.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList"
                    },
                    "description": "List Externally Routable IP Addresses. Required when external subnet with NoNAT is used.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The vpc kind metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the VPC.\n"
                }
            },
            "required": [
                "apiVersion",
                "commonDomainNameServerIpLists",
                "externalSubnetListStatuses",
                "externalSubnetReferenceUuids",
                "externallyRoutablePrefixLists",
                "metadata",
                "name"
            ],
            "inputProperties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API.\n"
                },
                "commonDomainNameServerIpLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList"
                    },
                    "description": "List of domain name server IPs.\n"
                },
                "externalSubnetReferenceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets name attached to this VPC. Should not be used with external_subnet_reference_uuid.\n"
                },
                "externalSubnetReferenceUuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external subnets uuid attached to this VPC. Should not be used with external_subnet_reference_name.\n"
                },
                "externallyRoutablePrefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList"
                    },
                    "description": "List Externally Routable IP Addresses. Required when external subnet with NoNAT is used.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the VPC.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "commonDomainNameServerIpLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VpcCommonDomainNameServerIpList:VpcCommonDomainNameServerIpList"
                        },
                        "description": "List of domain name server IPs.\n"
                    },
                    "externalSubnetListStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VpcExternalSubnetListStatus:VpcExternalSubnetListStatus"
                        },
                        "description": "Status of List of external subnets attached to this VPC\n"
                    },
                    "externalSubnetReferenceNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of external subnets name attached to this VPC. Should not be used with external_subnet_reference_uuid.\n"
                    },
                    "externalSubnetReferenceUuids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of external subnets uuid attached to this VPC. Should not be used with external_subnet_reference_name.\n"
                    },
                    "externallyRoutablePrefixLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/VpcExternallyRoutablePrefixList:VpcExternallyRoutablePrefixList"
                        },
                        "description": "List Externally Routable IP Addresses. Required when external subnet with NoNAT is used.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The vpc kind metadata.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the VPC.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "nutanix:index/getAccessControlPolicies:getAccessControlPolicies": {
            "description": "Describes a list of access control policies.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = pulumi.output(nutanix.getAccessControlPolicies());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_access_control_policies()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Nutanix.GetAccessControlPolicies.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetAccessControlPolicies(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Output.of(NutanixFunctions.getAccessControlPolicies());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getAccessControlPolicies\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessControlPolicies.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPoliciesMetadata:getAccessControlPoliciesMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccessControlPolicies.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the Access Control Policy.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPoliciesEntity:getAccessControlPoliciesEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPoliciesMetadata:getAccessControlPoliciesMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getAccessControlPolicy:getAccessControlPolicy": {
            "description": "Describes an Access Control Policy.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessControlPolicy.\n",
                "properties": {
                    "accessControlPolicyId": {
                        "type": "string"
                    },
                    "accessControlPolicyName": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyCategory:getAccessControlPolicyCategory"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccessControlPolicy.\n",
                "properties": {
                    "accessControlPolicyId": {
                        "type": "string"
                    },
                    "accessControlPolicyName": {
                        "type": "string"
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the Access Control Policy.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyCategory:getAccessControlPolicyCategory"
                        }
                    },
                    "contextFilterLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyContextFilterList:getAccessControlPolicyContextFilterList"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "roleReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyRoleReference:getAccessControlPolicyRoleReference"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "userGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyUserGroupReferenceList:getAccessControlPolicyUserGroupReferenceList"
                        }
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAccessControlPolicyUserReferenceList:getAccessControlPolicyUserReferenceList"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "contextFilterLists",
                    "description",
                    "metadata",
                    "name",
                    "ownerReference",
                    "projectReference",
                    "roleReferences",
                    "state",
                    "userGroupReferenceLists",
                    "userReferenceLists",
                    "id"
                ]
            }
        },
        "nutanix:index/getAddressGroup:getAddressGroup": {
            "description": "Provides a datasource to retrieve a address group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst testAddress = new nutanix.AddressGroup(\"testAddress\", {\n    description: \"test address groups resource\",\n    ipAddressBlockLists: [{\n        ip: \"10.0.0.0\",\n        prefixLength: 24,\n    }],\n});\nconst addrGroup = nutanix.getAddressGroupOutput({\n    uuid: testAddress.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest_address = nutanix.AddressGroup(\"testAddress\",\n    description=\"test address groups resource\",\n    ip_address_block_lists=[nutanix.AddressGroupIpAddressBlockListArgs(\n        ip=\"10.0.0.0\",\n        prefix_length=24,\n    )])\naddr_group = nutanix.get_address_group_output(uuid=test_address.id)\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testAddress = new Nutanix.AddressGroup(\"testAddress\", new Nutanix.AddressGroupArgs\n        {\n            Description = \"test address groups resource\",\n            IpAddressBlockLists = \n            {\n                new Nutanix.Inputs.AddressGroupIpAddressBlockListArgs\n                {\n                    Ip = \"10.0.0.0\",\n                    PrefixLength = 24,\n                },\n            },\n        });\n        var addrGroup = Nutanix.GetAddressGroup.Invoke(new Nutanix.GetAddressGroupInvokeArgs\n        {\n            Uuid = testAddress.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestAddress, err := nutanix.NewAddressGroup(ctx, \"testAddress\", \u0026nutanix.AddressGroupArgs{\n\t\t\tDescription: pulumi.String(\"test address groups resource\"),\n\t\t\tIpAddressBlockLists: AddressGroupIpAddressBlockListArray{\n\t\t\t\t\u0026AddressGroupIpAddressBlockListArgs{\n\t\t\t\t\tIp:           pulumi.String(\"10.0.0.0\"),\n\t\t\t\t\tPrefixLength: pulumi.Int(24),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nutanix.LookupAddressGroupOutput(ctx, GetAddressGroupOutputArgs{\n\t\t\tUuid: testAddress.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAddress = new AddressGroup(\"testAddress\", AddressGroupArgs.builder()        \n            .description(\"test address groups resource\")\n            .ipAddressBlockLists(AddressGroupIpAddressBlockListArgs.builder()\n                .ip(\"10.0.0.0\")\n                .prefixLength(24)\n                .build())\n            .build());\n\n        final var addrGroup = NutanixFunctions.getAddressGroup(GetAddressGroupArgs.builder()\n            .uuid(testAddress.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAddress:\n    type: nutanix:AddressGroup\n    properties:\n      description: test address groups resource\n      ipAddressBlockLists:\n        - ip: 10.0.0.0\n          prefixLength: 24\nvariables:\n  addrGroup:\n    Fn::Invoke:\n      Function: nutanix:getAddressGroup\n      Arguments:\n        uuid: ${testAddress.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAddressGroup.\n",
                "properties": {
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAddressGroup.\n",
                "properties": {
                    "addressGroupString": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddressBlockLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupIpAddressBlockList:getAddressGroupIpAddressBlockList"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "addressGroupString",
                    "description",
                    "ipAddressBlockLists",
                    "name",
                    "uuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getAddressGroups:getAddressGroups": {
            "description": "Provides a datasource to retrieve list of address groups.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst addrGroups = pulumi.output(nutanix.getAddressGroups());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\naddr_groups = nutanix.get_address_groups()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var addrGroups = Output.Create(Nutanix.GetAddressGroups.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetAddressGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var addrGroups = Output.of(NutanixFunctions.getAddressGroups());\n\n    }\n}\n```\n```yaml\nvariables:\n  addrGroups:\n    Fn::Invoke:\n      Function: nutanix:getAddressGroups\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAddressGroups.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupsMetadata:getAddressGroupsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAddressGroups.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupsEntity:getAddressGroupsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAddressGroupsMetadata:getAddressGroupsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getAssertHelper:getAssertHelper": {
            "inputs": {
                "description": "A collection of arguments for invoking getAssertHelper.\n",
                "properties": {
                    "checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAssertHelperCheck:getAssertHelperCheck"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAssertHelper.\n",
                "properties": {
                    "checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getAssertHelperCheck:getAssertHelperCheck"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "nutanix:index/getCategoryKey:getCategoryKey": {
            "description": "Describe a Nutanix Category Key and its values (if it has them).\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCategoryKey.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCategoryKey.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `values`: - A list of the values from this category key (if it has them).\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "systemDefined": {
                        "type": "boolean"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "description",
                    "name",
                    "systemDefined",
                    "values",
                    "id"
                ]
            }
        },
        "nutanix:index/getCluster:getCluster": {
            "description": "Describes Clusters\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterCategory:getClusterCategory"
                        }
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "analysisVmEfficiencyMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n* `description`: - A description for image.\n* `metadata`: - The image kind metadata.\n* `state`: - The state of the cluster entity.\n* `gpu_driver_version`: - GPU driver version.\n* `client_auth`: - Client authentication config.\n* `authorized_piblic_key_list`: - List of valid ssh keys for the cluster.\n* `software_map_ncc`: - Map of software on the cluster with software type as the key.\n* `software_map_nos`: - Map of software on the cluster with software type as the key.\n* `encryption_status`: - Cluster encryption status.\n* `ssl_key_type`: - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.\n* `ssl_key_signing_info`: - Customer information used in Certificate Signing Request for creating digital certificates.\n* `ssl_key_expire_datetime`: - UTC date and time in RFC-3339 format when the key expires\n* `service_list`: - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.\n* `supported_information_verbosity`: - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)\n* `certification_signing_info`: - Customer information used in Certificate Signing Request for creating digital certificates.\n* `operation_mode`: - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.\n* `ca_certificate_list`: - Zone name used in value of TZ environment variable.\n* `enabled_feature_list`: - Array of enabled features.\n* `is_available`: - Indicates if cluster is available to contact. (Readonly)\n* `build`: - Cluster build details.\n* `timezone`: - Zone name used in value of TZ environment variable.\n* `cluster_arch`: - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)\n* `management_server_list`: - List of cluster management servers. (Readonly)\n* `masquerading_port`: - Port used together with masquerading_ip to connect to the cluster.\n* `masquerading_ip`: - The cluster NAT'd or proxy IP which maps to the cluster local IP.\n* `external_ip`: - The local IP of cluster visible externally.\n* `http_proxy_list`: - List of proxies to connect to the service centers.\n* `smtp_server_type`: - SMTP Server type.\n* `smtp_server_email_address`: - SMTP Server Email Address.\n* `smtp_server_credentials`: - SMTP Server Credentials.\n* `smtp_server_proxy_type_list`: - SMTP Server Proxy Type List\n* `smtp_server_address`: - SMTP Server Address.\n* `ntp_server_ip_list`: - The list of IP addresses or FQDNs of the NTP servers.\n* `external_subnet`: - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)\n* `external_data_services_ip`: - The cluster IP address that provides external entities access to various cluster data services.\n* `internal_subnet`: - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.\n* `domain_server_nameserver`: -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.\n* `domain_server_name`: - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.\n* `domain_server_credentials`: - Cluster domain credentials.\n* `nfs_subnet_whitelist`: - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.\n* `name_server_ip_list`: - The list of IP addresses of the name servers.\n* `http_proxy_whitelist`: - HTTP proxy whitelist.\n* `analysis_vm_efficiency_map`: - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)\n"
                    },
                    "authorizedPublicKeyLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterAuthorizedPublicKeyList:getClusterAuthorizedPublicKeyList"
                        }
                    },
                    "build": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "caCertificateLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterCaCertificateList:getClusterCaCertificateList"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterCategory:getClusterCategory"
                        }
                    },
                    "certificationSigningInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "clientAuth": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "clusterArch": {
                        "type": "string"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "domainServerCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "domainServerName": {
                        "type": "string"
                    },
                    "domainServerNameserver": {
                        "type": "string"
                    },
                    "enabledFeatureLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "encryptionStatus": {
                        "type": "string"
                    },
                    "externalDataServicesIp": {
                        "type": "string"
                    },
                    "externalIp": {
                        "type": "string"
                    },
                    "externalSubnet": {
                        "type": "string"
                    },
                    "gpuDriverVersion": {
                        "type": "string"
                    },
                    "httpProxyLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterHttpProxyList:getClusterHttpProxyList"
                        }
                    },
                    "httpProxyWhitelists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterHttpProxyWhitelist:getClusterHttpProxyWhitelist"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalSubnet": {
                        "type": "string"
                    },
                    "isAvailable": {
                        "type": "boolean"
                    },
                    "managementServerLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterManagementServerList:getClusterManagementServerList"
                        }
                    },
                    "masqueradingIp": {
                        "type": "string"
                    },
                    "masqueradingPort": {
                        "type": "integer"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameServerIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nfsSubnetWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClusterNode:getClusterNode"
                        }
                    },
                    "ntpServerIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "operationMode": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "serviceLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "smtpServerAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "smtpServerCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "smtpServerEmailAddress": {
                        "type": "string"
                    },
                    "smtpServerProxyTypeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "smtpServerType": {
                        "type": "string"
                    },
                    "softwareMapNcc": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "softwareMapNos": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "sslKeyExpireDatetime": {
                        "type": "string"
                    },
                    "sslKeyName": {
                        "type": "string"
                    },
                    "sslKeySigningInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "sslKeyType": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "supportedInformationVerbosity": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "analysisVmEfficiencyMap",
                    "apiVersion",
                    "authorizedPublicKeyLists",
                    "build",
                    "caCertificateLists",
                    "categories",
                    "certificationSigningInfo",
                    "clientAuth",
                    "clusterArch",
                    "clusterId",
                    "domainServerCredentials",
                    "domainServerName",
                    "domainServerNameserver",
                    "enabledFeatureLists",
                    "encryptionStatus",
                    "externalDataServicesIp",
                    "externalIp",
                    "externalSubnet",
                    "gpuDriverVersion",
                    "httpProxyLists",
                    "httpProxyWhitelists",
                    "internalSubnet",
                    "isAvailable",
                    "managementServerLists",
                    "masqueradingIp",
                    "masqueradingPort",
                    "metadata",
                    "name",
                    "nameServerIpLists",
                    "nfsSubnetWhitelists",
                    "nodes",
                    "ntpServerIpLists",
                    "operationMode",
                    "ownerReference",
                    "projectReference",
                    "serviceLists",
                    "smtpServerAddress",
                    "smtpServerCredentials",
                    "smtpServerEmailAddress",
                    "smtpServerProxyTypeLists",
                    "smtpServerType",
                    "softwareMapNcc",
                    "softwareMapNos",
                    "sslKeyExpireDatetime",
                    "sslKeyName",
                    "sslKeySigningInfo",
                    "sslKeyType",
                    "state",
                    "supportedInformationVerbosity",
                    "timezone",
                    "id"
                ]
            }
        },
        "nutanix:index/getClusters:getClusters": {
            "description": "Describes Clusters\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = pulumi.output(nutanix.getClusters());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_clusters()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clusters = Output.Create(Nutanix.GetClusters.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = Output.of(NutanixFunctions.getClusters());\n\n    }\n}\n```\n```yaml\nvariables:\n  clusters:\n    Fn::Invoke:\n      Function: nutanix:getClusters\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n## Reference\n\nThe `project_reference`, `owner_reference`, `availability_zone_reference`, `cluster_reference`, attributes supports the following:\n\n* `kind`: - The kind name (Default value: project).\n* `name`: - the name.\n* `UUID`: - the UUID.\n\n### Version\n\nThe version attribute supports the following:\n\n* `product_name`: - Name of the producer/distribution of the image. For example windows or red hat.\n* `product_version`: - Version string for the disk image.\n\nSee detailed information in [Nutanix Image](https://nutanix.github.io/Automation/experimental/swagger-redoc-sandbox/#tag/clusters/paths/~1clusters~1multicluster_config/post).\n",
            "outputs": {
                "description": "A collection of values returned by getClusters.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n* `description`: - A description for image.\n* `metadata`: - The image kind metadata.\n* `state`: - The state of the cluster entity.\n* `gpu_driver_version`: - GPU driver version.\n* `client_auth`: - Client authentication config.\n* `authorized_piblic_key_list`: - List of valid ssh keys for the cluster.\n* `software_map_ncc`: - Map of software on the cluster with software type as the key.\n* `software_map_nos`: - Map of software on the cluster with software type as the key.\n* `encryption_status`: - Cluster encryption status.\n* `ssl_key_type`: - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.\n* `ssl_key_signing_info`: - Customer information used in Certificate Signing Request for creating digital certificates.\n* `ssl_key_expire_datetime`: - UTC date and time in RFC-3339 format when the key expires\n* `service_list`: - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.\n* `supported_information_verbosity`: - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)\n* `certification_signing_info`: - Customer information used in Certificate Signing Request for creating digital certificates.\n* `operation_mode`: - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.\n* `ca_certificate_list`: - Zone name used in value of TZ environment variable.\n* `enabled_feature_list`: - Array of enabled features.\n* `is_available`: - Indicates if cluster is available to contact. (Readonly)\n* `build`: - Cluster build details.\n* `timezone`: - Zone name used in value of TZ environment variable.\n* `cluster_arch`: - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)\n* `management_server_list`: - List of cluster management servers. (Readonly)\n* `masquerading_port`: - Port used together with masquerading_ip to connect to the cluster.\n* `masquerading_ip`: - The cluster NAT'd or proxy IP which maps to the cluster local IP.\n* `external_ip`: - The local IP of cluster visible externally.\n* `http_proxy_list`: - List of proxies to connect to the service centers.\n* `smtp_server_type`: - SMTP Server type.\n* `smtp_server_email_address`: - SMTP Server Email Address.\n* `smtp_server_credentials`: - SMTP Server Credentials.\n* `smtp_server_proxy_type_list`: - SMTP Server Proxy Type List\n* `smtp_server_address`: - SMTP Server Address.\n* `ntp_server_ip_list`: - The list of IP addresses or FQDNs of the NTP servers.\n* `external_subnet`: - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)\n* `external_data_services_ip`: - The cluster IP address that provides external entities access to various cluster data services.\n* `internal_subnet`: - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.\n* `domain_server_nameserver`: -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.\n* `domain_server_name`: - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.\n* `domain_server_credentials`: - Cluster domain credentials.\n* `nfs_subnet_whitelist`: - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.\n* `name_server_ip_list`: - The list of IP addresses of the name servers.\n* `http_proxy_whitelist`: - HTTP proxy whitelist.\n* `analysis_vm_efficiency_map`: - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getClustersEntity:getClustersEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getFloatingIp:getFloatingIp": {
            "description": "Provides a datasource to retrieve floating IPs with floating_ip_uuid .\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIp.\n",
                "properties": {
                    "floatingIpUuid": {
                        "type": "string",
                        "description": "Floating IP UUID\n"
                    }
                },
                "type": "object",
                "required": [
                    "floatingIpUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIp.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "floatingIpUuid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpSpec:getFloatingIpSpec"
                        },
                        "description": "Floating IP spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpStatus:getFloatingIpStatus"
                        },
                        "description": "Floating IP output status\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "floatingIpUuid",
                    "metadata",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getFloatingIps:getFloatingIps": {
            "description": "Provides a datasource to retrieve all the floating IPs .\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = pulumi.output(nutanix.getFloatingIps());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_floating_ips()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Nutanix.GetFloatingIps.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFloatingIps(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Output.of(NutanixFunctions.getFloatingIps());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getFloatingIps\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIps.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpsMetadata:getFloatingIpsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIps.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpsEntity:getFloatingIpsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFloatingIpsMetadata:getFloatingIpsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralApiKeys:getFoundationCentralApiKeys": {
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralApiKeys.\n",
                "properties": {
                    "keyUuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "keyUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralApiKeys.\n",
                "properties": {
                    "alias": {
                        "type": "string"
                    },
                    "apiKey": {
                        "type": "string"
                    },
                    "createdTimestamp": {
                        "type": "string"
                    },
                    "currentTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keyUuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "apiKey",
                    "createdTimestamp",
                    "currentTime",
                    "keyUuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralClusterDetails:getFoundationCentralClusterDetails": {
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralClusterDetails.\n",
                "properties": {
                    "clusterExternalIp": {
                        "type": "string"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterSize": {
                        "type": "integer"
                    },
                    "clusterStatus": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatus:getFoundationCentralClusterDetailsClusterStatus"
                    },
                    "commonNetworkSettings": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsCommonNetworkSettings:getFoundationCentralClusterDetailsCommonNetworkSettings"
                    },
                    "imagedClusterUuid": {
                        "type": "string"
                    },
                    "redundancyFactor": {
                        "type": "integer"
                    },
                    "storageNodeCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "imagedClusterUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralClusterDetails.\n",
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "clusterExternalIp": {
                        "type": "string"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterSize": {
                        "type": "integer"
                    },
                    "clusterStatus": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsClusterStatus:getFoundationCentralClusterDetailsClusterStatus"
                    },
                    "commonNetworkSettings": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsCommonNetworkSettings:getFoundationCentralClusterDetailsCommonNetworkSettings"
                    },
                    "createdTimestamp": {
                        "type": "string"
                    },
                    "currentTime": {
                        "type": "string"
                    },
                    "destroyed": {
                        "type": "boolean"
                    },
                    "foundationInitConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralClusterDetailsFoundationInitConfig:getFoundationCentralClusterDetailsFoundationInitConfig"
                        }
                    },
                    "foundationInitNodeUuid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedClusterUuid": {
                        "type": "string"
                    },
                    "imagedNodeUuidLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "redundancyFactor": {
                        "type": "integer"
                    },
                    "storageNodeCount": {
                        "type": "integer"
                    },
                    "workflowType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "archived",
                    "clusterExternalIp",
                    "clusterName",
                    "clusterSize",
                    "clusterStatus",
                    "commonNetworkSettings",
                    "createdTimestamp",
                    "currentTime",
                    "destroyed",
                    "foundationInitConfigs",
                    "foundationInitNodeUuid",
                    "imagedClusterUuid",
                    "imagedNodeUuidLists",
                    "storageNodeCount",
                    "workflowType",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralImagedClustersList:getFoundationCentralImagedClustersList": {
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralImagedClustersList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListFilters:getFoundationCentralImagedClustersListFilters"
                    },
                    "length": {
                        "type": "integer"
                    },
                    "offset": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralImagedClustersList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListFilters:getFoundationCentralImagedClustersListFilters"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedClusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListImagedCluster:getFoundationCentralImagedClustersListImagedCluster"
                        }
                    },
                    "length": {
                        "type": "integer"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedClustersListMetadata:getFoundationCentralImagedClustersListMetadata"
                        }
                    },
                    "offset": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "imagedClusters",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralImagedNodeDetails:getFoundationCentralImagedNodeDetails": {
            "description": "Get the details of a single node given its UUID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nodesDetails = pulumi.output(nutanix.getFoundationCentralImagedNodeDetails({\n    imagedNodeUuid: \"\u003cIMAGED-NODE-UUID\u003e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnodes_details = nutanix.get_foundation_central_imaged_node_details(imaged_node_uuid=\"\u003cIMAGED-NODE-UUID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var nodesDetails = Output.Create(Nutanix.GetFoundationCentralImagedNodeDetails.InvokeAsync(new Nutanix.GetFoundationCentralImagedNodeDetailsArgs\n        {\n            ImagedNodeUuid = \"\u003cIMAGED-NODE-UUID\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationCentralImagedNodeDetails(ctx, \u0026GetFoundationCentralImagedNodeDetailsArgs{\n\t\t\tImagedNodeUuid: \"\u003cIMAGED-NODE-UUID\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nodesDetails = Output.of(NutanixFunctions.getFoundationCentralImagedNodeDetails(GetFoundationCentralImagedNodeDetailsArgs.builder()\n            .imagedNodeUuid(\"\u003cIMAGED-NODE-UUID\u003e\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  nodesDetails:\n    Fn::Invoke:\n      Function: nutanix:getFoundationCentralImagedNodeDetails\n      Arguments:\n        imagedNodeUuid: \u003cIMAGED-NODE-UUID\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralImagedNodeDetails.\n",
                "properties": {
                    "imagedNodeUuid": {
                        "type": "string"
                    },
                    "ipv6Interface": {
                        "type": "string"
                    },
                    "objectVersion": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "imagedNodeUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralImagedNodeDetails.\n",
                "properties": {
                    "aosVersion": {
                        "type": "string"
                    },
                    "apiKeyUuid": {
                        "type": "string"
                    },
                    "available": {
                        "type": "boolean"
                    },
                    "blockSerial": {
                        "type": "string"
                    },
                    "createdTimestamp": {
                        "type": "string"
                    },
                    "currentTime": {
                        "type": "string"
                    },
                    "cvmGateway": {
                        "type": "string"
                    },
                    "cvmIp": {
                        "type": "string"
                    },
                    "cvmIpv6": {
                        "type": "string"
                    },
                    "cvmNetmask": {
                        "type": "string"
                    },
                    "cvmUp": {
                        "type": "boolean"
                    },
                    "cvmUuid": {
                        "type": "string"
                    },
                    "cvmVlanId": {
                        "type": "integer"
                    },
                    "foundationVersion": {
                        "type": "string"
                    },
                    "hardwareAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "hypervisorGateway": {
                        "type": "string"
                    },
                    "hypervisorHostname": {
                        "type": "string"
                    },
                    "hypervisorIp": {
                        "type": "string"
                    },
                    "hypervisorNetmask": {
                        "type": "string"
                    },
                    "hypervisorType": {
                        "type": "string"
                    },
                    "hypervisorVersion": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedClusterUuid": {
                        "type": "string"
                    },
                    "imagedNodeUuid": {
                        "type": "string"
                    },
                    "ipmiGateway": {
                        "type": "string"
                    },
                    "ipmiIp": {
                        "type": "string"
                    },
                    "ipmiNetmask": {
                        "type": "string"
                    },
                    "ipv6Interface": {
                        "type": "string"
                    },
                    "latestHbTsLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "model": {
                        "type": "string"
                    },
                    "nodePosition": {
                        "type": "string"
                    },
                    "nodeSerial": {
                        "type": "string"
                    },
                    "nodeState": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "objectVersion": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "aosVersion",
                    "apiKeyUuid",
                    "available",
                    "blockSerial",
                    "createdTimestamp",
                    "currentTime",
                    "cvmGateway",
                    "cvmIp",
                    "cvmIpv6",
                    "cvmNetmask",
                    "cvmUp",
                    "cvmUuid",
                    "cvmVlanId",
                    "foundationVersion",
                    "hardwareAttributes",
                    "hypervisorGateway",
                    "hypervisorHostname",
                    "hypervisorIp",
                    "hypervisorNetmask",
                    "hypervisorType",
                    "hypervisorVersion",
                    "imagedClusterUuid",
                    "imagedNodeUuid",
                    "ipmiGateway",
                    "ipmiIp",
                    "ipmiNetmask",
                    "ipv6Interface",
                    "latestHbTsLists",
                    "model",
                    "nodePosition",
                    "nodeSerial",
                    "nodeState",
                    "nodeType",
                    "objectVersion",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralImagedNodesList:getFoundationCentralImagedNodesList": {
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralImagedNodesList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListFilters:getFoundationCentralImagedNodesListFilters"
                    },
                    "length": {
                        "type": "integer"
                    },
                    "offset": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralImagedNodesList.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListFilters:getFoundationCentralImagedNodesListFilters"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imagedNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListImagedNode:getFoundationCentralImagedNodesListImagedNode"
                        }
                    },
                    "length": {
                        "type": "integer"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralImagedNodesListMetadata:getFoundationCentralImagedNodesListMetadata"
                        }
                    },
                    "offset": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "imagedNodes",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationCentralListApiKeys:getFoundationCentralListApiKeys": {
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationCentralListApiKeys.\n",
                "properties": {
                    "length": {
                        "type": "integer"
                    },
                    "metadata": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralListApiKeysMetadata:getFoundationCentralListApiKeysMetadata"
                    },
                    "offset": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationCentralListApiKeys.\n",
                "properties": {
                    "apiKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationCentralListApiKeysApiKey:getFoundationCentralListApiKeysApiKey"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "length": {
                        "type": "integer"
                    },
                    "metadata": {
                        "$ref": "#/types/nutanix:index/getFoundationCentralListApiKeysMetadata:getFoundationCentralListApiKeysMetadata"
                    },
                    "offset": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "apiKeys",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationDiscoverNodes:getFoundationDiscoverNodes": {
            "description": "Discovers and lists Nutanix-imaged nodes within an IPv6 network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst discoveredNodes = pulumi.output(nutanix.getFoundationDiscoverNodes());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ndiscovered_nodes = nutanix.get_foundation_discover_nodes()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var discoveredNodes = Output.Create(Nutanix.GetFoundationDiscoverNodes.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationDiscoverNodes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var discoveredNodes = Output.of(NutanixFunctions.getFoundationDiscoverNodes());\n\n    }\n}\n```\n```yaml\nvariables:\n  discoveredNodes:\n    Fn::Invoke:\n      Function: nutanix:getFoundationDiscoverNodes\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getFoundationDiscoverNodes.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationDiscoverNodesEntity:getFoundationDiscoverNodesEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationHypervisorIsos:getFoundationHypervisorIsos": {
            "description": "Describes a list of hypervisor isos image file details present in foundation vm\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst hypervisorIsos = pulumi.output(nutanix.getFoundationHypervisorIsos());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nhypervisor_isos = nutanix.get_foundation_hypervisor_isos()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var hypervisorIsos = Output.Create(Nutanix.GetFoundationHypervisorIsos.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationHypervisorIsos(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var hypervisorIsos = Output.of(NutanixFunctions.getFoundationHypervisorIsos());\n\n    }\n}\n```\n```yaml\nvariables:\n  hypervisorIsos:\n    Fn::Invoke:\n      Function: nutanix:getFoundationHypervisorIsos\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n## Note\n\n* This data source only lists .iso files details.\n\nSee detailed information in [Nutanix Foundation Hypervisor Isos](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjM0MDE-list-hypervisor-images-available-in-foundation).\n",
            "outputs": {
                "description": "A collection of values returned by getFoundationHypervisorIsos.\n",
                "properties": {
                    "esxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosEsx:getFoundationHypervisorIsosEsx"
                        }
                    },
                    "hypervs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosHyperv:getFoundationHypervisorIsosHyperv"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kvms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosKvm:getFoundationHypervisorIsosKvm"
                        }
                    },
                    "linuxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosLinux:getFoundationHypervisorIsosLinux"
                        }
                    },
                    "xens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationHypervisorIsosXen:getFoundationHypervisorIsosXen"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "esxes",
                    "hypervs",
                    "kvms",
                    "linuxes",
                    "xens",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationNodPackages:getFoundationNodPackages": {
            "description": "Describes a list of nos (aos) packages present in foundation vm\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst nosPackages = pulumi.output(nutanix.getFoundationNodPackages());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnos_packages = nutanix.get_foundation_nod_packages()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var nosPackages = Output.Create(Nutanix.GetFoundationNodPackages.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationNodPackages(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nosPackages = Output.of(NutanixFunctions.getFoundationNodPackages());\n\n    }\n}\n```\n```yaml\nvariables:\n  nosPackages:\n    Fn::Invoke:\n      Function: nutanix:getFoundationNodPackages\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n## Note\n\n* This data source only lists .tar file names.\n\nSee detailed information in [Nutanix Foundation Nos Packages](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjMzODg-get-list-of-aos-packages-available-in-foundation).\n",
            "outputs": {
                "description": "A collection of values returned by getFoundationNodPackages.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getFoundationNodeNetworkDetails:getFoundationNodeNetworkDetails": {
            "description": "Gets hypervisor, CVM \u0026 IPMI info of the discovered nodes using their ipv6 address.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst networkDetails = pulumi.output(nutanix.getFoundationNodeNetworkDetails({\n    ipv6Addresses: [\n        \"\u003cipv6-address-1\u003e\",\n        \"\u003cipv6-address-2\u003e\",\n    ],\n    timeout: \"30\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nnetwork_details = nutanix.get_foundation_node_network_details(ipv6_addresses=[\n        \"\u003cipv6-address-1\u003e\",\n        \"\u003cipv6-address-2\u003e\",\n    ],\n    timeout=\"30\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var networkDetails = Output.Create(Nutanix.GetFoundationNodeNetworkDetails.InvokeAsync(new Nutanix.GetFoundationNodeNetworkDetailsArgs\n        {\n            Ipv6Addresses = \n            {\n                \"\u003cipv6-address-1\u003e\",\n                \"\u003cipv6-address-2\u003e\",\n            },\n            Timeout = \"30\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetFoundationNodeNetworkDetails(ctx, \u0026GetFoundationNodeNetworkDetailsArgs{\n\t\t\tIpv6Addresses: []string{\n\t\t\t\t\"\u003cipv6-address-1\u003e\",\n\t\t\t\t\"\u003cipv6-address-2\u003e\",\n\t\t\t},\n\t\t\tTimeout: pulumi.StringRef(\"30\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var networkDetails = Output.of(NutanixFunctions.getFoundationNodeNetworkDetails(GetFoundationNodeNetworkDetailsArgs.builder()\n            .ipv6Addresses(            \n                \"\u003cipv6-address-1\u003e\",\n                \"\u003cipv6-address-2\u003e\")\n            .timeout(\"30\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  networkDetails:\n    Fn::Invoke:\n      Function: nutanix:getFoundationNodeNetworkDetails\n      Arguments:\n        ipv6Addresses:\n          - \u003cipv6-address-1\u003e\n          - \u003cipv6-address-2\u003e\n        timeout: 30\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFoundationNodeNetworkDetails.\n",
                "properties": {
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeout": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ipv6Addresses"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFoundationNodeNetworkDetails.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getFoundationNodeNetworkDetailsNode:getFoundationNodeNetworkDetailsNode"
                        }
                    },
                    "timeout": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ipv6Addresses",
                    "nodes",
                    "id"
                ]
            }
        },
        "nutanix:index/getHost:getHost": {
            "description": "Describes a Host\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHost.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostCategory:getHostCategory"
                        }
                    },
                    "hostId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hostId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHost.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n* `gpu_driver_version`: - Host GPU driver version.\n* `failover_cluster`: - Hyper-V failover cluster.\n* `ipmi`: - Host IPMI info.\n* `cpu_model`: - Host CPU model.\n* `host_nics_id_list`: - Host NICs.\n* `num_cpu_sockets`: - Number of CPU sockets.\n* `windows_domain`: - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.\n* `gpu_list`: - List of GPUs on the host.\n* `serial_number`: - Node serial number.\n* `cpu_capacity_hz`: - Host CPU capacity.\n* `memory_capacity_mib`: - Host memory capacity in MiB.\n* `host_disks_reference_list`: - The reference to a disk.\n* `monitoring_state`: - Host monitoring status.\n* `hypervisor`: - Host Hypervisor information.\n* `host_type`: - Host type.\n* `num_cpu_cores`: - Number of CPU cores on Host.\n* `rackable_unit_reference`: - The reference to a rackable_unit.\n* `controller_vm`: - Host controller vm information.\n* `block`: - Host block config info.\n"
                    },
                    "block": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostCategory:getHostCategory"
                        }
                    },
                    "clusterReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "controllerVm": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "cpuCapacityHz": {
                        "type": "integer"
                    },
                    "cpuModel": {
                        "type": "string"
                    },
                    "failoverCluster": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "gpuDriverVersion": {
                        "type": "string"
                    },
                    "gpuLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostGpuList:getHostGpuList"
                        }
                    },
                    "hostDisksReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostHostDisksReferenceList:getHostHostDisksReferenceList"
                        }
                    },
                    "hostId": {
                        "type": "string"
                    },
                    "hostNicsIdLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hostType": {
                        "type": "string"
                    },
                    "hypervisor": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipmi": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "memoryCapacityMib": {
                        "type": "integer"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "monitoringState": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "numCpuCores": {
                        "type": "integer"
                    },
                    "numCpuSockets": {
                        "type": "integer"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "rackableUnitReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "serialNumber": {
                        "type": "string"
                    },
                    "windowsDomain": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "block",
                    "categories",
                    "clusterReference",
                    "controllerVm",
                    "cpuCapacityHz",
                    "cpuModel",
                    "failoverCluster",
                    "gpuDriverVersion",
                    "gpuLists",
                    "hostDisksReferenceLists",
                    "hostId",
                    "hostNicsIdLists",
                    "hostType",
                    "hypervisor",
                    "ipmi",
                    "memoryCapacityMib",
                    "metadata",
                    "monitoringState",
                    "name",
                    "numCpuCores",
                    "numCpuSockets",
                    "ownerReference",
                    "projectReference",
                    "rackableUnitReference",
                    "serialNumber",
                    "windowsDomain",
                    "id"
                ]
            }
        },
        "nutanix:index/getHosts:getHosts": {
            "description": "Describes a list of hosts\n",
            "outputs": {
                "description": "A collection of values returned by getHosts.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version.\n* `gpu_driver_version`: - Host GPU driver version.\n* `failover_cluster`: - Hyper-V failover cluster.\n* `ipmi`: - Host IPMI info.\n* `cpu_model`: - Host CPU model.\n* `host_nics_id_list`: - Host NICs.\n* `num_cpu_sockets`: - Number of CPU sockets.\n* `windows_domain`: - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.\n* `gpu_list`: - List of GPUs on the host.\n* `serial_number`: - Node serial number.\n* `cpu_capacity_hz`: - Host CPU capacity.\n* `memory_capacity_mib`: - Host memory capacity in MiB.\n* `host_disks_reference_list`: - The reference to a disk.\n* `monitoring_state`: - Host monitoring status.\n* `hypervisor`: - Host Hypervisor information.\n* `host_type`: - Host type.\n* `num_cpu_cores`: - Number of CPU cores on Host.\n* `rackable_unit_reference`: - The reference to a rackable_unit.\n* `controller_vm`: - Host controller vm information.\n* `block`: - Host block config info.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getHostsEntity:getHostsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getImage:getImage": {
            "description": "Describes a Image\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageCategory:getImageCategory"
                        }
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "imageName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageCategory:getImageCategory"
                        }
                    },
                    "checksum": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageClusterReference:getImageClusterReference"
                        }
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "currentClusterReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getImageCurrentClusterReferenceList:getImageCurrentClusterReferenceList"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "imageName": {
                        "type": "string"
                    },
                    "imageType": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "retrievalUriLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sizeBytes": {
                        "type": "integer"
                    },
                    "sourceUri": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "version": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "architecture",
                    "availabilityZoneReference",
                    "categories",
                    "checksum",
                    "clusterName",
                    "clusterReferences",
                    "clusterUuid",
                    "currentClusterReferenceLists",
                    "description",
                    "imageType",
                    "metadata",
                    "name",
                    "ownerReference",
                    "projectReference",
                    "retrievalUriLists",
                    "sizeBytes",
                    "sourceUri",
                    "state",
                    "version",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonCluster:getKarbonCluster": {
            "description": "Describes a Karbon Cluster\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst cluster = pulumi.output(nutanix.getKarbonCluster({\n    karbonClusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ncluster = nutanix.get_karbon_cluster(karbon_cluster_id=\"\u003cYOUR-CLUSTER-ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cluster = Output.Create(Nutanix.GetKarbonCluster.InvokeAsync(new Nutanix.GetKarbonClusterArgs\n        {\n            KarbonClusterId = \"\u003cYOUR-CLUSTER-ID\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupKarbonCluster(ctx, \u0026GetKarbonClusterArgs{\n\t\t\tKarbonClusterId: pulumi.StringRef(\"\u003cYOUR-CLUSTER-ID\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var cluster = Output.of(NutanixFunctions.getKarbonCluster(GetKarbonClusterArgs.builder()\n            .karbonClusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  cluster:\n    Fn::Invoke:\n      Function: nutanix:getKarbonCluster\n      Arguments:\n        karbonClusterId: \u003cYOUR-CLUSTER-ID\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonCluster.\n",
                "properties": {
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonCluster.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string"
                    },
                    "etcdNodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClusterEtcdNodePool:getKarbonClusterEtcdNodePool"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    },
                    "kubeapiServerIpv4Address": {
                        "type": "string"
                    },
                    "masterNodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClusterMasterNodePool:getKarbonClusterMasterNodePool"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "workerNodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClusterWorkerNodePool:getKarbonClusterWorkerNodePool"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "deploymentType",
                    "etcdNodePools",
                    "kubeapiServerIpv4Address",
                    "masterNodePools",
                    "name",
                    "status",
                    "uuid",
                    "version",
                    "workerNodePools",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonClusterKubeConfig:getKarbonClusterKubeConfig": {
            "description": "Describes the SSH config from a Karbon Cluster\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\n// Get kubeconfig by cluster UUID\nconst configbyid = pulumi.output(nutanix.getKarbonClusterKubeConfig({\n    karbonClusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n}));\n// Get Kubeconfig by cluster name\nconst configbyname = pulumi.output(nutanix.getKarbonClusterKubeConfig({\n    karbonClusterName: \"\u003cYOUR-CLUSTER-NAME\u003e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nconfigbyid = nutanix.get_karbon_cluster_kube_config(karbon_cluster_id=\"\u003cYOUR-CLUSTER-ID\u003e\")\nconfigbyname = nutanix.get_karbon_cluster_kube_config(karbon_cluster_name=\"\u003cYOUR-CLUSTER-NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var configbyid = Output.Create(Nutanix.GetKarbonClusterKubeConfig.InvokeAsync(new Nutanix.GetKarbonClusterKubeConfigArgs\n        {\n            KarbonClusterId = \"\u003cYOUR-CLUSTER-ID\u003e\",\n        }));\n        var configbyname = Output.Create(Nutanix.GetKarbonClusterKubeConfig.InvokeAsync(new Nutanix.GetKarbonClusterKubeConfigArgs\n        {\n            KarbonClusterName = \"\u003cYOUR-CLUSTER-NAME\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetKarbonClusterKubeConfig(ctx, \u0026GetKarbonClusterKubeConfigArgs{\n\t\t\tKarbonClusterId: pulumi.StringRef(\"\u003cYOUR-CLUSTER-ID\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetKarbonClusterKubeConfig(ctx, \u0026GetKarbonClusterKubeConfigArgs{\n\t\t\tKarbonClusterName: pulumi.StringRef(\"\u003cYOUR-CLUSTER-NAME\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var configbyid = Output.of(NutanixFunctions.getKarbonClusterKubeConfig(GetKarbonClusterKubeConfigArgs.builder()\n            .karbonClusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build()));\n\n        final var configbyname = Output.of(NutanixFunctions.getKarbonClusterKubeConfig(GetKarbonClusterKubeConfigArgs.builder()\n            .karbonClusterName(\"\u003cYOUR-CLUSTER-NAME\u003e\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  configbyid:\n    Fn::Invoke:\n      Function: nutanix:getKarbonClusterKubeConfig\n      Arguments:\n        karbonClusterId: \u003cYOUR-CLUSTER-ID\u003e\n  configbyname:\n    Fn::Invoke:\n      Function: nutanix:getKarbonClusterKubeConfig\n      Arguments:\n        karbonClusterName: \u003cYOUR-CLUSTER-NAME\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonClusterKubeConfig.\n",
                "properties": {
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonClusterKubeConfig.\n",
                "properties": {
                    "accessToken": {
                        "type": "string"
                    },
                    "clusterCaCertificate": {
                        "type": "string"
                    },
                    "clusterUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "clusterCaCertificate",
                    "clusterUrl",
                    "name",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonClusterSsh:getKarbonClusterSsh": {
            "description": "Describes the SSH config from a Karbon Cluster\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\n// Get ssh credentials by cluster UUID\nconst sshbyid = pulumi.output(nutanix.getKarbonClusterSsh({\n    karbonClusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n}));\n// Get ssh credentials by cluster name\nconst sshbyname = pulumi.output(nutanix.getKarbonClusterSsh({\n    karbonClusterName: \"\u003cYOUR-CLUSTER-NAME\u003e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsshbyid = nutanix.get_karbon_cluster_ssh(karbon_cluster_id=\"\u003cYOUR-CLUSTER-ID\u003e\")\nsshbyname = nutanix.get_karbon_cluster_ssh(karbon_cluster_name=\"\u003cYOUR-CLUSTER-NAME\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sshbyid = Output.Create(Nutanix.GetKarbonClusterSsh.InvokeAsync(new Nutanix.GetKarbonClusterSshArgs\n        {\n            KarbonClusterId = \"\u003cYOUR-CLUSTER-ID\u003e\",\n        }));\n        var sshbyname = Output.Create(Nutanix.GetKarbonClusterSsh.InvokeAsync(new Nutanix.GetKarbonClusterSshArgs\n        {\n            KarbonClusterName = \"\u003cYOUR-CLUSTER-NAME\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetKarbonClusterSsh(ctx, \u0026GetKarbonClusterSshArgs{\n\t\t\tKarbonClusterId: pulumi.StringRef(\"\u003cYOUR-CLUSTER-ID\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetKarbonClusterSsh(ctx, \u0026GetKarbonClusterSshArgs{\n\t\t\tKarbonClusterName: pulumi.StringRef(\"\u003cYOUR-CLUSTER-NAME\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sshbyid = Output.of(NutanixFunctions.getKarbonClusterSsh(GetKarbonClusterSshArgs.builder()\n            .karbonClusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build()));\n\n        final var sshbyname = Output.of(NutanixFunctions.getKarbonClusterSsh(GetKarbonClusterSshArgs.builder()\n            .karbonClusterName(\"\u003cYOUR-CLUSTER-NAME\u003e\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  sshbyid:\n    Fn::Invoke:\n      Function: nutanix:getKarbonClusterSsh\n      Arguments:\n        karbonClusterId: \u003cYOUR-CLUSTER-ID\u003e\n  sshbyname:\n    Fn::Invoke:\n      Function: nutanix:getKarbonClusterSsh\n      Arguments:\n        karbonClusterName: \u003cYOUR-CLUSTER-NAME\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonClusterSsh.\n",
                "properties": {
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonClusterSsh.\n",
                "properties": {
                    "certificate": {
                        "type": "string"
                    },
                    "expiryTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "karbonClusterId": {
                        "type": "string"
                    },
                    "karbonClusterName": {
                        "type": "string"
                    },
                    "privateKey": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificate",
                    "expiryTime",
                    "privateKey",
                    "username",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonClusters:getKarbonClusters": {
            "description": "Describes Karbon Clusters\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst clusters = pulumi.output(nutanix.getKarbonClusters());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nclusters = nutanix.get_karbon_clusters()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clusters = Output.Create(Nutanix.GetKarbonClusters.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetKarbonClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = Output.of(NutanixFunctions.getKarbonClusters());\n\n    }\n}\n```\n```yaml\nvariables:\n  clusters:\n    Fn::Invoke:\n      Function: nutanix:getKarbonClusters\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getKarbonClusters.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonClustersCluster:getKarbonClustersCluster"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonPrivateRegistries:getKarbonPrivateRegistries": {
            "description": "Describes a List of Karbon private registry entry\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst registry = pulumi.output(nutanix.getKarbonPrivateRegistries({\n    clusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nregistry = nutanix.get_karbon_private_registries()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var registry = Output.Create(Nutanix.GetKarbonPrivateRegistries.InvokeAsync(\n        {\n            { \"clusterId\", \"\u003cYOUR-CLUSTER-ID\u003e\" },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetKarbonPrivateRegistries(ctx, map[string]interface{}{\n\t\t\t\"clusterId\": \"\u003cYOUR-CLUSTER-ID\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var registry = Output.of(NutanixFunctions.getKarbonPrivateRegistries(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n\n    }\n}\n```\n```yaml\nvariables:\n  registry:\n    Fn::Invoke:\n      Function: nutanix:getKarbonPrivateRegistries\n      Arguments:\n        clusterId: \u003cYOUR-CLUSTER-ID\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getKarbonPrivateRegistries.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "privateRegistries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getKarbonPrivateRegistriesPrivateRegistry:getKarbonPrivateRegistriesPrivateRegistry"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "privateRegistries",
                    "id"
                ]
            }
        },
        "nutanix:index/getKarbonPrivateRegistry:getKarbonPrivateRegistry": {
            "description": "Describes Karbon private registry entry\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst registry = pulumi.output(nutanix.getKarbonPrivateRegistry({\n    clusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nregistry = nutanix.get_karbon_private_registry(cluster_id=\"\u003cYOUR-CLUSTER-ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var registry = Output.Create(Nutanix.GetKarbonPrivateRegistry.InvokeAsync(new Nutanix.GetKarbonPrivateRegistryArgs\n        {\n            ClusterId = \"\u003cYOUR-CLUSTER-ID\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.LookupKarbonPrivateRegistry(ctx, \u0026GetKarbonPrivateRegistryArgs{\n\t\t\tClusterId: \"\u003cYOUR-CLUSTER-ID\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var registry = Output.of(NutanixFunctions.getKarbonPrivateRegistry(GetKarbonPrivateRegistryArgs.builder()\n            .clusterId(\"\u003cYOUR-CLUSTER-ID\u003e\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  registry:\n    Fn::Invoke:\n      Function: nutanix:getKarbonPrivateRegistry\n      Arguments:\n        clusterId: \u003cYOUR-CLUSTER-ID\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKarbonPrivateRegistry.\n",
                "properties": {
                    "privateRegistryId": {
                        "type": "string"
                    },
                    "privateRegistryName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKarbonPrivateRegistry.\n",
                "properties": {
                    "endpoint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "privateRegistryId": {
                        "type": "string"
                    },
                    "privateRegistryName": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "endpoint",
                    "name",
                    "uuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getNetworkSecurityRule:getNetworkSecurityRule": {
            "description": "Describes a Network security rule\n\n\u003e NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Isolate Development VMs From Production VMs And Get Its Information)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst isolation = new nutanix.NetworkSecurityRule(\"isolation\", {\n    description: \"Isolation Rule Example\",\n    isolationRuleAction: \"APPLY\",\n    isolationRuleFirstEntityFilterKindLists: [\"vm\"],\n    isolationRuleFirstEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Dev\"],\n    }],\n    isolationRuleFirstEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n    isolationRuleSecondEntityFilterKindLists: [\"vm\"],\n    isolationRuleSecondEntityFilterParams: [{\n        name: \"Environment\",\n        values: [\"Production\"],\n    }],\n    isolationRuleSecondEntityFilterType: \"CATEGORIES_MATCH_ALL\",\n});\nconst test = isolation.id.apply(id =\u003e nutanix.getNetworkSecurityRule({\n    networkSecurityRuleId: id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nisolation = nutanix.NetworkSecurityRule(\"isolation\",\n    description=\"Isolation Rule Example\",\n    isolation_rule_action=\"APPLY\",\n    isolation_rule_first_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_first_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Dev\"],\n    )],\n    isolation_rule_first_entity_filter_type=\"CATEGORIES_MATCH_ALL\",\n    isolation_rule_second_entity_filter_kind_lists=[\"vm\"],\n    isolation_rule_second_entity_filter_params=[nutanix.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs(\n        name=\"Environment\",\n        values=[\"Production\"],\n    )],\n    isolation_rule_second_entity_filter_type=\"CATEGORIES_MATCH_ALL\")\ntest = nutanix.get_network_security_rule_output(network_security_rule_id=isolation.id)\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var isolation = new Nutanix.NetworkSecurityRule(\"isolation\", new Nutanix.NetworkSecurityRuleArgs\n        {\n            Description = \"Isolation Rule Example\",\n            IsolationRuleAction = \"APPLY\",\n            IsolationRuleFirstEntityFilterKindLists = \n            {\n                \"vm\",\n            },\n            IsolationRuleFirstEntityFilterParams = \n            {\n                new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs\n                {\n                    Name = \"Environment\",\n                    Values = \n                    {\n                        \"Dev\",\n                    },\n                },\n            },\n            IsolationRuleFirstEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n            IsolationRuleSecondEntityFilterKindLists = \n            {\n                \"vm\",\n            },\n            IsolationRuleSecondEntityFilterParams = \n            {\n                new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs\n                {\n                    Name = \"Environment\",\n                    Values = \n                    {\n                        \"Production\",\n                    },\n                },\n            },\n            IsolationRuleSecondEntityFilterType = \"CATEGORIES_MATCH_ALL\",\n        });\n        var test = Nutanix.GetNetworkSecurityRule.Invoke(new Nutanix.GetNetworkSecurityRuleInvokeArgs\n        {\n            NetworkSecurityRuleId = isolation.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tisolation, err := nutanix.NewNetworkSecurityRule(ctx, \"isolation\", \u0026nutanix.NetworkSecurityRuleArgs{\n\t\t\tDescription:         pulumi.String(\"Isolation Rule Example\"),\n\t\t\tIsolationRuleAction: pulumi.String(\"APPLY\"),\n\t\t\tIsolationRuleFirstEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterParams: NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArray{\n\t\t\t\t\u0026NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleFirstEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t\tIsolationRuleSecondEntityFilterKindLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"vm\"),\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterParams: NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArray{\n\t\t\t\t\u0026NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs{\n\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Production\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsolationRuleSecondEntityFilterType: pulumi.String(\"CATEGORIES_MATCH_ALL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nutanix.LookupNetworkSecurityRuleOutput(ctx, GetNetworkSecurityRuleOutputArgs{\n\t\t\tNetworkSecurityRuleId: isolation.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var isolation = new NetworkSecurityRule(\"isolation\", NetworkSecurityRuleArgs.builder()        \n            .description(\"Isolation Rule Example\")\n            .isolationRuleAction(\"APPLY\")\n            .isolationRuleFirstEntityFilterKindLists(\"vm\")\n            .isolationRuleFirstEntityFilterParams(NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Dev\")\n                .build())\n            .isolationRuleFirstEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .isolationRuleSecondEntityFilterKindLists(\"vm\")\n            .isolationRuleSecondEntityFilterParams(NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs.builder()\n                .name(\"Environment\")\n                .values(\"Production\")\n                .build())\n            .isolationRuleSecondEntityFilterType(\"CATEGORIES_MATCH_ALL\")\n            .build());\n\n        final var test = NutanixFunctions.getNetworkSecurityRule(GetNetworkSecurityRuleArgs.builder()\n            .networkSecurityRuleId(isolation.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  isolation:\n    type: nutanix:NetworkSecurityRule\n    properties:\n      description: Isolation Rule Example\n      isolationRuleAction: APPLY\n      isolationRuleFirstEntityFilterKindLists:\n        - vm\n      isolationRuleFirstEntityFilterParams:\n        - name: Environment\n          values:\n            - Dev\n      isolationRuleFirstEntityFilterType: CATEGORIES_MATCH_ALL\n      isolationRuleSecondEntityFilterKindLists:\n        - vm\n      isolationRuleSecondEntityFilterParams:\n        - name: Environment\n          values:\n            - Production\n      isolationRuleSecondEntityFilterType: CATEGORIES_MATCH_ALL\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getNetworkSecurityRule\n      Arguments:\n        networkSecurityRuleId: ${isolation.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkSecurityRule.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleCategory:getNetworkSecurityRuleCategory"
                        }
                    },
                    "networkSecurityRuleId": {
                        "type": "string",
                        "description": "(Required) The ID for the rule you want to retrieve.\n* `name`: - The name for the network_security_rule.\n* `categories`: Categories for the network_security_rule.\n* `project_reference`: The reference to a project.\n* `owner_reference`: The reference to a user.\n* `api_version`\n* `description`: A description for network_security_rule.\n* `quarantine_rule_action`: These rules are used for quarantining suspected VMs. Target group is a required attribute. Empty inbound_allow_list will not allow anything into target group. Empty outbound_allow_list will allow everything from target group.\n* `quarantine_rule_outbound_allow_list`:\n* `quarantine_rule_target_group_default_internal_policy`: - Default policy for communication within target group.\n* `quarantine_rule_target_group_peer_specification_type`: - Way to identify the object for which rule is applied.\n* `quarantine_rule_target_group_filter_kind_list`: - List of kinds associated with this filter.\n* `quarantine_rule_target_group_filter_type`: - The type of the filter being used.\n* `quarantine_rule_target_group_filter_params`: - A list of category key and list of values.\n* `quarantine_rule_inbound_allow_list`:\n* `app_rule_action`: - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n* `app_rule_outbound_allow_list`:\n* `app_rule_target_group_default_internal_policy`: - Default policy for communication within target group.\n* `app_rule_target_group_peer_specification_type`: - Way to identify the object for which rule is applied.\n* `app_rule_target_group_filter_kind_list`: - List of kinds associated with this filter.\n* `app_rule_target_group_filter_type`: - The type of the filter being used.\n* `app_rule_target_group_filter_params`: - A list of category key and list of values.\n* `app_rule_inbound_allow_list`: The set of categories that matching VMs need to have.\n* `ad_rule_action`: - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n* `ad_rule_outbound_allow_list`:\n* `ad_rule_target_group_default_internal_policy`: - Default policy for communication within target group.\n* `ad_rule_target_group_peer_specification_type`: - Way to identify the object for which rule is applied.\n* `ad_rule_target_group_filter_kind_list`: - List of kinds associated with this filter.\n* `ad_rule_target_group_filter_type`: - The type of the filter being used.\n* `ad_rule_target_group_filter_params`: - A list of category key and list of values.\n* `ad_rule_inbound_allow_list`: The set of categories that matching VMs need to have.\n* `isolation_rule_action`: - These rules are used for environmental isolation.\n* `app_rule_inbound_allow_list`:\n* `isolation_rule_first_entity_filter_kind_list`: - List of kinds associated with this filter.\n* `isolation_rule_first_entity_filter_type`: - The type of the filter being used.\n* `isolation_rule_first_entity_filter_params`: - A list of category key and list of values.\n* `isolation_rule_second_entity_filter_kind_list`: - List of kinds associated with this filter.\n* `isolation_rule_second_entity_filter_type`: - The type of the filter being used.\n* `isolation_rule_second_entity_filter_params`: - A list of category key and list of values.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkSecurityRuleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkSecurityRule.\n",
                "properties": {
                    "adRuleAction": {
                        "type": "string"
                    },
                    "adRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleInboundAllowList:getNetworkSecurityRuleAdRuleInboundAllowList"
                        }
                    },
                    "adRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleOutboundAllowList:getNetworkSecurityRuleAdRuleOutboundAllowList"
                        }
                    },
                    "adRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string"
                    },
                    "adRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "adRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAdRuleTargetGroupFilterParam:getNetworkSecurityRuleAdRuleTargetGroupFilterParam"
                        }
                    },
                    "adRuleTargetGroupFilterType": {
                        "type": "string"
                    },
                    "adRuleTargetGroupPeerSpecificationType": {
                        "type": "string"
                    },
                    "allowIpv6Traffic": {
                        "type": "boolean"
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "appRuleAction": {
                        "type": "string"
                    },
                    "appRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleInboundAllowList:getNetworkSecurityRuleAppRuleInboundAllowList"
                        }
                    },
                    "appRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleOutboundAllowList:getNetworkSecurityRuleAppRuleOutboundAllowList"
                        }
                    },
                    "appRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string"
                    },
                    "appRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "appRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleAppRuleTargetGroupFilterParam:getNetworkSecurityRuleAppRuleTargetGroupFilterParam"
                        }
                    },
                    "appRuleTargetGroupFilterType": {
                        "type": "string"
                    },
                    "appRuleTargetGroupPeerSpecificationType": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleCategory:getNetworkSecurityRuleCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isPolicyHitlogEnabled": {
                        "type": "boolean"
                    },
                    "isolationRuleAction": {
                        "type": "string"
                    },
                    "isolationRuleFirstEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isolationRuleFirstEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam:getNetworkSecurityRuleIsolationRuleFirstEntityFilterParam"
                        }
                    },
                    "isolationRuleFirstEntityFilterType": {
                        "type": "string"
                    },
                    "isolationRuleSecondEntityFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isolationRuleSecondEntityFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam:getNetworkSecurityRuleIsolationRuleSecondEntityFilterParam"
                        }
                    },
                    "isolationRuleSecondEntityFilterType": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkSecurityRuleId": {
                        "type": "string",
                        "description": "(Required) The ID for the rule you want to retrieve.\n* `name`: - The name for the network_security_rule.\n* `categories`: Categories for the network_security_rule.\n* `project_reference`: The reference to a project.\n* `owner_reference`: The reference to a user.\n* `api_version`\n* `description`: A description for network_security_rule.\n* `quarantine_rule_action`: These rules are used for quarantining suspected VMs. Target group is a required attribute. Empty inbound_allow_list will not allow anything into target group. Empty outbound_allow_list will allow everything from target group.\n* `quarantine_rule_outbound_allow_list`:\n* `quarantine_rule_target_group_default_internal_policy`: - Default policy for communication within target group.\n* `quarantine_rule_target_group_peer_specification_type`: - Way to identify the object for which rule is applied.\n* `quarantine_rule_target_group_filter_kind_list`: - List of kinds associated with this filter.\n* `quarantine_rule_target_group_filter_type`: - The type of the filter being used.\n* `quarantine_rule_target_group_filter_params`: - A list of category key and list of values.\n* `quarantine_rule_inbound_allow_list`:\n* `app_rule_action`: - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n* `app_rule_outbound_allow_list`:\n* `app_rule_target_group_default_internal_policy`: - Default policy for communication within target group.\n* `app_rule_target_group_peer_specification_type`: - Way to identify the object for which rule is applied.\n* `app_rule_target_group_filter_kind_list`: - List of kinds associated with this filter.\n* `app_rule_target_group_filter_type`: - The type of the filter being used.\n* `app_rule_target_group_filter_params`: - A list of category key and list of values.\n* `app_rule_inbound_allow_list`: The set of categories that matching VMs need to have.\n* `ad_rule_action`: - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.\n* `ad_rule_outbound_allow_list`:\n* `ad_rule_target_group_default_internal_policy`: - Default policy for communication within target group.\n* `ad_rule_target_group_peer_specification_type`: - Way to identify the object for which rule is applied.\n* `ad_rule_target_group_filter_kind_list`: - List of kinds associated with this filter.\n* `ad_rule_target_group_filter_type`: - The type of the filter being used.\n* `ad_rule_target_group_filter_params`: - A list of category key and list of values.\n* `ad_rule_inbound_allow_list`: The set of categories that matching VMs need to have.\n* `isolation_rule_action`: - These rules are used for environmental isolation.\n* `app_rule_inbound_allow_list`:\n* `isolation_rule_first_entity_filter_kind_list`: - List of kinds associated with this filter.\n* `isolation_rule_first_entity_filter_type`: - The type of the filter being used.\n* `isolation_rule_first_entity_filter_params`: - A list of category key and list of values.\n* `isolation_rule_second_entity_filter_kind_list`: - List of kinds associated with this filter.\n* `isolation_rule_second_entity_filter_type`: - The type of the filter being used.\n* `isolation_rule_second_entity_filter_params`: - A list of category key and list of values.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "quarantineRuleAction": {
                        "type": "string"
                    },
                    "quarantineRuleInboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleInboundAllowList:getNetworkSecurityRuleQuarantineRuleInboundAllowList"
                        }
                    },
                    "quarantineRuleOutboundAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleOutboundAllowList:getNetworkSecurityRuleQuarantineRuleOutboundAllowList"
                        }
                    },
                    "quarantineRuleTargetGroupDefaultInternalPolicy": {
                        "type": "string"
                    },
                    "quarantineRuleTargetGroupFilterKindLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "quarantineRuleTargetGroupFilterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam:getNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam"
                        }
                    },
                    "quarantineRuleTargetGroupFilterType": {
                        "type": "string"
                    },
                    "quarantineRuleTargetGroupPeerSpecificationType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "adRuleAction",
                    "adRuleInboundAllowLists",
                    "adRuleOutboundAllowLists",
                    "adRuleTargetGroupDefaultInternalPolicy",
                    "adRuleTargetGroupFilterKindLists",
                    "adRuleTargetGroupFilterParams",
                    "adRuleTargetGroupFilterType",
                    "adRuleTargetGroupPeerSpecificationType",
                    "allowIpv6Traffic",
                    "apiVersion",
                    "appRuleAction",
                    "appRuleInboundAllowLists",
                    "appRuleOutboundAllowLists",
                    "appRuleTargetGroupDefaultInternalPolicy",
                    "appRuleTargetGroupFilterKindLists",
                    "appRuleTargetGroupFilterParams",
                    "appRuleTargetGroupFilterType",
                    "appRuleTargetGroupPeerSpecificationType",
                    "categories",
                    "description",
                    "isPolicyHitlogEnabled",
                    "isolationRuleAction",
                    "isolationRuleFirstEntityFilterKindLists",
                    "isolationRuleFirstEntityFilterParams",
                    "isolationRuleFirstEntityFilterType",
                    "isolationRuleSecondEntityFilterKindLists",
                    "isolationRuleSecondEntityFilterParams",
                    "isolationRuleSecondEntityFilterType",
                    "metadata",
                    "name",
                    "networkSecurityRuleId",
                    "ownerReference",
                    "projectReference",
                    "quarantineRuleAction",
                    "quarantineRuleInboundAllowLists",
                    "quarantineRuleOutboundAllowLists",
                    "quarantineRuleTargetGroupDefaultInternalPolicy",
                    "quarantineRuleTargetGroupFilterKindLists",
                    "quarantineRuleTargetGroupFilterParams",
                    "quarantineRuleTargetGroupFilterType",
                    "quarantineRuleTargetGroupPeerSpecificationType",
                    "id"
                ]
            }
        },
        "nutanix:index/getPbr:getPbr": {
            "description": "Provides a datasource to retrieve PBR with pbr_uuid .\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPbr.\n",
                "properties": {
                    "pbrUuid": {
                        "type": "string",
                        "description": "pbr UUID\n"
                    }
                },
                "type": "object",
                "required": [
                    "pbrUuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPbr.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "pbrUuid": {
                        "type": "string"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrSpec:getPbrSpec"
                        },
                        "description": "PBR input spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrStatus:getPbrStatus"
                        },
                        "description": "PBR output status\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "metadata",
                    "pbrUuid",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getPbrs:getPbrs": {
            "description": "Provides a datasource to retrieve all the pbrs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = pulumi.output(nutanix.getPbrs());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_pbrs()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Nutanix.GetPbrs.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetPbrs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Output.of(NutanixFunctions.getPbrs());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getPbrs\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPbrs.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrsMetadata:getPbrsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPbrs.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrsEntity:getPbrsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPbrsMetadata:getPbrsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getPermission:getPermission": {
            "description": "Describe a Nutanix Permission and its values (if it has them).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst byuuid = pulumi.output(nutanix.getPermission({\n    permissionId: \"26b81a55-2bca-48c6-9fab-4f82c6bb4284\",\n}));\nconst byname = pulumi.output(nutanix.getPermission({\n    permissionName: \"Access_Console_Virtual_Machine\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nbyuuid = nutanix.get_permission(permission_id=\"26b81a55-2bca-48c6-9fab-4f82c6bb4284\")\nbyname = nutanix.get_permission(permission_name=\"Access_Console_Virtual_Machine\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byuuid = Output.Create(Nutanix.GetPermission.InvokeAsync(new Nutanix.GetPermissionArgs\n        {\n            PermissionId = \"26b81a55-2bca-48c6-9fab-4f82c6bb4284\",\n        }));\n        var byname = Output.Create(Nutanix.GetPermission.InvokeAsync(new Nutanix.GetPermissionArgs\n        {\n            PermissionName = \"Access_Console_Virtual_Machine\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetPermission(ctx, \u0026GetPermissionArgs{\n\t\t\tPermissionId: pulumi.StringRef(\"26b81a55-2bca-48c6-9fab-4f82c6bb4284\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetPermission(ctx, \u0026GetPermissionArgs{\n\t\t\tPermissionName: pulumi.StringRef(\"Access_Console_Virtual_Machine\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byuuid = Output.of(NutanixFunctions.getPermission(GetPermissionArgs.builder()\n            .permissionId(\"26b81a55-2bca-48c6-9fab-4f82c6bb4284\")\n            .build()));\n\n        final var byname = Output.of(NutanixFunctions.getPermission(GetPermissionArgs.builder()\n            .permissionName(\"Access_Console_Virtual_Machine\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  byuuid:\n    Fn::Invoke:\n      Function: nutanix:getPermission\n      Arguments:\n        permissionId: 26b81a55-2bca-48c6-9fab-4f82c6bb4284\n  byname:\n    Fn::Invoke:\n      Function: nutanix:getPermission\n      Arguments:\n        permissionName: Access_Console_Virtual_Machine\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPermission.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionCategory:getPermissionCategory"
                        }
                    },
                    "permissionId": {
                        "type": "string"
                    },
                    "permissionName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPermission.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionCategory:getPermissionCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionField:getPermissionField"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required) The kind name (Default value: `project`).\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "the name.\n"
                    },
                    "operation": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "permissionId": {
                        "type": "string"
                    },
                    "permissionName": {
                        "type": "string"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "description",
                    "fields",
                    "kind",
                    "metadata",
                    "name",
                    "operation",
                    "ownerReference",
                    "projectReference",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getPermissions:getPermissions": {
            "description": "Provides a datasource to retrieve all the permissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst permissions = pulumi.output(nutanix.getPermission());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\npermissions = nutanix.get_permission()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var permissions = Output.Create(Nutanix.GetPermission.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetPermission(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var permissions = Output.of(NutanixFunctions.getPermission());\n\n    }\n}\n```\n```yaml\nvariables:\n  permissions:\n    Fn::Invoke:\n      Function: nutanix:getPermission\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPermissions.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionsMetadata:getPermissionsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPermissions.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionsEntity:getPermissionsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getPermissionsMetadata:getPermissionsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getProject:getProject": {
            "description": "Describe a Nutanix Project and its values (if it has them).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst subnet = new nutanix.Subnet(\"subnet\", {\n    clusterUuid: \"\u003cYOUR_CLUSTER_ID\u003e\",\n    description: \"Description of my unit test VLAN\",\n    vlanId: 31,\n    subnetType: \"VLAN\",\n    subnetIp: \"10.250.140.0\",\n    defaultGatewayIp: \"10.250.140.1\",\n    prefixLength: 24,\n    dhcpOptions: {\n        boot_file_name: \"bootfile\",\n        domain_name: \"nutanix\",\n        tftp_server_name: \"10.250.140.200\",\n    },\n    dhcpDomainNameServerLists: [\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcpDomainSearchLists: [\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ],\n});\nconst projectTest = new nutanix.Project(\"projectTest\", {\n    description: \"This is my project\",\n    categories: [{\n        name: \"Environment\",\n        value: \"Staging\",\n    }],\n    resourceDomain: {\n        resources: [{\n            limit: 4,\n            resourceType: \"STORAGE\",\n        }],\n    },\n    defaultSubnetReference: {\n        uuid: subnet.metadata.uuid,\n    },\n    apiVersion: \"3.1\",\n});\nconst test = nutanix.getProjectOutput({\n    projectId: projectTest.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsubnet = nutanix.Subnet(\"subnet\",\n    cluster_uuid=\"\u003cYOUR_CLUSTER_ID\u003e\",\n    description=\"Description of my unit test VLAN\",\n    vlan_id=31,\n    subnet_type=\"VLAN\",\n    subnet_ip=\"10.250.140.0\",\n    default_gateway_ip=\"10.250.140.1\",\n    prefix_length=24,\n    dhcp_options={\n        \"boot_file_name\": \"bootfile\",\n        \"domain_name\": \"nutanix\",\n        \"tftp_server_name\": \"10.250.140.200\",\n    },\n    dhcp_domain_name_server_lists=[\n        \"8.8.8.8\",\n        \"4.2.2.2\",\n    ],\n    dhcp_domain_search_lists=[\n        \"terraform.nutanix.com\",\n        \"terraform.unit.test.com\",\n    ])\nproject_test = nutanix.Project(\"projectTest\",\n    description=\"This is my project\",\n    categories=[nutanix.ProjectCategoryArgs(\n        name=\"Environment\",\n        value=\"Staging\",\n    )],\n    resource_domain=nutanix.ProjectResourceDomainArgs(\n        resources=[nutanix.ProjectResourceDomainResourceArgs(\n            limit=4,\n            resource_type=\"STORAGE\",\n        )],\n    ),\n    default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(\n        uuid=subnet.metadata[\"uuid\"],\n    ),\n    api_version=\"3.1\")\ntest = nutanix.get_project_output(project_id=project_test.id)\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var subnet = new Nutanix.Subnet(\"subnet\", new Nutanix.SubnetArgs\n        {\n            ClusterUuid = \"\u003cYOUR_CLUSTER_ID\u003e\",\n            Description = \"Description of my unit test VLAN\",\n            VlanId = 31,\n            SubnetType = \"VLAN\",\n            SubnetIp = \"10.250.140.0\",\n            DefaultGatewayIp = \"10.250.140.1\",\n            PrefixLength = 24,\n            DhcpOptions = \n            {\n                { \"boot_file_name\", \"bootfile\" },\n                { \"domain_name\", \"nutanix\" },\n                { \"tftp_server_name\", \"10.250.140.200\" },\n            },\n            DhcpDomainNameServerLists = \n            {\n                \"8.8.8.8\",\n                \"4.2.2.2\",\n            },\n            DhcpDomainSearchLists = \n            {\n                \"terraform.nutanix.com\",\n                \"terraform.unit.test.com\",\n            },\n        });\n        var projectTest = new Nutanix.Project(\"projectTest\", new Nutanix.ProjectArgs\n        {\n            Description = \"This is my project\",\n            Categories = \n            {\n                new Nutanix.Inputs.ProjectCategoryArgs\n                {\n                    Name = \"Environment\",\n                    Value = \"Staging\",\n                },\n            },\n            ResourceDomain = new Nutanix.Inputs.ProjectResourceDomainArgs\n            {\n                Resources = \n                {\n                    new Nutanix.Inputs.ProjectResourceDomainResourceArgs\n                    {\n                        Limit = 4,\n                        ResourceType = \"STORAGE\",\n                    },\n                },\n            },\n            DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs\n            {\n                Uuid = subnet.Metadata.Apply(metadata =\u003e metadata.Uuid),\n            },\n            ApiVersion = \"3.1\",\n        });\n        var test = Nutanix.GetProject.Invoke(new Nutanix.GetProjectInvokeArgs\n        {\n            ProjectId = projectTest.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsubnet, err := nutanix.NewSubnet(ctx, \"subnet\", \u0026nutanix.SubnetArgs{\n\t\t\tClusterUuid:      pulumi.String(\"\u003cYOUR_CLUSTER_ID\u003e\"),\n\t\t\tDescription:      pulumi.String(\"Description of my unit test VLAN\"),\n\t\t\tVlanId:           pulumi.Int(31),\n\t\t\tSubnetType:       pulumi.String(\"VLAN\"),\n\t\t\tSubnetIp:         pulumi.String(\"10.250.140.0\"),\n\t\t\tDefaultGatewayIp: pulumi.String(\"10.250.140.1\"),\n\t\t\tPrefixLength:     pulumi.Int(24),\n\t\t\tDhcpOptions: pulumi.StringMap{\n\t\t\t\t\"boot_file_name\":   pulumi.String(\"bootfile\"),\n\t\t\t\t\"domain_name\":      pulumi.String(\"nutanix\"),\n\t\t\t\t\"tftp_server_name\": pulumi.String(\"10.250.140.200\"),\n\t\t\t},\n\t\t\tDhcpDomainNameServerLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"4.2.2.2\"),\n\t\t\t},\n\t\t\tDhcpDomainSearchLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform.nutanix.com\"),\n\t\t\t\tpulumi.String(\"terraform.unit.test.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprojectTest, err := nutanix.NewProject(ctx, \"projectTest\", \u0026nutanix.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"This is my project\"),\n\t\t\tCategories: ProjectCategoryArray{\n\t\t\t\t\u0026ProjectCategoryArgs{\n\t\t\t\t\tName:  pulumi.String(\"Environment\"),\n\t\t\t\t\tValue: pulumi.String(\"Staging\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResourceDomain: \u0026ProjectResourceDomainArgs{\n\t\t\t\tResources: ProjectResourceDomainResourceArray{\n\t\t\t\t\t\u0026ProjectResourceDomainResourceArgs{\n\t\t\t\t\t\tLimit:        pulumi.Int(4),\n\t\t\t\t\t\tResourceType: pulumi.String(\"STORAGE\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDefaultSubnetReference: \u0026ProjectDefaultSubnetReferenceArgs{\n\t\t\t\tUuid: subnet.Metadata.ApplyT(func(metadata map[string]string) (string, error) {\n\t\t\t\t\treturn metadata.Uuid, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tApiVersion: pulumi.String(\"3.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nutanix.LookupProjectOutput(ctx, GetProjectOutputArgs{\n\t\t\tProjectId: projectTest.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var subnet = new Subnet(\"subnet\", SubnetArgs.builder()        \n            .clusterUuid(\"\u003cYOUR_CLUSTER_ID\u003e\")\n            .description(\"Description of my unit test VLAN\")\n            .vlanId(31)\n            .subnetType(\"VLAN\")\n            .subnetIp(\"10.250.140.0\")\n            .defaultGatewayIp(\"10.250.140.1\")\n            .prefixLength(24)\n            .dhcpOptions(Map.ofEntries(\n                Map.entry(\"boot_file_name\", \"bootfile\"),\n                Map.entry(\"domain_name\", \"nutanix\"),\n                Map.entry(\"tftp_server_name\", \"10.250.140.200\")\n            ))\n            .dhcpDomainNameServerLists(            \n                \"8.8.8.8\",\n                \"4.2.2.2\")\n            .dhcpDomainSearchLists(            \n                \"terraform.nutanix.com\",\n                \"terraform.unit.test.com\")\n            .build());\n\n        var projectTest = new Project(\"projectTest\", ProjectArgs.builder()        \n            .description(\"This is my project\")\n            .categories(ProjectCategoryArgs.builder()\n                .name(\"Environment\")\n                .value(\"Staging\")\n                .build())\n            .resourceDomain(ProjectResourceDomainArgs.builder()\n                .resources(ProjectResourceDomainResourceArgs.builder()\n                    .limit(4)\n                    .resourceType(\"STORAGE\")\n                    .build())\n                .build())\n            .defaultSubnetReference(ProjectDefaultSubnetReferenceArgs.builder()\n                .uuid(subnet.metadata().apply(metadata -\u003e metadata.uuid()))\n                .build())\n            .apiVersion(\"3.1\")\n            .build());\n\n        final var test = NutanixFunctions.getProject(GetProjectArgs.builder()\n            .projectId(projectTest.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  subnet:\n    type: nutanix:Subnet\n    properties:\n      clusterUuid: \u003cYOUR_CLUSTER_ID\u003e\n      description: Description of my unit test VLAN\n      vlanId: 31\n      subnetType: VLAN\n      subnetIp: 10.250.140.0\n      defaultGatewayIp: 10.250.140.1\n      prefixLength: 24\n      dhcpOptions:\n        boot_file_name: bootfile\n        domain_name: nutanix\n        tftp_server_name: 10.250.140.200\n      dhcpDomainNameServerLists:\n        - 8.8.8.8\n        - 4.2.2.2\n      dhcpDomainSearchLists:\n        - terraform.nutanix.com\n        - terraform.unit.test.com\n  projectTest:\n    type: nutanix:Project\n    properties:\n      description: This is my project\n      categories:\n        - name: Environment\n          value: Staging\n      resourceDomain:\n        resources:\n          - limit: 4\n            resourceType: STORAGE\n      defaultSubnetReference:\n        uuid: ${subnet.metadata.uuid}\n      apiVersion: 3.1\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getProject\n      Arguments:\n        projectId: ${projectTest.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectCategory:getProjectCategory"
                        }
                    },
                    "externalUserGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectExternalUserGroupReferenceList:getProjectExternalUserGroupReferenceList"
                        },
                        "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - The UUID of a user_group\n* `external_user_group_reference_list.#.name` - The name of a user_group\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "subnetReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectSubnetReferenceList:getProjectSubnetReferenceList"
                        },
                        "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - The UUID of a subnet\n* `subnet_reference_list.#.name` - The name of a subnet.\n"
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectUserReferenceList:getProjectUserReferenceList"
                        },
                        "description": "List of users in the project.\n* `user_reference_list.#.kind` - The kind name. Default value is `user`\n* `user_reference_list.#.uuid` - The UUID of a user\n* `user_reference_list.#.name` - The name of a user.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "accountReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectAccountReferenceList:getProjectAccountReferenceList"
                        },
                        "description": "List of accounts associated with the project.\n* `account_reference_list.#.kind` - The kind name. Default value is `account`\n* `account_reference_list.#.uuid` - The UUID of an account.\n* `account_reference_list.#.name` - The name of an account.\n"
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectCategory:getProjectCategory"
                        }
                    },
                    "defaultSubnetReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Reference to a subnet.\n* `default_subnet_reference.kind` - The kind name. Default value is `subnet`\n* `default_subnet_reference.uuid` - The UUID of a subnet.\n* `default_subnet_reference.name` - The name of a subnet.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "environmentReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectEnvironmentReferenceList:getProjectEnvironmentReferenceList"
                        },
                        "description": "List of environments associated with the project.\n* `environment_reference_list.#.kind` - The kind name. Default value is `environment`\n* `environment_reference_list.#.uuid` - The UUID of an environment.\n* `environment_reference_list.#.name` - The name of an environment.\n"
                    },
                    "externalNetworkLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectExternalNetworkList:getProjectExternalNetworkList"
                        },
                        "description": "List of external networks associated with the project.\n* `external_network_list.#.uuid` - The UUID of a network.\n* `external_network_list.#.name` - The name of a network.\n"
                    },
                    "externalUserGroupReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectExternalUserGroupReferenceList:getProjectExternalUserGroupReferenceList"
                        },
                        "description": "List of directory service user groups. These groups are not managed by Nutanix.\n* `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`\n* `external_user_group_reference_list.#.uuid` - The UUID of a user_group\n* `external_user_group_reference_list.#.name` - The name of a user_group\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "the name.\n"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "resourceDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectResourceDomain:getProjectResourceDomain"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "subnetReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectSubnetReferenceList:getProjectSubnetReferenceList"
                        },
                        "description": "List of subnets for the project.\n* `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`\n* `subnet_reference_list.#.uuid` - The UUID of a subnet\n* `subnet_reference_list.#.name` - The name of a subnet.\n"
                    },
                    "userReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectUserReferenceList:getProjectUserReferenceList"
                        },
                        "description": "List of users in the project.\n* `user_reference_list.#.kind` - The kind name. Default value is `user`\n* `user_reference_list.#.uuid` - The UUID of a user\n* `user_reference_list.#.name` - The name of a user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountReferenceLists",
                    "apiVersion",
                    "categories",
                    "defaultSubnetReference",
                    "description",
                    "environmentReferenceLists",
                    "externalNetworkLists",
                    "externalUserGroupReferenceLists",
                    "isDefault",
                    "metadata",
                    "name",
                    "ownerReference",
                    "projectReference",
                    "resourceDomains",
                    "state",
                    "subnetReferenceLists",
                    "userReferenceLists",
                    "id"
                ]
            }
        },
        "nutanix:index/getProjects:getProjects": {
            "description": "Describes Projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst projects = pulumi.output(nutanix.getProjects());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprojects = nutanix.get_projects()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var projects = Output.Create(Nutanix.GetProjects.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetProjects(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projects = Output.of(NutanixFunctions.getProjects());\n\n    }\n}\n```\n```yaml\nvariables:\n  projects:\n    Fn::Invoke:\n      Function: nutanix:getProjects\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProjectsEntity:getProjectsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getProtectionRule:getProtectionRule": {
            "description": "Describe a Nutanix Protection Rule and its values (if it has them).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pierskarsenbarg/nutanix\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst protectionRuleTest = new nutanix.ProtectionRule(\"protectionRuleTest\", {\n    description: \"test\",\n    orderedAvailabilityZoneLists: [{\n        availabilityZoneUrl: \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    }],\n    availabilityZoneConnectivityLists: [{\n        snapshotScheduleLists: [{\n            recoveryPointObjectiveSecs: 3600,\n            snapshotType: \"CRASH_CONSISTENT\",\n            localSnapshotRetentionPolicy: {\n                numSnapshots: 1,\n            },\n        }],\n    }],\n    categoryFilter: {\n        params: [{\n            name: \"Environment\",\n            values: [\"Dev\"],\n        }],\n    },\n});\nconst test = nutanix.getProtectionRuleOutput({\n    protectionRuleId: protectionRuleTest.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprotection_rule_test = nutanix.ProtectionRule(\"protectionRuleTest\",\n    description=\"test\",\n    ordered_availability_zone_lists=[nutanix.ProtectionRuleOrderedAvailabilityZoneListArgs(\n        availability_zone_url=\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n    )],\n    availability_zone_connectivity_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListArgs(\n        snapshot_schedule_lists=[nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs(\n            recovery_point_objective_secs=3600,\n            snapshot_type=\"CRASH_CONSISTENT\",\n            local_snapshot_retention_policy=nutanix.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs(\n                num_snapshots=1,\n            ),\n        )],\n    )],\n    category_filter=nutanix.ProtectionRuleCategoryFilterArgs(\n        params=[nutanix.ProtectionRuleCategoryFilterParamArgs(\n            name=\"Environment\",\n            values=[\"Dev\"],\n        )],\n    ))\ntest = nutanix.get_protection_rule_output(protection_rule_id=protection_rule_test.id)\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var protectionRuleTest = new Nutanix.ProtectionRule(\"protectionRuleTest\", new Nutanix.ProtectionRuleArgs\n        {\n            Description = \"test\",\n            OrderedAvailabilityZoneLists = \n            {\n                new Nutanix.Inputs.ProtectionRuleOrderedAvailabilityZoneListArgs\n                {\n                    AvailabilityZoneUrl = \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n                },\n            },\n            AvailabilityZoneConnectivityLists = \n            {\n                new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs\n                {\n                    SnapshotScheduleLists = \n                    {\n                        new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs\n                        {\n                            RecoveryPointObjectiveSecs = 3600,\n                            SnapshotType = \"CRASH_CONSISTENT\",\n                            LocalSnapshotRetentionPolicy = new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs\n                            {\n                                NumSnapshots = 1,\n                            },\n                        },\n                    },\n                },\n            },\n            CategoryFilter = new Nutanix.Inputs.ProtectionRuleCategoryFilterArgs\n            {\n                Params = \n                {\n                    new Nutanix.Inputs.ProtectionRuleCategoryFilterParamArgs\n                    {\n                        Name = \"Environment\",\n                        Values = \n                        {\n                            \"Dev\",\n                        },\n                    },\n                },\n            },\n        });\n        var test = Nutanix.GetProtectionRule.Invoke(new Nutanix.GetProtectionRuleInvokeArgs\n        {\n            ProtectionRuleId = protectionRuleTest.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprotectionRuleTest, err := nutanix.NewProtectionRule(ctx, \"protectionRuleTest\", \u0026nutanix.ProtectionRuleArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tOrderedAvailabilityZoneLists: ProtectionRuleOrderedAvailabilityZoneListArray{\n\t\t\t\t\u0026ProtectionRuleOrderedAvailabilityZoneListArgs{\n\t\t\t\t\tAvailabilityZoneUrl: pulumi.String(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAvailabilityZoneConnectivityLists: ProtectionRuleAvailabilityZoneConnectivityListArray{\n\t\t\t\t\u0026ProtectionRuleAvailabilityZoneConnectivityListArgs{\n\t\t\t\t\tSnapshotScheduleLists: ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArray{\n\t\t\t\t\t\t\u0026ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs{\n\t\t\t\t\t\t\tRecoveryPointObjectiveSecs: pulumi.Int(3600),\n\t\t\t\t\t\t\tSnapshotType:               pulumi.String(\"CRASH_CONSISTENT\"),\n\t\t\t\t\t\t\tLocalSnapshotRetentionPolicy: \u0026ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs{\n\t\t\t\t\t\t\t\tNumSnapshots: pulumi.Int(1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCategoryFilter: \u0026ProtectionRuleCategoryFilterArgs{\n\t\t\t\tParams: ProtectionRuleCategoryFilterParamArray{\n\t\t\t\t\t\u0026ProtectionRuleCategoryFilterParamArgs{\n\t\t\t\t\t\tName: pulumi.String(\"Environment\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"Dev\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nutanix.LookupProtectionRuleOutput(ctx, GetProtectionRuleOutputArgs{\n\t\t\tProtectionRuleId: protectionRuleTest.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var protectionRuleTest = new ProtectionRule(\"protectionRuleTest\", ProtectionRuleArgs.builder()        \n            .description(\"test\")\n            .orderedAvailabilityZoneLists(ProtectionRuleOrderedAvailabilityZoneListArgs.builder()\n                .availabilityZoneUrl(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .build())\n            .availabilityZoneConnectivityLists(ProtectionRuleAvailabilityZoneConnectivityListArgs.builder()\n                .snapshotScheduleLists(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs.builder()\n                    .recoveryPointObjectiveSecs(3600)\n                    .snapshotType(\"CRASH_CONSISTENT\")\n                    .localSnapshotRetentionPolicy(ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs.builder()\n                        .numSnapshots(1)\n                        .build())\n                    .build())\n                .build())\n            .categoryFilter(ProtectionRuleCategoryFilterArgs.builder()\n                .params(ProtectionRuleCategoryFilterParamArgs.builder()\n                    .name(\"Environment\")\n                    .values(\"Dev\")\n                    .build())\n                .build())\n            .build());\n\n        final var test = NutanixFunctions.getProtectionRule(GetProtectionRuleArgs.builder()\n            .protectionRuleId(protectionRuleTest.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  protectionRuleTest:\n    type: nutanix:ProtectionRule\n    properties:\n      description: test\n      orderedAvailabilityZoneLists:\n        - availabilityZoneUrl: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n      availabilityZoneConnectivityLists:\n        - snapshotScheduleLists:\n            - recoveryPointObjectiveSecs: 3600\n              snapshotType: CRASH_CONSISTENT\n              localSnapshotRetentionPolicy:\n                numSnapshots: 1\n      categoryFilter:\n        params:\n          - name: Environment\n            values:\n              - Dev\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getProtectionRule\n      Arguments:\n        protectionRuleId: ${protectionRuleTest.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProtectionRule.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleCategory:getProtectionRuleCategory"
                        }
                    },
                    "protectionRuleId": {
                        "type": "string"
                    },
                    "protectionRuleName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProtectionRule.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "availabilityZoneConnectivityLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleAvailabilityZoneConnectivityList:getProtectionRuleAvailabilityZoneConnectivityList"
                        },
                        "description": "(Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.\n* `availability_zone_connectivity_list.destination_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.source_availability_zone_index` - (Optional/Computed) Index of the availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list` - (Optional/Computed) Snapshot schedules for the pair of the availability zones.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) \"A recovery point objective (RPO) is the maximum acceptable amount of data loss.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.\n* `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleCategory:getProtectionRuleCategory"
                        }
                    },
                    "categoryFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleCategoryFilter:getProtectionRuleCategoryFilter"
                        },
                        "description": "(Optional/Computed)\n* `category_filter.0.type` - (Optional/Computed) The type of the filter being used.\n* `category_filter.0.kind_list` - (Optional/Computed) List of kinds associated with this filter.\n* `category_filter.0.params` - (Optional/Computed) A list of category key and list of values.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "(Optional) the name.\n"
                    },
                    "orderedAvailabilityZoneLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleOrderedAvailabilityZoneList:getProtectionRuleOrderedAvailabilityZoneList"
                        },
                        "description": "(Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.\n* `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.\n* `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.\n"
                    },
                    "ownerReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleOwnerReference:getProtectionRuleOwnerReference"
                        }
                    },
                    "projectReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRuleProjectReference:getProtectionRuleProjectReference"
                        }
                    },
                    "protectionRuleId": {
                        "type": "string"
                    },
                    "protectionRuleName": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availabilityZoneConnectivityLists",
                    "categories",
                    "categoryFilters",
                    "description",
                    "metadata",
                    "name",
                    "orderedAvailabilityZoneLists",
                    "ownerReferences",
                    "projectReferences",
                    "startTime",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getProtectionRules:getProtectionRules": {
            "description": "Describes Protection Rules\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst protectionRules = pulumi.output(nutanix.getProtectionRules());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nprotection_rules = nutanix.get_protection_rules()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var protectionRules = Output.Create(Nutanix.GetProtectionRules.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetProtectionRules(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var protectionRules = Output.of(NutanixFunctions.getProtectionRules());\n\n    }\n}\n```\n```yaml\nvariables:\n  protectionRules:\n    Fn::Invoke:\n      Function: nutanix:getProtectionRules\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getProtectionRules.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getProtectionRulesEntity:getProtectionRulesEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getRecoveryPlan:getRecoveryPlan": {
            "description": "Describe a Nutanix Recovery Plan and its values (if it has them).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst recoveryPlanTest = new nutanix.RecoveryPlan(\"recovery_plan_test\", {\n    description: \"%s\",\n    parameters: {},\n    stageLists: [{\n        delayTimeSecs: 0,\n        stageUuid: \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n        stageWork: {\n            recoverEntities: {\n                entityInfoLists: [{\n                    categories: [{\n                        name: \"Environment\",\n                        value: \"Dev\",\n                    }],\n                }],\n            },\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nrecovery_plan_test = nutanix.RecoveryPlan(\"recoveryPlanTest\",\n    description=\"%s\",\n    parameters=nutanix.RecoveryPlanParametersArgs(),\n    stage_lists=[nutanix.RecoveryPlanStageListArgs(\n        delay_time_secs=0,\n        stage_uuid=\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n        stage_work=nutanix.RecoveryPlanStageListStageWorkArgs(\n            recover_entities=nutanix.RecoveryPlanStageListStageWorkRecoverEntitiesArgs(\n                entity_info_list=[{\n                    \"categories\": [{\n                        \"name\": \"Environment\",\n                        \"value\": \"Dev\",\n                    }],\n                }],\n            ),\n        ),\n    )])\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var recoveryPlanTest = new Nutanix.RecoveryPlan(\"recoveryPlanTest\", new Nutanix.RecoveryPlanArgs\n        {\n            Description = \"%s\",\n            Parameters = ,\n            StageLists = \n            {\n                new Nutanix.Inputs.RecoveryPlanStageListArgs\n                {\n                    DelayTimeSecs = 0,\n                    StageUuid = \"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\",\n                    StageWork = new Nutanix.Inputs.RecoveryPlanStageListStageWorkArgs\n                    {\n                        RecoverEntities = new Nutanix.Inputs.RecoveryPlanStageListStageWorkRecoverEntitiesArgs\n                        {\n                            EntityInfoList = \n                            {\n                                \n                                {\n                                    { \"categories\", \n                                    {\n                                        \n                                        {\n                                            { \"name\", \"Environment\" },\n                                            { \"value\", \"Dev\" },\n                                        },\n                                    } },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewRecoveryPlan(ctx, \"recoveryPlanTest\", \u0026nutanix.RecoveryPlanArgs{\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"%v%v\", \"%\", \"s\")),\n\t\t\tParameters:  nil,\n\t\t\tStageLists: RecoveryPlanStageListArray{\n\t\t\t\t\u0026RecoveryPlanStageListArgs{\n\t\t\t\t\tDelayTimeSecs: pulumi.Int(0),\n\t\t\t\t\tStageUuid:     pulumi.String(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\"),\n\t\t\t\t\tStageWork: \u0026RecoveryPlanStageListStageWorkArgs{\n\t\t\t\t\t\tRecoverEntities: \u0026RecoveryPlanStageListStageWorkRecoverEntitiesArgs{\n\t\t\t\t\t\t\tEntityInfoList: []map[string]interface{}{\n\t\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"categories\": []map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"name\":  \"Environment\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Dev\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var recoveryPlanTest = new RecoveryPlan(\"recoveryPlanTest\", RecoveryPlanArgs.builder()        \n            .description(\"%s\")\n            .parameters()\n            .stageLists(RecoveryPlanStageListArgs.builder()\n                .delayTimeSecs(0)\n                .stageUuid(\"ab788130-0820-4d07-a1b5-b0ba4d3a42asd\")\n                .stageWork(RecoveryPlanStageListStageWorkArgs.builder()\n                    .recoverEntities(RecoveryPlanStageListStageWorkRecoverEntitiesArgs.builder()\n                        .entityInfoList(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  recoveryPlanTest:\n    type: nutanix:RecoveryPlan\n    properties:\n      description: '%s'\n      parameters: {}\n      stageLists:\n        - delayTimeSecs: 0\n          stageUuid: ab788130-0820-4d07-a1b5-b0ba4d3a42asd\n          stageWork:\n            recoverEntities:\n              entityInfoList:\n                - categories:\n                    - name: Environment\n                      value: Dev\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRecoveryPlan.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanCategory:getRecoveryPlanCategory"
                        }
                    },
                    "recoveryPlanId": {
                        "type": "string"
                    },
                    "recoveryPlanName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRecoveryPlan.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanCategory:getRecoveryPlanCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "(Optional) the name.\n"
                    },
                    "ownerReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanOwnerReference:getRecoveryPlanOwnerReference"
                        }
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanParameter:getRecoveryPlanParameter"
                        },
                        "description": "(Required) Parameters for the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list` - (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n* `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.\n* `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.\n* `parameters.0.network_mapping_list` - (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.\n* `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.\n"
                    },
                    "projectReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanProjectReference:getRecoveryPlanProjectReference"
                        }
                    },
                    "recoveryPlanId": {
                        "type": "string"
                    },
                    "recoveryPlanName": {
                        "type": "string"
                    },
                    "stageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlanStageList:getRecoveryPlanStageList"
                        },
                        "description": "(Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.\n* `stage_list.stage_uuid` - (Optional/Computed) UUID of stage.\n* `stage_list.delay_time_secs` - (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.\n* `stage_list.stage_work` - (Required) A stage specifies the work to be performed when the Recovery Plan is executed.\n* `stage_list.stage_work.0.recover_entities` - (Optional/Computed) Information about entities to be recovered.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list` - (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.\n* `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.\n"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "description",
                    "metadata",
                    "name",
                    "ownerReferences",
                    "parameters",
                    "projectReferences",
                    "stageLists",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getRecoveryPlans:getRecoveryPlans": {
            "description": "Describes Recovery Plans\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst recoveryPlans = pulumi.output(nutanix.getRecoveryPlans());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nrecovery_plans = nutanix.get_recovery_plans()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var recoveryPlans = Output.Create(Nutanix.GetRecoveryPlans.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetRecoveryPlans(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var recoveryPlans = Output.of(NutanixFunctions.getRecoveryPlans());\n\n    }\n}\n```\n```yaml\nvariables:\n  recoveryPlans:\n    Fn::Invoke:\n      Function: nutanix:getRecoveryPlans\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRecoveryPlans.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRecoveryPlansEntity:getRecoveryPlansEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "id"
                ]
            }
        },
        "nutanix:index/getRole:getRole": {
            "description": "Describes a Role.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRoleCategory:getRoleCategory"
                        }
                    },
                    "roleId": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the role.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRoleCategory:getRoleCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "permissionReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolePermissionReferenceList:getRolePermissionReferenceList"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "roleId": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "categories",
                    "description",
                    "metadata",
                    "name",
                    "ownerReference",
                    "permissionReferenceLists",
                    "projectReference",
                    "state",
                    "id"
                ]
            }
        },
        "nutanix:index/getRoles:getRoles": {
            "description": "Describes a list of roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = pulumi.output(nutanix.getRoles());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_roles()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Nutanix.GetRoles.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetRoles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Output.of(NutanixFunctions.getRoles());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getRoles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoles.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolesMetadata:getRolesMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the role.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolesEntity:getRolesEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getRolesMetadata:getRolesMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getServiceGroup:getServiceGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceGroup.\n",
                "properties": {
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isSystemDefined": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "serviceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupServiceList:getServiceGroupServiceList"
                        }
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "isSystemDefined",
                    "name",
                    "serviceLists",
                    "uuid",
                    "id"
                ]
            }
        },
        "nutanix:index/getServiceGroups:getServiceGroups": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceGroups.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupsMetadata:getServiceGroupsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceGroups.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupsEntity:getServiceGroupsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getServiceGroupsMetadata:getServiceGroupsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getStaticRoutes:getStaticRoutes": {
            "description": "Provides a datasource to retrieve static routes within VPCs given vpc_uuid.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStaticRoutes.\n",
                "properties": {
                    "vpcName": {
                        "type": "string"
                    },
                    "vpcReferenceUuid": {
                        "type": "string",
                        "description": "vpc UUID\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStaticRoutes.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "API version\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The vpc_route_table kind metadata\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getStaticRoutesSpec:getStaticRoutesSpec"
                        },
                        "description": "An intentful representation of a vpc_route_table spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getStaticRoutesStatus:getStaticRoutesStatus"
                        },
                        "description": "An intentful representation of a vpc_route_table status\n"
                    },
                    "vpcName": {
                        "type": "string"
                    },
                    "vpcReferenceUuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "metadata",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getSubnet:getSubnet": {
            "description": "Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSubnet.\n",
                "properties": {
                    "additionalFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetAdditionalFilter:getSubnetAdditionalFilter"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetCategory:getSubnetCategory"
                        }
                    },
                    "subnetId": {
                        "type": "string"
                    },
                    "subnetName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSubnet.\n",
                "properties": {
                    "additionalFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetAdditionalFilter:getSubnetAdditionalFilter"
                        }
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetCategory:getSubnetCategory"
                        }
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "defaultGatewayIp": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dhcpDomainNameServerLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dhcpDomainSearchLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dhcpOptions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dhcpServerAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dhcpServerAddressPort": {
                        "type": "integer"
                    },
                    "enableNat": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipConfigPoolListRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isExternal": {
                        "type": "boolean"
                    },
                    "messageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetMessageList:getSubnetMessageList"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkFunctionChainReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "prefixLength": {
                        "type": "integer"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "subnetId": {
                        "type": "string"
                    },
                    "subnetIp": {
                        "type": "string"
                    },
                    "subnetName": {
                        "type": "string"
                    },
                    "subnetType": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "integer"
                    },
                    "vpcReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "vswitchName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availabilityZoneReference",
                    "categories",
                    "clusterName",
                    "clusterUuid",
                    "defaultGatewayIp",
                    "description",
                    "dhcpDomainNameServerLists",
                    "dhcpDomainSearchLists",
                    "dhcpOptions",
                    "dhcpServerAddress",
                    "dhcpServerAddressPort",
                    "enableNat",
                    "ipConfigPoolListRanges",
                    "isExternal",
                    "messageLists",
                    "metadata",
                    "name",
                    "networkFunctionChainReference",
                    "ownerReference",
                    "prefixLength",
                    "projectReference",
                    "state",
                    "subnetIp",
                    "subnetType",
                    "vlanId",
                    "vpcReference",
                    "vswitchName",
                    "id"
                ]
            }
        },
        "nutanix:index/getSubnets:getSubnets": {
            "description": "Describes a list of subnets\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst subnets = pulumi.output(nutanix.getSubnets());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nsubnets = nutanix.get_subnets()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var subnets = Output.Create(Nutanix.GetSubnets.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetSubnets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var subnets = Output.of(NutanixFunctions.getSubnets());\n\n    }\n}\n```\n```yaml\nvariables:\n  subnets:\n    Fn::Invoke:\n      Function: nutanix:getSubnets\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSubnets.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetsMetadata:getSubnetsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSubnets.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetsEntity:getSubnetsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getSubnetsMetadata:getSubnetsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getUser:getUser": {
            "description": "Provides a datasource to retrieve a user based on the input parameters.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserCategory:getUserCategory"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "userId": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "accessControlPolicyReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserAccessControlPolicyReferenceList:getUserAccessControlPolicyReferenceList"
                        }
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the entity.\n* `name`: - The name of the user.\n* `user_type`: - The name of the user.\n* `display_name`: - The display name of the user (common name) provided by the directory service.\n* `project_reference_list`: - A list of projects the user is part of. See #reference for more details.\n* `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.\n* `directory_service_user`: - (Optional) The directory service user configuration. See below for more information.\n* `identity_provider_user`: - (Optional) (Optional) The identity provider user configuration. See below for more information.\n* `categories`: - (Optional) Categories for the Access Control Policy.\n* `project_reference`: - (Optional) The reference to a project.\n* `owner_reference`: - (Optional) The reference to a user.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserCategory:getUserCategory"
                        }
                    },
                    "directoryServiceUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserDirectoryServiceUser:getUserDirectoryServiceUser"
                        }
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identityProviderUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserIdentityProviderUser:getUserIdentityProviderUser"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserProjectReferenceList:getUserProjectReferenceList"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "userType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessControlPolicyReferenceLists",
                    "apiVersion",
                    "categories",
                    "directoryServiceUsers",
                    "displayName",
                    "identityProviderUsers",
                    "metadata",
                    "ownerReference",
                    "projectReferenceLists",
                    "state",
                    "userType",
                    "id"
                ]
            }
        },
        "nutanix:index/getUserGroup:getUserGroup": {
            "description": "Provides a datasource to retrieve a user group based on the input parameters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\n//Retrieve by UUID\nconst usergroup = pulumi.output(nutanix.getUserGroup({\n    userGroupId: \"dd30a856-8e72-4158-b716-98455ceda220\",\n}));\n//Retrieve by Name\nconst usergroupbyname = pulumi.output(nutanix.getUserGroup({\n    userGroupName: \"example-group-1\",\n}));\n//Retrieve by Distinguished Name\nconst test = pulumi.output(nutanix.getUserGroup({\n    userGroupDistinguishedName: \"cn=example-group-1,cn=users,dc=ntnxlab,dc=local\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nusergroup = nutanix.get_user_group(user_group_id=\"dd30a856-8e72-4158-b716-98455ceda220\")\nusergroupbyname = nutanix.get_user_group(user_group_name=\"example-group-1\")\ntest = nutanix.get_user_group(user_group_distinguished_name=\"cn=example-group-1,cn=users,dc=ntnxlab,dc=local\")\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var usergroup = Output.Create(Nutanix.GetUserGroup.InvokeAsync(new Nutanix.GetUserGroupArgs\n        {\n            UserGroupId = \"dd30a856-8e72-4158-b716-98455ceda220\",\n        }));\n        var usergroupbyname = Output.Create(Nutanix.GetUserGroup.InvokeAsync(new Nutanix.GetUserGroupArgs\n        {\n            UserGroupName = \"example-group-1\",\n        }));\n        var test = Output.Create(Nutanix.GetUserGroup.InvokeAsync(new Nutanix.GetUserGroupArgs\n        {\n            UserGroupDistinguishedName = \"cn=example-group-1,cn=users,dc=ntnxlab,dc=local\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetUserGroup(ctx, \u0026GetUserGroupArgs{\n\t\t\tUserGroupId: pulumi.StringRef(\"dd30a856-8e72-4158-b716-98455ceda220\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetUserGroup(ctx, \u0026GetUserGroupArgs{\n\t\t\tUserGroupName: pulumi.StringRef(\"example-group-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.GetUserGroup(ctx, \u0026GetUserGroupArgs{\n\t\t\tUserGroupDistinguishedName: pulumi.StringRef(\"cn=example-group-1,cn=users,dc=ntnxlab,dc=local\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var usergroup = Output.of(NutanixFunctions.getUserGroup(GetUserGroupArgs.builder()\n            .userGroupId(\"dd30a856-8e72-4158-b716-98455ceda220\")\n            .build()));\n\n        final var usergroupbyname = Output.of(NutanixFunctions.getUserGroup(GetUserGroupArgs.builder()\n            .userGroupName(\"example-group-1\")\n            .build()));\n\n        final var test = Output.of(NutanixFunctions.getUserGroup(GetUserGroupArgs.builder()\n            .userGroupDistinguishedName(\"cn=example-group-1,cn=users,dc=ntnxlab,dc=local\")\n            .build()));\n\n    }\n}\n```\n```yaml\nvariables:\n  usergroup:\n    Fn::Invoke:\n      Function: nutanix:getUserGroup\n      Arguments:\n        userGroupId: dd30a856-8e72-4158-b716-98455ceda220\n  usergroupbyname:\n    Fn::Invoke:\n      Function: nutanix:getUserGroup\n      Arguments:\n        userGroupName: example-group-1\n  test:\n    Fn::Invoke:\n      Function: nutanix:getUserGroup\n      Arguments:\n        userGroupDistinguishedName: cn=example-group-1,cn=users,dc=ntnxlab,dc=local\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroup.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupCategory:getUserGroupCategory"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "userGroupDistinguishedName": {
                        "type": "string",
                        "description": "The distinguished name for the user group\n"
                    },
                    "userGroupId": {
                        "type": "string"
                    },
                    "userGroupName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroup.\n",
                "properties": {
                    "accessControlPolicyReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupAccessControlPolicyReferenceList:getUserGroupAccessControlPolicyReferenceList"
                        }
                    },
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `metadata`: - The user group kind metadata.\n* `categories`: - The Distinguished Categories for the user group.\n* `owner_reference`: - The reference to a user.\n* `project_reference`: - The Distinguished The reference to a project.\n* `user_group_type`: - The type of the user group.\n* `display_name`: - The display name of the user group.\n* `directory_service_user_group`: - A Directory Service User Group.\n* `project_reference_list`: - A list of projects the user is part of. See #reference for more details.\n* `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.\n* `state`: - The state of the entity.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupCategory:getUserGroupCategory"
                        }
                    },
                    "directoryServiceUserGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupDirectoryServiceUserGroup:getUserGroupDirectoryServiceUserGroup"
                        }
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectReferenceLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupProjectReferenceList:getUserGroupProjectReferenceList"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "userGroupDistinguishedName": {
                        "type": "string"
                    },
                    "userGroupId": {
                        "type": "string"
                    },
                    "userGroupName": {
                        "type": "string"
                    },
                    "userGroupType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessControlPolicyReferenceLists",
                    "apiVersion",
                    "categories",
                    "directoryServiceUserGroups",
                    "displayName",
                    "metadata",
                    "ownerReference",
                    "projectReferenceLists",
                    "state",
                    "userGroupType",
                    "id"
                ]
            }
        },
        "nutanix:index/getUserGroups:getUserGroups": {
            "description": "Provides a datasource to retrieve all the user groups.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst usergroups = pulumi.output(nutanix.getUserGroups());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nusergroups = nutanix.get_user_groups()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var usergroups = Output.Create(Nutanix.GetUserGroups.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetUserGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var usergroups = Output.of(NutanixFunctions.getUserGroups());\n\n    }\n}\n```\n```yaml\nvariables:\n  usergroups:\n    Fn::Invoke:\n      Function: nutanix:getUserGroups\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroups.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupsMetadata:getUserGroupsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroups.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupsEntity:getUserGroupsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUserGroupsMetadata:getUserGroupsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getUsers:getUsers": {
            "description": "Provides a datasource to retrieve all the users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst user = new nutanix.User(\"user\", {\n    directoryServiceUser: {\n        directoryServiceReference: {\n            uuid: \"\u003cdirectory-service-uuid\u003e\",\n        },\n        userPrincipalName: \"test-user@ntnxlab.local\",\n    },\n});\nconst users = pulumi.output(nutanix.getUser());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\nuser = nutanix.User(\"user\", directory_service_user=nutanix.UserDirectoryServiceUserArgs(\n    directory_service_reference=nutanix.UserDirectoryServiceUserDirectoryServiceReferenceArgs(\n        uuid=\"\u003cdirectory-service-uuid\u003e\",\n    ),\n    user_principal_name=\"test-user@ntnxlab.local\",\n))\nusers = nutanix.get_user()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = PiersKarsenbarg.Nutanix;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Nutanix.User(\"user\", new Nutanix.UserArgs\n        {\n            DirectoryServiceUser = new Nutanix.Inputs.UserDirectoryServiceUserArgs\n            {\n                DirectoryServiceReference = new Nutanix.Inputs.UserDirectoryServiceUserDirectoryServiceReferenceArgs\n                {\n                    Uuid = \"\u003cdirectory-service-uuid\u003e\",\n                },\n                UserPrincipalName = \"test-user@ntnxlab.local\",\n            },\n        });\n        var users = Output.Create(Nutanix.GetUser.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.NewUser(ctx, \"user\", \u0026nutanix.UserArgs{\n\t\t\tDirectoryServiceUser: \u0026UserDirectoryServiceUserArgs{\n\t\t\t\tDirectoryServiceReference: \u0026UserDirectoryServiceUserDirectoryServiceReferenceArgs{\n\t\t\t\t\tUuid: pulumi.String(\"\u003cdirectory-service-uuid\u003e\"),\n\t\t\t\t},\n\t\t\t\tUserPrincipalName: pulumi.String(\"test-user@ntnxlab.local\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nutanix.LookupUser(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .directoryServiceUser(UserDirectoryServiceUserArgs.builder()\n                .directoryServiceReference(UserDirectoryServiceUserDirectoryServiceReferenceArgs.builder()\n                    .uuid(\"\u003cdirectory-service-uuid\u003e\")\n                    .build())\n                .userPrincipalName(\"test-user@ntnxlab.local\")\n                .build())\n            .build());\n\n        final var users = Output.of(NutanixFunctions.getUser());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: nutanix:User\n    properties:\n      directoryServiceUser:\n        directoryServiceReference:\n          uuid: \u003cdirectory-service-uuid\u003e\n        userPrincipalName: test-user@ntnxlab.local\nvariables:\n  users:\n    Fn::Invoke:\n      Function: nutanix:getUser\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUsersMetadata:getUsersMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `state`: - The state of the entity.\n* `name`: - The name of the user.\n* `user_type`: - The name of the user.\n* `display_name`: - The display name of the user (common name) provided by the directory service.\n* `project_reference_list`: - A list of projects the user is part of. See #reference for more details.\n* `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.\n* `directory_service_user`: - (Optional) The directory service user configuration. See below for more information.\n* `identity_provider_user`: - (Optional) (Optional) The identity provider user configuration. See below for more information.\n* `categories`: - (Optional) Categories for the user.\n* `project_reference`: - (Optional) The reference to a project.\n* `owner_reference`: - (Optional) The reference to a user.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUsersEntity:getUsersEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getUsersMetadata:getUsersMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        },
        "nutanix:index/getVirtualMachine:getVirtualMachine": {
            "description": "Describes a Virtual Machine\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clusters = Output.of(NutanixFunctions.getClusters(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n\n        ctx.export(\"cluster\", clusters.apply(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()));\n        var vm1 = new VirtualMachine(\"vm1\", VirtualMachineArgs.builder()        \n            .clusterUuid(clusters.apply(getClustersResult -\u003e getClustersResult.entities()[0].metadata().uuid()))\n            .numVcpusPerSocket(1)\n            .numSockets(1)\n            .memorySizeMib(2048)\n            .powerState(\"ON\")\n            .build());\n\n        final var nutanixVirtualMachine = NutanixFunctions.getVirtualMachine(GetVirtualMachineArgs.builder()\n            .vmId(vm1.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vm1:\n    type: nutanix:VirtualMachine\n    properties:\n      clusterUuid: ${clusters.entities[0].metadata.uuid}\n      numVcpusPerSocket: 1\n      numSockets: 1\n      memorySizeMib: 2048\n      powerState: ON\nvariables:\n  clusters:\n    Fn::Invoke:\n      Function: nutanix:getClusters\n      Arguments:\n        metadata:\n          length: 2\n  nutanixVirtualMachine:\n    Fn::Invoke:\n      Function: nutanix:getVirtualMachine\n      Arguments:\n        vmId: ${vm1.id}\noutputs:\n  cluster: ${clusters.entities[0].metadata.uuid}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualMachine.\n",
                "properties": {
                    "bootDeviceDiskAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "bootDeviceMacAddress": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineCategory:getVirtualMachineCategory"
                        }
                    },
                    "vmId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "vmId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualMachine.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n* `description`: - A description for vm.\n* `num_vnuma_nodes`: - Number of vNUMA nodes. 0 means vNUMA is disabled.\n* `nic_list`: - NICs attached to the VM.\n* `serial_port_list`: - (Optional) Serial Ports configured on the VM.\n* `guest_os_id`: - Guest OS Identifier. For ESX, refer to VMware documentation [link](https://www.vmware.com/support/developer/converter-sdk/conv43_apireference/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html) for the list of guest OS identifiers.\n* `power_state`: - The current or desired power state of the VM. (Options : ON , OFF)\n* `nutanix_guest_tools`: - Information regarding Nutanix Guest Tools.\n* `ngt_credentials`: - Credentials to login server.\n"
                    },
                    "availabilityZoneReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "bootDeviceDiskAddress": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "bootDeviceMacAddress": {
                        "type": "string"
                    },
                    "bootDeviceOrderLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "bootType": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineCategory:getVirtualMachineCategory"
                        }
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "clusterUuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "diskLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineDiskList:getVirtualMachineDiskList"
                        }
                    },
                    "enableCpuPassthrough": {
                        "type": "boolean"
                    },
                    "enableScriptExec": {
                        "type": "boolean"
                    },
                    "gpuLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineGpuList:getVirtualMachineGpuList"
                        }
                    },
                    "guestCustomizationCloudInitCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "guestCustomizationCloudInitMetaData": {
                        "type": "string",
                        "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n* `guest_customization_is_overridable`: - Flag to allow override of customization by deployer.\n* `guest_customization_cloud_init_custom_key_values`: - Generic key value pair used for custom attributes in cloud init.\n* `guest_customization_sysprep`: - VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\\"override_script\\\" is set to \\\"True\\\" then the deployer can upload their own custom script.\n* `guest_customization_sysrep_custom_key_values`: - Generic key value pair used for custom attributes in sysrep.\n* `should_fail_on_script_failure`: -  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.\n* `enable_script_exec`: - Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.\n* `power_state_mechanism`: - Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\\"OFF\\\" state. Power state mechanism (ACPI/GUEST/HARD).\n* `vga_console_enabled`: - Indicates whether VGA console should be enabled or not.\n* `disk_list` Disks attached to the VM.\n* `metadata`: - The vm kind metadata.\n* `state`: - The state of the vm.\n* `ip_address`: - An IP address.\n* `host_reference`: - Reference to a host.\n* `hypervisor_type`: - The hypervisor type for the hypervisor the VM is hosted on.\n"
                    },
                    "guestCustomizationCloudInitUserData": {
                        "type": "string"
                    },
                    "guestCustomizationIsOverridable": {
                        "type": "boolean"
                    },
                    "guestCustomizationSysprep": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "guestCustomizationSysprepCustomKeyValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "guestOsId": {
                        "type": "string"
                    },
                    "hardwareClockTimezone": {
                        "type": "string"
                    },
                    "hostReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "hypervisorType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isVcpuHardPinned": {
                        "type": "boolean"
                    },
                    "machineType": {
                        "type": "string"
                    },
                    "memorySizeMib": {
                        "type": "integer"
                    },
                    "messageLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineMessageList:getVirtualMachineMessageList"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "ngtCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "ngtEnabledCapabilityLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Application names that are enabled.\n* `num_vcpus_per_socket`: - Number of vCPUs per socket.\n* `num_sockets`: - Number of vCPU sockets.\n* `gpu_list`: - GPUs attached to the VM.\n* `parent_referece`: - Reference to an entity that the VM cloned from.\n* `memory_size_mib`: - Memory size in MiB.\n* `boot_device_order_list`: - Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n* `boot_device_disk_address`: - Address of disk to boot from.\n* `boot_device_mac_address`: - MAC address of nic to boot from.\n* `boot_type`: - Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI\", \"LEGACY\", \"SECURE_BOOT\".\n* `machine_type`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n* `hardware_clock_timezone`: - VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n* `guest_customization_cloud_init_user_data`: - The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
                    },
                    "nicLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineNicList:getVirtualMachineNicList"
                        }
                    },
                    "numSockets": {
                        "type": "integer"
                    },
                    "numVcpusPerSocket": {
                        "type": "integer"
                    },
                    "numVnumaNodes": {
                        "type": "integer"
                    },
                    "nutanixGuestTools": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ownerReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "parentReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "powerState": {
                        "type": "string"
                    },
                    "powerStateMechanism": {
                        "type": "string"
                    },
                    "projectReference": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "serialPortLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVirtualMachineSerialPortList:getVirtualMachineSerialPortList"
                        }
                    },
                    "shouldFailOnScriptFailure": {
                        "type": "boolean"
                    },
                    "state": {
                        "type": "string"
                    },
                    "vgaConsoleEnabled": {
                        "type": "boolean"
                    },
                    "vmId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availabilityZoneReference",
                    "bootDeviceDiskAddress",
                    "bootDeviceMacAddress",
                    "bootDeviceOrderLists",
                    "bootType",
                    "categories",
                    "clusterName",
                    "clusterUuid",
                    "description",
                    "diskLists",
                    "enableCpuPassthrough",
                    "enableScriptExec",
                    "gpuLists",
                    "guestCustomizationCloudInitCustomKeyValues",
                    "guestCustomizationCloudInitMetaData",
                    "guestCustomizationCloudInitUserData",
                    "guestCustomizationIsOverridable",
                    "guestCustomizationSysprep",
                    "guestCustomizationSysprepCustomKeyValues",
                    "guestOsId",
                    "hardwareClockTimezone",
                    "hostReference",
                    "hypervisorType",
                    "isVcpuHardPinned",
                    "machineType",
                    "memorySizeMib",
                    "messageLists",
                    "metadata",
                    "name",
                    "ngtCredentials",
                    "ngtEnabledCapabilityLists",
                    "nicLists",
                    "numSockets",
                    "numVcpusPerSocket",
                    "numVnumaNodes",
                    "nutanixGuestTools",
                    "ownerReference",
                    "parentReference",
                    "powerState",
                    "powerStateMechanism",
                    "projectReference",
                    "serialPortLists",
                    "shouldFailOnScriptFailure",
                    "state",
                    "vgaConsoleEnabled",
                    "vmId",
                    "id"
                ]
            }
        },
        "nutanix:index/getVpc:getVpc": {
            "description": "Provides a datasource to retrieve VPC with vpc_uuid or vpc_name .\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpc.\n",
                "properties": {
                    "vpcName": {
                        "type": "string",
                        "description": "vpc Name\n"
                    },
                    "vpcUuid": {
                        "type": "string",
                        "description": "vpc UUID\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpc.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The version of the API.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcSpec:getVpcSpec"
                        },
                        "description": "VPC input spec\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcStatus:getVpcStatus"
                        },
                        "description": "VPC output status\n"
                    },
                    "vpcName": {
                        "type": "string"
                    },
                    "vpcUuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "metadata",
                    "specs",
                    "statuses",
                    "id"
                ]
            }
        },
        "nutanix:index/getVpcs:getVpcs": {
            "description": "Provides a datasource to retrieve all the vpcs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nutanix from \"@pulumi/nutanix\";\n\nconst test = pulumi.output(nutanix.getVpcs());\n```\n```python\nimport pulumi\nimport pulumi_nutanix as nutanix\n\ntest = nutanix.get_vpcs()\n```\n```csharp\nusing Pulumi;\nusing Nutanix = Pulumi.Nutanix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Nutanix.GetVpcs.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nutanix.GetVpcs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Output.of(NutanixFunctions.getVpcs());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: nutanix:getVpcs\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcs.\n",
                "properties": {
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcsMetadata:getVpcsMetadata"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcs.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcsEntity:getVpcsEntity"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nutanix:index/getVpcsMetadata:getVpcsMetadata"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "entities",
                    "metadatas",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "PiersKarsenbarg"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing nutanix cloud resources.",
            "packageName": "@pierskarsenbarg/nutanix",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-nutanix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-nutanix` repo](https://github.com/pulumi/pulumi-nutanix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-nutanix` repo](https://github.com/terraform-providers/terraform-provider-nutanix/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-nutanix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-nutanix` repo](https://github.com/pulumi/pulumi-nutanix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-nutanix` repo](https://github.com/terraform-providers/terraform-provider-nutanix/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}