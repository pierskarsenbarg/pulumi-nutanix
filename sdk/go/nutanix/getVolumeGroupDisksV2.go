// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Query the list of disks corresponding to a Volume Group identified by {volumeGroupExtId}.
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetVolumeGroupDisksV2(ctx, &nutanix.GetVolumeGroupDisksV2Args{
//				Filter:           pulumi.StringRef("storageContainerId eq '07c2da68-bb67-4535-9b2a-81504f6bb2e3'"),
//				VolumeGroupExtId: "3770be9d-06be-4e25-b85d-3457d9b0ceb1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Argument Reference
//
// The following arguments are supported:
//
// * `volumeGroupExtId`: -(Required) The external identifier of the Volume Group.
// * `page`: - A query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource.
// * `limit` : A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.
// * `filter` : A URL query parameter that allows clients to filter a collection of resources. The expression specified with \$filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the \$filter must conform to the OData V4.01 URL conventions. For example, filter '\$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '\$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'. The filter can be applied to the following fields: storageContainerId.
// * `orderby` : A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '\$orderby=templateName desc' would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: diskSizeBytes.
// * `expand` : A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are \$filter, \$select and \$orderby. The following expansion keys are supported. The expand can be applied to the following fields: clusterReference, metadata.
// * `select` : A query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the \$select must conform to the OData V4.01 URL conventions. If a \$select expression consists of a single select item that is an asterisk (i.e., \*), then all properties on the matching resource will be returned. The select can be applied to the following fields: extId, storageContainerId.
func GetVolumeGroupDisksV2(ctx *pulumi.Context, args *GetVolumeGroupDisksV2Args, opts ...pulumi.InvokeOption) (*GetVolumeGroupDisksV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumeGroupDisksV2Result
	err := ctx.Invoke("nutanix:index/getVolumeGroupDisksV2:getVolumeGroupDisksV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumeGroupDisksV2.
type GetVolumeGroupDisksV2Args struct {
	Filter           *string `pulumi:"filter"`
	Limit            *int    `pulumi:"limit"`
	Orderby          *string `pulumi:"orderby"`
	Page             *int    `pulumi:"page"`
	Select           *string `pulumi:"select"`
	VolumeGroupExtId string  `pulumi:"volumeGroupExtId"`
}

// A collection of values returned by getVolumeGroupDisksV2.
type GetVolumeGroupDisksV2Result struct {
	// - List of disks corresponding to a Volume Group identified by {volumeGroupExtId}.
	Disks  []GetVolumeGroupDisksV2Disk `pulumi:"disks"`
	Filter *string                     `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	Limit            *int    `pulumi:"limit"`
	Orderby          *string `pulumi:"orderby"`
	Page             *int    `pulumi:"page"`
	Select           *string `pulumi:"select"`
	VolumeGroupExtId string  `pulumi:"volumeGroupExtId"`
}

func GetVolumeGroupDisksV2Output(ctx *pulumi.Context, args GetVolumeGroupDisksV2OutputArgs, opts ...pulumi.InvokeOption) GetVolumeGroupDisksV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVolumeGroupDisksV2ResultOutput, error) {
			args := v.(GetVolumeGroupDisksV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getVolumeGroupDisksV2:getVolumeGroupDisksV2", args, GetVolumeGroupDisksV2ResultOutput{}, options).(GetVolumeGroupDisksV2ResultOutput), nil
		}).(GetVolumeGroupDisksV2ResultOutput)
}

// A collection of arguments for invoking getVolumeGroupDisksV2.
type GetVolumeGroupDisksV2OutputArgs struct {
	Filter           pulumi.StringPtrInput `pulumi:"filter"`
	Limit            pulumi.IntPtrInput    `pulumi:"limit"`
	Orderby          pulumi.StringPtrInput `pulumi:"orderby"`
	Page             pulumi.IntPtrInput    `pulumi:"page"`
	Select           pulumi.StringPtrInput `pulumi:"select"`
	VolumeGroupExtId pulumi.StringInput    `pulumi:"volumeGroupExtId"`
}

func (GetVolumeGroupDisksV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupDisksV2Args)(nil)).Elem()
}

// A collection of values returned by getVolumeGroupDisksV2.
type GetVolumeGroupDisksV2ResultOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupDisksV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupDisksV2Result)(nil)).Elem()
}

func (o GetVolumeGroupDisksV2ResultOutput) ToGetVolumeGroupDisksV2ResultOutput() GetVolumeGroupDisksV2ResultOutput {
	return o
}

func (o GetVolumeGroupDisksV2ResultOutput) ToGetVolumeGroupDisksV2ResultOutputWithContext(ctx context.Context) GetVolumeGroupDisksV2ResultOutput {
	return o
}

// - List of disks corresponding to a Volume Group identified by {volumeGroupExtId}.
func (o GetVolumeGroupDisksV2ResultOutput) Disks() GetVolumeGroupDisksV2DiskArrayOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) []GetVolumeGroupDisksV2Disk { return v.Disks }).(GetVolumeGroupDisksV2DiskArrayOutput)
}

func (o GetVolumeGroupDisksV2ResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVolumeGroupDisksV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVolumeGroupDisksV2ResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o GetVolumeGroupDisksV2ResultOutput) Orderby() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) *string { return v.Orderby }).(pulumi.StringPtrOutput)
}

func (o GetVolumeGroupDisksV2ResultOutput) Page() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) *int { return v.Page }).(pulumi.IntPtrOutput)
}

func (o GetVolumeGroupDisksV2ResultOutput) Select() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) *string { return v.Select }).(pulumi.StringPtrOutput)
}

func (o GetVolumeGroupDisksV2ResultOutput) VolumeGroupExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupDisksV2Result) string { return v.VolumeGroupExtId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumeGroupDisksV2ResultOutput{})
}
