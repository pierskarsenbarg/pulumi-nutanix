// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the statistics data of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetHostV2(ctx, &nutanix.GetHostV2Args{
//				ClusterExtId: "<cluster uuid>",
//				ExtId:        "<host uuid>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetHostV2(ctx *pulumi.Context, args *GetHostV2Args, opts ...pulumi.InvokeOption) (*GetHostV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHostV2Result
	err := ctx.Invoke("nutanix:index/getHostV2:getHostV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHostV2.
type GetHostV2Args struct {
	// - (Required) cluster uuid
	ClusterExtId string `pulumi:"clusterExtId"`
	// - (Required) host uuid
	ExtId string `pulumi:"extId"`
}

// A collection of values returned by getHostV2.
type GetHostV2Result struct {
	// - Rackable unit model name.
	BlockModel string `pulumi:"blockModel"`
	// - Rackable unit serial name.
	BlockSerial string `pulumi:"blockSerial"`
	// - Boot time in secs.
	BootTimeUsecs int    `pulumi:"bootTimeUsecs"`
	ClusterExtId  string `pulumi:"clusterExtId"`
	// - Cluster reference for an entity.
	Clusters []GetHostV2Cluster `pulumi:"clusters"`
	// - Host entity with its attributes.
	ControllerVms []GetHostV2ControllerVm `pulumi:"controllerVms"`
	// - CPU capacity in Hz.
	CpuCapacityHz int `pulumi:"cpuCapacityHz"`
	// - CPU frequency in Hz.
	CpuFrequencyHz int `pulumi:"cpuFrequencyHz"`
	// - CPU model name.
	CpuModel string `pulumi:"cpuModel"`
	// - Default VHD container UUID.
	DefaultVhdContainerUuid string `pulumi:"defaultVhdContainerUuid"`
	// - Default VHD location.
	DefaultVhdLocation string `pulumi:"defaultVhdLocation"`
	// - Default VM container UUID.
	DefaultVmContainerUuid string `pulumi:"defaultVmContainerUuid"`
	// - Default VM location.
	DefaultVmLocation string `pulumi:"defaultVmLocation"`
	// - Disks attached to host.
	Disks []GetHostV2Disk `pulumi:"disks"`
	// - A globally unique identifier of an instance that is suitable for external consumption.
	ExtId string `pulumi:"extId"`
	// - Failover cluster FQDN.
	FailoverClusterFqdn string `pulumi:"failoverClusterFqdn"`
	// - Failover cluster node status.
	FailoverClusterNodeStatus string `pulumi:"failoverClusterNodeStatus"`
	// - GPU driver version.
	GpuDriverVersion string `pulumi:"gpuDriverVersion"`
	// - GPU attached list.
	GpuLists []string `pulumi:"gpuLists"`
	// - Certificate signing request status.
	HasCsr bool `pulumi:"hasCsr"`
	// - Name of the host.
	HostName string `pulumi:"hostName"`
	// - Type of the host.
	// * `HYPER_CONVERGED`: Hyper-converged node.
	// * `COMPUTE_ONLY`: Compute only node.
	// * `STORAGE_ONLY`: Storage only node.
	HostType string `pulumi:"hostType"`
	// - Hypervisor details.
	Hypervisors []GetHostV2Hypervisor `pulumi:"hypervisors"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// - IPMI reference.
	Ipmis []GetHostV2Ipmi `pulumi:"ipmis"`
	// - Node degraded status.
	IsDegraded bool `pulumi:"isDegraded"`
	// - Indicates whether the hardware is virtualized or not.
	IsHardwareVirtualized bool `pulumi:"isHardwareVirtualized"`
	IsRebootPending       bool `pulumi:"isRebootPending"`
	// - Secure boot status.
	IsSecureBooted bool `pulumi:"isSecureBooted"`
	// - Mapping of key management device to certificate status list.
	KeyManagementDeviceToCertStatuses []GetHostV2KeyManagementDeviceToCertStatus `pulumi:"keyManagementDeviceToCertStatuses"`
	// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []GetHostV2Link `pulumi:"links"`
	// - Host Maintenance State.
	MaintenanceState string `pulumi:"maintenanceState"`
	// - Memory size in bytes.
	MemorySizeBytes int `pulumi:"memorySizeBytes"`
	// - Node status.
	// * `TO_BE_PREPROTECTED`: Node to be preprotected.
	// * `TO_BE_REMOVED`: Node to be removed.
	// * `PREPROTECTED`: Node is preprotected.
	// * `OK_TO_BE_REMOVED`: Indicates whether removing the node from the cluster is adequate.
	// * `NORMAL`: Normal node.
	// * `NEW_NODE`: New node.
	NodeStatus string `pulumi:"nodeStatus"`
	// - Number of CPU cores.
	NumberOfCpuCores int `pulumi:"numberOfCpuCores"`
	// - Number of CPU sockets.
	NumberOfCpuSockets int `pulumi:"numberOfCpuSockets"`
	// - Number of CPU threads.
	NumberOfCpuThreads int `pulumi:"numberOfCpuThreads"`
	// - Rackable unit UUID.
	RackableUnitUuid string `pulumi:"rackableUnitUuid"`
	// - image uuid.
	TenantId string `pulumi:"tenantId"`
}

func GetHostV2Output(ctx *pulumi.Context, args GetHostV2OutputArgs, opts ...pulumi.InvokeOption) GetHostV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetHostV2ResultOutput, error) {
			args := v.(GetHostV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getHostV2:getHostV2", args, GetHostV2ResultOutput{}, options).(GetHostV2ResultOutput), nil
		}).(GetHostV2ResultOutput)
}

// A collection of arguments for invoking getHostV2.
type GetHostV2OutputArgs struct {
	// - (Required) cluster uuid
	ClusterExtId pulumi.StringInput `pulumi:"clusterExtId"`
	// - (Required) host uuid
	ExtId pulumi.StringInput `pulumi:"extId"`
}

func (GetHostV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostV2Args)(nil)).Elem()
}

// A collection of values returned by getHostV2.
type GetHostV2ResultOutput struct{ *pulumi.OutputState }

func (GetHostV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostV2Result)(nil)).Elem()
}

func (o GetHostV2ResultOutput) ToGetHostV2ResultOutput() GetHostV2ResultOutput {
	return o
}

func (o GetHostV2ResultOutput) ToGetHostV2ResultOutputWithContext(ctx context.Context) GetHostV2ResultOutput {
	return o
}

// - Rackable unit model name.
func (o GetHostV2ResultOutput) BlockModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.BlockModel }).(pulumi.StringOutput)
}

// - Rackable unit serial name.
func (o GetHostV2ResultOutput) BlockSerial() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.BlockSerial }).(pulumi.StringOutput)
}

// - Boot time in secs.
func (o GetHostV2ResultOutput) BootTimeUsecs() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostV2Result) int { return v.BootTimeUsecs }).(pulumi.IntOutput)
}

func (o GetHostV2ResultOutput) ClusterExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.ClusterExtId }).(pulumi.StringOutput)
}

// - Cluster reference for an entity.
func (o GetHostV2ResultOutput) Clusters() GetHostV2ClusterArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []GetHostV2Cluster { return v.Clusters }).(GetHostV2ClusterArrayOutput)
}

// - Host entity with its attributes.
func (o GetHostV2ResultOutput) ControllerVms() GetHostV2ControllerVmArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []GetHostV2ControllerVm { return v.ControllerVms }).(GetHostV2ControllerVmArrayOutput)
}

// - CPU capacity in Hz.
func (o GetHostV2ResultOutput) CpuCapacityHz() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostV2Result) int { return v.CpuCapacityHz }).(pulumi.IntOutput)
}

// - CPU frequency in Hz.
func (o GetHostV2ResultOutput) CpuFrequencyHz() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostV2Result) int { return v.CpuFrequencyHz }).(pulumi.IntOutput)
}

// - CPU model name.
func (o GetHostV2ResultOutput) CpuModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.CpuModel }).(pulumi.StringOutput)
}

// - Default VHD container UUID.
func (o GetHostV2ResultOutput) DefaultVhdContainerUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.DefaultVhdContainerUuid }).(pulumi.StringOutput)
}

// - Default VHD location.
func (o GetHostV2ResultOutput) DefaultVhdLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.DefaultVhdLocation }).(pulumi.StringOutput)
}

// - Default VM container UUID.
func (o GetHostV2ResultOutput) DefaultVmContainerUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.DefaultVmContainerUuid }).(pulumi.StringOutput)
}

// - Default VM location.
func (o GetHostV2ResultOutput) DefaultVmLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.DefaultVmLocation }).(pulumi.StringOutput)
}

// - Disks attached to host.
func (o GetHostV2ResultOutput) Disks() GetHostV2DiskArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []GetHostV2Disk { return v.Disks }).(GetHostV2DiskArrayOutput)
}

// - A globally unique identifier of an instance that is suitable for external consumption.
func (o GetHostV2ResultOutput) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.ExtId }).(pulumi.StringOutput)
}

// - Failover cluster FQDN.
func (o GetHostV2ResultOutput) FailoverClusterFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.FailoverClusterFqdn }).(pulumi.StringOutput)
}

// - Failover cluster node status.
func (o GetHostV2ResultOutput) FailoverClusterNodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.FailoverClusterNodeStatus }).(pulumi.StringOutput)
}

// - GPU driver version.
func (o GetHostV2ResultOutput) GpuDriverVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.GpuDriverVersion }).(pulumi.StringOutput)
}

// - GPU attached list.
func (o GetHostV2ResultOutput) GpuLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []string { return v.GpuLists }).(pulumi.StringArrayOutput)
}

// - Certificate signing request status.
func (o GetHostV2ResultOutput) HasCsr() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostV2Result) bool { return v.HasCsr }).(pulumi.BoolOutput)
}

// - Name of the host.
func (o GetHostV2ResultOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.HostName }).(pulumi.StringOutput)
}

// - Type of the host.
// * `HYPER_CONVERGED`: Hyper-converged node.
// * `COMPUTE_ONLY`: Compute only node.
// * `STORAGE_ONLY`: Storage only node.
func (o GetHostV2ResultOutput) HostType() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.HostType }).(pulumi.StringOutput)
}

// - Hypervisor details.
func (o GetHostV2ResultOutput) Hypervisors() GetHostV2HypervisorArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []GetHostV2Hypervisor { return v.Hypervisors }).(GetHostV2HypervisorArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetHostV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// - IPMI reference.
func (o GetHostV2ResultOutput) Ipmis() GetHostV2IpmiArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []GetHostV2Ipmi { return v.Ipmis }).(GetHostV2IpmiArrayOutput)
}

// - Node degraded status.
func (o GetHostV2ResultOutput) IsDegraded() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostV2Result) bool { return v.IsDegraded }).(pulumi.BoolOutput)
}

// - Indicates whether the hardware is virtualized or not.
func (o GetHostV2ResultOutput) IsHardwareVirtualized() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostV2Result) bool { return v.IsHardwareVirtualized }).(pulumi.BoolOutput)
}

func (o GetHostV2ResultOutput) IsRebootPending() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostV2Result) bool { return v.IsRebootPending }).(pulumi.BoolOutput)
}

// - Secure boot status.
func (o GetHostV2ResultOutput) IsSecureBooted() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostV2Result) bool { return v.IsSecureBooted }).(pulumi.BoolOutput)
}

// - Mapping of key management device to certificate status list.
func (o GetHostV2ResultOutput) KeyManagementDeviceToCertStatuses() GetHostV2KeyManagementDeviceToCertStatusArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []GetHostV2KeyManagementDeviceToCertStatus {
		return v.KeyManagementDeviceToCertStatuses
	}).(GetHostV2KeyManagementDeviceToCertStatusArrayOutput)
}

// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o GetHostV2ResultOutput) Links() GetHostV2LinkArrayOutput {
	return o.ApplyT(func(v GetHostV2Result) []GetHostV2Link { return v.Links }).(GetHostV2LinkArrayOutput)
}

// - Host Maintenance State.
func (o GetHostV2ResultOutput) MaintenanceState() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.MaintenanceState }).(pulumi.StringOutput)
}

// - Memory size in bytes.
func (o GetHostV2ResultOutput) MemorySizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostV2Result) int { return v.MemorySizeBytes }).(pulumi.IntOutput)
}

// - Node status.
// * `TO_BE_PREPROTECTED`: Node to be preprotected.
// * `TO_BE_REMOVED`: Node to be removed.
// * `PREPROTECTED`: Node is preprotected.
// * `OK_TO_BE_REMOVED`: Indicates whether removing the node from the cluster is adequate.
// * `NORMAL`: Normal node.
// * `NEW_NODE`: New node.
func (o GetHostV2ResultOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// - Number of CPU cores.
func (o GetHostV2ResultOutput) NumberOfCpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostV2Result) int { return v.NumberOfCpuCores }).(pulumi.IntOutput)
}

// - Number of CPU sockets.
func (o GetHostV2ResultOutput) NumberOfCpuSockets() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostV2Result) int { return v.NumberOfCpuSockets }).(pulumi.IntOutput)
}

// - Number of CPU threads.
func (o GetHostV2ResultOutput) NumberOfCpuThreads() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostV2Result) int { return v.NumberOfCpuThreads }).(pulumi.IntOutput)
}

// - Rackable unit UUID.
func (o GetHostV2ResultOutput) RackableUnitUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.RackableUnitUuid }).(pulumi.StringOutput)
}

// - image uuid.
func (o GetHostV2ResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostV2Result) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHostV2ResultOutput{})
}
