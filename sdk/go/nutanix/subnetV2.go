// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SubnetV2 struct {
	pulumi.CustomResourceState

	BridgeName                    pulumi.StringOutput                  `pulumi:"bridgeName"`
	ClusterName                   pulumi.StringOutput                  `pulumi:"clusterName"`
	ClusterReference              pulumi.StringOutput                  `pulumi:"clusterReference"`
	Description                   pulumi.StringPtrOutput               `pulumi:"description"`
	DhcpOptions                   SubnetV2DhcpOptionArrayOutput        `pulumi:"dhcpOptions"`
	DynamicIpAddresses            SubnetV2DynamicIpAddressArrayOutput  `pulumi:"dynamicIpAddresses"`
	ExtId                         pulumi.StringOutput                  `pulumi:"extId"`
	HypervisorType                pulumi.StringOutput                  `pulumi:"hypervisorType"`
	IpConfigs                     SubnetV2IpConfigArrayOutput          `pulumi:"ipConfigs"`
	IpPrefix                      pulumi.StringOutput                  `pulumi:"ipPrefix"`
	IpUsages                      SubnetV2IpUsageArrayOutput           `pulumi:"ipUsages"`
	IsAdvancedNetworking          pulumi.BoolOutput                    `pulumi:"isAdvancedNetworking"`
	IsExternal                    pulumi.BoolOutput                    `pulumi:"isExternal"`
	IsNatEnabled                  pulumi.BoolOutput                    `pulumi:"isNatEnabled"`
	Links                         SubnetV2LinkArrayOutput              `pulumi:"links"`
	MigrationState                pulumi.StringOutput                  `pulumi:"migrationState"`
	Name                          pulumi.StringOutput                  `pulumi:"name"`
	NetworkFunctionChainReference pulumi.StringOutput                  `pulumi:"networkFunctionChainReference"`
	NetworkId                     pulumi.IntPtrOutput                  `pulumi:"networkId"`
	ReservedIpAddresses           SubnetV2ReservedIpAddressArrayOutput `pulumi:"reservedIpAddresses"`
	SubnetType                    pulumi.StringOutput                  `pulumi:"subnetType"`
	VirtualSwitchReference        pulumi.StringOutput                  `pulumi:"virtualSwitchReference"`
	VirtualSwitches               SubnetV2VirtualSwitchArrayOutput     `pulumi:"virtualSwitches"`
	VpcReference                  pulumi.StringOutput                  `pulumi:"vpcReference"`
	Vpcs                          SubnetV2VpcArrayOutput               `pulumi:"vpcs"`
}

// NewSubnetV2 registers a new resource with the given unique name, arguments, and options.
func NewSubnetV2(ctx *pulumi.Context,
	name string, args *SubnetV2Args, opts ...pulumi.ResourceOption) (*SubnetV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetType == nil {
		return nil, errors.New("invalid value for required argument 'SubnetType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubnetV2
	err := ctx.RegisterResource("nutanix:index/subnetV2:SubnetV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetV2 gets an existing SubnetV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetV2State, opts ...pulumi.ResourceOption) (*SubnetV2, error) {
	var resource SubnetV2
	err := ctx.ReadResource("nutanix:index/subnetV2:SubnetV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetV2 resources.
type subnetV2State struct {
	BridgeName                    *string                     `pulumi:"bridgeName"`
	ClusterName                   *string                     `pulumi:"clusterName"`
	ClusterReference              *string                     `pulumi:"clusterReference"`
	Description                   *string                     `pulumi:"description"`
	DhcpOptions                   []SubnetV2DhcpOption        `pulumi:"dhcpOptions"`
	DynamicIpAddresses            []SubnetV2DynamicIpAddress  `pulumi:"dynamicIpAddresses"`
	ExtId                         *string                     `pulumi:"extId"`
	HypervisorType                *string                     `pulumi:"hypervisorType"`
	IpConfigs                     []SubnetV2IpConfig          `pulumi:"ipConfigs"`
	IpPrefix                      *string                     `pulumi:"ipPrefix"`
	IpUsages                      []SubnetV2IpUsage           `pulumi:"ipUsages"`
	IsAdvancedNetworking          *bool                       `pulumi:"isAdvancedNetworking"`
	IsExternal                    *bool                       `pulumi:"isExternal"`
	IsNatEnabled                  *bool                       `pulumi:"isNatEnabled"`
	Links                         []SubnetV2Link              `pulumi:"links"`
	MigrationState                *string                     `pulumi:"migrationState"`
	Name                          *string                     `pulumi:"name"`
	NetworkFunctionChainReference *string                     `pulumi:"networkFunctionChainReference"`
	NetworkId                     *int                        `pulumi:"networkId"`
	ReservedIpAddresses           []SubnetV2ReservedIpAddress `pulumi:"reservedIpAddresses"`
	SubnetType                    *string                     `pulumi:"subnetType"`
	VirtualSwitchReference        *string                     `pulumi:"virtualSwitchReference"`
	VirtualSwitches               []SubnetV2VirtualSwitch     `pulumi:"virtualSwitches"`
	VpcReference                  *string                     `pulumi:"vpcReference"`
	Vpcs                          []SubnetV2Vpc               `pulumi:"vpcs"`
}

type SubnetV2State struct {
	BridgeName                    pulumi.StringPtrInput
	ClusterName                   pulumi.StringPtrInput
	ClusterReference              pulumi.StringPtrInput
	Description                   pulumi.StringPtrInput
	DhcpOptions                   SubnetV2DhcpOptionArrayInput
	DynamicIpAddresses            SubnetV2DynamicIpAddressArrayInput
	ExtId                         pulumi.StringPtrInput
	HypervisorType                pulumi.StringPtrInput
	IpConfigs                     SubnetV2IpConfigArrayInput
	IpPrefix                      pulumi.StringPtrInput
	IpUsages                      SubnetV2IpUsageArrayInput
	IsAdvancedNetworking          pulumi.BoolPtrInput
	IsExternal                    pulumi.BoolPtrInput
	IsNatEnabled                  pulumi.BoolPtrInput
	Links                         SubnetV2LinkArrayInput
	MigrationState                pulumi.StringPtrInput
	Name                          pulumi.StringPtrInput
	NetworkFunctionChainReference pulumi.StringPtrInput
	NetworkId                     pulumi.IntPtrInput
	ReservedIpAddresses           SubnetV2ReservedIpAddressArrayInput
	SubnetType                    pulumi.StringPtrInput
	VirtualSwitchReference        pulumi.StringPtrInput
	VirtualSwitches               SubnetV2VirtualSwitchArrayInput
	VpcReference                  pulumi.StringPtrInput
	Vpcs                          SubnetV2VpcArrayInput
}

func (SubnetV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetV2State)(nil)).Elem()
}

type subnetV2Args struct {
	BridgeName                    *string                     `pulumi:"bridgeName"`
	ClusterName                   *string                     `pulumi:"clusterName"`
	ClusterReference              *string                     `pulumi:"clusterReference"`
	Description                   *string                     `pulumi:"description"`
	DhcpOptions                   []SubnetV2DhcpOption        `pulumi:"dhcpOptions"`
	DynamicIpAddresses            []SubnetV2DynamicIpAddress  `pulumi:"dynamicIpAddresses"`
	ExtId                         *string                     `pulumi:"extId"`
	HypervisorType                *string                     `pulumi:"hypervisorType"`
	IpConfigs                     []SubnetV2IpConfig          `pulumi:"ipConfigs"`
	IpPrefix                      *string                     `pulumi:"ipPrefix"`
	IpUsages                      []SubnetV2IpUsage           `pulumi:"ipUsages"`
	IsAdvancedNetworking          *bool                       `pulumi:"isAdvancedNetworking"`
	IsExternal                    *bool                       `pulumi:"isExternal"`
	IsNatEnabled                  *bool                       `pulumi:"isNatEnabled"`
	Name                          *string                     `pulumi:"name"`
	NetworkFunctionChainReference *string                     `pulumi:"networkFunctionChainReference"`
	NetworkId                     *int                        `pulumi:"networkId"`
	ReservedIpAddresses           []SubnetV2ReservedIpAddress `pulumi:"reservedIpAddresses"`
	SubnetType                    string                      `pulumi:"subnetType"`
	VirtualSwitchReference        *string                     `pulumi:"virtualSwitchReference"`
	VirtualSwitches               []SubnetV2VirtualSwitch     `pulumi:"virtualSwitches"`
	VpcReference                  *string                     `pulumi:"vpcReference"`
	Vpcs                          []SubnetV2Vpc               `pulumi:"vpcs"`
}

// The set of arguments for constructing a SubnetV2 resource.
type SubnetV2Args struct {
	BridgeName                    pulumi.StringPtrInput
	ClusterName                   pulumi.StringPtrInput
	ClusterReference              pulumi.StringPtrInput
	Description                   pulumi.StringPtrInput
	DhcpOptions                   SubnetV2DhcpOptionArrayInput
	DynamicIpAddresses            SubnetV2DynamicIpAddressArrayInput
	ExtId                         pulumi.StringPtrInput
	HypervisorType                pulumi.StringPtrInput
	IpConfigs                     SubnetV2IpConfigArrayInput
	IpPrefix                      pulumi.StringPtrInput
	IpUsages                      SubnetV2IpUsageArrayInput
	IsAdvancedNetworking          pulumi.BoolPtrInput
	IsExternal                    pulumi.BoolPtrInput
	IsNatEnabled                  pulumi.BoolPtrInput
	Name                          pulumi.StringPtrInput
	NetworkFunctionChainReference pulumi.StringPtrInput
	NetworkId                     pulumi.IntPtrInput
	ReservedIpAddresses           SubnetV2ReservedIpAddressArrayInput
	SubnetType                    pulumi.StringInput
	VirtualSwitchReference        pulumi.StringPtrInput
	VirtualSwitches               SubnetV2VirtualSwitchArrayInput
	VpcReference                  pulumi.StringPtrInput
	Vpcs                          SubnetV2VpcArrayInput
}

func (SubnetV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetV2Args)(nil)).Elem()
}

type SubnetV2Input interface {
	pulumi.Input

	ToSubnetV2Output() SubnetV2Output
	ToSubnetV2OutputWithContext(ctx context.Context) SubnetV2Output
}

func (*SubnetV2) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetV2)(nil)).Elem()
}

func (i *SubnetV2) ToSubnetV2Output() SubnetV2Output {
	return i.ToSubnetV2OutputWithContext(context.Background())
}

func (i *SubnetV2) ToSubnetV2OutputWithContext(ctx context.Context) SubnetV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetV2Output)
}

// SubnetV2ArrayInput is an input type that accepts SubnetV2Array and SubnetV2ArrayOutput values.
// You can construct a concrete instance of `SubnetV2ArrayInput` via:
//
//	SubnetV2Array{ SubnetV2Args{...} }
type SubnetV2ArrayInput interface {
	pulumi.Input

	ToSubnetV2ArrayOutput() SubnetV2ArrayOutput
	ToSubnetV2ArrayOutputWithContext(context.Context) SubnetV2ArrayOutput
}

type SubnetV2Array []SubnetV2Input

func (SubnetV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetV2)(nil)).Elem()
}

func (i SubnetV2Array) ToSubnetV2ArrayOutput() SubnetV2ArrayOutput {
	return i.ToSubnetV2ArrayOutputWithContext(context.Background())
}

func (i SubnetV2Array) ToSubnetV2ArrayOutputWithContext(ctx context.Context) SubnetV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetV2ArrayOutput)
}

// SubnetV2MapInput is an input type that accepts SubnetV2Map and SubnetV2MapOutput values.
// You can construct a concrete instance of `SubnetV2MapInput` via:
//
//	SubnetV2Map{ "key": SubnetV2Args{...} }
type SubnetV2MapInput interface {
	pulumi.Input

	ToSubnetV2MapOutput() SubnetV2MapOutput
	ToSubnetV2MapOutputWithContext(context.Context) SubnetV2MapOutput
}

type SubnetV2Map map[string]SubnetV2Input

func (SubnetV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetV2)(nil)).Elem()
}

func (i SubnetV2Map) ToSubnetV2MapOutput() SubnetV2MapOutput {
	return i.ToSubnetV2MapOutputWithContext(context.Background())
}

func (i SubnetV2Map) ToSubnetV2MapOutputWithContext(ctx context.Context) SubnetV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetV2MapOutput)
}

type SubnetV2Output struct{ *pulumi.OutputState }

func (SubnetV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetV2)(nil)).Elem()
}

func (o SubnetV2Output) ToSubnetV2Output() SubnetV2Output {
	return o
}

func (o SubnetV2Output) ToSubnetV2OutputWithContext(ctx context.Context) SubnetV2Output {
	return o
}

func (o SubnetV2Output) BridgeName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.BridgeName }).(pulumi.StringOutput)
}

func (o SubnetV2Output) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o SubnetV2Output) ClusterReference() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.ClusterReference }).(pulumi.StringOutput)
}

func (o SubnetV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SubnetV2Output) DhcpOptions() SubnetV2DhcpOptionArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2DhcpOptionArrayOutput { return v.DhcpOptions }).(SubnetV2DhcpOptionArrayOutput)
}

func (o SubnetV2Output) DynamicIpAddresses() SubnetV2DynamicIpAddressArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2DynamicIpAddressArrayOutput { return v.DynamicIpAddresses }).(SubnetV2DynamicIpAddressArrayOutput)
}

func (o SubnetV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

func (o SubnetV2Output) HypervisorType() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.HypervisorType }).(pulumi.StringOutput)
}

func (o SubnetV2Output) IpConfigs() SubnetV2IpConfigArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2IpConfigArrayOutput { return v.IpConfigs }).(SubnetV2IpConfigArrayOutput)
}

func (o SubnetV2Output) IpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.IpPrefix }).(pulumi.StringOutput)
}

func (o SubnetV2Output) IpUsages() SubnetV2IpUsageArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2IpUsageArrayOutput { return v.IpUsages }).(SubnetV2IpUsageArrayOutput)
}

func (o SubnetV2Output) IsAdvancedNetworking() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.BoolOutput { return v.IsAdvancedNetworking }).(pulumi.BoolOutput)
}

func (o SubnetV2Output) IsExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.BoolOutput { return v.IsExternal }).(pulumi.BoolOutput)
}

func (o SubnetV2Output) IsNatEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.BoolOutput { return v.IsNatEnabled }).(pulumi.BoolOutput)
}

func (o SubnetV2Output) Links() SubnetV2LinkArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2LinkArrayOutput { return v.Links }).(SubnetV2LinkArrayOutput)
}

func (o SubnetV2Output) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.MigrationState }).(pulumi.StringOutput)
}

func (o SubnetV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SubnetV2Output) NetworkFunctionChainReference() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.NetworkFunctionChainReference }).(pulumi.StringOutput)
}

func (o SubnetV2Output) NetworkId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.IntPtrOutput { return v.NetworkId }).(pulumi.IntPtrOutput)
}

func (o SubnetV2Output) ReservedIpAddresses() SubnetV2ReservedIpAddressArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2ReservedIpAddressArrayOutput { return v.ReservedIpAddresses }).(SubnetV2ReservedIpAddressArrayOutput)
}

func (o SubnetV2Output) SubnetType() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.SubnetType }).(pulumi.StringOutput)
}

func (o SubnetV2Output) VirtualSwitchReference() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.VirtualSwitchReference }).(pulumi.StringOutput)
}

func (o SubnetV2Output) VirtualSwitches() SubnetV2VirtualSwitchArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2VirtualSwitchArrayOutput { return v.VirtualSwitches }).(SubnetV2VirtualSwitchArrayOutput)
}

func (o SubnetV2Output) VpcReference() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetV2) pulumi.StringOutput { return v.VpcReference }).(pulumi.StringOutput)
}

func (o SubnetV2Output) Vpcs() SubnetV2VpcArrayOutput {
	return o.ApplyT(func(v *SubnetV2) SubnetV2VpcArrayOutput { return v.Vpcs }).(SubnetV2VpcArrayOutput)
}

type SubnetV2ArrayOutput struct{ *pulumi.OutputState }

func (SubnetV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetV2)(nil)).Elem()
}

func (o SubnetV2ArrayOutput) ToSubnetV2ArrayOutput() SubnetV2ArrayOutput {
	return o
}

func (o SubnetV2ArrayOutput) ToSubnetV2ArrayOutputWithContext(ctx context.Context) SubnetV2ArrayOutput {
	return o
}

func (o SubnetV2ArrayOutput) Index(i pulumi.IntInput) SubnetV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubnetV2 {
		return vs[0].([]*SubnetV2)[vs[1].(int)]
	}).(SubnetV2Output)
}

type SubnetV2MapOutput struct{ *pulumi.OutputState }

func (SubnetV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetV2)(nil)).Elem()
}

func (o SubnetV2MapOutput) ToSubnetV2MapOutput() SubnetV2MapOutput {
	return o
}

func (o SubnetV2MapOutput) ToSubnetV2MapOutputWithContext(ctx context.Context) SubnetV2MapOutput {
	return o
}

func (o SubnetV2MapOutput) MapIndex(k pulumi.StringInput) SubnetV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubnetV2 {
		return vs[0].(map[string]*SubnetV2)[vs[1].(string)]
	}).(SubnetV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetV2Input)(nil)).Elem(), &SubnetV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetV2ArrayInput)(nil)).Elem(), SubnetV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetV2MapInput)(nil)).Elem(), SubnetV2Map{})
	pulumi.RegisterOutputType(SubnetV2Output{})
	pulumi.RegisterOutputType(SubnetV2ArrayOutput{})
	pulumi.RegisterOutputType(SubnetV2MapOutput{})
}
