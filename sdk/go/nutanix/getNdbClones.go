// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all the clone present in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetNdbClones(ctx, &nutanix.GetNdbClonesArgs{
//				Filters: []nutanix.GetNdbClonesFilter{
//					{
//						Detailed: pulumi.StringRef("true"),
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNdbClones(ctx *pulumi.Context, args *GetNdbClonesArgs, opts ...pulumi.InvokeOption) (*GetNdbClonesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNdbClonesResult
	err := ctx.Invoke("nutanix:index/getNdbClones:getNdbClones", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbClones.
type GetNdbClonesArgs struct {
	// Fetches the clone info based on given params
	Filters []GetNdbClonesFilter `pulumi:"filters"`
}

// A collection of values returned by getNdbClones.
type GetNdbClonesResult struct {
	// List of clones based on filters
	Clones  []GetNdbClonesClone  `pulumi:"clones"`
	Filters []GetNdbClonesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetNdbClonesOutput(ctx *pulumi.Context, args GetNdbClonesOutputArgs, opts ...pulumi.InvokeOption) GetNdbClonesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNdbClonesResultOutput, error) {
			args := v.(GetNdbClonesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getNdbClones:getNdbClones", args, GetNdbClonesResultOutput{}, options).(GetNdbClonesResultOutput), nil
		}).(GetNdbClonesResultOutput)
}

// A collection of arguments for invoking getNdbClones.
type GetNdbClonesOutputArgs struct {
	// Fetches the clone info based on given params
	Filters GetNdbClonesFilterArrayInput `pulumi:"filters"`
}

func (GetNdbClonesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbClonesArgs)(nil)).Elem()
}

// A collection of values returned by getNdbClones.
type GetNdbClonesResultOutput struct{ *pulumi.OutputState }

func (GetNdbClonesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbClonesResult)(nil)).Elem()
}

func (o GetNdbClonesResultOutput) ToGetNdbClonesResultOutput() GetNdbClonesResultOutput {
	return o
}

func (o GetNdbClonesResultOutput) ToGetNdbClonesResultOutputWithContext(ctx context.Context) GetNdbClonesResultOutput {
	return o
}

// List of clones based on filters
func (o GetNdbClonesResultOutput) Clones() GetNdbClonesCloneArrayOutput {
	return o.ApplyT(func(v GetNdbClonesResult) []GetNdbClonesClone { return v.Clones }).(GetNdbClonesCloneArrayOutput)
}

func (o GetNdbClonesResultOutput) Filters() GetNdbClonesFilterArrayOutput {
	return o.ApplyT(func(v GetNdbClonesResult) []GetNdbClonesFilter { return v.Filters }).(GetNdbClonesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNdbClonesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbClonesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNdbClonesResultOutput{})
}
