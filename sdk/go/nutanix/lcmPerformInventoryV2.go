// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Perform an inventory operation to identify/scan entities on the cluster that can be updated through LCM.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// perform inventory
//			_, err := nutanix.NewLcmPerformInventoryV2(ctx, "inventory", &nutanix.LcmPerformInventoryV2Args{
//				XClusterId: pulumi.String("0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LcmPerformInventoryV2 struct {
	pulumi.CustomResourceState

	// Cluster uuid on which the resource is present or operation is being performed.
	//
	// See detailed information in [Nutanix LCM Perform Inventory v4](https://developers.nutanix.com/api-reference?namespace=lifecycle&version=v4.0#tag/Inventory/operation/performInventory)
	XClusterId pulumi.StringPtrOutput `pulumi:"xClusterId"`
}

// NewLcmPerformInventoryV2 registers a new resource with the given unique name, arguments, and options.
func NewLcmPerformInventoryV2(ctx *pulumi.Context,
	name string, args *LcmPerformInventoryV2Args, opts ...pulumi.ResourceOption) (*LcmPerformInventoryV2, error) {
	if args == nil {
		args = &LcmPerformInventoryV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LcmPerformInventoryV2
	err := ctx.RegisterResource("nutanix:index/lcmPerformInventoryV2:LcmPerformInventoryV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLcmPerformInventoryV2 gets an existing LcmPerformInventoryV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLcmPerformInventoryV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LcmPerformInventoryV2State, opts ...pulumi.ResourceOption) (*LcmPerformInventoryV2, error) {
	var resource LcmPerformInventoryV2
	err := ctx.ReadResource("nutanix:index/lcmPerformInventoryV2:LcmPerformInventoryV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LcmPerformInventoryV2 resources.
type lcmPerformInventoryV2State struct {
	// Cluster uuid on which the resource is present or operation is being performed.
	//
	// See detailed information in [Nutanix LCM Perform Inventory v4](https://developers.nutanix.com/api-reference?namespace=lifecycle&version=v4.0#tag/Inventory/operation/performInventory)
	XClusterId *string `pulumi:"xClusterId"`
}

type LcmPerformInventoryV2State struct {
	// Cluster uuid on which the resource is present or operation is being performed.
	//
	// See detailed information in [Nutanix LCM Perform Inventory v4](https://developers.nutanix.com/api-reference?namespace=lifecycle&version=v4.0#tag/Inventory/operation/performInventory)
	XClusterId pulumi.StringPtrInput
}

func (LcmPerformInventoryV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*lcmPerformInventoryV2State)(nil)).Elem()
}

type lcmPerformInventoryV2Args struct {
	// Cluster uuid on which the resource is present or operation is being performed.
	//
	// See detailed information in [Nutanix LCM Perform Inventory v4](https://developers.nutanix.com/api-reference?namespace=lifecycle&version=v4.0#tag/Inventory/operation/performInventory)
	XClusterId *string `pulumi:"xClusterId"`
}

// The set of arguments for constructing a LcmPerformInventoryV2 resource.
type LcmPerformInventoryV2Args struct {
	// Cluster uuid on which the resource is present or operation is being performed.
	//
	// See detailed information in [Nutanix LCM Perform Inventory v4](https://developers.nutanix.com/api-reference?namespace=lifecycle&version=v4.0#tag/Inventory/operation/performInventory)
	XClusterId pulumi.StringPtrInput
}

func (LcmPerformInventoryV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*lcmPerformInventoryV2Args)(nil)).Elem()
}

type LcmPerformInventoryV2Input interface {
	pulumi.Input

	ToLcmPerformInventoryV2Output() LcmPerformInventoryV2Output
	ToLcmPerformInventoryV2OutputWithContext(ctx context.Context) LcmPerformInventoryV2Output
}

func (*LcmPerformInventoryV2) ElementType() reflect.Type {
	return reflect.TypeOf((**LcmPerformInventoryV2)(nil)).Elem()
}

func (i *LcmPerformInventoryV2) ToLcmPerformInventoryV2Output() LcmPerformInventoryV2Output {
	return i.ToLcmPerformInventoryV2OutputWithContext(context.Background())
}

func (i *LcmPerformInventoryV2) ToLcmPerformInventoryV2OutputWithContext(ctx context.Context) LcmPerformInventoryV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(LcmPerformInventoryV2Output)
}

// LcmPerformInventoryV2ArrayInput is an input type that accepts LcmPerformInventoryV2Array and LcmPerformInventoryV2ArrayOutput values.
// You can construct a concrete instance of `LcmPerformInventoryV2ArrayInput` via:
//
//	LcmPerformInventoryV2Array{ LcmPerformInventoryV2Args{...} }
type LcmPerformInventoryV2ArrayInput interface {
	pulumi.Input

	ToLcmPerformInventoryV2ArrayOutput() LcmPerformInventoryV2ArrayOutput
	ToLcmPerformInventoryV2ArrayOutputWithContext(context.Context) LcmPerformInventoryV2ArrayOutput
}

type LcmPerformInventoryV2Array []LcmPerformInventoryV2Input

func (LcmPerformInventoryV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LcmPerformInventoryV2)(nil)).Elem()
}

func (i LcmPerformInventoryV2Array) ToLcmPerformInventoryV2ArrayOutput() LcmPerformInventoryV2ArrayOutput {
	return i.ToLcmPerformInventoryV2ArrayOutputWithContext(context.Background())
}

func (i LcmPerformInventoryV2Array) ToLcmPerformInventoryV2ArrayOutputWithContext(ctx context.Context) LcmPerformInventoryV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LcmPerformInventoryV2ArrayOutput)
}

// LcmPerformInventoryV2MapInput is an input type that accepts LcmPerformInventoryV2Map and LcmPerformInventoryV2MapOutput values.
// You can construct a concrete instance of `LcmPerformInventoryV2MapInput` via:
//
//	LcmPerformInventoryV2Map{ "key": LcmPerformInventoryV2Args{...} }
type LcmPerformInventoryV2MapInput interface {
	pulumi.Input

	ToLcmPerformInventoryV2MapOutput() LcmPerformInventoryV2MapOutput
	ToLcmPerformInventoryV2MapOutputWithContext(context.Context) LcmPerformInventoryV2MapOutput
}

type LcmPerformInventoryV2Map map[string]LcmPerformInventoryV2Input

func (LcmPerformInventoryV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LcmPerformInventoryV2)(nil)).Elem()
}

func (i LcmPerformInventoryV2Map) ToLcmPerformInventoryV2MapOutput() LcmPerformInventoryV2MapOutput {
	return i.ToLcmPerformInventoryV2MapOutputWithContext(context.Background())
}

func (i LcmPerformInventoryV2Map) ToLcmPerformInventoryV2MapOutputWithContext(ctx context.Context) LcmPerformInventoryV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LcmPerformInventoryV2MapOutput)
}

type LcmPerformInventoryV2Output struct{ *pulumi.OutputState }

func (LcmPerformInventoryV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**LcmPerformInventoryV2)(nil)).Elem()
}

func (o LcmPerformInventoryV2Output) ToLcmPerformInventoryV2Output() LcmPerformInventoryV2Output {
	return o
}

func (o LcmPerformInventoryV2Output) ToLcmPerformInventoryV2OutputWithContext(ctx context.Context) LcmPerformInventoryV2Output {
	return o
}

// Cluster uuid on which the resource is present or operation is being performed.
//
// See detailed information in [Nutanix LCM Perform Inventory v4](https://developers.nutanix.com/api-reference?namespace=lifecycle&version=v4.0#tag/Inventory/operation/performInventory)
func (o LcmPerformInventoryV2Output) XClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LcmPerformInventoryV2) pulumi.StringPtrOutput { return v.XClusterId }).(pulumi.StringPtrOutput)
}

type LcmPerformInventoryV2ArrayOutput struct{ *pulumi.OutputState }

func (LcmPerformInventoryV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LcmPerformInventoryV2)(nil)).Elem()
}

func (o LcmPerformInventoryV2ArrayOutput) ToLcmPerformInventoryV2ArrayOutput() LcmPerformInventoryV2ArrayOutput {
	return o
}

func (o LcmPerformInventoryV2ArrayOutput) ToLcmPerformInventoryV2ArrayOutputWithContext(ctx context.Context) LcmPerformInventoryV2ArrayOutput {
	return o
}

func (o LcmPerformInventoryV2ArrayOutput) Index(i pulumi.IntInput) LcmPerformInventoryV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LcmPerformInventoryV2 {
		return vs[0].([]*LcmPerformInventoryV2)[vs[1].(int)]
	}).(LcmPerformInventoryV2Output)
}

type LcmPerformInventoryV2MapOutput struct{ *pulumi.OutputState }

func (LcmPerformInventoryV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LcmPerformInventoryV2)(nil)).Elem()
}

func (o LcmPerformInventoryV2MapOutput) ToLcmPerformInventoryV2MapOutput() LcmPerformInventoryV2MapOutput {
	return o
}

func (o LcmPerformInventoryV2MapOutput) ToLcmPerformInventoryV2MapOutputWithContext(ctx context.Context) LcmPerformInventoryV2MapOutput {
	return o
}

func (o LcmPerformInventoryV2MapOutput) MapIndex(k pulumi.StringInput) LcmPerformInventoryV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LcmPerformInventoryV2 {
		return vs[0].(map[string]*LcmPerformInventoryV2)[vs[1].(string)]
	}).(LcmPerformInventoryV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LcmPerformInventoryV2Input)(nil)).Elem(), &LcmPerformInventoryV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*LcmPerformInventoryV2ArrayInput)(nil)).Elem(), LcmPerformInventoryV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*LcmPerformInventoryV2MapInput)(nil)).Elem(), LcmPerformInventoryV2Map{})
	pulumi.RegisterOutputType(LcmPerformInventoryV2Output{})
	pulumi.RegisterOutputType(LcmPerformInventoryV2ArrayOutput{})
	pulumi.RegisterOutputType(LcmPerformInventoryV2MapOutput{})
}
