// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create SLAs based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbSla(ctx, "sla", &nutanix.NdbSlaArgs{
//				ContinuousRetention: pulumi.Int(30),
//				DailyRetention:      pulumi.Int(3),
//				Description:         pulumi.String("here goes description"),
//				MonthlyRetention:    pulumi.Int(1),
//				QuarterlyRetention:  pulumi.Int(1),
//				WeeklyRetention:     pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbSla struct {
	pulumi.CustomResourceState

	// Duration in days for which transaction logs are retained in NDB.
	ContinuousRetention pulumi.IntPtrOutput `pulumi:"continuousRetention"`
	// slas current frequency
	CurrentActiveFrequency pulumi.StringOutput `pulumi:"currentActiveFrequency"`
	// Duration in days for which a daily snapshot must be retained in NDB.
	DailyRetention pulumi.IntPtrOutput `pulumi:"dailyRetention"`
	// sla created data
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// sla last modified date
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// Description of profile
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Duration in months for which a monthly snapshot must be retained in NDB
	MonthlyRetention pulumi.IntPtrOutput `pulumi:"monthlyRetention"`
	// Name of profile
	Name pulumi.StringOutput `pulumi:"name"`
	// owner id
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// pitr enabled
	PitrEnabled pulumi.BoolOutput `pulumi:"pitrEnabled"`
	// Duration in number of quarters for which a quarterly snapshot must be retained in NDB.
	QuarterlyRetention pulumi.IntPtrOutput `pulumi:"quarterlyRetention"`
	// reference count
	ReferenceCount pulumi.IntOutput `pulumi:"referenceCount"`
	// refers whether sla is custom or built-in
	SystemSla pulumi.BoolOutput `pulumi:"systemSla"`
	// name of sla
	UniqueName pulumi.StringOutput `pulumi:"uniqueName"`
	// Duration in weeks for which a weekly snapshot must be retained in NDB.
	WeeklyRetention pulumi.IntPtrOutput `pulumi:"weeklyRetention"`
	// Not supported as of now.
	YearlyRetention pulumi.IntOutput `pulumi:"yearlyRetention"`
}

// NewNdbSla registers a new resource with the given unique name, arguments, and options.
func NewNdbSla(ctx *pulumi.Context,
	name string, args *NdbSlaArgs, opts ...pulumi.ResourceOption) (*NdbSla, error) {
	if args == nil {
		args = &NdbSlaArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbSla
	err := ctx.RegisterResource("nutanix:index/ndbSla:NdbSla", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbSla gets an existing NdbSla resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbSla(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbSlaState, opts ...pulumi.ResourceOption) (*NdbSla, error) {
	var resource NdbSla
	err := ctx.ReadResource("nutanix:index/ndbSla:NdbSla", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbSla resources.
type ndbSlaState struct {
	// Duration in days for which transaction logs are retained in NDB.
	ContinuousRetention *int `pulumi:"continuousRetention"`
	// slas current frequency
	CurrentActiveFrequency *string `pulumi:"currentActiveFrequency"`
	// Duration in days for which a daily snapshot must be retained in NDB.
	DailyRetention *int `pulumi:"dailyRetention"`
	// sla created data
	DateCreated *string `pulumi:"dateCreated"`
	// sla last modified date
	DateModified *string `pulumi:"dateModified"`
	// Description of profile
	Description *string `pulumi:"description"`
	// Duration in months for which a monthly snapshot must be retained in NDB
	MonthlyRetention *int `pulumi:"monthlyRetention"`
	// Name of profile
	Name *string `pulumi:"name"`
	// owner id
	OwnerId *string `pulumi:"ownerId"`
	// pitr enabled
	PitrEnabled *bool `pulumi:"pitrEnabled"`
	// Duration in number of quarters for which a quarterly snapshot must be retained in NDB.
	QuarterlyRetention *int `pulumi:"quarterlyRetention"`
	// reference count
	ReferenceCount *int `pulumi:"referenceCount"`
	// refers whether sla is custom or built-in
	SystemSla *bool `pulumi:"systemSla"`
	// name of sla
	UniqueName *string `pulumi:"uniqueName"`
	// Duration in weeks for which a weekly snapshot must be retained in NDB.
	WeeklyRetention *int `pulumi:"weeklyRetention"`
	// Not supported as of now.
	YearlyRetention *int `pulumi:"yearlyRetention"`
}

type NdbSlaState struct {
	// Duration in days for which transaction logs are retained in NDB.
	ContinuousRetention pulumi.IntPtrInput
	// slas current frequency
	CurrentActiveFrequency pulumi.StringPtrInput
	// Duration in days for which a daily snapshot must be retained in NDB.
	DailyRetention pulumi.IntPtrInput
	// sla created data
	DateCreated pulumi.StringPtrInput
	// sla last modified date
	DateModified pulumi.StringPtrInput
	// Description of profile
	Description pulumi.StringPtrInput
	// Duration in months for which a monthly snapshot must be retained in NDB
	MonthlyRetention pulumi.IntPtrInput
	// Name of profile
	Name pulumi.StringPtrInput
	// owner id
	OwnerId pulumi.StringPtrInput
	// pitr enabled
	PitrEnabled pulumi.BoolPtrInput
	// Duration in number of quarters for which a quarterly snapshot must be retained in NDB.
	QuarterlyRetention pulumi.IntPtrInput
	// reference count
	ReferenceCount pulumi.IntPtrInput
	// refers whether sla is custom or built-in
	SystemSla pulumi.BoolPtrInput
	// name of sla
	UniqueName pulumi.StringPtrInput
	// Duration in weeks for which a weekly snapshot must be retained in NDB.
	WeeklyRetention pulumi.IntPtrInput
	// Not supported as of now.
	YearlyRetention pulumi.IntPtrInput
}

func (NdbSlaState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbSlaState)(nil)).Elem()
}

type ndbSlaArgs struct {
	// Duration in days for which transaction logs are retained in NDB.
	ContinuousRetention *int `pulumi:"continuousRetention"`
	// Duration in days for which a daily snapshot must be retained in NDB.
	DailyRetention *int `pulumi:"dailyRetention"`
	// Description of profile
	Description *string `pulumi:"description"`
	// Duration in months for which a monthly snapshot must be retained in NDB
	MonthlyRetention *int `pulumi:"monthlyRetention"`
	// Name of profile
	Name *string `pulumi:"name"`
	// Duration in number of quarters for which a quarterly snapshot must be retained in NDB.
	QuarterlyRetention *int `pulumi:"quarterlyRetention"`
	// Duration in weeks for which a weekly snapshot must be retained in NDB.
	WeeklyRetention *int `pulumi:"weeklyRetention"`
	// Not supported as of now.
	YearlyRetention *int `pulumi:"yearlyRetention"`
}

// The set of arguments for constructing a NdbSla resource.
type NdbSlaArgs struct {
	// Duration in days for which transaction logs are retained in NDB.
	ContinuousRetention pulumi.IntPtrInput
	// Duration in days for which a daily snapshot must be retained in NDB.
	DailyRetention pulumi.IntPtrInput
	// Description of profile
	Description pulumi.StringPtrInput
	// Duration in months for which a monthly snapshot must be retained in NDB
	MonthlyRetention pulumi.IntPtrInput
	// Name of profile
	Name pulumi.StringPtrInput
	// Duration in number of quarters for which a quarterly snapshot must be retained in NDB.
	QuarterlyRetention pulumi.IntPtrInput
	// Duration in weeks for which a weekly snapshot must be retained in NDB.
	WeeklyRetention pulumi.IntPtrInput
	// Not supported as of now.
	YearlyRetention pulumi.IntPtrInput
}

func (NdbSlaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbSlaArgs)(nil)).Elem()
}

type NdbSlaInput interface {
	pulumi.Input

	ToNdbSlaOutput() NdbSlaOutput
	ToNdbSlaOutputWithContext(ctx context.Context) NdbSlaOutput
}

func (*NdbSla) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbSla)(nil)).Elem()
}

func (i *NdbSla) ToNdbSlaOutput() NdbSlaOutput {
	return i.ToNdbSlaOutputWithContext(context.Background())
}

func (i *NdbSla) ToNdbSlaOutputWithContext(ctx context.Context) NdbSlaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSlaOutput)
}

// NdbSlaArrayInput is an input type that accepts NdbSlaArray and NdbSlaArrayOutput values.
// You can construct a concrete instance of `NdbSlaArrayInput` via:
//
//	NdbSlaArray{ NdbSlaArgs{...} }
type NdbSlaArrayInput interface {
	pulumi.Input

	ToNdbSlaArrayOutput() NdbSlaArrayOutput
	ToNdbSlaArrayOutputWithContext(context.Context) NdbSlaArrayOutput
}

type NdbSlaArray []NdbSlaInput

func (NdbSlaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbSla)(nil)).Elem()
}

func (i NdbSlaArray) ToNdbSlaArrayOutput() NdbSlaArrayOutput {
	return i.ToNdbSlaArrayOutputWithContext(context.Background())
}

func (i NdbSlaArray) ToNdbSlaArrayOutputWithContext(ctx context.Context) NdbSlaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSlaArrayOutput)
}

// NdbSlaMapInput is an input type that accepts NdbSlaMap and NdbSlaMapOutput values.
// You can construct a concrete instance of `NdbSlaMapInput` via:
//
//	NdbSlaMap{ "key": NdbSlaArgs{...} }
type NdbSlaMapInput interface {
	pulumi.Input

	ToNdbSlaMapOutput() NdbSlaMapOutput
	ToNdbSlaMapOutputWithContext(context.Context) NdbSlaMapOutput
}

type NdbSlaMap map[string]NdbSlaInput

func (NdbSlaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbSla)(nil)).Elem()
}

func (i NdbSlaMap) ToNdbSlaMapOutput() NdbSlaMapOutput {
	return i.ToNdbSlaMapOutputWithContext(context.Background())
}

func (i NdbSlaMap) ToNdbSlaMapOutputWithContext(ctx context.Context) NdbSlaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSlaMapOutput)
}

type NdbSlaOutput struct{ *pulumi.OutputState }

func (NdbSlaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbSla)(nil)).Elem()
}

func (o NdbSlaOutput) ToNdbSlaOutput() NdbSlaOutput {
	return o
}

func (o NdbSlaOutput) ToNdbSlaOutputWithContext(ctx context.Context) NdbSlaOutput {
	return o
}

// Duration in days for which transaction logs are retained in NDB.
func (o NdbSlaOutput) ContinuousRetention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.IntPtrOutput { return v.ContinuousRetention }).(pulumi.IntPtrOutput)
}

// slas current frequency
func (o NdbSlaOutput) CurrentActiveFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.StringOutput { return v.CurrentActiveFrequency }).(pulumi.StringOutput)
}

// Duration in days for which a daily snapshot must be retained in NDB.
func (o NdbSlaOutput) DailyRetention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.IntPtrOutput { return v.DailyRetention }).(pulumi.IntPtrOutput)
}

// sla created data
func (o NdbSlaOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// sla last modified date
func (o NdbSlaOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// Description of profile
func (o NdbSlaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Duration in months for which a monthly snapshot must be retained in NDB
func (o NdbSlaOutput) MonthlyRetention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.IntPtrOutput { return v.MonthlyRetention }).(pulumi.IntPtrOutput)
}

// Name of profile
func (o NdbSlaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// owner id
func (o NdbSlaOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// pitr enabled
func (o NdbSlaOutput) PitrEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.BoolOutput { return v.PitrEnabled }).(pulumi.BoolOutput)
}

// Duration in number of quarters for which a quarterly snapshot must be retained in NDB.
func (o NdbSlaOutput) QuarterlyRetention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.IntPtrOutput { return v.QuarterlyRetention }).(pulumi.IntPtrOutput)
}

// reference count
func (o NdbSlaOutput) ReferenceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.IntOutput { return v.ReferenceCount }).(pulumi.IntOutput)
}

// refers whether sla is custom or built-in
func (o NdbSlaOutput) SystemSla() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.BoolOutput { return v.SystemSla }).(pulumi.BoolOutput)
}

// name of sla
func (o NdbSlaOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.StringOutput { return v.UniqueName }).(pulumi.StringOutput)
}

// Duration in weeks for which a weekly snapshot must be retained in NDB.
func (o NdbSlaOutput) WeeklyRetention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.IntPtrOutput { return v.WeeklyRetention }).(pulumi.IntPtrOutput)
}

// Not supported as of now.
func (o NdbSlaOutput) YearlyRetention() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbSla) pulumi.IntOutput { return v.YearlyRetention }).(pulumi.IntOutput)
}

type NdbSlaArrayOutput struct{ *pulumi.OutputState }

func (NdbSlaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbSla)(nil)).Elem()
}

func (o NdbSlaArrayOutput) ToNdbSlaArrayOutput() NdbSlaArrayOutput {
	return o
}

func (o NdbSlaArrayOutput) ToNdbSlaArrayOutputWithContext(ctx context.Context) NdbSlaArrayOutput {
	return o
}

func (o NdbSlaArrayOutput) Index(i pulumi.IntInput) NdbSlaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbSla {
		return vs[0].([]*NdbSla)[vs[1].(int)]
	}).(NdbSlaOutput)
}

type NdbSlaMapOutput struct{ *pulumi.OutputState }

func (NdbSlaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbSla)(nil)).Elem()
}

func (o NdbSlaMapOutput) ToNdbSlaMapOutput() NdbSlaMapOutput {
	return o
}

func (o NdbSlaMapOutput) ToNdbSlaMapOutputWithContext(ctx context.Context) NdbSlaMapOutput {
	return o
}

func (o NdbSlaMapOutput) MapIndex(k pulumi.StringInput) NdbSlaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbSla {
		return vs[0].(map[string]*NdbSla)[vs[1].(string)]
	}).(NdbSlaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSlaInput)(nil)).Elem(), &NdbSla{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSlaArrayInput)(nil)).Elem(), NdbSlaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSlaMapInput)(nil)).Elem(), NdbSlaMap{})
	pulumi.RegisterOutputType(NdbSlaOutput{})
	pulumi.RegisterOutputType(NdbSlaArrayOutput{})
	pulumi.RegisterOutputType(NdbSlaMapOutput{})
}
