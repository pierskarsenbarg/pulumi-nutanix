// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource to Installs Nutanix Guest Tools in a Virtual Machine by using the provided credentials.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNgtInstallationV2(ctx, "example", &nutanix.NgtInstallationV2Args{
//				Capablities: pulumi.StringArray{
//					pulumi.String("VSS_SNAPSHOT"),
//				},
//				Credential: &nutanix.NgtInstallationV2CredentialArgs{
//					Password: pulumi.String("pass.1234567890"),
//					Username: pulumi.String("username"),
//				},
//				ExtId: pulumi.String("ab520e1d-4950-1db1-917f-a9e2ea35b8e3"),
//				RebootPreference: &nutanix.NgtInstallationV2RebootPreferenceArgs{
//					ScheduleType: pulumi.String("IMMEDIATE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NgtInstallationV2 struct {
	pulumi.CustomResourceState

	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion pulumi.StringOutput `pulumi:"availableVersion"`
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayOutput `pulumi:"capablities"`
	// Sign in credentials for the server.
	Credential NgtInstallationV2CredentialPtrOutput `pulumi:"credential"`
	// uuid of the Virtual Machine.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// Version of the operating system on the VM.
	GuestOsVersion pulumi.StringOutput `pulumi:"guestOsVersion"`
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled pulumi.BoolOutput `pulumi:"isInstalled"`
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted pulumi.BoolOutput `pulumi:"isIsoInserted"`
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable pulumi.BoolOutput `pulumi:"isReachable"`
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled pulumi.BoolOutput `pulumi:"isVmMobilityDriversInstalled"`
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable pulumi.BoolOutput `pulumi:"isVssSnapshotCapable"`
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference NgtInstallationV2RebootPreferencePtrOutput `pulumi:"rebootPreference"`
	// Version of Nutanix Guest Tools installed on the VM.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewNgtInstallationV2 registers a new resource with the given unique name, arguments, and options.
func NewNgtInstallationV2(ctx *pulumi.Context,
	name string, args *NgtInstallationV2Args, opts ...pulumi.ResourceOption) (*NgtInstallationV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgtInstallationV2
	err := ctx.RegisterResource("nutanix:index/ngtInstallationV2:NgtInstallationV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgtInstallationV2 gets an existing NgtInstallationV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgtInstallationV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgtInstallationV2State, opts ...pulumi.ResourceOption) (*NgtInstallationV2, error) {
	var resource NgtInstallationV2
	err := ctx.ReadResource("nutanix:index/ngtInstallationV2:NgtInstallationV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgtInstallationV2 resources.
type ngtInstallationV2State struct {
	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion *string `pulumi:"availableVersion"`
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities []string `pulumi:"capablities"`
	// Sign in credentials for the server.
	Credential *NgtInstallationV2Credential `pulumi:"credential"`
	// uuid of the Virtual Machine.
	ExtId *string `pulumi:"extId"`
	// Version of the operating system on the VM.
	GuestOsVersion *string `pulumi:"guestOsVersion"`
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled *bool `pulumi:"isInstalled"`
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted *bool `pulumi:"isIsoInserted"`
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable *bool `pulumi:"isReachable"`
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled *bool `pulumi:"isVmMobilityDriversInstalled"`
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable *bool `pulumi:"isVssSnapshotCapable"`
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference *NgtInstallationV2RebootPreference `pulumi:"rebootPreference"`
	// Version of Nutanix Guest Tools installed on the VM.
	Version *string `pulumi:"version"`
}

type NgtInstallationV2State struct {
	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion pulumi.StringPtrInput
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayInput
	// Sign in credentials for the server.
	Credential NgtInstallationV2CredentialPtrInput
	// uuid of the Virtual Machine.
	ExtId pulumi.StringPtrInput
	// Version of the operating system on the VM.
	GuestOsVersion pulumi.StringPtrInput
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled pulumi.BoolPtrInput
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled pulumi.BoolPtrInput
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted pulumi.BoolPtrInput
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable pulumi.BoolPtrInput
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled pulumi.BoolPtrInput
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable pulumi.BoolPtrInput
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference NgtInstallationV2RebootPreferencePtrInput
	// Version of Nutanix Guest Tools installed on the VM.
	Version pulumi.StringPtrInput
}

func (NgtInstallationV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*ngtInstallationV2State)(nil)).Elem()
}

type ngtInstallationV2Args struct {
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities []string `pulumi:"capablities"`
	// Sign in credentials for the server.
	Credential *NgtInstallationV2Credential `pulumi:"credential"`
	// uuid of the Virtual Machine.
	ExtId string `pulumi:"extId"`
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference *NgtInstallationV2RebootPreference `pulumi:"rebootPreference"`
}

// The set of arguments for constructing a NgtInstallationV2 resource.
type NgtInstallationV2Args struct {
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayInput
	// Sign in credentials for the server.
	Credential NgtInstallationV2CredentialPtrInput
	// uuid of the Virtual Machine.
	ExtId pulumi.StringInput
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled pulumi.BoolPtrInput
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference NgtInstallationV2RebootPreferencePtrInput
}

func (NgtInstallationV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ngtInstallationV2Args)(nil)).Elem()
}

type NgtInstallationV2Input interface {
	pulumi.Input

	ToNgtInstallationV2Output() NgtInstallationV2Output
	ToNgtInstallationV2OutputWithContext(ctx context.Context) NgtInstallationV2Output
}

func (*NgtInstallationV2) ElementType() reflect.Type {
	return reflect.TypeOf((**NgtInstallationV2)(nil)).Elem()
}

func (i *NgtInstallationV2) ToNgtInstallationV2Output() NgtInstallationV2Output {
	return i.ToNgtInstallationV2OutputWithContext(context.Background())
}

func (i *NgtInstallationV2) ToNgtInstallationV2OutputWithContext(ctx context.Context) NgtInstallationV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(NgtInstallationV2Output)
}

// NgtInstallationV2ArrayInput is an input type that accepts NgtInstallationV2Array and NgtInstallationV2ArrayOutput values.
// You can construct a concrete instance of `NgtInstallationV2ArrayInput` via:
//
//	NgtInstallationV2Array{ NgtInstallationV2Args{...} }
type NgtInstallationV2ArrayInput interface {
	pulumi.Input

	ToNgtInstallationV2ArrayOutput() NgtInstallationV2ArrayOutput
	ToNgtInstallationV2ArrayOutputWithContext(context.Context) NgtInstallationV2ArrayOutput
}

type NgtInstallationV2Array []NgtInstallationV2Input

func (NgtInstallationV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgtInstallationV2)(nil)).Elem()
}

func (i NgtInstallationV2Array) ToNgtInstallationV2ArrayOutput() NgtInstallationV2ArrayOutput {
	return i.ToNgtInstallationV2ArrayOutputWithContext(context.Background())
}

func (i NgtInstallationV2Array) ToNgtInstallationV2ArrayOutputWithContext(ctx context.Context) NgtInstallationV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgtInstallationV2ArrayOutput)
}

// NgtInstallationV2MapInput is an input type that accepts NgtInstallationV2Map and NgtInstallationV2MapOutput values.
// You can construct a concrete instance of `NgtInstallationV2MapInput` via:
//
//	NgtInstallationV2Map{ "key": NgtInstallationV2Args{...} }
type NgtInstallationV2MapInput interface {
	pulumi.Input

	ToNgtInstallationV2MapOutput() NgtInstallationV2MapOutput
	ToNgtInstallationV2MapOutputWithContext(context.Context) NgtInstallationV2MapOutput
}

type NgtInstallationV2Map map[string]NgtInstallationV2Input

func (NgtInstallationV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgtInstallationV2)(nil)).Elem()
}

func (i NgtInstallationV2Map) ToNgtInstallationV2MapOutput() NgtInstallationV2MapOutput {
	return i.ToNgtInstallationV2MapOutputWithContext(context.Background())
}

func (i NgtInstallationV2Map) ToNgtInstallationV2MapOutputWithContext(ctx context.Context) NgtInstallationV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgtInstallationV2MapOutput)
}

type NgtInstallationV2Output struct{ *pulumi.OutputState }

func (NgtInstallationV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**NgtInstallationV2)(nil)).Elem()
}

func (o NgtInstallationV2Output) ToNgtInstallationV2Output() NgtInstallationV2Output {
	return o
}

func (o NgtInstallationV2Output) ToNgtInstallationV2OutputWithContext(ctx context.Context) NgtInstallationV2Output {
	return o
}

// Version of Nutanix Guest Tools available on the cluster.
func (o NgtInstallationV2Output) AvailableVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.StringOutput { return v.AvailableVersion }).(pulumi.StringOutput)
}

// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
func (o NgtInstallationV2Output) Capablities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.StringArrayOutput { return v.Capablities }).(pulumi.StringArrayOutput)
}

// Sign in credentials for the server.
func (o NgtInstallationV2Output) Credential() NgtInstallationV2CredentialPtrOutput {
	return o.ApplyT(func(v *NgtInstallationV2) NgtInstallationV2CredentialPtrOutput { return v.Credential }).(NgtInstallationV2CredentialPtrOutput)
}

// uuid of the Virtual Machine.
func (o NgtInstallationV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Version of the operating system on the VM.
func (o NgtInstallationV2Output) GuestOsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.StringOutput { return v.GuestOsVersion }).(pulumi.StringOutput)
}

// Indicates whether Nutanix Guest Tools is enabled or not.
func (o NgtInstallationV2Output) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Indicates whether Nutanix Guest Tools is installed on the VM or not.
func (o NgtInstallationV2Output) IsInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.BoolOutput { return v.IsInstalled }).(pulumi.BoolOutput)
}

// Indicates whether Nutanix Guest Tools ISO is inserted or not.
func (o NgtInstallationV2Output) IsIsoInserted() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.BoolOutput { return v.IsIsoInserted }).(pulumi.BoolOutput)
}

// Indicates whether the communication from VM to CVM is active or not.
func (o NgtInstallationV2Output) IsReachable() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.BoolOutput { return v.IsReachable }).(pulumi.BoolOutput)
}

// Indicates whether the VM mobility drivers are installed on the VM or not.
func (o NgtInstallationV2Output) IsVmMobilityDriversInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.BoolOutput { return v.IsVmMobilityDriversInstalled }).(pulumi.BoolOutput)
}

// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
func (o NgtInstallationV2Output) IsVssSnapshotCapable() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.BoolOutput { return v.IsVssSnapshotCapable }).(pulumi.BoolOutput)
}

// The restart schedule after installing or upgrading Nutanix Guest Tools.
func (o NgtInstallationV2Output) RebootPreference() NgtInstallationV2RebootPreferencePtrOutput {
	return o.ApplyT(func(v *NgtInstallationV2) NgtInstallationV2RebootPreferencePtrOutput { return v.RebootPreference }).(NgtInstallationV2RebootPreferencePtrOutput)
}

// Version of Nutanix Guest Tools installed on the VM.
func (o NgtInstallationV2Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInstallationV2) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type NgtInstallationV2ArrayOutput struct{ *pulumi.OutputState }

func (NgtInstallationV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgtInstallationV2)(nil)).Elem()
}

func (o NgtInstallationV2ArrayOutput) ToNgtInstallationV2ArrayOutput() NgtInstallationV2ArrayOutput {
	return o
}

func (o NgtInstallationV2ArrayOutput) ToNgtInstallationV2ArrayOutputWithContext(ctx context.Context) NgtInstallationV2ArrayOutput {
	return o
}

func (o NgtInstallationV2ArrayOutput) Index(i pulumi.IntInput) NgtInstallationV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgtInstallationV2 {
		return vs[0].([]*NgtInstallationV2)[vs[1].(int)]
	}).(NgtInstallationV2Output)
}

type NgtInstallationV2MapOutput struct{ *pulumi.OutputState }

func (NgtInstallationV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgtInstallationV2)(nil)).Elem()
}

func (o NgtInstallationV2MapOutput) ToNgtInstallationV2MapOutput() NgtInstallationV2MapOutput {
	return o
}

func (o NgtInstallationV2MapOutput) ToNgtInstallationV2MapOutputWithContext(ctx context.Context) NgtInstallationV2MapOutput {
	return o
}

func (o NgtInstallationV2MapOutput) MapIndex(k pulumi.StringInput) NgtInstallationV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgtInstallationV2 {
		return vs[0].(map[string]*NgtInstallationV2)[vs[1].(string)]
	}).(NgtInstallationV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgtInstallationV2Input)(nil)).Elem(), &NgtInstallationV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgtInstallationV2ArrayInput)(nil)).Elem(), NgtInstallationV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgtInstallationV2MapInput)(nil)).Elem(), NgtInstallationV2Map{})
	pulumi.RegisterOutputType(NgtInstallationV2Output{})
	pulumi.RegisterOutputType(NgtInstallationV2ArrayOutput{})
	pulumi.RegisterOutputType(NgtInstallationV2MapOutput{})
}
