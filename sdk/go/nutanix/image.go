// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Nutanix Image resource to Create a image.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nutanix.NewImage(ctx, "test", &nutanix.ImageArgs{
// 			Description: pulumi.String("Ubuntu"),
// 			SourceUri:   pulumi.String("http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Image struct {
	pulumi.CustomResourceState

	// The version of the API.
	ApiVersion                   pulumi.StringOutput                         `pulumi:"apiVersion"`
	Architecture                 pulumi.StringOutput                         `pulumi:"architecture"`
	AvailabilityZoneReference    pulumi.StringMapOutput                      `pulumi:"availabilityZoneReference"`
	Categories                   ImageCategoryArrayOutput                    `pulumi:"categories"`
	Checksum                     pulumi.StringMapOutput                      `pulumi:"checksum"`
	ClusterName                  pulumi.StringOutput                         `pulumi:"clusterName"`
	ClusterReferences            ImageClusterReferenceArrayOutput            `pulumi:"clusterReferences"`
	ClusterUuid                  pulumi.StringOutput                         `pulumi:"clusterUuid"`
	CurrentClusterReferenceLists ImageCurrentClusterReferenceListArrayOutput `pulumi:"currentClusterReferenceLists"`
	Description                  pulumi.StringOutput                         `pulumi:"description"`
	ImageType                    pulumi.StringOutput                         `pulumi:"imageType"`
	Metadata                     pulumi.StringMapOutput                      `pulumi:"metadata"`
	Name                         pulumi.StringOutput                         `pulumi:"name"`
	OwnerReference               pulumi.StringMapOutput                      `pulumi:"ownerReference"`
	ProjectReference             pulumi.StringMapOutput                      `pulumi:"projectReference"`
	RetrievalUriLists            pulumi.StringArrayOutput                    `pulumi:"retrievalUriLists"`
	SizeBytes                    pulumi.IntOutput                            `pulumi:"sizeBytes"`
	SourcePath                   pulumi.StringOutput                         `pulumi:"sourcePath"`
	SourceUri                    pulumi.StringOutput                         `pulumi:"sourceUri"`
	State                        pulumi.StringOutput                         `pulumi:"state"`
	Version                      pulumi.StringMapOutput                      `pulumi:"version"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		args = &ImageArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("nutanix:index/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("nutanix:index/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// The version of the API.
	ApiVersion                   *string                            `pulumi:"apiVersion"`
	Architecture                 *string                            `pulumi:"architecture"`
	AvailabilityZoneReference    map[string]string                  `pulumi:"availabilityZoneReference"`
	Categories                   []ImageCategory                    `pulumi:"categories"`
	Checksum                     map[string]string                  `pulumi:"checksum"`
	ClusterName                  *string                            `pulumi:"clusterName"`
	ClusterReferences            []ImageClusterReference            `pulumi:"clusterReferences"`
	ClusterUuid                  *string                            `pulumi:"clusterUuid"`
	CurrentClusterReferenceLists []ImageCurrentClusterReferenceList `pulumi:"currentClusterReferenceLists"`
	Description                  *string                            `pulumi:"description"`
	ImageType                    *string                            `pulumi:"imageType"`
	Metadata                     map[string]string                  `pulumi:"metadata"`
	Name                         *string                            `pulumi:"name"`
	OwnerReference               map[string]string                  `pulumi:"ownerReference"`
	ProjectReference             map[string]string                  `pulumi:"projectReference"`
	RetrievalUriLists            []string                           `pulumi:"retrievalUriLists"`
	SizeBytes                    *int                               `pulumi:"sizeBytes"`
	SourcePath                   *string                            `pulumi:"sourcePath"`
	SourceUri                    *string                            `pulumi:"sourceUri"`
	State                        *string                            `pulumi:"state"`
	Version                      map[string]string                  `pulumi:"version"`
}

type ImageState struct {
	// The version of the API.
	ApiVersion                   pulumi.StringPtrInput
	Architecture                 pulumi.StringPtrInput
	AvailabilityZoneReference    pulumi.StringMapInput
	Categories                   ImageCategoryArrayInput
	Checksum                     pulumi.StringMapInput
	ClusterName                  pulumi.StringPtrInput
	ClusterReferences            ImageClusterReferenceArrayInput
	ClusterUuid                  pulumi.StringPtrInput
	CurrentClusterReferenceLists ImageCurrentClusterReferenceListArrayInput
	Description                  pulumi.StringPtrInput
	ImageType                    pulumi.StringPtrInput
	Metadata                     pulumi.StringMapInput
	Name                         pulumi.StringPtrInput
	OwnerReference               pulumi.StringMapInput
	ProjectReference             pulumi.StringMapInput
	RetrievalUriLists            pulumi.StringArrayInput
	SizeBytes                    pulumi.IntPtrInput
	SourcePath                   pulumi.StringPtrInput
	SourceUri                    pulumi.StringPtrInput
	State                        pulumi.StringPtrInput
	Version                      pulumi.StringMapInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	Architecture              *string                 `pulumi:"architecture"`
	AvailabilityZoneReference map[string]string       `pulumi:"availabilityZoneReference"`
	Categories                []ImageCategory         `pulumi:"categories"`
	Checksum                  map[string]string       `pulumi:"checksum"`
	ClusterReferences         []ImageClusterReference `pulumi:"clusterReferences"`
	Description               *string                 `pulumi:"description"`
	ImageType                 *string                 `pulumi:"imageType"`
	Name                      *string                 `pulumi:"name"`
	OwnerReference            map[string]string       `pulumi:"ownerReference"`
	ProjectReference          map[string]string       `pulumi:"projectReference"`
	SourcePath                *string                 `pulumi:"sourcePath"`
	SourceUri                 *string                 `pulumi:"sourceUri"`
	Version                   map[string]string       `pulumi:"version"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	Architecture              pulumi.StringPtrInput
	AvailabilityZoneReference pulumi.StringMapInput
	Categories                ImageCategoryArrayInput
	Checksum                  pulumi.StringMapInput
	ClusterReferences         ImageClusterReferenceArrayInput
	Description               pulumi.StringPtrInput
	ImageType                 pulumi.StringPtrInput
	Name                      pulumi.StringPtrInput
	OwnerReference            pulumi.StringMapInput
	ProjectReference          pulumi.StringMapInput
	SourcePath                pulumi.StringPtrInput
	SourceUri                 pulumi.StringPtrInput
	Version                   pulumi.StringMapInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//          ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//          ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// The version of the API.
func (o ImageOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o ImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

func (o ImageOutput) AvailabilityZoneReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.AvailabilityZoneReference }).(pulumi.StringMapOutput)
}

func (o ImageOutput) Categories() ImageCategoryArrayOutput {
	return o.ApplyT(func(v *Image) ImageCategoryArrayOutput { return v.Categories }).(ImageCategoryArrayOutput)
}

func (o ImageOutput) Checksum() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Checksum }).(pulumi.StringMapOutput)
}

func (o ImageOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ImageOutput) ClusterReferences() ImageClusterReferenceArrayOutput {
	return o.ApplyT(func(v *Image) ImageClusterReferenceArrayOutput { return v.ClusterReferences }).(ImageClusterReferenceArrayOutput)
}

func (o ImageOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ClusterUuid }).(pulumi.StringOutput)
}

func (o ImageOutput) CurrentClusterReferenceLists() ImageCurrentClusterReferenceListArrayOutput {
	return o.ApplyT(func(v *Image) ImageCurrentClusterReferenceListArrayOutput { return v.CurrentClusterReferenceLists }).(ImageCurrentClusterReferenceListArrayOutput)
}

func (o ImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ImageOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

func (o ImageOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImageOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.OwnerReference }).(pulumi.StringMapOutput)
}

func (o ImageOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.ProjectReference }).(pulumi.StringMapOutput)
}

func (o ImageOutput) RetrievalUriLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.RetrievalUriLists }).(pulumi.StringArrayOutput)
}

func (o ImageOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.SizeBytes }).(pulumi.IntOutput)
}

func (o ImageOutput) SourcePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.SourcePath }).(pulumi.StringOutput)
}

func (o ImageOutput) SourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.SourceUri }).(pulumi.StringOutput)
}

func (o ImageOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o ImageOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Version }).(pulumi.StringMapOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
