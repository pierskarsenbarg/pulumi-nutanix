// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Nutanix Image resource to Create a image.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewImage(ctx, "test", &nutanix.ImageArgs{
//				Description: pulumi.String("Ubuntu"),
//				SourceUri:   pulumi.String("http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create image with data_source_reference
//			_, err = nutanix.NewImage(ctx, "createImageWithDataSourceReference", &nutanix.ImageArgs{
//				DataSourceReferences: nutanix.ImageDataSourceReferenceArray{
//					&nutanix.ImageDataSourceReferenceArgs{
//						Kind: pulumi.String("vm_disk"),
//						Uuid: pulumi.String("<uuid of the vm disk>"),
//					},
//				},
//				Description: pulumi.String("Sql Server"),
//				ImageType:   pulumi.String("DISK_IMAGE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Image struct {
	pulumi.CustomResourceState

	// The version of the API.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// - (Optional) The supported CPU architecture for a disk image.
	Architecture pulumi.StringOutput `pulumi:"architecture"`
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference pulumi.StringMapOutput `pulumi:"availabilityZoneReference"`
	// - (Optional) Categories for the image.
	Categories ImageCategoryArrayOutput `pulumi:"categories"`
	// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	Checksum                     pulumi.StringMapOutput                      `pulumi:"checksum"`
	ClusterName                  pulumi.StringOutput                         `pulumi:"clusterName"`
	ClusterReferences            ImageClusterReferenceArrayOutput            `pulumi:"clusterReferences"`
	ClusterUuid                  pulumi.StringOutput                         `pulumi:"clusterUuid"`
	CurrentClusterReferenceLists ImageCurrentClusterReferenceListArrayOutput `pulumi:"currentClusterReferenceLists"`
	// Reference to a data source.
	DataSourceReferences ImageDataSourceReferenceArrayOutput `pulumi:"dataSourceReferences"`
	// - (Optional) A description for image.
	Description pulumi.StringOutput `pulumi:"description"`
	// - (Optional) The type of image.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// - The image kind metadata.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// - (Required) The name for the image.
	Name pulumi.StringOutput `pulumi:"name"`
	// - (Optional) The reference to a user.
	OwnerReference pulumi.StringMapOutput `pulumi:"ownerReference"`
	// - (Optional) The reference to a project.
	ProjectReference pulumi.StringMapOutput `pulumi:"projectReference"`
	// - List of URIs where the raw image data can be accessed.
	RetrievalUriLists pulumi.StringArrayOutput `pulumi:"retrievalUriLists"`
	// - The size of the image in bytes.
	SizeBytes pulumi.IntOutput `pulumi:"sizeBytes"`
	// - (Optional) A local path to upload an image.
	SourcePath pulumi.StringOutput `pulumi:"sourcePath"`
	// - (Optional) The source URI points at the location of the source image which is used to create/update image.
	SourceUri pulumi.StringOutput `pulumi:"sourceUri"`
	// - The state of the image.
	State pulumi.StringOutput `pulumi:"state"`
	// - (Optional) The image version.
	Version pulumi.StringMapOutput `pulumi:"version"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		args = &ImageArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("nutanix:index/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("nutanix:index/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// The version of the API.
	ApiVersion *string `pulumi:"apiVersion"`
	// - (Optional) The supported CPU architecture for a disk image.
	Architecture *string `pulumi:"architecture"`
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference map[string]string `pulumi:"availabilityZoneReference"`
	// - (Optional) Categories for the image.
	Categories []ImageCategory `pulumi:"categories"`
	// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	Checksum                     map[string]string                  `pulumi:"checksum"`
	ClusterName                  *string                            `pulumi:"clusterName"`
	ClusterReferences            []ImageClusterReference            `pulumi:"clusterReferences"`
	ClusterUuid                  *string                            `pulumi:"clusterUuid"`
	CurrentClusterReferenceLists []ImageCurrentClusterReferenceList `pulumi:"currentClusterReferenceLists"`
	// Reference to a data source.
	DataSourceReferences []ImageDataSourceReference `pulumi:"dataSourceReferences"`
	// - (Optional) A description for image.
	Description *string `pulumi:"description"`
	// - (Optional) The type of image.
	ImageType *string `pulumi:"imageType"`
	// - The image kind metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// - (Required) The name for the image.
	Name *string `pulumi:"name"`
	// - (Optional) The reference to a user.
	OwnerReference map[string]string `pulumi:"ownerReference"`
	// - (Optional) The reference to a project.
	ProjectReference map[string]string `pulumi:"projectReference"`
	// - List of URIs where the raw image data can be accessed.
	RetrievalUriLists []string `pulumi:"retrievalUriLists"`
	// - The size of the image in bytes.
	SizeBytes *int `pulumi:"sizeBytes"`
	// - (Optional) A local path to upload an image.
	SourcePath *string `pulumi:"sourcePath"`
	// - (Optional) The source URI points at the location of the source image which is used to create/update image.
	SourceUri *string `pulumi:"sourceUri"`
	// - The state of the image.
	State *string `pulumi:"state"`
	// - (Optional) The image version.
	Version map[string]string `pulumi:"version"`
}

type ImageState struct {
	// The version of the API.
	ApiVersion pulumi.StringPtrInput
	// - (Optional) The supported CPU architecture for a disk image.
	Architecture pulumi.StringPtrInput
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference pulumi.StringMapInput
	// - (Optional) Categories for the image.
	Categories ImageCategoryArrayInput
	// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	Checksum                     pulumi.StringMapInput
	ClusterName                  pulumi.StringPtrInput
	ClusterReferences            ImageClusterReferenceArrayInput
	ClusterUuid                  pulumi.StringPtrInput
	CurrentClusterReferenceLists ImageCurrentClusterReferenceListArrayInput
	// Reference to a data source.
	DataSourceReferences ImageDataSourceReferenceArrayInput
	// - (Optional) A description for image.
	Description pulumi.StringPtrInput
	// - (Optional) The type of image.
	ImageType pulumi.StringPtrInput
	// - The image kind metadata.
	Metadata pulumi.StringMapInput
	// - (Required) The name for the image.
	Name pulumi.StringPtrInput
	// - (Optional) The reference to a user.
	OwnerReference pulumi.StringMapInput
	// - (Optional) The reference to a project.
	ProjectReference pulumi.StringMapInput
	// - List of URIs where the raw image data can be accessed.
	RetrievalUriLists pulumi.StringArrayInput
	// - The size of the image in bytes.
	SizeBytes pulumi.IntPtrInput
	// - (Optional) A local path to upload an image.
	SourcePath pulumi.StringPtrInput
	// - (Optional) The source URI points at the location of the source image which is used to create/update image.
	SourceUri pulumi.StringPtrInput
	// - The state of the image.
	State pulumi.StringPtrInput
	// - (Optional) The image version.
	Version pulumi.StringMapInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// - (Optional) The supported CPU architecture for a disk image.
	Architecture *string `pulumi:"architecture"`
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference map[string]string `pulumi:"availabilityZoneReference"`
	// - (Optional) Categories for the image.
	Categories []ImageCategory `pulumi:"categories"`
	// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	Checksum          map[string]string       `pulumi:"checksum"`
	ClusterReferences []ImageClusterReference `pulumi:"clusterReferences"`
	// Reference to a data source.
	DataSourceReferences []ImageDataSourceReference `pulumi:"dataSourceReferences"`
	// - (Optional) A description for image.
	Description *string `pulumi:"description"`
	// - (Optional) The type of image.
	ImageType *string `pulumi:"imageType"`
	// - (Required) The name for the image.
	Name *string `pulumi:"name"`
	// - (Optional) The reference to a user.
	OwnerReference map[string]string `pulumi:"ownerReference"`
	// - (Optional) The reference to a project.
	ProjectReference map[string]string `pulumi:"projectReference"`
	// - (Optional) A local path to upload an image.
	SourcePath *string `pulumi:"sourcePath"`
	// - (Optional) The source URI points at the location of the source image which is used to create/update image.
	SourceUri *string `pulumi:"sourceUri"`
	// - (Optional) The image version.
	Version map[string]string `pulumi:"version"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// - (Optional) The supported CPU architecture for a disk image.
	Architecture pulumi.StringPtrInput
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference pulumi.StringMapInput
	// - (Optional) Categories for the image.
	Categories ImageCategoryArrayInput
	// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	Checksum          pulumi.StringMapInput
	ClusterReferences ImageClusterReferenceArrayInput
	// Reference to a data source.
	DataSourceReferences ImageDataSourceReferenceArrayInput
	// - (Optional) A description for image.
	Description pulumi.StringPtrInput
	// - (Optional) The type of image.
	ImageType pulumi.StringPtrInput
	// - (Required) The name for the image.
	Name pulumi.StringPtrInput
	// - (Optional) The reference to a user.
	OwnerReference pulumi.StringMapInput
	// - (Optional) The reference to a project.
	ProjectReference pulumi.StringMapInput
	// - (Optional) A local path to upload an image.
	SourcePath pulumi.StringPtrInput
	// - (Optional) The source URI points at the location of the source image which is used to create/update image.
	SourceUri pulumi.StringPtrInput
	// - (Optional) The image version.
	Version pulumi.StringMapInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// The version of the API.
func (o ImageOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// - (Optional) The supported CPU architecture for a disk image.
func (o ImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// - (Optional) The reference to a availability_zone.
func (o ImageOutput) AvailabilityZoneReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.AvailabilityZoneReference }).(pulumi.StringMapOutput)
}

// - (Optional) Categories for the image.
func (o ImageOutput) Categories() ImageCategoryArrayOutput {
	return o.ApplyT(func(v *Image) ImageCategoryArrayOutput { return v.Categories }).(ImageCategoryArrayOutput)
}

// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
func (o ImageOutput) Checksum() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Checksum }).(pulumi.StringMapOutput)
}

func (o ImageOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ImageOutput) ClusterReferences() ImageClusterReferenceArrayOutput {
	return o.ApplyT(func(v *Image) ImageClusterReferenceArrayOutput { return v.ClusterReferences }).(ImageClusterReferenceArrayOutput)
}

func (o ImageOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ClusterUuid }).(pulumi.StringOutput)
}

func (o ImageOutput) CurrentClusterReferenceLists() ImageCurrentClusterReferenceListArrayOutput {
	return o.ApplyT(func(v *Image) ImageCurrentClusterReferenceListArrayOutput { return v.CurrentClusterReferenceLists }).(ImageCurrentClusterReferenceListArrayOutput)
}

// Reference to a data source.
func (o ImageOutput) DataSourceReferences() ImageDataSourceReferenceArrayOutput {
	return o.ApplyT(func(v *Image) ImageDataSourceReferenceArrayOutput { return v.DataSourceReferences }).(ImageDataSourceReferenceArrayOutput)
}

// - (Optional) A description for image.
func (o ImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// - (Optional) The type of image.
func (o ImageOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

// - The image kind metadata.
func (o ImageOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// - (Required) The name for the image.
func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - (Optional) The reference to a user.
func (o ImageOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.OwnerReference }).(pulumi.StringMapOutput)
}

// - (Optional) The reference to a project.
func (o ImageOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.ProjectReference }).(pulumi.StringMapOutput)
}

// - List of URIs where the raw image data can be accessed.
func (o ImageOutput) RetrievalUriLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.RetrievalUriLists }).(pulumi.StringArrayOutput)
}

// - The size of the image in bytes.
func (o ImageOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.SizeBytes }).(pulumi.IntOutput)
}

// - (Optional) A local path to upload an image.
func (o ImageOutput) SourcePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.SourcePath }).(pulumi.StringOutput)
}

// - (Optional) The source URI points at the location of the source image which is used to create/update image.
func (o ImageOutput) SourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.SourceUri }).(pulumi.StringOutput)
}

// - The state of the image.
func (o ImageOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// - (Optional) The image version.
func (o ImageOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Version }).(pulumi.StringMapOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
