// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The provider type for the nutanix package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an
	// individual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS
	// upgrades.
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// endpoint for foundation VM (eg. Foundation VM IP)
	FoundationEndpoint pulumi.StringPtrOutput `pulumi:"foundationEndpoint"`
	// Port for foundation VM
	FoundationPort pulumi.StringPtrOutput `pulumi:"foundationPort"`
	// Password for provided user name.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port for Nutanix Prism.
	Port     pulumi.StringPtrOutput `pulumi:"port"`
	ProxyUrl pulumi.StringPtrOutput `pulumi:"proxyUrl"`
	// User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:nutanix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an
	// individual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS
	// upgrades.
	Endpoint *string `pulumi:"endpoint"`
	// endpoint for foundation VM (eg. Foundation VM IP)
	FoundationEndpoint *string `pulumi:"foundationEndpoint"`
	// Port for foundation VM
	FoundationPort *string `pulumi:"foundationPort"`
	// Explicitly allow the provider to perform "insecure" SSL requests. If omitted,default value is `false`
	Insecure *bool `pulumi:"insecure"`
	// Password for provided user name.
	Password *string `pulumi:"password"`
	// Port for Nutanix Prism.
	Port     *string `pulumi:"port"`
	ProxyUrl *string `pulumi:"proxyUrl"`
	// Use session authentification instead of basic auth for each request
	SessionAuth *bool `pulumi:"sessionAuth"`
	// User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.
	Username *string `pulumi:"username"`
	// Set if you know that the creation o update of a resource may take long time (minutes)
	WaitTimeout *int `pulumi:"waitTimeout"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an
	// individual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS
	// upgrades.
	Endpoint pulumi.StringPtrInput
	// endpoint for foundation VM (eg. Foundation VM IP)
	FoundationEndpoint pulumi.StringPtrInput
	// Port for foundation VM
	FoundationPort pulumi.StringPtrInput
	// Explicitly allow the provider to perform "insecure" SSL requests. If omitted,default value is `false`
	Insecure pulumi.BoolPtrInput
	// Password for provided user name.
	Password pulumi.StringPtrInput
	// Port for Nutanix Prism.
	Port     pulumi.StringPtrInput
	ProxyUrl pulumi.StringPtrInput
	// Use session authentification instead of basic auth for each request
	SessionAuth pulumi.BoolPtrInput
	// User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.
	Username pulumi.StringPtrInput
	// Set if you know that the creation o update of a resource may take long time (minutes)
	WaitTimeout pulumi.IntPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: i.ToProviderOutputWithContext(ctx).OutputState,
	}
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: o.OutputState,
	}
}

// URL for Nutanix Prism (e.g IP or FQDN for cluster VIP note, this is never the data services VIP, and should not be an
// individual CVM address, as this would cause calls to fail during cluster lifecycle management operations, such as AOS
// upgrades.
func (o ProviderOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// endpoint for foundation VM (eg. Foundation VM IP)
func (o ProviderOutput) FoundationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.FoundationEndpoint }).(pulumi.StringPtrOutput)
}

// Port for foundation VM
func (o ProviderOutput) FoundationPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.FoundationPort }).(pulumi.StringPtrOutput)
}

// Password for provided user name.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Nutanix Prism.
func (o ProviderOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Port }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

// User name for Nutanix Prism. Could be local cluster auth (e.g. 'admin') or directory auth.
func (o ProviderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
