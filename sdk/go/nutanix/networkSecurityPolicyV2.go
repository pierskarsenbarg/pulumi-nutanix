// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a Network Security Policy
//
// ## Example
type NetworkSecurityPolicyV2 struct {
	pulumi.CustomResourceState

	// created by.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// creation time of NSP
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// A user defined annotation for a policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// If Hitlog is enabled.
	IsHitlogEnabled pulumi.BoolPtrOutput `pulumi:"isHitlogEnabled"`
	// If Ipv6 Traffic is allowed.
	IsIpv6TrafficAllowed pulumi.BoolPtrOutput `pulumi:"isIpv6TrafficAllowed"`
	// Is system defined NSP
	IsSystemDefined pulumi.BoolOutput `pulumi:"isSystemDefined"`
	// last updated time
	LastUpdateTime pulumi.StringOutput `pulumi:"lastUpdateTime"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links NetworkSecurityPolicyV2LinkArrayOutput `pulumi:"links"`
	// Name of the Flow Network Security Policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
	Rules NetworkSecurityPolicyV2RuleArrayOutput `pulumi:"rules"`
	// Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Uuids of the secured groups in the NSP.
	SecuredGroups pulumi.StringArrayOutput `pulumi:"securedGroups"`
	// Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
	State pulumi.StringPtrOutput `pulumi:"state"`
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
	Type pulumi.StringOutput `pulumi:"type"`
	// A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
	VpcReferences pulumi.StringArrayOutput `pulumi:"vpcReferences"`
}

// NewNetworkSecurityPolicyV2 registers a new resource with the given unique name, arguments, and options.
func NewNetworkSecurityPolicyV2(ctx *pulumi.Context,
	name string, args *NetworkSecurityPolicyV2Args, opts ...pulumi.ResourceOption) (*NetworkSecurityPolicyV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSecurityPolicyV2
	err := ctx.RegisterResource("nutanix:index/networkSecurityPolicyV2:NetworkSecurityPolicyV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSecurityPolicyV2 gets an existing NetworkSecurityPolicyV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSecurityPolicyV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSecurityPolicyV2State, opts ...pulumi.ResourceOption) (*NetworkSecurityPolicyV2, error) {
	var resource NetworkSecurityPolicyV2
	err := ctx.ReadResource("nutanix:index/networkSecurityPolicyV2:NetworkSecurityPolicyV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSecurityPolicyV2 resources.
type networkSecurityPolicyV2State struct {
	// created by.
	CreatedBy *string `pulumi:"createdBy"`
	// creation time of NSP
	CreationTime *string `pulumi:"creationTime"`
	// A user defined annotation for a policy.
	Description *string `pulumi:"description"`
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId *string `pulumi:"extId"`
	// If Hitlog is enabled.
	IsHitlogEnabled *bool `pulumi:"isHitlogEnabled"`
	// If Ipv6 Traffic is allowed.
	IsIpv6TrafficAllowed *bool `pulumi:"isIpv6TrafficAllowed"`
	// Is system defined NSP
	IsSystemDefined *bool `pulumi:"isSystemDefined"`
	// last updated time
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []NetworkSecurityPolicyV2Link `pulumi:"links"`
	// Name of the Flow Network Security Policy.
	Name *string `pulumi:"name"`
	// A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
	Rules []NetworkSecurityPolicyV2Rule `pulumi:"rules"`
	// Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
	Scope *string `pulumi:"scope"`
	// Uuids of the secured groups in the NSP.
	SecuredGroups []string `pulumi:"securedGroups"`
	// Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
	State *string `pulumi:"state"`
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId *string `pulumi:"tenantId"`
	// Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
	Type *string `pulumi:"type"`
	// A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
	VpcReferences []string `pulumi:"vpcReferences"`
}

type NetworkSecurityPolicyV2State struct {
	// created by.
	CreatedBy pulumi.StringPtrInput
	// creation time of NSP
	CreationTime pulumi.StringPtrInput
	// A user defined annotation for a policy.
	Description pulumi.StringPtrInput
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringPtrInput
	// If Hitlog is enabled.
	IsHitlogEnabled pulumi.BoolPtrInput
	// If Ipv6 Traffic is allowed.
	IsIpv6TrafficAllowed pulumi.BoolPtrInput
	// Is system defined NSP
	IsSystemDefined pulumi.BoolPtrInput
	// last updated time
	LastUpdateTime pulumi.StringPtrInput
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links NetworkSecurityPolicyV2LinkArrayInput
	// Name of the Flow Network Security Policy.
	Name pulumi.StringPtrInput
	// A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
	Rules NetworkSecurityPolicyV2RuleArrayInput
	// Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
	Scope pulumi.StringPtrInput
	// Uuids of the secured groups in the NSP.
	SecuredGroups pulumi.StringArrayInput
	// Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
	State pulumi.StringPtrInput
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId pulumi.StringPtrInput
	// Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
	Type pulumi.StringPtrInput
	// A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
	VpcReferences pulumi.StringArrayInput
}

func (NetworkSecurityPolicyV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSecurityPolicyV2State)(nil)).Elem()
}

type networkSecurityPolicyV2Args struct {
	// A user defined annotation for a policy.
	Description *string `pulumi:"description"`
	// If Hitlog is enabled.
	IsHitlogEnabled *bool `pulumi:"isHitlogEnabled"`
	// If Ipv6 Traffic is allowed.
	IsIpv6TrafficAllowed *bool `pulumi:"isIpv6TrafficAllowed"`
	// Name of the Flow Network Security Policy.
	Name *string `pulumi:"name"`
	// A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
	Rules []NetworkSecurityPolicyV2Rule `pulumi:"rules"`
	// Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
	Scope *string `pulumi:"scope"`
	// Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
	State *string `pulumi:"state"`
	// Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
	Type string `pulumi:"type"`
	// A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
	VpcReferences []string `pulumi:"vpcReferences"`
}

// The set of arguments for constructing a NetworkSecurityPolicyV2 resource.
type NetworkSecurityPolicyV2Args struct {
	// A user defined annotation for a policy.
	Description pulumi.StringPtrInput
	// If Hitlog is enabled.
	IsHitlogEnabled pulumi.BoolPtrInput
	// If Ipv6 Traffic is allowed.
	IsIpv6TrafficAllowed pulumi.BoolPtrInput
	// Name of the Flow Network Security Policy.
	Name pulumi.StringPtrInput
	// A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
	Rules NetworkSecurityPolicyV2RuleArrayInput
	// Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
	Scope pulumi.StringPtrInput
	// Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
	State pulumi.StringPtrInput
	// Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
	Type pulumi.StringInput
	// A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
	VpcReferences pulumi.StringArrayInput
}

func (NetworkSecurityPolicyV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSecurityPolicyV2Args)(nil)).Elem()
}

type NetworkSecurityPolicyV2Input interface {
	pulumi.Input

	ToNetworkSecurityPolicyV2Output() NetworkSecurityPolicyV2Output
	ToNetworkSecurityPolicyV2OutputWithContext(ctx context.Context) NetworkSecurityPolicyV2Output
}

func (*NetworkSecurityPolicyV2) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSecurityPolicyV2)(nil)).Elem()
}

func (i *NetworkSecurityPolicyV2) ToNetworkSecurityPolicyV2Output() NetworkSecurityPolicyV2Output {
	return i.ToNetworkSecurityPolicyV2OutputWithContext(context.Background())
}

func (i *NetworkSecurityPolicyV2) ToNetworkSecurityPolicyV2OutputWithContext(ctx context.Context) NetworkSecurityPolicyV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityPolicyV2Output)
}

// NetworkSecurityPolicyV2ArrayInput is an input type that accepts NetworkSecurityPolicyV2Array and NetworkSecurityPolicyV2ArrayOutput values.
// You can construct a concrete instance of `NetworkSecurityPolicyV2ArrayInput` via:
//
//	NetworkSecurityPolicyV2Array{ NetworkSecurityPolicyV2Args{...} }
type NetworkSecurityPolicyV2ArrayInput interface {
	pulumi.Input

	ToNetworkSecurityPolicyV2ArrayOutput() NetworkSecurityPolicyV2ArrayOutput
	ToNetworkSecurityPolicyV2ArrayOutputWithContext(context.Context) NetworkSecurityPolicyV2ArrayOutput
}

type NetworkSecurityPolicyV2Array []NetworkSecurityPolicyV2Input

func (NetworkSecurityPolicyV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSecurityPolicyV2)(nil)).Elem()
}

func (i NetworkSecurityPolicyV2Array) ToNetworkSecurityPolicyV2ArrayOutput() NetworkSecurityPolicyV2ArrayOutput {
	return i.ToNetworkSecurityPolicyV2ArrayOutputWithContext(context.Background())
}

func (i NetworkSecurityPolicyV2Array) ToNetworkSecurityPolicyV2ArrayOutputWithContext(ctx context.Context) NetworkSecurityPolicyV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityPolicyV2ArrayOutput)
}

// NetworkSecurityPolicyV2MapInput is an input type that accepts NetworkSecurityPolicyV2Map and NetworkSecurityPolicyV2MapOutput values.
// You can construct a concrete instance of `NetworkSecurityPolicyV2MapInput` via:
//
//	NetworkSecurityPolicyV2Map{ "key": NetworkSecurityPolicyV2Args{...} }
type NetworkSecurityPolicyV2MapInput interface {
	pulumi.Input

	ToNetworkSecurityPolicyV2MapOutput() NetworkSecurityPolicyV2MapOutput
	ToNetworkSecurityPolicyV2MapOutputWithContext(context.Context) NetworkSecurityPolicyV2MapOutput
}

type NetworkSecurityPolicyV2Map map[string]NetworkSecurityPolicyV2Input

func (NetworkSecurityPolicyV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSecurityPolicyV2)(nil)).Elem()
}

func (i NetworkSecurityPolicyV2Map) ToNetworkSecurityPolicyV2MapOutput() NetworkSecurityPolicyV2MapOutput {
	return i.ToNetworkSecurityPolicyV2MapOutputWithContext(context.Background())
}

func (i NetworkSecurityPolicyV2Map) ToNetworkSecurityPolicyV2MapOutputWithContext(ctx context.Context) NetworkSecurityPolicyV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityPolicyV2MapOutput)
}

type NetworkSecurityPolicyV2Output struct{ *pulumi.OutputState }

func (NetworkSecurityPolicyV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSecurityPolicyV2)(nil)).Elem()
}

func (o NetworkSecurityPolicyV2Output) ToNetworkSecurityPolicyV2Output() NetworkSecurityPolicyV2Output {
	return o
}

func (o NetworkSecurityPolicyV2Output) ToNetworkSecurityPolicyV2OutputWithContext(ctx context.Context) NetworkSecurityPolicyV2Output {
	return o
}

// created by.
func (o NetworkSecurityPolicyV2Output) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// creation time of NSP
func (o NetworkSecurityPolicyV2Output) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// A user defined annotation for a policy.
func (o NetworkSecurityPolicyV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A globally unique identifier of an instance that is suitable for external consumption.
func (o NetworkSecurityPolicyV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// If Hitlog is enabled.
func (o NetworkSecurityPolicyV2Output) IsHitlogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.BoolPtrOutput { return v.IsHitlogEnabled }).(pulumi.BoolPtrOutput)
}

// If Ipv6 Traffic is allowed.
func (o NetworkSecurityPolicyV2Output) IsIpv6TrafficAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.BoolPtrOutput { return v.IsIpv6TrafficAllowed }).(pulumi.BoolPtrOutput)
}

// Is system defined NSP
func (o NetworkSecurityPolicyV2Output) IsSystemDefined() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.BoolOutput { return v.IsSystemDefined }).(pulumi.BoolOutput)
}

// last updated time
func (o NetworkSecurityPolicyV2Output) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o NetworkSecurityPolicyV2Output) Links() NetworkSecurityPolicyV2LinkArrayOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) NetworkSecurityPolicyV2LinkArrayOutput { return v.Links }).(NetworkSecurityPolicyV2LinkArrayOutput)
}

// Name of the Flow Network Security Policy.
func (o NetworkSecurityPolicyV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
func (o NetworkSecurityPolicyV2Output) Rules() NetworkSecurityPolicyV2RuleArrayOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) NetworkSecurityPolicyV2RuleArrayOutput { return v.Rules }).(NetworkSecurityPolicyV2RuleArrayOutput)
}

// Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
func (o NetworkSecurityPolicyV2Output) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Uuids of the secured groups in the NSP.
func (o NetworkSecurityPolicyV2Output) SecuredGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringArrayOutput { return v.SecuredGroups }).(pulumi.StringArrayOutput)
}

// Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
func (o NetworkSecurityPolicyV2Output) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// A globally unique identifier that represents the tenant that owns this entity
func (o NetworkSecurityPolicyV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
func (o NetworkSecurityPolicyV2Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
func (o NetworkSecurityPolicyV2Output) VpcReferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkSecurityPolicyV2) pulumi.StringArrayOutput { return v.VpcReferences }).(pulumi.StringArrayOutput)
}

type NetworkSecurityPolicyV2ArrayOutput struct{ *pulumi.OutputState }

func (NetworkSecurityPolicyV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSecurityPolicyV2)(nil)).Elem()
}

func (o NetworkSecurityPolicyV2ArrayOutput) ToNetworkSecurityPolicyV2ArrayOutput() NetworkSecurityPolicyV2ArrayOutput {
	return o
}

func (o NetworkSecurityPolicyV2ArrayOutput) ToNetworkSecurityPolicyV2ArrayOutputWithContext(ctx context.Context) NetworkSecurityPolicyV2ArrayOutput {
	return o
}

func (o NetworkSecurityPolicyV2ArrayOutput) Index(i pulumi.IntInput) NetworkSecurityPolicyV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSecurityPolicyV2 {
		return vs[0].([]*NetworkSecurityPolicyV2)[vs[1].(int)]
	}).(NetworkSecurityPolicyV2Output)
}

type NetworkSecurityPolicyV2MapOutput struct{ *pulumi.OutputState }

func (NetworkSecurityPolicyV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSecurityPolicyV2)(nil)).Elem()
}

func (o NetworkSecurityPolicyV2MapOutput) ToNetworkSecurityPolicyV2MapOutput() NetworkSecurityPolicyV2MapOutput {
	return o
}

func (o NetworkSecurityPolicyV2MapOutput) ToNetworkSecurityPolicyV2MapOutputWithContext(ctx context.Context) NetworkSecurityPolicyV2MapOutput {
	return o
}

func (o NetworkSecurityPolicyV2MapOutput) MapIndex(k pulumi.StringInput) NetworkSecurityPolicyV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSecurityPolicyV2 {
		return vs[0].(map[string]*NetworkSecurityPolicyV2)[vs[1].(string)]
	}).(NetworkSecurityPolicyV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSecurityPolicyV2Input)(nil)).Elem(), &NetworkSecurityPolicyV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSecurityPolicyV2ArrayInput)(nil)).Elem(), NetworkSecurityPolicyV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSecurityPolicyV2MapInput)(nil)).Elem(), NetworkSecurityPolicyV2Map{})
	pulumi.RegisterOutputType(NetworkSecurityPolicyV2Output{})
	pulumi.RegisterOutputType(NetworkSecurityPolicyV2ArrayOutput{})
	pulumi.RegisterOutputType(NetworkSecurityPolicyV2MapOutput{})
}
