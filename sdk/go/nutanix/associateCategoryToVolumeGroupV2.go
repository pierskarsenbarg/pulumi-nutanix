// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to Creates a new Volume Disk.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Associate categories to volume group
//			_, err := nutanix.NewAssociateCategoryToVolumeGroupV2(ctx, "example", &nutanix.AssociateCategoryToVolumeGroupV2Args{
//				Categories: nutanix.AssociateCategoryToVolumeGroupV2CategoryArray{
//					&nutanix.AssociateCategoryToVolumeGroupV2CategoryArgs{
//						ExtId: pulumi.String("85e68112-5b2b-4220-bc8d-e529e4bf420e"),
//					},
//					&nutanix.AssociateCategoryToVolumeGroupV2CategoryArgs{
//						ExtId: pulumi.String("45588de3-7c18-4230-a147-7e26ad92d8a6"),
//					},
//					&nutanix.AssociateCategoryToVolumeGroupV2CategoryArgs{
//						ExtId: pulumi.String("1c6638f2-5215-4086-8f21-a30e75cb8068"),
//					},
//				},
//				ExtId: pulumi.String("f0c0a4ac-c734-4770-b5d7-eca6793eeeb7"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AssociateCategoryToVolumeGroupV2 struct {
	pulumi.CustomResourceState

	// -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
	Categories AssociateCategoryToVolumeGroupV2CategoryArrayOutput `pulumi:"categories"`
	ExtId      pulumi.StringOutput                                 `pulumi:"extId"`
}

// NewAssociateCategoryToVolumeGroupV2 registers a new resource with the given unique name, arguments, and options.
func NewAssociateCategoryToVolumeGroupV2(ctx *pulumi.Context,
	name string, args *AssociateCategoryToVolumeGroupV2Args, opts ...pulumi.ResourceOption) (*AssociateCategoryToVolumeGroupV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssociateCategoryToVolumeGroupV2
	err := ctx.RegisterResource("nutanix:index/associateCategoryToVolumeGroupV2:AssociateCategoryToVolumeGroupV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssociateCategoryToVolumeGroupV2 gets an existing AssociateCategoryToVolumeGroupV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociateCategoryToVolumeGroupV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssociateCategoryToVolumeGroupV2State, opts ...pulumi.ResourceOption) (*AssociateCategoryToVolumeGroupV2, error) {
	var resource AssociateCategoryToVolumeGroupV2
	err := ctx.ReadResource("nutanix:index/associateCategoryToVolumeGroupV2:AssociateCategoryToVolumeGroupV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssociateCategoryToVolumeGroupV2 resources.
type associateCategoryToVolumeGroupV2State struct {
	// -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
	Categories []AssociateCategoryToVolumeGroupV2Category `pulumi:"categories"`
	ExtId      *string                                    `pulumi:"extId"`
}

type AssociateCategoryToVolumeGroupV2State struct {
	// -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
	Categories AssociateCategoryToVolumeGroupV2CategoryArrayInput
	ExtId      pulumi.StringPtrInput
}

func (AssociateCategoryToVolumeGroupV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*associateCategoryToVolumeGroupV2State)(nil)).Elem()
}

type associateCategoryToVolumeGroupV2Args struct {
	// -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
	Categories []AssociateCategoryToVolumeGroupV2Category `pulumi:"categories"`
	ExtId      string                                     `pulumi:"extId"`
}

// The set of arguments for constructing a AssociateCategoryToVolumeGroupV2 resource.
type AssociateCategoryToVolumeGroupV2Args struct {
	// -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
	Categories AssociateCategoryToVolumeGroupV2CategoryArrayInput
	ExtId      pulumi.StringInput
}

func (AssociateCategoryToVolumeGroupV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*associateCategoryToVolumeGroupV2Args)(nil)).Elem()
}

type AssociateCategoryToVolumeGroupV2Input interface {
	pulumi.Input

	ToAssociateCategoryToVolumeGroupV2Output() AssociateCategoryToVolumeGroupV2Output
	ToAssociateCategoryToVolumeGroupV2OutputWithContext(ctx context.Context) AssociateCategoryToVolumeGroupV2Output
}

func (*AssociateCategoryToVolumeGroupV2) ElementType() reflect.Type {
	return reflect.TypeOf((**AssociateCategoryToVolumeGroupV2)(nil)).Elem()
}

func (i *AssociateCategoryToVolumeGroupV2) ToAssociateCategoryToVolumeGroupV2Output() AssociateCategoryToVolumeGroupV2Output {
	return i.ToAssociateCategoryToVolumeGroupV2OutputWithContext(context.Background())
}

func (i *AssociateCategoryToVolumeGroupV2) ToAssociateCategoryToVolumeGroupV2OutputWithContext(ctx context.Context) AssociateCategoryToVolumeGroupV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(AssociateCategoryToVolumeGroupV2Output)
}

// AssociateCategoryToVolumeGroupV2ArrayInput is an input type that accepts AssociateCategoryToVolumeGroupV2Array and AssociateCategoryToVolumeGroupV2ArrayOutput values.
// You can construct a concrete instance of `AssociateCategoryToVolumeGroupV2ArrayInput` via:
//
//	AssociateCategoryToVolumeGroupV2Array{ AssociateCategoryToVolumeGroupV2Args{...} }
type AssociateCategoryToVolumeGroupV2ArrayInput interface {
	pulumi.Input

	ToAssociateCategoryToVolumeGroupV2ArrayOutput() AssociateCategoryToVolumeGroupV2ArrayOutput
	ToAssociateCategoryToVolumeGroupV2ArrayOutputWithContext(context.Context) AssociateCategoryToVolumeGroupV2ArrayOutput
}

type AssociateCategoryToVolumeGroupV2Array []AssociateCategoryToVolumeGroupV2Input

func (AssociateCategoryToVolumeGroupV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssociateCategoryToVolumeGroupV2)(nil)).Elem()
}

func (i AssociateCategoryToVolumeGroupV2Array) ToAssociateCategoryToVolumeGroupV2ArrayOutput() AssociateCategoryToVolumeGroupV2ArrayOutput {
	return i.ToAssociateCategoryToVolumeGroupV2ArrayOutputWithContext(context.Background())
}

func (i AssociateCategoryToVolumeGroupV2Array) ToAssociateCategoryToVolumeGroupV2ArrayOutputWithContext(ctx context.Context) AssociateCategoryToVolumeGroupV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociateCategoryToVolumeGroupV2ArrayOutput)
}

// AssociateCategoryToVolumeGroupV2MapInput is an input type that accepts AssociateCategoryToVolumeGroupV2Map and AssociateCategoryToVolumeGroupV2MapOutput values.
// You can construct a concrete instance of `AssociateCategoryToVolumeGroupV2MapInput` via:
//
//	AssociateCategoryToVolumeGroupV2Map{ "key": AssociateCategoryToVolumeGroupV2Args{...} }
type AssociateCategoryToVolumeGroupV2MapInput interface {
	pulumi.Input

	ToAssociateCategoryToVolumeGroupV2MapOutput() AssociateCategoryToVolumeGroupV2MapOutput
	ToAssociateCategoryToVolumeGroupV2MapOutputWithContext(context.Context) AssociateCategoryToVolumeGroupV2MapOutput
}

type AssociateCategoryToVolumeGroupV2Map map[string]AssociateCategoryToVolumeGroupV2Input

func (AssociateCategoryToVolumeGroupV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssociateCategoryToVolumeGroupV2)(nil)).Elem()
}

func (i AssociateCategoryToVolumeGroupV2Map) ToAssociateCategoryToVolumeGroupV2MapOutput() AssociateCategoryToVolumeGroupV2MapOutput {
	return i.ToAssociateCategoryToVolumeGroupV2MapOutputWithContext(context.Background())
}

func (i AssociateCategoryToVolumeGroupV2Map) ToAssociateCategoryToVolumeGroupV2MapOutputWithContext(ctx context.Context) AssociateCategoryToVolumeGroupV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociateCategoryToVolumeGroupV2MapOutput)
}

type AssociateCategoryToVolumeGroupV2Output struct{ *pulumi.OutputState }

func (AssociateCategoryToVolumeGroupV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**AssociateCategoryToVolumeGroupV2)(nil)).Elem()
}

func (o AssociateCategoryToVolumeGroupV2Output) ToAssociateCategoryToVolumeGroupV2Output() AssociateCategoryToVolumeGroupV2Output {
	return o
}

func (o AssociateCategoryToVolumeGroupV2Output) ToAssociateCategoryToVolumeGroupV2OutputWithContext(ctx context.Context) AssociateCategoryToVolumeGroupV2Output {
	return o
}

// -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
func (o AssociateCategoryToVolumeGroupV2Output) Categories() AssociateCategoryToVolumeGroupV2CategoryArrayOutput {
	return o.ApplyT(func(v *AssociateCategoryToVolumeGroupV2) AssociateCategoryToVolumeGroupV2CategoryArrayOutput {
		return v.Categories
	}).(AssociateCategoryToVolumeGroupV2CategoryArrayOutput)
}

func (o AssociateCategoryToVolumeGroupV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *AssociateCategoryToVolumeGroupV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

type AssociateCategoryToVolumeGroupV2ArrayOutput struct{ *pulumi.OutputState }

func (AssociateCategoryToVolumeGroupV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssociateCategoryToVolumeGroupV2)(nil)).Elem()
}

func (o AssociateCategoryToVolumeGroupV2ArrayOutput) ToAssociateCategoryToVolumeGroupV2ArrayOutput() AssociateCategoryToVolumeGroupV2ArrayOutput {
	return o
}

func (o AssociateCategoryToVolumeGroupV2ArrayOutput) ToAssociateCategoryToVolumeGroupV2ArrayOutputWithContext(ctx context.Context) AssociateCategoryToVolumeGroupV2ArrayOutput {
	return o
}

func (o AssociateCategoryToVolumeGroupV2ArrayOutput) Index(i pulumi.IntInput) AssociateCategoryToVolumeGroupV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssociateCategoryToVolumeGroupV2 {
		return vs[0].([]*AssociateCategoryToVolumeGroupV2)[vs[1].(int)]
	}).(AssociateCategoryToVolumeGroupV2Output)
}

type AssociateCategoryToVolumeGroupV2MapOutput struct{ *pulumi.OutputState }

func (AssociateCategoryToVolumeGroupV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssociateCategoryToVolumeGroupV2)(nil)).Elem()
}

func (o AssociateCategoryToVolumeGroupV2MapOutput) ToAssociateCategoryToVolumeGroupV2MapOutput() AssociateCategoryToVolumeGroupV2MapOutput {
	return o
}

func (o AssociateCategoryToVolumeGroupV2MapOutput) ToAssociateCategoryToVolumeGroupV2MapOutputWithContext(ctx context.Context) AssociateCategoryToVolumeGroupV2MapOutput {
	return o
}

func (o AssociateCategoryToVolumeGroupV2MapOutput) MapIndex(k pulumi.StringInput) AssociateCategoryToVolumeGroupV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssociateCategoryToVolumeGroupV2 {
		return vs[0].(map[string]*AssociateCategoryToVolumeGroupV2)[vs[1].(string)]
	}).(AssociateCategoryToVolumeGroupV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssociateCategoryToVolumeGroupV2Input)(nil)).Elem(), &AssociateCategoryToVolumeGroupV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociateCategoryToVolumeGroupV2ArrayInput)(nil)).Elem(), AssociateCategoryToVolumeGroupV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociateCategoryToVolumeGroupV2MapInput)(nil)).Elem(), AssociateCategoryToVolumeGroupV2Map{})
	pulumi.RegisterOutputType(AssociateCategoryToVolumeGroupV2Output{})
	pulumi.RegisterOutputType(AssociateCategoryToVolumeGroupV2ArrayOutput{})
	pulumi.RegisterOutputType(AssociateCategoryToVolumeGroupV2MapOutput{})
}
