// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new recovery point.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create RP with Vm Rp
//			_, err := nutanix.NewRecoveryPointsV2(ctx, "rp-example", &nutanix.RecoveryPointsV2Args{
//				ExpirationTime:    pulumi.String("2024-09-17T09:20:42Z"),
//				RecoveryPointType: pulumi.String("APPLICATION_CONSISTENT"),
//				Status:            pulumi.String("COMPLETE"),
//				VmRecoveryPoints: nutanix.RecoveryPointsV2VmRecoveryPointArray{
//					&nutanix.RecoveryPointsV2VmRecoveryPointArgs{
//						VmExtId: pulumi.String("ab520e1d-4950-1db1-917f-a9e2ea35b8e3"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RecoveryPointsV2 struct {
	pulumi.CustomResourceState

	// The UTC date and time in ISO-8601 format when the Recovery point is created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// recovery point UUID
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links RecoveryPointsV2LinkArrayOutput `pulumi:"links"`
	// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
	LocationAgnosticId pulumi.StringOutput `pulumi:"locationAgnosticId"`
	// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
	LocationReferences RecoveryPointsV2LocationReferenceArrayOutput `pulumi:"locationReferences"`
	// -(Optional) The name of the Recovery point.
	Name pulumi.StringOutput `pulumi:"name"`
	// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
	OwnerExtId pulumi.StringOutput `pulumi:"ownerExtId"`
	// -(Optional) Type of the Recovery point.
	// * supported values:
	// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
	// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
	RecoveryPointType pulumi.StringOutput `pulumi:"recoveryPointType"`
	// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
	// * supported values:
	// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
	Status pulumi.StringOutput `pulumi:"status"`
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VmRecoveryPoints RecoveryPointsV2VmRecoveryPointArrayOutput `pulumi:"vmRecoveryPoints"`
	// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VolumeGroupRecoveryPoints RecoveryPointsV2VolumeGroupRecoveryPointArrayOutput `pulumi:"volumeGroupRecoveryPoints"`
}

// NewRecoveryPointsV2 registers a new resource with the given unique name, arguments, and options.
func NewRecoveryPointsV2(ctx *pulumi.Context,
	name string, args *RecoveryPointsV2Args, opts ...pulumi.ResourceOption) (*RecoveryPointsV2, error) {
	if args == nil {
		args = &RecoveryPointsV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecoveryPointsV2
	err := ctx.RegisterResource("nutanix:index/recoveryPointsV2:RecoveryPointsV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecoveryPointsV2 gets an existing RecoveryPointsV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecoveryPointsV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecoveryPointsV2State, opts ...pulumi.ResourceOption) (*RecoveryPointsV2, error) {
	var resource RecoveryPointsV2
	err := ctx.ReadResource("nutanix:index/recoveryPointsV2:RecoveryPointsV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecoveryPointsV2 resources.
type recoveryPointsV2State struct {
	// The UTC date and time in ISO-8601 format when the Recovery point is created.
	CreationTime *string `pulumi:"creationTime"`
	// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
	ExpirationTime *string `pulumi:"expirationTime"`
	// recovery point UUID
	ExtId *string `pulumi:"extId"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []RecoveryPointsV2Link `pulumi:"links"`
	// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
	LocationAgnosticId *string `pulumi:"locationAgnosticId"`
	// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
	LocationReferences []RecoveryPointsV2LocationReference `pulumi:"locationReferences"`
	// -(Optional) The name of the Recovery point.
	Name *string `pulumi:"name"`
	// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
	OwnerExtId *string `pulumi:"ownerExtId"`
	// -(Optional) Type of the Recovery point.
	// * supported values:
	// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
	// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
	RecoveryPointType *string `pulumi:"recoveryPointType"`
	// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
	// * supported values:
	// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
	Status *string `pulumi:"status"`
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId *string `pulumi:"tenantId"`
	// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VmRecoveryPoints []RecoveryPointsV2VmRecoveryPoint `pulumi:"vmRecoveryPoints"`
	// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VolumeGroupRecoveryPoints []RecoveryPointsV2VolumeGroupRecoveryPoint `pulumi:"volumeGroupRecoveryPoints"`
}

type RecoveryPointsV2State struct {
	// The UTC date and time in ISO-8601 format when the Recovery point is created.
	CreationTime pulumi.StringPtrInput
	// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
	ExpirationTime pulumi.StringPtrInput
	// recovery point UUID
	ExtId pulumi.StringPtrInput
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links RecoveryPointsV2LinkArrayInput
	// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
	LocationAgnosticId pulumi.StringPtrInput
	// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
	LocationReferences RecoveryPointsV2LocationReferenceArrayInput
	// -(Optional) The name of the Recovery point.
	Name pulumi.StringPtrInput
	// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
	OwnerExtId pulumi.StringPtrInput
	// -(Optional) Type of the Recovery point.
	// * supported values:
	// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
	// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
	RecoveryPointType pulumi.StringPtrInput
	// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
	// * supported values:
	// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
	Status pulumi.StringPtrInput
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId pulumi.StringPtrInput
	// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VmRecoveryPoints RecoveryPointsV2VmRecoveryPointArrayInput
	// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VolumeGroupRecoveryPoints RecoveryPointsV2VolumeGroupRecoveryPointArrayInput
}

func (RecoveryPointsV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryPointsV2State)(nil)).Elem()
}

type recoveryPointsV2Args struct {
	// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
	ExpirationTime *string `pulumi:"expirationTime"`
	// -(Optional) The name of the Recovery point.
	Name *string `pulumi:"name"`
	// -(Optional) Type of the Recovery point.
	// * supported values:
	// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
	// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
	RecoveryPointType *string `pulumi:"recoveryPointType"`
	// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
	// * supported values:
	// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
	Status *string `pulumi:"status"`
	// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VmRecoveryPoints []RecoveryPointsV2VmRecoveryPoint `pulumi:"vmRecoveryPoints"`
	// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VolumeGroupRecoveryPoints []RecoveryPointsV2VolumeGroupRecoveryPoint `pulumi:"volumeGroupRecoveryPoints"`
}

// The set of arguments for constructing a RecoveryPointsV2 resource.
type RecoveryPointsV2Args struct {
	// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
	ExpirationTime pulumi.StringPtrInput
	// -(Optional) The name of the Recovery point.
	Name pulumi.StringPtrInput
	// -(Optional) Type of the Recovery point.
	// * supported values:
	// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
	// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
	RecoveryPointType pulumi.StringPtrInput
	// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
	// * supported values:
	// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
	Status pulumi.StringPtrInput
	// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VmRecoveryPoints RecoveryPointsV2VmRecoveryPointArrayInput
	// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VolumeGroupRecoveryPoints RecoveryPointsV2VolumeGroupRecoveryPointArrayInput
}

func (RecoveryPointsV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryPointsV2Args)(nil)).Elem()
}

type RecoveryPointsV2Input interface {
	pulumi.Input

	ToRecoveryPointsV2Output() RecoveryPointsV2Output
	ToRecoveryPointsV2OutputWithContext(ctx context.Context) RecoveryPointsV2Output
}

func (*RecoveryPointsV2) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoveryPointsV2)(nil)).Elem()
}

func (i *RecoveryPointsV2) ToRecoveryPointsV2Output() RecoveryPointsV2Output {
	return i.ToRecoveryPointsV2OutputWithContext(context.Background())
}

func (i *RecoveryPointsV2) ToRecoveryPointsV2OutputWithContext(ctx context.Context) RecoveryPointsV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryPointsV2Output)
}

// RecoveryPointsV2ArrayInput is an input type that accepts RecoveryPointsV2Array and RecoveryPointsV2ArrayOutput values.
// You can construct a concrete instance of `RecoveryPointsV2ArrayInput` via:
//
//	RecoveryPointsV2Array{ RecoveryPointsV2Args{...} }
type RecoveryPointsV2ArrayInput interface {
	pulumi.Input

	ToRecoveryPointsV2ArrayOutput() RecoveryPointsV2ArrayOutput
	ToRecoveryPointsV2ArrayOutputWithContext(context.Context) RecoveryPointsV2ArrayOutput
}

type RecoveryPointsV2Array []RecoveryPointsV2Input

func (RecoveryPointsV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoveryPointsV2)(nil)).Elem()
}

func (i RecoveryPointsV2Array) ToRecoveryPointsV2ArrayOutput() RecoveryPointsV2ArrayOutput {
	return i.ToRecoveryPointsV2ArrayOutputWithContext(context.Background())
}

func (i RecoveryPointsV2Array) ToRecoveryPointsV2ArrayOutputWithContext(ctx context.Context) RecoveryPointsV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryPointsV2ArrayOutput)
}

// RecoveryPointsV2MapInput is an input type that accepts RecoveryPointsV2Map and RecoveryPointsV2MapOutput values.
// You can construct a concrete instance of `RecoveryPointsV2MapInput` via:
//
//	RecoveryPointsV2Map{ "key": RecoveryPointsV2Args{...} }
type RecoveryPointsV2MapInput interface {
	pulumi.Input

	ToRecoveryPointsV2MapOutput() RecoveryPointsV2MapOutput
	ToRecoveryPointsV2MapOutputWithContext(context.Context) RecoveryPointsV2MapOutput
}

type RecoveryPointsV2Map map[string]RecoveryPointsV2Input

func (RecoveryPointsV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoveryPointsV2)(nil)).Elem()
}

func (i RecoveryPointsV2Map) ToRecoveryPointsV2MapOutput() RecoveryPointsV2MapOutput {
	return i.ToRecoveryPointsV2MapOutputWithContext(context.Background())
}

func (i RecoveryPointsV2Map) ToRecoveryPointsV2MapOutputWithContext(ctx context.Context) RecoveryPointsV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryPointsV2MapOutput)
}

type RecoveryPointsV2Output struct{ *pulumi.OutputState }

func (RecoveryPointsV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoveryPointsV2)(nil)).Elem()
}

func (o RecoveryPointsV2Output) ToRecoveryPointsV2Output() RecoveryPointsV2Output {
	return o
}

func (o RecoveryPointsV2Output) ToRecoveryPointsV2OutputWithContext(ctx context.Context) RecoveryPointsV2Output {
	return o
}

// The UTC date and time in ISO-8601 format when the Recovery point is created.
func (o RecoveryPointsV2Output) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
func (o RecoveryPointsV2Output) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// recovery point UUID
func (o RecoveryPointsV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o RecoveryPointsV2Output) Links() RecoveryPointsV2LinkArrayOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) RecoveryPointsV2LinkArrayOutput { return v.Links }).(RecoveryPointsV2LinkArrayOutput)
}

// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
func (o RecoveryPointsV2Output) LocationAgnosticId() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.LocationAgnosticId }).(pulumi.StringOutput)
}

// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
func (o RecoveryPointsV2Output) LocationReferences() RecoveryPointsV2LocationReferenceArrayOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) RecoveryPointsV2LocationReferenceArrayOutput { return v.LocationReferences }).(RecoveryPointsV2LocationReferenceArrayOutput)
}

// -(Optional) The name of the Recovery point.
func (o RecoveryPointsV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
func (o RecoveryPointsV2Output) OwnerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.OwnerExtId }).(pulumi.StringOutput)
}

// -(Optional) Type of the Recovery point.
// * supported values:
// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
func (o RecoveryPointsV2Output) RecoveryPointType() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.RecoveryPointType }).(pulumi.StringOutput)
}

// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
// * supported values:
// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
func (o RecoveryPointsV2Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A globally unique identifier that represents the tenant that owns this entity
func (o RecoveryPointsV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
func (o RecoveryPointsV2Output) VmRecoveryPoints() RecoveryPointsV2VmRecoveryPointArrayOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) RecoveryPointsV2VmRecoveryPointArrayOutput { return v.VmRecoveryPoints }).(RecoveryPointsV2VmRecoveryPointArrayOutput)
}

// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
func (o RecoveryPointsV2Output) VolumeGroupRecoveryPoints() RecoveryPointsV2VolumeGroupRecoveryPointArrayOutput {
	return o.ApplyT(func(v *RecoveryPointsV2) RecoveryPointsV2VolumeGroupRecoveryPointArrayOutput {
		return v.VolumeGroupRecoveryPoints
	}).(RecoveryPointsV2VolumeGroupRecoveryPointArrayOutput)
}

type RecoveryPointsV2ArrayOutput struct{ *pulumi.OutputState }

func (RecoveryPointsV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoveryPointsV2)(nil)).Elem()
}

func (o RecoveryPointsV2ArrayOutput) ToRecoveryPointsV2ArrayOutput() RecoveryPointsV2ArrayOutput {
	return o
}

func (o RecoveryPointsV2ArrayOutput) ToRecoveryPointsV2ArrayOutputWithContext(ctx context.Context) RecoveryPointsV2ArrayOutput {
	return o
}

func (o RecoveryPointsV2ArrayOutput) Index(i pulumi.IntInput) RecoveryPointsV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecoveryPointsV2 {
		return vs[0].([]*RecoveryPointsV2)[vs[1].(int)]
	}).(RecoveryPointsV2Output)
}

type RecoveryPointsV2MapOutput struct{ *pulumi.OutputState }

func (RecoveryPointsV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoveryPointsV2)(nil)).Elem()
}

func (o RecoveryPointsV2MapOutput) ToRecoveryPointsV2MapOutput() RecoveryPointsV2MapOutput {
	return o
}

func (o RecoveryPointsV2MapOutput) ToRecoveryPointsV2MapOutputWithContext(ctx context.Context) RecoveryPointsV2MapOutput {
	return o
}

func (o RecoveryPointsV2MapOutput) MapIndex(k pulumi.StringInput) RecoveryPointsV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecoveryPointsV2 {
		return vs[0].(map[string]*RecoveryPointsV2)[vs[1].(string)]
	}).(RecoveryPointsV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryPointsV2Input)(nil)).Elem(), &RecoveryPointsV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryPointsV2ArrayInput)(nil)).Elem(), RecoveryPointsV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryPointsV2MapInput)(nil)).Elem(), RecoveryPointsV2Map{})
	pulumi.RegisterOutputType(RecoveryPointsV2Output{})
	pulumi.RegisterOutputType(RecoveryPointsV2ArrayOutput{})
	pulumi.RegisterOutputType(RecoveryPointsV2MapOutput{})
}
