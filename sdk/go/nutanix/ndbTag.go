// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create tags based on the input parameters.
//
// ## Example Usage
//
// ### resource to create tag
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbTag(ctx, "name", &nutanix.NdbTagArgs{
//				Description: pulumi.String("this is desc ok"),
//				EntityType:  pulumi.String("DATABASE"),
//				Required:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### resource to update tag with status
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbTag(ctx, "name", &nutanix.NdbTagArgs{
//				Description: pulumi.String("this is desc ok"),
//				EntityType:  pulumi.String("DATABASE"),
//				Required:    pulumi.Bool(true),
//				Status:      pulumi.String("DEPRECATED"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbTag struct {
	pulumi.CustomResourceState

	// date created of the tag
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// modified date of tha tag
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// description for the tag
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// name for the tag
	Name pulumi.StringOutput `pulumi:"name"`
	// owner id of the tag
	Owner pulumi.StringOutput `pulumi:"owner"`
	// provide a tag value for entities.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
	Status pulumi.StringOutput `pulumi:"status"`
	// value for the tag
	Values pulumi.IntOutput `pulumi:"values"`
}

// NewNdbTag registers a new resource with the given unique name, arguments, and options.
func NewNdbTag(ctx *pulumi.Context,
	name string, args *NdbTagArgs, opts ...pulumi.ResourceOption) (*NdbTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbTag
	err := ctx.RegisterResource("nutanix:index/ndbTag:NdbTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbTag gets an existing NdbTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbTagState, opts ...pulumi.ResourceOption) (*NdbTag, error) {
	var resource NdbTag
	err := ctx.ReadResource("nutanix:index/ndbTag:NdbTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbTag resources.
type ndbTagState struct {
	// date created of the tag
	DateCreated *string `pulumi:"dateCreated"`
	// modified date of tha tag
	DateModified *string `pulumi:"dateModified"`
	// description for the tag
	Description *string `pulumi:"description"`
	// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
	EntityType *string `pulumi:"entityType"`
	// name for the tag
	Name *string `pulumi:"name"`
	// owner id of the tag
	Owner *string `pulumi:"owner"`
	// provide a tag value for entities.
	Required *bool `pulumi:"required"`
	// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
	Status *string `pulumi:"status"`
	// value for the tag
	Values *int `pulumi:"values"`
}

type NdbTagState struct {
	// date created of the tag
	DateCreated pulumi.StringPtrInput
	// modified date of tha tag
	DateModified pulumi.StringPtrInput
	// description for the tag
	Description pulumi.StringPtrInput
	// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
	EntityType pulumi.StringPtrInput
	// name for the tag
	Name pulumi.StringPtrInput
	// owner id of the tag
	Owner pulumi.StringPtrInput
	// provide a tag value for entities.
	Required pulumi.BoolPtrInput
	// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
	Status pulumi.StringPtrInput
	// value for the tag
	Values pulumi.IntPtrInput
}

func (NdbTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbTagState)(nil)).Elem()
}

type ndbTagArgs struct {
	// description for the tag
	Description *string `pulumi:"description"`
	// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
	EntityType string `pulumi:"entityType"`
	// name for the tag
	Name *string `pulumi:"name"`
	// provide a tag value for entities.
	Required *bool `pulumi:"required"`
	// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a NdbTag resource.
type NdbTagArgs struct {
	// description for the tag
	Description pulumi.StringPtrInput
	// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
	EntityType pulumi.StringInput
	// name for the tag
	Name pulumi.StringPtrInput
	// provide a tag value for entities.
	Required pulumi.BoolPtrInput
	// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
	Status pulumi.StringPtrInput
}

func (NdbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbTagArgs)(nil)).Elem()
}

type NdbTagInput interface {
	pulumi.Input

	ToNdbTagOutput() NdbTagOutput
	ToNdbTagOutputWithContext(ctx context.Context) NdbTagOutput
}

func (*NdbTag) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbTag)(nil)).Elem()
}

func (i *NdbTag) ToNdbTagOutput() NdbTagOutput {
	return i.ToNdbTagOutputWithContext(context.Background())
}

func (i *NdbTag) ToNdbTagOutputWithContext(ctx context.Context) NdbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbTagOutput)
}

// NdbTagArrayInput is an input type that accepts NdbTagArray and NdbTagArrayOutput values.
// You can construct a concrete instance of `NdbTagArrayInput` via:
//
//	NdbTagArray{ NdbTagArgs{...} }
type NdbTagArrayInput interface {
	pulumi.Input

	ToNdbTagArrayOutput() NdbTagArrayOutput
	ToNdbTagArrayOutputWithContext(context.Context) NdbTagArrayOutput
}

type NdbTagArray []NdbTagInput

func (NdbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbTag)(nil)).Elem()
}

func (i NdbTagArray) ToNdbTagArrayOutput() NdbTagArrayOutput {
	return i.ToNdbTagArrayOutputWithContext(context.Background())
}

func (i NdbTagArray) ToNdbTagArrayOutputWithContext(ctx context.Context) NdbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbTagArrayOutput)
}

// NdbTagMapInput is an input type that accepts NdbTagMap and NdbTagMapOutput values.
// You can construct a concrete instance of `NdbTagMapInput` via:
//
//	NdbTagMap{ "key": NdbTagArgs{...} }
type NdbTagMapInput interface {
	pulumi.Input

	ToNdbTagMapOutput() NdbTagMapOutput
	ToNdbTagMapOutputWithContext(context.Context) NdbTagMapOutput
}

type NdbTagMap map[string]NdbTagInput

func (NdbTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbTag)(nil)).Elem()
}

func (i NdbTagMap) ToNdbTagMapOutput() NdbTagMapOutput {
	return i.ToNdbTagMapOutputWithContext(context.Background())
}

func (i NdbTagMap) ToNdbTagMapOutputWithContext(ctx context.Context) NdbTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbTagMapOutput)
}

type NdbTagOutput struct{ *pulumi.OutputState }

func (NdbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbTag)(nil)).Elem()
}

func (o NdbTagOutput) ToNdbTagOutput() NdbTagOutput {
	return o
}

func (o NdbTagOutput) ToNdbTagOutputWithContext(ctx context.Context) NdbTagOutput {
	return o
}

// date created of the tag
func (o NdbTagOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// modified date of tha tag
func (o NdbTagOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// description for the tag
func (o NdbTagOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
func (o NdbTagOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// name for the tag
func (o NdbTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// owner id of the tag
func (o NdbTagOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// provide a tag value for entities.
func (o NdbTagOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
func (o NdbTagOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// value for the tag
func (o NdbTagOutput) Values() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbTag) pulumi.IntOutput { return v.Values }).(pulumi.IntOutput)
}

type NdbTagArrayOutput struct{ *pulumi.OutputState }

func (NdbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbTag)(nil)).Elem()
}

func (o NdbTagArrayOutput) ToNdbTagArrayOutput() NdbTagArrayOutput {
	return o
}

func (o NdbTagArrayOutput) ToNdbTagArrayOutputWithContext(ctx context.Context) NdbTagArrayOutput {
	return o
}

func (o NdbTagArrayOutput) Index(i pulumi.IntInput) NdbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbTag {
		return vs[0].([]*NdbTag)[vs[1].(int)]
	}).(NdbTagOutput)
}

type NdbTagMapOutput struct{ *pulumi.OutputState }

func (NdbTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbTag)(nil)).Elem()
}

func (o NdbTagMapOutput) ToNdbTagMapOutput() NdbTagMapOutput {
	return o
}

func (o NdbTagMapOutput) ToNdbTagMapOutputWithContext(ctx context.Context) NdbTagMapOutput {
	return o
}

func (o NdbTagMapOutput) MapIndex(k pulumi.StringInput) NdbTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbTag {
		return vs[0].(map[string]*NdbTag)[vs[1].(string)]
	}).(NdbTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbTagInput)(nil)).Elem(), &NdbTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbTagArrayInput)(nil)).Elem(), NdbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbTagMapInput)(nil)).Elem(), NdbTagMap{})
	pulumi.RegisterOutputType(NdbTagOutput{})
	pulumi.RegisterOutputType(NdbTagArrayOutput{})
	pulumi.RegisterOutputType(NdbTagMapOutput{})
}
