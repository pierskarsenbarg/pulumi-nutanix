// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KarbonWorkerNodepool struct {
	pulumi.CustomResourceState

	AhvConfig     KarbonWorkerNodepoolAhvConfigOutput `pulumi:"ahvConfig"`
	ClusterName   pulumi.StringOutput                 `pulumi:"clusterName"`
	Labels        pulumi.MapOutput                    `pulumi:"labels"`
	Name          pulumi.StringOutput                 `pulumi:"name"`
	NodeOsVersion pulumi.StringOutput                 `pulumi:"nodeOsVersion"`
	Nodes         KarbonWorkerNodepoolNodeArrayOutput `pulumi:"nodes"`
	NumInstances  pulumi.IntOutput                    `pulumi:"numInstances"`
}

// NewKarbonWorkerNodepool registers a new resource with the given unique name, arguments, and options.
func NewKarbonWorkerNodepool(ctx *pulumi.Context,
	name string, args *KarbonWorkerNodepoolArgs, opts ...pulumi.ResourceOption) (*KarbonWorkerNodepool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.NumInstances == nil {
		return nil, errors.New("invalid value for required argument 'NumInstances'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KarbonWorkerNodepool
	err := ctx.RegisterResource("nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKarbonWorkerNodepool gets an existing KarbonWorkerNodepool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKarbonWorkerNodepool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KarbonWorkerNodepoolState, opts ...pulumi.ResourceOption) (*KarbonWorkerNodepool, error) {
	var resource KarbonWorkerNodepool
	err := ctx.ReadResource("nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KarbonWorkerNodepool resources.
type karbonWorkerNodepoolState struct {
	AhvConfig     *KarbonWorkerNodepoolAhvConfig `pulumi:"ahvConfig"`
	ClusterName   *string                        `pulumi:"clusterName"`
	Labels        map[string]interface{}         `pulumi:"labels"`
	Name          *string                        `pulumi:"name"`
	NodeOsVersion *string                        `pulumi:"nodeOsVersion"`
	Nodes         []KarbonWorkerNodepoolNode     `pulumi:"nodes"`
	NumInstances  *int                           `pulumi:"numInstances"`
}

type KarbonWorkerNodepoolState struct {
	AhvConfig     KarbonWorkerNodepoolAhvConfigPtrInput
	ClusterName   pulumi.StringPtrInput
	Labels        pulumi.MapInput
	Name          pulumi.StringPtrInput
	NodeOsVersion pulumi.StringPtrInput
	Nodes         KarbonWorkerNodepoolNodeArrayInput
	NumInstances  pulumi.IntPtrInput
}

func (KarbonWorkerNodepoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*karbonWorkerNodepoolState)(nil)).Elem()
}

type karbonWorkerNodepoolArgs struct {
	AhvConfig     *KarbonWorkerNodepoolAhvConfig `pulumi:"ahvConfig"`
	ClusterName   string                         `pulumi:"clusterName"`
	Labels        map[string]interface{}         `pulumi:"labels"`
	Name          *string                        `pulumi:"name"`
	NodeOsVersion *string                        `pulumi:"nodeOsVersion"`
	NumInstances  int                            `pulumi:"numInstances"`
}

// The set of arguments for constructing a KarbonWorkerNodepool resource.
type KarbonWorkerNodepoolArgs struct {
	AhvConfig     KarbonWorkerNodepoolAhvConfigPtrInput
	ClusterName   pulumi.StringInput
	Labels        pulumi.MapInput
	Name          pulumi.StringPtrInput
	NodeOsVersion pulumi.StringPtrInput
	NumInstances  pulumi.IntInput
}

func (KarbonWorkerNodepoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*karbonWorkerNodepoolArgs)(nil)).Elem()
}

type KarbonWorkerNodepoolInput interface {
	pulumi.Input

	ToKarbonWorkerNodepoolOutput() KarbonWorkerNodepoolOutput
	ToKarbonWorkerNodepoolOutputWithContext(ctx context.Context) KarbonWorkerNodepoolOutput
}

func (*KarbonWorkerNodepool) ElementType() reflect.Type {
	return reflect.TypeOf((**KarbonWorkerNodepool)(nil)).Elem()
}

func (i *KarbonWorkerNodepool) ToKarbonWorkerNodepoolOutput() KarbonWorkerNodepoolOutput {
	return i.ToKarbonWorkerNodepoolOutputWithContext(context.Background())
}

func (i *KarbonWorkerNodepool) ToKarbonWorkerNodepoolOutputWithContext(ctx context.Context) KarbonWorkerNodepoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KarbonWorkerNodepoolOutput)
}

// KarbonWorkerNodepoolArrayInput is an input type that accepts KarbonWorkerNodepoolArray and KarbonWorkerNodepoolArrayOutput values.
// You can construct a concrete instance of `KarbonWorkerNodepoolArrayInput` via:
//
//	KarbonWorkerNodepoolArray{ KarbonWorkerNodepoolArgs{...} }
type KarbonWorkerNodepoolArrayInput interface {
	pulumi.Input

	ToKarbonWorkerNodepoolArrayOutput() KarbonWorkerNodepoolArrayOutput
	ToKarbonWorkerNodepoolArrayOutputWithContext(context.Context) KarbonWorkerNodepoolArrayOutput
}

type KarbonWorkerNodepoolArray []KarbonWorkerNodepoolInput

func (KarbonWorkerNodepoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KarbonWorkerNodepool)(nil)).Elem()
}

func (i KarbonWorkerNodepoolArray) ToKarbonWorkerNodepoolArrayOutput() KarbonWorkerNodepoolArrayOutput {
	return i.ToKarbonWorkerNodepoolArrayOutputWithContext(context.Background())
}

func (i KarbonWorkerNodepoolArray) ToKarbonWorkerNodepoolArrayOutputWithContext(ctx context.Context) KarbonWorkerNodepoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KarbonWorkerNodepoolArrayOutput)
}

// KarbonWorkerNodepoolMapInput is an input type that accepts KarbonWorkerNodepoolMap and KarbonWorkerNodepoolMapOutput values.
// You can construct a concrete instance of `KarbonWorkerNodepoolMapInput` via:
//
//	KarbonWorkerNodepoolMap{ "key": KarbonWorkerNodepoolArgs{...} }
type KarbonWorkerNodepoolMapInput interface {
	pulumi.Input

	ToKarbonWorkerNodepoolMapOutput() KarbonWorkerNodepoolMapOutput
	ToKarbonWorkerNodepoolMapOutputWithContext(context.Context) KarbonWorkerNodepoolMapOutput
}

type KarbonWorkerNodepoolMap map[string]KarbonWorkerNodepoolInput

func (KarbonWorkerNodepoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KarbonWorkerNodepool)(nil)).Elem()
}

func (i KarbonWorkerNodepoolMap) ToKarbonWorkerNodepoolMapOutput() KarbonWorkerNodepoolMapOutput {
	return i.ToKarbonWorkerNodepoolMapOutputWithContext(context.Background())
}

func (i KarbonWorkerNodepoolMap) ToKarbonWorkerNodepoolMapOutputWithContext(ctx context.Context) KarbonWorkerNodepoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KarbonWorkerNodepoolMapOutput)
}

type KarbonWorkerNodepoolOutput struct{ *pulumi.OutputState }

func (KarbonWorkerNodepoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KarbonWorkerNodepool)(nil)).Elem()
}

func (o KarbonWorkerNodepoolOutput) ToKarbonWorkerNodepoolOutput() KarbonWorkerNodepoolOutput {
	return o
}

func (o KarbonWorkerNodepoolOutput) ToKarbonWorkerNodepoolOutputWithContext(ctx context.Context) KarbonWorkerNodepoolOutput {
	return o
}

func (o KarbonWorkerNodepoolOutput) AhvConfig() KarbonWorkerNodepoolAhvConfigOutput {
	return o.ApplyT(func(v *KarbonWorkerNodepool) KarbonWorkerNodepoolAhvConfigOutput { return v.AhvConfig }).(KarbonWorkerNodepoolAhvConfigOutput)
}

func (o KarbonWorkerNodepoolOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *KarbonWorkerNodepool) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o KarbonWorkerNodepoolOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *KarbonWorkerNodepool) pulumi.MapOutput { return v.Labels }).(pulumi.MapOutput)
}

func (o KarbonWorkerNodepoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KarbonWorkerNodepool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KarbonWorkerNodepoolOutput) NodeOsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KarbonWorkerNodepool) pulumi.StringOutput { return v.NodeOsVersion }).(pulumi.StringOutput)
}

func (o KarbonWorkerNodepoolOutput) Nodes() KarbonWorkerNodepoolNodeArrayOutput {
	return o.ApplyT(func(v *KarbonWorkerNodepool) KarbonWorkerNodepoolNodeArrayOutput { return v.Nodes }).(KarbonWorkerNodepoolNodeArrayOutput)
}

func (o KarbonWorkerNodepoolOutput) NumInstances() pulumi.IntOutput {
	return o.ApplyT(func(v *KarbonWorkerNodepool) pulumi.IntOutput { return v.NumInstances }).(pulumi.IntOutput)
}

type KarbonWorkerNodepoolArrayOutput struct{ *pulumi.OutputState }

func (KarbonWorkerNodepoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KarbonWorkerNodepool)(nil)).Elem()
}

func (o KarbonWorkerNodepoolArrayOutput) ToKarbonWorkerNodepoolArrayOutput() KarbonWorkerNodepoolArrayOutput {
	return o
}

func (o KarbonWorkerNodepoolArrayOutput) ToKarbonWorkerNodepoolArrayOutputWithContext(ctx context.Context) KarbonWorkerNodepoolArrayOutput {
	return o
}

func (o KarbonWorkerNodepoolArrayOutput) Index(i pulumi.IntInput) KarbonWorkerNodepoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KarbonWorkerNodepool {
		return vs[0].([]*KarbonWorkerNodepool)[vs[1].(int)]
	}).(KarbonWorkerNodepoolOutput)
}

type KarbonWorkerNodepoolMapOutput struct{ *pulumi.OutputState }

func (KarbonWorkerNodepoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KarbonWorkerNodepool)(nil)).Elem()
}

func (o KarbonWorkerNodepoolMapOutput) ToKarbonWorkerNodepoolMapOutput() KarbonWorkerNodepoolMapOutput {
	return o
}

func (o KarbonWorkerNodepoolMapOutput) ToKarbonWorkerNodepoolMapOutputWithContext(ctx context.Context) KarbonWorkerNodepoolMapOutput {
	return o
}

func (o KarbonWorkerNodepoolMapOutput) MapIndex(k pulumi.StringInput) KarbonWorkerNodepoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KarbonWorkerNodepool {
		return vs[0].(map[string]*KarbonWorkerNodepool)[vs[1].(string)]
	}).(KarbonWorkerNodepoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KarbonWorkerNodepoolInput)(nil)).Elem(), &KarbonWorkerNodepool{})
	pulumi.RegisterInputType(reflect.TypeOf((*KarbonWorkerNodepoolArrayInput)(nil)).Elem(), KarbonWorkerNodepoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KarbonWorkerNodepoolMapInput)(nil)).Elem(), KarbonWorkerNodepoolMap{})
	pulumi.RegisterOutputType(KarbonWorkerNodepoolOutput{})
	pulumi.RegisterOutputType(KarbonWorkerNodepoolArrayOutput{})
	pulumi.RegisterOutputType(KarbonWorkerNodepoolMapOutput{})
}
