// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Collaborative reboot or shutdown of a Virtual Machine through the ACPI support in the operating system. Also, Collaborative reboot or shutdown of a Virtual Machine, requesting Nutanix Guest Tools to trigger a reboot or shutdown from within the VM.
type VmShutdownActionV2 struct {
	pulumi.CustomResourceState

	// It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
	Action pulumi.StringOutput `pulumi:"action"`
	// The globally unique identifier of a VM. It should be of type UUID.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
	GuestPowerStateTransitionConfigs VmShutdownActionV2GuestPowerStateTransitionConfigArrayOutput `pulumi:"guestPowerStateTransitionConfigs"`
}

// NewVmShutdownActionV2 registers a new resource with the given unique name, arguments, and options.
func NewVmShutdownActionV2(ctx *pulumi.Context,
	name string, args *VmShutdownActionV2Args, opts ...pulumi.ResourceOption) (*VmShutdownActionV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmShutdownActionV2
	err := ctx.RegisterResource("nutanix:index/vmShutdownActionV2:VmShutdownActionV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmShutdownActionV2 gets an existing VmShutdownActionV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmShutdownActionV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmShutdownActionV2State, opts ...pulumi.ResourceOption) (*VmShutdownActionV2, error) {
	var resource VmShutdownActionV2
	err := ctx.ReadResource("nutanix:index/vmShutdownActionV2:VmShutdownActionV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmShutdownActionV2 resources.
type vmShutdownActionV2State struct {
	// It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
	Action *string `pulumi:"action"`
	// The globally unique identifier of a VM. It should be of type UUID.
	ExtId *string `pulumi:"extId"`
	// Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
	GuestPowerStateTransitionConfigs []VmShutdownActionV2GuestPowerStateTransitionConfig `pulumi:"guestPowerStateTransitionConfigs"`
}

type VmShutdownActionV2State struct {
	// It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
	Action pulumi.StringPtrInput
	// The globally unique identifier of a VM. It should be of type UUID.
	ExtId pulumi.StringPtrInput
	// Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
	GuestPowerStateTransitionConfigs VmShutdownActionV2GuestPowerStateTransitionConfigArrayInput
}

func (VmShutdownActionV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*vmShutdownActionV2State)(nil)).Elem()
}

type vmShutdownActionV2Args struct {
	// It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
	Action string `pulumi:"action"`
	// The globally unique identifier of a VM. It should be of type UUID.
	ExtId string `pulumi:"extId"`
	// Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
	GuestPowerStateTransitionConfigs []VmShutdownActionV2GuestPowerStateTransitionConfig `pulumi:"guestPowerStateTransitionConfigs"`
}

// The set of arguments for constructing a VmShutdownActionV2 resource.
type VmShutdownActionV2Args struct {
	// It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
	Action pulumi.StringInput
	// The globally unique identifier of a VM. It should be of type UUID.
	ExtId pulumi.StringInput
	// Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
	GuestPowerStateTransitionConfigs VmShutdownActionV2GuestPowerStateTransitionConfigArrayInput
}

func (VmShutdownActionV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vmShutdownActionV2Args)(nil)).Elem()
}

type VmShutdownActionV2Input interface {
	pulumi.Input

	ToVmShutdownActionV2Output() VmShutdownActionV2Output
	ToVmShutdownActionV2OutputWithContext(ctx context.Context) VmShutdownActionV2Output
}

func (*VmShutdownActionV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VmShutdownActionV2)(nil)).Elem()
}

func (i *VmShutdownActionV2) ToVmShutdownActionV2Output() VmShutdownActionV2Output {
	return i.ToVmShutdownActionV2OutputWithContext(context.Background())
}

func (i *VmShutdownActionV2) ToVmShutdownActionV2OutputWithContext(ctx context.Context) VmShutdownActionV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VmShutdownActionV2Output)
}

// VmShutdownActionV2ArrayInput is an input type that accepts VmShutdownActionV2Array and VmShutdownActionV2ArrayOutput values.
// You can construct a concrete instance of `VmShutdownActionV2ArrayInput` via:
//
//	VmShutdownActionV2Array{ VmShutdownActionV2Args{...} }
type VmShutdownActionV2ArrayInput interface {
	pulumi.Input

	ToVmShutdownActionV2ArrayOutput() VmShutdownActionV2ArrayOutput
	ToVmShutdownActionV2ArrayOutputWithContext(context.Context) VmShutdownActionV2ArrayOutput
}

type VmShutdownActionV2Array []VmShutdownActionV2Input

func (VmShutdownActionV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmShutdownActionV2)(nil)).Elem()
}

func (i VmShutdownActionV2Array) ToVmShutdownActionV2ArrayOutput() VmShutdownActionV2ArrayOutput {
	return i.ToVmShutdownActionV2ArrayOutputWithContext(context.Background())
}

func (i VmShutdownActionV2Array) ToVmShutdownActionV2ArrayOutputWithContext(ctx context.Context) VmShutdownActionV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmShutdownActionV2ArrayOutput)
}

// VmShutdownActionV2MapInput is an input type that accepts VmShutdownActionV2Map and VmShutdownActionV2MapOutput values.
// You can construct a concrete instance of `VmShutdownActionV2MapInput` via:
//
//	VmShutdownActionV2Map{ "key": VmShutdownActionV2Args{...} }
type VmShutdownActionV2MapInput interface {
	pulumi.Input

	ToVmShutdownActionV2MapOutput() VmShutdownActionV2MapOutput
	ToVmShutdownActionV2MapOutputWithContext(context.Context) VmShutdownActionV2MapOutput
}

type VmShutdownActionV2Map map[string]VmShutdownActionV2Input

func (VmShutdownActionV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmShutdownActionV2)(nil)).Elem()
}

func (i VmShutdownActionV2Map) ToVmShutdownActionV2MapOutput() VmShutdownActionV2MapOutput {
	return i.ToVmShutdownActionV2MapOutputWithContext(context.Background())
}

func (i VmShutdownActionV2Map) ToVmShutdownActionV2MapOutputWithContext(ctx context.Context) VmShutdownActionV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmShutdownActionV2MapOutput)
}

type VmShutdownActionV2Output struct{ *pulumi.OutputState }

func (VmShutdownActionV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VmShutdownActionV2)(nil)).Elem()
}

func (o VmShutdownActionV2Output) ToVmShutdownActionV2Output() VmShutdownActionV2Output {
	return o
}

func (o VmShutdownActionV2Output) ToVmShutdownActionV2OutputWithContext(ctx context.Context) VmShutdownActionV2Output {
	return o
}

// It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
func (o VmShutdownActionV2Output) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *VmShutdownActionV2) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The globally unique identifier of a VM. It should be of type UUID.
func (o VmShutdownActionV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmShutdownActionV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
func (o VmShutdownActionV2Output) GuestPowerStateTransitionConfigs() VmShutdownActionV2GuestPowerStateTransitionConfigArrayOutput {
	return o.ApplyT(func(v *VmShutdownActionV2) VmShutdownActionV2GuestPowerStateTransitionConfigArrayOutput {
		return v.GuestPowerStateTransitionConfigs
	}).(VmShutdownActionV2GuestPowerStateTransitionConfigArrayOutput)
}

type VmShutdownActionV2ArrayOutput struct{ *pulumi.OutputState }

func (VmShutdownActionV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmShutdownActionV2)(nil)).Elem()
}

func (o VmShutdownActionV2ArrayOutput) ToVmShutdownActionV2ArrayOutput() VmShutdownActionV2ArrayOutput {
	return o
}

func (o VmShutdownActionV2ArrayOutput) ToVmShutdownActionV2ArrayOutputWithContext(ctx context.Context) VmShutdownActionV2ArrayOutput {
	return o
}

func (o VmShutdownActionV2ArrayOutput) Index(i pulumi.IntInput) VmShutdownActionV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmShutdownActionV2 {
		return vs[0].([]*VmShutdownActionV2)[vs[1].(int)]
	}).(VmShutdownActionV2Output)
}

type VmShutdownActionV2MapOutput struct{ *pulumi.OutputState }

func (VmShutdownActionV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmShutdownActionV2)(nil)).Elem()
}

func (o VmShutdownActionV2MapOutput) ToVmShutdownActionV2MapOutput() VmShutdownActionV2MapOutput {
	return o
}

func (o VmShutdownActionV2MapOutput) ToVmShutdownActionV2MapOutputWithContext(ctx context.Context) VmShutdownActionV2MapOutput {
	return o
}

func (o VmShutdownActionV2MapOutput) MapIndex(k pulumi.StringInput) VmShutdownActionV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmShutdownActionV2 {
		return vs[0].(map[string]*VmShutdownActionV2)[vs[1].(string)]
	}).(VmShutdownActionV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmShutdownActionV2Input)(nil)).Elem(), &VmShutdownActionV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmShutdownActionV2ArrayInput)(nil)).Elem(), VmShutdownActionV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmShutdownActionV2MapInput)(nil)).Elem(), VmShutdownActionV2Map{})
	pulumi.RegisterOutputType(VmShutdownActionV2Output{})
	pulumi.RegisterOutputType(VmShutdownActionV2ArrayOutput{})
	pulumi.RegisterOutputType(VmShutdownActionV2MapOutput{})
}
