// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fetches the iSCSI client details identified by {extId}.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetVolumeIscsiClientV2(ctx, &nutanix.GetVolumeIscsiClientV2Args{
//				ExtId: _var.Iscsi_client_ext_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Argument Reference
//
// The following arguments are supported:
//
// * `extId`: -(Required) A query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource.
func GetVolumeIscsiClientV2(ctx *pulumi.Context, args *GetVolumeIscsiClientV2Args, opts ...pulumi.InvokeOption) (*GetVolumeIscsiClientV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumeIscsiClientV2Result
	err := ctx.Invoke("nutanix:index/getVolumeIscsiClientV2:getVolumeIscsiClientV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumeIscsiClientV2.
type GetVolumeIscsiClientV2Args struct {
	// - A globally unique identifier of an instance that is suitable for external consumption.
	ExtId string `pulumi:"extId"`
	// - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
	IscsiInitiatorNetworkIds []GetVolumeIscsiClientV2IscsiInitiatorNetworkId `pulumi:"iscsiInitiatorNetworkIds"`
}

// A collection of values returned by getVolumeIscsiClientV2.
type GetVolumeIscsiClientV2Result struct {
	AttachedTargets []GetVolumeIscsiClientV2AttachedTarget `pulumi:"attachedTargets"`
	// -(Optional) The site where the Volume Group attach operation should be processed. This is an optional field. This field may only be set if Metro DR has been configured for this Volume Group. Valid values are SECONDARY, PRIMARY.
	AttachmentSite   string `pulumi:"attachmentSite"`
	ClusterReference string `pulumi:"clusterReference"`
	// -(Optional) (Optional) The authentication type enabled for the Volume Group. This is an optional field. If omitted, authentication is not configured for the Volume Group. If this is set to CHAP, the target/client secret must be provided. Valid values are CHAP, NONE
	EnabledAuthentications string `pulumi:"enabledAuthentications"`
	// - A globally unique identifier of an instance that is suitable for external consumption.
	ExtId string `pulumi:"extId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// -iSCSI initiator name. During the attach operation, exactly one of iscsiInitiatorName and iscsiInitiatorNetworkId must be specified. This field is immutable.
	IscsiInitiatorName string `pulumi:"iscsiInitiatorName"`
	// - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
	IscsiInitiatorNetworkIds []GetVolumeIscsiClientV2IscsiInitiatorNetworkId `pulumi:"iscsiInitiatorNetworkIds"`
	// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []GetVolumeIscsiClientV2Link `pulumi:"links"`
	// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
	TenantId string `pulumi:"tenantId"`
}

func GetVolumeIscsiClientV2Output(ctx *pulumi.Context, args GetVolumeIscsiClientV2OutputArgs, opts ...pulumi.InvokeOption) GetVolumeIscsiClientV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVolumeIscsiClientV2ResultOutput, error) {
			args := v.(GetVolumeIscsiClientV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getVolumeIscsiClientV2:getVolumeIscsiClientV2", args, GetVolumeIscsiClientV2ResultOutput{}, options).(GetVolumeIscsiClientV2ResultOutput), nil
		}).(GetVolumeIscsiClientV2ResultOutput)
}

// A collection of arguments for invoking getVolumeIscsiClientV2.
type GetVolumeIscsiClientV2OutputArgs struct {
	// - A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringInput `pulumi:"extId"`
	// - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
	IscsiInitiatorNetworkIds GetVolumeIscsiClientV2IscsiInitiatorNetworkIdArrayInput `pulumi:"iscsiInitiatorNetworkIds"`
}

func (GetVolumeIscsiClientV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeIscsiClientV2Args)(nil)).Elem()
}

// A collection of values returned by getVolumeIscsiClientV2.
type GetVolumeIscsiClientV2ResultOutput struct{ *pulumi.OutputState }

func (GetVolumeIscsiClientV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeIscsiClientV2Result)(nil)).Elem()
}

func (o GetVolumeIscsiClientV2ResultOutput) ToGetVolumeIscsiClientV2ResultOutput() GetVolumeIscsiClientV2ResultOutput {
	return o
}

func (o GetVolumeIscsiClientV2ResultOutput) ToGetVolumeIscsiClientV2ResultOutputWithContext(ctx context.Context) GetVolumeIscsiClientV2ResultOutput {
	return o
}

func (o GetVolumeIscsiClientV2ResultOutput) AttachedTargets() GetVolumeIscsiClientV2AttachedTargetArrayOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) []GetVolumeIscsiClientV2AttachedTarget { return v.AttachedTargets }).(GetVolumeIscsiClientV2AttachedTargetArrayOutput)
}

// -(Optional) The site where the Volume Group attach operation should be processed. This is an optional field. This field may only be set if Metro DR has been configured for this Volume Group. Valid values are SECONDARY, PRIMARY.
func (o GetVolumeIscsiClientV2ResultOutput) AttachmentSite() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) string { return v.AttachmentSite }).(pulumi.StringOutput)
}

func (o GetVolumeIscsiClientV2ResultOutput) ClusterReference() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) string { return v.ClusterReference }).(pulumi.StringOutput)
}

// -(Optional) (Optional) The authentication type enabled for the Volume Group. This is an optional field. If omitted, authentication is not configured for the Volume Group. If this is set to CHAP, the target/client secret must be provided. Valid values are CHAP, NONE
func (o GetVolumeIscsiClientV2ResultOutput) EnabledAuthentications() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) string { return v.EnabledAuthentications }).(pulumi.StringOutput)
}

// - A globally unique identifier of an instance that is suitable for external consumption.
func (o GetVolumeIscsiClientV2ResultOutput) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) string { return v.ExtId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVolumeIscsiClientV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// -iSCSI initiator name. During the attach operation, exactly one of iscsiInitiatorName and iscsiInitiatorNetworkId must be specified. This field is immutable.
func (o GetVolumeIscsiClientV2ResultOutput) IscsiInitiatorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) string { return v.IscsiInitiatorName }).(pulumi.StringOutput)
}

// - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
func (o GetVolumeIscsiClientV2ResultOutput) IscsiInitiatorNetworkIds() GetVolumeIscsiClientV2IscsiInitiatorNetworkIdArrayOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) []GetVolumeIscsiClientV2IscsiInitiatorNetworkId {
		return v.IscsiInitiatorNetworkIds
	}).(GetVolumeIscsiClientV2IscsiInitiatorNetworkIdArrayOutput)
}

// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o GetVolumeIscsiClientV2ResultOutput) Links() GetVolumeIscsiClientV2LinkArrayOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) []GetVolumeIscsiClientV2Link { return v.Links }).(GetVolumeIscsiClientV2LinkArrayOutput)
}

// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
func (o GetVolumeIscsiClientV2ResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeIscsiClientV2Result) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumeIscsiClientV2ResultOutput{})
}
