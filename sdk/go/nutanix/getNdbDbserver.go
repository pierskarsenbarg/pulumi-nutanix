// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes Database Server VM in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetNdbDbserver(ctx, &nutanix.GetNdbDbserverArgs{
//				Ip: pulumi.StringRef("{{ dbserver_vm_ip }}"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNdbDbserver(ctx *pulumi.Context, args *GetNdbDbserverArgs, opts ...pulumi.InvokeOption) (*GetNdbDbserverResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNdbDbserverResult
	err := ctx.Invoke("nutanix:index/getNdbDbserver:getNdbDbserver", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbDbserver.
type GetNdbDbserverArgs struct {
	DbserverClusterId *string `pulumi:"dbserverClusterId"`
	// id of database server vm
	Id *string `pulumi:"id"`
	// ip of database server vm
	Ip *string `pulumi:"ip"`
	// name of database server vm
	Name        *string `pulumi:"name"`
	NxClusterId *string `pulumi:"nxClusterId"`
	// tags for db server vm
	Tags []GetNdbDbserverTag `pulumi:"tags"`
	// vm cluster id of database server
	VmClusterId *string `pulumi:"vmClusterId"`
	// vm cluster name of database server
	VmClusterName *string `pulumi:"vmClusterName"`
}

// A collection of values returned by getNdbDbserver.
type GetNdbDbserverResult struct {
	// access key id of dbserver vm
	AccessKeyId string `pulumi:"accessKeyId"`
	// access level
	AccessLevel string `pulumi:"accessLevel"`
	// associated time machines ids
	AssociatedTimeMachineIds []string `pulumi:"associatedTimeMachineIds"`
	// client id
	ClientId string `pulumi:"clientId"`
	// clustered or not
	Clustered bool `pulumi:"clustered"`
	// database type
	DatabaseType string `pulumi:"databaseType"`
	// date created of db server vm
	DateCreated string `pulumi:"dateCreated"`
	// date modified of db server vm
	DateModified      string `pulumi:"dateModified"`
	DbserverClusterId string `pulumi:"dbserverClusterId"`
	// dbserver invalid ea state
	DbserverInvalidEaState bool `pulumi:"dbserverInvalidEaState"`
	// description of db server vm
	Description string `pulumi:"description"`
	// era drive id
	EraDriveId string `pulumi:"eraDriveId"`
	// era version
	EraVersion string  `pulumi:"eraVersion"`
	Fqdns      string  `pulumi:"fqdns"`
	Id         string  `pulumi:"id"`
	Ip         *string `pulumi:"ip"`
	// IP addresses of the dbserver vm
	IpAddresses []string `pulumi:"ipAddresses"`
	// is server down or not
	IsServerDriven bool `pulumi:"isServerDriven"`
	// Mac addresses of dbserver vm
	MacAddresses []string `pulumi:"macAddresses"`
	Name         string   `pulumi:"name"`
	NxClusterId  *string  `pulumi:"nxClusterId"`
	// properties of db server vm
	Properties []GetNdbDbserverProperty `pulumi:"properties"`
	// protection domain id
	ProtectionDomainId string `pulumi:"protectionDomainId"`
	// query count
	QueryCount int `pulumi:"queryCount"`
	// Status of Dbserver . Active or not.
	Status string `pulumi:"status"`
	// tags for db server vm
	Tags []GetNdbDbserverTag `pulumi:"tags"`
	// Type of entity. i.e. Dbserver
	Type string `pulumi:"type"`
	// valid diagnostic bundle state
	ValidDiagnosticBundleState bool    `pulumi:"validDiagnosticBundleState"`
	VmClusterId                *string `pulumi:"vmClusterId"`
	VmClusterName              string  `pulumi:"vmClusterName"`
	// clusetr uuid for dbserver vm
	VmClusterUuid string `pulumi:"vmClusterUuid"`
	// info of dbserver vm
	VmInfos []GetNdbDbserverVmInfo `pulumi:"vmInfos"`
	// timezone of dbserver vm
	VmTimezone string `pulumi:"vmTimezone"`
	// window db server
	WindowsDbServer bool `pulumi:"windowsDbServer"`
	// working directory of db server vm
	WorkingDirectory string `pulumi:"workingDirectory"`
}

func GetNdbDbserverOutput(ctx *pulumi.Context, args GetNdbDbserverOutputArgs, opts ...pulumi.InvokeOption) GetNdbDbserverResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNdbDbserverResultOutput, error) {
			args := v.(GetNdbDbserverArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetNdbDbserverResult
			secret, err := ctx.InvokePackageRaw("nutanix:index/getNdbDbserver:getNdbDbserver", args, &rv, "", opts...)
			if err != nil {
				return GetNdbDbserverResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetNdbDbserverResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetNdbDbserverResultOutput), nil
			}
			return output, nil
		}).(GetNdbDbserverResultOutput)
}

// A collection of arguments for invoking getNdbDbserver.
type GetNdbDbserverOutputArgs struct {
	DbserverClusterId pulumi.StringPtrInput `pulumi:"dbserverClusterId"`
	// id of database server vm
	Id pulumi.StringPtrInput `pulumi:"id"`
	// ip of database server vm
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// name of database server vm
	Name        pulumi.StringPtrInput `pulumi:"name"`
	NxClusterId pulumi.StringPtrInput `pulumi:"nxClusterId"`
	// tags for db server vm
	Tags GetNdbDbserverTagArrayInput `pulumi:"tags"`
	// vm cluster id of database server
	VmClusterId pulumi.StringPtrInput `pulumi:"vmClusterId"`
	// vm cluster name of database server
	VmClusterName pulumi.StringPtrInput `pulumi:"vmClusterName"`
}

func (GetNdbDbserverOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbDbserverArgs)(nil)).Elem()
}

// A collection of values returned by getNdbDbserver.
type GetNdbDbserverResultOutput struct{ *pulumi.OutputState }

func (GetNdbDbserverResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbDbserverResult)(nil)).Elem()
}

func (o GetNdbDbserverResultOutput) ToGetNdbDbserverResultOutput() GetNdbDbserverResultOutput {
	return o
}

func (o GetNdbDbserverResultOutput) ToGetNdbDbserverResultOutputWithContext(ctx context.Context) GetNdbDbserverResultOutput {
	return o
}

// access key id of dbserver vm
func (o GetNdbDbserverResultOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// access level
func (o GetNdbDbserverResultOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// associated time machines ids
func (o GetNdbDbserverResultOutput) AssociatedTimeMachineIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) []string { return v.AssociatedTimeMachineIds }).(pulumi.StringArrayOutput)
}

// client id
func (o GetNdbDbserverResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// clustered or not
func (o GetNdbDbserverResultOutput) Clustered() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) bool { return v.Clustered }).(pulumi.BoolOutput)
}

// database type
func (o GetNdbDbserverResultOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.DatabaseType }).(pulumi.StringOutput)
}

// date created of db server vm
func (o GetNdbDbserverResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

// date modified of db server vm
func (o GetNdbDbserverResultOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.DateModified }).(pulumi.StringOutput)
}

func (o GetNdbDbserverResultOutput) DbserverClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.DbserverClusterId }).(pulumi.StringOutput)
}

// dbserver invalid ea state
func (o GetNdbDbserverResultOutput) DbserverInvalidEaState() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) bool { return v.DbserverInvalidEaState }).(pulumi.BoolOutput)
}

// description of db server vm
func (o GetNdbDbserverResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.Description }).(pulumi.StringOutput)
}

// era drive id
func (o GetNdbDbserverResultOutput) EraDriveId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.EraDriveId }).(pulumi.StringOutput)
}

// era version
func (o GetNdbDbserverResultOutput) EraVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.EraVersion }).(pulumi.StringOutput)
}

func (o GetNdbDbserverResultOutput) Fqdns() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.Fqdns }).(pulumi.StringOutput)
}

func (o GetNdbDbserverResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNdbDbserverResultOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// IP addresses of the dbserver vm
func (o GetNdbDbserverResultOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// is server down or not
func (o GetNdbDbserverResultOutput) IsServerDriven() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) bool { return v.IsServerDriven }).(pulumi.BoolOutput)
}

// Mac addresses of dbserver vm
func (o GetNdbDbserverResultOutput) MacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) []string { return v.MacAddresses }).(pulumi.StringArrayOutput)
}

func (o GetNdbDbserverResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNdbDbserverResultOutput) NxClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) *string { return v.NxClusterId }).(pulumi.StringPtrOutput)
}

// properties of db server vm
func (o GetNdbDbserverResultOutput) Properties() GetNdbDbserverPropertyArrayOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) []GetNdbDbserverProperty { return v.Properties }).(GetNdbDbserverPropertyArrayOutput)
}

// protection domain id
func (o GetNdbDbserverResultOutput) ProtectionDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.ProtectionDomainId }).(pulumi.StringOutput)
}

// query count
func (o GetNdbDbserverResultOutput) QueryCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) int { return v.QueryCount }).(pulumi.IntOutput)
}

// Status of Dbserver . Active or not.
func (o GetNdbDbserverResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.Status }).(pulumi.StringOutput)
}

// tags for db server vm
func (o GetNdbDbserverResultOutput) Tags() GetNdbDbserverTagArrayOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) []GetNdbDbserverTag { return v.Tags }).(GetNdbDbserverTagArrayOutput)
}

// Type of entity. i.e. Dbserver
func (o GetNdbDbserverResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.Type }).(pulumi.StringOutput)
}

// valid diagnostic bundle state
func (o GetNdbDbserverResultOutput) ValidDiagnosticBundleState() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) bool { return v.ValidDiagnosticBundleState }).(pulumi.BoolOutput)
}

func (o GetNdbDbserverResultOutput) VmClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) *string { return v.VmClusterId }).(pulumi.StringPtrOutput)
}

func (o GetNdbDbserverResultOutput) VmClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.VmClusterName }).(pulumi.StringOutput)
}

// clusetr uuid for dbserver vm
func (o GetNdbDbserverResultOutput) VmClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.VmClusterUuid }).(pulumi.StringOutput)
}

// info of dbserver vm
func (o GetNdbDbserverResultOutput) VmInfos() GetNdbDbserverVmInfoArrayOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) []GetNdbDbserverVmInfo { return v.VmInfos }).(GetNdbDbserverVmInfoArrayOutput)
}

// timezone of dbserver vm
func (o GetNdbDbserverResultOutput) VmTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.VmTimezone }).(pulumi.StringOutput)
}

// window db server
func (o GetNdbDbserverResultOutput) WindowsDbServer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) bool { return v.WindowsDbServer }).(pulumi.BoolOutput)
}

// working directory of db server vm
func (o GetNdbDbserverResultOutput) WorkingDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbDbserverResult) string { return v.WorkingDirectory }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNdbDbserverResultOutput{})
}
