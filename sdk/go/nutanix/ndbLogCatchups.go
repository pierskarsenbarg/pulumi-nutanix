// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to perform the log cactup for database instance based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbLogCatchups(ctx, "name", &nutanix.NdbLogCatchupsArgs{
//				DatabaseId: pulumi.String("{{ DatabaseID }}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbLogCatchups struct {
	pulumi.CustomResourceState

	DatabaseId pulumi.StringPtrOutput `pulumi:"databaseId"`
	// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
	ForRestore pulumi.BoolPtrOutput `pulumi:"forRestore"`
	// it helps to perform same operation with same config.
	//
	// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
	LogCatchupVersion pulumi.IntPtrOutput `pulumi:"logCatchupVersion"`
	// Time machine id of
	TimeMachineId pulumi.StringPtrOutput `pulumi:"timeMachineId"`
}

// NewNdbLogCatchups registers a new resource with the given unique name, arguments, and options.
func NewNdbLogCatchups(ctx *pulumi.Context,
	name string, args *NdbLogCatchupsArgs, opts ...pulumi.ResourceOption) (*NdbLogCatchups, error) {
	if args == nil {
		args = &NdbLogCatchupsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbLogCatchups
	err := ctx.RegisterResource("nutanix:index/ndbLogCatchups:NdbLogCatchups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbLogCatchups gets an existing NdbLogCatchups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbLogCatchups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbLogCatchupsState, opts ...pulumi.ResourceOption) (*NdbLogCatchups, error) {
	var resource NdbLogCatchups
	err := ctx.ReadResource("nutanix:index/ndbLogCatchups:NdbLogCatchups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbLogCatchups resources.
type ndbLogCatchupsState struct {
	DatabaseId *string `pulumi:"databaseId"`
	// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
	ForRestore *bool `pulumi:"forRestore"`
	// it helps to perform same operation with same config.
	//
	// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
	LogCatchupVersion *int `pulumi:"logCatchupVersion"`
	// Time machine id of
	TimeMachineId *string `pulumi:"timeMachineId"`
}

type NdbLogCatchupsState struct {
	DatabaseId pulumi.StringPtrInput
	// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
	ForRestore pulumi.BoolPtrInput
	// it helps to perform same operation with same config.
	//
	// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
	LogCatchupVersion pulumi.IntPtrInput
	// Time machine id of
	TimeMachineId pulumi.StringPtrInput
}

func (NdbLogCatchupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbLogCatchupsState)(nil)).Elem()
}

type ndbLogCatchupsArgs struct {
	DatabaseId *string `pulumi:"databaseId"`
	// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
	ForRestore *bool `pulumi:"forRestore"`
	// it helps to perform same operation with same config.
	//
	// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
	LogCatchupVersion *int `pulumi:"logCatchupVersion"`
	// Time machine id of
	TimeMachineId *string `pulumi:"timeMachineId"`
}

// The set of arguments for constructing a NdbLogCatchups resource.
type NdbLogCatchupsArgs struct {
	DatabaseId pulumi.StringPtrInput
	// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
	ForRestore pulumi.BoolPtrInput
	// it helps to perform same operation with same config.
	//
	// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
	LogCatchupVersion pulumi.IntPtrInput
	// Time machine id of
	TimeMachineId pulumi.StringPtrInput
}

func (NdbLogCatchupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbLogCatchupsArgs)(nil)).Elem()
}

type NdbLogCatchupsInput interface {
	pulumi.Input

	ToNdbLogCatchupsOutput() NdbLogCatchupsOutput
	ToNdbLogCatchupsOutputWithContext(ctx context.Context) NdbLogCatchupsOutput
}

func (*NdbLogCatchups) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbLogCatchups)(nil)).Elem()
}

func (i *NdbLogCatchups) ToNdbLogCatchupsOutput() NdbLogCatchupsOutput {
	return i.ToNdbLogCatchupsOutputWithContext(context.Background())
}

func (i *NdbLogCatchups) ToNdbLogCatchupsOutputWithContext(ctx context.Context) NdbLogCatchupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbLogCatchupsOutput)
}

// NdbLogCatchupsArrayInput is an input type that accepts NdbLogCatchupsArray and NdbLogCatchupsArrayOutput values.
// You can construct a concrete instance of `NdbLogCatchupsArrayInput` via:
//
//	NdbLogCatchupsArray{ NdbLogCatchupsArgs{...} }
type NdbLogCatchupsArrayInput interface {
	pulumi.Input

	ToNdbLogCatchupsArrayOutput() NdbLogCatchupsArrayOutput
	ToNdbLogCatchupsArrayOutputWithContext(context.Context) NdbLogCatchupsArrayOutput
}

type NdbLogCatchupsArray []NdbLogCatchupsInput

func (NdbLogCatchupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbLogCatchups)(nil)).Elem()
}

func (i NdbLogCatchupsArray) ToNdbLogCatchupsArrayOutput() NdbLogCatchupsArrayOutput {
	return i.ToNdbLogCatchupsArrayOutputWithContext(context.Background())
}

func (i NdbLogCatchupsArray) ToNdbLogCatchupsArrayOutputWithContext(ctx context.Context) NdbLogCatchupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbLogCatchupsArrayOutput)
}

// NdbLogCatchupsMapInput is an input type that accepts NdbLogCatchupsMap and NdbLogCatchupsMapOutput values.
// You can construct a concrete instance of `NdbLogCatchupsMapInput` via:
//
//	NdbLogCatchupsMap{ "key": NdbLogCatchupsArgs{...} }
type NdbLogCatchupsMapInput interface {
	pulumi.Input

	ToNdbLogCatchupsMapOutput() NdbLogCatchupsMapOutput
	ToNdbLogCatchupsMapOutputWithContext(context.Context) NdbLogCatchupsMapOutput
}

type NdbLogCatchupsMap map[string]NdbLogCatchupsInput

func (NdbLogCatchupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbLogCatchups)(nil)).Elem()
}

func (i NdbLogCatchupsMap) ToNdbLogCatchupsMapOutput() NdbLogCatchupsMapOutput {
	return i.ToNdbLogCatchupsMapOutputWithContext(context.Background())
}

func (i NdbLogCatchupsMap) ToNdbLogCatchupsMapOutputWithContext(ctx context.Context) NdbLogCatchupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbLogCatchupsMapOutput)
}

type NdbLogCatchupsOutput struct{ *pulumi.OutputState }

func (NdbLogCatchupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbLogCatchups)(nil)).Elem()
}

func (o NdbLogCatchupsOutput) ToNdbLogCatchupsOutput() NdbLogCatchupsOutput {
	return o
}

func (o NdbLogCatchupsOutput) ToNdbLogCatchupsOutputWithContext(ctx context.Context) NdbLogCatchupsOutput {
	return o
}

func (o NdbLogCatchupsOutput) DatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbLogCatchups) pulumi.StringPtrOutput { return v.DatabaseId }).(pulumi.StringPtrOutput)
}

// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
func (o NdbLogCatchupsOutput) ForRestore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbLogCatchups) pulumi.BoolPtrOutput { return v.ForRestore }).(pulumi.BoolPtrOutput)
}

// it helps to perform same operation with same config.
//
// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
func (o NdbLogCatchupsOutput) LogCatchupVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbLogCatchups) pulumi.IntPtrOutput { return v.LogCatchupVersion }).(pulumi.IntPtrOutput)
}

// Time machine id of
func (o NdbLogCatchupsOutput) TimeMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbLogCatchups) pulumi.StringPtrOutput { return v.TimeMachineId }).(pulumi.StringPtrOutput)
}

type NdbLogCatchupsArrayOutput struct{ *pulumi.OutputState }

func (NdbLogCatchupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbLogCatchups)(nil)).Elem()
}

func (o NdbLogCatchupsArrayOutput) ToNdbLogCatchupsArrayOutput() NdbLogCatchupsArrayOutput {
	return o
}

func (o NdbLogCatchupsArrayOutput) ToNdbLogCatchupsArrayOutputWithContext(ctx context.Context) NdbLogCatchupsArrayOutput {
	return o
}

func (o NdbLogCatchupsArrayOutput) Index(i pulumi.IntInput) NdbLogCatchupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbLogCatchups {
		return vs[0].([]*NdbLogCatchups)[vs[1].(int)]
	}).(NdbLogCatchupsOutput)
}

type NdbLogCatchupsMapOutput struct{ *pulumi.OutputState }

func (NdbLogCatchupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbLogCatchups)(nil)).Elem()
}

func (o NdbLogCatchupsMapOutput) ToNdbLogCatchupsMapOutput() NdbLogCatchupsMapOutput {
	return o
}

func (o NdbLogCatchupsMapOutput) ToNdbLogCatchupsMapOutputWithContext(ctx context.Context) NdbLogCatchupsMapOutput {
	return o
}

func (o NdbLogCatchupsMapOutput) MapIndex(k pulumi.StringInput) NdbLogCatchupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbLogCatchups {
		return vs[0].(map[string]*NdbLogCatchups)[vs[1].(string)]
	}).(NdbLogCatchupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbLogCatchupsInput)(nil)).Elem(), &NdbLogCatchups{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbLogCatchupsArrayInput)(nil)).Elem(), NdbLogCatchupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbLogCatchupsMapInput)(nil)).Elem(), NdbLogCatchupsMap{})
	pulumi.RegisterOutputType(NdbLogCatchupsOutput{})
	pulumi.RegisterOutputType(NdbLogCatchupsArrayOutput{})
	pulumi.RegisterOutputType(NdbLogCatchupsMapOutput{})
}
