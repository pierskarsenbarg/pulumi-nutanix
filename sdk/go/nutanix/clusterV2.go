// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents the Cluster entity. Provides the basic infrastructure for compute, storage and networking. This includes the operations that can be carried out on cluster and its subresources - host (node), rsyslog servers etc and actions that can be performed on cluster - add a node, remove a node, attach categories.
type ClusterV2 struct {
	pulumi.CustomResourceState

	BackupEligibilityScore pulumi.IntOutput `pulumi:"backupEligibilityScore"`
	// - (Optional) The reference to a project.
	Categories          pulumi.StringArrayOutput `pulumi:"categories"`
	ClusterProfileExtId pulumi.StringOutput      `pulumi:"clusterProfileExtId"`
	// - (Optional) Cluster configuration details.
	Configs ClusterV2ConfigArrayOutput `pulumi:"configs"`
	// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
	ContainerName pulumi.StringOutput `pulumi:"containerName"`
	// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
	Dryrun             pulumi.BoolPtrOutput     `pulumi:"dryrun"`
	Expand             pulumi.StringPtrOutput   `pulumi:"expand"`
	ExtId              pulumi.StringOutput      `pulumi:"extId"`
	InefficientVmCount pulumi.IntOutput         `pulumi:"inefficientVmCount"`
	Links              ClusterV2LinkArrayOutput `pulumi:"links"`
	// - (Required) The name for the vm.
	Name pulumi.StringOutput `pulumi:"name"`
	// - (Optional) Network details of a cluster.
	Networks ClusterV2NetworkArrayOutput `pulumi:"networks"`
	// - (Optional) The reference to a node.
	Nodes    ClusterV2NodeArrayOutput `pulumi:"nodes"`
	TenantId pulumi.StringOutput      `pulumi:"tenantId"`
	// - (Optional) The reference to a project.
	//   Valid values are:
	// - "CANCELLED"	The cluster upgrade is cancelled.
	// - "FAILED"	The cluster upgrade failed.
	// - "QUEUED"	The cluster upgrade is in the queue.
	// - "SUCCEEDED"	The cluster was upgraded successfully.
	// - "DOWNLOADING"	The cluster upgrade is downloading.
	// - "PENDING"	The cluster upgrade is in pending state.
	// - "UPGRADING"	The cluster is in upgrade state.
	// - "PREUPGRADE"	The cluster is in pre-upgrade state.
	// - "SCHEDULED"	The cluster upgrade is in scheduled state.
	UpgradeStatus pulumi.StringOutput `pulumi:"upgradeStatus"`
	VmCount       pulumi.IntOutput    `pulumi:"vmCount"`
}

// NewClusterV2 registers a new resource with the given unique name, arguments, and options.
func NewClusterV2(ctx *pulumi.Context,
	name string, args *ClusterV2Args, opts ...pulumi.ResourceOption) (*ClusterV2, error) {
	if args == nil {
		args = &ClusterV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterV2
	err := ctx.RegisterResource("nutanix:index/clusterV2:ClusterV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterV2 gets an existing ClusterV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterV2State, opts ...pulumi.ResourceOption) (*ClusterV2, error) {
	var resource ClusterV2
	err := ctx.ReadResource("nutanix:index/clusterV2:ClusterV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterV2 resources.
type clusterV2State struct {
	BackupEligibilityScore *int `pulumi:"backupEligibilityScore"`
	// - (Optional) The reference to a project.
	Categories          []string `pulumi:"categories"`
	ClusterProfileExtId *string  `pulumi:"clusterProfileExtId"`
	// - (Optional) Cluster configuration details.
	Configs []ClusterV2Config `pulumi:"configs"`
	// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
	ContainerName *string `pulumi:"containerName"`
	// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
	Dryrun             *bool           `pulumi:"dryrun"`
	Expand             *string         `pulumi:"expand"`
	ExtId              *string         `pulumi:"extId"`
	InefficientVmCount *int            `pulumi:"inefficientVmCount"`
	Links              []ClusterV2Link `pulumi:"links"`
	// - (Required) The name for the vm.
	Name *string `pulumi:"name"`
	// - (Optional) Network details of a cluster.
	Networks []ClusterV2Network `pulumi:"networks"`
	// - (Optional) The reference to a node.
	Nodes    []ClusterV2Node `pulumi:"nodes"`
	TenantId *string         `pulumi:"tenantId"`
	// - (Optional) The reference to a project.
	//   Valid values are:
	// - "CANCELLED"	The cluster upgrade is cancelled.
	// - "FAILED"	The cluster upgrade failed.
	// - "QUEUED"	The cluster upgrade is in the queue.
	// - "SUCCEEDED"	The cluster was upgraded successfully.
	// - "DOWNLOADING"	The cluster upgrade is downloading.
	// - "PENDING"	The cluster upgrade is in pending state.
	// - "UPGRADING"	The cluster is in upgrade state.
	// - "PREUPGRADE"	The cluster is in pre-upgrade state.
	// - "SCHEDULED"	The cluster upgrade is in scheduled state.
	UpgradeStatus *string `pulumi:"upgradeStatus"`
	VmCount       *int    `pulumi:"vmCount"`
}

type ClusterV2State struct {
	BackupEligibilityScore pulumi.IntPtrInput
	// - (Optional) The reference to a project.
	Categories          pulumi.StringArrayInput
	ClusterProfileExtId pulumi.StringPtrInput
	// - (Optional) Cluster configuration details.
	Configs ClusterV2ConfigArrayInput
	// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
	ContainerName pulumi.StringPtrInput
	// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
	Dryrun             pulumi.BoolPtrInput
	Expand             pulumi.StringPtrInput
	ExtId              pulumi.StringPtrInput
	InefficientVmCount pulumi.IntPtrInput
	Links              ClusterV2LinkArrayInput
	// - (Required) The name for the vm.
	Name pulumi.StringPtrInput
	// - (Optional) Network details of a cluster.
	Networks ClusterV2NetworkArrayInput
	// - (Optional) The reference to a node.
	Nodes    ClusterV2NodeArrayInput
	TenantId pulumi.StringPtrInput
	// - (Optional) The reference to a project.
	//   Valid values are:
	// - "CANCELLED"	The cluster upgrade is cancelled.
	// - "FAILED"	The cluster upgrade failed.
	// - "QUEUED"	The cluster upgrade is in the queue.
	// - "SUCCEEDED"	The cluster was upgraded successfully.
	// - "DOWNLOADING"	The cluster upgrade is downloading.
	// - "PENDING"	The cluster upgrade is in pending state.
	// - "UPGRADING"	The cluster is in upgrade state.
	// - "PREUPGRADE"	The cluster is in pre-upgrade state.
	// - "SCHEDULED"	The cluster upgrade is in scheduled state.
	UpgradeStatus pulumi.StringPtrInput
	VmCount       pulumi.IntPtrInput
}

func (ClusterV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterV2State)(nil)).Elem()
}

type clusterV2Args struct {
	// - (Optional) The reference to a project.
	Categories []string `pulumi:"categories"`
	// - (Optional) Cluster configuration details.
	Configs []ClusterV2Config `pulumi:"configs"`
	// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
	ContainerName *string `pulumi:"containerName"`
	// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
	Dryrun *bool   `pulumi:"dryrun"`
	Expand *string `pulumi:"expand"`
	ExtId  *string `pulumi:"extId"`
	// - (Required) The name for the vm.
	Name *string `pulumi:"name"`
	// - (Optional) Network details of a cluster.
	Networks []ClusterV2Network `pulumi:"networks"`
	// - (Optional) The reference to a node.
	Nodes []ClusterV2Node `pulumi:"nodes"`
}

// The set of arguments for constructing a ClusterV2 resource.
type ClusterV2Args struct {
	// - (Optional) The reference to a project.
	Categories pulumi.StringArrayInput
	// - (Optional) Cluster configuration details.
	Configs ClusterV2ConfigArrayInput
	// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
	ContainerName pulumi.StringPtrInput
	// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
	Dryrun pulumi.BoolPtrInput
	Expand pulumi.StringPtrInput
	ExtId  pulumi.StringPtrInput
	// - (Required) The name for the vm.
	Name pulumi.StringPtrInput
	// - (Optional) Network details of a cluster.
	Networks ClusterV2NetworkArrayInput
	// - (Optional) The reference to a node.
	Nodes ClusterV2NodeArrayInput
}

func (ClusterV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterV2Args)(nil)).Elem()
}

type ClusterV2Input interface {
	pulumi.Input

	ToClusterV2Output() ClusterV2Output
	ToClusterV2OutputWithContext(ctx context.Context) ClusterV2Output
}

func (*ClusterV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterV2)(nil)).Elem()
}

func (i *ClusterV2) ToClusterV2Output() ClusterV2Output {
	return i.ToClusterV2OutputWithContext(context.Background())
}

func (i *ClusterV2) ToClusterV2OutputWithContext(ctx context.Context) ClusterV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterV2Output)
}

// ClusterV2ArrayInput is an input type that accepts ClusterV2Array and ClusterV2ArrayOutput values.
// You can construct a concrete instance of `ClusterV2ArrayInput` via:
//
//	ClusterV2Array{ ClusterV2Args{...} }
type ClusterV2ArrayInput interface {
	pulumi.Input

	ToClusterV2ArrayOutput() ClusterV2ArrayOutput
	ToClusterV2ArrayOutputWithContext(context.Context) ClusterV2ArrayOutput
}

type ClusterV2Array []ClusterV2Input

func (ClusterV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterV2)(nil)).Elem()
}

func (i ClusterV2Array) ToClusterV2ArrayOutput() ClusterV2ArrayOutput {
	return i.ToClusterV2ArrayOutputWithContext(context.Background())
}

func (i ClusterV2Array) ToClusterV2ArrayOutputWithContext(ctx context.Context) ClusterV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterV2ArrayOutput)
}

// ClusterV2MapInput is an input type that accepts ClusterV2Map and ClusterV2MapOutput values.
// You can construct a concrete instance of `ClusterV2MapInput` via:
//
//	ClusterV2Map{ "key": ClusterV2Args{...} }
type ClusterV2MapInput interface {
	pulumi.Input

	ToClusterV2MapOutput() ClusterV2MapOutput
	ToClusterV2MapOutputWithContext(context.Context) ClusterV2MapOutput
}

type ClusterV2Map map[string]ClusterV2Input

func (ClusterV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterV2)(nil)).Elem()
}

func (i ClusterV2Map) ToClusterV2MapOutput() ClusterV2MapOutput {
	return i.ToClusterV2MapOutputWithContext(context.Background())
}

func (i ClusterV2Map) ToClusterV2MapOutputWithContext(ctx context.Context) ClusterV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterV2MapOutput)
}

type ClusterV2Output struct{ *pulumi.OutputState }

func (ClusterV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterV2)(nil)).Elem()
}

func (o ClusterV2Output) ToClusterV2Output() ClusterV2Output {
	return o
}

func (o ClusterV2Output) ToClusterV2OutputWithContext(ctx context.Context) ClusterV2Output {
	return o
}

func (o ClusterV2Output) BackupEligibilityScore() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.IntOutput { return v.BackupEligibilityScore }).(pulumi.IntOutput)
}

// - (Optional) The reference to a project.
func (o ClusterV2Output) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringArrayOutput { return v.Categories }).(pulumi.StringArrayOutput)
}

func (o ClusterV2Output) ClusterProfileExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringOutput { return v.ClusterProfileExtId }).(pulumi.StringOutput)
}

// - (Optional) Cluster configuration details.
func (o ClusterV2Output) Configs() ClusterV2ConfigArrayOutput {
	return o.ApplyT(func(v *ClusterV2) ClusterV2ConfigArrayOutput { return v.Configs }).(ClusterV2ConfigArrayOutput)
}

// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
func (o ClusterV2Output) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringOutput { return v.ContainerName }).(pulumi.StringOutput)
}

// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
func (o ClusterV2Output) Dryrun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.BoolPtrOutput { return v.Dryrun }).(pulumi.BoolPtrOutput)
}

func (o ClusterV2Output) Expand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringPtrOutput { return v.Expand }).(pulumi.StringPtrOutput)
}

func (o ClusterV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

func (o ClusterV2Output) InefficientVmCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.IntOutput { return v.InefficientVmCount }).(pulumi.IntOutput)
}

func (o ClusterV2Output) Links() ClusterV2LinkArrayOutput {
	return o.ApplyT(func(v *ClusterV2) ClusterV2LinkArrayOutput { return v.Links }).(ClusterV2LinkArrayOutput)
}

// - (Required) The name for the vm.
func (o ClusterV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - (Optional) Network details of a cluster.
func (o ClusterV2Output) Networks() ClusterV2NetworkArrayOutput {
	return o.ApplyT(func(v *ClusterV2) ClusterV2NetworkArrayOutput { return v.Networks }).(ClusterV2NetworkArrayOutput)
}

// - (Optional) The reference to a node.
func (o ClusterV2Output) Nodes() ClusterV2NodeArrayOutput {
	return o.ApplyT(func(v *ClusterV2) ClusterV2NodeArrayOutput { return v.Nodes }).(ClusterV2NodeArrayOutput)
}

func (o ClusterV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

//   - (Optional) The reference to a project.
//     Valid values are:
//   - "CANCELLED"	The cluster upgrade is cancelled.
//   - "FAILED"	The cluster upgrade failed.
//   - "QUEUED"	The cluster upgrade is in the queue.
//   - "SUCCEEDED"	The cluster was upgraded successfully.
//   - "DOWNLOADING"	The cluster upgrade is downloading.
//   - "PENDING"	The cluster upgrade is in pending state.
//   - "UPGRADING"	The cluster is in upgrade state.
//   - "PREUPGRADE"	The cluster is in pre-upgrade state.
//   - "SCHEDULED"	The cluster upgrade is in scheduled state.
func (o ClusterV2Output) UpgradeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.StringOutput { return v.UpgradeStatus }).(pulumi.StringOutput)
}

func (o ClusterV2Output) VmCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterV2) pulumi.IntOutput { return v.VmCount }).(pulumi.IntOutput)
}

type ClusterV2ArrayOutput struct{ *pulumi.OutputState }

func (ClusterV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterV2)(nil)).Elem()
}

func (o ClusterV2ArrayOutput) ToClusterV2ArrayOutput() ClusterV2ArrayOutput {
	return o
}

func (o ClusterV2ArrayOutput) ToClusterV2ArrayOutputWithContext(ctx context.Context) ClusterV2ArrayOutput {
	return o
}

func (o ClusterV2ArrayOutput) Index(i pulumi.IntInput) ClusterV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterV2 {
		return vs[0].([]*ClusterV2)[vs[1].(int)]
	}).(ClusterV2Output)
}

type ClusterV2MapOutput struct{ *pulumi.OutputState }

func (ClusterV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterV2)(nil)).Elem()
}

func (o ClusterV2MapOutput) ToClusterV2MapOutput() ClusterV2MapOutput {
	return o
}

func (o ClusterV2MapOutput) ToClusterV2MapOutputWithContext(ctx context.Context) ClusterV2MapOutput {
	return o
}

func (o ClusterV2MapOutput) MapIndex(k pulumi.StringInput) ClusterV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterV2 {
		return vs[0].(map[string]*ClusterV2)[vs[1].(string)]
	}).(ClusterV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterV2Input)(nil)).Elem(), &ClusterV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterV2ArrayInput)(nil)).Elem(), ClusterV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterV2MapInput)(nil)).Elem(), ClusterV2Map{})
	pulumi.RegisterOutputType(ClusterV2Output{})
	pulumi.RegisterOutputType(ClusterV2ArrayOutput{})
	pulumi.RegisterOutputType(ClusterV2MapOutput{})
}
