// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a single recovery point  corresponding to the extId.
func GetRecoveryPointV2(ctx *pulumi.Context, args *GetRecoveryPointV2Args, opts ...pulumi.InvokeOption) (*GetRecoveryPointV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRecoveryPointV2Result
	err := ctx.Invoke("nutanix:index/getRecoveryPointV2:getRecoveryPointV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRecoveryPointV2.
type GetRecoveryPointV2Args struct {
	// recovery point UUID
	ExtId string `pulumi:"extId"`
}

// A collection of values returned by getRecoveryPointV2.
type GetRecoveryPointV2Result struct {
	// The UTC date and time in ISO-8601 format when the Recovery point is created.
	CreationTime string `pulumi:"creationTime"`
	// The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
	ExpirationTime string `pulumi:"expirationTime"`
	// recovery point UUID
	ExtId string `pulumi:"extId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []GetRecoveryPointV2Link `pulumi:"links"`
	// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
	LocationAgnosticId string `pulumi:"locationAgnosticId"`
	// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
	LocationReferences []GetRecoveryPointV2LocationReference `pulumi:"locationReferences"`
	// The name of the Recovery point.
	Name string `pulumi:"name"`
	// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
	OwnerExtId string `pulumi:"ownerExtId"`
	// Type of the Recovery point.
	RecoveryPointType string `pulumi:"recoveryPointType"`
	// The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
	// * supported values:
	// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
	Status string `pulumi:"status"`
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId string `pulumi:"tenantId"`
	// List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VmRecoveryPoints []GetRecoveryPointV2VmRecoveryPoint `pulumi:"vmRecoveryPoints"`
	// List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
	VolumeGroupRecoveryPoints []GetRecoveryPointV2VolumeGroupRecoveryPoint `pulumi:"volumeGroupRecoveryPoints"`
}

func GetRecoveryPointV2Output(ctx *pulumi.Context, args GetRecoveryPointV2OutputArgs, opts ...pulumi.InvokeOption) GetRecoveryPointV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRecoveryPointV2ResultOutput, error) {
			args := v.(GetRecoveryPointV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getRecoveryPointV2:getRecoveryPointV2", args, GetRecoveryPointV2ResultOutput{}, options).(GetRecoveryPointV2ResultOutput), nil
		}).(GetRecoveryPointV2ResultOutput)
}

// A collection of arguments for invoking getRecoveryPointV2.
type GetRecoveryPointV2OutputArgs struct {
	// recovery point UUID
	ExtId pulumi.StringInput `pulumi:"extId"`
}

func (GetRecoveryPointV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecoveryPointV2Args)(nil)).Elem()
}

// A collection of values returned by getRecoveryPointV2.
type GetRecoveryPointV2ResultOutput struct{ *pulumi.OutputState }

func (GetRecoveryPointV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecoveryPointV2Result)(nil)).Elem()
}

func (o GetRecoveryPointV2ResultOutput) ToGetRecoveryPointV2ResultOutput() GetRecoveryPointV2ResultOutput {
	return o
}

func (o GetRecoveryPointV2ResultOutput) ToGetRecoveryPointV2ResultOutputWithContext(ctx context.Context) GetRecoveryPointV2ResultOutput {
	return o
}

// The UTC date and time in ISO-8601 format when the Recovery point is created.
func (o GetRecoveryPointV2ResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
func (o GetRecoveryPointV2ResultOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// recovery point UUID
func (o GetRecoveryPointV2ResultOutput) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.ExtId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRecoveryPointV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o GetRecoveryPointV2ResultOutput) Links() GetRecoveryPointV2LinkArrayOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) []GetRecoveryPointV2Link { return v.Links }).(GetRecoveryPointV2LinkArrayOutput)
}

// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
func (o GetRecoveryPointV2ResultOutput) LocationAgnosticId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.LocationAgnosticId }).(pulumi.StringOutput)
}

// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
func (o GetRecoveryPointV2ResultOutput) LocationReferences() GetRecoveryPointV2LocationReferenceArrayOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) []GetRecoveryPointV2LocationReference { return v.LocationReferences }).(GetRecoveryPointV2LocationReferenceArrayOutput)
}

// The name of the Recovery point.
func (o GetRecoveryPointV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.Name }).(pulumi.StringOutput)
}

// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
func (o GetRecoveryPointV2ResultOutput) OwnerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.OwnerExtId }).(pulumi.StringOutput)
}

// Type of the Recovery point.
func (o GetRecoveryPointV2ResultOutput) RecoveryPointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.RecoveryPointType }).(pulumi.StringOutput)
}

// The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
// * supported values:
// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
func (o GetRecoveryPointV2ResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.Status }).(pulumi.StringOutput)
}

// A globally unique identifier that represents the tenant that owns this entity
func (o GetRecoveryPointV2ResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) string { return v.TenantId }).(pulumi.StringOutput)
}

// List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
func (o GetRecoveryPointV2ResultOutput) VmRecoveryPoints() GetRecoveryPointV2VmRecoveryPointArrayOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) []GetRecoveryPointV2VmRecoveryPoint { return v.VmRecoveryPoints }).(GetRecoveryPointV2VmRecoveryPointArrayOutput)
}

// List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
func (o GetRecoveryPointV2ResultOutput) VolumeGroupRecoveryPoints() GetRecoveryPointV2VolumeGroupRecoveryPointArrayOutput {
	return o.ApplyT(func(v GetRecoveryPointV2Result) []GetRecoveryPointV2VolumeGroupRecoveryPoint {
		return v.VolumeGroupRecoveryPoints
	}).(GetRecoveryPointV2VolumeGroupRecoveryPointArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRecoveryPointV2ResultOutput{})
}
