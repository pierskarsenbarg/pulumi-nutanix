// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Virtual Machine with the provided configuration.
type VirtualMachineV2 struct {
	pulumi.CustomResourceState

	// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
	ApcConfigs        VirtualMachineV2ApcConfigArrayOutput        `pulumi:"apcConfigs"`
	AvailabilityZones VirtualMachineV2AvailabilityZoneArrayOutput `pulumi:"availabilityZones"`
	// BIOS UUID of the VM. It should be of type UUID.
	BiosUuid pulumi.StringOutput `pulumi:"biosUuid"`
	// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
	BootConfigs VirtualMachineV2BootConfigArrayOutput `pulumi:"bootConfigs"`
	// Categories for the VM.
	Categories VirtualMachineV2CategoryArrayOutput `pulumi:"categories"`
	// CD-ROMs attached to the VM.
	CdRoms VirtualMachineV2CdRomArrayOutput `pulumi:"cdRoms"`
	// Reference to a cluster.
	Clusters VirtualMachineV2ClusterArrayOutput `pulumi:"clusters"`
	// VM creation time
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// VM description
	Description pulumi.StringOutput `pulumi:"description"`
	// Disks attached to the VM.
	Disks VirtualMachineV2DiskArrayOutput `pulumi:"disks"`
	// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor. Valid values are "HARDWARE_VIRTUALIZATION".
	EnabledCpuFeatures pulumi.StringArrayOutput `pulumi:"enabledCpuFeatures"`
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// Generation UUID of the VM. It should be of type UUID.
	GenerationUuid pulumi.StringOutput `pulumi:"generationUuid"`
	// GPUs attached to the VM.
	Gpuses VirtualMachineV2GpusArrayOutput `pulumi:"gpuses"`
	// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
	GuestCustomizations VirtualMachineV2GuestCustomizationArrayOutput `pulumi:"guestCustomizations"`
	// The details about Nutanix Guest Tools for a VM.
	GuestTools VirtualMachineV2GuestToolArrayOutput `pulumi:"guestTools"`
	// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	HardwareClockTimezone pulumi.StringOutput `pulumi:"hardwareClockTimezone"`
	// Reference to the host, the VM is running on.
	Hosts VirtualMachineV2HostArrayOutput `pulumi:"hosts"`
	// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
	IsAgentVm pulumi.BoolOutput `pulumi:"isAgentVm"`
	// Indicates whether to remove AHV branding from VM firmware tables or not.
	IsBrandingEnabled pulumi.BoolOutput `pulumi:"isBrandingEnabled"`
	// Indicates whether the VM CPU hotplug is enabled.
	IsCpuHotplugEnabled pulumi.BoolOutput `pulumi:"isCpuHotplugEnabled"`
	// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
	IsCpuPassthroughEnabled pulumi.BoolOutput `pulumi:"isCpuPassthroughEnabled"`
	// Indicates whether the vGPU console is enabled or not.
	IsGpuConsoleEnabled pulumi.BoolOutput `pulumi:"isGpuConsoleEnabled"`
	// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
	IsMemoryOvercommitEnabled pulumi.BoolOutput `pulumi:"isMemoryOvercommitEnabled"`
	// Indicates whether the VM SCSI controller is enabled.
	IsScsiControllerEnabled pulumi.BoolOutput `pulumi:"isScsiControllerEnabled"`
	// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
	IsVcpuHardPinningEnabled pulumi.BoolOutput `pulumi:"isVcpuHardPinningEnabled"`
	// Indicates whether the VGA console should be disabled or not.
	IsVgaConsoleEnabled pulumi.BoolOutput `pulumi:"isVgaConsoleEnabled"`
	// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks. Valid values are "PSERIES", "Q35", "PC" .
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Memory size in bytes.
	MemorySizeBytes pulumi.IntOutput `pulumi:"memorySizeBytes"`
	// VM name.
	Name pulumi.StringOutput `pulumi:"name"`
	// NICs attached to the VM.
	Nics VirtualMachineV2NicArrayOutput `pulumi:"nics"`
	// Number of cores per socket. Value should be at least 1.
	NumCoresPerSocket pulumi.IntOutput `pulumi:"numCoresPerSocket"`
	// Number of NUMA nodes. 0 means NUMA is disabled.
	NumNumaNodes pulumi.IntOutput `pulumi:"numNumaNodes"`
	// Number of vCPU sockets. Value should be at least 1.
	NumSockets pulumi.IntOutput `pulumi:"numSockets"`
	// Number of threads per core. Value should be at least 1.
	NumThreadsPerCore pulumi.IntOutput `pulumi:"numThreadsPerCore"`
	// Ownership information for the VM.
	OwnershipInfos VirtualMachineV2OwnershipInfoArrayOutput `pulumi:"ownershipInfos"`
	PowerState     pulumi.StringPtrOutput                   `pulumi:"powerState"`
	// Status of protection policy applied to this VM.
	ProtectionPolicyStates VirtualMachineV2ProtectionPolicyStateArrayOutput `pulumi:"protectionPolicyStates"`
	// The type of protection applied on a VM. Valid values "PD_PROTECTED", "UNPROTECTED", "RULE_PROTECTED".
	ProtectionType pulumi.StringOutput `pulumi:"protectionType"`
	// Serial ports configured on the VM.
	SerialPorts VirtualMachineV2SerialPortArrayOutput `pulumi:"serialPorts"`
	// Reference to an entity that the VM should be cloned or created from. Valid values are "VM", "VM_RECOVERY_POINT".
	Sources VirtualMachineV2SourceArrayOutput `pulumi:"sources"`
	// Storage configuration for VM.
	StorageConfigs VirtualMachineV2StorageConfigArrayOutput `pulumi:"storageConfigs"`
	// VM last updated time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Indicates how the vTPM for the VM should be configured.
	VtpmConfigs VirtualMachineV2VtpmConfigArrayOutput `pulumi:"vtpmConfigs"`
}

// NewVirtualMachineV2 registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachineV2(ctx *pulumi.Context,
	name string, args *VirtualMachineV2Args, opts ...pulumi.ResourceOption) (*VirtualMachineV2, error) {
	if args == nil {
		args = &VirtualMachineV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualMachineV2
	err := ctx.RegisterResource("nutanix:index/virtualMachineV2:VirtualMachineV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachineV2 gets an existing VirtualMachineV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachineV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineV2State, opts ...pulumi.ResourceOption) (*VirtualMachineV2, error) {
	var resource VirtualMachineV2
	err := ctx.ReadResource("nutanix:index/virtualMachineV2:VirtualMachineV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachineV2 resources.
type virtualMachineV2State struct {
	// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
	ApcConfigs        []VirtualMachineV2ApcConfig        `pulumi:"apcConfigs"`
	AvailabilityZones []VirtualMachineV2AvailabilityZone `pulumi:"availabilityZones"`
	// BIOS UUID of the VM. It should be of type UUID.
	BiosUuid *string `pulumi:"biosUuid"`
	// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
	BootConfigs []VirtualMachineV2BootConfig `pulumi:"bootConfigs"`
	// Categories for the VM.
	Categories []VirtualMachineV2Category `pulumi:"categories"`
	// CD-ROMs attached to the VM.
	CdRoms []VirtualMachineV2CdRom `pulumi:"cdRoms"`
	// Reference to a cluster.
	Clusters []VirtualMachineV2Cluster `pulumi:"clusters"`
	// VM creation time
	CreateTime *string `pulumi:"createTime"`
	// VM description
	Description *string `pulumi:"description"`
	// Disks attached to the VM.
	Disks []VirtualMachineV2Disk `pulumi:"disks"`
	// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor. Valid values are "HARDWARE_VIRTUALIZATION".
	EnabledCpuFeatures []string `pulumi:"enabledCpuFeatures"`
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId *string `pulumi:"extId"`
	// Generation UUID of the VM. It should be of type UUID.
	GenerationUuid *string `pulumi:"generationUuid"`
	// GPUs attached to the VM.
	Gpuses []VirtualMachineV2Gpus `pulumi:"gpuses"`
	// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
	GuestCustomizations []VirtualMachineV2GuestCustomization `pulumi:"guestCustomizations"`
	// The details about Nutanix Guest Tools for a VM.
	GuestTools []VirtualMachineV2GuestTool `pulumi:"guestTools"`
	// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	HardwareClockTimezone *string `pulumi:"hardwareClockTimezone"`
	// Reference to the host, the VM is running on.
	Hosts []VirtualMachineV2Host `pulumi:"hosts"`
	// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
	IsAgentVm *bool `pulumi:"isAgentVm"`
	// Indicates whether to remove AHV branding from VM firmware tables or not.
	IsBrandingEnabled *bool `pulumi:"isBrandingEnabled"`
	// Indicates whether the VM CPU hotplug is enabled.
	IsCpuHotplugEnabled *bool `pulumi:"isCpuHotplugEnabled"`
	// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
	IsCpuPassthroughEnabled *bool `pulumi:"isCpuPassthroughEnabled"`
	// Indicates whether the vGPU console is enabled or not.
	IsGpuConsoleEnabled *bool `pulumi:"isGpuConsoleEnabled"`
	// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
	IsMemoryOvercommitEnabled *bool `pulumi:"isMemoryOvercommitEnabled"`
	// Indicates whether the VM SCSI controller is enabled.
	IsScsiControllerEnabled *bool `pulumi:"isScsiControllerEnabled"`
	// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
	IsVcpuHardPinningEnabled *bool `pulumi:"isVcpuHardPinningEnabled"`
	// Indicates whether the VGA console should be disabled or not.
	IsVgaConsoleEnabled *bool `pulumi:"isVgaConsoleEnabled"`
	// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks. Valid values are "PSERIES", "Q35", "PC" .
	MachineType *string `pulumi:"machineType"`
	// Memory size in bytes.
	MemorySizeBytes *int `pulumi:"memorySizeBytes"`
	// VM name.
	Name *string `pulumi:"name"`
	// NICs attached to the VM.
	Nics []VirtualMachineV2Nic `pulumi:"nics"`
	// Number of cores per socket. Value should be at least 1.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// Number of NUMA nodes. 0 means NUMA is disabled.
	NumNumaNodes *int `pulumi:"numNumaNodes"`
	// Number of vCPU sockets. Value should be at least 1.
	NumSockets *int `pulumi:"numSockets"`
	// Number of threads per core. Value should be at least 1.
	NumThreadsPerCore *int `pulumi:"numThreadsPerCore"`
	// Ownership information for the VM.
	OwnershipInfos []VirtualMachineV2OwnershipInfo `pulumi:"ownershipInfos"`
	PowerState     *string                         `pulumi:"powerState"`
	// Status of protection policy applied to this VM.
	ProtectionPolicyStates []VirtualMachineV2ProtectionPolicyState `pulumi:"protectionPolicyStates"`
	// The type of protection applied on a VM. Valid values "PD_PROTECTED", "UNPROTECTED", "RULE_PROTECTED".
	ProtectionType *string `pulumi:"protectionType"`
	// Serial ports configured on the VM.
	SerialPorts []VirtualMachineV2SerialPort `pulumi:"serialPorts"`
	// Reference to an entity that the VM should be cloned or created from. Valid values are "VM", "VM_RECOVERY_POINT".
	Sources []VirtualMachineV2Source `pulumi:"sources"`
	// Storage configuration for VM.
	StorageConfigs []VirtualMachineV2StorageConfig `pulumi:"storageConfigs"`
	// VM last updated time.
	UpdateTime *string `pulumi:"updateTime"`
	// Indicates how the vTPM for the VM should be configured.
	VtpmConfigs []VirtualMachineV2VtpmConfig `pulumi:"vtpmConfigs"`
}

type VirtualMachineV2State struct {
	// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
	ApcConfigs        VirtualMachineV2ApcConfigArrayInput
	AvailabilityZones VirtualMachineV2AvailabilityZoneArrayInput
	// BIOS UUID of the VM. It should be of type UUID.
	BiosUuid pulumi.StringPtrInput
	// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
	BootConfigs VirtualMachineV2BootConfigArrayInput
	// Categories for the VM.
	Categories VirtualMachineV2CategoryArrayInput
	// CD-ROMs attached to the VM.
	CdRoms VirtualMachineV2CdRomArrayInput
	// Reference to a cluster.
	Clusters VirtualMachineV2ClusterArrayInput
	// VM creation time
	CreateTime pulumi.StringPtrInput
	// VM description
	Description pulumi.StringPtrInput
	// Disks attached to the VM.
	Disks VirtualMachineV2DiskArrayInput
	// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor. Valid values are "HARDWARE_VIRTUALIZATION".
	EnabledCpuFeatures pulumi.StringArrayInput
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringPtrInput
	// Generation UUID of the VM. It should be of type UUID.
	GenerationUuid pulumi.StringPtrInput
	// GPUs attached to the VM.
	Gpuses VirtualMachineV2GpusArrayInput
	// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
	GuestCustomizations VirtualMachineV2GuestCustomizationArrayInput
	// The details about Nutanix Guest Tools for a VM.
	GuestTools VirtualMachineV2GuestToolArrayInput
	// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	HardwareClockTimezone pulumi.StringPtrInput
	// Reference to the host, the VM is running on.
	Hosts VirtualMachineV2HostArrayInput
	// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
	IsAgentVm pulumi.BoolPtrInput
	// Indicates whether to remove AHV branding from VM firmware tables or not.
	IsBrandingEnabled pulumi.BoolPtrInput
	// Indicates whether the VM CPU hotplug is enabled.
	IsCpuHotplugEnabled pulumi.BoolPtrInput
	// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
	IsCpuPassthroughEnabled pulumi.BoolPtrInput
	// Indicates whether the vGPU console is enabled or not.
	IsGpuConsoleEnabled pulumi.BoolPtrInput
	// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
	IsMemoryOvercommitEnabled pulumi.BoolPtrInput
	// Indicates whether the VM SCSI controller is enabled.
	IsScsiControllerEnabled pulumi.BoolPtrInput
	// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
	IsVcpuHardPinningEnabled pulumi.BoolPtrInput
	// Indicates whether the VGA console should be disabled or not.
	IsVgaConsoleEnabled pulumi.BoolPtrInput
	// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks. Valid values are "PSERIES", "Q35", "PC" .
	MachineType pulumi.StringPtrInput
	// Memory size in bytes.
	MemorySizeBytes pulumi.IntPtrInput
	// VM name.
	Name pulumi.StringPtrInput
	// NICs attached to the VM.
	Nics VirtualMachineV2NicArrayInput
	// Number of cores per socket. Value should be at least 1.
	NumCoresPerSocket pulumi.IntPtrInput
	// Number of NUMA nodes. 0 means NUMA is disabled.
	NumNumaNodes pulumi.IntPtrInput
	// Number of vCPU sockets. Value should be at least 1.
	NumSockets pulumi.IntPtrInput
	// Number of threads per core. Value should be at least 1.
	NumThreadsPerCore pulumi.IntPtrInput
	// Ownership information for the VM.
	OwnershipInfos VirtualMachineV2OwnershipInfoArrayInput
	PowerState     pulumi.StringPtrInput
	// Status of protection policy applied to this VM.
	ProtectionPolicyStates VirtualMachineV2ProtectionPolicyStateArrayInput
	// The type of protection applied on a VM. Valid values "PD_PROTECTED", "UNPROTECTED", "RULE_PROTECTED".
	ProtectionType pulumi.StringPtrInput
	// Serial ports configured on the VM.
	SerialPorts VirtualMachineV2SerialPortArrayInput
	// Reference to an entity that the VM should be cloned or created from. Valid values are "VM", "VM_RECOVERY_POINT".
	Sources VirtualMachineV2SourceArrayInput
	// Storage configuration for VM.
	StorageConfigs VirtualMachineV2StorageConfigArrayInput
	// VM last updated time.
	UpdateTime pulumi.StringPtrInput
	// Indicates how the vTPM for the VM should be configured.
	VtpmConfigs VirtualMachineV2VtpmConfigArrayInput
}

func (VirtualMachineV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineV2State)(nil)).Elem()
}

type virtualMachineV2Args struct {
	// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
	ApcConfigs        []VirtualMachineV2ApcConfig        `pulumi:"apcConfigs"`
	AvailabilityZones []VirtualMachineV2AvailabilityZone `pulumi:"availabilityZones"`
	// BIOS UUID of the VM. It should be of type UUID.
	BiosUuid *string `pulumi:"biosUuid"`
	// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
	BootConfigs []VirtualMachineV2BootConfig `pulumi:"bootConfigs"`
	// Categories for the VM.
	Categories []VirtualMachineV2Category `pulumi:"categories"`
	// CD-ROMs attached to the VM.
	CdRoms []VirtualMachineV2CdRom `pulumi:"cdRoms"`
	// Reference to a cluster.
	Clusters []VirtualMachineV2Cluster `pulumi:"clusters"`
	// VM description
	Description *string `pulumi:"description"`
	// Disks attached to the VM.
	Disks []VirtualMachineV2Disk `pulumi:"disks"`
	// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor. Valid values are "HARDWARE_VIRTUALIZATION".
	EnabledCpuFeatures []string `pulumi:"enabledCpuFeatures"`
	// Generation UUID of the VM. It should be of type UUID.
	GenerationUuid *string `pulumi:"generationUuid"`
	// GPUs attached to the VM.
	Gpuses []VirtualMachineV2Gpus `pulumi:"gpuses"`
	// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
	GuestCustomizations []VirtualMachineV2GuestCustomization `pulumi:"guestCustomizations"`
	// The details about Nutanix Guest Tools for a VM.
	GuestTools []VirtualMachineV2GuestTool `pulumi:"guestTools"`
	// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	HardwareClockTimezone *string `pulumi:"hardwareClockTimezone"`
	// Reference to the host, the VM is running on.
	Hosts []VirtualMachineV2Host `pulumi:"hosts"`
	// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
	IsAgentVm *bool `pulumi:"isAgentVm"`
	// Indicates whether to remove AHV branding from VM firmware tables or not.
	IsBrandingEnabled *bool `pulumi:"isBrandingEnabled"`
	// Indicates whether the VM CPU hotplug is enabled.
	IsCpuHotplugEnabled *bool `pulumi:"isCpuHotplugEnabled"`
	// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
	IsCpuPassthroughEnabled *bool `pulumi:"isCpuPassthroughEnabled"`
	// Indicates whether the vGPU console is enabled or not.
	IsGpuConsoleEnabled *bool `pulumi:"isGpuConsoleEnabled"`
	// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
	IsMemoryOvercommitEnabled *bool `pulumi:"isMemoryOvercommitEnabled"`
	// Indicates whether the VM SCSI controller is enabled.
	IsScsiControllerEnabled *bool `pulumi:"isScsiControllerEnabled"`
	// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
	IsVcpuHardPinningEnabled *bool `pulumi:"isVcpuHardPinningEnabled"`
	// Indicates whether the VGA console should be disabled or not.
	IsVgaConsoleEnabled *bool `pulumi:"isVgaConsoleEnabled"`
	// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks. Valid values are "PSERIES", "Q35", "PC" .
	MachineType *string `pulumi:"machineType"`
	// Memory size in bytes.
	MemorySizeBytes *int `pulumi:"memorySizeBytes"`
	// VM name.
	Name *string `pulumi:"name"`
	// NICs attached to the VM.
	Nics []VirtualMachineV2Nic `pulumi:"nics"`
	// Number of cores per socket. Value should be at least 1.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// Number of NUMA nodes. 0 means NUMA is disabled.
	NumNumaNodes *int `pulumi:"numNumaNodes"`
	// Number of vCPU sockets. Value should be at least 1.
	NumSockets *int `pulumi:"numSockets"`
	// Number of threads per core. Value should be at least 1.
	NumThreadsPerCore *int `pulumi:"numThreadsPerCore"`
	// Ownership information for the VM.
	OwnershipInfos []VirtualMachineV2OwnershipInfo `pulumi:"ownershipInfos"`
	PowerState     *string                         `pulumi:"powerState"`
	// Status of protection policy applied to this VM.
	ProtectionPolicyStates []VirtualMachineV2ProtectionPolicyState `pulumi:"protectionPolicyStates"`
	// The type of protection applied on a VM. Valid values "PD_PROTECTED", "UNPROTECTED", "RULE_PROTECTED".
	ProtectionType *string `pulumi:"protectionType"`
	// Serial ports configured on the VM.
	SerialPorts []VirtualMachineV2SerialPort `pulumi:"serialPorts"`
	// Reference to an entity that the VM should be cloned or created from. Valid values are "VM", "VM_RECOVERY_POINT".
	Sources []VirtualMachineV2Source `pulumi:"sources"`
	// Storage configuration for VM.
	StorageConfigs []VirtualMachineV2StorageConfig `pulumi:"storageConfigs"`
	// Indicates how the vTPM for the VM should be configured.
	VtpmConfigs []VirtualMachineV2VtpmConfig `pulumi:"vtpmConfigs"`
}

// The set of arguments for constructing a VirtualMachineV2 resource.
type VirtualMachineV2Args struct {
	// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
	ApcConfigs        VirtualMachineV2ApcConfigArrayInput
	AvailabilityZones VirtualMachineV2AvailabilityZoneArrayInput
	// BIOS UUID of the VM. It should be of type UUID.
	BiosUuid pulumi.StringPtrInput
	// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
	BootConfigs VirtualMachineV2BootConfigArrayInput
	// Categories for the VM.
	Categories VirtualMachineV2CategoryArrayInput
	// CD-ROMs attached to the VM.
	CdRoms VirtualMachineV2CdRomArrayInput
	// Reference to a cluster.
	Clusters VirtualMachineV2ClusterArrayInput
	// VM description
	Description pulumi.StringPtrInput
	// Disks attached to the VM.
	Disks VirtualMachineV2DiskArrayInput
	// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor. Valid values are "HARDWARE_VIRTUALIZATION".
	EnabledCpuFeatures pulumi.StringArrayInput
	// Generation UUID of the VM. It should be of type UUID.
	GenerationUuid pulumi.StringPtrInput
	// GPUs attached to the VM.
	Gpuses VirtualMachineV2GpusArrayInput
	// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
	GuestCustomizations VirtualMachineV2GuestCustomizationArrayInput
	// The details about Nutanix Guest Tools for a VM.
	GuestTools VirtualMachineV2GuestToolArrayInput
	// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	HardwareClockTimezone pulumi.StringPtrInput
	// Reference to the host, the VM is running on.
	Hosts VirtualMachineV2HostArrayInput
	// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
	IsAgentVm pulumi.BoolPtrInput
	// Indicates whether to remove AHV branding from VM firmware tables or not.
	IsBrandingEnabled pulumi.BoolPtrInput
	// Indicates whether the VM CPU hotplug is enabled.
	IsCpuHotplugEnabled pulumi.BoolPtrInput
	// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
	IsCpuPassthroughEnabled pulumi.BoolPtrInput
	// Indicates whether the vGPU console is enabled or not.
	IsGpuConsoleEnabled pulumi.BoolPtrInput
	// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
	IsMemoryOvercommitEnabled pulumi.BoolPtrInput
	// Indicates whether the VM SCSI controller is enabled.
	IsScsiControllerEnabled pulumi.BoolPtrInput
	// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
	IsVcpuHardPinningEnabled pulumi.BoolPtrInput
	// Indicates whether the VGA console should be disabled or not.
	IsVgaConsoleEnabled pulumi.BoolPtrInput
	// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks. Valid values are "PSERIES", "Q35", "PC" .
	MachineType pulumi.StringPtrInput
	// Memory size in bytes.
	MemorySizeBytes pulumi.IntPtrInput
	// VM name.
	Name pulumi.StringPtrInput
	// NICs attached to the VM.
	Nics VirtualMachineV2NicArrayInput
	// Number of cores per socket. Value should be at least 1.
	NumCoresPerSocket pulumi.IntPtrInput
	// Number of NUMA nodes. 0 means NUMA is disabled.
	NumNumaNodes pulumi.IntPtrInput
	// Number of vCPU sockets. Value should be at least 1.
	NumSockets pulumi.IntPtrInput
	// Number of threads per core. Value should be at least 1.
	NumThreadsPerCore pulumi.IntPtrInput
	// Ownership information for the VM.
	OwnershipInfos VirtualMachineV2OwnershipInfoArrayInput
	PowerState     pulumi.StringPtrInput
	// Status of protection policy applied to this VM.
	ProtectionPolicyStates VirtualMachineV2ProtectionPolicyStateArrayInput
	// The type of protection applied on a VM. Valid values "PD_PROTECTED", "UNPROTECTED", "RULE_PROTECTED".
	ProtectionType pulumi.StringPtrInput
	// Serial ports configured on the VM.
	SerialPorts VirtualMachineV2SerialPortArrayInput
	// Reference to an entity that the VM should be cloned or created from. Valid values are "VM", "VM_RECOVERY_POINT".
	Sources VirtualMachineV2SourceArrayInput
	// Storage configuration for VM.
	StorageConfigs VirtualMachineV2StorageConfigArrayInput
	// Indicates how the vTPM for the VM should be configured.
	VtpmConfigs VirtualMachineV2VtpmConfigArrayInput
}

func (VirtualMachineV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineV2Args)(nil)).Elem()
}

type VirtualMachineV2Input interface {
	pulumi.Input

	ToVirtualMachineV2Output() VirtualMachineV2Output
	ToVirtualMachineV2OutputWithContext(ctx context.Context) VirtualMachineV2Output
}

func (*VirtualMachineV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineV2)(nil)).Elem()
}

func (i *VirtualMachineV2) ToVirtualMachineV2Output() VirtualMachineV2Output {
	return i.ToVirtualMachineV2OutputWithContext(context.Background())
}

func (i *VirtualMachineV2) ToVirtualMachineV2OutputWithContext(ctx context.Context) VirtualMachineV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineV2Output)
}

// VirtualMachineV2ArrayInput is an input type that accepts VirtualMachineV2Array and VirtualMachineV2ArrayOutput values.
// You can construct a concrete instance of `VirtualMachineV2ArrayInput` via:
//
//	VirtualMachineV2Array{ VirtualMachineV2Args{...} }
type VirtualMachineV2ArrayInput interface {
	pulumi.Input

	ToVirtualMachineV2ArrayOutput() VirtualMachineV2ArrayOutput
	ToVirtualMachineV2ArrayOutputWithContext(context.Context) VirtualMachineV2ArrayOutput
}

type VirtualMachineV2Array []VirtualMachineV2Input

func (VirtualMachineV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachineV2)(nil)).Elem()
}

func (i VirtualMachineV2Array) ToVirtualMachineV2ArrayOutput() VirtualMachineV2ArrayOutput {
	return i.ToVirtualMachineV2ArrayOutputWithContext(context.Background())
}

func (i VirtualMachineV2Array) ToVirtualMachineV2ArrayOutputWithContext(ctx context.Context) VirtualMachineV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineV2ArrayOutput)
}

// VirtualMachineV2MapInput is an input type that accepts VirtualMachineV2Map and VirtualMachineV2MapOutput values.
// You can construct a concrete instance of `VirtualMachineV2MapInput` via:
//
//	VirtualMachineV2Map{ "key": VirtualMachineV2Args{...} }
type VirtualMachineV2MapInput interface {
	pulumi.Input

	ToVirtualMachineV2MapOutput() VirtualMachineV2MapOutput
	ToVirtualMachineV2MapOutputWithContext(context.Context) VirtualMachineV2MapOutput
}

type VirtualMachineV2Map map[string]VirtualMachineV2Input

func (VirtualMachineV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachineV2)(nil)).Elem()
}

func (i VirtualMachineV2Map) ToVirtualMachineV2MapOutput() VirtualMachineV2MapOutput {
	return i.ToVirtualMachineV2MapOutputWithContext(context.Background())
}

func (i VirtualMachineV2Map) ToVirtualMachineV2MapOutputWithContext(ctx context.Context) VirtualMachineV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineV2MapOutput)
}

type VirtualMachineV2Output struct{ *pulumi.OutputState }

func (VirtualMachineV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineV2)(nil)).Elem()
}

func (o VirtualMachineV2Output) ToVirtualMachineV2Output() VirtualMachineV2Output {
	return o
}

func (o VirtualMachineV2Output) ToVirtualMachineV2OutputWithContext(ctx context.Context) VirtualMachineV2Output {
	return o
}

// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
func (o VirtualMachineV2Output) ApcConfigs() VirtualMachineV2ApcConfigArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2ApcConfigArrayOutput { return v.ApcConfigs }).(VirtualMachineV2ApcConfigArrayOutput)
}

func (o VirtualMachineV2Output) AvailabilityZones() VirtualMachineV2AvailabilityZoneArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2AvailabilityZoneArrayOutput { return v.AvailabilityZones }).(VirtualMachineV2AvailabilityZoneArrayOutput)
}

// BIOS UUID of the VM. It should be of type UUID.
func (o VirtualMachineV2Output) BiosUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.BiosUuid }).(pulumi.StringOutput)
}

// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
func (o VirtualMachineV2Output) BootConfigs() VirtualMachineV2BootConfigArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2BootConfigArrayOutput { return v.BootConfigs }).(VirtualMachineV2BootConfigArrayOutput)
}

// Categories for the VM.
func (o VirtualMachineV2Output) Categories() VirtualMachineV2CategoryArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2CategoryArrayOutput { return v.Categories }).(VirtualMachineV2CategoryArrayOutput)
}

// CD-ROMs attached to the VM.
func (o VirtualMachineV2Output) CdRoms() VirtualMachineV2CdRomArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2CdRomArrayOutput { return v.CdRoms }).(VirtualMachineV2CdRomArrayOutput)
}

// Reference to a cluster.
func (o VirtualMachineV2Output) Clusters() VirtualMachineV2ClusterArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2ClusterArrayOutput { return v.Clusters }).(VirtualMachineV2ClusterArrayOutput)
}

// VM creation time
func (o VirtualMachineV2Output) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// VM description
func (o VirtualMachineV2Output) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Disks attached to the VM.
func (o VirtualMachineV2Output) Disks() VirtualMachineV2DiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2DiskArrayOutput { return v.Disks }).(VirtualMachineV2DiskArrayOutput)
}

// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor. Valid values are "HARDWARE_VIRTUALIZATION".
func (o VirtualMachineV2Output) EnabledCpuFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringArrayOutput { return v.EnabledCpuFeatures }).(pulumi.StringArrayOutput)
}

// A globally unique identifier of an instance that is suitable for external consumption.
func (o VirtualMachineV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Generation UUID of the VM. It should be of type UUID.
func (o VirtualMachineV2Output) GenerationUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.GenerationUuid }).(pulumi.StringOutput)
}

// GPUs attached to the VM.
func (o VirtualMachineV2Output) Gpuses() VirtualMachineV2GpusArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2GpusArrayOutput { return v.Gpuses }).(VirtualMachineV2GpusArrayOutput)
}

// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
func (o VirtualMachineV2Output) GuestCustomizations() VirtualMachineV2GuestCustomizationArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2GuestCustomizationArrayOutput { return v.GuestCustomizations }).(VirtualMachineV2GuestCustomizationArrayOutput)
}

// The details about Nutanix Guest Tools for a VM.
func (o VirtualMachineV2Output) GuestTools() VirtualMachineV2GuestToolArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2GuestToolArrayOutput { return v.GuestTools }).(VirtualMachineV2GuestToolArrayOutput)
}

// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
func (o VirtualMachineV2Output) HardwareClockTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.HardwareClockTimezone }).(pulumi.StringOutput)
}

// Reference to the host, the VM is running on.
func (o VirtualMachineV2Output) Hosts() VirtualMachineV2HostArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2HostArrayOutput { return v.Hosts }).(VirtualMachineV2HostArrayOutput)
}

// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
func (o VirtualMachineV2Output) IsAgentVm() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsAgentVm }).(pulumi.BoolOutput)
}

// Indicates whether to remove AHV branding from VM firmware tables or not.
func (o VirtualMachineV2Output) IsBrandingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsBrandingEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the VM CPU hotplug is enabled.
func (o VirtualMachineV2Output) IsCpuHotplugEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsCpuHotplugEnabled }).(pulumi.BoolOutput)
}

// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
func (o VirtualMachineV2Output) IsCpuPassthroughEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsCpuPassthroughEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the vGPU console is enabled or not.
func (o VirtualMachineV2Output) IsGpuConsoleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsGpuConsoleEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
func (o VirtualMachineV2Output) IsMemoryOvercommitEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsMemoryOvercommitEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the VM SCSI controller is enabled.
func (o VirtualMachineV2Output) IsScsiControllerEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsScsiControllerEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
func (o VirtualMachineV2Output) IsVcpuHardPinningEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsVcpuHardPinningEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the VGA console should be disabled or not.
func (o VirtualMachineV2Output) IsVgaConsoleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.BoolOutput { return v.IsVgaConsoleEnabled }).(pulumi.BoolOutput)
}

// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks. Valid values are "PSERIES", "Q35", "PC" .
func (o VirtualMachineV2Output) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Memory size in bytes.
func (o VirtualMachineV2Output) MemorySizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.IntOutput { return v.MemorySizeBytes }).(pulumi.IntOutput)
}

// VM name.
func (o VirtualMachineV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NICs attached to the VM.
func (o VirtualMachineV2Output) Nics() VirtualMachineV2NicArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2NicArrayOutput { return v.Nics }).(VirtualMachineV2NicArrayOutput)
}

// Number of cores per socket. Value should be at least 1.
func (o VirtualMachineV2Output) NumCoresPerSocket() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.IntOutput { return v.NumCoresPerSocket }).(pulumi.IntOutput)
}

// Number of NUMA nodes. 0 means NUMA is disabled.
func (o VirtualMachineV2Output) NumNumaNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.IntOutput { return v.NumNumaNodes }).(pulumi.IntOutput)
}

// Number of vCPU sockets. Value should be at least 1.
func (o VirtualMachineV2Output) NumSockets() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.IntOutput { return v.NumSockets }).(pulumi.IntOutput)
}

// Number of threads per core. Value should be at least 1.
func (o VirtualMachineV2Output) NumThreadsPerCore() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.IntOutput { return v.NumThreadsPerCore }).(pulumi.IntOutput)
}

// Ownership information for the VM.
func (o VirtualMachineV2Output) OwnershipInfos() VirtualMachineV2OwnershipInfoArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2OwnershipInfoArrayOutput { return v.OwnershipInfos }).(VirtualMachineV2OwnershipInfoArrayOutput)
}

func (o VirtualMachineV2Output) PowerState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringPtrOutput { return v.PowerState }).(pulumi.StringPtrOutput)
}

// Status of protection policy applied to this VM.
func (o VirtualMachineV2Output) ProtectionPolicyStates() VirtualMachineV2ProtectionPolicyStateArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2ProtectionPolicyStateArrayOutput {
		return v.ProtectionPolicyStates
	}).(VirtualMachineV2ProtectionPolicyStateArrayOutput)
}

// The type of protection applied on a VM. Valid values "PD_PROTECTED", "UNPROTECTED", "RULE_PROTECTED".
func (o VirtualMachineV2Output) ProtectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.ProtectionType }).(pulumi.StringOutput)
}

// Serial ports configured on the VM.
func (o VirtualMachineV2Output) SerialPorts() VirtualMachineV2SerialPortArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2SerialPortArrayOutput { return v.SerialPorts }).(VirtualMachineV2SerialPortArrayOutput)
}

// Reference to an entity that the VM should be cloned or created from. Valid values are "VM", "VM_RECOVERY_POINT".
func (o VirtualMachineV2Output) Sources() VirtualMachineV2SourceArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2SourceArrayOutput { return v.Sources }).(VirtualMachineV2SourceArrayOutput)
}

// Storage configuration for VM.
func (o VirtualMachineV2Output) StorageConfigs() VirtualMachineV2StorageConfigArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2StorageConfigArrayOutput { return v.StorageConfigs }).(VirtualMachineV2StorageConfigArrayOutput)
}

// VM last updated time.
func (o VirtualMachineV2Output) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineV2) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Indicates how the vTPM for the VM should be configured.
func (o VirtualMachineV2Output) VtpmConfigs() VirtualMachineV2VtpmConfigArrayOutput {
	return o.ApplyT(func(v *VirtualMachineV2) VirtualMachineV2VtpmConfigArrayOutput { return v.VtpmConfigs }).(VirtualMachineV2VtpmConfigArrayOutput)
}

type VirtualMachineV2ArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachineV2)(nil)).Elem()
}

func (o VirtualMachineV2ArrayOutput) ToVirtualMachineV2ArrayOutput() VirtualMachineV2ArrayOutput {
	return o
}

func (o VirtualMachineV2ArrayOutput) ToVirtualMachineV2ArrayOutputWithContext(ctx context.Context) VirtualMachineV2ArrayOutput {
	return o
}

func (o VirtualMachineV2ArrayOutput) Index(i pulumi.IntInput) VirtualMachineV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachineV2 {
		return vs[0].([]*VirtualMachineV2)[vs[1].(int)]
	}).(VirtualMachineV2Output)
}

type VirtualMachineV2MapOutput struct{ *pulumi.OutputState }

func (VirtualMachineV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachineV2)(nil)).Elem()
}

func (o VirtualMachineV2MapOutput) ToVirtualMachineV2MapOutput() VirtualMachineV2MapOutput {
	return o
}

func (o VirtualMachineV2MapOutput) ToVirtualMachineV2MapOutputWithContext(ctx context.Context) VirtualMachineV2MapOutput {
	return o
}

func (o VirtualMachineV2MapOutput) MapIndex(k pulumi.StringInput) VirtualMachineV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachineV2 {
		return vs[0].(map[string]*VirtualMachineV2)[vs[1].(string)]
	}).(VirtualMachineV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineV2Input)(nil)).Elem(), &VirtualMachineV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineV2ArrayInput)(nil)).Elem(), VirtualMachineV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineV2MapInput)(nil)).Elem(), VirtualMachineV2Map{})
	pulumi.RegisterOutputType(VirtualMachineV2Output{})
	pulumi.RegisterOutputType(VirtualMachineV2ArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineV2MapOutput{})
}
