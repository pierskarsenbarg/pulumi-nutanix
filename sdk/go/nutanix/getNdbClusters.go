// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all clusters in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			clusters, err := nutanix.GetNdbClusters(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("clustersOp", clusters)
//			return nil
//		})
//	}
//
// ```
//
// ## clusters
//
// The following attributes are exported for each cluster:
//
// * `id`: - id of cluster
// * `name`: - name of cluster
// * `uniqueName`: - unique name of cluster
// * `ipAddresses`: - IP address
// * `fqdns`: - fqdn
// * `nxClusterUuid`: - nutanix cluster uuid
// * `description`: - description
// * `cloudType`: - cloud type
// * `dateCreated`: - creation date
// * `dateModified`: - date modified
// * `version`: - version
// * `ownerId`: - owner UUID
// * `status`: - current status
// * `hypervisorType`: - hypervisor type
// * `hypervisorVersion`: - hypervisor version
// * `properties`: - list of properties
// * `referenceCount`: - NA
// * `username`: - username
// * `password`: - password
// * `cloudInfo`: - cloud info
// * `resourceConfig`: - resource related consumption info
// * `managementServerInfo`: - NA
// * `entityCounts`: - no. of entities related
// * `healthy`: - if healthy status
//
// See detailed information in [NDB Clusters](https://www.nutanix.dev/api_references/ndb/#/b00cac8329db1-get-a-list-of-all-clusters).
func GetNdbClusters(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetNdbClustersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNdbClustersResult
	err := ctx.Invoke("nutanix:index/getNdbClusters:getNdbClusters", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getNdbClusters.
type GetNdbClustersResult struct {
	// list of clusters
	Clusters []GetNdbClustersCluster `pulumi:"clusters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetNdbClustersOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetNdbClustersResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetNdbClustersResultOutput, error) {
		opts = internal.PkgInvokeDefaultOpts(opts)
		var rv GetNdbClustersResult
		secret, err := ctx.InvokePackageRaw("nutanix:index/getNdbClusters:getNdbClusters", nil, &rv, "", opts...)
		if err != nil {
			return GetNdbClustersResultOutput{}, err
		}

		output := pulumi.ToOutput(rv).(GetNdbClustersResultOutput)
		if secret {
			return pulumi.ToSecret(output).(GetNdbClustersResultOutput), nil
		}
		return output, nil
	}).(GetNdbClustersResultOutput)
}

// A collection of values returned by getNdbClusters.
type GetNdbClustersResultOutput struct{ *pulumi.OutputState }

func (GetNdbClustersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbClustersResult)(nil)).Elem()
}

func (o GetNdbClustersResultOutput) ToGetNdbClustersResultOutput() GetNdbClustersResultOutput {
	return o
}

func (o GetNdbClustersResultOutput) ToGetNdbClustersResultOutputWithContext(ctx context.Context) GetNdbClustersResultOutput {
	return o
}

// list of clusters
func (o GetNdbClustersResultOutput) Clusters() GetNdbClustersClusterArrayOutput {
	return o.ApplyT(func(v GetNdbClustersResult) []GetNdbClustersCluster { return v.Clusters }).(GetNdbClustersClusterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNdbClustersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbClustersResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNdbClustersResultOutput{})
}
