// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a SLA in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sla1, err := nutanix.LookupNdbSla(ctx, &nutanix.LookupNdbSlaArgs{
//				SlaName: pulumi.StringRef("test-sla"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("sla", sla1)
//			return nil
//		})
//	}
//
// ```
func LookupNdbSla(ctx *pulumi.Context, args *LookupNdbSlaArgs, opts ...pulumi.InvokeOption) (*LookupNdbSlaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNdbSlaResult
	err := ctx.Invoke("nutanix:index/getNdbSla:getNdbSla", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbSla.
type LookupNdbSlaArgs struct {
	// and `slaName` are mutually exclusive.
	SlaId *string `pulumi:"slaId"`
	// SLA Name for query
	SlaName *string `pulumi:"slaName"`
}

// A collection of values returned by getNdbSla.
type LookupNdbSlaResult struct {
	// - continuous retention of logs limit
	ContinuousRetention int `pulumi:"continuousRetention"`
	// - Current active frequency
	CurrentActiveFrequency string `pulumi:"currentActiveFrequency"`
	// - Daily snapshots retention limit
	DailyRetention int `pulumi:"dailyRetention"`
	// - creation date
	DateCreated string `pulumi:"dateCreated"`
	// - last modified
	DateModified string `pulumi:"dateModified"`
	// - description of sla
	Description string `pulumi:"description"`
	// - id of sla
	Id string `pulumi:"id"`
	// - Monthly snapshots retention limit
	MonthlyRetention int `pulumi:"monthlyRetention"`
	// - sla name
	Name string `pulumi:"name"`
	// - owner ID
	OwnerId string `pulumi:"ownerId"`
	// - If point in time recovery enabled
	PitrEnabled bool `pulumi:"pitrEnabled"`
	// - Daily snapshots retention limit
	QuartelyRetention int `pulumi:"quartelyRetention"`
	// - Reference count
	ReferenceCount int     `pulumi:"referenceCount"`
	SlaId          *string `pulumi:"slaId"`
	SlaName        *string `pulumi:"slaName"`
	// - if system sla
	SystemSla bool `pulumi:"systemSla"`
	// - unique name
	UniqueName string `pulumi:"uniqueName"`
	// - weeky snapshots retention limit
	WeeklyRetention int `pulumi:"weeklyRetention"`
	// - Yearly snapshots retention limit
	YearlyRetention int `pulumi:"yearlyRetention"`
}

func LookupNdbSlaOutput(ctx *pulumi.Context, args LookupNdbSlaOutputArgs, opts ...pulumi.InvokeOption) LookupNdbSlaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNdbSlaResultOutput, error) {
			args := v.(LookupNdbSlaArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNdbSlaResult
			secret, err := ctx.InvokePackageRaw("nutanix:index/getNdbSla:getNdbSla", args, &rv, "", opts...)
			if err != nil {
				return LookupNdbSlaResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNdbSlaResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNdbSlaResultOutput), nil
			}
			return output, nil
		}).(LookupNdbSlaResultOutput)
}

// A collection of arguments for invoking getNdbSla.
type LookupNdbSlaOutputArgs struct {
	// and `slaName` are mutually exclusive.
	SlaId pulumi.StringPtrInput `pulumi:"slaId"`
	// SLA Name for query
	SlaName pulumi.StringPtrInput `pulumi:"slaName"`
}

func (LookupNdbSlaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbSlaArgs)(nil)).Elem()
}

// A collection of values returned by getNdbSla.
type LookupNdbSlaResultOutput struct{ *pulumi.OutputState }

func (LookupNdbSlaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbSlaResult)(nil)).Elem()
}

func (o LookupNdbSlaResultOutput) ToLookupNdbSlaResultOutput() LookupNdbSlaResultOutput {
	return o
}

func (o LookupNdbSlaResultOutput) ToLookupNdbSlaResultOutputWithContext(ctx context.Context) LookupNdbSlaResultOutput {
	return o
}

// - continuous retention of logs limit
func (o LookupNdbSlaResultOutput) ContinuousRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) int { return v.ContinuousRetention }).(pulumi.IntOutput)
}

// - Current active frequency
func (o LookupNdbSlaResultOutput) CurrentActiveFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.CurrentActiveFrequency }).(pulumi.StringOutput)
}

// - Daily snapshots retention limit
func (o LookupNdbSlaResultOutput) DailyRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) int { return v.DailyRetention }).(pulumi.IntOutput)
}

// - creation date
func (o LookupNdbSlaResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

// - last modified
func (o LookupNdbSlaResultOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.DateModified }).(pulumi.StringOutput)
}

// - description of sla
func (o LookupNdbSlaResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.Description }).(pulumi.StringOutput)
}

// - id of sla
func (o LookupNdbSlaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.Id }).(pulumi.StringOutput)
}

// - Monthly snapshots retention limit
func (o LookupNdbSlaResultOutput) MonthlyRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) int { return v.MonthlyRetention }).(pulumi.IntOutput)
}

// - sla name
func (o LookupNdbSlaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.Name }).(pulumi.StringOutput)
}

// - owner ID
func (o LookupNdbSlaResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

// - If point in time recovery enabled
func (o LookupNdbSlaResultOutput) PitrEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) bool { return v.PitrEnabled }).(pulumi.BoolOutput)
}

// - Daily snapshots retention limit
func (o LookupNdbSlaResultOutput) QuartelyRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) int { return v.QuartelyRetention }).(pulumi.IntOutput)
}

// - Reference count
func (o LookupNdbSlaResultOutput) ReferenceCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) int { return v.ReferenceCount }).(pulumi.IntOutput)
}

func (o LookupNdbSlaResultOutput) SlaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) *string { return v.SlaId }).(pulumi.StringPtrOutput)
}

func (o LookupNdbSlaResultOutput) SlaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) *string { return v.SlaName }).(pulumi.StringPtrOutput)
}

// - if system sla
func (o LookupNdbSlaResultOutput) SystemSla() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) bool { return v.SystemSla }).(pulumi.BoolOutput)
}

// - unique name
func (o LookupNdbSlaResultOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) string { return v.UniqueName }).(pulumi.StringOutput)
}

// - weeky snapshots retention limit
func (o LookupNdbSlaResultOutput) WeeklyRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) int { return v.WeeklyRetention }).(pulumi.IntOutput)
}

// - Yearly snapshots retention limit
func (o LookupNdbSlaResultOutput) YearlyRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbSlaResult) int { return v.YearlyRetention }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNdbSlaResultOutput{})
}
