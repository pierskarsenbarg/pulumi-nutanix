// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to perform the snapshot for database instance based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbDatabaseSnapshot(ctx, "name", &nutanix.NdbDatabaseSnapshotArgs{
//				RemoveScheduleInDays: pulumi.Int(1),
//				TimeMachineName:      pulumi.String("{{ tms_name }}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbDatabaseSnapshot struct {
	pulumi.CustomResourceState

	// App info version
	AppInfoVersion pulumi.StringOutput `pulumi:"appInfoVersion"`
	// Applicable types
	ApplicableTypes pulumi.StringArrayOutput `pulumi:"applicableTypes"`
	// database node id
	DatabaseNodeId pulumi.StringOutput `pulumi:"databaseNodeId"`
	// database snapshot
	DatabaseSnapshot pulumi.BoolOutput `pulumi:"databaseSnapshot"`
	// created date
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// modified date
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// dbserver id
	DbserverId pulumi.StringOutput `pulumi:"dbserverId"`
	// dbserver ip
	DbserverIp pulumi.StringOutput `pulumi:"dbserverIp"`
	// dbserver name
	DbserverName pulumi.StringOutput `pulumi:"dbserverName"`
	// dbserver storage metadata version
	DbserverStorageMetadataVersion pulumi.IntOutput `pulumi:"dbserverStorageMetadataVersion"`
	// description of snapshot
	Description pulumi.StringOutput `pulumi:"description"`
	// Default is set to Asia/Calcutta
	ExpiryDateTimezone pulumi.StringPtrOutput `pulumi:"expiryDateTimezone"`
	// from timestamp
	FromTimestamp pulumi.StringOutput `pulumi:"fromTimestamp"`
	// LCM config
	LcmConfigs NdbDatabaseSnapshotLcmConfigArrayOutput `pulumi:"lcmConfigs"`
	// Snapshot name. Default value is era_manual_snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// nx cluster id
	NxClusterId pulumi.StringOutput `pulumi:"nxClusterId"`
	// parent snapshot
	ParentSnapshot pulumi.BoolOutput `pulumi:"parentSnapshot"`
	// parent snapshot id
	ParentSnapshotId pulumi.StringOutput `pulumi:"parentSnapshotId"`
	// processed
	Processed pulumi.BoolOutput `pulumi:"processed"`
	// properties
	Properties NdbDatabaseSnapshotPropertyArrayOutput `pulumi:"properties"`
	// protection domain
	ProtectionDomainId pulumi.StringOutput `pulumi:"protectionDomainId"`
	// Removal schedule after which the snapshot should be removed.
	RemoveScheduleInDays pulumi.IntPtrOutput `pulumi:"removeScheduleInDays"`
	// snapshots to be replicated to clusters.
	ReplicateToClusters pulumi.StringArrayOutput `pulumi:"replicateToClusters"`
	// replicated snapshots
	ReplicatedSnapshots    pulumi.StringArrayOutput `pulumi:"replicatedSnapshots"`
	Santized               pulumi.BoolOutput        `pulumi:"santized"`
	SantizedFromSnapshotId pulumi.StringOutput      `pulumi:"santizedFromSnapshotId"`
	SantizedSnapshots      pulumi.StringOutput      `pulumi:"santizedSnapshots"`
	// snapshot family
	SnapshotFamily pulumi.StringOutput `pulumi:"snapshotFamily"`
	// snapshot size
	SnapshotSize pulumi.Float64Output `pulumi:"snapshotSize"`
	// snapshot timeStamp
	SnapshotTimestamp pulumi.StringOutput `pulumi:"snapshotTimestamp"`
	// snapshot timestamp date
	SnapshotTimestampDate pulumi.IntOutput `pulumi:"snapshotTimestampDate"`
	// snapshot uuid
	SnapshotUuid pulumi.StringOutput `pulumi:"snapshotUuid"`
	// software database snapshot
	SoftwareDatabaseSnapshot pulumi.BoolOutput `pulumi:"softwareDatabaseSnapshot"`
	// software snapshot
	SoftwareSnapshot pulumi.StringOutput `pulumi:"softwareSnapshot"`
	// software snapshot id
	SoftwareSnapshotId pulumi.StringOutput `pulumi:"softwareSnapshotId"`
	// status
	Status pulumi.StringOutput `pulumi:"status"`
	// tags
	Tags NdbDatabaseSnapshotTagArrayOutput `pulumi:"tags"`
	// Time Machine Id
	TimeMachineId pulumi.StringPtrOutput `pulumi:"timeMachineId"`
	// Time Machine Name
	TimeMachineName pulumi.StringPtrOutput `pulumi:"timeMachineName"`
	// timezone
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// to timestamp
	ToTimestamp pulumi.StringOutput `pulumi:"toTimestamp"`
	// type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNdbDatabaseSnapshot registers a new resource with the given unique name, arguments, and options.
func NewNdbDatabaseSnapshot(ctx *pulumi.Context,
	name string, args *NdbDatabaseSnapshotArgs, opts ...pulumi.ResourceOption) (*NdbDatabaseSnapshot, error) {
	if args == nil {
		args = &NdbDatabaseSnapshotArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbDatabaseSnapshot
	err := ctx.RegisterResource("nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbDatabaseSnapshot gets an existing NdbDatabaseSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbDatabaseSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbDatabaseSnapshotState, opts ...pulumi.ResourceOption) (*NdbDatabaseSnapshot, error) {
	var resource NdbDatabaseSnapshot
	err := ctx.ReadResource("nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbDatabaseSnapshot resources.
type ndbDatabaseSnapshotState struct {
	// App info version
	AppInfoVersion *string `pulumi:"appInfoVersion"`
	// Applicable types
	ApplicableTypes []string `pulumi:"applicableTypes"`
	// database node id
	DatabaseNodeId *string `pulumi:"databaseNodeId"`
	// database snapshot
	DatabaseSnapshot *bool `pulumi:"databaseSnapshot"`
	// created date
	DateCreated *string `pulumi:"dateCreated"`
	// modified date
	DateModified *string `pulumi:"dateModified"`
	// dbserver id
	DbserverId *string `pulumi:"dbserverId"`
	// dbserver ip
	DbserverIp *string `pulumi:"dbserverIp"`
	// dbserver name
	DbserverName *string `pulumi:"dbserverName"`
	// dbserver storage metadata version
	DbserverStorageMetadataVersion *int `pulumi:"dbserverStorageMetadataVersion"`
	// description of snapshot
	Description *string `pulumi:"description"`
	// Default is set to Asia/Calcutta
	ExpiryDateTimezone *string `pulumi:"expiryDateTimezone"`
	// from timestamp
	FromTimestamp *string `pulumi:"fromTimestamp"`
	// LCM config
	LcmConfigs []NdbDatabaseSnapshotLcmConfig `pulumi:"lcmConfigs"`
	// Snapshot name. Default value is era_manual_snapshot.
	Name *string `pulumi:"name"`
	// nx cluster id
	NxClusterId *string `pulumi:"nxClusterId"`
	// parent snapshot
	ParentSnapshot *bool `pulumi:"parentSnapshot"`
	// parent snapshot id
	ParentSnapshotId *string `pulumi:"parentSnapshotId"`
	// processed
	Processed *bool `pulumi:"processed"`
	// properties
	Properties []NdbDatabaseSnapshotProperty `pulumi:"properties"`
	// protection domain
	ProtectionDomainId *string `pulumi:"protectionDomainId"`
	// Removal schedule after which the snapshot should be removed.
	RemoveScheduleInDays *int `pulumi:"removeScheduleInDays"`
	// snapshots to be replicated to clusters.
	ReplicateToClusters []string `pulumi:"replicateToClusters"`
	// replicated snapshots
	ReplicatedSnapshots    []string `pulumi:"replicatedSnapshots"`
	Santized               *bool    `pulumi:"santized"`
	SantizedFromSnapshotId *string  `pulumi:"santizedFromSnapshotId"`
	SantizedSnapshots      *string  `pulumi:"santizedSnapshots"`
	// snapshot family
	SnapshotFamily *string `pulumi:"snapshotFamily"`
	// snapshot size
	SnapshotSize *float64 `pulumi:"snapshotSize"`
	// snapshot timeStamp
	SnapshotTimestamp *string `pulumi:"snapshotTimestamp"`
	// snapshot timestamp date
	SnapshotTimestampDate *int `pulumi:"snapshotTimestampDate"`
	// snapshot uuid
	SnapshotUuid *string `pulumi:"snapshotUuid"`
	// software database snapshot
	SoftwareDatabaseSnapshot *bool `pulumi:"softwareDatabaseSnapshot"`
	// software snapshot
	SoftwareSnapshot *string `pulumi:"softwareSnapshot"`
	// software snapshot id
	SoftwareSnapshotId *string `pulumi:"softwareSnapshotId"`
	// status
	Status *string `pulumi:"status"`
	// tags
	Tags []NdbDatabaseSnapshotTag `pulumi:"tags"`
	// Time Machine Id
	TimeMachineId *string `pulumi:"timeMachineId"`
	// Time Machine Name
	TimeMachineName *string `pulumi:"timeMachineName"`
	// timezone
	Timezone *string `pulumi:"timezone"`
	// to timestamp
	ToTimestamp *string `pulumi:"toTimestamp"`
	// type
	Type *string `pulumi:"type"`
}

type NdbDatabaseSnapshotState struct {
	// App info version
	AppInfoVersion pulumi.StringPtrInput
	// Applicable types
	ApplicableTypes pulumi.StringArrayInput
	// database node id
	DatabaseNodeId pulumi.StringPtrInput
	// database snapshot
	DatabaseSnapshot pulumi.BoolPtrInput
	// created date
	DateCreated pulumi.StringPtrInput
	// modified date
	DateModified pulumi.StringPtrInput
	// dbserver id
	DbserverId pulumi.StringPtrInput
	// dbserver ip
	DbserverIp pulumi.StringPtrInput
	// dbserver name
	DbserverName pulumi.StringPtrInput
	// dbserver storage metadata version
	DbserverStorageMetadataVersion pulumi.IntPtrInput
	// description of snapshot
	Description pulumi.StringPtrInput
	// Default is set to Asia/Calcutta
	ExpiryDateTimezone pulumi.StringPtrInput
	// from timestamp
	FromTimestamp pulumi.StringPtrInput
	// LCM config
	LcmConfigs NdbDatabaseSnapshotLcmConfigArrayInput
	// Snapshot name. Default value is era_manual_snapshot.
	Name pulumi.StringPtrInput
	// nx cluster id
	NxClusterId pulumi.StringPtrInput
	// parent snapshot
	ParentSnapshot pulumi.BoolPtrInput
	// parent snapshot id
	ParentSnapshotId pulumi.StringPtrInput
	// processed
	Processed pulumi.BoolPtrInput
	// properties
	Properties NdbDatabaseSnapshotPropertyArrayInput
	// protection domain
	ProtectionDomainId pulumi.StringPtrInput
	// Removal schedule after which the snapshot should be removed.
	RemoveScheduleInDays pulumi.IntPtrInput
	// snapshots to be replicated to clusters.
	ReplicateToClusters pulumi.StringArrayInput
	// replicated snapshots
	ReplicatedSnapshots    pulumi.StringArrayInput
	Santized               pulumi.BoolPtrInput
	SantizedFromSnapshotId pulumi.StringPtrInput
	SantizedSnapshots      pulumi.StringPtrInput
	// snapshot family
	SnapshotFamily pulumi.StringPtrInput
	// snapshot size
	SnapshotSize pulumi.Float64PtrInput
	// snapshot timeStamp
	SnapshotTimestamp pulumi.StringPtrInput
	// snapshot timestamp date
	SnapshotTimestampDate pulumi.IntPtrInput
	// snapshot uuid
	SnapshotUuid pulumi.StringPtrInput
	// software database snapshot
	SoftwareDatabaseSnapshot pulumi.BoolPtrInput
	// software snapshot
	SoftwareSnapshot pulumi.StringPtrInput
	// software snapshot id
	SoftwareSnapshotId pulumi.StringPtrInput
	// status
	Status pulumi.StringPtrInput
	// tags
	Tags NdbDatabaseSnapshotTagArrayInput
	// Time Machine Id
	TimeMachineId pulumi.StringPtrInput
	// Time Machine Name
	TimeMachineName pulumi.StringPtrInput
	// timezone
	Timezone pulumi.StringPtrInput
	// to timestamp
	ToTimestamp pulumi.StringPtrInput
	// type
	Type pulumi.StringPtrInput
}

func (NdbDatabaseSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDatabaseSnapshotState)(nil)).Elem()
}

type ndbDatabaseSnapshotArgs struct {
	// Default is set to Asia/Calcutta
	ExpiryDateTimezone *string `pulumi:"expiryDateTimezone"`
	// Snapshot name. Default value is era_manual_snapshot.
	Name *string `pulumi:"name"`
	// Removal schedule after which the snapshot should be removed.
	RemoveScheduleInDays *int `pulumi:"removeScheduleInDays"`
	// snapshots to be replicated to clusters.
	ReplicateToClusters []string `pulumi:"replicateToClusters"`
	// tags
	Tags []NdbDatabaseSnapshotTag `pulumi:"tags"`
	// Time Machine Id
	TimeMachineId *string `pulumi:"timeMachineId"`
	// Time Machine Name
	TimeMachineName *string `pulumi:"timeMachineName"`
}

// The set of arguments for constructing a NdbDatabaseSnapshot resource.
type NdbDatabaseSnapshotArgs struct {
	// Default is set to Asia/Calcutta
	ExpiryDateTimezone pulumi.StringPtrInput
	// Snapshot name. Default value is era_manual_snapshot.
	Name pulumi.StringPtrInput
	// Removal schedule after which the snapshot should be removed.
	RemoveScheduleInDays pulumi.IntPtrInput
	// snapshots to be replicated to clusters.
	ReplicateToClusters pulumi.StringArrayInput
	// tags
	Tags NdbDatabaseSnapshotTagArrayInput
	// Time Machine Id
	TimeMachineId pulumi.StringPtrInput
	// Time Machine Name
	TimeMachineName pulumi.StringPtrInput
}

func (NdbDatabaseSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDatabaseSnapshotArgs)(nil)).Elem()
}

type NdbDatabaseSnapshotInput interface {
	pulumi.Input

	ToNdbDatabaseSnapshotOutput() NdbDatabaseSnapshotOutput
	ToNdbDatabaseSnapshotOutputWithContext(ctx context.Context) NdbDatabaseSnapshotOutput
}

func (*NdbDatabaseSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDatabaseSnapshot)(nil)).Elem()
}

func (i *NdbDatabaseSnapshot) ToNdbDatabaseSnapshotOutput() NdbDatabaseSnapshotOutput {
	return i.ToNdbDatabaseSnapshotOutputWithContext(context.Background())
}

func (i *NdbDatabaseSnapshot) ToNdbDatabaseSnapshotOutputWithContext(ctx context.Context) NdbDatabaseSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseSnapshotOutput)
}

// NdbDatabaseSnapshotArrayInput is an input type that accepts NdbDatabaseSnapshotArray and NdbDatabaseSnapshotArrayOutput values.
// You can construct a concrete instance of `NdbDatabaseSnapshotArrayInput` via:
//
//	NdbDatabaseSnapshotArray{ NdbDatabaseSnapshotArgs{...} }
type NdbDatabaseSnapshotArrayInput interface {
	pulumi.Input

	ToNdbDatabaseSnapshotArrayOutput() NdbDatabaseSnapshotArrayOutput
	ToNdbDatabaseSnapshotArrayOutputWithContext(context.Context) NdbDatabaseSnapshotArrayOutput
}

type NdbDatabaseSnapshotArray []NdbDatabaseSnapshotInput

func (NdbDatabaseSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDatabaseSnapshot)(nil)).Elem()
}

func (i NdbDatabaseSnapshotArray) ToNdbDatabaseSnapshotArrayOutput() NdbDatabaseSnapshotArrayOutput {
	return i.ToNdbDatabaseSnapshotArrayOutputWithContext(context.Background())
}

func (i NdbDatabaseSnapshotArray) ToNdbDatabaseSnapshotArrayOutputWithContext(ctx context.Context) NdbDatabaseSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseSnapshotArrayOutput)
}

// NdbDatabaseSnapshotMapInput is an input type that accepts NdbDatabaseSnapshotMap and NdbDatabaseSnapshotMapOutput values.
// You can construct a concrete instance of `NdbDatabaseSnapshotMapInput` via:
//
//	NdbDatabaseSnapshotMap{ "key": NdbDatabaseSnapshotArgs{...} }
type NdbDatabaseSnapshotMapInput interface {
	pulumi.Input

	ToNdbDatabaseSnapshotMapOutput() NdbDatabaseSnapshotMapOutput
	ToNdbDatabaseSnapshotMapOutputWithContext(context.Context) NdbDatabaseSnapshotMapOutput
}

type NdbDatabaseSnapshotMap map[string]NdbDatabaseSnapshotInput

func (NdbDatabaseSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDatabaseSnapshot)(nil)).Elem()
}

func (i NdbDatabaseSnapshotMap) ToNdbDatabaseSnapshotMapOutput() NdbDatabaseSnapshotMapOutput {
	return i.ToNdbDatabaseSnapshotMapOutputWithContext(context.Background())
}

func (i NdbDatabaseSnapshotMap) ToNdbDatabaseSnapshotMapOutputWithContext(ctx context.Context) NdbDatabaseSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseSnapshotMapOutput)
}

type NdbDatabaseSnapshotOutput struct{ *pulumi.OutputState }

func (NdbDatabaseSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDatabaseSnapshot)(nil)).Elem()
}

func (o NdbDatabaseSnapshotOutput) ToNdbDatabaseSnapshotOutput() NdbDatabaseSnapshotOutput {
	return o
}

func (o NdbDatabaseSnapshotOutput) ToNdbDatabaseSnapshotOutputWithContext(ctx context.Context) NdbDatabaseSnapshotOutput {
	return o
}

// App info version
func (o NdbDatabaseSnapshotOutput) AppInfoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.AppInfoVersion }).(pulumi.StringOutput)
}

// Applicable types
func (o NdbDatabaseSnapshotOutput) ApplicableTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringArrayOutput { return v.ApplicableTypes }).(pulumi.StringArrayOutput)
}

// database node id
func (o NdbDatabaseSnapshotOutput) DatabaseNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.DatabaseNodeId }).(pulumi.StringOutput)
}

// database snapshot
func (o NdbDatabaseSnapshotOutput) DatabaseSnapshot() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.BoolOutput { return v.DatabaseSnapshot }).(pulumi.BoolOutput)
}

// created date
func (o NdbDatabaseSnapshotOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// modified date
func (o NdbDatabaseSnapshotOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// dbserver id
func (o NdbDatabaseSnapshotOutput) DbserverId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.DbserverId }).(pulumi.StringOutput)
}

// dbserver ip
func (o NdbDatabaseSnapshotOutput) DbserverIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.DbserverIp }).(pulumi.StringOutput)
}

// dbserver name
func (o NdbDatabaseSnapshotOutput) DbserverName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.DbserverName }).(pulumi.StringOutput)
}

// dbserver storage metadata version
func (o NdbDatabaseSnapshotOutput) DbserverStorageMetadataVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.IntOutput { return v.DbserverStorageMetadataVersion }).(pulumi.IntOutput)
}

// description of snapshot
func (o NdbDatabaseSnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Default is set to Asia/Calcutta
func (o NdbDatabaseSnapshotOutput) ExpiryDateTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringPtrOutput { return v.ExpiryDateTimezone }).(pulumi.StringPtrOutput)
}

// from timestamp
func (o NdbDatabaseSnapshotOutput) FromTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.FromTimestamp }).(pulumi.StringOutput)
}

// LCM config
func (o NdbDatabaseSnapshotOutput) LcmConfigs() NdbDatabaseSnapshotLcmConfigArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) NdbDatabaseSnapshotLcmConfigArrayOutput { return v.LcmConfigs }).(NdbDatabaseSnapshotLcmConfigArrayOutput)
}

// Snapshot name. Default value is era_manual_snapshot.
func (o NdbDatabaseSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// nx cluster id
func (o NdbDatabaseSnapshotOutput) NxClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.NxClusterId }).(pulumi.StringOutput)
}

// parent snapshot
func (o NdbDatabaseSnapshotOutput) ParentSnapshot() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.BoolOutput { return v.ParentSnapshot }).(pulumi.BoolOutput)
}

// parent snapshot id
func (o NdbDatabaseSnapshotOutput) ParentSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.ParentSnapshotId }).(pulumi.StringOutput)
}

// processed
func (o NdbDatabaseSnapshotOutput) Processed() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.BoolOutput { return v.Processed }).(pulumi.BoolOutput)
}

// properties
func (o NdbDatabaseSnapshotOutput) Properties() NdbDatabaseSnapshotPropertyArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) NdbDatabaseSnapshotPropertyArrayOutput { return v.Properties }).(NdbDatabaseSnapshotPropertyArrayOutput)
}

// protection domain
func (o NdbDatabaseSnapshotOutput) ProtectionDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.ProtectionDomainId }).(pulumi.StringOutput)
}

// Removal schedule after which the snapshot should be removed.
func (o NdbDatabaseSnapshotOutput) RemoveScheduleInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.IntPtrOutput { return v.RemoveScheduleInDays }).(pulumi.IntPtrOutput)
}

// snapshots to be replicated to clusters.
func (o NdbDatabaseSnapshotOutput) ReplicateToClusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringArrayOutput { return v.ReplicateToClusters }).(pulumi.StringArrayOutput)
}

// replicated snapshots
func (o NdbDatabaseSnapshotOutput) ReplicatedSnapshots() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringArrayOutput { return v.ReplicatedSnapshots }).(pulumi.StringArrayOutput)
}

func (o NdbDatabaseSnapshotOutput) Santized() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.BoolOutput { return v.Santized }).(pulumi.BoolOutput)
}

func (o NdbDatabaseSnapshotOutput) SantizedFromSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.SantizedFromSnapshotId }).(pulumi.StringOutput)
}

func (o NdbDatabaseSnapshotOutput) SantizedSnapshots() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.SantizedSnapshots }).(pulumi.StringOutput)
}

// snapshot family
func (o NdbDatabaseSnapshotOutput) SnapshotFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.SnapshotFamily }).(pulumi.StringOutput)
}

// snapshot size
func (o NdbDatabaseSnapshotOutput) SnapshotSize() pulumi.Float64Output {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.Float64Output { return v.SnapshotSize }).(pulumi.Float64Output)
}

// snapshot timeStamp
func (o NdbDatabaseSnapshotOutput) SnapshotTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.SnapshotTimestamp }).(pulumi.StringOutput)
}

// snapshot timestamp date
func (o NdbDatabaseSnapshotOutput) SnapshotTimestampDate() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.IntOutput { return v.SnapshotTimestampDate }).(pulumi.IntOutput)
}

// snapshot uuid
func (o NdbDatabaseSnapshotOutput) SnapshotUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.SnapshotUuid }).(pulumi.StringOutput)
}

// software database snapshot
func (o NdbDatabaseSnapshotOutput) SoftwareDatabaseSnapshot() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.BoolOutput { return v.SoftwareDatabaseSnapshot }).(pulumi.BoolOutput)
}

// software snapshot
func (o NdbDatabaseSnapshotOutput) SoftwareSnapshot() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.SoftwareSnapshot }).(pulumi.StringOutput)
}

// software snapshot id
func (o NdbDatabaseSnapshotOutput) SoftwareSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.SoftwareSnapshotId }).(pulumi.StringOutput)
}

// status
func (o NdbDatabaseSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// tags
func (o NdbDatabaseSnapshotOutput) Tags() NdbDatabaseSnapshotTagArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) NdbDatabaseSnapshotTagArrayOutput { return v.Tags }).(NdbDatabaseSnapshotTagArrayOutput)
}

// Time Machine Id
func (o NdbDatabaseSnapshotOutput) TimeMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringPtrOutput { return v.TimeMachineId }).(pulumi.StringPtrOutput)
}

// Time Machine Name
func (o NdbDatabaseSnapshotOutput) TimeMachineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringPtrOutput { return v.TimeMachineName }).(pulumi.StringPtrOutput)
}

// timezone
func (o NdbDatabaseSnapshotOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// to timestamp
func (o NdbDatabaseSnapshotOutput) ToTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.ToTimestamp }).(pulumi.StringOutput)
}

// type
func (o NdbDatabaseSnapshotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseSnapshot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NdbDatabaseSnapshotArrayOutput struct{ *pulumi.OutputState }

func (NdbDatabaseSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDatabaseSnapshot)(nil)).Elem()
}

func (o NdbDatabaseSnapshotArrayOutput) ToNdbDatabaseSnapshotArrayOutput() NdbDatabaseSnapshotArrayOutput {
	return o
}

func (o NdbDatabaseSnapshotArrayOutput) ToNdbDatabaseSnapshotArrayOutputWithContext(ctx context.Context) NdbDatabaseSnapshotArrayOutput {
	return o
}

func (o NdbDatabaseSnapshotArrayOutput) Index(i pulumi.IntInput) NdbDatabaseSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbDatabaseSnapshot {
		return vs[0].([]*NdbDatabaseSnapshot)[vs[1].(int)]
	}).(NdbDatabaseSnapshotOutput)
}

type NdbDatabaseSnapshotMapOutput struct{ *pulumi.OutputState }

func (NdbDatabaseSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDatabaseSnapshot)(nil)).Elem()
}

func (o NdbDatabaseSnapshotMapOutput) ToNdbDatabaseSnapshotMapOutput() NdbDatabaseSnapshotMapOutput {
	return o
}

func (o NdbDatabaseSnapshotMapOutput) ToNdbDatabaseSnapshotMapOutputWithContext(ctx context.Context) NdbDatabaseSnapshotMapOutput {
	return o
}

func (o NdbDatabaseSnapshotMapOutput) MapIndex(k pulumi.StringInput) NdbDatabaseSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbDatabaseSnapshot {
		return vs[0].(map[string]*NdbDatabaseSnapshot)[vs[1].(string)]
	}).(NdbDatabaseSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseSnapshotInput)(nil)).Elem(), &NdbDatabaseSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseSnapshotArrayInput)(nil)).Elem(), NdbDatabaseSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseSnapshotMapInput)(nil)).Elem(), NdbDatabaseSnapshotMap{})
	pulumi.RegisterOutputType(NdbDatabaseSnapshotOutput{})
	pulumi.RegisterOutputType(NdbDatabaseSnapshotArrayOutput{})
	pulumi.RegisterOutputType(NdbDatabaseSnapshotMapOutput{})
}
