// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the SSH config from a Karbon Cluster
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetKarbonClusterSsh(ctx, &nutanix.GetKarbonClusterSshArgs{
//				KarbonClusterId: pulumi.StringRef("<YOUR-CLUSTER-ID>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nutanix.GetKarbonClusterSsh(ctx, &nutanix.GetKarbonClusterSshArgs{
//				KarbonClusterName: pulumi.StringRef("<YOUR-CLUSTER-NAME>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetKarbonClusterSsh(ctx *pulumi.Context, args *GetKarbonClusterSshArgs, opts ...pulumi.InvokeOption) (*GetKarbonClusterSshResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKarbonClusterSshResult
	err := ctx.Invoke("nutanix:index/getKarbonClusterSsh:getKarbonClusterSsh", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKarbonClusterSsh.
type GetKarbonClusterSshArgs struct {
	// Represents karbon cluster uuid
	KarbonClusterId *string `pulumi:"karbonClusterId"`
	// Represents the name of karbon cluster
	KarbonClusterName *string `pulumi:"karbonClusterName"`
}

// A collection of values returned by getKarbonClusterSsh.
type GetKarbonClusterSshResult struct {
	// Certificate of the user for SSH access.
	Certificate string `pulumi:"certificate"`
	// Timestamp of certificate expiry in the ISO 8601 format (YYYY-MM-DDThh:mm:ss.sssZ).
	ExpiryTime string `pulumi:"expiryTime"`
	// The provider-assigned unique ID for this managed resource.
	Id                string  `pulumi:"id"`
	KarbonClusterId   *string `pulumi:"karbonClusterId"`
	KarbonClusterName *string `pulumi:"karbonClusterName"`
	// The private key of the user for SSH access.
	PrivateKey string `pulumi:"privateKey"`
	// The username for which credentials are returned.
	Username string `pulumi:"username"`
}

func GetKarbonClusterSshOutput(ctx *pulumi.Context, args GetKarbonClusterSshOutputArgs, opts ...pulumi.InvokeOption) GetKarbonClusterSshResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetKarbonClusterSshResultOutput, error) {
			args := v.(GetKarbonClusterSshArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetKarbonClusterSshResult
			secret, err := ctx.InvokePackageRaw("nutanix:index/getKarbonClusterSsh:getKarbonClusterSsh", args, &rv, "", opts...)
			if err != nil {
				return GetKarbonClusterSshResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetKarbonClusterSshResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetKarbonClusterSshResultOutput), nil
			}
			return output, nil
		}).(GetKarbonClusterSshResultOutput)
}

// A collection of arguments for invoking getKarbonClusterSsh.
type GetKarbonClusterSshOutputArgs struct {
	// Represents karbon cluster uuid
	KarbonClusterId pulumi.StringPtrInput `pulumi:"karbonClusterId"`
	// Represents the name of karbon cluster
	KarbonClusterName pulumi.StringPtrInput `pulumi:"karbonClusterName"`
}

func (GetKarbonClusterSshOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKarbonClusterSshArgs)(nil)).Elem()
}

// A collection of values returned by getKarbonClusterSsh.
type GetKarbonClusterSshResultOutput struct{ *pulumi.OutputState }

func (GetKarbonClusterSshResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKarbonClusterSshResult)(nil)).Elem()
}

func (o GetKarbonClusterSshResultOutput) ToGetKarbonClusterSshResultOutput() GetKarbonClusterSshResultOutput {
	return o
}

func (o GetKarbonClusterSshResultOutput) ToGetKarbonClusterSshResultOutputWithContext(ctx context.Context) GetKarbonClusterSshResultOutput {
	return o
}

// Certificate of the user for SSH access.
func (o GetKarbonClusterSshResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetKarbonClusterSshResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// Timestamp of certificate expiry in the ISO 8601 format (YYYY-MM-DDThh:mm:ss.sssZ).
func (o GetKarbonClusterSshResultOutput) ExpiryTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetKarbonClusterSshResult) string { return v.ExpiryTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetKarbonClusterSshResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKarbonClusterSshResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetKarbonClusterSshResultOutput) KarbonClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKarbonClusterSshResult) *string { return v.KarbonClusterId }).(pulumi.StringPtrOutput)
}

func (o GetKarbonClusterSshResultOutput) KarbonClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKarbonClusterSshResult) *string { return v.KarbonClusterName }).(pulumi.StringPtrOutput)
}

// The private key of the user for SSH access.
func (o GetKarbonClusterSshResultOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKarbonClusterSshResult) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// The username for which credentials are returned.
func (o GetKarbonClusterSshResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetKarbonClusterSshResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKarbonClusterSshResultOutput{})
}
