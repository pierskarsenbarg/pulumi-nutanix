// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NdbRegisterDbserver struct {
	pulumi.CustomResourceState

	ClientId          pulumi.StringOutput                            `pulumi:"clientId"`
	Credentials       NdbRegisterDbserverCredentialArrayOutput       `pulumi:"credentials"`
	DatabaseType      pulumi.StringOutput                            `pulumi:"databaseType"`
	DbserverClusterId pulumi.StringOutput                            `pulumi:"dbserverClusterId"`
	Delete            pulumi.BoolPtrOutput                           `pulumi:"delete"`
	DeleteVgs         pulumi.BoolPtrOutput                           `pulumi:"deleteVgs"`
	DeleteVmSnapshots pulumi.BoolPtrOutput                           `pulumi:"deleteVmSnapshots"`
	Description       pulumi.StringOutput                            `pulumi:"description"`
	EraCreated        pulumi.BoolOutput                              `pulumi:"eraCreated"`
	EraDriveId        pulumi.StringOutput                            `pulumi:"eraDriveId"`
	EraVersion        pulumi.StringOutput                            `pulumi:"eraVersion"`
	ForcedInstall     pulumi.BoolPtrOutput                           `pulumi:"forcedInstall"`
	Fqdns             pulumi.StringOutput                            `pulumi:"fqdns"`
	Internal          pulumi.BoolOutput                              `pulumi:"internal"`
	IpAddresses       pulumi.StringArrayOutput                       `pulumi:"ipAddresses"`
	MacAddresses      pulumi.StringArrayOutput                       `pulumi:"macAddresses"`
	Name              pulumi.StringOutput                            `pulumi:"name"`
	NxclusterId       pulumi.StringPtrOutput                         `pulumi:"nxclusterId"`
	Password          pulumi.StringPtrOutput                         `pulumi:"password"`
	PostgresDatabases NdbRegisterDbserverPostgresDatabaseArrayOutput `pulumi:"postgresDatabases"`
	// List of all the properties
	Properties                     NdbRegisterDbserverPropertyArrayOutput `pulumi:"properties"`
	Remove                         pulumi.BoolPtrOutput                   `pulumi:"remove"`
	SoftRemove                     pulumi.BoolPtrOutput                   `pulumi:"softRemove"`
	SshKey                         pulumi.StringPtrOutput                 `pulumi:"sshKey"`
	Status                         pulumi.StringOutput                    `pulumi:"status"`
	Tags                           NdbRegisterDbserverTagArrayOutput      `pulumi:"tags"`
	Type                           pulumi.StringOutput                    `pulumi:"type"`
	UpdateNameDescriptionInCluster pulumi.BoolPtrOutput                   `pulumi:"updateNameDescriptionInCluster"`
	Username                       pulumi.StringPtrOutput                 `pulumi:"username"`
	VmClusterName                  pulumi.StringOutput                    `pulumi:"vmClusterName"`
	VmClusterUuid                  pulumi.StringOutput                    `pulumi:"vmClusterUuid"`
	VmIp                           pulumi.StringOutput                    `pulumi:"vmIp"`
	VmTimezone                     pulumi.StringOutput                    `pulumi:"vmTimezone"`
	WorkingDirectory               pulumi.StringPtrOutput                 `pulumi:"workingDirectory"`
}

// NewNdbRegisterDbserver registers a new resource with the given unique name, arguments, and options.
func NewNdbRegisterDbserver(ctx *pulumi.Context,
	name string, args *NdbRegisterDbserverArgs, opts ...pulumi.ResourceOption) (*NdbRegisterDbserver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseType'")
	}
	if args.VmIp == nil {
		return nil, errors.New("invalid value for required argument 'VmIp'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.SshKey != nil {
		args.SshKey = pulumi.ToSecret(args.SshKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"sshKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbRegisterDbserver
	err := ctx.RegisterResource("nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbRegisterDbserver gets an existing NdbRegisterDbserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbRegisterDbserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbRegisterDbserverState, opts ...pulumi.ResourceOption) (*NdbRegisterDbserver, error) {
	var resource NdbRegisterDbserver
	err := ctx.ReadResource("nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbRegisterDbserver resources.
type ndbRegisterDbserverState struct {
	ClientId          *string                               `pulumi:"clientId"`
	Credentials       []NdbRegisterDbserverCredential       `pulumi:"credentials"`
	DatabaseType      *string                               `pulumi:"databaseType"`
	DbserverClusterId *string                               `pulumi:"dbserverClusterId"`
	Delete            *bool                                 `pulumi:"delete"`
	DeleteVgs         *bool                                 `pulumi:"deleteVgs"`
	DeleteVmSnapshots *bool                                 `pulumi:"deleteVmSnapshots"`
	Description       *string                               `pulumi:"description"`
	EraCreated        *bool                                 `pulumi:"eraCreated"`
	EraDriveId        *string                               `pulumi:"eraDriveId"`
	EraVersion        *string                               `pulumi:"eraVersion"`
	ForcedInstall     *bool                                 `pulumi:"forcedInstall"`
	Fqdns             *string                               `pulumi:"fqdns"`
	Internal          *bool                                 `pulumi:"internal"`
	IpAddresses       []string                              `pulumi:"ipAddresses"`
	MacAddresses      []string                              `pulumi:"macAddresses"`
	Name              *string                               `pulumi:"name"`
	NxclusterId       *string                               `pulumi:"nxclusterId"`
	Password          *string                               `pulumi:"password"`
	PostgresDatabases []NdbRegisterDbserverPostgresDatabase `pulumi:"postgresDatabases"`
	// List of all the properties
	Properties                     []NdbRegisterDbserverProperty `pulumi:"properties"`
	Remove                         *bool                         `pulumi:"remove"`
	SoftRemove                     *bool                         `pulumi:"softRemove"`
	SshKey                         *string                       `pulumi:"sshKey"`
	Status                         *string                       `pulumi:"status"`
	Tags                           []NdbRegisterDbserverTag      `pulumi:"tags"`
	Type                           *string                       `pulumi:"type"`
	UpdateNameDescriptionInCluster *bool                         `pulumi:"updateNameDescriptionInCluster"`
	Username                       *string                       `pulumi:"username"`
	VmClusterName                  *string                       `pulumi:"vmClusterName"`
	VmClusterUuid                  *string                       `pulumi:"vmClusterUuid"`
	VmIp                           *string                       `pulumi:"vmIp"`
	VmTimezone                     *string                       `pulumi:"vmTimezone"`
	WorkingDirectory               *string                       `pulumi:"workingDirectory"`
}

type NdbRegisterDbserverState struct {
	ClientId          pulumi.StringPtrInput
	Credentials       NdbRegisterDbserverCredentialArrayInput
	DatabaseType      pulumi.StringPtrInput
	DbserverClusterId pulumi.StringPtrInput
	Delete            pulumi.BoolPtrInput
	DeleteVgs         pulumi.BoolPtrInput
	DeleteVmSnapshots pulumi.BoolPtrInput
	Description       pulumi.StringPtrInput
	EraCreated        pulumi.BoolPtrInput
	EraDriveId        pulumi.StringPtrInput
	EraVersion        pulumi.StringPtrInput
	ForcedInstall     pulumi.BoolPtrInput
	Fqdns             pulumi.StringPtrInput
	Internal          pulumi.BoolPtrInput
	IpAddresses       pulumi.StringArrayInput
	MacAddresses      pulumi.StringArrayInput
	Name              pulumi.StringPtrInput
	NxclusterId       pulumi.StringPtrInput
	Password          pulumi.StringPtrInput
	PostgresDatabases NdbRegisterDbserverPostgresDatabaseArrayInput
	// List of all the properties
	Properties                     NdbRegisterDbserverPropertyArrayInput
	Remove                         pulumi.BoolPtrInput
	SoftRemove                     pulumi.BoolPtrInput
	SshKey                         pulumi.StringPtrInput
	Status                         pulumi.StringPtrInput
	Tags                           NdbRegisterDbserverTagArrayInput
	Type                           pulumi.StringPtrInput
	UpdateNameDescriptionInCluster pulumi.BoolPtrInput
	Username                       pulumi.StringPtrInput
	VmClusterName                  pulumi.StringPtrInput
	VmClusterUuid                  pulumi.StringPtrInput
	VmIp                           pulumi.StringPtrInput
	VmTimezone                     pulumi.StringPtrInput
	WorkingDirectory               pulumi.StringPtrInput
}

func (NdbRegisterDbserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbRegisterDbserverState)(nil)).Elem()
}

type ndbRegisterDbserverArgs struct {
	Credentials                    []NdbRegisterDbserverCredential       `pulumi:"credentials"`
	DatabaseType                   string                                `pulumi:"databaseType"`
	Delete                         *bool                                 `pulumi:"delete"`
	DeleteVgs                      *bool                                 `pulumi:"deleteVgs"`
	DeleteVmSnapshots              *bool                                 `pulumi:"deleteVmSnapshots"`
	Description                    *string                               `pulumi:"description"`
	ForcedInstall                  *bool                                 `pulumi:"forcedInstall"`
	Name                           *string                               `pulumi:"name"`
	NxclusterId                    *string                               `pulumi:"nxclusterId"`
	Password                       *string                               `pulumi:"password"`
	PostgresDatabases              []NdbRegisterDbserverPostgresDatabase `pulumi:"postgresDatabases"`
	Remove                         *bool                                 `pulumi:"remove"`
	SoftRemove                     *bool                                 `pulumi:"softRemove"`
	SshKey                         *string                               `pulumi:"sshKey"`
	Tags                           []NdbRegisterDbserverTag              `pulumi:"tags"`
	UpdateNameDescriptionInCluster *bool                                 `pulumi:"updateNameDescriptionInCluster"`
	Username                       *string                               `pulumi:"username"`
	VmIp                           string                                `pulumi:"vmIp"`
	WorkingDirectory               *string                               `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a NdbRegisterDbserver resource.
type NdbRegisterDbserverArgs struct {
	Credentials                    NdbRegisterDbserverCredentialArrayInput
	DatabaseType                   pulumi.StringInput
	Delete                         pulumi.BoolPtrInput
	DeleteVgs                      pulumi.BoolPtrInput
	DeleteVmSnapshots              pulumi.BoolPtrInput
	Description                    pulumi.StringPtrInput
	ForcedInstall                  pulumi.BoolPtrInput
	Name                           pulumi.StringPtrInput
	NxclusterId                    pulumi.StringPtrInput
	Password                       pulumi.StringPtrInput
	PostgresDatabases              NdbRegisterDbserverPostgresDatabaseArrayInput
	Remove                         pulumi.BoolPtrInput
	SoftRemove                     pulumi.BoolPtrInput
	SshKey                         pulumi.StringPtrInput
	Tags                           NdbRegisterDbserverTagArrayInput
	UpdateNameDescriptionInCluster pulumi.BoolPtrInput
	Username                       pulumi.StringPtrInput
	VmIp                           pulumi.StringInput
	WorkingDirectory               pulumi.StringPtrInput
}

func (NdbRegisterDbserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbRegisterDbserverArgs)(nil)).Elem()
}

type NdbRegisterDbserverInput interface {
	pulumi.Input

	ToNdbRegisterDbserverOutput() NdbRegisterDbserverOutput
	ToNdbRegisterDbserverOutputWithContext(ctx context.Context) NdbRegisterDbserverOutput
}

func (*NdbRegisterDbserver) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbRegisterDbserver)(nil)).Elem()
}

func (i *NdbRegisterDbserver) ToNdbRegisterDbserverOutput() NdbRegisterDbserverOutput {
	return i.ToNdbRegisterDbserverOutputWithContext(context.Background())
}

func (i *NdbRegisterDbserver) ToNdbRegisterDbserverOutputWithContext(ctx context.Context) NdbRegisterDbserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbRegisterDbserverOutput)
}

// NdbRegisterDbserverArrayInput is an input type that accepts NdbRegisterDbserverArray and NdbRegisterDbserverArrayOutput values.
// You can construct a concrete instance of `NdbRegisterDbserverArrayInput` via:
//
//	NdbRegisterDbserverArray{ NdbRegisterDbserverArgs{...} }
type NdbRegisterDbserverArrayInput interface {
	pulumi.Input

	ToNdbRegisterDbserverArrayOutput() NdbRegisterDbserverArrayOutput
	ToNdbRegisterDbserverArrayOutputWithContext(context.Context) NdbRegisterDbserverArrayOutput
}

type NdbRegisterDbserverArray []NdbRegisterDbserverInput

func (NdbRegisterDbserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbRegisterDbserver)(nil)).Elem()
}

func (i NdbRegisterDbserverArray) ToNdbRegisterDbserverArrayOutput() NdbRegisterDbserverArrayOutput {
	return i.ToNdbRegisterDbserverArrayOutputWithContext(context.Background())
}

func (i NdbRegisterDbserverArray) ToNdbRegisterDbserverArrayOutputWithContext(ctx context.Context) NdbRegisterDbserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbRegisterDbserverArrayOutput)
}

// NdbRegisterDbserverMapInput is an input type that accepts NdbRegisterDbserverMap and NdbRegisterDbserverMapOutput values.
// You can construct a concrete instance of `NdbRegisterDbserverMapInput` via:
//
//	NdbRegisterDbserverMap{ "key": NdbRegisterDbserverArgs{...} }
type NdbRegisterDbserverMapInput interface {
	pulumi.Input

	ToNdbRegisterDbserverMapOutput() NdbRegisterDbserverMapOutput
	ToNdbRegisterDbserverMapOutputWithContext(context.Context) NdbRegisterDbserverMapOutput
}

type NdbRegisterDbserverMap map[string]NdbRegisterDbserverInput

func (NdbRegisterDbserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbRegisterDbserver)(nil)).Elem()
}

func (i NdbRegisterDbserverMap) ToNdbRegisterDbserverMapOutput() NdbRegisterDbserverMapOutput {
	return i.ToNdbRegisterDbserverMapOutputWithContext(context.Background())
}

func (i NdbRegisterDbserverMap) ToNdbRegisterDbserverMapOutputWithContext(ctx context.Context) NdbRegisterDbserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbRegisterDbserverMapOutput)
}

type NdbRegisterDbserverOutput struct{ *pulumi.OutputState }

func (NdbRegisterDbserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbRegisterDbserver)(nil)).Elem()
}

func (o NdbRegisterDbserverOutput) ToNdbRegisterDbserverOutput() NdbRegisterDbserverOutput {
	return o
}

func (o NdbRegisterDbserverOutput) ToNdbRegisterDbserverOutputWithContext(ctx context.Context) NdbRegisterDbserverOutput {
	return o
}

func (o NdbRegisterDbserverOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) Credentials() NdbRegisterDbserverCredentialArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) NdbRegisterDbserverCredentialArrayOutput { return v.Credentials }).(NdbRegisterDbserverCredentialArrayOutput)
}

func (o NdbRegisterDbserverOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) DbserverClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.DbserverClusterId }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolPtrOutput { return v.Delete }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDbserverOutput) DeleteVgs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolPtrOutput { return v.DeleteVgs }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDbserverOutput) DeleteVmSnapshots() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolPtrOutput { return v.DeleteVmSnapshots }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDbserverOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) EraCreated() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolOutput { return v.EraCreated }).(pulumi.BoolOutput)
}

func (o NdbRegisterDbserverOutput) EraDriveId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.EraDriveId }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) EraVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.EraVersion }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) ForcedInstall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolPtrOutput { return v.ForcedInstall }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDbserverOutput) Fqdns() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.Fqdns }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) Internal() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolOutput { return v.Internal }).(pulumi.BoolOutput)
}

func (o NdbRegisterDbserverOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

func (o NdbRegisterDbserverOutput) MacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringArrayOutput { return v.MacAddresses }).(pulumi.StringArrayOutput)
}

func (o NdbRegisterDbserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) NxclusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringPtrOutput { return v.NxclusterId }).(pulumi.StringPtrOutput)
}

func (o NdbRegisterDbserverOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o NdbRegisterDbserverOutput) PostgresDatabases() NdbRegisterDbserverPostgresDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) NdbRegisterDbserverPostgresDatabaseArrayOutput {
		return v.PostgresDatabases
	}).(NdbRegisterDbserverPostgresDatabaseArrayOutput)
}

// List of all the properties
func (o NdbRegisterDbserverOutput) Properties() NdbRegisterDbserverPropertyArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) NdbRegisterDbserverPropertyArrayOutput { return v.Properties }).(NdbRegisterDbserverPropertyArrayOutput)
}

func (o NdbRegisterDbserverOutput) Remove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolPtrOutput { return v.Remove }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDbserverOutput) SoftRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolPtrOutput { return v.SoftRemove }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDbserverOutput) SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringPtrOutput { return v.SshKey }).(pulumi.StringPtrOutput)
}

func (o NdbRegisterDbserverOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) Tags() NdbRegisterDbserverTagArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) NdbRegisterDbserverTagArrayOutput { return v.Tags }).(NdbRegisterDbserverTagArrayOutput)
}

func (o NdbRegisterDbserverOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) UpdateNameDescriptionInCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.BoolPtrOutput { return v.UpdateNameDescriptionInCluster }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDbserverOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

func (o NdbRegisterDbserverOutput) VmClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.VmClusterName }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) VmClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.VmClusterUuid }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) VmIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.VmIp }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) VmTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringOutput { return v.VmTimezone }).(pulumi.StringOutput)
}

func (o NdbRegisterDbserverOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDbserver) pulumi.StringPtrOutput { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type NdbRegisterDbserverArrayOutput struct{ *pulumi.OutputState }

func (NdbRegisterDbserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbRegisterDbserver)(nil)).Elem()
}

func (o NdbRegisterDbserverArrayOutput) ToNdbRegisterDbserverArrayOutput() NdbRegisterDbserverArrayOutput {
	return o
}

func (o NdbRegisterDbserverArrayOutput) ToNdbRegisterDbserverArrayOutputWithContext(ctx context.Context) NdbRegisterDbserverArrayOutput {
	return o
}

func (o NdbRegisterDbserverArrayOutput) Index(i pulumi.IntInput) NdbRegisterDbserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbRegisterDbserver {
		return vs[0].([]*NdbRegisterDbserver)[vs[1].(int)]
	}).(NdbRegisterDbserverOutput)
}

type NdbRegisterDbserverMapOutput struct{ *pulumi.OutputState }

func (NdbRegisterDbserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbRegisterDbserver)(nil)).Elem()
}

func (o NdbRegisterDbserverMapOutput) ToNdbRegisterDbserverMapOutput() NdbRegisterDbserverMapOutput {
	return o
}

func (o NdbRegisterDbserverMapOutput) ToNdbRegisterDbserverMapOutputWithContext(ctx context.Context) NdbRegisterDbserverMapOutput {
	return o
}

func (o NdbRegisterDbserverMapOutput) MapIndex(k pulumi.StringInput) NdbRegisterDbserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbRegisterDbserver {
		return vs[0].(map[string]*NdbRegisterDbserver)[vs[1].(string)]
	}).(NdbRegisterDbserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbRegisterDbserverInput)(nil)).Elem(), &NdbRegisterDbserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbRegisterDbserverArrayInput)(nil)).Elem(), NdbRegisterDbserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbRegisterDbserverMapInput)(nil)).Elem(), NdbRegisterDbserverMap{})
	pulumi.RegisterOutputType(NdbRegisterDbserverOutput{})
	pulumi.RegisterOutputType(NdbRegisterDbserverArrayOutput{})
	pulumi.RegisterOutputType(NdbRegisterDbserverMapOutput{})
}
