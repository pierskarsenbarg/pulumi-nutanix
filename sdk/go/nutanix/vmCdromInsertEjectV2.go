// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VmCdromInsertEjectV2 struct {
	pulumi.CustomResourceState

	BackingInfos VmCdromInsertEjectV2BackingInfoArrayOutput `pulumi:"backingInfos"`
	ExtId        pulumi.StringOutput                        `pulumi:"extId"`
	VmExtId      pulumi.StringOutput                        `pulumi:"vmExtId"`
}

// NewVmCdromInsertEjectV2 registers a new resource with the given unique name, arguments, and options.
func NewVmCdromInsertEjectV2(ctx *pulumi.Context,
	name string, args *VmCdromInsertEjectV2Args, opts ...pulumi.ResourceOption) (*VmCdromInsertEjectV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	if args.VmExtId == nil {
		return nil, errors.New("invalid value for required argument 'VmExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmCdromInsertEjectV2
	err := ctx.RegisterResource("nutanix:index/vmCdromInsertEjectV2:VmCdromInsertEjectV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmCdromInsertEjectV2 gets an existing VmCdromInsertEjectV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmCdromInsertEjectV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmCdromInsertEjectV2State, opts ...pulumi.ResourceOption) (*VmCdromInsertEjectV2, error) {
	var resource VmCdromInsertEjectV2
	err := ctx.ReadResource("nutanix:index/vmCdromInsertEjectV2:VmCdromInsertEjectV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmCdromInsertEjectV2 resources.
type vmCdromInsertEjectV2State struct {
	BackingInfos []VmCdromInsertEjectV2BackingInfo `pulumi:"backingInfos"`
	ExtId        *string                           `pulumi:"extId"`
	VmExtId      *string                           `pulumi:"vmExtId"`
}

type VmCdromInsertEjectV2State struct {
	BackingInfos VmCdromInsertEjectV2BackingInfoArrayInput
	ExtId        pulumi.StringPtrInput
	VmExtId      pulumi.StringPtrInput
}

func (VmCdromInsertEjectV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*vmCdromInsertEjectV2State)(nil)).Elem()
}

type vmCdromInsertEjectV2Args struct {
	BackingInfos []VmCdromInsertEjectV2BackingInfo `pulumi:"backingInfos"`
	ExtId        string                            `pulumi:"extId"`
	VmExtId      string                            `pulumi:"vmExtId"`
}

// The set of arguments for constructing a VmCdromInsertEjectV2 resource.
type VmCdromInsertEjectV2Args struct {
	BackingInfos VmCdromInsertEjectV2BackingInfoArrayInput
	ExtId        pulumi.StringInput
	VmExtId      pulumi.StringInput
}

func (VmCdromInsertEjectV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vmCdromInsertEjectV2Args)(nil)).Elem()
}

type VmCdromInsertEjectV2Input interface {
	pulumi.Input

	ToVmCdromInsertEjectV2Output() VmCdromInsertEjectV2Output
	ToVmCdromInsertEjectV2OutputWithContext(ctx context.Context) VmCdromInsertEjectV2Output
}

func (*VmCdromInsertEjectV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VmCdromInsertEjectV2)(nil)).Elem()
}

func (i *VmCdromInsertEjectV2) ToVmCdromInsertEjectV2Output() VmCdromInsertEjectV2Output {
	return i.ToVmCdromInsertEjectV2OutputWithContext(context.Background())
}

func (i *VmCdromInsertEjectV2) ToVmCdromInsertEjectV2OutputWithContext(ctx context.Context) VmCdromInsertEjectV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VmCdromInsertEjectV2Output)
}

// VmCdromInsertEjectV2ArrayInput is an input type that accepts VmCdromInsertEjectV2Array and VmCdromInsertEjectV2ArrayOutput values.
// You can construct a concrete instance of `VmCdromInsertEjectV2ArrayInput` via:
//
//	VmCdromInsertEjectV2Array{ VmCdromInsertEjectV2Args{...} }
type VmCdromInsertEjectV2ArrayInput interface {
	pulumi.Input

	ToVmCdromInsertEjectV2ArrayOutput() VmCdromInsertEjectV2ArrayOutput
	ToVmCdromInsertEjectV2ArrayOutputWithContext(context.Context) VmCdromInsertEjectV2ArrayOutput
}

type VmCdromInsertEjectV2Array []VmCdromInsertEjectV2Input

func (VmCdromInsertEjectV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmCdromInsertEjectV2)(nil)).Elem()
}

func (i VmCdromInsertEjectV2Array) ToVmCdromInsertEjectV2ArrayOutput() VmCdromInsertEjectV2ArrayOutput {
	return i.ToVmCdromInsertEjectV2ArrayOutputWithContext(context.Background())
}

func (i VmCdromInsertEjectV2Array) ToVmCdromInsertEjectV2ArrayOutputWithContext(ctx context.Context) VmCdromInsertEjectV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmCdromInsertEjectV2ArrayOutput)
}

// VmCdromInsertEjectV2MapInput is an input type that accepts VmCdromInsertEjectV2Map and VmCdromInsertEjectV2MapOutput values.
// You can construct a concrete instance of `VmCdromInsertEjectV2MapInput` via:
//
//	VmCdromInsertEjectV2Map{ "key": VmCdromInsertEjectV2Args{...} }
type VmCdromInsertEjectV2MapInput interface {
	pulumi.Input

	ToVmCdromInsertEjectV2MapOutput() VmCdromInsertEjectV2MapOutput
	ToVmCdromInsertEjectV2MapOutputWithContext(context.Context) VmCdromInsertEjectV2MapOutput
}

type VmCdromInsertEjectV2Map map[string]VmCdromInsertEjectV2Input

func (VmCdromInsertEjectV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmCdromInsertEjectV2)(nil)).Elem()
}

func (i VmCdromInsertEjectV2Map) ToVmCdromInsertEjectV2MapOutput() VmCdromInsertEjectV2MapOutput {
	return i.ToVmCdromInsertEjectV2MapOutputWithContext(context.Background())
}

func (i VmCdromInsertEjectV2Map) ToVmCdromInsertEjectV2MapOutputWithContext(ctx context.Context) VmCdromInsertEjectV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmCdromInsertEjectV2MapOutput)
}

type VmCdromInsertEjectV2Output struct{ *pulumi.OutputState }

func (VmCdromInsertEjectV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VmCdromInsertEjectV2)(nil)).Elem()
}

func (o VmCdromInsertEjectV2Output) ToVmCdromInsertEjectV2Output() VmCdromInsertEjectV2Output {
	return o
}

func (o VmCdromInsertEjectV2Output) ToVmCdromInsertEjectV2OutputWithContext(ctx context.Context) VmCdromInsertEjectV2Output {
	return o
}

func (o VmCdromInsertEjectV2Output) BackingInfos() VmCdromInsertEjectV2BackingInfoArrayOutput {
	return o.ApplyT(func(v *VmCdromInsertEjectV2) VmCdromInsertEjectV2BackingInfoArrayOutput { return v.BackingInfos }).(VmCdromInsertEjectV2BackingInfoArrayOutput)
}

func (o VmCdromInsertEjectV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmCdromInsertEjectV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

func (o VmCdromInsertEjectV2Output) VmExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmCdromInsertEjectV2) pulumi.StringOutput { return v.VmExtId }).(pulumi.StringOutput)
}

type VmCdromInsertEjectV2ArrayOutput struct{ *pulumi.OutputState }

func (VmCdromInsertEjectV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmCdromInsertEjectV2)(nil)).Elem()
}

func (o VmCdromInsertEjectV2ArrayOutput) ToVmCdromInsertEjectV2ArrayOutput() VmCdromInsertEjectV2ArrayOutput {
	return o
}

func (o VmCdromInsertEjectV2ArrayOutput) ToVmCdromInsertEjectV2ArrayOutputWithContext(ctx context.Context) VmCdromInsertEjectV2ArrayOutput {
	return o
}

func (o VmCdromInsertEjectV2ArrayOutput) Index(i pulumi.IntInput) VmCdromInsertEjectV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmCdromInsertEjectV2 {
		return vs[0].([]*VmCdromInsertEjectV2)[vs[1].(int)]
	}).(VmCdromInsertEjectV2Output)
}

type VmCdromInsertEjectV2MapOutput struct{ *pulumi.OutputState }

func (VmCdromInsertEjectV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmCdromInsertEjectV2)(nil)).Elem()
}

func (o VmCdromInsertEjectV2MapOutput) ToVmCdromInsertEjectV2MapOutput() VmCdromInsertEjectV2MapOutput {
	return o
}

func (o VmCdromInsertEjectV2MapOutput) ToVmCdromInsertEjectV2MapOutputWithContext(ctx context.Context) VmCdromInsertEjectV2MapOutput {
	return o
}

func (o VmCdromInsertEjectV2MapOutput) MapIndex(k pulumi.StringInput) VmCdromInsertEjectV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmCdromInsertEjectV2 {
		return vs[0].(map[string]*VmCdromInsertEjectV2)[vs[1].(string)]
	}).(VmCdromInsertEjectV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmCdromInsertEjectV2Input)(nil)).Elem(), &VmCdromInsertEjectV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmCdromInsertEjectV2ArrayInput)(nil)).Elem(), VmCdromInsertEjectV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmCdromInsertEjectV2MapInput)(nil)).Elem(), VmCdromInsertEjectV2Map{})
	pulumi.RegisterOutputType(VmCdromInsertEjectV2Output{})
	pulumi.RegisterOutputType(VmCdromInsertEjectV2ArrayOutput{})
	pulumi.RegisterOutputType(VmCdromInsertEjectV2MapOutput{})
}
