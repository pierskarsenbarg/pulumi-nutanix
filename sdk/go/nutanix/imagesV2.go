// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ImagesV2 struct {
	pulumi.CustomResourceState

	CategoryExtIds          pulumi.StringArrayOutput                 `pulumi:"categoryExtIds"`
	Checksums               ImagesV2ChecksumArrayOutput              `pulumi:"checksums"`
	ClusterLocationExtIds   pulumi.StringArrayOutput                 `pulumi:"clusterLocationExtIds"`
	CreateTime              pulumi.StringOutput                      `pulumi:"createTime"`
	Description             pulumi.StringPtrOutput                   `pulumi:"description"`
	LastUpdateTime          pulumi.StringOutput                      `pulumi:"lastUpdateTime"`
	Name                    pulumi.StringOutput                      `pulumi:"name"`
	OwnerExtId              pulumi.StringOutput                      `pulumi:"ownerExtId"`
	PlacementPolicyStatuses ImagesV2PlacementPolicyStatusArrayOutput `pulumi:"placementPolicyStatuses"`
	SizeBytes               pulumi.IntOutput                         `pulumi:"sizeBytes"`
	Sources                 ImagesV2SourceArrayOutput                `pulumi:"sources"`
	Type                    pulumi.StringOutput                      `pulumi:"type"`
}

// NewImagesV2 registers a new resource with the given unique name, arguments, and options.
func NewImagesV2(ctx *pulumi.Context,
	name string, args *ImagesV2Args, opts ...pulumi.ResourceOption) (*ImagesV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImagesV2
	err := ctx.RegisterResource("nutanix:index/imagesV2:ImagesV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImagesV2 gets an existing ImagesV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImagesV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImagesV2State, opts ...pulumi.ResourceOption) (*ImagesV2, error) {
	var resource ImagesV2
	err := ctx.ReadResource("nutanix:index/imagesV2:ImagesV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImagesV2 resources.
type imagesV2State struct {
	CategoryExtIds          []string                        `pulumi:"categoryExtIds"`
	Checksums               []ImagesV2Checksum              `pulumi:"checksums"`
	ClusterLocationExtIds   []string                        `pulumi:"clusterLocationExtIds"`
	CreateTime              *string                         `pulumi:"createTime"`
	Description             *string                         `pulumi:"description"`
	LastUpdateTime          *string                         `pulumi:"lastUpdateTime"`
	Name                    *string                         `pulumi:"name"`
	OwnerExtId              *string                         `pulumi:"ownerExtId"`
	PlacementPolicyStatuses []ImagesV2PlacementPolicyStatus `pulumi:"placementPolicyStatuses"`
	SizeBytes               *int                            `pulumi:"sizeBytes"`
	Sources                 []ImagesV2Source                `pulumi:"sources"`
	Type                    *string                         `pulumi:"type"`
}

type ImagesV2State struct {
	CategoryExtIds          pulumi.StringArrayInput
	Checksums               ImagesV2ChecksumArrayInput
	ClusterLocationExtIds   pulumi.StringArrayInput
	CreateTime              pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	LastUpdateTime          pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	OwnerExtId              pulumi.StringPtrInput
	PlacementPolicyStatuses ImagesV2PlacementPolicyStatusArrayInput
	SizeBytes               pulumi.IntPtrInput
	Sources                 ImagesV2SourceArrayInput
	Type                    pulumi.StringPtrInput
}

func (ImagesV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*imagesV2State)(nil)).Elem()
}

type imagesV2Args struct {
	CategoryExtIds        []string           `pulumi:"categoryExtIds"`
	Checksums             []ImagesV2Checksum `pulumi:"checksums"`
	ClusterLocationExtIds []string           `pulumi:"clusterLocationExtIds"`
	Description           *string            `pulumi:"description"`
	Name                  *string            `pulumi:"name"`
	Sources               []ImagesV2Source   `pulumi:"sources"`
	Type                  string             `pulumi:"type"`
}

// The set of arguments for constructing a ImagesV2 resource.
type ImagesV2Args struct {
	CategoryExtIds        pulumi.StringArrayInput
	Checksums             ImagesV2ChecksumArrayInput
	ClusterLocationExtIds pulumi.StringArrayInput
	Description           pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	Sources               ImagesV2SourceArrayInput
	Type                  pulumi.StringInput
}

func (ImagesV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*imagesV2Args)(nil)).Elem()
}

type ImagesV2Input interface {
	pulumi.Input

	ToImagesV2Output() ImagesV2Output
	ToImagesV2OutputWithContext(ctx context.Context) ImagesV2Output
}

func (*ImagesV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesV2)(nil)).Elem()
}

func (i *ImagesV2) ToImagesV2Output() ImagesV2Output {
	return i.ToImagesV2OutputWithContext(context.Background())
}

func (i *ImagesV2) ToImagesV2OutputWithContext(ctx context.Context) ImagesV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesV2Output)
}

// ImagesV2ArrayInput is an input type that accepts ImagesV2Array and ImagesV2ArrayOutput values.
// You can construct a concrete instance of `ImagesV2ArrayInput` via:
//
//	ImagesV2Array{ ImagesV2Args{...} }
type ImagesV2ArrayInput interface {
	pulumi.Input

	ToImagesV2ArrayOutput() ImagesV2ArrayOutput
	ToImagesV2ArrayOutputWithContext(context.Context) ImagesV2ArrayOutput
}

type ImagesV2Array []ImagesV2Input

func (ImagesV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagesV2)(nil)).Elem()
}

func (i ImagesV2Array) ToImagesV2ArrayOutput() ImagesV2ArrayOutput {
	return i.ToImagesV2ArrayOutputWithContext(context.Background())
}

func (i ImagesV2Array) ToImagesV2ArrayOutputWithContext(ctx context.Context) ImagesV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesV2ArrayOutput)
}

// ImagesV2MapInput is an input type that accepts ImagesV2Map and ImagesV2MapOutput values.
// You can construct a concrete instance of `ImagesV2MapInput` via:
//
//	ImagesV2Map{ "key": ImagesV2Args{...} }
type ImagesV2MapInput interface {
	pulumi.Input

	ToImagesV2MapOutput() ImagesV2MapOutput
	ToImagesV2MapOutputWithContext(context.Context) ImagesV2MapOutput
}

type ImagesV2Map map[string]ImagesV2Input

func (ImagesV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagesV2)(nil)).Elem()
}

func (i ImagesV2Map) ToImagesV2MapOutput() ImagesV2MapOutput {
	return i.ToImagesV2MapOutputWithContext(context.Background())
}

func (i ImagesV2Map) ToImagesV2MapOutputWithContext(ctx context.Context) ImagesV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesV2MapOutput)
}

type ImagesV2Output struct{ *pulumi.OutputState }

func (ImagesV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesV2)(nil)).Elem()
}

func (o ImagesV2Output) ToImagesV2Output() ImagesV2Output {
	return o
}

func (o ImagesV2Output) ToImagesV2OutputWithContext(ctx context.Context) ImagesV2Output {
	return o
}

func (o ImagesV2Output) CategoryExtIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringArrayOutput { return v.CategoryExtIds }).(pulumi.StringArrayOutput)
}

func (o ImagesV2Output) Checksums() ImagesV2ChecksumArrayOutput {
	return o.ApplyT(func(v *ImagesV2) ImagesV2ChecksumArrayOutput { return v.Checksums }).(ImagesV2ChecksumArrayOutput)
}

func (o ImagesV2Output) ClusterLocationExtIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringArrayOutput { return v.ClusterLocationExtIds }).(pulumi.StringArrayOutput)
}

func (o ImagesV2Output) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o ImagesV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ImagesV2Output) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

func (o ImagesV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImagesV2Output) OwnerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringOutput { return v.OwnerExtId }).(pulumi.StringOutput)
}

func (o ImagesV2Output) PlacementPolicyStatuses() ImagesV2PlacementPolicyStatusArrayOutput {
	return o.ApplyT(func(v *ImagesV2) ImagesV2PlacementPolicyStatusArrayOutput { return v.PlacementPolicyStatuses }).(ImagesV2PlacementPolicyStatusArrayOutput)
}

func (o ImagesV2Output) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.IntOutput { return v.SizeBytes }).(pulumi.IntOutput)
}

func (o ImagesV2Output) Sources() ImagesV2SourceArrayOutput {
	return o.ApplyT(func(v *ImagesV2) ImagesV2SourceArrayOutput { return v.Sources }).(ImagesV2SourceArrayOutput)
}

func (o ImagesV2Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagesV2) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ImagesV2ArrayOutput struct{ *pulumi.OutputState }

func (ImagesV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagesV2)(nil)).Elem()
}

func (o ImagesV2ArrayOutput) ToImagesV2ArrayOutput() ImagesV2ArrayOutput {
	return o
}

func (o ImagesV2ArrayOutput) ToImagesV2ArrayOutputWithContext(ctx context.Context) ImagesV2ArrayOutput {
	return o
}

func (o ImagesV2ArrayOutput) Index(i pulumi.IntInput) ImagesV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImagesV2 {
		return vs[0].([]*ImagesV2)[vs[1].(int)]
	}).(ImagesV2Output)
}

type ImagesV2MapOutput struct{ *pulumi.OutputState }

func (ImagesV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagesV2)(nil)).Elem()
}

func (o ImagesV2MapOutput) ToImagesV2MapOutput() ImagesV2MapOutput {
	return o
}

func (o ImagesV2MapOutput) ToImagesV2MapOutputWithContext(ctx context.Context) ImagesV2MapOutput {
	return o
}

func (o ImagesV2MapOutput) MapIndex(k pulumi.StringInput) ImagesV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImagesV2 {
		return vs[0].(map[string]*ImagesV2)[vs[1].(string)]
	}).(ImagesV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesV2Input)(nil)).Elem(), &ImagesV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesV2ArrayInput)(nil)).Elem(), ImagesV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesV2MapInput)(nil)).Elem(), ImagesV2Map{})
	pulumi.RegisterOutputType(ImagesV2Output{})
	pulumi.RegisterOutputType(ImagesV2ArrayOutput{})
	pulumi.RegisterOutputType(ImagesV2MapOutput{})
}
