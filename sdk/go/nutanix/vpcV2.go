// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource to create VPC.
type VpcV2 struct {
	pulumi.CustomResourceState

	// List of DHCP options to be configured.
	CommonDhcpOptions VpcV2CommonDhcpOptionArrayOutput `pulumi:"commonDhcpOptions"`
	// Description of the VPC.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// the vpc uuid.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// External routing domain associated with this route table
	ExternalRoutingDomainReference pulumi.StringOutput `pulumi:"externalRoutingDomainReference"`
	// List of external subnets that the VPC is attached to.
	ExternalSubnets VpcV2ExternalSubnetArrayOutput `pulumi:"externalSubnets"`
	// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
	ExternallyRoutablePrefixes VpcV2ExternallyRoutablePrefixArrayOutput `pulumi:"externallyRoutablePrefixes"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links VpcV2LinkArrayOutput `pulumi:"links"`
	// The vpc kind metadata.
	Metadatas VpcV2MetadataArrayOutput `pulumi:"metadatas"`
	// Name of the VPC.
	Name    pulumi.StringOutput    `pulumi:"name"`
	SnatIps VpcV2SnatIpArrayOutput `pulumi:"snatIps"`
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
	VpcType pulumi.StringPtrOutput `pulumi:"vpcType"`
}

// NewVpcV2 registers a new resource with the given unique name, arguments, and options.
func NewVpcV2(ctx *pulumi.Context,
	name string, args *VpcV2Args, opts ...pulumi.ResourceOption) (*VpcV2, error) {
	if args == nil {
		args = &VpcV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcV2
	err := ctx.RegisterResource("nutanix:index/vpcV2:VpcV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcV2 gets an existing VpcV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcV2State, opts ...pulumi.ResourceOption) (*VpcV2, error) {
	var resource VpcV2
	err := ctx.ReadResource("nutanix:index/vpcV2:VpcV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcV2 resources.
type vpcV2State struct {
	// List of DHCP options to be configured.
	CommonDhcpOptions []VpcV2CommonDhcpOption `pulumi:"commonDhcpOptions"`
	// Description of the VPC.
	Description *string `pulumi:"description"`
	// the vpc uuid.
	ExtId *string `pulumi:"extId"`
	// External routing domain associated with this route table
	ExternalRoutingDomainReference *string `pulumi:"externalRoutingDomainReference"`
	// List of external subnets that the VPC is attached to.
	ExternalSubnets []VpcV2ExternalSubnet `pulumi:"externalSubnets"`
	// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
	ExternallyRoutablePrefixes []VpcV2ExternallyRoutablePrefix `pulumi:"externallyRoutablePrefixes"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []VpcV2Link `pulumi:"links"`
	// The vpc kind metadata.
	Metadatas []VpcV2Metadata `pulumi:"metadatas"`
	// Name of the VPC.
	Name    *string       `pulumi:"name"`
	SnatIps []VpcV2SnatIp `pulumi:"snatIps"`
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId *string `pulumi:"tenantId"`
	// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
	VpcType *string `pulumi:"vpcType"`
}

type VpcV2State struct {
	// List of DHCP options to be configured.
	CommonDhcpOptions VpcV2CommonDhcpOptionArrayInput
	// Description of the VPC.
	Description pulumi.StringPtrInput
	// the vpc uuid.
	ExtId pulumi.StringPtrInput
	// External routing domain associated with this route table
	ExternalRoutingDomainReference pulumi.StringPtrInput
	// List of external subnets that the VPC is attached to.
	ExternalSubnets VpcV2ExternalSubnetArrayInput
	// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
	ExternallyRoutablePrefixes VpcV2ExternallyRoutablePrefixArrayInput
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links VpcV2LinkArrayInput
	// The vpc kind metadata.
	Metadatas VpcV2MetadataArrayInput
	// Name of the VPC.
	Name    pulumi.StringPtrInput
	SnatIps VpcV2SnatIpArrayInput
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringPtrInput
	// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
	VpcType pulumi.StringPtrInput
}

func (VpcV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcV2State)(nil)).Elem()
}

type vpcV2Args struct {
	// List of DHCP options to be configured.
	CommonDhcpOptions []VpcV2CommonDhcpOption `pulumi:"commonDhcpOptions"`
	// Description of the VPC.
	Description *string `pulumi:"description"`
	// External routing domain associated with this route table
	ExternalRoutingDomainReference *string `pulumi:"externalRoutingDomainReference"`
	// List of external subnets that the VPC is attached to.
	ExternalSubnets []VpcV2ExternalSubnet `pulumi:"externalSubnets"`
	// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
	ExternallyRoutablePrefixes []VpcV2ExternallyRoutablePrefix `pulumi:"externallyRoutablePrefixes"`
	// Name of the VPC.
	Name *string `pulumi:"name"`
	// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
	VpcType *string `pulumi:"vpcType"`
}

// The set of arguments for constructing a VpcV2 resource.
type VpcV2Args struct {
	// List of DHCP options to be configured.
	CommonDhcpOptions VpcV2CommonDhcpOptionArrayInput
	// Description of the VPC.
	Description pulumi.StringPtrInput
	// External routing domain associated with this route table
	ExternalRoutingDomainReference pulumi.StringPtrInput
	// List of external subnets that the VPC is attached to.
	ExternalSubnets VpcV2ExternalSubnetArrayInput
	// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
	ExternallyRoutablePrefixes VpcV2ExternallyRoutablePrefixArrayInput
	// Name of the VPC.
	Name pulumi.StringPtrInput
	// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
	VpcType pulumi.StringPtrInput
}

func (VpcV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcV2Args)(nil)).Elem()
}

type VpcV2Input interface {
	pulumi.Input

	ToVpcV2Output() VpcV2Output
	ToVpcV2OutputWithContext(ctx context.Context) VpcV2Output
}

func (*VpcV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcV2)(nil)).Elem()
}

func (i *VpcV2) ToVpcV2Output() VpcV2Output {
	return i.ToVpcV2OutputWithContext(context.Background())
}

func (i *VpcV2) ToVpcV2OutputWithContext(ctx context.Context) VpcV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VpcV2Output)
}

// VpcV2ArrayInput is an input type that accepts VpcV2Array and VpcV2ArrayOutput values.
// You can construct a concrete instance of `VpcV2ArrayInput` via:
//
//	VpcV2Array{ VpcV2Args{...} }
type VpcV2ArrayInput interface {
	pulumi.Input

	ToVpcV2ArrayOutput() VpcV2ArrayOutput
	ToVpcV2ArrayOutputWithContext(context.Context) VpcV2ArrayOutput
}

type VpcV2Array []VpcV2Input

func (VpcV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcV2)(nil)).Elem()
}

func (i VpcV2Array) ToVpcV2ArrayOutput() VpcV2ArrayOutput {
	return i.ToVpcV2ArrayOutputWithContext(context.Background())
}

func (i VpcV2Array) ToVpcV2ArrayOutputWithContext(ctx context.Context) VpcV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcV2ArrayOutput)
}

// VpcV2MapInput is an input type that accepts VpcV2Map and VpcV2MapOutput values.
// You can construct a concrete instance of `VpcV2MapInput` via:
//
//	VpcV2Map{ "key": VpcV2Args{...} }
type VpcV2MapInput interface {
	pulumi.Input

	ToVpcV2MapOutput() VpcV2MapOutput
	ToVpcV2MapOutputWithContext(context.Context) VpcV2MapOutput
}

type VpcV2Map map[string]VpcV2Input

func (VpcV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcV2)(nil)).Elem()
}

func (i VpcV2Map) ToVpcV2MapOutput() VpcV2MapOutput {
	return i.ToVpcV2MapOutputWithContext(context.Background())
}

func (i VpcV2Map) ToVpcV2MapOutputWithContext(ctx context.Context) VpcV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcV2MapOutput)
}

type VpcV2Output struct{ *pulumi.OutputState }

func (VpcV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcV2)(nil)).Elem()
}

func (o VpcV2Output) ToVpcV2Output() VpcV2Output {
	return o
}

func (o VpcV2Output) ToVpcV2OutputWithContext(ctx context.Context) VpcV2Output {
	return o
}

// List of DHCP options to be configured.
func (o VpcV2Output) CommonDhcpOptions() VpcV2CommonDhcpOptionArrayOutput {
	return o.ApplyT(func(v *VpcV2) VpcV2CommonDhcpOptionArrayOutput { return v.CommonDhcpOptions }).(VpcV2CommonDhcpOptionArrayOutput)
}

// Description of the VPC.
func (o VpcV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// the vpc uuid.
func (o VpcV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// External routing domain associated with this route table
func (o VpcV2Output) ExternalRoutingDomainReference() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcV2) pulumi.StringOutput { return v.ExternalRoutingDomainReference }).(pulumi.StringOutput)
}

// List of external subnets that the VPC is attached to.
func (o VpcV2Output) ExternalSubnets() VpcV2ExternalSubnetArrayOutput {
	return o.ApplyT(func(v *VpcV2) VpcV2ExternalSubnetArrayOutput { return v.ExternalSubnets }).(VpcV2ExternalSubnetArrayOutput)
}

// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
func (o VpcV2Output) ExternallyRoutablePrefixes() VpcV2ExternallyRoutablePrefixArrayOutput {
	return o.ApplyT(func(v *VpcV2) VpcV2ExternallyRoutablePrefixArrayOutput { return v.ExternallyRoutablePrefixes }).(VpcV2ExternallyRoutablePrefixArrayOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o VpcV2Output) Links() VpcV2LinkArrayOutput {
	return o.ApplyT(func(v *VpcV2) VpcV2LinkArrayOutput { return v.Links }).(VpcV2LinkArrayOutput)
}

// The vpc kind metadata.
func (o VpcV2Output) Metadatas() VpcV2MetadataArrayOutput {
	return o.ApplyT(func(v *VpcV2) VpcV2MetadataArrayOutput { return v.Metadatas }).(VpcV2MetadataArrayOutput)
}

// Name of the VPC.
func (o VpcV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcV2Output) SnatIps() VpcV2SnatIpArrayOutput {
	return o.ApplyT(func(v *VpcV2) VpcV2SnatIpArrayOutput { return v.SnatIps }).(VpcV2SnatIpArrayOutput)
}

// A globally unique identifier that represents the tenant that owns this entity.
func (o VpcV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
func (o VpcV2Output) VpcType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcV2) pulumi.StringPtrOutput { return v.VpcType }).(pulumi.StringPtrOutput)
}

type VpcV2ArrayOutput struct{ *pulumi.OutputState }

func (VpcV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcV2)(nil)).Elem()
}

func (o VpcV2ArrayOutput) ToVpcV2ArrayOutput() VpcV2ArrayOutput {
	return o
}

func (o VpcV2ArrayOutput) ToVpcV2ArrayOutputWithContext(ctx context.Context) VpcV2ArrayOutput {
	return o
}

func (o VpcV2ArrayOutput) Index(i pulumi.IntInput) VpcV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcV2 {
		return vs[0].([]*VpcV2)[vs[1].(int)]
	}).(VpcV2Output)
}

type VpcV2MapOutput struct{ *pulumi.OutputState }

func (VpcV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcV2)(nil)).Elem()
}

func (o VpcV2MapOutput) ToVpcV2MapOutput() VpcV2MapOutput {
	return o
}

func (o VpcV2MapOutput) ToVpcV2MapOutputWithContext(ctx context.Context) VpcV2MapOutput {
	return o
}

func (o VpcV2MapOutput) MapIndex(k pulumi.StringInput) VpcV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcV2 {
		return vs[0].(map[string]*VpcV2)[vs[1].(string)]
	}).(VpcV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcV2Input)(nil)).Elem(), &VpcV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcV2ArrayInput)(nil)).Elem(), VpcV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcV2MapInput)(nil)).Elem(), VpcV2Map{})
	pulumi.RegisterOutputType(VpcV2Output{})
	pulumi.RegisterOutputType(VpcV2ArrayOutput{})
	pulumi.RegisterOutputType(VpcV2MapOutput{})
}
