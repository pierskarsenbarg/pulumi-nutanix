// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a profile in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			profile1, err := nutanix.LookupNdbProfile(ctx, &nutanix.LookupNdbProfileArgs{
//				ProfileType: pulumi.StringRef("Network"),
//				ProfileName: pulumi.StringRef("TEST_NETWORK_PROFILE"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("profile", profile1)
//			return nil
//		})
//	}
//
// ```
func LookupNdbProfile(ctx *pulumi.Context, args *LookupNdbProfileArgs, opts ...pulumi.InvokeOption) (*LookupNdbProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNdbProfileResult
	err := ctx.Invoke("nutanix:index/getNdbProfile:getNdbProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbProfile.
type LookupNdbProfileArgs struct {
	// Database engine. For eg. postgres_database
	Engine *string `pulumi:"engine"`
	// Profile ID for query
	ProfileId *string `pulumi:"profileId"`
	// Profile Name for query
	ProfileName *string `pulumi:"profileName"`
	// Profile type. Types: Software, Compute, Network and Database_Parameter
	ProfileType *string `pulumi:"profileType"`
}

// A collection of values returned by getNdbProfile.
type LookupNdbProfileResult struct {
	// - associated databases
	AssocDatabases []string `pulumi:"assocDatabases"`
	// - associated DB servers
	AssocDbServers []string `pulumi:"assocDbServers"`
	// - list of clusters availability
	ClusterAvailabilities []GetNdbProfileClusterAvailability `pulumi:"clusterAvailabilities"`
	// - database version
	DbVersion string `pulumi:"dbVersion"`
	// - description of profile
	Description string  `pulumi:"description"`
	Engine      *string `pulumi:"engine"`
	// - database engine type
	EngineType string `pulumi:"engineType"`
	// - id of profile
	Id string `pulumi:"id"`
	// - latest version for engine software
	LatestVersion string `pulumi:"latestVersion"`
	// - ID of latest version for engine software
	LatestVersionId string `pulumi:"latestVersionId"`
	// - profile name
	Name string `pulumi:"name"`
	// - era cluster ID
	NxClusterId string `pulumi:"nxClusterId"`
	// - owner name
	Owner       string  `pulumi:"owner"`
	ProfileId   *string `pulumi:"profileId"`
	ProfileName *string `pulumi:"profileName"`
	ProfileType *string `pulumi:"profileType"`
	// - status of profile
	Status string `pulumi:"status"`
	// - if system profile or not
	SystemProfile bool `pulumi:"systemProfile"`
	// - topology
	Topology string `pulumi:"topology"`
	Type     string `pulumi:"type"`
	// - profile's different version config
	Versions []GetNdbProfileVersion `pulumi:"versions"`
}

func LookupNdbProfileOutput(ctx *pulumi.Context, args LookupNdbProfileOutputArgs, opts ...pulumi.InvokeOption) LookupNdbProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNdbProfileResultOutput, error) {
			args := v.(LookupNdbProfileArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNdbProfileResult
			secret, err := ctx.InvokePackageRaw("nutanix:index/getNdbProfile:getNdbProfile", args, &rv, "", opts...)
			if err != nil {
				return LookupNdbProfileResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNdbProfileResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNdbProfileResultOutput), nil
			}
			return output, nil
		}).(LookupNdbProfileResultOutput)
}

// A collection of arguments for invoking getNdbProfile.
type LookupNdbProfileOutputArgs struct {
	// Database engine. For eg. postgres_database
	Engine pulumi.StringPtrInput `pulumi:"engine"`
	// Profile ID for query
	ProfileId pulumi.StringPtrInput `pulumi:"profileId"`
	// Profile Name for query
	ProfileName pulumi.StringPtrInput `pulumi:"profileName"`
	// Profile type. Types: Software, Compute, Network and Database_Parameter
	ProfileType pulumi.StringPtrInput `pulumi:"profileType"`
}

func (LookupNdbProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbProfileArgs)(nil)).Elem()
}

// A collection of values returned by getNdbProfile.
type LookupNdbProfileResultOutput struct{ *pulumi.OutputState }

func (LookupNdbProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbProfileResult)(nil)).Elem()
}

func (o LookupNdbProfileResultOutput) ToLookupNdbProfileResultOutput() LookupNdbProfileResultOutput {
	return o
}

func (o LookupNdbProfileResultOutput) ToLookupNdbProfileResultOutputWithContext(ctx context.Context) LookupNdbProfileResultOutput {
	return o
}

// - associated databases
func (o LookupNdbProfileResultOutput) AssocDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) []string { return v.AssocDatabases }).(pulumi.StringArrayOutput)
}

// - associated DB servers
func (o LookupNdbProfileResultOutput) AssocDbServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) []string { return v.AssocDbServers }).(pulumi.StringArrayOutput)
}

// - list of clusters availability
func (o LookupNdbProfileResultOutput) ClusterAvailabilities() GetNdbProfileClusterAvailabilityArrayOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) []GetNdbProfileClusterAvailability { return v.ClusterAvailabilities }).(GetNdbProfileClusterAvailabilityArrayOutput)
}

// - database version
func (o LookupNdbProfileResultOutput) DbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.DbVersion }).(pulumi.StringOutput)
}

// - description of profile
func (o LookupNdbProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupNdbProfileResultOutput) Engine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) *string { return v.Engine }).(pulumi.StringPtrOutput)
}

// - database engine type
func (o LookupNdbProfileResultOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.EngineType }).(pulumi.StringOutput)
}

// - id of profile
func (o LookupNdbProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// - latest version for engine software
func (o LookupNdbProfileResultOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// - ID of latest version for engine software
func (o LookupNdbProfileResultOutput) LatestVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.LatestVersionId }).(pulumi.StringOutput)
}

// - profile name
func (o LookupNdbProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

// - era cluster ID
func (o LookupNdbProfileResultOutput) NxClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.NxClusterId }).(pulumi.StringOutput)
}

// - owner name
func (o LookupNdbProfileResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.Owner }).(pulumi.StringOutput)
}

func (o LookupNdbProfileResultOutput) ProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) *string { return v.ProfileId }).(pulumi.StringPtrOutput)
}

func (o LookupNdbProfileResultOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

func (o LookupNdbProfileResultOutput) ProfileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) *string { return v.ProfileType }).(pulumi.StringPtrOutput)
}

// - status of profile
func (o LookupNdbProfileResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.Status }).(pulumi.StringOutput)
}

// - if system profile or not
func (o LookupNdbProfileResultOutput) SystemProfile() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) bool { return v.SystemProfile }).(pulumi.BoolOutput)
}

// - topology
func (o LookupNdbProfileResultOutput) Topology() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.Topology }).(pulumi.StringOutput)
}

func (o LookupNdbProfileResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) string { return v.Type }).(pulumi.StringOutput)
}

// - profile's different version config
func (o LookupNdbProfileResultOutput) Versions() GetNdbProfileVersionArrayOutput {
	return o.ApplyT(func(v LookupNdbProfileResult) []GetNdbProfileVersion { return v.Versions }).(GetNdbProfileVersionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNdbProfileResultOutput{})
}
