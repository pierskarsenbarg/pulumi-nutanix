// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to Creates a new Volume Disk.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create new volume group disk  and attached it to the previous volume group
//			_, err := nutanix.NewVolumeGroupDiskV2(ctx, "example", &nutanix.VolumeGroupDiskV2Args{
//				VolumeGroupExtId: pulumi.String("cf7de8b9-88ed-477d-a602-c34ab7174c01"),
//				Index:            pulumi.Int(1),
//				Description:      pulumi.String("create volume disk example"),
//				DiskSizeBytes:    pulumi.Int(5368709120),
//				DiskDataSourceReferences: nutanix.VolumeGroupDiskV2DiskDataSourceReferenceArray{
//					&nutanix.VolumeGroupDiskV2DiskDataSourceReferenceArgs{
//						Name:       pulumi.String("disk1"),
//						ExtId:      pulumi.String("1d92110d-26b5-46c0-8c93-20b8171373e0"),
//						EntityType: pulumi.String("STORAGE_CONTAINER"),
//						Uris: pulumi.StringArray{
//							pulumi.String("uri1"),
//							pulumi.String("uri2"),
//						},
//					},
//				},
//				DiskStorageFeatures: nutanix.VolumeGroupDiskV2DiskStorageFeatureArray{
//					&nutanix.VolumeGroupDiskV2DiskStorageFeatureArgs{
//						FlashModes: nutanix.VolumeGroupDiskV2DiskStorageFeatureFlashModeArray{
//							&nutanix.VolumeGroupDiskV2DiskStorageFeatureFlashModeArgs{
//								IsEnabled: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VolumeGroupDiskV2 struct {
	pulumi.CustomResourceState

	// - Volume Disk description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// -(Required) Disk Data Source Reference.
	DiskDataSourceReferences VolumeGroupDiskV2DiskDataSourceReferenceArrayOutput `pulumi:"diskDataSourceReferences"`
	// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
	DiskSizeBytes pulumi.IntOutput `pulumi:"diskSizeBytes"`
	// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
	DiskStorageFeatures VolumeGroupDiskV2DiskStorageFeatureArrayOutput `pulumi:"diskStorageFeatures"`
	// - A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// - Index of the disk in a Volume Group. This field is optional and immutable.
	Index pulumi.IntOutput `pulumi:"index"`
	// The external identifier of the volume group.
	VolumeGroupExtId pulumi.StringOutput `pulumi:"volumeGroupExtId"`
}

// NewVolumeGroupDiskV2 registers a new resource with the given unique name, arguments, and options.
func NewVolumeGroupDiskV2(ctx *pulumi.Context,
	name string, args *VolumeGroupDiskV2Args, opts ...pulumi.ResourceOption) (*VolumeGroupDiskV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskDataSourceReferences == nil {
		return nil, errors.New("invalid value for required argument 'DiskDataSourceReferences'")
	}
	if args.DiskSizeBytes == nil {
		return nil, errors.New("invalid value for required argument 'DiskSizeBytes'")
	}
	if args.VolumeGroupExtId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeGroupExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeGroupDiskV2
	err := ctx.RegisterResource("nutanix:index/volumeGroupDiskV2:VolumeGroupDiskV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeGroupDiskV2 gets an existing VolumeGroupDiskV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeGroupDiskV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeGroupDiskV2State, opts ...pulumi.ResourceOption) (*VolumeGroupDiskV2, error) {
	var resource VolumeGroupDiskV2
	err := ctx.ReadResource("nutanix:index/volumeGroupDiskV2:VolumeGroupDiskV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeGroupDiskV2 resources.
type volumeGroupDiskV2State struct {
	// - Volume Disk description.
	Description *string `pulumi:"description"`
	// -(Required) Disk Data Source Reference.
	DiskDataSourceReferences []VolumeGroupDiskV2DiskDataSourceReference `pulumi:"diskDataSourceReferences"`
	// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
	DiskSizeBytes *int `pulumi:"diskSizeBytes"`
	// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
	DiskStorageFeatures []VolumeGroupDiskV2DiskStorageFeature `pulumi:"diskStorageFeatures"`
	// - A globally unique identifier of an instance that is suitable for external consumption.
	ExtId *string `pulumi:"extId"`
	// - Index of the disk in a Volume Group. This field is optional and immutable.
	Index *int `pulumi:"index"`
	// The external identifier of the volume group.
	VolumeGroupExtId *string `pulumi:"volumeGroupExtId"`
}

type VolumeGroupDiskV2State struct {
	// - Volume Disk description.
	Description pulumi.StringPtrInput
	// -(Required) Disk Data Source Reference.
	DiskDataSourceReferences VolumeGroupDiskV2DiskDataSourceReferenceArrayInput
	// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
	DiskSizeBytes pulumi.IntPtrInput
	// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
	DiskStorageFeatures VolumeGroupDiskV2DiskStorageFeatureArrayInput
	// - A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringPtrInput
	// - Index of the disk in a Volume Group. This field is optional and immutable.
	Index pulumi.IntPtrInput
	// The external identifier of the volume group.
	VolumeGroupExtId pulumi.StringPtrInput
}

func (VolumeGroupDiskV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupDiskV2State)(nil)).Elem()
}

type volumeGroupDiskV2Args struct {
	// - Volume Disk description.
	Description *string `pulumi:"description"`
	// -(Required) Disk Data Source Reference.
	DiskDataSourceReferences []VolumeGroupDiskV2DiskDataSourceReference `pulumi:"diskDataSourceReferences"`
	// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
	DiskSizeBytes int `pulumi:"diskSizeBytes"`
	// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
	DiskStorageFeatures []VolumeGroupDiskV2DiskStorageFeature `pulumi:"diskStorageFeatures"`
	// - Index of the disk in a Volume Group. This field is optional and immutable.
	Index *int `pulumi:"index"`
	// The external identifier of the volume group.
	VolumeGroupExtId string `pulumi:"volumeGroupExtId"`
}

// The set of arguments for constructing a VolumeGroupDiskV2 resource.
type VolumeGroupDiskV2Args struct {
	// - Volume Disk description.
	Description pulumi.StringPtrInput
	// -(Required) Disk Data Source Reference.
	DiskDataSourceReferences VolumeGroupDiskV2DiskDataSourceReferenceArrayInput
	// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
	DiskSizeBytes pulumi.IntInput
	// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
	DiskStorageFeatures VolumeGroupDiskV2DiskStorageFeatureArrayInput
	// - Index of the disk in a Volume Group. This field is optional and immutable.
	Index pulumi.IntPtrInput
	// The external identifier of the volume group.
	VolumeGroupExtId pulumi.StringInput
}

func (VolumeGroupDiskV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupDiskV2Args)(nil)).Elem()
}

type VolumeGroupDiskV2Input interface {
	pulumi.Input

	ToVolumeGroupDiskV2Output() VolumeGroupDiskV2Output
	ToVolumeGroupDiskV2OutputWithContext(ctx context.Context) VolumeGroupDiskV2Output
}

func (*VolumeGroupDiskV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupDiskV2)(nil)).Elem()
}

func (i *VolumeGroupDiskV2) ToVolumeGroupDiskV2Output() VolumeGroupDiskV2Output {
	return i.ToVolumeGroupDiskV2OutputWithContext(context.Background())
}

func (i *VolumeGroupDiskV2) ToVolumeGroupDiskV2OutputWithContext(ctx context.Context) VolumeGroupDiskV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupDiskV2Output)
}

// VolumeGroupDiskV2ArrayInput is an input type that accepts VolumeGroupDiskV2Array and VolumeGroupDiskV2ArrayOutput values.
// You can construct a concrete instance of `VolumeGroupDiskV2ArrayInput` via:
//
//	VolumeGroupDiskV2Array{ VolumeGroupDiskV2Args{...} }
type VolumeGroupDiskV2ArrayInput interface {
	pulumi.Input

	ToVolumeGroupDiskV2ArrayOutput() VolumeGroupDiskV2ArrayOutput
	ToVolumeGroupDiskV2ArrayOutputWithContext(context.Context) VolumeGroupDiskV2ArrayOutput
}

type VolumeGroupDiskV2Array []VolumeGroupDiskV2Input

func (VolumeGroupDiskV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupDiskV2)(nil)).Elem()
}

func (i VolumeGroupDiskV2Array) ToVolumeGroupDiskV2ArrayOutput() VolumeGroupDiskV2ArrayOutput {
	return i.ToVolumeGroupDiskV2ArrayOutputWithContext(context.Background())
}

func (i VolumeGroupDiskV2Array) ToVolumeGroupDiskV2ArrayOutputWithContext(ctx context.Context) VolumeGroupDiskV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupDiskV2ArrayOutput)
}

// VolumeGroupDiskV2MapInput is an input type that accepts VolumeGroupDiskV2Map and VolumeGroupDiskV2MapOutput values.
// You can construct a concrete instance of `VolumeGroupDiskV2MapInput` via:
//
//	VolumeGroupDiskV2Map{ "key": VolumeGroupDiskV2Args{...} }
type VolumeGroupDiskV2MapInput interface {
	pulumi.Input

	ToVolumeGroupDiskV2MapOutput() VolumeGroupDiskV2MapOutput
	ToVolumeGroupDiskV2MapOutputWithContext(context.Context) VolumeGroupDiskV2MapOutput
}

type VolumeGroupDiskV2Map map[string]VolumeGroupDiskV2Input

func (VolumeGroupDiskV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupDiskV2)(nil)).Elem()
}

func (i VolumeGroupDiskV2Map) ToVolumeGroupDiskV2MapOutput() VolumeGroupDiskV2MapOutput {
	return i.ToVolumeGroupDiskV2MapOutputWithContext(context.Background())
}

func (i VolumeGroupDiskV2Map) ToVolumeGroupDiskV2MapOutputWithContext(ctx context.Context) VolumeGroupDiskV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupDiskV2MapOutput)
}

type VolumeGroupDiskV2Output struct{ *pulumi.OutputState }

func (VolumeGroupDiskV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupDiskV2)(nil)).Elem()
}

func (o VolumeGroupDiskV2Output) ToVolumeGroupDiskV2Output() VolumeGroupDiskV2Output {
	return o
}

func (o VolumeGroupDiskV2Output) ToVolumeGroupDiskV2OutputWithContext(ctx context.Context) VolumeGroupDiskV2Output {
	return o
}

// - Volume Disk description.
func (o VolumeGroupDiskV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupDiskV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// -(Required) Disk Data Source Reference.
func (o VolumeGroupDiskV2Output) DiskDataSourceReferences() VolumeGroupDiskV2DiskDataSourceReferenceArrayOutput {
	return o.ApplyT(func(v *VolumeGroupDiskV2) VolumeGroupDiskV2DiskDataSourceReferenceArrayOutput {
		return v.DiskDataSourceReferences
	}).(VolumeGroupDiskV2DiskDataSourceReferenceArrayOutput)
}

// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
func (o VolumeGroupDiskV2Output) DiskSizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *VolumeGroupDiskV2) pulumi.IntOutput { return v.DiskSizeBytes }).(pulumi.IntOutput)
}

// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
func (o VolumeGroupDiskV2Output) DiskStorageFeatures() VolumeGroupDiskV2DiskStorageFeatureArrayOutput {
	return o.ApplyT(func(v *VolumeGroupDiskV2) VolumeGroupDiskV2DiskStorageFeatureArrayOutput {
		return v.DiskStorageFeatures
	}).(VolumeGroupDiskV2DiskStorageFeatureArrayOutput)
}

// - A globally unique identifier of an instance that is suitable for external consumption.
func (o VolumeGroupDiskV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupDiskV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// - Index of the disk in a Volume Group. This field is optional and immutable.
func (o VolumeGroupDiskV2Output) Index() pulumi.IntOutput {
	return o.ApplyT(func(v *VolumeGroupDiskV2) pulumi.IntOutput { return v.Index }).(pulumi.IntOutput)
}

// The external identifier of the volume group.
func (o VolumeGroupDiskV2Output) VolumeGroupExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupDiskV2) pulumi.StringOutput { return v.VolumeGroupExtId }).(pulumi.StringOutput)
}

type VolumeGroupDiskV2ArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupDiskV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupDiskV2)(nil)).Elem()
}

func (o VolumeGroupDiskV2ArrayOutput) ToVolumeGroupDiskV2ArrayOutput() VolumeGroupDiskV2ArrayOutput {
	return o
}

func (o VolumeGroupDiskV2ArrayOutput) ToVolumeGroupDiskV2ArrayOutputWithContext(ctx context.Context) VolumeGroupDiskV2ArrayOutput {
	return o
}

func (o VolumeGroupDiskV2ArrayOutput) Index(i pulumi.IntInput) VolumeGroupDiskV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeGroupDiskV2 {
		return vs[0].([]*VolumeGroupDiskV2)[vs[1].(int)]
	}).(VolumeGroupDiskV2Output)
}

type VolumeGroupDiskV2MapOutput struct{ *pulumi.OutputState }

func (VolumeGroupDiskV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupDiskV2)(nil)).Elem()
}

func (o VolumeGroupDiskV2MapOutput) ToVolumeGroupDiskV2MapOutput() VolumeGroupDiskV2MapOutput {
	return o
}

func (o VolumeGroupDiskV2MapOutput) ToVolumeGroupDiskV2MapOutputWithContext(ctx context.Context) VolumeGroupDiskV2MapOutput {
	return o
}

func (o VolumeGroupDiskV2MapOutput) MapIndex(k pulumi.StringInput) VolumeGroupDiskV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeGroupDiskV2 {
		return vs[0].(map[string]*VolumeGroupDiskV2)[vs[1].(string)]
	}).(VolumeGroupDiskV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupDiskV2Input)(nil)).Elem(), &VolumeGroupDiskV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupDiskV2ArrayInput)(nil)).Elem(), VolumeGroupDiskV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupDiskV2MapInput)(nil)).Elem(), VolumeGroupDiskV2Map{})
	pulumi.RegisterOutputType(VolumeGroupDiskV2Output{})
	pulumi.RegisterOutputType(VolumeGroupDiskV2ArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupDiskV2MapOutput{})
}
