// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Nutanix Category value resource to Create a category value.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewCategoryKey(ctx, "test-category-key", &nutanix.CategoryKeyArgs{
//				Description: pulumi.String("App Support Category Key"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nutanix.NewCategoryValue(ctx, "test", &nutanix.CategoryValueArgs{
//				Description: pulumi.String("Test Category Value"),
//				Value:       pulumi.String("test-value"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CategoryValue struct {
	pulumi.CustomResourceState

	// (Optional) The version of the API.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// - (Optional) A description for category value.
	Description pulumi.StringOutput `pulumi:"description"`
	// - (Required) The categoryKey name for the category value.
	Name pulumi.StringOutput `pulumi:"name"`
	// - Specifying whether its a system defined category.
	SystemDefined pulumi.BoolOutput `pulumi:"systemDefined"`
	// The value for the category value.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewCategoryValue registers a new resource with the given unique name, arguments, and options.
func NewCategoryValue(ctx *pulumi.Context,
	name string, args *CategoryValueArgs, opts ...pulumi.ResourceOption) (*CategoryValue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CategoryValue
	err := ctx.RegisterResource("nutanix:index/categoryValue:CategoryValue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCategoryValue gets an existing CategoryValue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCategoryValue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CategoryValueState, opts ...pulumi.ResourceOption) (*CategoryValue, error) {
	var resource CategoryValue
	err := ctx.ReadResource("nutanix:index/categoryValue:CategoryValue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CategoryValue resources.
type categoryValueState struct {
	// (Optional) The version of the API.
	ApiVersion *string `pulumi:"apiVersion"`
	// - (Optional) A description for category value.
	Description *string `pulumi:"description"`
	// - (Required) The categoryKey name for the category value.
	Name *string `pulumi:"name"`
	// - Specifying whether its a system defined category.
	SystemDefined *bool `pulumi:"systemDefined"`
	// The value for the category value.
	Value *string `pulumi:"value"`
}

type CategoryValueState struct {
	// (Optional) The version of the API.
	ApiVersion pulumi.StringPtrInput
	// - (Optional) A description for category value.
	Description pulumi.StringPtrInput
	// - (Required) The categoryKey name for the category value.
	Name pulumi.StringPtrInput
	// - Specifying whether its a system defined category.
	SystemDefined pulumi.BoolPtrInput
	// The value for the category value.
	Value pulumi.StringPtrInput
}

func (CategoryValueState) ElementType() reflect.Type {
	return reflect.TypeOf((*categoryValueState)(nil)).Elem()
}

type categoryValueArgs struct {
	// - (Optional) A description for category value.
	Description *string `pulumi:"description"`
	// - (Required) The categoryKey name for the category value.
	Name *string `pulumi:"name"`
	// The value for the category value.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a CategoryValue resource.
type CategoryValueArgs struct {
	// - (Optional) A description for category value.
	Description pulumi.StringPtrInput
	// - (Required) The categoryKey name for the category value.
	Name pulumi.StringPtrInput
	// The value for the category value.
	Value pulumi.StringInput
}

func (CategoryValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*categoryValueArgs)(nil)).Elem()
}

type CategoryValueInput interface {
	pulumi.Input

	ToCategoryValueOutput() CategoryValueOutput
	ToCategoryValueOutputWithContext(ctx context.Context) CategoryValueOutput
}

func (*CategoryValue) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryValue)(nil)).Elem()
}

func (i *CategoryValue) ToCategoryValueOutput() CategoryValueOutput {
	return i.ToCategoryValueOutputWithContext(context.Background())
}

func (i *CategoryValue) ToCategoryValueOutputWithContext(ctx context.Context) CategoryValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryValueOutput)
}

func (i *CategoryValue) ToOutput(ctx context.Context) pulumix.Output[*CategoryValue] {
	return pulumix.Output[*CategoryValue]{
		OutputState: i.ToCategoryValueOutputWithContext(ctx).OutputState,
	}
}

// CategoryValueArrayInput is an input type that accepts CategoryValueArray and CategoryValueArrayOutput values.
// You can construct a concrete instance of `CategoryValueArrayInput` via:
//
//	CategoryValueArray{ CategoryValueArgs{...} }
type CategoryValueArrayInput interface {
	pulumi.Input

	ToCategoryValueArrayOutput() CategoryValueArrayOutput
	ToCategoryValueArrayOutputWithContext(context.Context) CategoryValueArrayOutput
}

type CategoryValueArray []CategoryValueInput

func (CategoryValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CategoryValue)(nil)).Elem()
}

func (i CategoryValueArray) ToCategoryValueArrayOutput() CategoryValueArrayOutput {
	return i.ToCategoryValueArrayOutputWithContext(context.Background())
}

func (i CategoryValueArray) ToCategoryValueArrayOutputWithContext(ctx context.Context) CategoryValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryValueArrayOutput)
}

func (i CategoryValueArray) ToOutput(ctx context.Context) pulumix.Output[[]*CategoryValue] {
	return pulumix.Output[[]*CategoryValue]{
		OutputState: i.ToCategoryValueArrayOutputWithContext(ctx).OutputState,
	}
}

// CategoryValueMapInput is an input type that accepts CategoryValueMap and CategoryValueMapOutput values.
// You can construct a concrete instance of `CategoryValueMapInput` via:
//
//	CategoryValueMap{ "key": CategoryValueArgs{...} }
type CategoryValueMapInput interface {
	pulumi.Input

	ToCategoryValueMapOutput() CategoryValueMapOutput
	ToCategoryValueMapOutputWithContext(context.Context) CategoryValueMapOutput
}

type CategoryValueMap map[string]CategoryValueInput

func (CategoryValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CategoryValue)(nil)).Elem()
}

func (i CategoryValueMap) ToCategoryValueMapOutput() CategoryValueMapOutput {
	return i.ToCategoryValueMapOutputWithContext(context.Background())
}

func (i CategoryValueMap) ToCategoryValueMapOutputWithContext(ctx context.Context) CategoryValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryValueMapOutput)
}

func (i CategoryValueMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CategoryValue] {
	return pulumix.Output[map[string]*CategoryValue]{
		OutputState: i.ToCategoryValueMapOutputWithContext(ctx).OutputState,
	}
}

type CategoryValueOutput struct{ *pulumi.OutputState }

func (CategoryValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryValue)(nil)).Elem()
}

func (o CategoryValueOutput) ToCategoryValueOutput() CategoryValueOutput {
	return o
}

func (o CategoryValueOutput) ToCategoryValueOutputWithContext(ctx context.Context) CategoryValueOutput {
	return o
}

func (o CategoryValueOutput) ToOutput(ctx context.Context) pulumix.Output[*CategoryValue] {
	return pulumix.Output[*CategoryValue]{
		OutputState: o.OutputState,
	}
}

// (Optional) The version of the API.
func (o CategoryValueOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryValue) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// - (Optional) A description for category value.
func (o CategoryValueOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryValue) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// - (Required) The categoryKey name for the category value.
func (o CategoryValueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryValue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - Specifying whether its a system defined category.
func (o CategoryValueOutput) SystemDefined() pulumi.BoolOutput {
	return o.ApplyT(func(v *CategoryValue) pulumi.BoolOutput { return v.SystemDefined }).(pulumi.BoolOutput)
}

// The value for the category value.
func (o CategoryValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryValue) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type CategoryValueArrayOutput struct{ *pulumi.OutputState }

func (CategoryValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CategoryValue)(nil)).Elem()
}

func (o CategoryValueArrayOutput) ToCategoryValueArrayOutput() CategoryValueArrayOutput {
	return o
}

func (o CategoryValueArrayOutput) ToCategoryValueArrayOutputWithContext(ctx context.Context) CategoryValueArrayOutput {
	return o
}

func (o CategoryValueArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CategoryValue] {
	return pulumix.Output[[]*CategoryValue]{
		OutputState: o.OutputState,
	}
}

func (o CategoryValueArrayOutput) Index(i pulumi.IntInput) CategoryValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CategoryValue {
		return vs[0].([]*CategoryValue)[vs[1].(int)]
	}).(CategoryValueOutput)
}

type CategoryValueMapOutput struct{ *pulumi.OutputState }

func (CategoryValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CategoryValue)(nil)).Elem()
}

func (o CategoryValueMapOutput) ToCategoryValueMapOutput() CategoryValueMapOutput {
	return o
}

func (o CategoryValueMapOutput) ToCategoryValueMapOutputWithContext(ctx context.Context) CategoryValueMapOutput {
	return o
}

func (o CategoryValueMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CategoryValue] {
	return pulumix.Output[map[string]*CategoryValue]{
		OutputState: o.OutputState,
	}
}

func (o CategoryValueMapOutput) MapIndex(k pulumi.StringInput) CategoryValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CategoryValue {
		return vs[0].(map[string]*CategoryValue)[vs[1].(string)]
	}).(CategoryValueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryValueInput)(nil)).Elem(), &CategoryValue{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryValueArrayInput)(nil)).Elem(), CategoryValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryValueMapInput)(nil)).Elem(), CategoryValueMap{})
	pulumi.RegisterOutputType(CategoryValueOutput{})
	pulumi.RegisterOutputType(CategoryValueArrayOutput{})
	pulumi.RegisterOutputType(CategoryValueMapOutput{})
}
