// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FoundationIpmiConfig struct {
	pulumi.CustomResourceState

	// - (Required) List of blocks.
	Blocks FoundationIpmiConfigBlockArrayOutput `pulumi:"blocks"`
	// - (Required) IPMI gateway.
	IpmiGateway pulumi.StringOutput `pulumi:"ipmiGateway"`
	// - (Required) IPMI netmask.
	IpmiNetmask pulumi.StringOutput `pulumi:"ipmiNetmask"`
	// - (Required) IPMI password.
	IpmiPassword pulumi.StringOutput `pulumi:"ipmiPassword"`
	// - (Required) IPMI username.
	IpmiUser pulumi.StringOutput `pulumi:"ipmiUser"`
}

// NewFoundationIpmiConfig registers a new resource with the given unique name, arguments, and options.
func NewFoundationIpmiConfig(ctx *pulumi.Context,
	name string, args *FoundationIpmiConfigArgs, opts ...pulumi.ResourceOption) (*FoundationIpmiConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Blocks == nil {
		return nil, errors.New("invalid value for required argument 'Blocks'")
	}
	if args.IpmiGateway == nil {
		return nil, errors.New("invalid value for required argument 'IpmiGateway'")
	}
	if args.IpmiNetmask == nil {
		return nil, errors.New("invalid value for required argument 'IpmiNetmask'")
	}
	if args.IpmiPassword == nil {
		return nil, errors.New("invalid value for required argument 'IpmiPassword'")
	}
	if args.IpmiUser == nil {
		return nil, errors.New("invalid value for required argument 'IpmiUser'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FoundationIpmiConfig
	err := ctx.RegisterResource("nutanix:index/foundationIpmiConfig:FoundationIpmiConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFoundationIpmiConfig gets an existing FoundationIpmiConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFoundationIpmiConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FoundationIpmiConfigState, opts ...pulumi.ResourceOption) (*FoundationIpmiConfig, error) {
	var resource FoundationIpmiConfig
	err := ctx.ReadResource("nutanix:index/foundationIpmiConfig:FoundationIpmiConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FoundationIpmiConfig resources.
type foundationIpmiConfigState struct {
	// - (Required) List of blocks.
	Blocks []FoundationIpmiConfigBlock `pulumi:"blocks"`
	// - (Required) IPMI gateway.
	IpmiGateway *string `pulumi:"ipmiGateway"`
	// - (Required) IPMI netmask.
	IpmiNetmask *string `pulumi:"ipmiNetmask"`
	// - (Required) IPMI password.
	IpmiPassword *string `pulumi:"ipmiPassword"`
	// - (Required) IPMI username.
	IpmiUser *string `pulumi:"ipmiUser"`
}

type FoundationIpmiConfigState struct {
	// - (Required) List of blocks.
	Blocks FoundationIpmiConfigBlockArrayInput
	// - (Required) IPMI gateway.
	IpmiGateway pulumi.StringPtrInput
	// - (Required) IPMI netmask.
	IpmiNetmask pulumi.StringPtrInput
	// - (Required) IPMI password.
	IpmiPassword pulumi.StringPtrInput
	// - (Required) IPMI username.
	IpmiUser pulumi.StringPtrInput
}

func (FoundationIpmiConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationIpmiConfigState)(nil)).Elem()
}

type foundationIpmiConfigArgs struct {
	// - (Required) List of blocks.
	Blocks []FoundationIpmiConfigBlock `pulumi:"blocks"`
	// - (Required) IPMI gateway.
	IpmiGateway string `pulumi:"ipmiGateway"`
	// - (Required) IPMI netmask.
	IpmiNetmask string `pulumi:"ipmiNetmask"`
	// - (Required) IPMI password.
	IpmiPassword string `pulumi:"ipmiPassword"`
	// - (Required) IPMI username.
	IpmiUser string `pulumi:"ipmiUser"`
}

// The set of arguments for constructing a FoundationIpmiConfig resource.
type FoundationIpmiConfigArgs struct {
	// - (Required) List of blocks.
	Blocks FoundationIpmiConfigBlockArrayInput
	// - (Required) IPMI gateway.
	IpmiGateway pulumi.StringInput
	// - (Required) IPMI netmask.
	IpmiNetmask pulumi.StringInput
	// - (Required) IPMI password.
	IpmiPassword pulumi.StringInput
	// - (Required) IPMI username.
	IpmiUser pulumi.StringInput
}

func (FoundationIpmiConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationIpmiConfigArgs)(nil)).Elem()
}

type FoundationIpmiConfigInput interface {
	pulumi.Input

	ToFoundationIpmiConfigOutput() FoundationIpmiConfigOutput
	ToFoundationIpmiConfigOutputWithContext(ctx context.Context) FoundationIpmiConfigOutput
}

func (*FoundationIpmiConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationIpmiConfig)(nil)).Elem()
}

func (i *FoundationIpmiConfig) ToFoundationIpmiConfigOutput() FoundationIpmiConfigOutput {
	return i.ToFoundationIpmiConfigOutputWithContext(context.Background())
}

func (i *FoundationIpmiConfig) ToFoundationIpmiConfigOutputWithContext(ctx context.Context) FoundationIpmiConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationIpmiConfigOutput)
}

// FoundationIpmiConfigArrayInput is an input type that accepts FoundationIpmiConfigArray and FoundationIpmiConfigArrayOutput values.
// You can construct a concrete instance of `FoundationIpmiConfigArrayInput` via:
//
//	FoundationIpmiConfigArray{ FoundationIpmiConfigArgs{...} }
type FoundationIpmiConfigArrayInput interface {
	pulumi.Input

	ToFoundationIpmiConfigArrayOutput() FoundationIpmiConfigArrayOutput
	ToFoundationIpmiConfigArrayOutputWithContext(context.Context) FoundationIpmiConfigArrayOutput
}

type FoundationIpmiConfigArray []FoundationIpmiConfigInput

func (FoundationIpmiConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationIpmiConfig)(nil)).Elem()
}

func (i FoundationIpmiConfigArray) ToFoundationIpmiConfigArrayOutput() FoundationIpmiConfigArrayOutput {
	return i.ToFoundationIpmiConfigArrayOutputWithContext(context.Background())
}

func (i FoundationIpmiConfigArray) ToFoundationIpmiConfigArrayOutputWithContext(ctx context.Context) FoundationIpmiConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationIpmiConfigArrayOutput)
}

// FoundationIpmiConfigMapInput is an input type that accepts FoundationIpmiConfigMap and FoundationIpmiConfigMapOutput values.
// You can construct a concrete instance of `FoundationIpmiConfigMapInput` via:
//
//	FoundationIpmiConfigMap{ "key": FoundationIpmiConfigArgs{...} }
type FoundationIpmiConfigMapInput interface {
	pulumi.Input

	ToFoundationIpmiConfigMapOutput() FoundationIpmiConfigMapOutput
	ToFoundationIpmiConfigMapOutputWithContext(context.Context) FoundationIpmiConfigMapOutput
}

type FoundationIpmiConfigMap map[string]FoundationIpmiConfigInput

func (FoundationIpmiConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationIpmiConfig)(nil)).Elem()
}

func (i FoundationIpmiConfigMap) ToFoundationIpmiConfigMapOutput() FoundationIpmiConfigMapOutput {
	return i.ToFoundationIpmiConfigMapOutputWithContext(context.Background())
}

func (i FoundationIpmiConfigMap) ToFoundationIpmiConfigMapOutputWithContext(ctx context.Context) FoundationIpmiConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationIpmiConfigMapOutput)
}

type FoundationIpmiConfigOutput struct{ *pulumi.OutputState }

func (FoundationIpmiConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationIpmiConfig)(nil)).Elem()
}

func (o FoundationIpmiConfigOutput) ToFoundationIpmiConfigOutput() FoundationIpmiConfigOutput {
	return o
}

func (o FoundationIpmiConfigOutput) ToFoundationIpmiConfigOutputWithContext(ctx context.Context) FoundationIpmiConfigOutput {
	return o
}

// - (Required) List of blocks.
func (o FoundationIpmiConfigOutput) Blocks() FoundationIpmiConfigBlockArrayOutput {
	return o.ApplyT(func(v *FoundationIpmiConfig) FoundationIpmiConfigBlockArrayOutput { return v.Blocks }).(FoundationIpmiConfigBlockArrayOutput)
}

// - (Required) IPMI gateway.
func (o FoundationIpmiConfigOutput) IpmiGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationIpmiConfig) pulumi.StringOutput { return v.IpmiGateway }).(pulumi.StringOutput)
}

// - (Required) IPMI netmask.
func (o FoundationIpmiConfigOutput) IpmiNetmask() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationIpmiConfig) pulumi.StringOutput { return v.IpmiNetmask }).(pulumi.StringOutput)
}

// - (Required) IPMI password.
func (o FoundationIpmiConfigOutput) IpmiPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationIpmiConfig) pulumi.StringOutput { return v.IpmiPassword }).(pulumi.StringOutput)
}

// - (Required) IPMI username.
func (o FoundationIpmiConfigOutput) IpmiUser() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationIpmiConfig) pulumi.StringOutput { return v.IpmiUser }).(pulumi.StringOutput)
}

type FoundationIpmiConfigArrayOutput struct{ *pulumi.OutputState }

func (FoundationIpmiConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationIpmiConfig)(nil)).Elem()
}

func (o FoundationIpmiConfigArrayOutput) ToFoundationIpmiConfigArrayOutput() FoundationIpmiConfigArrayOutput {
	return o
}

func (o FoundationIpmiConfigArrayOutput) ToFoundationIpmiConfigArrayOutputWithContext(ctx context.Context) FoundationIpmiConfigArrayOutput {
	return o
}

func (o FoundationIpmiConfigArrayOutput) Index(i pulumi.IntInput) FoundationIpmiConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FoundationIpmiConfig {
		return vs[0].([]*FoundationIpmiConfig)[vs[1].(int)]
	}).(FoundationIpmiConfigOutput)
}

type FoundationIpmiConfigMapOutput struct{ *pulumi.OutputState }

func (FoundationIpmiConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationIpmiConfig)(nil)).Elem()
}

func (o FoundationIpmiConfigMapOutput) ToFoundationIpmiConfigMapOutput() FoundationIpmiConfigMapOutput {
	return o
}

func (o FoundationIpmiConfigMapOutput) ToFoundationIpmiConfigMapOutputWithContext(ctx context.Context) FoundationIpmiConfigMapOutput {
	return o
}

func (o FoundationIpmiConfigMapOutput) MapIndex(k pulumi.StringInput) FoundationIpmiConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FoundationIpmiConfig {
		return vs[0].(map[string]*FoundationIpmiConfig)[vs[1].(string)]
	}).(FoundationIpmiConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationIpmiConfigInput)(nil)).Elem(), &FoundationIpmiConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationIpmiConfigArrayInput)(nil)).Elem(), FoundationIpmiConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationIpmiConfigMapInput)(nil)).Elem(), FoundationIpmiConfigMap{})
	pulumi.RegisterOutputType(FoundationIpmiConfigOutput{})
	pulumi.RegisterOutputType(FoundationIpmiConfigArrayOutput{})
	pulumi.RegisterOutputType(FoundationIpmiConfigMapOutput{})
}
