// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all snapshots present in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetNdbSnapshots(ctx, &nutanix.GetNdbSnapshotsArgs{
//				Filters: []nutanix.GetNdbSnapshotsFilter{
//					{
//						TimeMachineId: pulumi.StringRef("{{ time_machine_id }}"),
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Attribute Reference
//
// * `snapshots`: List of snapshots
//
// ### snapshots
//
// * `id`: name of snapshot
// * `description`: description of snapshot
// * `properties`: properties
// * `ownerId`: owner id
// * `dateCreated`: created date
// * `dateModified`: modified date
// * `properties`: properties
// * `tags`: tags
// * `snapshotUuid`: snapshot uuid
// * `nxClusterId`: nx cluster id
// * `protectionDomainId`: protection domain
// * `parentSnapshotId`: parent snapshot id
// * `databaseNodeId`: database node id
// * `appInfoVersion`: App info version
// * `status`: status
// * `type`: type
// * `applicableTypes`: Applicable types
// * `snapshotTimestamp`: snapshot timeStamp
// * `metadata`: metadata of snapshot
// * `softwareSnapshotId`: software snapshot id
// * `softwareDatabaseSnapshot`: software database snapshot
// * `dbserverStorageMetadataVersion`: dbserver storage metadata version
// * `santisedFromSnapshotId`: sanitized  snapshot id
// * `timezone`: timezone
// * `processed`: processed
// * `databaseSnapshot`: database snapshot
// * `fromTimestamp`: from timestamp
// * `toTimestamp`: to timestamp
// * `dbserverId`: dbserver id
// * `dbserverName`: dbserver name
// * `dbserverIp`:dbserver ip
// * `replicatedSnapshots`: replicated snapshots
// * `softwareSnapshot`: software snapshot
// * `santisedSnapshots`:santised snapshots
// * `snapshotFamily`: snapshot family
// * `snapshotTimestampDate`: snapshot timestamp date
// * `lcmConfig`: LCM config
// * `parentSnapshot`: parent snapshot
// * `snapshotSize`: snapshot size
//
// See detailed information in [NDB Snapshots](https://www.nutanix.dev/api_references/ndb/#/d0b89ff892448-get-list-of-all-snapshots).
func GetNdbSnapshots(ctx *pulumi.Context, args *GetNdbSnapshotsArgs, opts ...pulumi.InvokeOption) (*GetNdbSnapshotsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNdbSnapshotsResult
	err := ctx.Invoke("nutanix:index/getNdbSnapshots:getNdbSnapshots", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbSnapshots.
type GetNdbSnapshotsArgs struct {
	// filters help to fetch the snapshots based on input
	Filters []GetNdbSnapshotsFilter `pulumi:"filters"`
}

// A collection of values returned by getNdbSnapshots.
type GetNdbSnapshotsResult struct {
	Filters []GetNdbSnapshotsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id        string                    `pulumi:"id"`
	Snapshots []GetNdbSnapshotsSnapshot `pulumi:"snapshots"`
}

func GetNdbSnapshotsOutput(ctx *pulumi.Context, args GetNdbSnapshotsOutputArgs, opts ...pulumi.InvokeOption) GetNdbSnapshotsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNdbSnapshotsResultOutput, error) {
			args := v.(GetNdbSnapshotsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetNdbSnapshotsResult
			secret, err := ctx.InvokePackageRaw("nutanix:index/getNdbSnapshots:getNdbSnapshots", args, &rv, "", opts...)
			if err != nil {
				return GetNdbSnapshotsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetNdbSnapshotsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetNdbSnapshotsResultOutput), nil
			}
			return output, nil
		}).(GetNdbSnapshotsResultOutput)
}

// A collection of arguments for invoking getNdbSnapshots.
type GetNdbSnapshotsOutputArgs struct {
	// filters help to fetch the snapshots based on input
	Filters GetNdbSnapshotsFilterArrayInput `pulumi:"filters"`
}

func (GetNdbSnapshotsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbSnapshotsArgs)(nil)).Elem()
}

// A collection of values returned by getNdbSnapshots.
type GetNdbSnapshotsResultOutput struct{ *pulumi.OutputState }

func (GetNdbSnapshotsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbSnapshotsResult)(nil)).Elem()
}

func (o GetNdbSnapshotsResultOutput) ToGetNdbSnapshotsResultOutput() GetNdbSnapshotsResultOutput {
	return o
}

func (o GetNdbSnapshotsResultOutput) ToGetNdbSnapshotsResultOutputWithContext(ctx context.Context) GetNdbSnapshotsResultOutput {
	return o
}

func (o GetNdbSnapshotsResultOutput) Filters() GetNdbSnapshotsFilterArrayOutput {
	return o.ApplyT(func(v GetNdbSnapshotsResult) []GetNdbSnapshotsFilter { return v.Filters }).(GetNdbSnapshotsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNdbSnapshotsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbSnapshotsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNdbSnapshotsResultOutput) Snapshots() GetNdbSnapshotsSnapshotArrayOutput {
	return o.ApplyT(func(v GetNdbSnapshotsResult) []GetNdbSnapshotsSnapshot { return v.Snapshots }).(GetNdbSnapshotsSnapshotArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNdbSnapshotsResultOutput{})
}
