// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create an image placement policy using the provided request body. Name, placement_type, imageEntityFilter and source are mandatory fields to create an policy.
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewImagePlacementPolicyV2(ctx, "example", &nutanix.ImagePlacementPolicyV2Args{
//				ClusterEntityFilters: nutanix.ImagePlacementPolicyV2ClusterEntityFilterArray{
//					&nutanix.ImagePlacementPolicyV2ClusterEntityFilterArgs{
//						CategoryExtIds: pulumi.StringArray{
//							pulumi.String("ab520e1d-4950-1db1-917f-a9e2ea35b8e3"),
//						},
//						Type: pulumi.String("CATEGORIES_MATCH_ALL"),
//					},
//				},
//				Description: pulumi.String("%[2]s"),
//				ImageEntityFilters: nutanix.ImagePlacementPolicyV2ImageEntityFilterArray{
//					&nutanix.ImagePlacementPolicyV2ImageEntityFilterArgs{
//						CategoryExtIds: pulumi.StringArray{
//							pulumi.String("ab520e1d-4950-1db1-917f-a9e2ea35b8e3"),
//						},
//						Type: pulumi.String("CATEGORIES_MATCH_ALL"),
//					},
//				},
//				PlacementType: pulumi.String("SOFT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ImagePlacementPolicyV2 struct {
	pulumi.CustomResourceState

	// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// Category-based entity filter.
	ClusterEntityFilters ImagePlacementPolicyV2ClusterEntityFilterArrayOutput `pulumi:"clusterEntityFilters"`
	CreateTime           pulumi.StringOutput                                  `pulumi:"createTime"`
	// Description of the image placement policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
	EnforcementState pulumi.StringOutput `pulumi:"enforcementState"`
	ExtId            pulumi.StringOutput `pulumi:"extId"`
	// Category-based entity filter.
	ImageEntityFilters ImagePlacementPolicyV2ImageEntityFilterArrayOutput `pulumi:"imageEntityFilters"`
	LastUpdateTime     pulumi.StringOutput                                `pulumi:"lastUpdateTime"`
	// Name of the image placement policy.
	Name       pulumi.StringOutput `pulumi:"name"`
	OwnerExtId pulumi.StringOutput `pulumi:"ownerExtId"`
	// Type of the image placement policy. Valid values "HARD", "SOFT"
	PlacementType            pulumi.StringOutput  `pulumi:"placementType"`
	ShouldCancelRunningTasks pulumi.BoolPtrOutput `pulumi:"shouldCancelRunningTasks"`
}

// NewImagePlacementPolicyV2 registers a new resource with the given unique name, arguments, and options.
func NewImagePlacementPolicyV2(ctx *pulumi.Context,
	name string, args *ImagePlacementPolicyV2Args, opts ...pulumi.ResourceOption) (*ImagePlacementPolicyV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterEntityFilters == nil {
		return nil, errors.New("invalid value for required argument 'ClusterEntityFilters'")
	}
	if args.ImageEntityFilters == nil {
		return nil, errors.New("invalid value for required argument 'ImageEntityFilters'")
	}
	if args.PlacementType == nil {
		return nil, errors.New("invalid value for required argument 'PlacementType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImagePlacementPolicyV2
	err := ctx.RegisterResource("nutanix:index/imagePlacementPolicyV2:ImagePlacementPolicyV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImagePlacementPolicyV2 gets an existing ImagePlacementPolicyV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImagePlacementPolicyV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImagePlacementPolicyV2State, opts ...pulumi.ResourceOption) (*ImagePlacementPolicyV2, error) {
	var resource ImagePlacementPolicyV2
	err := ctx.ReadResource("nutanix:index/imagePlacementPolicyV2:ImagePlacementPolicyV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImagePlacementPolicyV2 resources.
type imagePlacementPolicyV2State struct {
	// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
	Action *string `pulumi:"action"`
	// Category-based entity filter.
	ClusterEntityFilters []ImagePlacementPolicyV2ClusterEntityFilter `pulumi:"clusterEntityFilters"`
	CreateTime           *string                                     `pulumi:"createTime"`
	// Description of the image placement policy.
	Description *string `pulumi:"description"`
	// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
	EnforcementState *string `pulumi:"enforcementState"`
	ExtId            *string `pulumi:"extId"`
	// Category-based entity filter.
	ImageEntityFilters []ImagePlacementPolicyV2ImageEntityFilter `pulumi:"imageEntityFilters"`
	LastUpdateTime     *string                                   `pulumi:"lastUpdateTime"`
	// Name of the image placement policy.
	Name       *string `pulumi:"name"`
	OwnerExtId *string `pulumi:"ownerExtId"`
	// Type of the image placement policy. Valid values "HARD", "SOFT"
	PlacementType            *string `pulumi:"placementType"`
	ShouldCancelRunningTasks *bool   `pulumi:"shouldCancelRunningTasks"`
}

type ImagePlacementPolicyV2State struct {
	// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
	Action pulumi.StringPtrInput
	// Category-based entity filter.
	ClusterEntityFilters ImagePlacementPolicyV2ClusterEntityFilterArrayInput
	CreateTime           pulumi.StringPtrInput
	// Description of the image placement policy.
	Description pulumi.StringPtrInput
	// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
	EnforcementState pulumi.StringPtrInput
	ExtId            pulumi.StringPtrInput
	// Category-based entity filter.
	ImageEntityFilters ImagePlacementPolicyV2ImageEntityFilterArrayInput
	LastUpdateTime     pulumi.StringPtrInput
	// Name of the image placement policy.
	Name       pulumi.StringPtrInput
	OwnerExtId pulumi.StringPtrInput
	// Type of the image placement policy. Valid values "HARD", "SOFT"
	PlacementType            pulumi.StringPtrInput
	ShouldCancelRunningTasks pulumi.BoolPtrInput
}

func (ImagePlacementPolicyV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePlacementPolicyV2State)(nil)).Elem()
}

type imagePlacementPolicyV2Args struct {
	// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
	Action *string `pulumi:"action"`
	// Category-based entity filter.
	ClusterEntityFilters []ImagePlacementPolicyV2ClusterEntityFilter `pulumi:"clusterEntityFilters"`
	// Description of the image placement policy.
	Description *string `pulumi:"description"`
	// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
	EnforcementState *string `pulumi:"enforcementState"`
	ExtId            *string `pulumi:"extId"`
	// Category-based entity filter.
	ImageEntityFilters []ImagePlacementPolicyV2ImageEntityFilter `pulumi:"imageEntityFilters"`
	// Name of the image placement policy.
	Name *string `pulumi:"name"`
	// Type of the image placement policy. Valid values "HARD", "SOFT"
	PlacementType            string `pulumi:"placementType"`
	ShouldCancelRunningTasks *bool  `pulumi:"shouldCancelRunningTasks"`
}

// The set of arguments for constructing a ImagePlacementPolicyV2 resource.
type ImagePlacementPolicyV2Args struct {
	// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
	Action pulumi.StringPtrInput
	// Category-based entity filter.
	ClusterEntityFilters ImagePlacementPolicyV2ClusterEntityFilterArrayInput
	// Description of the image placement policy.
	Description pulumi.StringPtrInput
	// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
	EnforcementState pulumi.StringPtrInput
	ExtId            pulumi.StringPtrInput
	// Category-based entity filter.
	ImageEntityFilters ImagePlacementPolicyV2ImageEntityFilterArrayInput
	// Name of the image placement policy.
	Name pulumi.StringPtrInput
	// Type of the image placement policy. Valid values "HARD", "SOFT"
	PlacementType            pulumi.StringInput
	ShouldCancelRunningTasks pulumi.BoolPtrInput
}

func (ImagePlacementPolicyV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePlacementPolicyV2Args)(nil)).Elem()
}

type ImagePlacementPolicyV2Input interface {
	pulumi.Input

	ToImagePlacementPolicyV2Output() ImagePlacementPolicyV2Output
	ToImagePlacementPolicyV2OutputWithContext(ctx context.Context) ImagePlacementPolicyV2Output
}

func (*ImagePlacementPolicyV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePlacementPolicyV2)(nil)).Elem()
}

func (i *ImagePlacementPolicyV2) ToImagePlacementPolicyV2Output() ImagePlacementPolicyV2Output {
	return i.ToImagePlacementPolicyV2OutputWithContext(context.Background())
}

func (i *ImagePlacementPolicyV2) ToImagePlacementPolicyV2OutputWithContext(ctx context.Context) ImagePlacementPolicyV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePlacementPolicyV2Output)
}

// ImagePlacementPolicyV2ArrayInput is an input type that accepts ImagePlacementPolicyV2Array and ImagePlacementPolicyV2ArrayOutput values.
// You can construct a concrete instance of `ImagePlacementPolicyV2ArrayInput` via:
//
//	ImagePlacementPolicyV2Array{ ImagePlacementPolicyV2Args{...} }
type ImagePlacementPolicyV2ArrayInput interface {
	pulumi.Input

	ToImagePlacementPolicyV2ArrayOutput() ImagePlacementPolicyV2ArrayOutput
	ToImagePlacementPolicyV2ArrayOutputWithContext(context.Context) ImagePlacementPolicyV2ArrayOutput
}

type ImagePlacementPolicyV2Array []ImagePlacementPolicyV2Input

func (ImagePlacementPolicyV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePlacementPolicyV2)(nil)).Elem()
}

func (i ImagePlacementPolicyV2Array) ToImagePlacementPolicyV2ArrayOutput() ImagePlacementPolicyV2ArrayOutput {
	return i.ToImagePlacementPolicyV2ArrayOutputWithContext(context.Background())
}

func (i ImagePlacementPolicyV2Array) ToImagePlacementPolicyV2ArrayOutputWithContext(ctx context.Context) ImagePlacementPolicyV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePlacementPolicyV2ArrayOutput)
}

// ImagePlacementPolicyV2MapInput is an input type that accepts ImagePlacementPolicyV2Map and ImagePlacementPolicyV2MapOutput values.
// You can construct a concrete instance of `ImagePlacementPolicyV2MapInput` via:
//
//	ImagePlacementPolicyV2Map{ "key": ImagePlacementPolicyV2Args{...} }
type ImagePlacementPolicyV2MapInput interface {
	pulumi.Input

	ToImagePlacementPolicyV2MapOutput() ImagePlacementPolicyV2MapOutput
	ToImagePlacementPolicyV2MapOutputWithContext(context.Context) ImagePlacementPolicyV2MapOutput
}

type ImagePlacementPolicyV2Map map[string]ImagePlacementPolicyV2Input

func (ImagePlacementPolicyV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePlacementPolicyV2)(nil)).Elem()
}

func (i ImagePlacementPolicyV2Map) ToImagePlacementPolicyV2MapOutput() ImagePlacementPolicyV2MapOutput {
	return i.ToImagePlacementPolicyV2MapOutputWithContext(context.Background())
}

func (i ImagePlacementPolicyV2Map) ToImagePlacementPolicyV2MapOutputWithContext(ctx context.Context) ImagePlacementPolicyV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePlacementPolicyV2MapOutput)
}

type ImagePlacementPolicyV2Output struct{ *pulumi.OutputState }

func (ImagePlacementPolicyV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePlacementPolicyV2)(nil)).Elem()
}

func (o ImagePlacementPolicyV2Output) ToImagePlacementPolicyV2Output() ImagePlacementPolicyV2Output {
	return o
}

func (o ImagePlacementPolicyV2Output) ToImagePlacementPolicyV2OutputWithContext(ctx context.Context) ImagePlacementPolicyV2Output {
	return o
}

// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
func (o ImagePlacementPolicyV2Output) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// Category-based entity filter.
func (o ImagePlacementPolicyV2Output) ClusterEntityFilters() ImagePlacementPolicyV2ClusterEntityFilterArrayOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) ImagePlacementPolicyV2ClusterEntityFilterArrayOutput {
		return v.ClusterEntityFilters
	}).(ImagePlacementPolicyV2ClusterEntityFilterArrayOutput)
}

func (o ImagePlacementPolicyV2Output) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the image placement policy.
func (o ImagePlacementPolicyV2Output) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
func (o ImagePlacementPolicyV2Output) EnforcementState() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.EnforcementState }).(pulumi.StringOutput)
}

func (o ImagePlacementPolicyV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Category-based entity filter.
func (o ImagePlacementPolicyV2Output) ImageEntityFilters() ImagePlacementPolicyV2ImageEntityFilterArrayOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) ImagePlacementPolicyV2ImageEntityFilterArrayOutput {
		return v.ImageEntityFilters
	}).(ImagePlacementPolicyV2ImageEntityFilterArrayOutput)
}

func (o ImagePlacementPolicyV2Output) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// Name of the image placement policy.
func (o ImagePlacementPolicyV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImagePlacementPolicyV2Output) OwnerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.OwnerExtId }).(pulumi.StringOutput)
}

// Type of the image placement policy. Valid values "HARD", "SOFT"
func (o ImagePlacementPolicyV2Output) PlacementType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.StringOutput { return v.PlacementType }).(pulumi.StringOutput)
}

func (o ImagePlacementPolicyV2Output) ShouldCancelRunningTasks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImagePlacementPolicyV2) pulumi.BoolPtrOutput { return v.ShouldCancelRunningTasks }).(pulumi.BoolPtrOutput)
}

type ImagePlacementPolicyV2ArrayOutput struct{ *pulumi.OutputState }

func (ImagePlacementPolicyV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePlacementPolicyV2)(nil)).Elem()
}

func (o ImagePlacementPolicyV2ArrayOutput) ToImagePlacementPolicyV2ArrayOutput() ImagePlacementPolicyV2ArrayOutput {
	return o
}

func (o ImagePlacementPolicyV2ArrayOutput) ToImagePlacementPolicyV2ArrayOutputWithContext(ctx context.Context) ImagePlacementPolicyV2ArrayOutput {
	return o
}

func (o ImagePlacementPolicyV2ArrayOutput) Index(i pulumi.IntInput) ImagePlacementPolicyV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImagePlacementPolicyV2 {
		return vs[0].([]*ImagePlacementPolicyV2)[vs[1].(int)]
	}).(ImagePlacementPolicyV2Output)
}

type ImagePlacementPolicyV2MapOutput struct{ *pulumi.OutputState }

func (ImagePlacementPolicyV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePlacementPolicyV2)(nil)).Elem()
}

func (o ImagePlacementPolicyV2MapOutput) ToImagePlacementPolicyV2MapOutput() ImagePlacementPolicyV2MapOutput {
	return o
}

func (o ImagePlacementPolicyV2MapOutput) ToImagePlacementPolicyV2MapOutputWithContext(ctx context.Context) ImagePlacementPolicyV2MapOutput {
	return o
}

func (o ImagePlacementPolicyV2MapOutput) MapIndex(k pulumi.StringInput) ImagePlacementPolicyV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImagePlacementPolicyV2 {
		return vs[0].(map[string]*ImagePlacementPolicyV2)[vs[1].(string)]
	}).(ImagePlacementPolicyV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePlacementPolicyV2Input)(nil)).Elem(), &ImagePlacementPolicyV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePlacementPolicyV2ArrayInput)(nil)).Elem(), ImagePlacementPolicyV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePlacementPolicyV2MapInput)(nil)).Elem(), ImagePlacementPolicyV2Map{})
	pulumi.RegisterOutputType(ImagePlacementPolicyV2Output{})
	pulumi.RegisterOutputType(ImagePlacementPolicyV2ArrayOutput{})
	pulumi.RegisterOutputType(ImagePlacementPolicyV2MapOutput{})
}
