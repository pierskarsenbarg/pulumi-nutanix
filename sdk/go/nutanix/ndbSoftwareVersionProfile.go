// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create software profile versions based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbSoftwareVersionProfile(ctx, "name", &nutanix.NdbSoftwareVersionProfileArgs{
//				EngineType:  pulumi.String("postgres_database"),
//				ProfileId:   pulumi.Any(resource.Nutanix_ndb_profile.Name12.Id),
//				Description: pulumi.String("made  by tf"),
//				PostgresDatabases: nutanix.NdbSoftwareVersionProfilePostgresDatabaseArray{
//					&nutanix.NdbSoftwareVersionProfilePostgresDatabaseArgs{
//						SourceDbserverId: pulumi.String("{{ DB_Server_ID }}"),
//					},
//				},
//				AvailableClusterIds: pulumi.StringArray{
//					pulumi.String("{{ cluster_ids }}"),
//				},
//				Status: pulumi.String("published"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbSoftwareVersionProfile struct {
	pulumi.CustomResourceState

	// available cluster ids
	AvailableClusterIds pulumi.StringArrayOutput `pulumi:"availableClusterIds"`
	// Db version of software profile
	DbVersion pulumi.StringOutput `pulumi:"dbVersion"`
	// deprecated or not
	Deprecated pulumi.BoolOutput `pulumi:"deprecated"`
	// description of profile
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// engine type of profile
	EngineType pulumi.StringOutput `pulumi:"engineType"`
	// Name of profile
	Name pulumi.StringOutput `pulumi:"name"`
	// owner  of profile
	Owner pulumi.StringOutput `pulumi:"owner"`
	// postgres database info
	PostgresDatabases NdbSoftwareVersionProfilePostgresDatabaseArrayOutput `pulumi:"postgresDatabases"`
	// profile id
	ProfileId pulumi.StringOutput `pulumi:"profileId"`
	// properties of software profile
	Properties NdbSoftwareVersionProfilePropertyArrayOutput `pulumi:"properties"`
	// properties map of profile
	PropertiesMap pulumi.StringMapOutput `pulumi:"propertiesMap"`
	// Published or not
	Published pulumi.BoolOutput `pulumi:"published"`
	// status of profile. Allowed Values are "deprecated", "published", "unpublished"
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// system profile or not.
	SystemProfile pulumi.BoolOutput `pulumi:"systemProfile"`
	// topology of software profile
	Topology pulumi.StringOutput `pulumi:"topology"`
	// Version of software profile
	Version pulumi.StringOutput `pulumi:"version"`
	// version cluster association
	VersionClusterAssociations NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput `pulumi:"versionClusterAssociations"`
}

// NewNdbSoftwareVersionProfile registers a new resource with the given unique name, arguments, and options.
func NewNdbSoftwareVersionProfile(ctx *pulumi.Context,
	name string, args *NdbSoftwareVersionProfileArgs, opts ...pulumi.ResourceOption) (*NdbSoftwareVersionProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbSoftwareVersionProfile
	err := ctx.RegisterResource("nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbSoftwareVersionProfile gets an existing NdbSoftwareVersionProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbSoftwareVersionProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbSoftwareVersionProfileState, opts ...pulumi.ResourceOption) (*NdbSoftwareVersionProfile, error) {
	var resource NdbSoftwareVersionProfile
	err := ctx.ReadResource("nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbSoftwareVersionProfile resources.
type ndbSoftwareVersionProfileState struct {
	// available cluster ids
	AvailableClusterIds []string `pulumi:"availableClusterIds"`
	// Db version of software profile
	DbVersion *string `pulumi:"dbVersion"`
	// deprecated or not
	Deprecated *bool `pulumi:"deprecated"`
	// description of profile
	Description *string `pulumi:"description"`
	// engine type of profile
	EngineType *string `pulumi:"engineType"`
	// Name of profile
	Name *string `pulumi:"name"`
	// owner  of profile
	Owner *string `pulumi:"owner"`
	// postgres database info
	PostgresDatabases []NdbSoftwareVersionProfilePostgresDatabase `pulumi:"postgresDatabases"`
	// profile id
	ProfileId *string `pulumi:"profileId"`
	// properties of software profile
	Properties []NdbSoftwareVersionProfileProperty `pulumi:"properties"`
	// properties map of profile
	PropertiesMap map[string]string `pulumi:"propertiesMap"`
	// Published or not
	Published *bool `pulumi:"published"`
	// status of profile. Allowed Values are "deprecated", "published", "unpublished"
	Status *string `pulumi:"status"`
	// system profile or not.
	SystemProfile *bool `pulumi:"systemProfile"`
	// topology of software profile
	Topology *string `pulumi:"topology"`
	// Version of software profile
	Version *string `pulumi:"version"`
	// version cluster association
	VersionClusterAssociations []NdbSoftwareVersionProfileVersionClusterAssociation `pulumi:"versionClusterAssociations"`
}

type NdbSoftwareVersionProfileState struct {
	// available cluster ids
	AvailableClusterIds pulumi.StringArrayInput
	// Db version of software profile
	DbVersion pulumi.StringPtrInput
	// deprecated or not
	Deprecated pulumi.BoolPtrInput
	// description of profile
	Description pulumi.StringPtrInput
	// engine type of profile
	EngineType pulumi.StringPtrInput
	// Name of profile
	Name pulumi.StringPtrInput
	// owner  of profile
	Owner pulumi.StringPtrInput
	// postgres database info
	PostgresDatabases NdbSoftwareVersionProfilePostgresDatabaseArrayInput
	// profile id
	ProfileId pulumi.StringPtrInput
	// properties of software profile
	Properties NdbSoftwareVersionProfilePropertyArrayInput
	// properties map of profile
	PropertiesMap pulumi.StringMapInput
	// Published or not
	Published pulumi.BoolPtrInput
	// status of profile. Allowed Values are "deprecated", "published", "unpublished"
	Status pulumi.StringPtrInput
	// system profile or not.
	SystemProfile pulumi.BoolPtrInput
	// topology of software profile
	Topology pulumi.StringPtrInput
	// Version of software profile
	Version pulumi.StringPtrInput
	// version cluster association
	VersionClusterAssociations NdbSoftwareVersionProfileVersionClusterAssociationArrayInput
}

func (NdbSoftwareVersionProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbSoftwareVersionProfileState)(nil)).Elem()
}

type ndbSoftwareVersionProfileArgs struct {
	// available cluster ids
	AvailableClusterIds []string `pulumi:"availableClusterIds"`
	// description of profile
	Description *string `pulumi:"description"`
	// engine type of profile
	EngineType string `pulumi:"engineType"`
	// Name of profile
	Name *string `pulumi:"name"`
	// postgres database info
	PostgresDatabases []NdbSoftwareVersionProfilePostgresDatabase `pulumi:"postgresDatabases"`
	// profile id
	ProfileId string `pulumi:"profileId"`
	// status of profile. Allowed Values are "deprecated", "published", "unpublished"
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a NdbSoftwareVersionProfile resource.
type NdbSoftwareVersionProfileArgs struct {
	// available cluster ids
	AvailableClusterIds pulumi.StringArrayInput
	// description of profile
	Description pulumi.StringPtrInput
	// engine type of profile
	EngineType pulumi.StringInput
	// Name of profile
	Name pulumi.StringPtrInput
	// postgres database info
	PostgresDatabases NdbSoftwareVersionProfilePostgresDatabaseArrayInput
	// profile id
	ProfileId pulumi.StringInput
	// status of profile. Allowed Values are "deprecated", "published", "unpublished"
	Status pulumi.StringPtrInput
}

func (NdbSoftwareVersionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbSoftwareVersionProfileArgs)(nil)).Elem()
}

type NdbSoftwareVersionProfileInput interface {
	pulumi.Input

	ToNdbSoftwareVersionProfileOutput() NdbSoftwareVersionProfileOutput
	ToNdbSoftwareVersionProfileOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileOutput
}

func (*NdbSoftwareVersionProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbSoftwareVersionProfile)(nil)).Elem()
}

func (i *NdbSoftwareVersionProfile) ToNdbSoftwareVersionProfileOutput() NdbSoftwareVersionProfileOutput {
	return i.ToNdbSoftwareVersionProfileOutputWithContext(context.Background())
}

func (i *NdbSoftwareVersionProfile) ToNdbSoftwareVersionProfileOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSoftwareVersionProfileOutput)
}

// NdbSoftwareVersionProfileArrayInput is an input type that accepts NdbSoftwareVersionProfileArray and NdbSoftwareVersionProfileArrayOutput values.
// You can construct a concrete instance of `NdbSoftwareVersionProfileArrayInput` via:
//
//	NdbSoftwareVersionProfileArray{ NdbSoftwareVersionProfileArgs{...} }
type NdbSoftwareVersionProfileArrayInput interface {
	pulumi.Input

	ToNdbSoftwareVersionProfileArrayOutput() NdbSoftwareVersionProfileArrayOutput
	ToNdbSoftwareVersionProfileArrayOutputWithContext(context.Context) NdbSoftwareVersionProfileArrayOutput
}

type NdbSoftwareVersionProfileArray []NdbSoftwareVersionProfileInput

func (NdbSoftwareVersionProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (i NdbSoftwareVersionProfileArray) ToNdbSoftwareVersionProfileArrayOutput() NdbSoftwareVersionProfileArrayOutput {
	return i.ToNdbSoftwareVersionProfileArrayOutputWithContext(context.Background())
}

func (i NdbSoftwareVersionProfileArray) ToNdbSoftwareVersionProfileArrayOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSoftwareVersionProfileArrayOutput)
}

// NdbSoftwareVersionProfileMapInput is an input type that accepts NdbSoftwareVersionProfileMap and NdbSoftwareVersionProfileMapOutput values.
// You can construct a concrete instance of `NdbSoftwareVersionProfileMapInput` via:
//
//	NdbSoftwareVersionProfileMap{ "key": NdbSoftwareVersionProfileArgs{...} }
type NdbSoftwareVersionProfileMapInput interface {
	pulumi.Input

	ToNdbSoftwareVersionProfileMapOutput() NdbSoftwareVersionProfileMapOutput
	ToNdbSoftwareVersionProfileMapOutputWithContext(context.Context) NdbSoftwareVersionProfileMapOutput
}

type NdbSoftwareVersionProfileMap map[string]NdbSoftwareVersionProfileInput

func (NdbSoftwareVersionProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (i NdbSoftwareVersionProfileMap) ToNdbSoftwareVersionProfileMapOutput() NdbSoftwareVersionProfileMapOutput {
	return i.ToNdbSoftwareVersionProfileMapOutputWithContext(context.Background())
}

func (i NdbSoftwareVersionProfileMap) ToNdbSoftwareVersionProfileMapOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSoftwareVersionProfileMapOutput)
}

type NdbSoftwareVersionProfileOutput struct{ *pulumi.OutputState }

func (NdbSoftwareVersionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbSoftwareVersionProfile)(nil)).Elem()
}

func (o NdbSoftwareVersionProfileOutput) ToNdbSoftwareVersionProfileOutput() NdbSoftwareVersionProfileOutput {
	return o
}

func (o NdbSoftwareVersionProfileOutput) ToNdbSoftwareVersionProfileOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileOutput {
	return o
}

// available cluster ids
func (o NdbSoftwareVersionProfileOutput) AvailableClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringArrayOutput { return v.AvailableClusterIds }).(pulumi.StringArrayOutput)
}

// Db version of software profile
func (o NdbSoftwareVersionProfileOutput) DbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.DbVersion }).(pulumi.StringOutput)
}

// deprecated or not
func (o NdbSoftwareVersionProfileOutput) Deprecated() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.BoolOutput { return v.Deprecated }).(pulumi.BoolOutput)
}

// description of profile
func (o NdbSoftwareVersionProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// engine type of profile
func (o NdbSoftwareVersionProfileOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

// Name of profile
func (o NdbSoftwareVersionProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// owner  of profile
func (o NdbSoftwareVersionProfileOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// postgres database info
func (o NdbSoftwareVersionProfileOutput) PostgresDatabases() NdbSoftwareVersionProfilePostgresDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) NdbSoftwareVersionProfilePostgresDatabaseArrayOutput {
		return v.PostgresDatabases
	}).(NdbSoftwareVersionProfilePostgresDatabaseArrayOutput)
}

// profile id
func (o NdbSoftwareVersionProfileOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

// properties of software profile
func (o NdbSoftwareVersionProfileOutput) Properties() NdbSoftwareVersionProfilePropertyArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) NdbSoftwareVersionProfilePropertyArrayOutput { return v.Properties }).(NdbSoftwareVersionProfilePropertyArrayOutput)
}

// properties map of profile
func (o NdbSoftwareVersionProfileOutput) PropertiesMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringMapOutput { return v.PropertiesMap }).(pulumi.StringMapOutput)
}

// Published or not
func (o NdbSoftwareVersionProfileOutput) Published() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.BoolOutput { return v.Published }).(pulumi.BoolOutput)
}

// status of profile. Allowed Values are "deprecated", "published", "unpublished"
func (o NdbSoftwareVersionProfileOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// system profile or not.
func (o NdbSoftwareVersionProfileOutput) SystemProfile() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.BoolOutput { return v.SystemProfile }).(pulumi.BoolOutput)
}

// topology of software profile
func (o NdbSoftwareVersionProfileOutput) Topology() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Topology }).(pulumi.StringOutput)
}

// Version of software profile
func (o NdbSoftwareVersionProfileOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// version cluster association
func (o NdbSoftwareVersionProfileOutput) VersionClusterAssociations() NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput {
		return v.VersionClusterAssociations
	}).(NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput)
}

type NdbSoftwareVersionProfileArrayOutput struct{ *pulumi.OutputState }

func (NdbSoftwareVersionProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (o NdbSoftwareVersionProfileArrayOutput) ToNdbSoftwareVersionProfileArrayOutput() NdbSoftwareVersionProfileArrayOutput {
	return o
}

func (o NdbSoftwareVersionProfileArrayOutput) ToNdbSoftwareVersionProfileArrayOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileArrayOutput {
	return o
}

func (o NdbSoftwareVersionProfileArrayOutput) Index(i pulumi.IntInput) NdbSoftwareVersionProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbSoftwareVersionProfile {
		return vs[0].([]*NdbSoftwareVersionProfile)[vs[1].(int)]
	}).(NdbSoftwareVersionProfileOutput)
}

type NdbSoftwareVersionProfileMapOutput struct{ *pulumi.OutputState }

func (NdbSoftwareVersionProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (o NdbSoftwareVersionProfileMapOutput) ToNdbSoftwareVersionProfileMapOutput() NdbSoftwareVersionProfileMapOutput {
	return o
}

func (o NdbSoftwareVersionProfileMapOutput) ToNdbSoftwareVersionProfileMapOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileMapOutput {
	return o
}

func (o NdbSoftwareVersionProfileMapOutput) MapIndex(k pulumi.StringInput) NdbSoftwareVersionProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbSoftwareVersionProfile {
		return vs[0].(map[string]*NdbSoftwareVersionProfile)[vs[1].(string)]
	}).(NdbSoftwareVersionProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSoftwareVersionProfileInput)(nil)).Elem(), &NdbSoftwareVersionProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSoftwareVersionProfileArrayInput)(nil)).Elem(), NdbSoftwareVersionProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSoftwareVersionProfileMapInput)(nil)).Elem(), NdbSoftwareVersionProfileMap{})
	pulumi.RegisterOutputType(NdbSoftwareVersionProfileOutput{})
	pulumi.RegisterOutputType(NdbSoftwareVersionProfileArrayOutput{})
	pulumi.RegisterOutputType(NdbSoftwareVersionProfileMapOutput{})
}
