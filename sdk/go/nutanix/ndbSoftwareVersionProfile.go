// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NdbSoftwareVersionProfile struct {
	pulumi.CustomResourceState

	AvailableClusterIds        pulumi.StringArrayOutput                                      `pulumi:"availableClusterIds"`
	DbVersion                  pulumi.StringOutput                                           `pulumi:"dbVersion"`
	Deprecated                 pulumi.BoolOutput                                             `pulumi:"deprecated"`
	Description                pulumi.StringPtrOutput                                        `pulumi:"description"`
	EngineType                 pulumi.StringOutput                                           `pulumi:"engineType"`
	Name                       pulumi.StringOutput                                           `pulumi:"name"`
	Owner                      pulumi.StringOutput                                           `pulumi:"owner"`
	PostgresDatabases          NdbSoftwareVersionProfilePostgresDatabaseArrayOutput          `pulumi:"postgresDatabases"`
	ProfileId                  pulumi.StringOutput                                           `pulumi:"profileId"`
	Properties                 NdbSoftwareVersionProfilePropertyArrayOutput                  `pulumi:"properties"`
	PropertiesMap              pulumi.StringMapOutput                                        `pulumi:"propertiesMap"`
	Published                  pulumi.BoolOutput                                             `pulumi:"published"`
	Status                     pulumi.StringPtrOutput                                        `pulumi:"status"`
	SystemProfile              pulumi.BoolOutput                                             `pulumi:"systemProfile"`
	Topology                   pulumi.StringOutput                                           `pulumi:"topology"`
	Version                    pulumi.StringOutput                                           `pulumi:"version"`
	VersionClusterAssociations NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput `pulumi:"versionClusterAssociations"`
}

// NewNdbSoftwareVersionProfile registers a new resource with the given unique name, arguments, and options.
func NewNdbSoftwareVersionProfile(ctx *pulumi.Context,
	name string, args *NdbSoftwareVersionProfileArgs, opts ...pulumi.ResourceOption) (*NdbSoftwareVersionProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbSoftwareVersionProfile
	err := ctx.RegisterResource("nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbSoftwareVersionProfile gets an existing NdbSoftwareVersionProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbSoftwareVersionProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbSoftwareVersionProfileState, opts ...pulumi.ResourceOption) (*NdbSoftwareVersionProfile, error) {
	var resource NdbSoftwareVersionProfile
	err := ctx.ReadResource("nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbSoftwareVersionProfile resources.
type ndbSoftwareVersionProfileState struct {
	AvailableClusterIds        []string                                             `pulumi:"availableClusterIds"`
	DbVersion                  *string                                              `pulumi:"dbVersion"`
	Deprecated                 *bool                                                `pulumi:"deprecated"`
	Description                *string                                              `pulumi:"description"`
	EngineType                 *string                                              `pulumi:"engineType"`
	Name                       *string                                              `pulumi:"name"`
	Owner                      *string                                              `pulumi:"owner"`
	PostgresDatabases          []NdbSoftwareVersionProfilePostgresDatabase          `pulumi:"postgresDatabases"`
	ProfileId                  *string                                              `pulumi:"profileId"`
	Properties                 []NdbSoftwareVersionProfileProperty                  `pulumi:"properties"`
	PropertiesMap              map[string]string                                    `pulumi:"propertiesMap"`
	Published                  *bool                                                `pulumi:"published"`
	Status                     *string                                              `pulumi:"status"`
	SystemProfile              *bool                                                `pulumi:"systemProfile"`
	Topology                   *string                                              `pulumi:"topology"`
	Version                    *string                                              `pulumi:"version"`
	VersionClusterAssociations []NdbSoftwareVersionProfileVersionClusterAssociation `pulumi:"versionClusterAssociations"`
}

type NdbSoftwareVersionProfileState struct {
	AvailableClusterIds        pulumi.StringArrayInput
	DbVersion                  pulumi.StringPtrInput
	Deprecated                 pulumi.BoolPtrInput
	Description                pulumi.StringPtrInput
	EngineType                 pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	Owner                      pulumi.StringPtrInput
	PostgresDatabases          NdbSoftwareVersionProfilePostgresDatabaseArrayInput
	ProfileId                  pulumi.StringPtrInput
	Properties                 NdbSoftwareVersionProfilePropertyArrayInput
	PropertiesMap              pulumi.StringMapInput
	Published                  pulumi.BoolPtrInput
	Status                     pulumi.StringPtrInput
	SystemProfile              pulumi.BoolPtrInput
	Topology                   pulumi.StringPtrInput
	Version                    pulumi.StringPtrInput
	VersionClusterAssociations NdbSoftwareVersionProfileVersionClusterAssociationArrayInput
}

func (NdbSoftwareVersionProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbSoftwareVersionProfileState)(nil)).Elem()
}

type ndbSoftwareVersionProfileArgs struct {
	AvailableClusterIds []string                                    `pulumi:"availableClusterIds"`
	Description         *string                                     `pulumi:"description"`
	EngineType          string                                      `pulumi:"engineType"`
	Name                *string                                     `pulumi:"name"`
	PostgresDatabases   []NdbSoftwareVersionProfilePostgresDatabase `pulumi:"postgresDatabases"`
	ProfileId           string                                      `pulumi:"profileId"`
	Status              *string                                     `pulumi:"status"`
}

// The set of arguments for constructing a NdbSoftwareVersionProfile resource.
type NdbSoftwareVersionProfileArgs struct {
	AvailableClusterIds pulumi.StringArrayInput
	Description         pulumi.StringPtrInput
	EngineType          pulumi.StringInput
	Name                pulumi.StringPtrInput
	PostgresDatabases   NdbSoftwareVersionProfilePostgresDatabaseArrayInput
	ProfileId           pulumi.StringInput
	Status              pulumi.StringPtrInput
}

func (NdbSoftwareVersionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbSoftwareVersionProfileArgs)(nil)).Elem()
}

type NdbSoftwareVersionProfileInput interface {
	pulumi.Input

	ToNdbSoftwareVersionProfileOutput() NdbSoftwareVersionProfileOutput
	ToNdbSoftwareVersionProfileOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileOutput
}

func (*NdbSoftwareVersionProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbSoftwareVersionProfile)(nil)).Elem()
}

func (i *NdbSoftwareVersionProfile) ToNdbSoftwareVersionProfileOutput() NdbSoftwareVersionProfileOutput {
	return i.ToNdbSoftwareVersionProfileOutputWithContext(context.Background())
}

func (i *NdbSoftwareVersionProfile) ToNdbSoftwareVersionProfileOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSoftwareVersionProfileOutput)
}

// NdbSoftwareVersionProfileArrayInput is an input type that accepts NdbSoftwareVersionProfileArray and NdbSoftwareVersionProfileArrayOutput values.
// You can construct a concrete instance of `NdbSoftwareVersionProfileArrayInput` via:
//
//	NdbSoftwareVersionProfileArray{ NdbSoftwareVersionProfileArgs{...} }
type NdbSoftwareVersionProfileArrayInput interface {
	pulumi.Input

	ToNdbSoftwareVersionProfileArrayOutput() NdbSoftwareVersionProfileArrayOutput
	ToNdbSoftwareVersionProfileArrayOutputWithContext(context.Context) NdbSoftwareVersionProfileArrayOutput
}

type NdbSoftwareVersionProfileArray []NdbSoftwareVersionProfileInput

func (NdbSoftwareVersionProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (i NdbSoftwareVersionProfileArray) ToNdbSoftwareVersionProfileArrayOutput() NdbSoftwareVersionProfileArrayOutput {
	return i.ToNdbSoftwareVersionProfileArrayOutputWithContext(context.Background())
}

func (i NdbSoftwareVersionProfileArray) ToNdbSoftwareVersionProfileArrayOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSoftwareVersionProfileArrayOutput)
}

// NdbSoftwareVersionProfileMapInput is an input type that accepts NdbSoftwareVersionProfileMap and NdbSoftwareVersionProfileMapOutput values.
// You can construct a concrete instance of `NdbSoftwareVersionProfileMapInput` via:
//
//	NdbSoftwareVersionProfileMap{ "key": NdbSoftwareVersionProfileArgs{...} }
type NdbSoftwareVersionProfileMapInput interface {
	pulumi.Input

	ToNdbSoftwareVersionProfileMapOutput() NdbSoftwareVersionProfileMapOutput
	ToNdbSoftwareVersionProfileMapOutputWithContext(context.Context) NdbSoftwareVersionProfileMapOutput
}

type NdbSoftwareVersionProfileMap map[string]NdbSoftwareVersionProfileInput

func (NdbSoftwareVersionProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (i NdbSoftwareVersionProfileMap) ToNdbSoftwareVersionProfileMapOutput() NdbSoftwareVersionProfileMapOutput {
	return i.ToNdbSoftwareVersionProfileMapOutputWithContext(context.Background())
}

func (i NdbSoftwareVersionProfileMap) ToNdbSoftwareVersionProfileMapOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbSoftwareVersionProfileMapOutput)
}

type NdbSoftwareVersionProfileOutput struct{ *pulumi.OutputState }

func (NdbSoftwareVersionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbSoftwareVersionProfile)(nil)).Elem()
}

func (o NdbSoftwareVersionProfileOutput) ToNdbSoftwareVersionProfileOutput() NdbSoftwareVersionProfileOutput {
	return o
}

func (o NdbSoftwareVersionProfileOutput) ToNdbSoftwareVersionProfileOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileOutput {
	return o
}

func (o NdbSoftwareVersionProfileOutput) AvailableClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringArrayOutput { return v.AvailableClusterIds }).(pulumi.StringArrayOutput)
}

func (o NdbSoftwareVersionProfileOutput) DbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.DbVersion }).(pulumi.StringOutput)
}

func (o NdbSoftwareVersionProfileOutput) Deprecated() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.BoolOutput { return v.Deprecated }).(pulumi.BoolOutput)
}

func (o NdbSoftwareVersionProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NdbSoftwareVersionProfileOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

func (o NdbSoftwareVersionProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NdbSoftwareVersionProfileOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o NdbSoftwareVersionProfileOutput) PostgresDatabases() NdbSoftwareVersionProfilePostgresDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) NdbSoftwareVersionProfilePostgresDatabaseArrayOutput {
		return v.PostgresDatabases
	}).(NdbSoftwareVersionProfilePostgresDatabaseArrayOutput)
}

func (o NdbSoftwareVersionProfileOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

func (o NdbSoftwareVersionProfileOutput) Properties() NdbSoftwareVersionProfilePropertyArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) NdbSoftwareVersionProfilePropertyArrayOutput { return v.Properties }).(NdbSoftwareVersionProfilePropertyArrayOutput)
}

func (o NdbSoftwareVersionProfileOutput) PropertiesMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringMapOutput { return v.PropertiesMap }).(pulumi.StringMapOutput)
}

func (o NdbSoftwareVersionProfileOutput) Published() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.BoolOutput { return v.Published }).(pulumi.BoolOutput)
}

func (o NdbSoftwareVersionProfileOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o NdbSoftwareVersionProfileOutput) SystemProfile() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.BoolOutput { return v.SystemProfile }).(pulumi.BoolOutput)
}

func (o NdbSoftwareVersionProfileOutput) Topology() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Topology }).(pulumi.StringOutput)
}

func (o NdbSoftwareVersionProfileOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o NdbSoftwareVersionProfileOutput) VersionClusterAssociations() NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput {
	return o.ApplyT(func(v *NdbSoftwareVersionProfile) NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput {
		return v.VersionClusterAssociations
	}).(NdbSoftwareVersionProfileVersionClusterAssociationArrayOutput)
}

type NdbSoftwareVersionProfileArrayOutput struct{ *pulumi.OutputState }

func (NdbSoftwareVersionProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (o NdbSoftwareVersionProfileArrayOutput) ToNdbSoftwareVersionProfileArrayOutput() NdbSoftwareVersionProfileArrayOutput {
	return o
}

func (o NdbSoftwareVersionProfileArrayOutput) ToNdbSoftwareVersionProfileArrayOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileArrayOutput {
	return o
}

func (o NdbSoftwareVersionProfileArrayOutput) Index(i pulumi.IntInput) NdbSoftwareVersionProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbSoftwareVersionProfile {
		return vs[0].([]*NdbSoftwareVersionProfile)[vs[1].(int)]
	}).(NdbSoftwareVersionProfileOutput)
}

type NdbSoftwareVersionProfileMapOutput struct{ *pulumi.OutputState }

func (NdbSoftwareVersionProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbSoftwareVersionProfile)(nil)).Elem()
}

func (o NdbSoftwareVersionProfileMapOutput) ToNdbSoftwareVersionProfileMapOutput() NdbSoftwareVersionProfileMapOutput {
	return o
}

func (o NdbSoftwareVersionProfileMapOutput) ToNdbSoftwareVersionProfileMapOutputWithContext(ctx context.Context) NdbSoftwareVersionProfileMapOutput {
	return o
}

func (o NdbSoftwareVersionProfileMapOutput) MapIndex(k pulumi.StringInput) NdbSoftwareVersionProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbSoftwareVersionProfile {
		return vs[0].(map[string]*NdbSoftwareVersionProfile)[vs[1].(string)]
	}).(NdbSoftwareVersionProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSoftwareVersionProfileInput)(nil)).Elem(), &NdbSoftwareVersionProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSoftwareVersionProfileArrayInput)(nil)).Elem(), NdbSoftwareVersionProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbSoftwareVersionProfileMapInput)(nil)).Elem(), NdbSoftwareVersionProfileMap{})
	pulumi.RegisterOutputType(NdbSoftwareVersionProfileOutput{})
	pulumi.RegisterOutputType(NdbSoftwareVersionProfileArrayOutput{})
	pulumi.RegisterOutputType(NdbSoftwareVersionProfileMapOutput{})
}
