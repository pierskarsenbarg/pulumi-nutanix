// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource to Create Route.
type RoutesV2 struct {
	pulumi.CustomResourceState

	// BGP session description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Destination IP Subnet Configuration.
	Destination RoutesV2DestinationOutput `pulumi:"destination"`
	// Route UUID
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// External routing domain associated with this route table.
	ExternalRoutingDomainReference pulumi.StringOutput `pulumi:"externalRoutingDomainReference"`
	// Indicates whether the route is active in the forwarding plane.
	IsActive pulumi.BoolOutput `pulumi:"isActive"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links RoutesV2LinkArrayOutput `pulumi:"links"`
	// Metadata associated with this resource.
	Metadata RoutesV2MetadataOutput `pulumi:"metadata"`
	// Route name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Route nexthop.
	NextHop RoutesV2NextHopOutput `pulumi:"nextHop"`
	// Route priority. A higher value implies greater preference is assigned to the route.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Route table UUID
	RouteTableExtId pulumi.StringOutput `pulumi:"routeTableExtId"`
	// Route table reference.
	RouteTableReference pulumi.StringOutput `pulumi:"routeTableReference"`
	// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
	RouteType pulumi.StringOutput `pulumi:"routeType"`
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// VPC reference.
	VpcReference pulumi.StringOutput `pulumi:"vpcReference"`
}

// NewRoutesV2 registers a new resource with the given unique name, arguments, and options.
func NewRoutesV2(ctx *pulumi.Context,
	name string, args *RoutesV2Args, opts ...pulumi.ResourceOption) (*RoutesV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableExtId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableExtId'")
	}
	if args.RouteType == nil {
		return nil, errors.New("invalid value for required argument 'RouteType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutesV2
	err := ctx.RegisterResource("nutanix:index/routesV2:RoutesV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutesV2 gets an existing RoutesV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutesV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutesV2State, opts ...pulumi.ResourceOption) (*RoutesV2, error) {
	var resource RoutesV2
	err := ctx.ReadResource("nutanix:index/routesV2:RoutesV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutesV2 resources.
type routesV2State struct {
	// BGP session description.
	Description *string `pulumi:"description"`
	// Destination IP Subnet Configuration.
	Destination *RoutesV2Destination `pulumi:"destination"`
	// Route UUID
	ExtId *string `pulumi:"extId"`
	// External routing domain associated with this route table.
	ExternalRoutingDomainReference *string `pulumi:"externalRoutingDomainReference"`
	// Indicates whether the route is active in the forwarding plane.
	IsActive *bool `pulumi:"isActive"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []RoutesV2Link `pulumi:"links"`
	// Metadata associated with this resource.
	Metadata *RoutesV2Metadata `pulumi:"metadata"`
	// Route name.
	Name *string `pulumi:"name"`
	// Route nexthop.
	NextHop *RoutesV2NextHop `pulumi:"nextHop"`
	// Route priority. A higher value implies greater preference is assigned to the route.
	Priority *int `pulumi:"priority"`
	// Route table UUID
	RouteTableExtId *string `pulumi:"routeTableExtId"`
	// Route table reference.
	RouteTableReference *string `pulumi:"routeTableReference"`
	// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
	RouteType *string `pulumi:"routeType"`
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId *string `pulumi:"tenantId"`
	// VPC reference.
	VpcReference *string `pulumi:"vpcReference"`
}

type RoutesV2State struct {
	// BGP session description.
	Description pulumi.StringPtrInput
	// Destination IP Subnet Configuration.
	Destination RoutesV2DestinationPtrInput
	// Route UUID
	ExtId pulumi.StringPtrInput
	// External routing domain associated with this route table.
	ExternalRoutingDomainReference pulumi.StringPtrInput
	// Indicates whether the route is active in the forwarding plane.
	IsActive pulumi.BoolPtrInput
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links RoutesV2LinkArrayInput
	// Metadata associated with this resource.
	Metadata RoutesV2MetadataPtrInput
	// Route name.
	Name pulumi.StringPtrInput
	// Route nexthop.
	NextHop RoutesV2NextHopPtrInput
	// Route priority. A higher value implies greater preference is assigned to the route.
	Priority pulumi.IntPtrInput
	// Route table UUID
	RouteTableExtId pulumi.StringPtrInput
	// Route table reference.
	RouteTableReference pulumi.StringPtrInput
	// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
	RouteType pulumi.StringPtrInput
	// A globally unique identifier that represents the tenant that owns this entity
	TenantId pulumi.StringPtrInput
	// VPC reference.
	VpcReference pulumi.StringPtrInput
}

func (RoutesV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*routesV2State)(nil)).Elem()
}

type routesV2Args struct {
	// BGP session description.
	Description *string `pulumi:"description"`
	// Destination IP Subnet Configuration.
	Destination *RoutesV2Destination `pulumi:"destination"`
	// External routing domain associated with this route table.
	ExternalRoutingDomainReference *string `pulumi:"externalRoutingDomainReference"`
	// Metadata associated with this resource.
	Metadata *RoutesV2Metadata `pulumi:"metadata"`
	// Route name.
	Name *string `pulumi:"name"`
	// Route nexthop.
	NextHop *RoutesV2NextHop `pulumi:"nextHop"`
	// Route table UUID
	RouteTableExtId string `pulumi:"routeTableExtId"`
	// Route table reference.
	RouteTableReference *string `pulumi:"routeTableReference"`
	// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
	RouteType string `pulumi:"routeType"`
	// VPC reference.
	VpcReference *string `pulumi:"vpcReference"`
}

// The set of arguments for constructing a RoutesV2 resource.
type RoutesV2Args struct {
	// BGP session description.
	Description pulumi.StringPtrInput
	// Destination IP Subnet Configuration.
	Destination RoutesV2DestinationPtrInput
	// External routing domain associated with this route table.
	ExternalRoutingDomainReference pulumi.StringPtrInput
	// Metadata associated with this resource.
	Metadata RoutesV2MetadataPtrInput
	// Route name.
	Name pulumi.StringPtrInput
	// Route nexthop.
	NextHop RoutesV2NextHopPtrInput
	// Route table UUID
	RouteTableExtId pulumi.StringInput
	// Route table reference.
	RouteTableReference pulumi.StringPtrInput
	// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
	RouteType pulumi.StringInput
	// VPC reference.
	VpcReference pulumi.StringPtrInput
}

func (RoutesV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*routesV2Args)(nil)).Elem()
}

type RoutesV2Input interface {
	pulumi.Input

	ToRoutesV2Output() RoutesV2Output
	ToRoutesV2OutputWithContext(ctx context.Context) RoutesV2Output
}

func (*RoutesV2) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutesV2)(nil)).Elem()
}

func (i *RoutesV2) ToRoutesV2Output() RoutesV2Output {
	return i.ToRoutesV2OutputWithContext(context.Background())
}

func (i *RoutesV2) ToRoutesV2OutputWithContext(ctx context.Context) RoutesV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(RoutesV2Output)
}

// RoutesV2ArrayInput is an input type that accepts RoutesV2Array and RoutesV2ArrayOutput values.
// You can construct a concrete instance of `RoutesV2ArrayInput` via:
//
//	RoutesV2Array{ RoutesV2Args{...} }
type RoutesV2ArrayInput interface {
	pulumi.Input

	ToRoutesV2ArrayOutput() RoutesV2ArrayOutput
	ToRoutesV2ArrayOutputWithContext(context.Context) RoutesV2ArrayOutput
}

type RoutesV2Array []RoutesV2Input

func (RoutesV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutesV2)(nil)).Elem()
}

func (i RoutesV2Array) ToRoutesV2ArrayOutput() RoutesV2ArrayOutput {
	return i.ToRoutesV2ArrayOutputWithContext(context.Background())
}

func (i RoutesV2Array) ToRoutesV2ArrayOutputWithContext(ctx context.Context) RoutesV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutesV2ArrayOutput)
}

// RoutesV2MapInput is an input type that accepts RoutesV2Map and RoutesV2MapOutput values.
// You can construct a concrete instance of `RoutesV2MapInput` via:
//
//	RoutesV2Map{ "key": RoutesV2Args{...} }
type RoutesV2MapInput interface {
	pulumi.Input

	ToRoutesV2MapOutput() RoutesV2MapOutput
	ToRoutesV2MapOutputWithContext(context.Context) RoutesV2MapOutput
}

type RoutesV2Map map[string]RoutesV2Input

func (RoutesV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutesV2)(nil)).Elem()
}

func (i RoutesV2Map) ToRoutesV2MapOutput() RoutesV2MapOutput {
	return i.ToRoutesV2MapOutputWithContext(context.Background())
}

func (i RoutesV2Map) ToRoutesV2MapOutputWithContext(ctx context.Context) RoutesV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutesV2MapOutput)
}

type RoutesV2Output struct{ *pulumi.OutputState }

func (RoutesV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutesV2)(nil)).Elem()
}

func (o RoutesV2Output) ToRoutesV2Output() RoutesV2Output {
	return o
}

func (o RoutesV2Output) ToRoutesV2OutputWithContext(ctx context.Context) RoutesV2Output {
	return o
}

// BGP session description.
func (o RoutesV2Output) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Destination IP Subnet Configuration.
func (o RoutesV2Output) Destination() RoutesV2DestinationOutput {
	return o.ApplyT(func(v *RoutesV2) RoutesV2DestinationOutput { return v.Destination }).(RoutesV2DestinationOutput)
}

// Route UUID
func (o RoutesV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// External routing domain associated with this route table.
func (o RoutesV2Output) ExternalRoutingDomainReference() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.ExternalRoutingDomainReference }).(pulumi.StringOutput)
}

// Indicates whether the route is active in the forwarding plane.
func (o RoutesV2Output) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.BoolOutput { return v.IsActive }).(pulumi.BoolOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o RoutesV2Output) Links() RoutesV2LinkArrayOutput {
	return o.ApplyT(func(v *RoutesV2) RoutesV2LinkArrayOutput { return v.Links }).(RoutesV2LinkArrayOutput)
}

// Metadata associated with this resource.
func (o RoutesV2Output) Metadata() RoutesV2MetadataOutput {
	return o.ApplyT(func(v *RoutesV2) RoutesV2MetadataOutput { return v.Metadata }).(RoutesV2MetadataOutput)
}

// Route name.
func (o RoutesV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Route nexthop.
func (o RoutesV2Output) NextHop() RoutesV2NextHopOutput {
	return o.ApplyT(func(v *RoutesV2) RoutesV2NextHopOutput { return v.NextHop }).(RoutesV2NextHopOutput)
}

// Route priority. A higher value implies greater preference is assigned to the route.
func (o RoutesV2Output) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Route table UUID
func (o RoutesV2Output) RouteTableExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.RouteTableExtId }).(pulumi.StringOutput)
}

// Route table reference.
func (o RoutesV2Output) RouteTableReference() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.RouteTableReference }).(pulumi.StringOutput)
}

// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
func (o RoutesV2Output) RouteType() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.RouteType }).(pulumi.StringOutput)
}

// A globally unique identifier that represents the tenant that owns this entity
func (o RoutesV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// VPC reference.
func (o RoutesV2Output) VpcReference() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutesV2) pulumi.StringOutput { return v.VpcReference }).(pulumi.StringOutput)
}

type RoutesV2ArrayOutput struct{ *pulumi.OutputState }

func (RoutesV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutesV2)(nil)).Elem()
}

func (o RoutesV2ArrayOutput) ToRoutesV2ArrayOutput() RoutesV2ArrayOutput {
	return o
}

func (o RoutesV2ArrayOutput) ToRoutesV2ArrayOutputWithContext(ctx context.Context) RoutesV2ArrayOutput {
	return o
}

func (o RoutesV2ArrayOutput) Index(i pulumi.IntInput) RoutesV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutesV2 {
		return vs[0].([]*RoutesV2)[vs[1].(int)]
	}).(RoutesV2Output)
}

type RoutesV2MapOutput struct{ *pulumi.OutputState }

func (RoutesV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutesV2)(nil)).Elem()
}

func (o RoutesV2MapOutput) ToRoutesV2MapOutput() RoutesV2MapOutput {
	return o
}

func (o RoutesV2MapOutput) ToRoutesV2MapOutputWithContext(ctx context.Context) RoutesV2MapOutput {
	return o
}

func (o RoutesV2MapOutput) MapIndex(k pulumi.StringInput) RoutesV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutesV2 {
		return vs[0].(map[string]*RoutesV2)[vs[1].(string)]
	}).(RoutesV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutesV2Input)(nil)).Elem(), &RoutesV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutesV2ArrayInput)(nil)).Elem(), RoutesV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutesV2MapInput)(nil)).Elem(), RoutesV2Map{})
	pulumi.RegisterOutputType(RoutesV2Output{})
	pulumi.RegisterOutputType(RoutesV2ArrayOutput{})
	pulumi.RegisterOutputType(RoutesV2MapOutput{})
}
