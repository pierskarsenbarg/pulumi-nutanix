// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a datasource to retrieve a user group based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nutanix.GetUserGroup(ctx, &GetUserGroupArgs{
// 			UserGroupId: pulumi.StringRef("dd30a856-8e72-4158-b716-98455ceda220"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = nutanix.GetUserGroup(ctx, &GetUserGroupArgs{
// 			UserGroupName: pulumi.StringRef("example-group-1"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = nutanix.GetUserGroup(ctx, &GetUserGroupArgs{
// 			UserGroupDistinguishedName: pulumi.StringRef("cn=example-group-1,cn=users,dc=ntnxlab,dc=local"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetUserGroup(ctx *pulumi.Context, args *GetUserGroupArgs, opts ...pulumi.InvokeOption) (*GetUserGroupResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetUserGroupResult
	err := ctx.Invoke("nutanix:index/getUserGroup:getUserGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserGroup.
type GetUserGroupArgs struct {
	Categories       []GetUserGroupCategory `pulumi:"categories"`
	OwnerReference   map[string]string      `pulumi:"ownerReference"`
	ProjectReference map[string]string      `pulumi:"projectReference"`
	// The distinguished name for the user group
	UserGroupDistinguishedName *string `pulumi:"userGroupDistinguishedName"`
	UserGroupId                *string `pulumi:"userGroupId"`
	UserGroupName              *string `pulumi:"userGroupName"`
}

// A collection of values returned by getUserGroup.
type GetUserGroupResult struct {
	AccessControlPolicyReferenceLists []GetUserGroupAccessControlPolicyReferenceList `pulumi:"accessControlPolicyReferenceLists"`
	// The version of the API.
	// * `metadata`: - The user group kind metadata.
	// * `categories`: - The Distinguished Categories for the user group.
	// * `ownerReference`: - The reference to a user.
	// * `projectReference`: - The Distinguished The reference to a project.
	// * `userGroupType`: - The type of the user group.
	// * `displayName`: - The display name of the user group.
	// * `directoryServiceUserGroup`: - A Directory Service User Group.
	// * `projectReferenceList`: - A list of projects the user is part of. See #reference for more details.
	// * `accessControlPolicyReferenceList`: - List of ACP references. See #reference for more details.
	// * `state`: - The state of the entity.
	ApiVersion                 string                                  `pulumi:"apiVersion"`
	Categories                 []GetUserGroupCategory                  `pulumi:"categories"`
	DirectoryServiceUserGroups []GetUserGroupDirectoryServiceUserGroup `pulumi:"directoryServiceUserGroups"`
	DisplayName                string                                  `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id                         string                             `pulumi:"id"`
	Metadata                   map[string]string                  `pulumi:"metadata"`
	OwnerReference             map[string]string                  `pulumi:"ownerReference"`
	ProjectReference           map[string]string                  `pulumi:"projectReference"`
	ProjectReferenceLists      []GetUserGroupProjectReferenceList `pulumi:"projectReferenceLists"`
	State                      string                             `pulumi:"state"`
	UserGroupDistinguishedName *string                            `pulumi:"userGroupDistinguishedName"`
	UserGroupId                *string                            `pulumi:"userGroupId"`
	UserGroupName              *string                            `pulumi:"userGroupName"`
	UserGroupType              string                             `pulumi:"userGroupType"`
}

func GetUserGroupOutput(ctx *pulumi.Context, args GetUserGroupOutputArgs, opts ...pulumi.InvokeOption) GetUserGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUserGroupResult, error) {
			args := v.(GetUserGroupArgs)
			r, err := GetUserGroup(ctx, &args, opts...)
			var s GetUserGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUserGroupResultOutput)
}

// A collection of arguments for invoking getUserGroup.
type GetUserGroupOutputArgs struct {
	Categories       GetUserGroupCategoryArrayInput `pulumi:"categories"`
	OwnerReference   pulumi.StringMapInput          `pulumi:"ownerReference"`
	ProjectReference pulumi.StringMapInput          `pulumi:"projectReference"`
	// The distinguished name for the user group
	UserGroupDistinguishedName pulumi.StringPtrInput `pulumi:"userGroupDistinguishedName"`
	UserGroupId                pulumi.StringPtrInput `pulumi:"userGroupId"`
	UserGroupName              pulumi.StringPtrInput `pulumi:"userGroupName"`
}

func (GetUserGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserGroupArgs)(nil)).Elem()
}

// A collection of values returned by getUserGroup.
type GetUserGroupResultOutput struct{ *pulumi.OutputState }

func (GetUserGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserGroupResult)(nil)).Elem()
}

func (o GetUserGroupResultOutput) ToGetUserGroupResultOutput() GetUserGroupResultOutput {
	return o
}

func (o GetUserGroupResultOutput) ToGetUserGroupResultOutputWithContext(ctx context.Context) GetUserGroupResultOutput {
	return o
}

func (o GetUserGroupResultOutput) AccessControlPolicyReferenceLists() GetUserGroupAccessControlPolicyReferenceListArrayOutput {
	return o.ApplyT(func(v GetUserGroupResult) []GetUserGroupAccessControlPolicyReferenceList {
		return v.AccessControlPolicyReferenceLists
	}).(GetUserGroupAccessControlPolicyReferenceListArrayOutput)
}

// The version of the API.
// * `metadata`: - The user group kind metadata.
// * `categories`: - The Distinguished Categories for the user group.
// * `ownerReference`: - The reference to a user.
// * `projectReference`: - The Distinguished The reference to a project.
// * `userGroupType`: - The type of the user group.
// * `displayName`: - The display name of the user group.
// * `directoryServiceUserGroup`: - A Directory Service User Group.
// * `projectReferenceList`: - A list of projects the user is part of. See #reference for more details.
// * `accessControlPolicyReferenceList`: - List of ACP references. See #reference for more details.
// * `state`: - The state of the entity.
func (o GetUserGroupResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o GetUserGroupResultOutput) Categories() GetUserGroupCategoryArrayOutput {
	return o.ApplyT(func(v GetUserGroupResult) []GetUserGroupCategory { return v.Categories }).(GetUserGroupCategoryArrayOutput)
}

func (o GetUserGroupResultOutput) DirectoryServiceUserGroups() GetUserGroupDirectoryServiceUserGroupArrayOutput {
	return o.ApplyT(func(v GetUserGroupResult) []GetUserGroupDirectoryServiceUserGroup {
		return v.DirectoryServiceUserGroups
	}).(GetUserGroupDirectoryServiceUserGroupArrayOutput)
}

func (o GetUserGroupResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUserGroupResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserGroupResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o GetUserGroupResultOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserGroupResult) map[string]string { return v.OwnerReference }).(pulumi.StringMapOutput)
}

func (o GetUserGroupResultOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserGroupResult) map[string]string { return v.ProjectReference }).(pulumi.StringMapOutput)
}

func (o GetUserGroupResultOutput) ProjectReferenceLists() GetUserGroupProjectReferenceListArrayOutput {
	return o.ApplyT(func(v GetUserGroupResult) []GetUserGroupProjectReferenceList { return v.ProjectReferenceLists }).(GetUserGroupProjectReferenceListArrayOutput)
}

func (o GetUserGroupResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupResult) string { return v.State }).(pulumi.StringOutput)
}

func (o GetUserGroupResultOutput) UserGroupDistinguishedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserGroupResult) *string { return v.UserGroupDistinguishedName }).(pulumi.StringPtrOutput)
}

func (o GetUserGroupResultOutput) UserGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserGroupResult) *string { return v.UserGroupId }).(pulumi.StringPtrOutput)
}

func (o GetUserGroupResultOutput) UserGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserGroupResult) *string { return v.UserGroupName }).(pulumi.StringPtrOutput)
}

func (o GetUserGroupResultOutput) UserGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupResult) string { return v.UserGroupType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserGroupResultOutput{})
}
