// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a datasource to retrieve all the user groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetUserGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetUserGroups(ctx *pulumi.Context, args *GetUserGroupsArgs, opts ...pulumi.InvokeOption) (*GetUserGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserGroupsResult
	err := ctx.Invoke("nutanix:index/getUserGroups:getUserGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserGroups.
type GetUserGroupsArgs struct {
	// - The user group kind metadata.
	Metadatas []GetUserGroupsMetadata `pulumi:"metadatas"`
}

// A collection of values returned by getUserGroups.
type GetUserGroupsResult struct {
	ApiVersion string                `pulumi:"apiVersion"`
	Entities   []GetUserGroupsEntity `pulumi:"entities"`
	// The provider-assigned unique ID for this managed resource.
	Id        string                  `pulumi:"id"`
	Metadatas []GetUserGroupsMetadata `pulumi:"metadatas"`
}

func GetUserGroupsOutput(ctx *pulumi.Context, args GetUserGroupsOutputArgs, opts ...pulumi.InvokeOption) GetUserGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUserGroupsResult, error) {
			args := v.(GetUserGroupsArgs)
			r, err := GetUserGroups(ctx, &args, opts...)
			var s GetUserGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUserGroupsResultOutput)
}

// A collection of arguments for invoking getUserGroups.
type GetUserGroupsOutputArgs struct {
	// - The user group kind metadata.
	Metadatas GetUserGroupsMetadataArrayInput `pulumi:"metadatas"`
}

func (GetUserGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getUserGroups.
type GetUserGroupsResultOutput struct{ *pulumi.OutputState }

func (GetUserGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserGroupsResult)(nil)).Elem()
}

func (o GetUserGroupsResultOutput) ToGetUserGroupsResultOutput() GetUserGroupsResultOutput {
	return o
}

func (o GetUserGroupsResultOutput) ToGetUserGroupsResultOutputWithContext(ctx context.Context) GetUserGroupsResultOutput {
	return o
}

func (o GetUserGroupsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserGroupsResult] {
	return pulumix.Output[GetUserGroupsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetUserGroupsResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupsResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o GetUserGroupsResultOutput) Entities() GetUserGroupsEntityArrayOutput {
	return o.ApplyT(func(v GetUserGroupsResult) []GetUserGroupsEntity { return v.Entities }).(GetUserGroupsEntityArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUserGroupsResultOutput) Metadatas() GetUserGroupsMetadataArrayOutput {
	return o.ApplyT(func(v GetUserGroupsResult) []GetUserGroupsMetadata { return v.Metadatas }).(GetUserGroupsMetadataArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserGroupsResultOutput{})
}
