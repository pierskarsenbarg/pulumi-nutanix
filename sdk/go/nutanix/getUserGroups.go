// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a datasource to retrieve all the user groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.LookupUserGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUserGroups(ctx *pulumi.Context, args *LookupUserGroupsArgs, opts ...pulumi.InvokeOption) (*LookupUserGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserGroupsResult
	err := ctx.Invoke("nutanix:index/getUserGroups:getUserGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserGroups.
type LookupUserGroupsArgs struct {
	// - The user group kind metadata.
	Metadatas []GetUserGroupsMetadata `pulumi:"metadatas"`
}

// A collection of values returned by getUserGroups.
type LookupUserGroupsResult struct {
	ApiVersion string                `pulumi:"apiVersion"`
	Entities   []GetUserGroupsEntity `pulumi:"entities"`
	// The provider-assigned unique ID for this managed resource.
	Id        string                  `pulumi:"id"`
	Metadatas []GetUserGroupsMetadata `pulumi:"metadatas"`
}

func LookupUserGroupsOutput(ctx *pulumi.Context, args LookupUserGroupsOutputArgs, opts ...pulumi.InvokeOption) LookupUserGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserGroupsResult, error) {
			args := v.(LookupUserGroupsArgs)
			r, err := LookupUserGroups(ctx, &args, opts...)
			var s LookupUserGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserGroupsResultOutput)
}

// A collection of arguments for invoking getUserGroups.
type LookupUserGroupsOutputArgs struct {
	// - The user group kind metadata.
	Metadatas GetUserGroupsMetadataArrayInput `pulumi:"metadatas"`
}

func (LookupUserGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getUserGroups.
type LookupUserGroupsResultOutput struct{ *pulumi.OutputState }

func (LookupUserGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserGroupsResult)(nil)).Elem()
}

func (o LookupUserGroupsResultOutput) ToLookupUserGroupsResultOutput() LookupUserGroupsResultOutput {
	return o
}

func (o LookupUserGroupsResultOutput) ToLookupUserGroupsResultOutputWithContext(ctx context.Context) LookupUserGroupsResultOutput {
	return o
}

func (o LookupUserGroupsResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupsResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o LookupUserGroupsResultOutput) Entities() GetUserGroupsEntityArrayOutput {
	return o.ApplyT(func(v LookupUserGroupsResult) []GetUserGroupsEntity { return v.Entities }).(GetUserGroupsEntityArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserGroupsResultOutput) Metadatas() GetUserGroupsMetadataArrayOutput {
	return o.ApplyT(func(v LookupUserGroupsResult) []GetUserGroupsMetadata { return v.Metadatas }).(GetUserGroupsMetadataArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserGroupsResultOutput{})
}
