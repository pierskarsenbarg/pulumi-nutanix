// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create VLANs and IP address pools that are managed both in NDB and outside NDB.
//
// ## Example Usage
//
// ### resource to create network for NDB
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbNetwork(ctx, "name", &nutanix.NdbNetworkArgs{
//				ClusterId: pulumi.String("{{ cluster_id }}"),
//				Gateway:   pulumi.String("{{ gatway for the vlan }}"),
//				IpPools: nutanix.NdbNetworkIpPoolArray{
//					&nutanix.NdbNetworkIpPoolArgs{
//						EndIp:   pulumi.String("{{ ending address range }}"),
//						StartIp: pulumi.String("{{ starting address range}}"),
//					},
//				},
//				PrimaryDns:   pulumi.String(" {{ primary dns for the vlan }}"),
//				SecondaryDns: pulumi.String("{{secondary dns for the vlan }}"),
//				SubnetMask:   pulumi.String("{{ subnet mask for the vlan}}"),
//				Type:         pulumi.String("Static"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbNetwork struct {
	pulumi.CustomResourceState

	// Select the Nutanix cluster on which you want to add the VLAN.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// dns domain for vlan. (Static IP address assignment only)
	DnsDomain pulumi.StringPtrOutput `pulumi:"dnsDomain"`
	// Gateway for vlan. Supports in Static IP address assignment only
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
	IpPools NdbNetworkIpPoolArrayOutput `pulumi:"ipPools"`
	// Managed by NDB or not
	Managed pulumi.BoolOutput `pulumi:"managed"`
	// Name of the vlan to be attached in NDB
	Name pulumi.StringOutput `pulumi:"name"`
	// primary dns for vlan. (Static IP address assignment only)
	PrimaryDns pulumi.StringPtrOutput `pulumi:"primaryDns"`
	// properties of network
	Properties NdbNetworkPropertyArrayOutput `pulumi:"properties"`
	// properties map of network
	PropertiesMaps NdbNetworkPropertiesMapArrayOutput `pulumi:"propertiesMaps"`
	// secondary dns for vlan. (Static IP address assignment only)
	SecondaryDns pulumi.StringPtrOutput `pulumi:"secondaryDns"`
	// stretched vlan id
	StretchedVlanId pulumi.StringOutput `pulumi:"stretchedVlanId"`
	// Subnet mask for vlan. (Static IP address assignment only)
	SubnetMask pulumi.StringPtrOutput `pulumi:"subnetMask"`
	// Vlan type. Supports [DHCP, Static]
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNdbNetwork registers a new resource with the given unique name, arguments, and options.
func NewNdbNetwork(ctx *pulumi.Context,
	name string, args *NdbNetworkArgs, opts ...pulumi.ResourceOption) (*NdbNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbNetwork
	err := ctx.RegisterResource("nutanix:index/ndbNetwork:NdbNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbNetwork gets an existing NdbNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbNetworkState, opts ...pulumi.ResourceOption) (*NdbNetwork, error) {
	var resource NdbNetwork
	err := ctx.ReadResource("nutanix:index/ndbNetwork:NdbNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbNetwork resources.
type ndbNetworkState struct {
	// Select the Nutanix cluster on which you want to add the VLAN.
	ClusterId *string `pulumi:"clusterId"`
	// dns domain for vlan. (Static IP address assignment only)
	DnsDomain *string `pulumi:"dnsDomain"`
	// Gateway for vlan. Supports in Static IP address assignment only
	Gateway *string `pulumi:"gateway"`
	// Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
	IpPools []NdbNetworkIpPool `pulumi:"ipPools"`
	// Managed by NDB or not
	Managed *bool `pulumi:"managed"`
	// Name of the vlan to be attached in NDB
	Name *string `pulumi:"name"`
	// primary dns for vlan. (Static IP address assignment only)
	PrimaryDns *string `pulumi:"primaryDns"`
	// properties of network
	Properties []NdbNetworkProperty `pulumi:"properties"`
	// properties map of network
	PropertiesMaps []NdbNetworkPropertiesMap `pulumi:"propertiesMaps"`
	// secondary dns for vlan. (Static IP address assignment only)
	SecondaryDns *string `pulumi:"secondaryDns"`
	// stretched vlan id
	StretchedVlanId *string `pulumi:"stretchedVlanId"`
	// Subnet mask for vlan. (Static IP address assignment only)
	SubnetMask *string `pulumi:"subnetMask"`
	// Vlan type. Supports [DHCP, Static]
	Type *string `pulumi:"type"`
}

type NdbNetworkState struct {
	// Select the Nutanix cluster on which you want to add the VLAN.
	ClusterId pulumi.StringPtrInput
	// dns domain for vlan. (Static IP address assignment only)
	DnsDomain pulumi.StringPtrInput
	// Gateway for vlan. Supports in Static IP address assignment only
	Gateway pulumi.StringPtrInput
	// Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
	IpPools NdbNetworkIpPoolArrayInput
	// Managed by NDB or not
	Managed pulumi.BoolPtrInput
	// Name of the vlan to be attached in NDB
	Name pulumi.StringPtrInput
	// primary dns for vlan. (Static IP address assignment only)
	PrimaryDns pulumi.StringPtrInput
	// properties of network
	Properties NdbNetworkPropertyArrayInput
	// properties map of network
	PropertiesMaps NdbNetworkPropertiesMapArrayInput
	// secondary dns for vlan. (Static IP address assignment only)
	SecondaryDns pulumi.StringPtrInput
	// stretched vlan id
	StretchedVlanId pulumi.StringPtrInput
	// Subnet mask for vlan. (Static IP address assignment only)
	SubnetMask pulumi.StringPtrInput
	// Vlan type. Supports [DHCP, Static]
	Type pulumi.StringPtrInput
}

func (NdbNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbNetworkState)(nil)).Elem()
}

type ndbNetworkArgs struct {
	// Select the Nutanix cluster on which you want to add the VLAN.
	ClusterId string `pulumi:"clusterId"`
	// dns domain for vlan. (Static IP address assignment only)
	DnsDomain *string `pulumi:"dnsDomain"`
	// Gateway for vlan. Supports in Static IP address assignment only
	Gateway *string `pulumi:"gateway"`
	// Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
	IpPools []NdbNetworkIpPool `pulumi:"ipPools"`
	// Name of the vlan to be attached in NDB
	Name *string `pulumi:"name"`
	// primary dns for vlan. (Static IP address assignment only)
	PrimaryDns *string `pulumi:"primaryDns"`
	// secondary dns for vlan. (Static IP address assignment only)
	SecondaryDns *string `pulumi:"secondaryDns"`
	// Subnet mask for vlan. (Static IP address assignment only)
	SubnetMask *string `pulumi:"subnetMask"`
	// Vlan type. Supports [DHCP, Static]
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NdbNetwork resource.
type NdbNetworkArgs struct {
	// Select the Nutanix cluster on which you want to add the VLAN.
	ClusterId pulumi.StringInput
	// dns domain for vlan. (Static IP address assignment only)
	DnsDomain pulumi.StringPtrInput
	// Gateway for vlan. Supports in Static IP address assignment only
	Gateway pulumi.StringPtrInput
	// Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
	IpPools NdbNetworkIpPoolArrayInput
	// Name of the vlan to be attached in NDB
	Name pulumi.StringPtrInput
	// primary dns for vlan. (Static IP address assignment only)
	PrimaryDns pulumi.StringPtrInput
	// secondary dns for vlan. (Static IP address assignment only)
	SecondaryDns pulumi.StringPtrInput
	// Subnet mask for vlan. (Static IP address assignment only)
	SubnetMask pulumi.StringPtrInput
	// Vlan type. Supports [DHCP, Static]
	Type pulumi.StringInput
}

func (NdbNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbNetworkArgs)(nil)).Elem()
}

type NdbNetworkInput interface {
	pulumi.Input

	ToNdbNetworkOutput() NdbNetworkOutput
	ToNdbNetworkOutputWithContext(ctx context.Context) NdbNetworkOutput
}

func (*NdbNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbNetwork)(nil)).Elem()
}

func (i *NdbNetwork) ToNdbNetworkOutput() NdbNetworkOutput {
	return i.ToNdbNetworkOutputWithContext(context.Background())
}

func (i *NdbNetwork) ToNdbNetworkOutputWithContext(ctx context.Context) NdbNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbNetworkOutput)
}

// NdbNetworkArrayInput is an input type that accepts NdbNetworkArray and NdbNetworkArrayOutput values.
// You can construct a concrete instance of `NdbNetworkArrayInput` via:
//
//	NdbNetworkArray{ NdbNetworkArgs{...} }
type NdbNetworkArrayInput interface {
	pulumi.Input

	ToNdbNetworkArrayOutput() NdbNetworkArrayOutput
	ToNdbNetworkArrayOutputWithContext(context.Context) NdbNetworkArrayOutput
}

type NdbNetworkArray []NdbNetworkInput

func (NdbNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbNetwork)(nil)).Elem()
}

func (i NdbNetworkArray) ToNdbNetworkArrayOutput() NdbNetworkArrayOutput {
	return i.ToNdbNetworkArrayOutputWithContext(context.Background())
}

func (i NdbNetworkArray) ToNdbNetworkArrayOutputWithContext(ctx context.Context) NdbNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbNetworkArrayOutput)
}

// NdbNetworkMapInput is an input type that accepts NdbNetworkMap and NdbNetworkMapOutput values.
// You can construct a concrete instance of `NdbNetworkMapInput` via:
//
//	NdbNetworkMap{ "key": NdbNetworkArgs{...} }
type NdbNetworkMapInput interface {
	pulumi.Input

	ToNdbNetworkMapOutput() NdbNetworkMapOutput
	ToNdbNetworkMapOutputWithContext(context.Context) NdbNetworkMapOutput
}

type NdbNetworkMap map[string]NdbNetworkInput

func (NdbNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbNetwork)(nil)).Elem()
}

func (i NdbNetworkMap) ToNdbNetworkMapOutput() NdbNetworkMapOutput {
	return i.ToNdbNetworkMapOutputWithContext(context.Background())
}

func (i NdbNetworkMap) ToNdbNetworkMapOutputWithContext(ctx context.Context) NdbNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbNetworkMapOutput)
}

type NdbNetworkOutput struct{ *pulumi.OutputState }

func (NdbNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbNetwork)(nil)).Elem()
}

func (o NdbNetworkOutput) ToNdbNetworkOutput() NdbNetworkOutput {
	return o
}

func (o NdbNetworkOutput) ToNdbNetworkOutputWithContext(ctx context.Context) NdbNetworkOutput {
	return o
}

// Select the Nutanix cluster on which you want to add the VLAN.
func (o NdbNetworkOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// dns domain for vlan. (Static IP address assignment only)
func (o NdbNetworkOutput) DnsDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringPtrOutput { return v.DnsDomain }).(pulumi.StringPtrOutput)
}

// Gateway for vlan. Supports in Static IP address assignment only
func (o NdbNetworkOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
func (o NdbNetworkOutput) IpPools() NdbNetworkIpPoolArrayOutput {
	return o.ApplyT(func(v *NdbNetwork) NdbNetworkIpPoolArrayOutput { return v.IpPools }).(NdbNetworkIpPoolArrayOutput)
}

// Managed by NDB or not
func (o NdbNetworkOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.BoolOutput { return v.Managed }).(pulumi.BoolOutput)
}

// Name of the vlan to be attached in NDB
func (o NdbNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// primary dns for vlan. (Static IP address assignment only)
func (o NdbNetworkOutput) PrimaryDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringPtrOutput { return v.PrimaryDns }).(pulumi.StringPtrOutput)
}

// properties of network
func (o NdbNetworkOutput) Properties() NdbNetworkPropertyArrayOutput {
	return o.ApplyT(func(v *NdbNetwork) NdbNetworkPropertyArrayOutput { return v.Properties }).(NdbNetworkPropertyArrayOutput)
}

// properties map of network
func (o NdbNetworkOutput) PropertiesMaps() NdbNetworkPropertiesMapArrayOutput {
	return o.ApplyT(func(v *NdbNetwork) NdbNetworkPropertiesMapArrayOutput { return v.PropertiesMaps }).(NdbNetworkPropertiesMapArrayOutput)
}

// secondary dns for vlan. (Static IP address assignment only)
func (o NdbNetworkOutput) SecondaryDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringPtrOutput { return v.SecondaryDns }).(pulumi.StringPtrOutput)
}

// stretched vlan id
func (o NdbNetworkOutput) StretchedVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringOutput { return v.StretchedVlanId }).(pulumi.StringOutput)
}

// Subnet mask for vlan. (Static IP address assignment only)
func (o NdbNetworkOutput) SubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringPtrOutput { return v.SubnetMask }).(pulumi.StringPtrOutput)
}

// Vlan type. Supports [DHCP, Static]
func (o NdbNetworkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbNetwork) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NdbNetworkArrayOutput struct{ *pulumi.OutputState }

func (NdbNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbNetwork)(nil)).Elem()
}

func (o NdbNetworkArrayOutput) ToNdbNetworkArrayOutput() NdbNetworkArrayOutput {
	return o
}

func (o NdbNetworkArrayOutput) ToNdbNetworkArrayOutputWithContext(ctx context.Context) NdbNetworkArrayOutput {
	return o
}

func (o NdbNetworkArrayOutput) Index(i pulumi.IntInput) NdbNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbNetwork {
		return vs[0].([]*NdbNetwork)[vs[1].(int)]
	}).(NdbNetworkOutput)
}

type NdbNetworkMapOutput struct{ *pulumi.OutputState }

func (NdbNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbNetwork)(nil)).Elem()
}

func (o NdbNetworkMapOutput) ToNdbNetworkMapOutput() NdbNetworkMapOutput {
	return o
}

func (o NdbNetworkMapOutput) ToNdbNetworkMapOutputWithContext(ctx context.Context) NdbNetworkMapOutput {
	return o
}

func (o NdbNetworkMapOutput) MapIndex(k pulumi.StringInput) NdbNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbNetwork {
		return vs[0].(map[string]*NdbNetwork)[vs[1].(string)]
	}).(NdbNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbNetworkInput)(nil)).Elem(), &NdbNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbNetworkArrayInput)(nil)).Elem(), NdbNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbNetworkMapInput)(nil)).Elem(), NdbNetworkMap{})
	pulumi.RegisterOutputType(NdbNetworkOutput{})
	pulumi.RegisterOutputType(NdbNetworkArrayOutput{})
	pulumi.RegisterOutputType(NdbNetworkMapOutput{})
}
