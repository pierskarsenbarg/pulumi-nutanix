// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create stretched vlans based on the input parameters.
//
// ## Example Usage
//
// ### resource to add stretched vlan in NDB
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbStretchedVlan(ctx, "name", &nutanix.NdbStretchedVlanArgs{
//				Description: pulumi.String("vlan desc updated"),
//				Type:        pulumi.String("Static"),
//				VlanIds: pulumi.StringArray{
//					pulumi.String("{{ vlan_id_1 }}"),
//					pulumi.String("{{ vlan_id_2 }}"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### resource to update the strteched vlan with new gateway and subnet mask
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbStretchedVlan(ctx, "name", &nutanix.NdbStretchedVlanArgs{
//				Description: pulumi.String("vlan desc updated"),
//				Metadata: &nutanix.NdbStretchedVlanMetadataArgs{
//					Gateway:    pulumi.String("{{ gateway of vlans }}"),
//					SubnetMask: pulumi.String("{{ subnet mask of vlans }}"),
//				},
//				Type: pulumi.String("Static"),
//				VlanIds: pulumi.StringArray{
//					pulumi.String("{{ vlan_id_1 }}"),
//					pulumi.String("{{ vlan_id_2 }}"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbStretchedVlan struct {
	pulumi.CustomResourceState

	// Description of stretched vlan
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Update the stretched VLAN Gateway and Subnet Mask IP address
	// * `metadata.gateway`: Update the gateway of stretched vlan
	// * `metadata.subnet_mask`: Update the subnetMask of stretched vlan
	Metadata NdbStretchedVlanMetadataOutput `pulumi:"metadata"`
	// name for the stretched VLAN
	Name pulumi.StringOutput `pulumi:"name"`
	// type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
	Type pulumi.StringOutput `pulumi:"type"`
	// list of vlan ids to be added in NDB
	VlanIds pulumi.StringArrayOutput `pulumi:"vlanIds"`
	// properties of vlans
	VlansLists NdbStretchedVlanVlansListArrayOutput `pulumi:"vlansLists"`
}

// NewNdbStretchedVlan registers a new resource with the given unique name, arguments, and options.
func NewNdbStretchedVlan(ctx *pulumi.Context,
	name string, args *NdbStretchedVlanArgs, opts ...pulumi.ResourceOption) (*NdbStretchedVlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VlanIds == nil {
		return nil, errors.New("invalid value for required argument 'VlanIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbStretchedVlan
	err := ctx.RegisterResource("nutanix:index/ndbStretchedVlan:NdbStretchedVlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbStretchedVlan gets an existing NdbStretchedVlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbStretchedVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbStretchedVlanState, opts ...pulumi.ResourceOption) (*NdbStretchedVlan, error) {
	var resource NdbStretchedVlan
	err := ctx.ReadResource("nutanix:index/ndbStretchedVlan:NdbStretchedVlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbStretchedVlan resources.
type ndbStretchedVlanState struct {
	// Description of stretched vlan
	Description *string `pulumi:"description"`
	// Update the stretched VLAN Gateway and Subnet Mask IP address
	// * `metadata.gateway`: Update the gateway of stretched vlan
	// * `metadata.subnet_mask`: Update the subnetMask of stretched vlan
	Metadata *NdbStretchedVlanMetadata `pulumi:"metadata"`
	// name for the stretched VLAN
	Name *string `pulumi:"name"`
	// type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
	Type *string `pulumi:"type"`
	// list of vlan ids to be added in NDB
	VlanIds []string `pulumi:"vlanIds"`
	// properties of vlans
	VlansLists []NdbStretchedVlanVlansList `pulumi:"vlansLists"`
}

type NdbStretchedVlanState struct {
	// Description of stretched vlan
	Description pulumi.StringPtrInput
	// Update the stretched VLAN Gateway and Subnet Mask IP address
	// * `metadata.gateway`: Update the gateway of stretched vlan
	// * `metadata.subnet_mask`: Update the subnetMask of stretched vlan
	Metadata NdbStretchedVlanMetadataPtrInput
	// name for the stretched VLAN
	Name pulumi.StringPtrInput
	// type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
	Type pulumi.StringPtrInput
	// list of vlan ids to be added in NDB
	VlanIds pulumi.StringArrayInput
	// properties of vlans
	VlansLists NdbStretchedVlanVlansListArrayInput
}

func (NdbStretchedVlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbStretchedVlanState)(nil)).Elem()
}

type ndbStretchedVlanArgs struct {
	// Description of stretched vlan
	Description *string `pulumi:"description"`
	// Update the stretched VLAN Gateway and Subnet Mask IP address
	// * `metadata.gateway`: Update the gateway of stretched vlan
	// * `metadata.subnet_mask`: Update the subnetMask of stretched vlan
	Metadata *NdbStretchedVlanMetadata `pulumi:"metadata"`
	// name for the stretched VLAN
	Name *string `pulumi:"name"`
	// type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
	Type string `pulumi:"type"`
	// list of vlan ids to be added in NDB
	VlanIds []string `pulumi:"vlanIds"`
}

// The set of arguments for constructing a NdbStretchedVlan resource.
type NdbStretchedVlanArgs struct {
	// Description of stretched vlan
	Description pulumi.StringPtrInput
	// Update the stretched VLAN Gateway and Subnet Mask IP address
	// * `metadata.gateway`: Update the gateway of stretched vlan
	// * `metadata.subnet_mask`: Update the subnetMask of stretched vlan
	Metadata NdbStretchedVlanMetadataPtrInput
	// name for the stretched VLAN
	Name pulumi.StringPtrInput
	// type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
	Type pulumi.StringInput
	// list of vlan ids to be added in NDB
	VlanIds pulumi.StringArrayInput
}

func (NdbStretchedVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbStretchedVlanArgs)(nil)).Elem()
}

type NdbStretchedVlanInput interface {
	pulumi.Input

	ToNdbStretchedVlanOutput() NdbStretchedVlanOutput
	ToNdbStretchedVlanOutputWithContext(ctx context.Context) NdbStretchedVlanOutput
}

func (*NdbStretchedVlan) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbStretchedVlan)(nil)).Elem()
}

func (i *NdbStretchedVlan) ToNdbStretchedVlanOutput() NdbStretchedVlanOutput {
	return i.ToNdbStretchedVlanOutputWithContext(context.Background())
}

func (i *NdbStretchedVlan) ToNdbStretchedVlanOutputWithContext(ctx context.Context) NdbStretchedVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbStretchedVlanOutput)
}

// NdbStretchedVlanArrayInput is an input type that accepts NdbStretchedVlanArray and NdbStretchedVlanArrayOutput values.
// You can construct a concrete instance of `NdbStretchedVlanArrayInput` via:
//
//	NdbStretchedVlanArray{ NdbStretchedVlanArgs{...} }
type NdbStretchedVlanArrayInput interface {
	pulumi.Input

	ToNdbStretchedVlanArrayOutput() NdbStretchedVlanArrayOutput
	ToNdbStretchedVlanArrayOutputWithContext(context.Context) NdbStretchedVlanArrayOutput
}

type NdbStretchedVlanArray []NdbStretchedVlanInput

func (NdbStretchedVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbStretchedVlan)(nil)).Elem()
}

func (i NdbStretchedVlanArray) ToNdbStretchedVlanArrayOutput() NdbStretchedVlanArrayOutput {
	return i.ToNdbStretchedVlanArrayOutputWithContext(context.Background())
}

func (i NdbStretchedVlanArray) ToNdbStretchedVlanArrayOutputWithContext(ctx context.Context) NdbStretchedVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbStretchedVlanArrayOutput)
}

// NdbStretchedVlanMapInput is an input type that accepts NdbStretchedVlanMap and NdbStretchedVlanMapOutput values.
// You can construct a concrete instance of `NdbStretchedVlanMapInput` via:
//
//	NdbStretchedVlanMap{ "key": NdbStretchedVlanArgs{...} }
type NdbStretchedVlanMapInput interface {
	pulumi.Input

	ToNdbStretchedVlanMapOutput() NdbStretchedVlanMapOutput
	ToNdbStretchedVlanMapOutputWithContext(context.Context) NdbStretchedVlanMapOutput
}

type NdbStretchedVlanMap map[string]NdbStretchedVlanInput

func (NdbStretchedVlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbStretchedVlan)(nil)).Elem()
}

func (i NdbStretchedVlanMap) ToNdbStretchedVlanMapOutput() NdbStretchedVlanMapOutput {
	return i.ToNdbStretchedVlanMapOutputWithContext(context.Background())
}

func (i NdbStretchedVlanMap) ToNdbStretchedVlanMapOutputWithContext(ctx context.Context) NdbStretchedVlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbStretchedVlanMapOutput)
}

type NdbStretchedVlanOutput struct{ *pulumi.OutputState }

func (NdbStretchedVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbStretchedVlan)(nil)).Elem()
}

func (o NdbStretchedVlanOutput) ToNdbStretchedVlanOutput() NdbStretchedVlanOutput {
	return o
}

func (o NdbStretchedVlanOutput) ToNdbStretchedVlanOutputWithContext(ctx context.Context) NdbStretchedVlanOutput {
	return o
}

// Description of stretched vlan
func (o NdbStretchedVlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbStretchedVlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Update the stretched VLAN Gateway and Subnet Mask IP address
// * `metadata.gateway`: Update the gateway of stretched vlan
// * `metadata.subnet_mask`: Update the subnetMask of stretched vlan
func (o NdbStretchedVlanOutput) Metadata() NdbStretchedVlanMetadataOutput {
	return o.ApplyT(func(v *NdbStretchedVlan) NdbStretchedVlanMetadataOutput { return v.Metadata }).(NdbStretchedVlanMetadataOutput)
}

// name for the stretched VLAN
func (o NdbStretchedVlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbStretchedVlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
func (o NdbStretchedVlanOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbStretchedVlan) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// list of vlan ids to be added in NDB
func (o NdbStretchedVlanOutput) VlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbStretchedVlan) pulumi.StringArrayOutput { return v.VlanIds }).(pulumi.StringArrayOutput)
}

// properties of vlans
func (o NdbStretchedVlanOutput) VlansLists() NdbStretchedVlanVlansListArrayOutput {
	return o.ApplyT(func(v *NdbStretchedVlan) NdbStretchedVlanVlansListArrayOutput { return v.VlansLists }).(NdbStretchedVlanVlansListArrayOutput)
}

type NdbStretchedVlanArrayOutput struct{ *pulumi.OutputState }

func (NdbStretchedVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbStretchedVlan)(nil)).Elem()
}

func (o NdbStretchedVlanArrayOutput) ToNdbStretchedVlanArrayOutput() NdbStretchedVlanArrayOutput {
	return o
}

func (o NdbStretchedVlanArrayOutput) ToNdbStretchedVlanArrayOutputWithContext(ctx context.Context) NdbStretchedVlanArrayOutput {
	return o
}

func (o NdbStretchedVlanArrayOutput) Index(i pulumi.IntInput) NdbStretchedVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbStretchedVlan {
		return vs[0].([]*NdbStretchedVlan)[vs[1].(int)]
	}).(NdbStretchedVlanOutput)
}

type NdbStretchedVlanMapOutput struct{ *pulumi.OutputState }

func (NdbStretchedVlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbStretchedVlan)(nil)).Elem()
}

func (o NdbStretchedVlanMapOutput) ToNdbStretchedVlanMapOutput() NdbStretchedVlanMapOutput {
	return o
}

func (o NdbStretchedVlanMapOutput) ToNdbStretchedVlanMapOutputWithContext(ctx context.Context) NdbStretchedVlanMapOutput {
	return o
}

func (o NdbStretchedVlanMapOutput) MapIndex(k pulumi.StringInput) NdbStretchedVlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbStretchedVlan {
		return vs[0].(map[string]*NdbStretchedVlan)[vs[1].(string)]
	}).(NdbStretchedVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbStretchedVlanInput)(nil)).Elem(), &NdbStretchedVlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbStretchedVlanArrayInput)(nil)).Elem(), NdbStretchedVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbStretchedVlanMapInput)(nil)).Elem(), NdbStretchedVlanMap{})
	pulumi.RegisterOutputType(NdbStretchedVlanOutput{})
	pulumi.RegisterOutputType(NdbStretchedVlanArrayOutput{})
	pulumi.RegisterOutputType(NdbStretchedVlanMapOutput{})
}
