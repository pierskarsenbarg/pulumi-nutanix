// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VmNetworkDeviceAssignIpV2 struct {
	pulumi.CustomResourceState

	ExtId       pulumi.StringOutput                           `pulumi:"extId"`
	IpAddresses VmNetworkDeviceAssignIpV2IpAddressArrayOutput `pulumi:"ipAddresses"`
	VmExtId     pulumi.StringOutput                           `pulumi:"vmExtId"`
}

// NewVmNetworkDeviceAssignIpV2 registers a new resource with the given unique name, arguments, and options.
func NewVmNetworkDeviceAssignIpV2(ctx *pulumi.Context,
	name string, args *VmNetworkDeviceAssignIpV2Args, opts ...pulumi.ResourceOption) (*VmNetworkDeviceAssignIpV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	if args.VmExtId == nil {
		return nil, errors.New("invalid value for required argument 'VmExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmNetworkDeviceAssignIpV2
	err := ctx.RegisterResource("nutanix:index/vmNetworkDeviceAssignIpV2:VmNetworkDeviceAssignIpV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmNetworkDeviceAssignIpV2 gets an existing VmNetworkDeviceAssignIpV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmNetworkDeviceAssignIpV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmNetworkDeviceAssignIpV2State, opts ...pulumi.ResourceOption) (*VmNetworkDeviceAssignIpV2, error) {
	var resource VmNetworkDeviceAssignIpV2
	err := ctx.ReadResource("nutanix:index/vmNetworkDeviceAssignIpV2:VmNetworkDeviceAssignIpV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmNetworkDeviceAssignIpV2 resources.
type vmNetworkDeviceAssignIpV2State struct {
	ExtId       *string                              `pulumi:"extId"`
	IpAddresses []VmNetworkDeviceAssignIpV2IpAddress `pulumi:"ipAddresses"`
	VmExtId     *string                              `pulumi:"vmExtId"`
}

type VmNetworkDeviceAssignIpV2State struct {
	ExtId       pulumi.StringPtrInput
	IpAddresses VmNetworkDeviceAssignIpV2IpAddressArrayInput
	VmExtId     pulumi.StringPtrInput
}

func (VmNetworkDeviceAssignIpV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*vmNetworkDeviceAssignIpV2State)(nil)).Elem()
}

type vmNetworkDeviceAssignIpV2Args struct {
	ExtId       string                               `pulumi:"extId"`
	IpAddresses []VmNetworkDeviceAssignIpV2IpAddress `pulumi:"ipAddresses"`
	VmExtId     string                               `pulumi:"vmExtId"`
}

// The set of arguments for constructing a VmNetworkDeviceAssignIpV2 resource.
type VmNetworkDeviceAssignIpV2Args struct {
	ExtId       pulumi.StringInput
	IpAddresses VmNetworkDeviceAssignIpV2IpAddressArrayInput
	VmExtId     pulumi.StringInput
}

func (VmNetworkDeviceAssignIpV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vmNetworkDeviceAssignIpV2Args)(nil)).Elem()
}

type VmNetworkDeviceAssignIpV2Input interface {
	pulumi.Input

	ToVmNetworkDeviceAssignIpV2Output() VmNetworkDeviceAssignIpV2Output
	ToVmNetworkDeviceAssignIpV2OutputWithContext(ctx context.Context) VmNetworkDeviceAssignIpV2Output
}

func (*VmNetworkDeviceAssignIpV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VmNetworkDeviceAssignIpV2)(nil)).Elem()
}

func (i *VmNetworkDeviceAssignIpV2) ToVmNetworkDeviceAssignIpV2Output() VmNetworkDeviceAssignIpV2Output {
	return i.ToVmNetworkDeviceAssignIpV2OutputWithContext(context.Background())
}

func (i *VmNetworkDeviceAssignIpV2) ToVmNetworkDeviceAssignIpV2OutputWithContext(ctx context.Context) VmNetworkDeviceAssignIpV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VmNetworkDeviceAssignIpV2Output)
}

// VmNetworkDeviceAssignIpV2ArrayInput is an input type that accepts VmNetworkDeviceAssignIpV2Array and VmNetworkDeviceAssignIpV2ArrayOutput values.
// You can construct a concrete instance of `VmNetworkDeviceAssignIpV2ArrayInput` via:
//
//	VmNetworkDeviceAssignIpV2Array{ VmNetworkDeviceAssignIpV2Args{...} }
type VmNetworkDeviceAssignIpV2ArrayInput interface {
	pulumi.Input

	ToVmNetworkDeviceAssignIpV2ArrayOutput() VmNetworkDeviceAssignIpV2ArrayOutput
	ToVmNetworkDeviceAssignIpV2ArrayOutputWithContext(context.Context) VmNetworkDeviceAssignIpV2ArrayOutput
}

type VmNetworkDeviceAssignIpV2Array []VmNetworkDeviceAssignIpV2Input

func (VmNetworkDeviceAssignIpV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmNetworkDeviceAssignIpV2)(nil)).Elem()
}

func (i VmNetworkDeviceAssignIpV2Array) ToVmNetworkDeviceAssignIpV2ArrayOutput() VmNetworkDeviceAssignIpV2ArrayOutput {
	return i.ToVmNetworkDeviceAssignIpV2ArrayOutputWithContext(context.Background())
}

func (i VmNetworkDeviceAssignIpV2Array) ToVmNetworkDeviceAssignIpV2ArrayOutputWithContext(ctx context.Context) VmNetworkDeviceAssignIpV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmNetworkDeviceAssignIpV2ArrayOutput)
}

// VmNetworkDeviceAssignIpV2MapInput is an input type that accepts VmNetworkDeviceAssignIpV2Map and VmNetworkDeviceAssignIpV2MapOutput values.
// You can construct a concrete instance of `VmNetworkDeviceAssignIpV2MapInput` via:
//
//	VmNetworkDeviceAssignIpV2Map{ "key": VmNetworkDeviceAssignIpV2Args{...} }
type VmNetworkDeviceAssignIpV2MapInput interface {
	pulumi.Input

	ToVmNetworkDeviceAssignIpV2MapOutput() VmNetworkDeviceAssignIpV2MapOutput
	ToVmNetworkDeviceAssignIpV2MapOutputWithContext(context.Context) VmNetworkDeviceAssignIpV2MapOutput
}

type VmNetworkDeviceAssignIpV2Map map[string]VmNetworkDeviceAssignIpV2Input

func (VmNetworkDeviceAssignIpV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmNetworkDeviceAssignIpV2)(nil)).Elem()
}

func (i VmNetworkDeviceAssignIpV2Map) ToVmNetworkDeviceAssignIpV2MapOutput() VmNetworkDeviceAssignIpV2MapOutput {
	return i.ToVmNetworkDeviceAssignIpV2MapOutputWithContext(context.Background())
}

func (i VmNetworkDeviceAssignIpV2Map) ToVmNetworkDeviceAssignIpV2MapOutputWithContext(ctx context.Context) VmNetworkDeviceAssignIpV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmNetworkDeviceAssignIpV2MapOutput)
}

type VmNetworkDeviceAssignIpV2Output struct{ *pulumi.OutputState }

func (VmNetworkDeviceAssignIpV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VmNetworkDeviceAssignIpV2)(nil)).Elem()
}

func (o VmNetworkDeviceAssignIpV2Output) ToVmNetworkDeviceAssignIpV2Output() VmNetworkDeviceAssignIpV2Output {
	return o
}

func (o VmNetworkDeviceAssignIpV2Output) ToVmNetworkDeviceAssignIpV2OutputWithContext(ctx context.Context) VmNetworkDeviceAssignIpV2Output {
	return o
}

func (o VmNetworkDeviceAssignIpV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmNetworkDeviceAssignIpV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

func (o VmNetworkDeviceAssignIpV2Output) IpAddresses() VmNetworkDeviceAssignIpV2IpAddressArrayOutput {
	return o.ApplyT(func(v *VmNetworkDeviceAssignIpV2) VmNetworkDeviceAssignIpV2IpAddressArrayOutput { return v.IpAddresses }).(VmNetworkDeviceAssignIpV2IpAddressArrayOutput)
}

func (o VmNetworkDeviceAssignIpV2Output) VmExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmNetworkDeviceAssignIpV2) pulumi.StringOutput { return v.VmExtId }).(pulumi.StringOutput)
}

type VmNetworkDeviceAssignIpV2ArrayOutput struct{ *pulumi.OutputState }

func (VmNetworkDeviceAssignIpV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmNetworkDeviceAssignIpV2)(nil)).Elem()
}

func (o VmNetworkDeviceAssignIpV2ArrayOutput) ToVmNetworkDeviceAssignIpV2ArrayOutput() VmNetworkDeviceAssignIpV2ArrayOutput {
	return o
}

func (o VmNetworkDeviceAssignIpV2ArrayOutput) ToVmNetworkDeviceAssignIpV2ArrayOutputWithContext(ctx context.Context) VmNetworkDeviceAssignIpV2ArrayOutput {
	return o
}

func (o VmNetworkDeviceAssignIpV2ArrayOutput) Index(i pulumi.IntInput) VmNetworkDeviceAssignIpV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmNetworkDeviceAssignIpV2 {
		return vs[0].([]*VmNetworkDeviceAssignIpV2)[vs[1].(int)]
	}).(VmNetworkDeviceAssignIpV2Output)
}

type VmNetworkDeviceAssignIpV2MapOutput struct{ *pulumi.OutputState }

func (VmNetworkDeviceAssignIpV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmNetworkDeviceAssignIpV2)(nil)).Elem()
}

func (o VmNetworkDeviceAssignIpV2MapOutput) ToVmNetworkDeviceAssignIpV2MapOutput() VmNetworkDeviceAssignIpV2MapOutput {
	return o
}

func (o VmNetworkDeviceAssignIpV2MapOutput) ToVmNetworkDeviceAssignIpV2MapOutputWithContext(ctx context.Context) VmNetworkDeviceAssignIpV2MapOutput {
	return o
}

func (o VmNetworkDeviceAssignIpV2MapOutput) MapIndex(k pulumi.StringInput) VmNetworkDeviceAssignIpV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmNetworkDeviceAssignIpV2 {
		return vs[0].(map[string]*VmNetworkDeviceAssignIpV2)[vs[1].(string)]
	}).(VmNetworkDeviceAssignIpV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmNetworkDeviceAssignIpV2Input)(nil)).Elem(), &VmNetworkDeviceAssignIpV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmNetworkDeviceAssignIpV2ArrayInput)(nil)).Elem(), VmNetworkDeviceAssignIpV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmNetworkDeviceAssignIpV2MapInput)(nil)).Elem(), VmNetworkDeviceAssignIpV2Map{})
	pulumi.RegisterOutputType(VmNetworkDeviceAssignIpV2Output{})
	pulumi.RegisterOutputType(VmNetworkDeviceAssignIpV2ArrayOutput{})
	pulumi.RegisterOutputType(VmNetworkDeviceAssignIpV2MapOutput{})
}
