// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Nutanix Category key resource to Create a category key name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewCategoryKey(ctx, "test", &nutanix.CategoryKeyArgs{
//				Description: pulumi.String("App Support Category Key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CategoryKey struct {
	pulumi.CustomResourceState

	// (Optional) The version of the API.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// - (Optional) A description for category key.
	Description pulumi.StringOutput `pulumi:"description"`
	// - (Required) The name for the category key.
	Name pulumi.StringOutput `pulumi:"name"`
	// - Specifying whether its a system defined category.
	SystemDefined pulumi.BoolOutput `pulumi:"systemDefined"`
}

// NewCategoryKey registers a new resource with the given unique name, arguments, and options.
func NewCategoryKey(ctx *pulumi.Context,
	name string, args *CategoryKeyArgs, opts ...pulumi.ResourceOption) (*CategoryKey, error) {
	if args == nil {
		args = &CategoryKeyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CategoryKey
	err := ctx.RegisterResource("nutanix:index/categoryKey:CategoryKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCategoryKey gets an existing CategoryKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCategoryKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CategoryKeyState, opts ...pulumi.ResourceOption) (*CategoryKey, error) {
	var resource CategoryKey
	err := ctx.ReadResource("nutanix:index/categoryKey:CategoryKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CategoryKey resources.
type categoryKeyState struct {
	// (Optional) The version of the API.
	ApiVersion *string `pulumi:"apiVersion"`
	// - (Optional) A description for category key.
	Description *string `pulumi:"description"`
	// - (Required) The name for the category key.
	Name *string `pulumi:"name"`
	// - Specifying whether its a system defined category.
	SystemDefined *bool `pulumi:"systemDefined"`
}

type CategoryKeyState struct {
	// (Optional) The version of the API.
	ApiVersion pulumi.StringPtrInput
	// - (Optional) A description for category key.
	Description pulumi.StringPtrInput
	// - (Required) The name for the category key.
	Name pulumi.StringPtrInput
	// - Specifying whether its a system defined category.
	SystemDefined pulumi.BoolPtrInput
}

func (CategoryKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*categoryKeyState)(nil)).Elem()
}

type categoryKeyArgs struct {
	// - (Optional) A description for category key.
	Description *string `pulumi:"description"`
	// - (Required) The name for the category key.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CategoryKey resource.
type CategoryKeyArgs struct {
	// - (Optional) A description for category key.
	Description pulumi.StringPtrInput
	// - (Required) The name for the category key.
	Name pulumi.StringPtrInput
}

func (CategoryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*categoryKeyArgs)(nil)).Elem()
}

type CategoryKeyInput interface {
	pulumi.Input

	ToCategoryKeyOutput() CategoryKeyOutput
	ToCategoryKeyOutputWithContext(ctx context.Context) CategoryKeyOutput
}

func (*CategoryKey) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryKey)(nil)).Elem()
}

func (i *CategoryKey) ToCategoryKeyOutput() CategoryKeyOutput {
	return i.ToCategoryKeyOutputWithContext(context.Background())
}

func (i *CategoryKey) ToCategoryKeyOutputWithContext(ctx context.Context) CategoryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryKeyOutput)
}

func (i *CategoryKey) ToOutput(ctx context.Context) pulumix.Output[*CategoryKey] {
	return pulumix.Output[*CategoryKey]{
		OutputState: i.ToCategoryKeyOutputWithContext(ctx).OutputState,
	}
}

// CategoryKeyArrayInput is an input type that accepts CategoryKeyArray and CategoryKeyArrayOutput values.
// You can construct a concrete instance of `CategoryKeyArrayInput` via:
//
//	CategoryKeyArray{ CategoryKeyArgs{...} }
type CategoryKeyArrayInput interface {
	pulumi.Input

	ToCategoryKeyArrayOutput() CategoryKeyArrayOutput
	ToCategoryKeyArrayOutputWithContext(context.Context) CategoryKeyArrayOutput
}

type CategoryKeyArray []CategoryKeyInput

func (CategoryKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CategoryKey)(nil)).Elem()
}

func (i CategoryKeyArray) ToCategoryKeyArrayOutput() CategoryKeyArrayOutput {
	return i.ToCategoryKeyArrayOutputWithContext(context.Background())
}

func (i CategoryKeyArray) ToCategoryKeyArrayOutputWithContext(ctx context.Context) CategoryKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryKeyArrayOutput)
}

func (i CategoryKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]*CategoryKey] {
	return pulumix.Output[[]*CategoryKey]{
		OutputState: i.ToCategoryKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// CategoryKeyMapInput is an input type that accepts CategoryKeyMap and CategoryKeyMapOutput values.
// You can construct a concrete instance of `CategoryKeyMapInput` via:
//
//	CategoryKeyMap{ "key": CategoryKeyArgs{...} }
type CategoryKeyMapInput interface {
	pulumi.Input

	ToCategoryKeyMapOutput() CategoryKeyMapOutput
	ToCategoryKeyMapOutputWithContext(context.Context) CategoryKeyMapOutput
}

type CategoryKeyMap map[string]CategoryKeyInput

func (CategoryKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CategoryKey)(nil)).Elem()
}

func (i CategoryKeyMap) ToCategoryKeyMapOutput() CategoryKeyMapOutput {
	return i.ToCategoryKeyMapOutputWithContext(context.Background())
}

func (i CategoryKeyMap) ToCategoryKeyMapOutputWithContext(ctx context.Context) CategoryKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryKeyMapOutput)
}

func (i CategoryKeyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CategoryKey] {
	return pulumix.Output[map[string]*CategoryKey]{
		OutputState: i.ToCategoryKeyMapOutputWithContext(ctx).OutputState,
	}
}

type CategoryKeyOutput struct{ *pulumi.OutputState }

func (CategoryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryKey)(nil)).Elem()
}

func (o CategoryKeyOutput) ToCategoryKeyOutput() CategoryKeyOutput {
	return o
}

func (o CategoryKeyOutput) ToCategoryKeyOutputWithContext(ctx context.Context) CategoryKeyOutput {
	return o
}

func (o CategoryKeyOutput) ToOutput(ctx context.Context) pulumix.Output[*CategoryKey] {
	return pulumix.Output[*CategoryKey]{
		OutputState: o.OutputState,
	}
}

// (Optional) The version of the API.
func (o CategoryKeyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryKey) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// - (Optional) A description for category key.
func (o CategoryKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryKey) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// - (Required) The name for the category key.
func (o CategoryKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - Specifying whether its a system defined category.
func (o CategoryKeyOutput) SystemDefined() pulumi.BoolOutput {
	return o.ApplyT(func(v *CategoryKey) pulumi.BoolOutput { return v.SystemDefined }).(pulumi.BoolOutput)
}

type CategoryKeyArrayOutput struct{ *pulumi.OutputState }

func (CategoryKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CategoryKey)(nil)).Elem()
}

func (o CategoryKeyArrayOutput) ToCategoryKeyArrayOutput() CategoryKeyArrayOutput {
	return o
}

func (o CategoryKeyArrayOutput) ToCategoryKeyArrayOutputWithContext(ctx context.Context) CategoryKeyArrayOutput {
	return o
}

func (o CategoryKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CategoryKey] {
	return pulumix.Output[[]*CategoryKey]{
		OutputState: o.OutputState,
	}
}

func (o CategoryKeyArrayOutput) Index(i pulumi.IntInput) CategoryKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CategoryKey {
		return vs[0].([]*CategoryKey)[vs[1].(int)]
	}).(CategoryKeyOutput)
}

type CategoryKeyMapOutput struct{ *pulumi.OutputState }

func (CategoryKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CategoryKey)(nil)).Elem()
}

func (o CategoryKeyMapOutput) ToCategoryKeyMapOutput() CategoryKeyMapOutput {
	return o
}

func (o CategoryKeyMapOutput) ToCategoryKeyMapOutputWithContext(ctx context.Context) CategoryKeyMapOutput {
	return o
}

func (o CategoryKeyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CategoryKey] {
	return pulumix.Output[map[string]*CategoryKey]{
		OutputState: o.OutputState,
	}
}

func (o CategoryKeyMapOutput) MapIndex(k pulumi.StringInput) CategoryKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CategoryKey {
		return vs[0].(map[string]*CategoryKey)[vs[1].(string)]
	}).(CategoryKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryKeyInput)(nil)).Elem(), &CategoryKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryKeyArrayInput)(nil)).Elem(), CategoryKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryKeyMapInput)(nil)).Elem(), CategoryKeyMap{})
	pulumi.RegisterOutputType(CategoryKeyOutput{})
	pulumi.RegisterOutputType(CategoryKeyArrayOutput{})
	pulumi.RegisterOutputType(CategoryKeyMapOutput{})
}
