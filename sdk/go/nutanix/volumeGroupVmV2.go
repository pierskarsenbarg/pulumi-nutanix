// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to Create a new Volume Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewVolumeGroupVmV2(ctx, "vgVmExample", &nutanix.VolumeGroupVmV2Args{
//				VolumeGroupExtId: pulumi.String("<vg uuid>"),
//				VmExtId:          pulumi.Any(_var.Vg_vm_ext_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VolumeGroupVmV2 struct {
	pulumi.CustomResourceState

	// A globally unique identifier of a task.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group.
	//
	// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&version=v4.0).
	Index pulumi.IntPtrOutput `pulumi:"index"`
	// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
	VmExtId pulumi.StringOutput `pulumi:"vmExtId"`
	// -(Required) The external identifier of the volume group.
	VolumeGroupExtId pulumi.StringOutput `pulumi:"volumeGroupExtId"`
}

// NewVolumeGroupVmV2 registers a new resource with the given unique name, arguments, and options.
func NewVolumeGroupVmV2(ctx *pulumi.Context,
	name string, args *VolumeGroupVmV2Args, opts ...pulumi.ResourceOption) (*VolumeGroupVmV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VmExtId == nil {
		return nil, errors.New("invalid value for required argument 'VmExtId'")
	}
	if args.VolumeGroupExtId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeGroupExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeGroupVmV2
	err := ctx.RegisterResource("nutanix:index/volumeGroupVmV2:VolumeGroupVmV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeGroupVmV2 gets an existing VolumeGroupVmV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeGroupVmV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeGroupVmV2State, opts ...pulumi.ResourceOption) (*VolumeGroupVmV2, error) {
	var resource VolumeGroupVmV2
	err := ctx.ReadResource("nutanix:index/volumeGroupVmV2:VolumeGroupVmV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeGroupVmV2 resources.
type volumeGroupVmV2State struct {
	// A globally unique identifier of a task.
	ExtId *string `pulumi:"extId"`
	// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group.
	//
	// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&version=v4.0).
	Index *int `pulumi:"index"`
	// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
	VmExtId *string `pulumi:"vmExtId"`
	// -(Required) The external identifier of the volume group.
	VolumeGroupExtId *string `pulumi:"volumeGroupExtId"`
}

type VolumeGroupVmV2State struct {
	// A globally unique identifier of a task.
	ExtId pulumi.StringPtrInput
	// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group.
	//
	// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&version=v4.0).
	Index pulumi.IntPtrInput
	// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
	VmExtId pulumi.StringPtrInput
	// -(Required) The external identifier of the volume group.
	VolumeGroupExtId pulumi.StringPtrInput
}

func (VolumeGroupVmV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupVmV2State)(nil)).Elem()
}

type volumeGroupVmV2Args struct {
	// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group.
	//
	// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&version=v4.0).
	Index *int `pulumi:"index"`
	// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
	VmExtId string `pulumi:"vmExtId"`
	// -(Required) The external identifier of the volume group.
	VolumeGroupExtId string `pulumi:"volumeGroupExtId"`
}

// The set of arguments for constructing a VolumeGroupVmV2 resource.
type VolumeGroupVmV2Args struct {
	// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group.
	//
	// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&version=v4.0).
	Index pulumi.IntPtrInput
	// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
	VmExtId pulumi.StringInput
	// -(Required) The external identifier of the volume group.
	VolumeGroupExtId pulumi.StringInput
}

func (VolumeGroupVmV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupVmV2Args)(nil)).Elem()
}

type VolumeGroupVmV2Input interface {
	pulumi.Input

	ToVolumeGroupVmV2Output() VolumeGroupVmV2Output
	ToVolumeGroupVmV2OutputWithContext(ctx context.Context) VolumeGroupVmV2Output
}

func (*VolumeGroupVmV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupVmV2)(nil)).Elem()
}

func (i *VolumeGroupVmV2) ToVolumeGroupVmV2Output() VolumeGroupVmV2Output {
	return i.ToVolumeGroupVmV2OutputWithContext(context.Background())
}

func (i *VolumeGroupVmV2) ToVolumeGroupVmV2OutputWithContext(ctx context.Context) VolumeGroupVmV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupVmV2Output)
}

// VolumeGroupVmV2ArrayInput is an input type that accepts VolumeGroupVmV2Array and VolumeGroupVmV2ArrayOutput values.
// You can construct a concrete instance of `VolumeGroupVmV2ArrayInput` via:
//
//	VolumeGroupVmV2Array{ VolumeGroupVmV2Args{...} }
type VolumeGroupVmV2ArrayInput interface {
	pulumi.Input

	ToVolumeGroupVmV2ArrayOutput() VolumeGroupVmV2ArrayOutput
	ToVolumeGroupVmV2ArrayOutputWithContext(context.Context) VolumeGroupVmV2ArrayOutput
}

type VolumeGroupVmV2Array []VolumeGroupVmV2Input

func (VolumeGroupVmV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupVmV2)(nil)).Elem()
}

func (i VolumeGroupVmV2Array) ToVolumeGroupVmV2ArrayOutput() VolumeGroupVmV2ArrayOutput {
	return i.ToVolumeGroupVmV2ArrayOutputWithContext(context.Background())
}

func (i VolumeGroupVmV2Array) ToVolumeGroupVmV2ArrayOutputWithContext(ctx context.Context) VolumeGroupVmV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupVmV2ArrayOutput)
}

// VolumeGroupVmV2MapInput is an input type that accepts VolumeGroupVmV2Map and VolumeGroupVmV2MapOutput values.
// You can construct a concrete instance of `VolumeGroupVmV2MapInput` via:
//
//	VolumeGroupVmV2Map{ "key": VolumeGroupVmV2Args{...} }
type VolumeGroupVmV2MapInput interface {
	pulumi.Input

	ToVolumeGroupVmV2MapOutput() VolumeGroupVmV2MapOutput
	ToVolumeGroupVmV2MapOutputWithContext(context.Context) VolumeGroupVmV2MapOutput
}

type VolumeGroupVmV2Map map[string]VolumeGroupVmV2Input

func (VolumeGroupVmV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupVmV2)(nil)).Elem()
}

func (i VolumeGroupVmV2Map) ToVolumeGroupVmV2MapOutput() VolumeGroupVmV2MapOutput {
	return i.ToVolumeGroupVmV2MapOutputWithContext(context.Background())
}

func (i VolumeGroupVmV2Map) ToVolumeGroupVmV2MapOutputWithContext(ctx context.Context) VolumeGroupVmV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupVmV2MapOutput)
}

type VolumeGroupVmV2Output struct{ *pulumi.OutputState }

func (VolumeGroupVmV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupVmV2)(nil)).Elem()
}

func (o VolumeGroupVmV2Output) ToVolumeGroupVmV2Output() VolumeGroupVmV2Output {
	return o
}

func (o VolumeGroupVmV2Output) ToVolumeGroupVmV2OutputWithContext(ctx context.Context) VolumeGroupVmV2Output {
	return o
}

// A globally unique identifier of a task.
func (o VolumeGroupVmV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupVmV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group.
//
// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&version=v4.0).
func (o VolumeGroupVmV2Output) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeGroupVmV2) pulumi.IntPtrOutput { return v.Index }).(pulumi.IntPtrOutput)
}

// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
func (o VolumeGroupVmV2Output) VmExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupVmV2) pulumi.StringOutput { return v.VmExtId }).(pulumi.StringOutput)
}

// -(Required) The external identifier of the volume group.
func (o VolumeGroupVmV2Output) VolumeGroupExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupVmV2) pulumi.StringOutput { return v.VolumeGroupExtId }).(pulumi.StringOutput)
}

type VolumeGroupVmV2ArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupVmV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupVmV2)(nil)).Elem()
}

func (o VolumeGroupVmV2ArrayOutput) ToVolumeGroupVmV2ArrayOutput() VolumeGroupVmV2ArrayOutput {
	return o
}

func (o VolumeGroupVmV2ArrayOutput) ToVolumeGroupVmV2ArrayOutputWithContext(ctx context.Context) VolumeGroupVmV2ArrayOutput {
	return o
}

func (o VolumeGroupVmV2ArrayOutput) Index(i pulumi.IntInput) VolumeGroupVmV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeGroupVmV2 {
		return vs[0].([]*VolumeGroupVmV2)[vs[1].(int)]
	}).(VolumeGroupVmV2Output)
}

type VolumeGroupVmV2MapOutput struct{ *pulumi.OutputState }

func (VolumeGroupVmV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupVmV2)(nil)).Elem()
}

func (o VolumeGroupVmV2MapOutput) ToVolumeGroupVmV2MapOutput() VolumeGroupVmV2MapOutput {
	return o
}

func (o VolumeGroupVmV2MapOutput) ToVolumeGroupVmV2MapOutputWithContext(ctx context.Context) VolumeGroupVmV2MapOutput {
	return o
}

func (o VolumeGroupVmV2MapOutput) MapIndex(k pulumi.StringInput) VolumeGroupVmV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeGroupVmV2 {
		return vs[0].(map[string]*VolumeGroupVmV2)[vs[1].(string)]
	}).(VolumeGroupVmV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupVmV2Input)(nil)).Elem(), &VolumeGroupVmV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupVmV2ArrayInput)(nil)).Elem(), VolumeGroupVmV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupVmV2MapInput)(nil)).Elem(), VolumeGroupVmV2Map{})
	pulumi.RegisterOutputType(VolumeGroupVmV2Output{})
	pulumi.RegisterOutputType(VolumeGroupVmV2ArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupVmV2MapOutput{})
}
