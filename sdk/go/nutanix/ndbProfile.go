// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NdbProfile struct {
	pulumi.CustomResourceState

	AssocDatabases            pulumi.StringArrayOutput                      `pulumi:"assocDatabases"`
	AssocDbServers            pulumi.StringArrayOutput                      `pulumi:"assocDbServers"`
	ClusterAvailabilities     NdbProfileClusterAvailabilityArrayOutput      `pulumi:"clusterAvailabilities"`
	ComputeProfiles           NdbProfileComputeProfileArrayOutput           `pulumi:"computeProfiles"`
	DatabaseParameterProfiles NdbProfileDatabaseParameterProfileArrayOutput `pulumi:"databaseParameterProfiles"`
	Description               pulumi.StringPtrOutput                        `pulumi:"description"`
	EngineType                pulumi.StringOutput                           `pulumi:"engineType"`
	LatestVersion             pulumi.StringOutput                           `pulumi:"latestVersion"`
	LatestVersionId           pulumi.StringOutput                           `pulumi:"latestVersionId"`
	Name                      pulumi.StringOutput                           `pulumi:"name"`
	NetworkProfiles           NdbProfileNetworkProfileArrayOutput           `pulumi:"networkProfiles"`
	NxClusterId               pulumi.StringOutput                           `pulumi:"nxClusterId"`
	Owner                     pulumi.StringOutput                           `pulumi:"owner"`
	Published                 pulumi.BoolPtrOutput                          `pulumi:"published"`
	SoftwareProfile           NdbProfileSoftwareProfilePtrOutput            `pulumi:"softwareProfile"`
	Status                    pulumi.StringOutput                           `pulumi:"status"`
	Versions                  NdbProfileVersionArrayOutput                  `pulumi:"versions"`
}

// NewNdbProfile registers a new resource with the given unique name, arguments, and options.
func NewNdbProfile(ctx *pulumi.Context,
	name string, args *NdbProfileArgs, opts ...pulumi.ResourceOption) (*NdbProfile, error) {
	if args == nil {
		args = &NdbProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbProfile
	err := ctx.RegisterResource("nutanix:index/ndbProfile:NdbProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbProfile gets an existing NdbProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbProfileState, opts ...pulumi.ResourceOption) (*NdbProfile, error) {
	var resource NdbProfile
	err := ctx.ReadResource("nutanix:index/ndbProfile:NdbProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbProfile resources.
type ndbProfileState struct {
	AssocDatabases            []string                             `pulumi:"assocDatabases"`
	AssocDbServers            []string                             `pulumi:"assocDbServers"`
	ClusterAvailabilities     []NdbProfileClusterAvailability      `pulumi:"clusterAvailabilities"`
	ComputeProfiles           []NdbProfileComputeProfile           `pulumi:"computeProfiles"`
	DatabaseParameterProfiles []NdbProfileDatabaseParameterProfile `pulumi:"databaseParameterProfiles"`
	Description               *string                              `pulumi:"description"`
	EngineType                *string                              `pulumi:"engineType"`
	LatestVersion             *string                              `pulumi:"latestVersion"`
	LatestVersionId           *string                              `pulumi:"latestVersionId"`
	Name                      *string                              `pulumi:"name"`
	NetworkProfiles           []NdbProfileNetworkProfile           `pulumi:"networkProfiles"`
	NxClusterId               *string                              `pulumi:"nxClusterId"`
	Owner                     *string                              `pulumi:"owner"`
	Published                 *bool                                `pulumi:"published"`
	SoftwareProfile           *NdbProfileSoftwareProfile           `pulumi:"softwareProfile"`
	Status                    *string                              `pulumi:"status"`
	Versions                  []NdbProfileVersion                  `pulumi:"versions"`
}

type NdbProfileState struct {
	AssocDatabases            pulumi.StringArrayInput
	AssocDbServers            pulumi.StringArrayInput
	ClusterAvailabilities     NdbProfileClusterAvailabilityArrayInput
	ComputeProfiles           NdbProfileComputeProfileArrayInput
	DatabaseParameterProfiles NdbProfileDatabaseParameterProfileArrayInput
	Description               pulumi.StringPtrInput
	EngineType                pulumi.StringPtrInput
	LatestVersion             pulumi.StringPtrInput
	LatestVersionId           pulumi.StringPtrInput
	Name                      pulumi.StringPtrInput
	NetworkProfiles           NdbProfileNetworkProfileArrayInput
	NxClusterId               pulumi.StringPtrInput
	Owner                     pulumi.StringPtrInput
	Published                 pulumi.BoolPtrInput
	SoftwareProfile           NdbProfileSoftwareProfilePtrInput
	Status                    pulumi.StringPtrInput
	Versions                  NdbProfileVersionArrayInput
}

func (NdbProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbProfileState)(nil)).Elem()
}

type ndbProfileArgs struct {
	ComputeProfiles           []NdbProfileComputeProfile           `pulumi:"computeProfiles"`
	DatabaseParameterProfiles []NdbProfileDatabaseParameterProfile `pulumi:"databaseParameterProfiles"`
	Description               *string                              `pulumi:"description"`
	EngineType                *string                              `pulumi:"engineType"`
	Name                      *string                              `pulumi:"name"`
	NetworkProfiles           []NdbProfileNetworkProfile           `pulumi:"networkProfiles"`
	Published                 *bool                                `pulumi:"published"`
	SoftwareProfile           *NdbProfileSoftwareProfile           `pulumi:"softwareProfile"`
}

// The set of arguments for constructing a NdbProfile resource.
type NdbProfileArgs struct {
	ComputeProfiles           NdbProfileComputeProfileArrayInput
	DatabaseParameterProfiles NdbProfileDatabaseParameterProfileArrayInput
	Description               pulumi.StringPtrInput
	EngineType                pulumi.StringPtrInput
	Name                      pulumi.StringPtrInput
	NetworkProfiles           NdbProfileNetworkProfileArrayInput
	Published                 pulumi.BoolPtrInput
	SoftwareProfile           NdbProfileSoftwareProfilePtrInput
}

func (NdbProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbProfileArgs)(nil)).Elem()
}

type NdbProfileInput interface {
	pulumi.Input

	ToNdbProfileOutput() NdbProfileOutput
	ToNdbProfileOutputWithContext(ctx context.Context) NdbProfileOutput
}

func (*NdbProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbProfile)(nil)).Elem()
}

func (i *NdbProfile) ToNdbProfileOutput() NdbProfileOutput {
	return i.ToNdbProfileOutputWithContext(context.Background())
}

func (i *NdbProfile) ToNdbProfileOutputWithContext(ctx context.Context) NdbProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbProfileOutput)
}

// NdbProfileArrayInput is an input type that accepts NdbProfileArray and NdbProfileArrayOutput values.
// You can construct a concrete instance of `NdbProfileArrayInput` via:
//
//	NdbProfileArray{ NdbProfileArgs{...} }
type NdbProfileArrayInput interface {
	pulumi.Input

	ToNdbProfileArrayOutput() NdbProfileArrayOutput
	ToNdbProfileArrayOutputWithContext(context.Context) NdbProfileArrayOutput
}

type NdbProfileArray []NdbProfileInput

func (NdbProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbProfile)(nil)).Elem()
}

func (i NdbProfileArray) ToNdbProfileArrayOutput() NdbProfileArrayOutput {
	return i.ToNdbProfileArrayOutputWithContext(context.Background())
}

func (i NdbProfileArray) ToNdbProfileArrayOutputWithContext(ctx context.Context) NdbProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbProfileArrayOutput)
}

// NdbProfileMapInput is an input type that accepts NdbProfileMap and NdbProfileMapOutput values.
// You can construct a concrete instance of `NdbProfileMapInput` via:
//
//	NdbProfileMap{ "key": NdbProfileArgs{...} }
type NdbProfileMapInput interface {
	pulumi.Input

	ToNdbProfileMapOutput() NdbProfileMapOutput
	ToNdbProfileMapOutputWithContext(context.Context) NdbProfileMapOutput
}

type NdbProfileMap map[string]NdbProfileInput

func (NdbProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbProfile)(nil)).Elem()
}

func (i NdbProfileMap) ToNdbProfileMapOutput() NdbProfileMapOutput {
	return i.ToNdbProfileMapOutputWithContext(context.Background())
}

func (i NdbProfileMap) ToNdbProfileMapOutputWithContext(ctx context.Context) NdbProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbProfileMapOutput)
}

type NdbProfileOutput struct{ *pulumi.OutputState }

func (NdbProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbProfile)(nil)).Elem()
}

func (o NdbProfileOutput) ToNdbProfileOutput() NdbProfileOutput {
	return o
}

func (o NdbProfileOutput) ToNdbProfileOutputWithContext(ctx context.Context) NdbProfileOutput {
	return o
}

func (o NdbProfileOutput) AssocDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringArrayOutput { return v.AssocDatabases }).(pulumi.StringArrayOutput)
}

func (o NdbProfileOutput) AssocDbServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringArrayOutput { return v.AssocDbServers }).(pulumi.StringArrayOutput)
}

func (o NdbProfileOutput) ClusterAvailabilities() NdbProfileClusterAvailabilityArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileClusterAvailabilityArrayOutput { return v.ClusterAvailabilities }).(NdbProfileClusterAvailabilityArrayOutput)
}

func (o NdbProfileOutput) ComputeProfiles() NdbProfileComputeProfileArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileComputeProfileArrayOutput { return v.ComputeProfiles }).(NdbProfileComputeProfileArrayOutput)
}

func (o NdbProfileOutput) DatabaseParameterProfiles() NdbProfileDatabaseParameterProfileArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileDatabaseParameterProfileArrayOutput { return v.DatabaseParameterProfiles }).(NdbProfileDatabaseParameterProfileArrayOutput)
}

func (o NdbProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NdbProfileOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

func (o NdbProfileOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.LatestVersion }).(pulumi.StringOutput)
}

func (o NdbProfileOutput) LatestVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.LatestVersionId }).(pulumi.StringOutput)
}

func (o NdbProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NdbProfileOutput) NetworkProfiles() NdbProfileNetworkProfileArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileNetworkProfileArrayOutput { return v.NetworkProfiles }).(NdbProfileNetworkProfileArrayOutput)
}

func (o NdbProfileOutput) NxClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.NxClusterId }).(pulumi.StringOutput)
}

func (o NdbProfileOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o NdbProfileOutput) Published() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.BoolPtrOutput { return v.Published }).(pulumi.BoolPtrOutput)
}

func (o NdbProfileOutput) SoftwareProfile() NdbProfileSoftwareProfilePtrOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileSoftwareProfilePtrOutput { return v.SoftwareProfile }).(NdbProfileSoftwareProfilePtrOutput)
}

func (o NdbProfileOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NdbProfileOutput) Versions() NdbProfileVersionArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileVersionArrayOutput { return v.Versions }).(NdbProfileVersionArrayOutput)
}

type NdbProfileArrayOutput struct{ *pulumi.OutputState }

func (NdbProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbProfile)(nil)).Elem()
}

func (o NdbProfileArrayOutput) ToNdbProfileArrayOutput() NdbProfileArrayOutput {
	return o
}

func (o NdbProfileArrayOutput) ToNdbProfileArrayOutputWithContext(ctx context.Context) NdbProfileArrayOutput {
	return o
}

func (o NdbProfileArrayOutput) Index(i pulumi.IntInput) NdbProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbProfile {
		return vs[0].([]*NdbProfile)[vs[1].(int)]
	}).(NdbProfileOutput)
}

type NdbProfileMapOutput struct{ *pulumi.OutputState }

func (NdbProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbProfile)(nil)).Elem()
}

func (o NdbProfileMapOutput) ToNdbProfileMapOutput() NdbProfileMapOutput {
	return o
}

func (o NdbProfileMapOutput) ToNdbProfileMapOutputWithContext(ctx context.Context) NdbProfileMapOutput {
	return o
}

func (o NdbProfileMapOutput) MapIndex(k pulumi.StringInput) NdbProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbProfile {
		return vs[0].(map[string]*NdbProfile)[vs[1].(string)]
	}).(NdbProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbProfileInput)(nil)).Elem(), &NdbProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbProfileArrayInput)(nil)).Elem(), NdbProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbProfileMapInput)(nil)).Elem(), NdbProfileMap{})
	pulumi.RegisterOutputType(NdbProfileOutput{})
	pulumi.RegisterOutputType(NdbProfileArrayOutput{})
	pulumi.RegisterOutputType(NdbProfileMapOutput{})
}
