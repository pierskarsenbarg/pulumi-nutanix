// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create profiles (Software, Network, Database Parameter, Compute) based on the input parameters.
type NdbProfile struct {
	pulumi.CustomResourceState

	// associated databases of profiles
	AssocDatabases pulumi.StringArrayOutput `pulumi:"assocDatabases"`
	// associated database servers for associated profiles
	AssocDbServers pulumi.StringArrayOutput `pulumi:"assocDbServers"`
	// cluster availability of profile
	ClusterAvailabilities NdbProfileClusterAvailabilityArrayOutput `pulumi:"clusterAvailabilities"`
	// Compute Profile
	ComputeProfiles NdbProfileComputeProfileArrayOutput `pulumi:"computeProfiles"`
	// Database Parameter Profile
	DatabaseParameterProfiles NdbProfileDatabaseParameterProfileArrayOutput `pulumi:"databaseParameterProfiles"`
	// Description of profile
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Engine Type of database
	EngineType pulumi.StringOutput `pulumi:"engineType"`
	// latest version of profile
	LatestVersion pulumi.StringOutput `pulumi:"latestVersion"`
	// latest version id of profile
	LatestVersionId pulumi.StringOutput `pulumi:"latestVersionId"`
	// Name of profile
	Name pulumi.StringOutput `pulumi:"name"`
	// Network Profile
	NetworkProfiles NdbProfileNetworkProfileArrayOutput `pulumi:"networkProfiles"`
	// cluster on which profile created
	NxClusterId pulumi.StringOutput `pulumi:"nxClusterId"`
	// owner  of profile
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Publish for all users
	Published pulumi.BoolPtrOutput `pulumi:"published"`
	// Software Profile
	SoftwareProfile NdbProfileSoftwareProfilePtrOutput `pulumi:"softwareProfile"`
	// status of profile
	Status pulumi.StringOutput `pulumi:"status"`
	// versions of associated profiles
	Versions NdbProfileVersionArrayOutput `pulumi:"versions"`
}

// NewNdbProfile registers a new resource with the given unique name, arguments, and options.
func NewNdbProfile(ctx *pulumi.Context,
	name string, args *NdbProfileArgs, opts ...pulumi.ResourceOption) (*NdbProfile, error) {
	if args == nil {
		args = &NdbProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbProfile
	err := ctx.RegisterResource("nutanix:index/ndbProfile:NdbProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbProfile gets an existing NdbProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbProfileState, opts ...pulumi.ResourceOption) (*NdbProfile, error) {
	var resource NdbProfile
	err := ctx.ReadResource("nutanix:index/ndbProfile:NdbProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbProfile resources.
type ndbProfileState struct {
	// associated databases of profiles
	AssocDatabases []string `pulumi:"assocDatabases"`
	// associated database servers for associated profiles
	AssocDbServers []string `pulumi:"assocDbServers"`
	// cluster availability of profile
	ClusterAvailabilities []NdbProfileClusterAvailability `pulumi:"clusterAvailabilities"`
	// Compute Profile
	ComputeProfiles []NdbProfileComputeProfile `pulumi:"computeProfiles"`
	// Database Parameter Profile
	DatabaseParameterProfiles []NdbProfileDatabaseParameterProfile `pulumi:"databaseParameterProfiles"`
	// Description of profile
	Description *string `pulumi:"description"`
	// Engine Type of database
	EngineType *string `pulumi:"engineType"`
	// latest version of profile
	LatestVersion *string `pulumi:"latestVersion"`
	// latest version id of profile
	LatestVersionId *string `pulumi:"latestVersionId"`
	// Name of profile
	Name *string `pulumi:"name"`
	// Network Profile
	NetworkProfiles []NdbProfileNetworkProfile `pulumi:"networkProfiles"`
	// cluster on which profile created
	NxClusterId *string `pulumi:"nxClusterId"`
	// owner  of profile
	Owner *string `pulumi:"owner"`
	// Publish for all users
	Published *bool `pulumi:"published"`
	// Software Profile
	SoftwareProfile *NdbProfileSoftwareProfile `pulumi:"softwareProfile"`
	// status of profile
	Status *string `pulumi:"status"`
	// versions of associated profiles
	Versions []NdbProfileVersion `pulumi:"versions"`
}

type NdbProfileState struct {
	// associated databases of profiles
	AssocDatabases pulumi.StringArrayInput
	// associated database servers for associated profiles
	AssocDbServers pulumi.StringArrayInput
	// cluster availability of profile
	ClusterAvailabilities NdbProfileClusterAvailabilityArrayInput
	// Compute Profile
	ComputeProfiles NdbProfileComputeProfileArrayInput
	// Database Parameter Profile
	DatabaseParameterProfiles NdbProfileDatabaseParameterProfileArrayInput
	// Description of profile
	Description pulumi.StringPtrInput
	// Engine Type of database
	EngineType pulumi.StringPtrInput
	// latest version of profile
	LatestVersion pulumi.StringPtrInput
	// latest version id of profile
	LatestVersionId pulumi.StringPtrInput
	// Name of profile
	Name pulumi.StringPtrInput
	// Network Profile
	NetworkProfiles NdbProfileNetworkProfileArrayInput
	// cluster on which profile created
	NxClusterId pulumi.StringPtrInput
	// owner  of profile
	Owner pulumi.StringPtrInput
	// Publish for all users
	Published pulumi.BoolPtrInput
	// Software Profile
	SoftwareProfile NdbProfileSoftwareProfilePtrInput
	// status of profile
	Status pulumi.StringPtrInput
	// versions of associated profiles
	Versions NdbProfileVersionArrayInput
}

func (NdbProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbProfileState)(nil)).Elem()
}

type ndbProfileArgs struct {
	// Compute Profile
	ComputeProfiles []NdbProfileComputeProfile `pulumi:"computeProfiles"`
	// Database Parameter Profile
	DatabaseParameterProfiles []NdbProfileDatabaseParameterProfile `pulumi:"databaseParameterProfiles"`
	// Description of profile
	Description *string `pulumi:"description"`
	// Engine Type of database
	EngineType *string `pulumi:"engineType"`
	// Name of profile
	Name *string `pulumi:"name"`
	// Network Profile
	NetworkProfiles []NdbProfileNetworkProfile `pulumi:"networkProfiles"`
	// Publish for all users
	Published *bool `pulumi:"published"`
	// Software Profile
	SoftwareProfile *NdbProfileSoftwareProfile `pulumi:"softwareProfile"`
}

// The set of arguments for constructing a NdbProfile resource.
type NdbProfileArgs struct {
	// Compute Profile
	ComputeProfiles NdbProfileComputeProfileArrayInput
	// Database Parameter Profile
	DatabaseParameterProfiles NdbProfileDatabaseParameterProfileArrayInput
	// Description of profile
	Description pulumi.StringPtrInput
	// Engine Type of database
	EngineType pulumi.StringPtrInput
	// Name of profile
	Name pulumi.StringPtrInput
	// Network Profile
	NetworkProfiles NdbProfileNetworkProfileArrayInput
	// Publish for all users
	Published pulumi.BoolPtrInput
	// Software Profile
	SoftwareProfile NdbProfileSoftwareProfilePtrInput
}

func (NdbProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbProfileArgs)(nil)).Elem()
}

type NdbProfileInput interface {
	pulumi.Input

	ToNdbProfileOutput() NdbProfileOutput
	ToNdbProfileOutputWithContext(ctx context.Context) NdbProfileOutput
}

func (*NdbProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbProfile)(nil)).Elem()
}

func (i *NdbProfile) ToNdbProfileOutput() NdbProfileOutput {
	return i.ToNdbProfileOutputWithContext(context.Background())
}

func (i *NdbProfile) ToNdbProfileOutputWithContext(ctx context.Context) NdbProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbProfileOutput)
}

// NdbProfileArrayInput is an input type that accepts NdbProfileArray and NdbProfileArrayOutput values.
// You can construct a concrete instance of `NdbProfileArrayInput` via:
//
//	NdbProfileArray{ NdbProfileArgs{...} }
type NdbProfileArrayInput interface {
	pulumi.Input

	ToNdbProfileArrayOutput() NdbProfileArrayOutput
	ToNdbProfileArrayOutputWithContext(context.Context) NdbProfileArrayOutput
}

type NdbProfileArray []NdbProfileInput

func (NdbProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbProfile)(nil)).Elem()
}

func (i NdbProfileArray) ToNdbProfileArrayOutput() NdbProfileArrayOutput {
	return i.ToNdbProfileArrayOutputWithContext(context.Background())
}

func (i NdbProfileArray) ToNdbProfileArrayOutputWithContext(ctx context.Context) NdbProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbProfileArrayOutput)
}

// NdbProfileMapInput is an input type that accepts NdbProfileMap and NdbProfileMapOutput values.
// You can construct a concrete instance of `NdbProfileMapInput` via:
//
//	NdbProfileMap{ "key": NdbProfileArgs{...} }
type NdbProfileMapInput interface {
	pulumi.Input

	ToNdbProfileMapOutput() NdbProfileMapOutput
	ToNdbProfileMapOutputWithContext(context.Context) NdbProfileMapOutput
}

type NdbProfileMap map[string]NdbProfileInput

func (NdbProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbProfile)(nil)).Elem()
}

func (i NdbProfileMap) ToNdbProfileMapOutput() NdbProfileMapOutput {
	return i.ToNdbProfileMapOutputWithContext(context.Background())
}

func (i NdbProfileMap) ToNdbProfileMapOutputWithContext(ctx context.Context) NdbProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbProfileMapOutput)
}

type NdbProfileOutput struct{ *pulumi.OutputState }

func (NdbProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbProfile)(nil)).Elem()
}

func (o NdbProfileOutput) ToNdbProfileOutput() NdbProfileOutput {
	return o
}

func (o NdbProfileOutput) ToNdbProfileOutputWithContext(ctx context.Context) NdbProfileOutput {
	return o
}

// associated databases of profiles
func (o NdbProfileOutput) AssocDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringArrayOutput { return v.AssocDatabases }).(pulumi.StringArrayOutput)
}

// associated database servers for associated profiles
func (o NdbProfileOutput) AssocDbServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringArrayOutput { return v.AssocDbServers }).(pulumi.StringArrayOutput)
}

// cluster availability of profile
func (o NdbProfileOutput) ClusterAvailabilities() NdbProfileClusterAvailabilityArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileClusterAvailabilityArrayOutput { return v.ClusterAvailabilities }).(NdbProfileClusterAvailabilityArrayOutput)
}

// Compute Profile
func (o NdbProfileOutput) ComputeProfiles() NdbProfileComputeProfileArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileComputeProfileArrayOutput { return v.ComputeProfiles }).(NdbProfileComputeProfileArrayOutput)
}

// Database Parameter Profile
func (o NdbProfileOutput) DatabaseParameterProfiles() NdbProfileDatabaseParameterProfileArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileDatabaseParameterProfileArrayOutput { return v.DatabaseParameterProfiles }).(NdbProfileDatabaseParameterProfileArrayOutput)
}

// Description of profile
func (o NdbProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Engine Type of database
func (o NdbProfileOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

// latest version of profile
func (o NdbProfileOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.LatestVersion }).(pulumi.StringOutput)
}

// latest version id of profile
func (o NdbProfileOutput) LatestVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.LatestVersionId }).(pulumi.StringOutput)
}

// Name of profile
func (o NdbProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network Profile
func (o NdbProfileOutput) NetworkProfiles() NdbProfileNetworkProfileArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileNetworkProfileArrayOutput { return v.NetworkProfiles }).(NdbProfileNetworkProfileArrayOutput)
}

// cluster on which profile created
func (o NdbProfileOutput) NxClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.NxClusterId }).(pulumi.StringOutput)
}

// owner  of profile
func (o NdbProfileOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Publish for all users
func (o NdbProfileOutput) Published() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.BoolPtrOutput { return v.Published }).(pulumi.BoolPtrOutput)
}

// Software Profile
func (o NdbProfileOutput) SoftwareProfile() NdbProfileSoftwareProfilePtrOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileSoftwareProfilePtrOutput { return v.SoftwareProfile }).(NdbProfileSoftwareProfilePtrOutput)
}

// status of profile
func (o NdbProfileOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbProfile) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// versions of associated profiles
func (o NdbProfileOutput) Versions() NdbProfileVersionArrayOutput {
	return o.ApplyT(func(v *NdbProfile) NdbProfileVersionArrayOutput { return v.Versions }).(NdbProfileVersionArrayOutput)
}

type NdbProfileArrayOutput struct{ *pulumi.OutputState }

func (NdbProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbProfile)(nil)).Elem()
}

func (o NdbProfileArrayOutput) ToNdbProfileArrayOutput() NdbProfileArrayOutput {
	return o
}

func (o NdbProfileArrayOutput) ToNdbProfileArrayOutputWithContext(ctx context.Context) NdbProfileArrayOutput {
	return o
}

func (o NdbProfileArrayOutput) Index(i pulumi.IntInput) NdbProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbProfile {
		return vs[0].([]*NdbProfile)[vs[1].(int)]
	}).(NdbProfileOutput)
}

type NdbProfileMapOutput struct{ *pulumi.OutputState }

func (NdbProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbProfile)(nil)).Elem()
}

func (o NdbProfileMapOutput) ToNdbProfileMapOutput() NdbProfileMapOutput {
	return o
}

func (o NdbProfileMapOutput) ToNdbProfileMapOutputWithContext(ctx context.Context) NdbProfileMapOutput {
	return o
}

func (o NdbProfileMapOutput) MapIndex(k pulumi.StringInput) NdbProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbProfile {
		return vs[0].(map[string]*NdbProfile)[vs[1].(string)]
	}).(NdbProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbProfileInput)(nil)).Elem(), &NdbProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbProfileArrayInput)(nil)).Elem(), NdbProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbProfileMapInput)(nil)).Elem(), NdbProfileMap{})
	pulumi.RegisterOutputType(NdbProfileOutput{})
	pulumi.RegisterOutputType(NdbProfileArrayOutput{})
	pulumi.RegisterOutputType(NdbProfileMapOutput{})
}
