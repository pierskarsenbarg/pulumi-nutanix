// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to add a User group to the system..
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewUserGroupsV2(ctx, "usrGroup", &nutanix.UserGroupsV2Args{
//				DistinguishedName: pulumi.String("<distinguished name of the user group>"),
//				GroupType:         pulumi.String("<group Type>"),
//				IdpId:             pulumi.String("<idp uuid of user group>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UserGroupsV2 struct {
	pulumi.CustomResourceState

	// - User or Service who created the User Group.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// - Creation time of the User Group.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// -(Optional) Identifier for the User Group in the form of a distinguished name.
	DistinguishedName pulumi.StringPtrOutput `pulumi:"distinguishedName"`
	// The External Identifier of the User Group.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
	GroupType pulumi.StringOutput `pulumi:"groupType"`
	// -(Required) Identifier of the IDP for the User Group.
	IdpId pulumi.StringOutput `pulumi:"idpId"`
	// - Last updated time of the User Group.
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// -(Optional) Common Name of the User Group.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewUserGroupsV2 registers a new resource with the given unique name, arguments, and options.
func NewUserGroupsV2(ctx *pulumi.Context,
	name string, args *UserGroupsV2Args, opts ...pulumi.ResourceOption) (*UserGroupsV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupType == nil {
		return nil, errors.New("invalid value for required argument 'GroupType'")
	}
	if args.IdpId == nil {
		return nil, errors.New("invalid value for required argument 'IdpId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupsV2
	err := ctx.RegisterResource("nutanix:index/userGroupsV2:UserGroupsV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupsV2 gets an existing UserGroupsV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupsV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupsV2State, opts ...pulumi.ResourceOption) (*UserGroupsV2, error) {
	var resource UserGroupsV2
	err := ctx.ReadResource("nutanix:index/userGroupsV2:UserGroupsV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupsV2 resources.
type userGroupsV2State struct {
	// - User or Service who created the User Group.
	CreatedBy *string `pulumi:"createdBy"`
	// - Creation time of the User Group.
	CreatedTime *string `pulumi:"createdTime"`
	// -(Optional) Identifier for the User Group in the form of a distinguished name.
	DistinguishedName *string `pulumi:"distinguishedName"`
	// The External Identifier of the User Group.
	ExtId *string `pulumi:"extId"`
	// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
	GroupType *string `pulumi:"groupType"`
	// -(Required) Identifier of the IDP for the User Group.
	IdpId *string `pulumi:"idpId"`
	// - Last updated time of the User Group.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// -(Optional) Common Name of the User Group.
	Name *string `pulumi:"name"`
}

type UserGroupsV2State struct {
	// - User or Service who created the User Group.
	CreatedBy pulumi.StringPtrInput
	// - Creation time of the User Group.
	CreatedTime pulumi.StringPtrInput
	// -(Optional) Identifier for the User Group in the form of a distinguished name.
	DistinguishedName pulumi.StringPtrInput
	// The External Identifier of the User Group.
	ExtId pulumi.StringPtrInput
	// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
	GroupType pulumi.StringPtrInput
	// -(Required) Identifier of the IDP for the User Group.
	IdpId pulumi.StringPtrInput
	// - Last updated time of the User Group.
	LastUpdatedTime pulumi.StringPtrInput
	// -(Optional) Common Name of the User Group.
	Name pulumi.StringPtrInput
}

func (UserGroupsV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupsV2State)(nil)).Elem()
}

type userGroupsV2Args struct {
	// -(Optional) Identifier for the User Group in the form of a distinguished name.
	DistinguishedName *string `pulumi:"distinguishedName"`
	// The External Identifier of the User Group.
	ExtId *string `pulumi:"extId"`
	// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
	GroupType string `pulumi:"groupType"`
	// -(Required) Identifier of the IDP for the User Group.
	IdpId string `pulumi:"idpId"`
	// -(Optional) Common Name of the User Group.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a UserGroupsV2 resource.
type UserGroupsV2Args struct {
	// -(Optional) Identifier for the User Group in the form of a distinguished name.
	DistinguishedName pulumi.StringPtrInput
	// The External Identifier of the User Group.
	ExtId pulumi.StringPtrInput
	// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
	GroupType pulumi.StringInput
	// -(Required) Identifier of the IDP for the User Group.
	IdpId pulumi.StringInput
	// -(Optional) Common Name of the User Group.
	Name pulumi.StringPtrInput
}

func (UserGroupsV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupsV2Args)(nil)).Elem()
}

type UserGroupsV2Input interface {
	pulumi.Input

	ToUserGroupsV2Output() UserGroupsV2Output
	ToUserGroupsV2OutputWithContext(ctx context.Context) UserGroupsV2Output
}

func (*UserGroupsV2) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupsV2)(nil)).Elem()
}

func (i *UserGroupsV2) ToUserGroupsV2Output() UserGroupsV2Output {
	return i.ToUserGroupsV2OutputWithContext(context.Background())
}

func (i *UserGroupsV2) ToUserGroupsV2OutputWithContext(ctx context.Context) UserGroupsV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupsV2Output)
}

// UserGroupsV2ArrayInput is an input type that accepts UserGroupsV2Array and UserGroupsV2ArrayOutput values.
// You can construct a concrete instance of `UserGroupsV2ArrayInput` via:
//
//	UserGroupsV2Array{ UserGroupsV2Args{...} }
type UserGroupsV2ArrayInput interface {
	pulumi.Input

	ToUserGroupsV2ArrayOutput() UserGroupsV2ArrayOutput
	ToUserGroupsV2ArrayOutputWithContext(context.Context) UserGroupsV2ArrayOutput
}

type UserGroupsV2Array []UserGroupsV2Input

func (UserGroupsV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupsV2)(nil)).Elem()
}

func (i UserGroupsV2Array) ToUserGroupsV2ArrayOutput() UserGroupsV2ArrayOutput {
	return i.ToUserGroupsV2ArrayOutputWithContext(context.Background())
}

func (i UserGroupsV2Array) ToUserGroupsV2ArrayOutputWithContext(ctx context.Context) UserGroupsV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupsV2ArrayOutput)
}

// UserGroupsV2MapInput is an input type that accepts UserGroupsV2Map and UserGroupsV2MapOutput values.
// You can construct a concrete instance of `UserGroupsV2MapInput` via:
//
//	UserGroupsV2Map{ "key": UserGroupsV2Args{...} }
type UserGroupsV2MapInput interface {
	pulumi.Input

	ToUserGroupsV2MapOutput() UserGroupsV2MapOutput
	ToUserGroupsV2MapOutputWithContext(context.Context) UserGroupsV2MapOutput
}

type UserGroupsV2Map map[string]UserGroupsV2Input

func (UserGroupsV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupsV2)(nil)).Elem()
}

func (i UserGroupsV2Map) ToUserGroupsV2MapOutput() UserGroupsV2MapOutput {
	return i.ToUserGroupsV2MapOutputWithContext(context.Background())
}

func (i UserGroupsV2Map) ToUserGroupsV2MapOutputWithContext(ctx context.Context) UserGroupsV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupsV2MapOutput)
}

type UserGroupsV2Output struct{ *pulumi.OutputState }

func (UserGroupsV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupsV2)(nil)).Elem()
}

func (o UserGroupsV2Output) ToUserGroupsV2Output() UserGroupsV2Output {
	return o
}

func (o UserGroupsV2Output) ToUserGroupsV2OutputWithContext(ctx context.Context) UserGroupsV2Output {
	return o
}

// - User or Service who created the User Group.
func (o UserGroupsV2Output) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// - Creation time of the User Group.
func (o UserGroupsV2Output) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// -(Optional) Identifier for the User Group in the form of a distinguished name.
func (o UserGroupsV2Output) DistinguishedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringPtrOutput { return v.DistinguishedName }).(pulumi.StringPtrOutput)
}

// The External Identifier of the User Group.
func (o UserGroupsV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
func (o UserGroupsV2Output) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringOutput { return v.GroupType }).(pulumi.StringOutput)
}

// -(Required) Identifier of the IDP for the User Group.
func (o UserGroupsV2Output) IdpId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringOutput { return v.IdpId }).(pulumi.StringOutput)
}

// - Last updated time of the User Group.
func (o UserGroupsV2Output) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// -(Optional) Common Name of the User Group.
func (o UserGroupsV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupsV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type UserGroupsV2ArrayOutput struct{ *pulumi.OutputState }

func (UserGroupsV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupsV2)(nil)).Elem()
}

func (o UserGroupsV2ArrayOutput) ToUserGroupsV2ArrayOutput() UserGroupsV2ArrayOutput {
	return o
}

func (o UserGroupsV2ArrayOutput) ToUserGroupsV2ArrayOutputWithContext(ctx context.Context) UserGroupsV2ArrayOutput {
	return o
}

func (o UserGroupsV2ArrayOutput) Index(i pulumi.IntInput) UserGroupsV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroupsV2 {
		return vs[0].([]*UserGroupsV2)[vs[1].(int)]
	}).(UserGroupsV2Output)
}

type UserGroupsV2MapOutput struct{ *pulumi.OutputState }

func (UserGroupsV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupsV2)(nil)).Elem()
}

func (o UserGroupsV2MapOutput) ToUserGroupsV2MapOutput() UserGroupsV2MapOutput {
	return o
}

func (o UserGroupsV2MapOutput) ToUserGroupsV2MapOutputWithContext(ctx context.Context) UserGroupsV2MapOutput {
	return o
}

func (o UserGroupsV2MapOutput) MapIndex(k pulumi.StringInput) UserGroupsV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroupsV2 {
		return vs[0].(map[string]*UserGroupsV2)[vs[1].(string)]
	}).(UserGroupsV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupsV2Input)(nil)).Elem(), &UserGroupsV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupsV2ArrayInput)(nil)).Elem(), UserGroupsV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupsV2MapInput)(nil)).Elem(), UserGroupsV2Map{})
	pulumi.RegisterOutputType(UserGroupsV2Output{})
	pulumi.RegisterOutputType(UserGroupsV2ArrayOutput{})
	pulumi.RegisterOutputType(UserGroupsV2MapOutput{})
}
