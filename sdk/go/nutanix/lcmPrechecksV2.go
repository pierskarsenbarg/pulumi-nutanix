// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Perform LCM prechecks for the intended update operation.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewLcmPrechecksV2(ctx, "pre-checks", &nutanix.LcmPrechecksV2Args{
//				EntityUpdateSpecs: nutanix.LcmPrechecksV2EntityUpdateSpecArray{
//					&nutanix.LcmPrechecksV2EntityUpdateSpecArgs{
//						EntityUuid: pulumi.String("0c5c9e53-3551-4c5d-b13c-e41c04cbfaf7"),
//						ToVersion:  pulumi.String("4.0.0"),
//					},
//				},
//				XClusterId: pulumi.String("0005a104-0b0b-4b0-8005-0b0b0b0b0b0b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LcmPrechecksV2 struct {
	pulumi.CustomResourceState

	// List of entity update objects for getting recommendations.
	EntityUpdateSpecs LcmPrechecksV2EntityUpdateSpecArrayOutput `pulumi:"entityUpdateSpecs"`
	ExtId             pulumi.StringOutput                       `pulumi:"extId"`
	// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
	ManagementServer LcmPrechecksV2ManagementServerPtrOutput `pulumi:"managementServer"`
	// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
	SkippedPrecheckFlags pulumi.StringArrayOutput `pulumi:"skippedPrecheckFlags"`
	// Cluster uuid on which the resource is present or operation is being performed.
	XClusterId pulumi.StringPtrOutput `pulumi:"xClusterId"`
}

// NewLcmPrechecksV2 registers a new resource with the given unique name, arguments, and options.
func NewLcmPrechecksV2(ctx *pulumi.Context,
	name string, args *LcmPrechecksV2Args, opts ...pulumi.ResourceOption) (*LcmPrechecksV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityUpdateSpecs == nil {
		return nil, errors.New("invalid value for required argument 'EntityUpdateSpecs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LcmPrechecksV2
	err := ctx.RegisterResource("nutanix:index/lcmPrechecksV2:LcmPrechecksV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLcmPrechecksV2 gets an existing LcmPrechecksV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLcmPrechecksV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LcmPrechecksV2State, opts ...pulumi.ResourceOption) (*LcmPrechecksV2, error) {
	var resource LcmPrechecksV2
	err := ctx.ReadResource("nutanix:index/lcmPrechecksV2:LcmPrechecksV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LcmPrechecksV2 resources.
type lcmPrechecksV2State struct {
	// List of entity update objects for getting recommendations.
	EntityUpdateSpecs []LcmPrechecksV2EntityUpdateSpec `pulumi:"entityUpdateSpecs"`
	ExtId             *string                          `pulumi:"extId"`
	// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
	ManagementServer *LcmPrechecksV2ManagementServer `pulumi:"managementServer"`
	// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
	SkippedPrecheckFlags []string `pulumi:"skippedPrecheckFlags"`
	// Cluster uuid on which the resource is present or operation is being performed.
	XClusterId *string `pulumi:"xClusterId"`
}

type LcmPrechecksV2State struct {
	// List of entity update objects for getting recommendations.
	EntityUpdateSpecs LcmPrechecksV2EntityUpdateSpecArrayInput
	ExtId             pulumi.StringPtrInput
	// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
	ManagementServer LcmPrechecksV2ManagementServerPtrInput
	// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
	SkippedPrecheckFlags pulumi.StringArrayInput
	// Cluster uuid on which the resource is present or operation is being performed.
	XClusterId pulumi.StringPtrInput
}

func (LcmPrechecksV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*lcmPrechecksV2State)(nil)).Elem()
}

type lcmPrechecksV2Args struct {
	// List of entity update objects for getting recommendations.
	EntityUpdateSpecs []LcmPrechecksV2EntityUpdateSpec `pulumi:"entityUpdateSpecs"`
	// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
	ManagementServer *LcmPrechecksV2ManagementServer `pulumi:"managementServer"`
	// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
	SkippedPrecheckFlags []string `pulumi:"skippedPrecheckFlags"`
	// Cluster uuid on which the resource is present or operation is being performed.
	XClusterId *string `pulumi:"xClusterId"`
}

// The set of arguments for constructing a LcmPrechecksV2 resource.
type LcmPrechecksV2Args struct {
	// List of entity update objects for getting recommendations.
	EntityUpdateSpecs LcmPrechecksV2EntityUpdateSpecArrayInput
	// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
	ManagementServer LcmPrechecksV2ManagementServerPtrInput
	// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
	SkippedPrecheckFlags pulumi.StringArrayInput
	// Cluster uuid on which the resource is present or operation is being performed.
	XClusterId pulumi.StringPtrInput
}

func (LcmPrechecksV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*lcmPrechecksV2Args)(nil)).Elem()
}

type LcmPrechecksV2Input interface {
	pulumi.Input

	ToLcmPrechecksV2Output() LcmPrechecksV2Output
	ToLcmPrechecksV2OutputWithContext(ctx context.Context) LcmPrechecksV2Output
}

func (*LcmPrechecksV2) ElementType() reflect.Type {
	return reflect.TypeOf((**LcmPrechecksV2)(nil)).Elem()
}

func (i *LcmPrechecksV2) ToLcmPrechecksV2Output() LcmPrechecksV2Output {
	return i.ToLcmPrechecksV2OutputWithContext(context.Background())
}

func (i *LcmPrechecksV2) ToLcmPrechecksV2OutputWithContext(ctx context.Context) LcmPrechecksV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(LcmPrechecksV2Output)
}

// LcmPrechecksV2ArrayInput is an input type that accepts LcmPrechecksV2Array and LcmPrechecksV2ArrayOutput values.
// You can construct a concrete instance of `LcmPrechecksV2ArrayInput` via:
//
//	LcmPrechecksV2Array{ LcmPrechecksV2Args{...} }
type LcmPrechecksV2ArrayInput interface {
	pulumi.Input

	ToLcmPrechecksV2ArrayOutput() LcmPrechecksV2ArrayOutput
	ToLcmPrechecksV2ArrayOutputWithContext(context.Context) LcmPrechecksV2ArrayOutput
}

type LcmPrechecksV2Array []LcmPrechecksV2Input

func (LcmPrechecksV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LcmPrechecksV2)(nil)).Elem()
}

func (i LcmPrechecksV2Array) ToLcmPrechecksV2ArrayOutput() LcmPrechecksV2ArrayOutput {
	return i.ToLcmPrechecksV2ArrayOutputWithContext(context.Background())
}

func (i LcmPrechecksV2Array) ToLcmPrechecksV2ArrayOutputWithContext(ctx context.Context) LcmPrechecksV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LcmPrechecksV2ArrayOutput)
}

// LcmPrechecksV2MapInput is an input type that accepts LcmPrechecksV2Map and LcmPrechecksV2MapOutput values.
// You can construct a concrete instance of `LcmPrechecksV2MapInput` via:
//
//	LcmPrechecksV2Map{ "key": LcmPrechecksV2Args{...} }
type LcmPrechecksV2MapInput interface {
	pulumi.Input

	ToLcmPrechecksV2MapOutput() LcmPrechecksV2MapOutput
	ToLcmPrechecksV2MapOutputWithContext(context.Context) LcmPrechecksV2MapOutput
}

type LcmPrechecksV2Map map[string]LcmPrechecksV2Input

func (LcmPrechecksV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LcmPrechecksV2)(nil)).Elem()
}

func (i LcmPrechecksV2Map) ToLcmPrechecksV2MapOutput() LcmPrechecksV2MapOutput {
	return i.ToLcmPrechecksV2MapOutputWithContext(context.Background())
}

func (i LcmPrechecksV2Map) ToLcmPrechecksV2MapOutputWithContext(ctx context.Context) LcmPrechecksV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LcmPrechecksV2MapOutput)
}

type LcmPrechecksV2Output struct{ *pulumi.OutputState }

func (LcmPrechecksV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**LcmPrechecksV2)(nil)).Elem()
}

func (o LcmPrechecksV2Output) ToLcmPrechecksV2Output() LcmPrechecksV2Output {
	return o
}

func (o LcmPrechecksV2Output) ToLcmPrechecksV2OutputWithContext(ctx context.Context) LcmPrechecksV2Output {
	return o
}

// List of entity update objects for getting recommendations.
func (o LcmPrechecksV2Output) EntityUpdateSpecs() LcmPrechecksV2EntityUpdateSpecArrayOutput {
	return o.ApplyT(func(v *LcmPrechecksV2) LcmPrechecksV2EntityUpdateSpecArrayOutput { return v.EntityUpdateSpecs }).(LcmPrechecksV2EntityUpdateSpecArrayOutput)
}

func (o LcmPrechecksV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *LcmPrechecksV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
func (o LcmPrechecksV2Output) ManagementServer() LcmPrechecksV2ManagementServerPtrOutput {
	return o.ApplyT(func(v *LcmPrechecksV2) LcmPrechecksV2ManagementServerPtrOutput { return v.ManagementServer }).(LcmPrechecksV2ManagementServerPtrOutput)
}

// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
func (o LcmPrechecksV2Output) SkippedPrecheckFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LcmPrechecksV2) pulumi.StringArrayOutput { return v.SkippedPrecheckFlags }).(pulumi.StringArrayOutput)
}

// Cluster uuid on which the resource is present or operation is being performed.
func (o LcmPrechecksV2Output) XClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LcmPrechecksV2) pulumi.StringPtrOutput { return v.XClusterId }).(pulumi.StringPtrOutput)
}

type LcmPrechecksV2ArrayOutput struct{ *pulumi.OutputState }

func (LcmPrechecksV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LcmPrechecksV2)(nil)).Elem()
}

func (o LcmPrechecksV2ArrayOutput) ToLcmPrechecksV2ArrayOutput() LcmPrechecksV2ArrayOutput {
	return o
}

func (o LcmPrechecksV2ArrayOutput) ToLcmPrechecksV2ArrayOutputWithContext(ctx context.Context) LcmPrechecksV2ArrayOutput {
	return o
}

func (o LcmPrechecksV2ArrayOutput) Index(i pulumi.IntInput) LcmPrechecksV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LcmPrechecksV2 {
		return vs[0].([]*LcmPrechecksV2)[vs[1].(int)]
	}).(LcmPrechecksV2Output)
}

type LcmPrechecksV2MapOutput struct{ *pulumi.OutputState }

func (LcmPrechecksV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LcmPrechecksV2)(nil)).Elem()
}

func (o LcmPrechecksV2MapOutput) ToLcmPrechecksV2MapOutput() LcmPrechecksV2MapOutput {
	return o
}

func (o LcmPrechecksV2MapOutput) ToLcmPrechecksV2MapOutputWithContext(ctx context.Context) LcmPrechecksV2MapOutput {
	return o
}

func (o LcmPrechecksV2MapOutput) MapIndex(k pulumi.StringInput) LcmPrechecksV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LcmPrechecksV2 {
		return vs[0].(map[string]*LcmPrechecksV2)[vs[1].(string)]
	}).(LcmPrechecksV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LcmPrechecksV2Input)(nil)).Elem(), &LcmPrechecksV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*LcmPrechecksV2ArrayInput)(nil)).Elem(), LcmPrechecksV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*LcmPrechecksV2MapInput)(nil)).Elem(), LcmPrechecksV2Map{})
	pulumi.RegisterOutputType(LcmPrechecksV2Output{})
	pulumi.RegisterOutputType(LcmPrechecksV2ArrayOutput{})
	pulumi.RegisterOutputType(LcmPrechecksV2MapOutput{})
}
