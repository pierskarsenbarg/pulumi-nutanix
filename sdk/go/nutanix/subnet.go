// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		clusters, err := nutanix.GetClusters(ctx, map[string]interface{}{
// 			"metadata": map[string]interface{}{
// 				"length": 2,
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("cluster", clusters.Entities[0].Metadata.Uuid)
// 		_, err = nutanix.NewSubnet(ctx, "next-iac-managed", &nutanix.SubnetArgs{
// 			ClusterUuid:      pulumi.String(clusters.Entities[0].Metadata.Uuid),
// 			VlanId:           pulumi.Int(101),
// 			SubnetType:       pulumi.String("VLAN"),
// 			PrefixLength:     pulumi.Int(20),
// 			DefaultGatewayIp: pulumi.String("10.5.80.1"),
// 			SubnetIp:         pulumi.String("10.5.80.0"),
// 			DhcpDomainNameServerLists: pulumi.StringArray{
// 				pulumi.String("8.8.8.8"),
// 				pulumi.String("4.2.2.2"),
// 			},
// 			DhcpDomainSearchLists: pulumi.StringArray{
// 				pulumi.String("nutanix.com"),
// 				pulumi.String("eng.nutanix.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Subnet struct {
	pulumi.CustomResourceState

	// The version of the API.
	ApiVersion                    pulumi.StringOutput       `pulumi:"apiVersion"`
	AvailabilityZoneReference     pulumi.StringMapOutput    `pulumi:"availabilityZoneReference"`
	Categories                    SubnetCategoryArrayOutput `pulumi:"categories"`
	ClusterName                   pulumi.StringOutput       `pulumi:"clusterName"`
	ClusterUuid                   pulumi.StringPtrOutput    `pulumi:"clusterUuid"`
	DefaultGatewayIp              pulumi.StringOutput       `pulumi:"defaultGatewayIp"`
	Description                   pulumi.StringOutput       `pulumi:"description"`
	DhcpDomainNameServerLists     pulumi.StringArrayOutput  `pulumi:"dhcpDomainNameServerLists"`
	DhcpDomainSearchLists         pulumi.StringArrayOutput  `pulumi:"dhcpDomainSearchLists"`
	DhcpOptions                   pulumi.StringMapOutput    `pulumi:"dhcpOptions"`
	DhcpServerAddress             pulumi.StringMapOutput    `pulumi:"dhcpServerAddress"`
	DhcpServerAddressPort         pulumi.IntOutput          `pulumi:"dhcpServerAddressPort"`
	EnableNat                     pulumi.BoolOutput         `pulumi:"enableNat"`
	IpConfigPoolListRanges        pulumi.StringArrayOutput  `pulumi:"ipConfigPoolListRanges"`
	IsExternal                    pulumi.BoolOutput         `pulumi:"isExternal"`
	Metadata                      pulumi.StringMapOutput    `pulumi:"metadata"`
	Name                          pulumi.StringOutput       `pulumi:"name"`
	NetworkFunctionChainReference pulumi.StringMapOutput    `pulumi:"networkFunctionChainReference"`
	OwnerReference                pulumi.StringMapOutput    `pulumi:"ownerReference"`
	PrefixLength                  pulumi.IntOutput          `pulumi:"prefixLength"`
	ProjectReference              pulumi.StringMapOutput    `pulumi:"projectReference"`
	State                         pulumi.StringOutput       `pulumi:"state"`
	SubnetIp                      pulumi.StringOutput       `pulumi:"subnetIp"`
	SubnetType                    pulumi.StringOutput       `pulumi:"subnetType"`
	VlanId                        pulumi.IntOutput          `pulumi:"vlanId"`
	VpcReferenceUuid              pulumi.StringOutput       `pulumi:"vpcReferenceUuid"`
	VswitchName                   pulumi.StringOutput       `pulumi:"vswitchName"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetType == nil {
		return nil, errors.New("invalid value for required argument 'SubnetType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("nutanix:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("nutanix:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// The version of the API.
	ApiVersion                    *string           `pulumi:"apiVersion"`
	AvailabilityZoneReference     map[string]string `pulumi:"availabilityZoneReference"`
	Categories                    []SubnetCategory  `pulumi:"categories"`
	ClusterName                   *string           `pulumi:"clusterName"`
	ClusterUuid                   *string           `pulumi:"clusterUuid"`
	DefaultGatewayIp              *string           `pulumi:"defaultGatewayIp"`
	Description                   *string           `pulumi:"description"`
	DhcpDomainNameServerLists     []string          `pulumi:"dhcpDomainNameServerLists"`
	DhcpDomainSearchLists         []string          `pulumi:"dhcpDomainSearchLists"`
	DhcpOptions                   map[string]string `pulumi:"dhcpOptions"`
	DhcpServerAddress             map[string]string `pulumi:"dhcpServerAddress"`
	DhcpServerAddressPort         *int              `pulumi:"dhcpServerAddressPort"`
	EnableNat                     *bool             `pulumi:"enableNat"`
	IpConfigPoolListRanges        []string          `pulumi:"ipConfigPoolListRanges"`
	IsExternal                    *bool             `pulumi:"isExternal"`
	Metadata                      map[string]string `pulumi:"metadata"`
	Name                          *string           `pulumi:"name"`
	NetworkFunctionChainReference map[string]string `pulumi:"networkFunctionChainReference"`
	OwnerReference                map[string]string `pulumi:"ownerReference"`
	PrefixLength                  *int              `pulumi:"prefixLength"`
	ProjectReference              map[string]string `pulumi:"projectReference"`
	State                         *string           `pulumi:"state"`
	SubnetIp                      *string           `pulumi:"subnetIp"`
	SubnetType                    *string           `pulumi:"subnetType"`
	VlanId                        *int              `pulumi:"vlanId"`
	VpcReferenceUuid              *string           `pulumi:"vpcReferenceUuid"`
	VswitchName                   *string           `pulumi:"vswitchName"`
}

type SubnetState struct {
	// The version of the API.
	ApiVersion                    pulumi.StringPtrInput
	AvailabilityZoneReference     pulumi.StringMapInput
	Categories                    SubnetCategoryArrayInput
	ClusterName                   pulumi.StringPtrInput
	ClusterUuid                   pulumi.StringPtrInput
	DefaultGatewayIp              pulumi.StringPtrInput
	Description                   pulumi.StringPtrInput
	DhcpDomainNameServerLists     pulumi.StringArrayInput
	DhcpDomainSearchLists         pulumi.StringArrayInput
	DhcpOptions                   pulumi.StringMapInput
	DhcpServerAddress             pulumi.StringMapInput
	DhcpServerAddressPort         pulumi.IntPtrInput
	EnableNat                     pulumi.BoolPtrInput
	IpConfigPoolListRanges        pulumi.StringArrayInput
	IsExternal                    pulumi.BoolPtrInput
	Metadata                      pulumi.StringMapInput
	Name                          pulumi.StringPtrInput
	NetworkFunctionChainReference pulumi.StringMapInput
	OwnerReference                pulumi.StringMapInput
	PrefixLength                  pulumi.IntPtrInput
	ProjectReference              pulumi.StringMapInput
	State                         pulumi.StringPtrInput
	SubnetIp                      pulumi.StringPtrInput
	SubnetType                    pulumi.StringPtrInput
	VlanId                        pulumi.IntPtrInput
	VpcReferenceUuid              pulumi.StringPtrInput
	VswitchName                   pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	AvailabilityZoneReference     map[string]string `pulumi:"availabilityZoneReference"`
	Categories                    []SubnetCategory  `pulumi:"categories"`
	ClusterUuid                   *string           `pulumi:"clusterUuid"`
	DefaultGatewayIp              *string           `pulumi:"defaultGatewayIp"`
	Description                   *string           `pulumi:"description"`
	DhcpDomainNameServerLists     []string          `pulumi:"dhcpDomainNameServerLists"`
	DhcpDomainSearchLists         []string          `pulumi:"dhcpDomainSearchLists"`
	DhcpOptions                   map[string]string `pulumi:"dhcpOptions"`
	DhcpServerAddress             map[string]string `pulumi:"dhcpServerAddress"`
	DhcpServerAddressPort         *int              `pulumi:"dhcpServerAddressPort"`
	EnableNat                     *bool             `pulumi:"enableNat"`
	IpConfigPoolListRanges        []string          `pulumi:"ipConfigPoolListRanges"`
	IsExternal                    *bool             `pulumi:"isExternal"`
	Name                          *string           `pulumi:"name"`
	NetworkFunctionChainReference map[string]string `pulumi:"networkFunctionChainReference"`
	OwnerReference                map[string]string `pulumi:"ownerReference"`
	PrefixLength                  *int              `pulumi:"prefixLength"`
	ProjectReference              map[string]string `pulumi:"projectReference"`
	SubnetIp                      *string           `pulumi:"subnetIp"`
	SubnetType                    string            `pulumi:"subnetType"`
	VlanId                        *int              `pulumi:"vlanId"`
	VpcReferenceUuid              *string           `pulumi:"vpcReferenceUuid"`
	VswitchName                   *string           `pulumi:"vswitchName"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AvailabilityZoneReference     pulumi.StringMapInput
	Categories                    SubnetCategoryArrayInput
	ClusterUuid                   pulumi.StringPtrInput
	DefaultGatewayIp              pulumi.StringPtrInput
	Description                   pulumi.StringPtrInput
	DhcpDomainNameServerLists     pulumi.StringArrayInput
	DhcpDomainSearchLists         pulumi.StringArrayInput
	DhcpOptions                   pulumi.StringMapInput
	DhcpServerAddress             pulumi.StringMapInput
	DhcpServerAddressPort         pulumi.IntPtrInput
	EnableNat                     pulumi.BoolPtrInput
	IpConfigPoolListRanges        pulumi.StringArrayInput
	IsExternal                    pulumi.BoolPtrInput
	Name                          pulumi.StringPtrInput
	NetworkFunctionChainReference pulumi.StringMapInput
	OwnerReference                pulumi.StringMapInput
	PrefixLength                  pulumi.IntPtrInput
	ProjectReference              pulumi.StringMapInput
	SubnetIp                      pulumi.StringPtrInput
	SubnetType                    pulumi.StringInput
	VlanId                        pulumi.IntPtrInput
	VpcReferenceUuid              pulumi.StringPtrInput
	VswitchName                   pulumi.StringPtrInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//          SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//          SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// The version of the API.
func (o SubnetOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o SubnetOutput) AvailabilityZoneReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.AvailabilityZoneReference }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) Categories() SubnetCategoryArrayOutput {
	return o.ApplyT(func(v *Subnet) SubnetCategoryArrayOutput { return v.Categories }).(SubnetCategoryArrayOutput)
}

func (o SubnetOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o SubnetOutput) ClusterUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.ClusterUuid }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) DefaultGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.DefaultGatewayIp }).(pulumi.StringOutput)
}

func (o SubnetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SubnetOutput) DhcpDomainNameServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.DhcpDomainNameServerLists }).(pulumi.StringArrayOutput)
}

func (o SubnetOutput) DhcpDomainSearchLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.DhcpDomainSearchLists }).(pulumi.StringArrayOutput)
}

func (o SubnetOutput) DhcpOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.DhcpOptions }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) DhcpServerAddress() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.DhcpServerAddress }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) DhcpServerAddressPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.DhcpServerAddressPort }).(pulumi.IntOutput)
}

func (o SubnetOutput) EnableNat() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.EnableNat }).(pulumi.BoolOutput)
}

func (o SubnetOutput) IpConfigPoolListRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.IpConfigPoolListRanges }).(pulumi.StringArrayOutput)
}

func (o SubnetOutput) IsExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.IsExternal }).(pulumi.BoolOutput)
}

func (o SubnetOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SubnetOutput) NetworkFunctionChainReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.NetworkFunctionChainReference }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.OwnerReference }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.PrefixLength }).(pulumi.IntOutput)
}

func (o SubnetOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.ProjectReference }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o SubnetOutput) SubnetIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetIp }).(pulumi.StringOutput)
}

func (o SubnetOutput) SubnetType() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetType }).(pulumi.StringOutput)
}

func (o SubnetOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

func (o SubnetOutput) VpcReferenceUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcReferenceUuid }).(pulumi.StringOutput)
}

func (o SubnetOutput) VswitchName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VswitchName }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
