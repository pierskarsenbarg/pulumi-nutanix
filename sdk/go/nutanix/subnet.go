// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.
type Subnet struct {
	pulumi.CustomResourceState

	// The version of the API.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference pulumi.StringMapOutput `pulumi:"availabilityZoneReference"`
	// - (Optional) The categories of the resource.
	Categories  SubnetCategoryArrayOutput `pulumi:"categories"`
	ClusterName pulumi.StringOutput       `pulumi:"clusterName"`
	// - (Required) The UUID of the cluster.
	ClusterUuid pulumi.StringPtrOutput `pulumi:"clusterUuid"`
	// - (Optional) Default gateway IP address.
	DefaultGatewayIp pulumi.StringOutput `pulumi:"defaultGatewayIp"`
	// - (Optional) A description for subnet.
	Description               pulumi.StringOutput      `pulumi:"description"`
	DhcpDomainNameServerLists pulumi.StringArrayOutput `pulumi:"dhcpDomainNameServerLists"`
	// - (Optional).
	DhcpDomainSearchLists pulumi.StringArrayOutput `pulumi:"dhcpDomainSearchLists"`
	// - (Optional) Spec for defining DHCP options.
	DhcpOptions pulumi.StringMapOutput `pulumi:"dhcpOptions"`
	// - (Optional) Host address.
	DhcpServerAddress pulumi.StringMapOutput `pulumi:"dhcpServerAddress"`
	// - (Optional) Port Number.
	DhcpServerAddressPort  pulumi.IntOutput         `pulumi:"dhcpServerAddressPort"`
	EnableNat              pulumi.BoolOutput        `pulumi:"enableNat"`
	IpConfigPoolListRanges pulumi.StringArrayOutput `pulumi:"ipConfigPoolListRanges"`
	IsExternal             pulumi.BoolOutput        `pulumi:"isExternal"`
	// - (Required) The subnet kind metadata.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// - (Optional) Subnet name (Readonly).
	Name pulumi.StringOutput `pulumi:"name"`
	// - (Optional) The reference to a network_function_chain.
	NetworkFunctionChainReference pulumi.StringMapOutput `pulumi:"networkFunctionChainReference"`
	// - (Optional) The reference to a user.
	OwnerReference pulumi.StringMapOutput `pulumi:"ownerReference"`
	// - (Optional).
	PrefixLength pulumi.IntOutput `pulumi:"prefixLength"`
	// - (Optional) The reference to a project.
	ProjectReference pulumi.StringMapOutput `pulumi:"projectReference"`
	// - The state of the subnet.
	State pulumi.StringOutput `pulumi:"state"`
	// - (Optional) Subnet IP address.
	SubnetIp pulumi.StringOutput `pulumi:"subnetIp"`
	// - (Optional).
	SubnetType pulumi.StringOutput `pulumi:"subnetType"`
	// - (Optional).
	VlanId           pulumi.IntOutput    `pulumi:"vlanId"`
	VpcReferenceUuid pulumi.StringOutput `pulumi:"vpcReferenceUuid"`
	// - (Optional).
	VswitchName pulumi.StringOutput `pulumi:"vswitchName"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetType == nil {
		return nil, errors.New("invalid value for required argument 'SubnetType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("nutanix:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("nutanix:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// The version of the API.
	ApiVersion *string `pulumi:"apiVersion"`
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference map[string]string `pulumi:"availabilityZoneReference"`
	// - (Optional) The categories of the resource.
	Categories  []SubnetCategory `pulumi:"categories"`
	ClusterName *string          `pulumi:"clusterName"`
	// - (Required) The UUID of the cluster.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// - (Optional) Default gateway IP address.
	DefaultGatewayIp *string `pulumi:"defaultGatewayIp"`
	// - (Optional) A description for subnet.
	Description               *string  `pulumi:"description"`
	DhcpDomainNameServerLists []string `pulumi:"dhcpDomainNameServerLists"`
	// - (Optional).
	DhcpDomainSearchLists []string `pulumi:"dhcpDomainSearchLists"`
	// - (Optional) Spec for defining DHCP options.
	DhcpOptions map[string]string `pulumi:"dhcpOptions"`
	// - (Optional) Host address.
	DhcpServerAddress map[string]string `pulumi:"dhcpServerAddress"`
	// - (Optional) Port Number.
	DhcpServerAddressPort  *int     `pulumi:"dhcpServerAddressPort"`
	EnableNat              *bool    `pulumi:"enableNat"`
	IpConfigPoolListRanges []string `pulumi:"ipConfigPoolListRanges"`
	IsExternal             *bool    `pulumi:"isExternal"`
	// - (Required) The subnet kind metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// - (Optional) Subnet name (Readonly).
	Name *string `pulumi:"name"`
	// - (Optional) The reference to a network_function_chain.
	NetworkFunctionChainReference map[string]string `pulumi:"networkFunctionChainReference"`
	// - (Optional) The reference to a user.
	OwnerReference map[string]string `pulumi:"ownerReference"`
	// - (Optional).
	PrefixLength *int `pulumi:"prefixLength"`
	// - (Optional) The reference to a project.
	ProjectReference map[string]string `pulumi:"projectReference"`
	// - The state of the subnet.
	State *string `pulumi:"state"`
	// - (Optional) Subnet IP address.
	SubnetIp *string `pulumi:"subnetIp"`
	// - (Optional).
	SubnetType *string `pulumi:"subnetType"`
	// - (Optional).
	VlanId           *int    `pulumi:"vlanId"`
	VpcReferenceUuid *string `pulumi:"vpcReferenceUuid"`
	// - (Optional).
	VswitchName *string `pulumi:"vswitchName"`
}

type SubnetState struct {
	// The version of the API.
	ApiVersion pulumi.StringPtrInput
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference pulumi.StringMapInput
	// - (Optional) The categories of the resource.
	Categories  SubnetCategoryArrayInput
	ClusterName pulumi.StringPtrInput
	// - (Required) The UUID of the cluster.
	ClusterUuid pulumi.StringPtrInput
	// - (Optional) Default gateway IP address.
	DefaultGatewayIp pulumi.StringPtrInput
	// - (Optional) A description for subnet.
	Description               pulumi.StringPtrInput
	DhcpDomainNameServerLists pulumi.StringArrayInput
	// - (Optional).
	DhcpDomainSearchLists pulumi.StringArrayInput
	// - (Optional) Spec for defining DHCP options.
	DhcpOptions pulumi.StringMapInput
	// - (Optional) Host address.
	DhcpServerAddress pulumi.StringMapInput
	// - (Optional) Port Number.
	DhcpServerAddressPort  pulumi.IntPtrInput
	EnableNat              pulumi.BoolPtrInput
	IpConfigPoolListRanges pulumi.StringArrayInput
	IsExternal             pulumi.BoolPtrInput
	// - (Required) The subnet kind metadata.
	Metadata pulumi.StringMapInput
	// - (Optional) Subnet name (Readonly).
	Name pulumi.StringPtrInput
	// - (Optional) The reference to a network_function_chain.
	NetworkFunctionChainReference pulumi.StringMapInput
	// - (Optional) The reference to a user.
	OwnerReference pulumi.StringMapInput
	// - (Optional).
	PrefixLength pulumi.IntPtrInput
	// - (Optional) The reference to a project.
	ProjectReference pulumi.StringMapInput
	// - The state of the subnet.
	State pulumi.StringPtrInput
	// - (Optional) Subnet IP address.
	SubnetIp pulumi.StringPtrInput
	// - (Optional).
	SubnetType pulumi.StringPtrInput
	// - (Optional).
	VlanId           pulumi.IntPtrInput
	VpcReferenceUuid pulumi.StringPtrInput
	// - (Optional).
	VswitchName pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference map[string]string `pulumi:"availabilityZoneReference"`
	// - (Optional) The categories of the resource.
	Categories []SubnetCategory `pulumi:"categories"`
	// - (Required) The UUID of the cluster.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// - (Optional) Default gateway IP address.
	DefaultGatewayIp *string `pulumi:"defaultGatewayIp"`
	// - (Optional) A description for subnet.
	Description               *string  `pulumi:"description"`
	DhcpDomainNameServerLists []string `pulumi:"dhcpDomainNameServerLists"`
	// - (Optional).
	DhcpDomainSearchLists []string `pulumi:"dhcpDomainSearchLists"`
	// - (Optional) Spec for defining DHCP options.
	DhcpOptions map[string]string `pulumi:"dhcpOptions"`
	// - (Optional) Host address.
	DhcpServerAddress map[string]string `pulumi:"dhcpServerAddress"`
	// - (Optional) Port Number.
	DhcpServerAddressPort  *int     `pulumi:"dhcpServerAddressPort"`
	EnableNat              *bool    `pulumi:"enableNat"`
	IpConfigPoolListRanges []string `pulumi:"ipConfigPoolListRanges"`
	IsExternal             *bool    `pulumi:"isExternal"`
	// - (Optional) Subnet name (Readonly).
	Name *string `pulumi:"name"`
	// - (Optional) The reference to a network_function_chain.
	NetworkFunctionChainReference map[string]string `pulumi:"networkFunctionChainReference"`
	// - (Optional) The reference to a user.
	OwnerReference map[string]string `pulumi:"ownerReference"`
	// - (Optional).
	PrefixLength *int `pulumi:"prefixLength"`
	// - (Optional) The reference to a project.
	ProjectReference map[string]string `pulumi:"projectReference"`
	// - (Optional) Subnet IP address.
	SubnetIp *string `pulumi:"subnetIp"`
	// - (Optional).
	SubnetType string `pulumi:"subnetType"`
	// - (Optional).
	VlanId           *int    `pulumi:"vlanId"`
	VpcReferenceUuid *string `pulumi:"vpcReferenceUuid"`
	// - (Optional).
	VswitchName *string `pulumi:"vswitchName"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// - (Optional) The reference to a availability_zone.
	AvailabilityZoneReference pulumi.StringMapInput
	// - (Optional) The categories of the resource.
	Categories SubnetCategoryArrayInput
	// - (Required) The UUID of the cluster.
	ClusterUuid pulumi.StringPtrInput
	// - (Optional) Default gateway IP address.
	DefaultGatewayIp pulumi.StringPtrInput
	// - (Optional) A description for subnet.
	Description               pulumi.StringPtrInput
	DhcpDomainNameServerLists pulumi.StringArrayInput
	// - (Optional).
	DhcpDomainSearchLists pulumi.StringArrayInput
	// - (Optional) Spec for defining DHCP options.
	DhcpOptions pulumi.StringMapInput
	// - (Optional) Host address.
	DhcpServerAddress pulumi.StringMapInput
	// - (Optional) Port Number.
	DhcpServerAddressPort  pulumi.IntPtrInput
	EnableNat              pulumi.BoolPtrInput
	IpConfigPoolListRanges pulumi.StringArrayInput
	IsExternal             pulumi.BoolPtrInput
	// - (Optional) Subnet name (Readonly).
	Name pulumi.StringPtrInput
	// - (Optional) The reference to a network_function_chain.
	NetworkFunctionChainReference pulumi.StringMapInput
	// - (Optional) The reference to a user.
	OwnerReference pulumi.StringMapInput
	// - (Optional).
	PrefixLength pulumi.IntPtrInput
	// - (Optional) The reference to a project.
	ProjectReference pulumi.StringMapInput
	// - (Optional) Subnet IP address.
	SubnetIp pulumi.StringPtrInput
	// - (Optional).
	SubnetType pulumi.StringInput
	// - (Optional).
	VlanId           pulumi.IntPtrInput
	VpcReferenceUuid pulumi.StringPtrInput
	// - (Optional).
	VswitchName pulumi.StringPtrInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// The version of the API.
func (o SubnetOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// - (Optional) The reference to a availability_zone.
func (o SubnetOutput) AvailabilityZoneReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.AvailabilityZoneReference }).(pulumi.StringMapOutput)
}

// - (Optional) The categories of the resource.
func (o SubnetOutput) Categories() SubnetCategoryArrayOutput {
	return o.ApplyT(func(v *Subnet) SubnetCategoryArrayOutput { return v.Categories }).(SubnetCategoryArrayOutput)
}

func (o SubnetOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// - (Required) The UUID of the cluster.
func (o SubnetOutput) ClusterUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.ClusterUuid }).(pulumi.StringPtrOutput)
}

// - (Optional) Default gateway IP address.
func (o SubnetOutput) DefaultGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.DefaultGatewayIp }).(pulumi.StringOutput)
}

// - (Optional) A description for subnet.
func (o SubnetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SubnetOutput) DhcpDomainNameServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.DhcpDomainNameServerLists }).(pulumi.StringArrayOutput)
}

// - (Optional).
func (o SubnetOutput) DhcpDomainSearchLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.DhcpDomainSearchLists }).(pulumi.StringArrayOutput)
}

// - (Optional) Spec for defining DHCP options.
func (o SubnetOutput) DhcpOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.DhcpOptions }).(pulumi.StringMapOutput)
}

// - (Optional) Host address.
func (o SubnetOutput) DhcpServerAddress() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.DhcpServerAddress }).(pulumi.StringMapOutput)
}

// - (Optional) Port Number.
func (o SubnetOutput) DhcpServerAddressPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.DhcpServerAddressPort }).(pulumi.IntOutput)
}

func (o SubnetOutput) EnableNat() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.EnableNat }).(pulumi.BoolOutput)
}

func (o SubnetOutput) IpConfigPoolListRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.IpConfigPoolListRanges }).(pulumi.StringArrayOutput)
}

func (o SubnetOutput) IsExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.IsExternal }).(pulumi.BoolOutput)
}

// - (Required) The subnet kind metadata.
func (o SubnetOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// - (Optional) Subnet name (Readonly).
func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - (Optional) The reference to a network_function_chain.
func (o SubnetOutput) NetworkFunctionChainReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.NetworkFunctionChainReference }).(pulumi.StringMapOutput)
}

// - (Optional) The reference to a user.
func (o SubnetOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.OwnerReference }).(pulumi.StringMapOutput)
}

// - (Optional).
func (o SubnetOutput) PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.PrefixLength }).(pulumi.IntOutput)
}

// - (Optional) The reference to a project.
func (o SubnetOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.ProjectReference }).(pulumi.StringMapOutput)
}

// - The state of the subnet.
func (o SubnetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// - (Optional) Subnet IP address.
func (o SubnetOutput) SubnetIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetIp }).(pulumi.StringOutput)
}

// - (Optional).
func (o SubnetOutput) SubnetType() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetType }).(pulumi.StringOutput)
}

// - (Optional).
func (o SubnetOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

func (o SubnetOutput) VpcReferenceUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcReferenceUuid }).(pulumi.StringOutput)
}

// - (Optional).
func (o SubnetOutput) VswitchName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VswitchName }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
