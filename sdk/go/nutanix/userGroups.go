// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to add a User group to the system..
//
// ## Example Usage
type UserGroups struct {
	pulumi.CustomResourceState

	Categories UserGroupsCategoryArrayOutput `pulumi:"categories"`
	// - (Optional) A Directory Service organizational unit.
	DirectoryServiceOus UserGroupsDirectoryServiceOusArrayOutput `pulumi:"directoryServiceOus"`
	// - (Optional) A Directory Service user group.
	DirectoryServiceUserGroups UserGroupsDirectoryServiceUserGroupArrayOutput `pulumi:"directoryServiceUserGroups"`
	// The userGroup kind metadata.
	Metadata         pulumi.StringMapOutput `pulumi:"metadata"`
	OwnerReference   pulumi.StringMapOutput `pulumi:"ownerReference"`
	ProjectReference pulumi.StringMapOutput `pulumi:"projectReference"`
	// - (Optional) A SAML Service user group.
	SamlUserGroups UserGroupsSamlUserGroupArrayOutput `pulumi:"samlUserGroups"`
}

// NewUserGroups registers a new resource with the given unique name, arguments, and options.
func NewUserGroups(ctx *pulumi.Context,
	name string, args *UserGroupsArgs, opts ...pulumi.ResourceOption) (*UserGroups, error) {
	if args == nil {
		args = &UserGroupsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroups
	err := ctx.RegisterResource("nutanix:index/userGroups:UserGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroups gets an existing UserGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupsState, opts ...pulumi.ResourceOption) (*UserGroups, error) {
	var resource UserGroups
	err := ctx.ReadResource("nutanix:index/userGroups:UserGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroups resources.
type userGroupsState struct {
	Categories []UserGroupsCategory `pulumi:"categories"`
	// - (Optional) A Directory Service organizational unit.
	DirectoryServiceOus []UserGroupsDirectoryServiceOus `pulumi:"directoryServiceOus"`
	// - (Optional) A Directory Service user group.
	DirectoryServiceUserGroups []UserGroupsDirectoryServiceUserGroup `pulumi:"directoryServiceUserGroups"`
	// The userGroup kind metadata.
	Metadata         map[string]string `pulumi:"metadata"`
	OwnerReference   map[string]string `pulumi:"ownerReference"`
	ProjectReference map[string]string `pulumi:"projectReference"`
	// - (Optional) A SAML Service user group.
	SamlUserGroups []UserGroupsSamlUserGroup `pulumi:"samlUserGroups"`
}

type UserGroupsState struct {
	Categories UserGroupsCategoryArrayInput
	// - (Optional) A Directory Service organizational unit.
	DirectoryServiceOus UserGroupsDirectoryServiceOusArrayInput
	// - (Optional) A Directory Service user group.
	DirectoryServiceUserGroups UserGroupsDirectoryServiceUserGroupArrayInput
	// The userGroup kind metadata.
	Metadata         pulumi.StringMapInput
	OwnerReference   pulumi.StringMapInput
	ProjectReference pulumi.StringMapInput
	// - (Optional) A SAML Service user group.
	SamlUserGroups UserGroupsSamlUserGroupArrayInput
}

func (UserGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupsState)(nil)).Elem()
}

type userGroupsArgs struct {
	Categories []UserGroupsCategory `pulumi:"categories"`
	// - (Optional) A Directory Service organizational unit.
	DirectoryServiceOus []UserGroupsDirectoryServiceOus `pulumi:"directoryServiceOus"`
	// - (Optional) A Directory Service user group.
	DirectoryServiceUserGroups []UserGroupsDirectoryServiceUserGroup `pulumi:"directoryServiceUserGroups"`
	OwnerReference             map[string]string                     `pulumi:"ownerReference"`
	ProjectReference           map[string]string                     `pulumi:"projectReference"`
	// - (Optional) A SAML Service user group.
	SamlUserGroups []UserGroupsSamlUserGroup `pulumi:"samlUserGroups"`
}

// The set of arguments for constructing a UserGroups resource.
type UserGroupsArgs struct {
	Categories UserGroupsCategoryArrayInput
	// - (Optional) A Directory Service organizational unit.
	DirectoryServiceOus UserGroupsDirectoryServiceOusArrayInput
	// - (Optional) A Directory Service user group.
	DirectoryServiceUserGroups UserGroupsDirectoryServiceUserGroupArrayInput
	OwnerReference             pulumi.StringMapInput
	ProjectReference           pulumi.StringMapInput
	// - (Optional) A SAML Service user group.
	SamlUserGroups UserGroupsSamlUserGroupArrayInput
}

func (UserGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupsArgs)(nil)).Elem()
}

type UserGroupsInput interface {
	pulumi.Input

	ToUserGroupsOutput() UserGroupsOutput
	ToUserGroupsOutputWithContext(ctx context.Context) UserGroupsOutput
}

func (*UserGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroups)(nil)).Elem()
}

func (i *UserGroups) ToUserGroupsOutput() UserGroupsOutput {
	return i.ToUserGroupsOutputWithContext(context.Background())
}

func (i *UserGroups) ToUserGroupsOutputWithContext(ctx context.Context) UserGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupsOutput)
}

// UserGroupsArrayInput is an input type that accepts UserGroupsArray and UserGroupsArrayOutput values.
// You can construct a concrete instance of `UserGroupsArrayInput` via:
//
//	UserGroupsArray{ UserGroupsArgs{...} }
type UserGroupsArrayInput interface {
	pulumi.Input

	ToUserGroupsArrayOutput() UserGroupsArrayOutput
	ToUserGroupsArrayOutputWithContext(context.Context) UserGroupsArrayOutput
}

type UserGroupsArray []UserGroupsInput

func (UserGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroups)(nil)).Elem()
}

func (i UserGroupsArray) ToUserGroupsArrayOutput() UserGroupsArrayOutput {
	return i.ToUserGroupsArrayOutputWithContext(context.Background())
}

func (i UserGroupsArray) ToUserGroupsArrayOutputWithContext(ctx context.Context) UserGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupsArrayOutput)
}

// UserGroupsMapInput is an input type that accepts UserGroupsMap and UserGroupsMapOutput values.
// You can construct a concrete instance of `UserGroupsMapInput` via:
//
//	UserGroupsMap{ "key": UserGroupsArgs{...} }
type UserGroupsMapInput interface {
	pulumi.Input

	ToUserGroupsMapOutput() UserGroupsMapOutput
	ToUserGroupsMapOutputWithContext(context.Context) UserGroupsMapOutput
}

type UserGroupsMap map[string]UserGroupsInput

func (UserGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroups)(nil)).Elem()
}

func (i UserGroupsMap) ToUserGroupsMapOutput() UserGroupsMapOutput {
	return i.ToUserGroupsMapOutputWithContext(context.Background())
}

func (i UserGroupsMap) ToUserGroupsMapOutputWithContext(ctx context.Context) UserGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupsMapOutput)
}

type UserGroupsOutput struct{ *pulumi.OutputState }

func (UserGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroups)(nil)).Elem()
}

func (o UserGroupsOutput) ToUserGroupsOutput() UserGroupsOutput {
	return o
}

func (o UserGroupsOutput) ToUserGroupsOutputWithContext(ctx context.Context) UserGroupsOutput {
	return o
}

func (o UserGroupsOutput) Categories() UserGroupsCategoryArrayOutput {
	return o.ApplyT(func(v *UserGroups) UserGroupsCategoryArrayOutput { return v.Categories }).(UserGroupsCategoryArrayOutput)
}

// - (Optional) A Directory Service organizational unit.
func (o UserGroupsOutput) DirectoryServiceOus() UserGroupsDirectoryServiceOusArrayOutput {
	return o.ApplyT(func(v *UserGroups) UserGroupsDirectoryServiceOusArrayOutput { return v.DirectoryServiceOus }).(UserGroupsDirectoryServiceOusArrayOutput)
}

// - (Optional) A Directory Service user group.
func (o UserGroupsOutput) DirectoryServiceUserGroups() UserGroupsDirectoryServiceUserGroupArrayOutput {
	return o.ApplyT(func(v *UserGroups) UserGroupsDirectoryServiceUserGroupArrayOutput {
		return v.DirectoryServiceUserGroups
	}).(UserGroupsDirectoryServiceUserGroupArrayOutput)
}

// The userGroup kind metadata.
func (o UserGroupsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserGroups) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o UserGroupsOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserGroups) pulumi.StringMapOutput { return v.OwnerReference }).(pulumi.StringMapOutput)
}

func (o UserGroupsOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserGroups) pulumi.StringMapOutput { return v.ProjectReference }).(pulumi.StringMapOutput)
}

// - (Optional) A SAML Service user group.
func (o UserGroupsOutput) SamlUserGroups() UserGroupsSamlUserGroupArrayOutput {
	return o.ApplyT(func(v *UserGroups) UserGroupsSamlUserGroupArrayOutput { return v.SamlUserGroups }).(UserGroupsSamlUserGroupArrayOutput)
}

type UserGroupsArrayOutput struct{ *pulumi.OutputState }

func (UserGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroups)(nil)).Elem()
}

func (o UserGroupsArrayOutput) ToUserGroupsArrayOutput() UserGroupsArrayOutput {
	return o
}

func (o UserGroupsArrayOutput) ToUserGroupsArrayOutputWithContext(ctx context.Context) UserGroupsArrayOutput {
	return o
}

func (o UserGroupsArrayOutput) Index(i pulumi.IntInput) UserGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroups {
		return vs[0].([]*UserGroups)[vs[1].(int)]
	}).(UserGroupsOutput)
}

type UserGroupsMapOutput struct{ *pulumi.OutputState }

func (UserGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroups)(nil)).Elem()
}

func (o UserGroupsMapOutput) ToUserGroupsMapOutput() UserGroupsMapOutput {
	return o
}

func (o UserGroupsMapOutput) ToUserGroupsMapOutputWithContext(ctx context.Context) UserGroupsMapOutput {
	return o
}

func (o UserGroupsMapOutput) MapIndex(k pulumi.StringInput) UserGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroups {
		return vs[0].(map[string]*UserGroups)[vs[1].(string)]
	}).(UserGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupsInput)(nil)).Elem(), &UserGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupsArrayInput)(nil)).Elem(), UserGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupsMapInput)(nil)).Elem(), UserGroupsMap{})
	pulumi.RegisterOutputType(UserGroupsOutput{})
	pulumi.RegisterOutputType(UserGroupsArrayOutput{})
	pulumi.RegisterOutputType(UserGroupsMapOutput{})
}
