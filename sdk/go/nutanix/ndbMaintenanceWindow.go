// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create maintenance window based on the input parameters.
//
// ## Example Usage
//
// ### resource to create weekly maintenance window
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbMaintenanceWindow(ctx, "acctest-managed", &nutanix.NdbMaintenanceWindowArgs{
//				DayOfWeek:   pulumi.String("TUESDAY"),
//				Description: pulumi.String("desc"),
//				Duration:    pulumi.Int(3),
//				Recurrence:  pulumi.String("WEEKLY"),
//				StartTime:   pulumi.String("17:04:47"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### resource to create monthly maintenance window
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbMaintenanceWindow(ctx, "acctest-managed", &nutanix.NdbMaintenanceWindowArgs{
//				DayOfWeek:   pulumi.String("TUESDAY"),
//				Description: pulumi.String("description"),
//				Duration:    pulumi.Int(2),
//				Recurrence:  pulumi.String("MONTHLY"),
//				StartTime:   pulumi.String("17:04:47"),
//				WeekOfMonth: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbMaintenanceWindow struct {
	pulumi.CustomResourceState

	// access level
	AccessLevel pulumi.StringOutput `pulumi:"accessLevel"`
	// created date of maintenance window
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// modified date of maintenance window
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
	DayOfWeek pulumi.StringPtrOutput `pulumi:"dayOfWeek"`
	// Description for maintenance window
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// duration in hours. Default is 2
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// entity task association for maintenance window
	EntityTaskAssocs NdbMaintenanceWindowEntityTaskAssocArrayOutput `pulumi:"entityTaskAssocs"`
	// Name for the maintenance window.
	Name pulumi.StringOutput `pulumi:"name"`
	// next run time for maintenance window to trigger
	NextRunTime pulumi.StringOutput `pulumi:"nextRunTime"`
	// owner id of maintenance window
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// properties of maintenance window
	Properties NdbMaintenanceWindowPropertyArrayOutput `pulumi:"properties"`
	// Supported values [ MONTHLY, WEEKLY ]
	Recurrence pulumi.StringOutput `pulumi:"recurrence"`
	// schedule of maintenance window
	Schedules NdbMaintenanceWindowScheduleArrayOutput `pulumi:"schedules"`
	// start time for maintenance window to trigger
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// status of maintennace window
	Status pulumi.StringOutput `pulumi:"status"`
	// tags of maintenance window
	Tags NdbMaintenanceWindowTagArrayOutput `pulumi:"tags"`
	// timezone . Default is Asia/Calcutta .
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// week of the month. Supports [1, 2, 3, 4] .
	WeekOfMonth pulumi.IntPtrOutput `pulumi:"weekOfMonth"`
}

// NewNdbMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewNdbMaintenanceWindow(ctx *pulumi.Context,
	name string, args *NdbMaintenanceWindowArgs, opts ...pulumi.ResourceOption) (*NdbMaintenanceWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Recurrence == nil {
		return nil, errors.New("invalid value for required argument 'Recurrence'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbMaintenanceWindow
	err := ctx.RegisterResource("nutanix:index/ndbMaintenanceWindow:NdbMaintenanceWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbMaintenanceWindow gets an existing NdbMaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbMaintenanceWindowState, opts ...pulumi.ResourceOption) (*NdbMaintenanceWindow, error) {
	var resource NdbMaintenanceWindow
	err := ctx.ReadResource("nutanix:index/ndbMaintenanceWindow:NdbMaintenanceWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbMaintenanceWindow resources.
type ndbMaintenanceWindowState struct {
	// access level
	AccessLevel *string `pulumi:"accessLevel"`
	// created date of maintenance window
	DateCreated *string `pulumi:"dateCreated"`
	// modified date of maintenance window
	DateModified *string `pulumi:"dateModified"`
	// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// Description for maintenance window
	Description *string `pulumi:"description"`
	// duration in hours. Default is 2
	Duration *int `pulumi:"duration"`
	// entity task association for maintenance window
	EntityTaskAssocs []NdbMaintenanceWindowEntityTaskAssoc `pulumi:"entityTaskAssocs"`
	// Name for the maintenance window.
	Name *string `pulumi:"name"`
	// next run time for maintenance window to trigger
	NextRunTime *string `pulumi:"nextRunTime"`
	// owner id of maintenance window
	OwnerId *string `pulumi:"ownerId"`
	// properties of maintenance window
	Properties []NdbMaintenanceWindowProperty `pulumi:"properties"`
	// Supported values [ MONTHLY, WEEKLY ]
	Recurrence *string `pulumi:"recurrence"`
	// schedule of maintenance window
	Schedules []NdbMaintenanceWindowSchedule `pulumi:"schedules"`
	// start time for maintenance window to trigger
	StartTime *string `pulumi:"startTime"`
	// status of maintennace window
	Status *string `pulumi:"status"`
	// tags of maintenance window
	Tags []NdbMaintenanceWindowTag `pulumi:"tags"`
	// timezone . Default is Asia/Calcutta .
	Timezone *string `pulumi:"timezone"`
	// week of the month. Supports [1, 2, 3, 4] .
	WeekOfMonth *int `pulumi:"weekOfMonth"`
}

type NdbMaintenanceWindowState struct {
	// access level
	AccessLevel pulumi.StringPtrInput
	// created date of maintenance window
	DateCreated pulumi.StringPtrInput
	// modified date of maintenance window
	DateModified pulumi.StringPtrInput
	// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
	DayOfWeek pulumi.StringPtrInput
	// Description for maintenance window
	Description pulumi.StringPtrInput
	// duration in hours. Default is 2
	Duration pulumi.IntPtrInput
	// entity task association for maintenance window
	EntityTaskAssocs NdbMaintenanceWindowEntityTaskAssocArrayInput
	// Name for the maintenance window.
	Name pulumi.StringPtrInput
	// next run time for maintenance window to trigger
	NextRunTime pulumi.StringPtrInput
	// owner id of maintenance window
	OwnerId pulumi.StringPtrInput
	// properties of maintenance window
	Properties NdbMaintenanceWindowPropertyArrayInput
	// Supported values [ MONTHLY, WEEKLY ]
	Recurrence pulumi.StringPtrInput
	// schedule of maintenance window
	Schedules NdbMaintenanceWindowScheduleArrayInput
	// start time for maintenance window to trigger
	StartTime pulumi.StringPtrInput
	// status of maintennace window
	Status pulumi.StringPtrInput
	// tags of maintenance window
	Tags NdbMaintenanceWindowTagArrayInput
	// timezone . Default is Asia/Calcutta .
	Timezone pulumi.StringPtrInput
	// week of the month. Supports [1, 2, 3, 4] .
	WeekOfMonth pulumi.IntPtrInput
}

func (NdbMaintenanceWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbMaintenanceWindowState)(nil)).Elem()
}

type ndbMaintenanceWindowArgs struct {
	// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// Description for maintenance window
	Description *string `pulumi:"description"`
	// duration in hours. Default is 2
	Duration *int `pulumi:"duration"`
	// Name for the maintenance window.
	Name *string `pulumi:"name"`
	// Supported values [ MONTHLY, WEEKLY ]
	Recurrence string `pulumi:"recurrence"`
	// start time for maintenance window to trigger
	StartTime string `pulumi:"startTime"`
	// tags of maintenance window
	Tags []NdbMaintenanceWindowTag `pulumi:"tags"`
	// timezone . Default is Asia/Calcutta .
	Timezone *string `pulumi:"timezone"`
	// week of the month. Supports [1, 2, 3, 4] .
	WeekOfMonth *int `pulumi:"weekOfMonth"`
}

// The set of arguments for constructing a NdbMaintenanceWindow resource.
type NdbMaintenanceWindowArgs struct {
	// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
	DayOfWeek pulumi.StringPtrInput
	// Description for maintenance window
	Description pulumi.StringPtrInput
	// duration in hours. Default is 2
	Duration pulumi.IntPtrInput
	// Name for the maintenance window.
	Name pulumi.StringPtrInput
	// Supported values [ MONTHLY, WEEKLY ]
	Recurrence pulumi.StringInput
	// start time for maintenance window to trigger
	StartTime pulumi.StringInput
	// tags of maintenance window
	Tags NdbMaintenanceWindowTagArrayInput
	// timezone . Default is Asia/Calcutta .
	Timezone pulumi.StringPtrInput
	// week of the month. Supports [1, 2, 3, 4] .
	WeekOfMonth pulumi.IntPtrInput
}

func (NdbMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbMaintenanceWindowArgs)(nil)).Elem()
}

type NdbMaintenanceWindowInput interface {
	pulumi.Input

	ToNdbMaintenanceWindowOutput() NdbMaintenanceWindowOutput
	ToNdbMaintenanceWindowOutputWithContext(ctx context.Context) NdbMaintenanceWindowOutput
}

func (*NdbMaintenanceWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbMaintenanceWindow)(nil)).Elem()
}

func (i *NdbMaintenanceWindow) ToNdbMaintenanceWindowOutput() NdbMaintenanceWindowOutput {
	return i.ToNdbMaintenanceWindowOutputWithContext(context.Background())
}

func (i *NdbMaintenanceWindow) ToNdbMaintenanceWindowOutputWithContext(ctx context.Context) NdbMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbMaintenanceWindowOutput)
}

// NdbMaintenanceWindowArrayInput is an input type that accepts NdbMaintenanceWindowArray and NdbMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `NdbMaintenanceWindowArrayInput` via:
//
//	NdbMaintenanceWindowArray{ NdbMaintenanceWindowArgs{...} }
type NdbMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToNdbMaintenanceWindowArrayOutput() NdbMaintenanceWindowArrayOutput
	ToNdbMaintenanceWindowArrayOutputWithContext(context.Context) NdbMaintenanceWindowArrayOutput
}

type NdbMaintenanceWindowArray []NdbMaintenanceWindowInput

func (NdbMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbMaintenanceWindow)(nil)).Elem()
}

func (i NdbMaintenanceWindowArray) ToNdbMaintenanceWindowArrayOutput() NdbMaintenanceWindowArrayOutput {
	return i.ToNdbMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i NdbMaintenanceWindowArray) ToNdbMaintenanceWindowArrayOutputWithContext(ctx context.Context) NdbMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbMaintenanceWindowArrayOutput)
}

// NdbMaintenanceWindowMapInput is an input type that accepts NdbMaintenanceWindowMap and NdbMaintenanceWindowMapOutput values.
// You can construct a concrete instance of `NdbMaintenanceWindowMapInput` via:
//
//	NdbMaintenanceWindowMap{ "key": NdbMaintenanceWindowArgs{...} }
type NdbMaintenanceWindowMapInput interface {
	pulumi.Input

	ToNdbMaintenanceWindowMapOutput() NdbMaintenanceWindowMapOutput
	ToNdbMaintenanceWindowMapOutputWithContext(context.Context) NdbMaintenanceWindowMapOutput
}

type NdbMaintenanceWindowMap map[string]NdbMaintenanceWindowInput

func (NdbMaintenanceWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbMaintenanceWindow)(nil)).Elem()
}

func (i NdbMaintenanceWindowMap) ToNdbMaintenanceWindowMapOutput() NdbMaintenanceWindowMapOutput {
	return i.ToNdbMaintenanceWindowMapOutputWithContext(context.Background())
}

func (i NdbMaintenanceWindowMap) ToNdbMaintenanceWindowMapOutputWithContext(ctx context.Context) NdbMaintenanceWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbMaintenanceWindowMapOutput)
}

type NdbMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NdbMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbMaintenanceWindow)(nil)).Elem()
}

func (o NdbMaintenanceWindowOutput) ToNdbMaintenanceWindowOutput() NdbMaintenanceWindowOutput {
	return o
}

func (o NdbMaintenanceWindowOutput) ToNdbMaintenanceWindowOutputWithContext(ctx context.Context) NdbMaintenanceWindowOutput {
	return o
}

// access level
func (o NdbMaintenanceWindowOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.AccessLevel }).(pulumi.StringOutput)
}

// created date of maintenance window
func (o NdbMaintenanceWindowOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// modified date of maintenance window
func (o NdbMaintenanceWindowOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
func (o NdbMaintenanceWindowOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringPtrOutput { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// Description for maintenance window
func (o NdbMaintenanceWindowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// duration in hours. Default is 2
func (o NdbMaintenanceWindowOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.IntPtrOutput { return v.Duration }).(pulumi.IntPtrOutput)
}

// entity task association for maintenance window
func (o NdbMaintenanceWindowOutput) EntityTaskAssocs() NdbMaintenanceWindowEntityTaskAssocArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) NdbMaintenanceWindowEntityTaskAssocArrayOutput {
		return v.EntityTaskAssocs
	}).(NdbMaintenanceWindowEntityTaskAssocArrayOutput)
}

// Name for the maintenance window.
func (o NdbMaintenanceWindowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// next run time for maintenance window to trigger
func (o NdbMaintenanceWindowOutput) NextRunTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.NextRunTime }).(pulumi.StringOutput)
}

// owner id of maintenance window
func (o NdbMaintenanceWindowOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// properties of maintenance window
func (o NdbMaintenanceWindowOutput) Properties() NdbMaintenanceWindowPropertyArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) NdbMaintenanceWindowPropertyArrayOutput { return v.Properties }).(NdbMaintenanceWindowPropertyArrayOutput)
}

// Supported values [ MONTHLY, WEEKLY ]
func (o NdbMaintenanceWindowOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.Recurrence }).(pulumi.StringOutput)
}

// schedule of maintenance window
func (o NdbMaintenanceWindowOutput) Schedules() NdbMaintenanceWindowScheduleArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) NdbMaintenanceWindowScheduleArrayOutput { return v.Schedules }).(NdbMaintenanceWindowScheduleArrayOutput)
}

// start time for maintenance window to trigger
func (o NdbMaintenanceWindowOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// status of maintennace window
func (o NdbMaintenanceWindowOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// tags of maintenance window
func (o NdbMaintenanceWindowOutput) Tags() NdbMaintenanceWindowTagArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) NdbMaintenanceWindowTagArrayOutput { return v.Tags }).(NdbMaintenanceWindowTagArrayOutput)
}

// timezone . Default is Asia/Calcutta .
func (o NdbMaintenanceWindowOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// week of the month. Supports [1, 2, 3, 4] .
func (o NdbMaintenanceWindowOutput) WeekOfMonth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbMaintenanceWindow) pulumi.IntPtrOutput { return v.WeekOfMonth }).(pulumi.IntPtrOutput)
}

type NdbMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (NdbMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbMaintenanceWindow)(nil)).Elem()
}

func (o NdbMaintenanceWindowArrayOutput) ToNdbMaintenanceWindowArrayOutput() NdbMaintenanceWindowArrayOutput {
	return o
}

func (o NdbMaintenanceWindowArrayOutput) ToNdbMaintenanceWindowArrayOutputWithContext(ctx context.Context) NdbMaintenanceWindowArrayOutput {
	return o
}

func (o NdbMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) NdbMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbMaintenanceWindow {
		return vs[0].([]*NdbMaintenanceWindow)[vs[1].(int)]
	}).(NdbMaintenanceWindowOutput)
}

type NdbMaintenanceWindowMapOutput struct{ *pulumi.OutputState }

func (NdbMaintenanceWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbMaintenanceWindow)(nil)).Elem()
}

func (o NdbMaintenanceWindowMapOutput) ToNdbMaintenanceWindowMapOutput() NdbMaintenanceWindowMapOutput {
	return o
}

func (o NdbMaintenanceWindowMapOutput) ToNdbMaintenanceWindowMapOutputWithContext(ctx context.Context) NdbMaintenanceWindowMapOutput {
	return o
}

func (o NdbMaintenanceWindowMapOutput) MapIndex(k pulumi.StringInput) NdbMaintenanceWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbMaintenanceWindow {
		return vs[0].(map[string]*NdbMaintenanceWindow)[vs[1].(string)]
	}).(NdbMaintenanceWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbMaintenanceWindowInput)(nil)).Elem(), &NdbMaintenanceWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbMaintenanceWindowArrayInput)(nil)).Elem(), NdbMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbMaintenanceWindowMapInput)(nil)).Elem(), NdbMaintenanceWindowMap{})
	pulumi.RegisterOutputType(NdbMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NdbMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(NdbMaintenanceWindowMapOutput{})
}
