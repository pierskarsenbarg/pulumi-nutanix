// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Nutanix Virtual Machine resource to Create a virtual machine.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		clusters, err := nutanix.GetClusters(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = nutanix.NewVirtualMachine(ctx, "vm1", &nutanix.VirtualMachineArgs{
// 			ClusterUuid: pulumi.String(clusters.Entities[0].Metadata.Uuid),
// 			Categories: VirtualMachineCategoryArray{
// 				&VirtualMachineCategoryArgs{
// 					Name:  pulumi.String("Environment"),
// 					Value: pulumi.String("Staging"),
// 				},
// 			},
// 			NumVcpusPerSocket: pulumi.Int(1),
// 			NumSockets:        pulumi.Int(1),
// 			MemorySizeMib:     pulumi.Int(2048),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### With Storage Config
// ```go
// package main
//
// import (
// 	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		clusters, err := nutanix.GetClusters(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = nutanix.NewVirtualMachine(ctx, "vm", &nutanix.VirtualMachineArgs{
// 			ClusterUuid:       pulumi.String(clusters.Entities[0].Metadata.Uuid),
// 			NumVcpusPerSocket: pulumi.Int(1),
// 			NumSockets:        pulumi.Int(1),
// 			MemorySizeMib:     pulumi.Int(186),
// 			DiskLists: VirtualMachineDiskListArray{
// 				&VirtualMachineDiskListArgs{
// 					DiskSizeBytes: pulumi.Int(68157440),
// 					DiskSizeMib:   pulumi.Int(65),
// 					StorageConfig: &VirtualMachineDiskListStorageConfigArgs{
// 						StorageContainerReferences: VirtualMachineDiskListStorageConfigStorageContainerReferenceArray{
// 							&VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs{
// 								Kind: pulumi.String("storage_container"),
// 								Uuid: pulumi.String("2bbe67bc-fd14-4637-8de1-6379257f4219"),
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VirtualMachine struct {
	pulumi.CustomResourceState

	// The version of the API.
	// * `state`: - The state of the vm.
	// * `clusterName`: - The name of the cluster.
	// * `hostReference`: - Reference to a host.
	// * `hypervisorType`: - The hypervisor type for the hypervisor the VM is hosted on.
	// * `nicListStatus`: - Status NICs attached to the VM.
	ApiVersion                pulumi.StringOutput               `pulumi:"apiVersion"`
	AvailabilityZoneReference pulumi.StringMapOutput            `pulumi:"availabilityZoneReference"`
	BootDeviceDiskAddress     pulumi.StringMapOutput            `pulumi:"bootDeviceDiskAddress"`
	BootDeviceMacAddress      pulumi.StringOutput               `pulumi:"bootDeviceMacAddress"`
	BootDeviceOrderLists      pulumi.StringArrayOutput          `pulumi:"bootDeviceOrderLists"`
	BootType                  pulumi.StringOutput               `pulumi:"bootType"`
	Categories                VirtualMachineCategoryArrayOutput `pulumi:"categories"`
	CloudInitCdromUuid        pulumi.StringOutput               `pulumi:"cloudInitCdromUuid"`
	ClusterName               pulumi.StringOutput               `pulumi:"clusterName"`
	ClusterUuid               pulumi.StringOutput               `pulumi:"clusterUuid"`
	Description               pulumi.StringOutput               `pulumi:"description"`
	// Disks attached to the VM.
	// * `useHotAdd`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.
	// * `numThreadsPerCore`: - (Optional) Number of threads per core.
	// * `enableCpuPassthrough`: - (Optional) Add true to enable CPU passthrough.
	// * `isVcpuHardPinned`: - (Optional) Add true to enable CPU pinning.
	DiskLists                                  VirtualMachineDiskListArrayOutput `pulumi:"diskLists"`
	EnableCpuPassthrough                       pulumi.BoolPtrOutput              `pulumi:"enableCpuPassthrough"`
	EnableScriptExec                           pulumi.BoolOutput                 `pulumi:"enableScriptExec"`
	GpuLists                                   VirtualMachineGpuListArrayOutput  `pulumi:"gpuLists"`
	GuestCustomizationCloudInitCustomKeyValues pulumi.StringMapOutput            `pulumi:"guestCustomizationCloudInitCustomKeyValues"`
	// The contents of the metaData configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
	// * `guestCustomizationCloudInitCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in cloud init.
	// * `guestCustomizationIsOverridable`: - (Optional) Flag to allow override of customization by deployer.
	// * `guestCustomizationSysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloudInit should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.
	// * `guestCustomizationSysrepCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in sysrep.
	// * `shouldFailOnScriptFailure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
	// * `enableScriptExec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
	// * `powerStateMechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state. Power state mechanism (ACPI/GUEST/HARD).
	// * `vgaConsoleEnabled`: - (Optional) Indicates whether VGA console should be enabled or not.
	GuestCustomizationCloudInitMetaData      pulumi.StringOutput    `pulumi:"guestCustomizationCloudInitMetaData"`
	GuestCustomizationCloudInitUserData      pulumi.StringOutput    `pulumi:"guestCustomizationCloudInitUserData"`
	GuestCustomizationIsOverridable          pulumi.BoolOutput      `pulumi:"guestCustomizationIsOverridable"`
	GuestCustomizationSysprep                pulumi.StringMapOutput `pulumi:"guestCustomizationSysprep"`
	GuestCustomizationSysprepCustomKeyValues pulumi.MapOutput       `pulumi:"guestCustomizationSysprepCustomKeyValues"`
	GuestOsId                                pulumi.StringOutput    `pulumi:"guestOsId"`
	HardwareClockTimezone                    pulumi.StringOutput    `pulumi:"hardwareClockTimezone"`
	HostReference                            pulumi.StringMapOutput `pulumi:"hostReference"`
	HypervisorType                           pulumi.StringOutput    `pulumi:"hypervisorType"`
	IsVcpuHardPinned                         pulumi.BoolPtrOutput   `pulumi:"isVcpuHardPinned"`
	MachineType                              pulumi.StringOutput    `pulumi:"machineType"`
	MemorySizeMib                            pulumi.IntOutput       `pulumi:"memorySizeMib"`
	Metadata                                 pulumi.StringMapOutput `pulumi:"metadata"`
	Name                                     pulumi.StringOutput    `pulumi:"name"`
	NgtCredentials                           pulumi.MapOutput       `pulumi:"ngtCredentials"`
	// Application names that are enabled.
	// * `numVcpusPerSocket`: - (Optional) Number of vCPUs per socket.
	// * `numSockets`: - (Optional) Number of vCPU sockets.
	// * `gpuList`: - (Optional) GPUs attached to the VM.
	// * `parentReferece`: - (Optional) Reference to an entity that the VM cloned from.
	// * `memorySizeMib`: - (Optional) Memory size in MiB.
	// * `bootDeviceOrderList`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
	// * `bootDeviceDiskAddress`: - (Optional) Address of disk to boot from.
	// * `bootDeviceMacAddress`: - (Optional) MAC address of nic to boot from.
	// * `bootType`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like bootDevice and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
	// * `machineType`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
	// * `hardwareClockTimezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	// * `guestCustomizationCloudInitUserData`: - (Optional) The contents of the userData configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
	NgtEnabledCapabilityLists pulumi.StringArrayOutput                `pulumi:"ngtEnabledCapabilityLists"`
	NicListStatuses           VirtualMachineNicListStatusArrayOutput  `pulumi:"nicListStatuses"`
	NicLists                  VirtualMachineNicListArrayOutput        `pulumi:"nicLists"`
	NumSockets                pulumi.IntOutput                        `pulumi:"numSockets"`
	NumVcpusPerSocket         pulumi.IntOutput                        `pulumi:"numVcpusPerSocket"`
	NumVnumaNodes             pulumi.IntOutput                        `pulumi:"numVnumaNodes"`
	NutanixGuestTools         pulumi.StringMapOutput                  `pulumi:"nutanixGuestTools"`
	OwnerReference            pulumi.StringMapOutput                  `pulumi:"ownerReference"`
	ParentReference           pulumi.StringMapOutput                  `pulumi:"parentReference"`
	PowerState                pulumi.StringOutput                     `pulumi:"powerState"`
	PowerStateMechanism       pulumi.StringOutput                     `pulumi:"powerStateMechanism"`
	ProjectReference          pulumi.StringMapOutput                  `pulumi:"projectReference"`
	SerialPortLists           VirtualMachineSerialPortListArrayOutput `pulumi:"serialPortLists"`
	ShouldFailOnScriptFailure pulumi.BoolOutput                       `pulumi:"shouldFailOnScriptFailure"`
	State                     pulumi.StringOutput                     `pulumi:"state"`
	UseHotAdd                 pulumi.BoolPtrOutput                    `pulumi:"useHotAdd"`
	VgaConsoleEnabled         pulumi.BoolOutput                       `pulumi:"vgaConsoleEnabled"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterUuid == nil {
		return nil, errors.New("invalid value for required argument 'ClusterUuid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VirtualMachine
	err := ctx.RegisterResource("nutanix:index/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("nutanix:index/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// The version of the API.
	// * `state`: - The state of the vm.
	// * `clusterName`: - The name of the cluster.
	// * `hostReference`: - Reference to a host.
	// * `hypervisorType`: - The hypervisor type for the hypervisor the VM is hosted on.
	// * `nicListStatus`: - Status NICs attached to the VM.
	ApiVersion                *string                  `pulumi:"apiVersion"`
	AvailabilityZoneReference map[string]string        `pulumi:"availabilityZoneReference"`
	BootDeviceDiskAddress     map[string]string        `pulumi:"bootDeviceDiskAddress"`
	BootDeviceMacAddress      *string                  `pulumi:"bootDeviceMacAddress"`
	BootDeviceOrderLists      []string                 `pulumi:"bootDeviceOrderLists"`
	BootType                  *string                  `pulumi:"bootType"`
	Categories                []VirtualMachineCategory `pulumi:"categories"`
	CloudInitCdromUuid        *string                  `pulumi:"cloudInitCdromUuid"`
	ClusterName               *string                  `pulumi:"clusterName"`
	ClusterUuid               *string                  `pulumi:"clusterUuid"`
	Description               *string                  `pulumi:"description"`
	// Disks attached to the VM.
	// * `useHotAdd`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.
	// * `numThreadsPerCore`: - (Optional) Number of threads per core.
	// * `enableCpuPassthrough`: - (Optional) Add true to enable CPU passthrough.
	// * `isVcpuHardPinned`: - (Optional) Add true to enable CPU pinning.
	DiskLists                                  []VirtualMachineDiskList `pulumi:"diskLists"`
	EnableCpuPassthrough                       *bool                    `pulumi:"enableCpuPassthrough"`
	EnableScriptExec                           *bool                    `pulumi:"enableScriptExec"`
	GpuLists                                   []VirtualMachineGpuList  `pulumi:"gpuLists"`
	GuestCustomizationCloudInitCustomKeyValues map[string]string        `pulumi:"guestCustomizationCloudInitCustomKeyValues"`
	// The contents of the metaData configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
	// * `guestCustomizationCloudInitCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in cloud init.
	// * `guestCustomizationIsOverridable`: - (Optional) Flag to allow override of customization by deployer.
	// * `guestCustomizationSysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloudInit should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.
	// * `guestCustomizationSysrepCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in sysrep.
	// * `shouldFailOnScriptFailure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
	// * `enableScriptExec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
	// * `powerStateMechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state. Power state mechanism (ACPI/GUEST/HARD).
	// * `vgaConsoleEnabled`: - (Optional) Indicates whether VGA console should be enabled or not.
	GuestCustomizationCloudInitMetaData      *string                `pulumi:"guestCustomizationCloudInitMetaData"`
	GuestCustomizationCloudInitUserData      *string                `pulumi:"guestCustomizationCloudInitUserData"`
	GuestCustomizationIsOverridable          *bool                  `pulumi:"guestCustomizationIsOverridable"`
	GuestCustomizationSysprep                map[string]string      `pulumi:"guestCustomizationSysprep"`
	GuestCustomizationSysprepCustomKeyValues map[string]interface{} `pulumi:"guestCustomizationSysprepCustomKeyValues"`
	GuestOsId                                *string                `pulumi:"guestOsId"`
	HardwareClockTimezone                    *string                `pulumi:"hardwareClockTimezone"`
	HostReference                            map[string]string      `pulumi:"hostReference"`
	HypervisorType                           *string                `pulumi:"hypervisorType"`
	IsVcpuHardPinned                         *bool                  `pulumi:"isVcpuHardPinned"`
	MachineType                              *string                `pulumi:"machineType"`
	MemorySizeMib                            *int                   `pulumi:"memorySizeMib"`
	Metadata                                 map[string]string      `pulumi:"metadata"`
	Name                                     *string                `pulumi:"name"`
	NgtCredentials                           map[string]interface{} `pulumi:"ngtCredentials"`
	// Application names that are enabled.
	// * `numVcpusPerSocket`: - (Optional) Number of vCPUs per socket.
	// * `numSockets`: - (Optional) Number of vCPU sockets.
	// * `gpuList`: - (Optional) GPUs attached to the VM.
	// * `parentReferece`: - (Optional) Reference to an entity that the VM cloned from.
	// * `memorySizeMib`: - (Optional) Memory size in MiB.
	// * `bootDeviceOrderList`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
	// * `bootDeviceDiskAddress`: - (Optional) Address of disk to boot from.
	// * `bootDeviceMacAddress`: - (Optional) MAC address of nic to boot from.
	// * `bootType`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like bootDevice and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
	// * `machineType`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
	// * `hardwareClockTimezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	// * `guestCustomizationCloudInitUserData`: - (Optional) The contents of the userData configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
	NgtEnabledCapabilityLists []string                       `pulumi:"ngtEnabledCapabilityLists"`
	NicListStatuses           []VirtualMachineNicListStatus  `pulumi:"nicListStatuses"`
	NicLists                  []VirtualMachineNicList        `pulumi:"nicLists"`
	NumSockets                *int                           `pulumi:"numSockets"`
	NumVcpusPerSocket         *int                           `pulumi:"numVcpusPerSocket"`
	NumVnumaNodes             *int                           `pulumi:"numVnumaNodes"`
	NutanixGuestTools         map[string]string              `pulumi:"nutanixGuestTools"`
	OwnerReference            map[string]string              `pulumi:"ownerReference"`
	ParentReference           map[string]string              `pulumi:"parentReference"`
	PowerState                *string                        `pulumi:"powerState"`
	PowerStateMechanism       *string                        `pulumi:"powerStateMechanism"`
	ProjectReference          map[string]string              `pulumi:"projectReference"`
	SerialPortLists           []VirtualMachineSerialPortList `pulumi:"serialPortLists"`
	ShouldFailOnScriptFailure *bool                          `pulumi:"shouldFailOnScriptFailure"`
	State                     *string                        `pulumi:"state"`
	UseHotAdd                 *bool                          `pulumi:"useHotAdd"`
	VgaConsoleEnabled         *bool                          `pulumi:"vgaConsoleEnabled"`
}

type VirtualMachineState struct {
	// The version of the API.
	// * `state`: - The state of the vm.
	// * `clusterName`: - The name of the cluster.
	// * `hostReference`: - Reference to a host.
	// * `hypervisorType`: - The hypervisor type for the hypervisor the VM is hosted on.
	// * `nicListStatus`: - Status NICs attached to the VM.
	ApiVersion                pulumi.StringPtrInput
	AvailabilityZoneReference pulumi.StringMapInput
	BootDeviceDiskAddress     pulumi.StringMapInput
	BootDeviceMacAddress      pulumi.StringPtrInput
	BootDeviceOrderLists      pulumi.StringArrayInput
	BootType                  pulumi.StringPtrInput
	Categories                VirtualMachineCategoryArrayInput
	CloudInitCdromUuid        pulumi.StringPtrInput
	ClusterName               pulumi.StringPtrInput
	ClusterUuid               pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	// Disks attached to the VM.
	// * `useHotAdd`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.
	// * `numThreadsPerCore`: - (Optional) Number of threads per core.
	// * `enableCpuPassthrough`: - (Optional) Add true to enable CPU passthrough.
	// * `isVcpuHardPinned`: - (Optional) Add true to enable CPU pinning.
	DiskLists                                  VirtualMachineDiskListArrayInput
	EnableCpuPassthrough                       pulumi.BoolPtrInput
	EnableScriptExec                           pulumi.BoolPtrInput
	GpuLists                                   VirtualMachineGpuListArrayInput
	GuestCustomizationCloudInitCustomKeyValues pulumi.StringMapInput
	// The contents of the metaData configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
	// * `guestCustomizationCloudInitCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in cloud init.
	// * `guestCustomizationIsOverridable`: - (Optional) Flag to allow override of customization by deployer.
	// * `guestCustomizationSysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloudInit should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.
	// * `guestCustomizationSysrepCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in sysrep.
	// * `shouldFailOnScriptFailure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
	// * `enableScriptExec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
	// * `powerStateMechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state. Power state mechanism (ACPI/GUEST/HARD).
	// * `vgaConsoleEnabled`: - (Optional) Indicates whether VGA console should be enabled or not.
	GuestCustomizationCloudInitMetaData      pulumi.StringPtrInput
	GuestCustomizationCloudInitUserData      pulumi.StringPtrInput
	GuestCustomizationIsOverridable          pulumi.BoolPtrInput
	GuestCustomizationSysprep                pulumi.StringMapInput
	GuestCustomizationSysprepCustomKeyValues pulumi.MapInput
	GuestOsId                                pulumi.StringPtrInput
	HardwareClockTimezone                    pulumi.StringPtrInput
	HostReference                            pulumi.StringMapInput
	HypervisorType                           pulumi.StringPtrInput
	IsVcpuHardPinned                         pulumi.BoolPtrInput
	MachineType                              pulumi.StringPtrInput
	MemorySizeMib                            pulumi.IntPtrInput
	Metadata                                 pulumi.StringMapInput
	Name                                     pulumi.StringPtrInput
	NgtCredentials                           pulumi.MapInput
	// Application names that are enabled.
	// * `numVcpusPerSocket`: - (Optional) Number of vCPUs per socket.
	// * `numSockets`: - (Optional) Number of vCPU sockets.
	// * `gpuList`: - (Optional) GPUs attached to the VM.
	// * `parentReferece`: - (Optional) Reference to an entity that the VM cloned from.
	// * `memorySizeMib`: - (Optional) Memory size in MiB.
	// * `bootDeviceOrderList`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
	// * `bootDeviceDiskAddress`: - (Optional) Address of disk to boot from.
	// * `bootDeviceMacAddress`: - (Optional) MAC address of nic to boot from.
	// * `bootType`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like bootDevice and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
	// * `machineType`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
	// * `hardwareClockTimezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	// * `guestCustomizationCloudInitUserData`: - (Optional) The contents of the userData configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
	NgtEnabledCapabilityLists pulumi.StringArrayInput
	NicListStatuses           VirtualMachineNicListStatusArrayInput
	NicLists                  VirtualMachineNicListArrayInput
	NumSockets                pulumi.IntPtrInput
	NumVcpusPerSocket         pulumi.IntPtrInput
	NumVnumaNodes             pulumi.IntPtrInput
	NutanixGuestTools         pulumi.StringMapInput
	OwnerReference            pulumi.StringMapInput
	ParentReference           pulumi.StringMapInput
	PowerState                pulumi.StringPtrInput
	PowerStateMechanism       pulumi.StringPtrInput
	ProjectReference          pulumi.StringMapInput
	SerialPortLists           VirtualMachineSerialPortListArrayInput
	ShouldFailOnScriptFailure pulumi.BoolPtrInput
	State                     pulumi.StringPtrInput
	UseHotAdd                 pulumi.BoolPtrInput
	VgaConsoleEnabled         pulumi.BoolPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	AvailabilityZoneReference map[string]string        `pulumi:"availabilityZoneReference"`
	BootDeviceDiskAddress     map[string]string        `pulumi:"bootDeviceDiskAddress"`
	BootDeviceMacAddress      *string                  `pulumi:"bootDeviceMacAddress"`
	BootDeviceOrderLists      []string                 `pulumi:"bootDeviceOrderLists"`
	BootType                  *string                  `pulumi:"bootType"`
	Categories                []VirtualMachineCategory `pulumi:"categories"`
	CloudInitCdromUuid        *string                  `pulumi:"cloudInitCdromUuid"`
	ClusterUuid               string                   `pulumi:"clusterUuid"`
	Description               *string                  `pulumi:"description"`
	// Disks attached to the VM.
	// * `useHotAdd`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.
	// * `numThreadsPerCore`: - (Optional) Number of threads per core.
	// * `enableCpuPassthrough`: - (Optional) Add true to enable CPU passthrough.
	// * `isVcpuHardPinned`: - (Optional) Add true to enable CPU pinning.
	DiskLists                                  []VirtualMachineDiskList `pulumi:"diskLists"`
	EnableCpuPassthrough                       *bool                    `pulumi:"enableCpuPassthrough"`
	EnableScriptExec                           *bool                    `pulumi:"enableScriptExec"`
	GpuLists                                   []VirtualMachineGpuList  `pulumi:"gpuLists"`
	GuestCustomizationCloudInitCustomKeyValues map[string]string        `pulumi:"guestCustomizationCloudInitCustomKeyValues"`
	// The contents of the metaData configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
	// * `guestCustomizationCloudInitCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in cloud init.
	// * `guestCustomizationIsOverridable`: - (Optional) Flag to allow override of customization by deployer.
	// * `guestCustomizationSysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloudInit should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.
	// * `guestCustomizationSysrepCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in sysrep.
	// * `shouldFailOnScriptFailure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
	// * `enableScriptExec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
	// * `powerStateMechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state. Power state mechanism (ACPI/GUEST/HARD).
	// * `vgaConsoleEnabled`: - (Optional) Indicates whether VGA console should be enabled or not.
	GuestCustomizationCloudInitMetaData      *string                `pulumi:"guestCustomizationCloudInitMetaData"`
	GuestCustomizationCloudInitUserData      *string                `pulumi:"guestCustomizationCloudInitUserData"`
	GuestCustomizationIsOverridable          *bool                  `pulumi:"guestCustomizationIsOverridable"`
	GuestCustomizationSysprep                map[string]string      `pulumi:"guestCustomizationSysprep"`
	GuestCustomizationSysprepCustomKeyValues map[string]interface{} `pulumi:"guestCustomizationSysprepCustomKeyValues"`
	GuestOsId                                *string                `pulumi:"guestOsId"`
	HardwareClockTimezone                    *string                `pulumi:"hardwareClockTimezone"`
	IsVcpuHardPinned                         *bool                  `pulumi:"isVcpuHardPinned"`
	MachineType                              *string                `pulumi:"machineType"`
	MemorySizeMib                            *int                   `pulumi:"memorySizeMib"`
	Name                                     *string                `pulumi:"name"`
	NgtCredentials                           map[string]interface{} `pulumi:"ngtCredentials"`
	// Application names that are enabled.
	// * `numVcpusPerSocket`: - (Optional) Number of vCPUs per socket.
	// * `numSockets`: - (Optional) Number of vCPU sockets.
	// * `gpuList`: - (Optional) GPUs attached to the VM.
	// * `parentReferece`: - (Optional) Reference to an entity that the VM cloned from.
	// * `memorySizeMib`: - (Optional) Memory size in MiB.
	// * `bootDeviceOrderList`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
	// * `bootDeviceDiskAddress`: - (Optional) Address of disk to boot from.
	// * `bootDeviceMacAddress`: - (Optional) MAC address of nic to boot from.
	// * `bootType`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like bootDevice and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
	// * `machineType`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
	// * `hardwareClockTimezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	// * `guestCustomizationCloudInitUserData`: - (Optional) The contents of the userData configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
	NgtEnabledCapabilityLists []string                       `pulumi:"ngtEnabledCapabilityLists"`
	NicLists                  []VirtualMachineNicList        `pulumi:"nicLists"`
	NumSockets                *int                           `pulumi:"numSockets"`
	NumVcpusPerSocket         *int                           `pulumi:"numVcpusPerSocket"`
	NumVnumaNodes             *int                           `pulumi:"numVnumaNodes"`
	NutanixGuestTools         map[string]string              `pulumi:"nutanixGuestTools"`
	OwnerReference            map[string]string              `pulumi:"ownerReference"`
	ParentReference           map[string]string              `pulumi:"parentReference"`
	PowerStateMechanism       *string                        `pulumi:"powerStateMechanism"`
	ProjectReference          map[string]string              `pulumi:"projectReference"`
	SerialPortLists           []VirtualMachineSerialPortList `pulumi:"serialPortLists"`
	ShouldFailOnScriptFailure *bool                          `pulumi:"shouldFailOnScriptFailure"`
	UseHotAdd                 *bool                          `pulumi:"useHotAdd"`
	VgaConsoleEnabled         *bool                          `pulumi:"vgaConsoleEnabled"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	AvailabilityZoneReference pulumi.StringMapInput
	BootDeviceDiskAddress     pulumi.StringMapInput
	BootDeviceMacAddress      pulumi.StringPtrInput
	BootDeviceOrderLists      pulumi.StringArrayInput
	BootType                  pulumi.StringPtrInput
	Categories                VirtualMachineCategoryArrayInput
	CloudInitCdromUuid        pulumi.StringPtrInput
	ClusterUuid               pulumi.StringInput
	Description               pulumi.StringPtrInput
	// Disks attached to the VM.
	// * `useHotAdd`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.
	// * `numThreadsPerCore`: - (Optional) Number of threads per core.
	// * `enableCpuPassthrough`: - (Optional) Add true to enable CPU passthrough.
	// * `isVcpuHardPinned`: - (Optional) Add true to enable CPU pinning.
	DiskLists                                  VirtualMachineDiskListArrayInput
	EnableCpuPassthrough                       pulumi.BoolPtrInput
	EnableScriptExec                           pulumi.BoolPtrInput
	GpuLists                                   VirtualMachineGpuListArrayInput
	GuestCustomizationCloudInitCustomKeyValues pulumi.StringMapInput
	// The contents of the metaData configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
	// * `guestCustomizationCloudInitCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in cloud init.
	// * `guestCustomizationIsOverridable`: - (Optional) Flag to allow override of customization by deployer.
	// * `guestCustomizationSysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloudInit should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.
	// * `guestCustomizationSysrepCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in sysrep.
	// * `shouldFailOnScriptFailure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
	// * `enableScriptExec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
	// * `powerStateMechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state. Power state mechanism (ACPI/GUEST/HARD).
	// * `vgaConsoleEnabled`: - (Optional) Indicates whether VGA console should be enabled or not.
	GuestCustomizationCloudInitMetaData      pulumi.StringPtrInput
	GuestCustomizationCloudInitUserData      pulumi.StringPtrInput
	GuestCustomizationIsOverridable          pulumi.BoolPtrInput
	GuestCustomizationSysprep                pulumi.StringMapInput
	GuestCustomizationSysprepCustomKeyValues pulumi.MapInput
	GuestOsId                                pulumi.StringPtrInput
	HardwareClockTimezone                    pulumi.StringPtrInput
	IsVcpuHardPinned                         pulumi.BoolPtrInput
	MachineType                              pulumi.StringPtrInput
	MemorySizeMib                            pulumi.IntPtrInput
	Name                                     pulumi.StringPtrInput
	NgtCredentials                           pulumi.MapInput
	// Application names that are enabled.
	// * `numVcpusPerSocket`: - (Optional) Number of vCPUs per socket.
	// * `numSockets`: - (Optional) Number of vCPU sockets.
	// * `gpuList`: - (Optional) GPUs attached to the VM.
	// * `parentReferece`: - (Optional) Reference to an entity that the VM cloned from.
	// * `memorySizeMib`: - (Optional) Memory size in MiB.
	// * `bootDeviceOrderList`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
	// * `bootDeviceDiskAddress`: - (Optional) Address of disk to boot from.
	// * `bootDeviceMacAddress`: - (Optional) MAC address of nic to boot from.
	// * `bootType`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like bootDevice and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
	// * `machineType`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
	// * `hardwareClockTimezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	// * `guestCustomizationCloudInitUserData`: - (Optional) The contents of the userData configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
	NgtEnabledCapabilityLists pulumi.StringArrayInput
	NicLists                  VirtualMachineNicListArrayInput
	NumSockets                pulumi.IntPtrInput
	NumVcpusPerSocket         pulumi.IntPtrInput
	NumVnumaNodes             pulumi.IntPtrInput
	NutanixGuestTools         pulumi.StringMapInput
	OwnerReference            pulumi.StringMapInput
	ParentReference           pulumi.StringMapInput
	PowerStateMechanism       pulumi.StringPtrInput
	ProjectReference          pulumi.StringMapInput
	SerialPortLists           VirtualMachineSerialPortListArrayInput
	ShouldFailOnScriptFailure pulumi.BoolPtrInput
	UseHotAdd                 pulumi.BoolPtrInput
	VgaConsoleEnabled         pulumi.BoolPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//          VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//          VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

// The version of the API.
// * `state`: - The state of the vm.
// * `clusterName`: - The name of the cluster.
// * `hostReference`: - Reference to a host.
// * `hypervisorType`: - The hypervisor type for the hypervisor the VM is hosted on.
// * `nicListStatus`: - Status NICs attached to the VM.
func (o VirtualMachineOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) AvailabilityZoneReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.AvailabilityZoneReference }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) BootDeviceDiskAddress() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.BootDeviceDiskAddress }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) BootDeviceMacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.BootDeviceMacAddress }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) BootDeviceOrderLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.BootDeviceOrderLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineOutput) BootType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.BootType }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) Categories() VirtualMachineCategoryArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineCategoryArrayOutput { return v.Categories }).(VirtualMachineCategoryArrayOutput)
}

func (o VirtualMachineOutput) CloudInitCdromUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.CloudInitCdromUuid }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ClusterUuid }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Disks attached to the VM.
// * `useHotAdd`: - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is `true`.
// * `numThreadsPerCore`: - (Optional) Number of threads per core.
// * `enableCpuPassthrough`: - (Optional) Add true to enable CPU passthrough.
// * `isVcpuHardPinned`: - (Optional) Add true to enable CPU pinning.
func (o VirtualMachineOutput) DiskLists() VirtualMachineDiskListArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineDiskListArrayOutput { return v.DiskLists }).(VirtualMachineDiskListArrayOutput)
}

func (o VirtualMachineOutput) EnableCpuPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.EnableCpuPassthrough }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineOutput) EnableScriptExec() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.EnableScriptExec }).(pulumi.BoolOutput)
}

func (o VirtualMachineOutput) GpuLists() VirtualMachineGpuListArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineGpuListArrayOutput { return v.GpuLists }).(VirtualMachineGpuListArrayOutput)
}

func (o VirtualMachineOutput) GuestCustomizationCloudInitCustomKeyValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.GuestCustomizationCloudInitCustomKeyValues }).(pulumi.StringMapOutput)
}

// The contents of the metaData configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
// * `guestCustomizationCloudInitCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in cloud init.
// * `guestCustomizationIsOverridable`: - (Optional) Flag to allow override of customization by deployer.
// * `guestCustomizationSysprep`: - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloudInit should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.
// * `guestCustomizationSysrepCustomKeyValues`: - (Optional) Generic key value pair used for custom attributes in sysrep.
// * `shouldFailOnScriptFailure`: - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
// * `enableScriptExec`: - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
// * `powerStateMechanism`: - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state. Power state mechanism (ACPI/GUEST/HARD).
// * `vgaConsoleEnabled`: - (Optional) Indicates whether VGA console should be enabled or not.
func (o VirtualMachineOutput) GuestCustomizationCloudInitMetaData() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.GuestCustomizationCloudInitMetaData }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) GuestCustomizationCloudInitUserData() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.GuestCustomizationCloudInitUserData }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) GuestCustomizationIsOverridable() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.GuestCustomizationIsOverridable }).(pulumi.BoolOutput)
}

func (o VirtualMachineOutput) GuestCustomizationSysprep() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.GuestCustomizationSysprep }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) GuestCustomizationSysprepCustomKeyValues() pulumi.MapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.MapOutput { return v.GuestCustomizationSysprepCustomKeyValues }).(pulumi.MapOutput)
}

func (o VirtualMachineOutput) GuestOsId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.GuestOsId }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) HardwareClockTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.HardwareClockTimezone }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) HostReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.HostReference }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) HypervisorType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.HypervisorType }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) IsVcpuHardPinned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.IsVcpuHardPinned }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) MemorySizeMib() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.MemorySizeMib }).(pulumi.IntOutput)
}

func (o VirtualMachineOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) NgtCredentials() pulumi.MapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.MapOutput { return v.NgtCredentials }).(pulumi.MapOutput)
}

// Application names that are enabled.
// * `numVcpusPerSocket`: - (Optional) Number of vCPUs per socket.
// * `numSockets`: - (Optional) Number of vCPU sockets.
// * `gpuList`: - (Optional) GPUs attached to the VM.
// * `parentReferece`: - (Optional) Reference to an entity that the VM cloned from.
// * `memorySizeMib`: - (Optional) Memory size in MiB.
// * `bootDeviceOrderList`: - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
// * `bootDeviceDiskAddress`: - (Optional) Address of disk to boot from.
// * `bootDeviceMacAddress`: - (Optional) MAC address of nic to boot from.
// * `bootType`: - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like bootDevice and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
// * `machineType`: - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
// * `hardwareClockTimezone`: - (Optional) VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
// * `guestCustomizationCloudInitUserData`: - (Optional) The contents of the userData configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
func (o VirtualMachineOutput) NgtEnabledCapabilityLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.NgtEnabledCapabilityLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineOutput) NicListStatuses() VirtualMachineNicListStatusArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineNicListStatusArrayOutput { return v.NicListStatuses }).(VirtualMachineNicListStatusArrayOutput)
}

func (o VirtualMachineOutput) NicLists() VirtualMachineNicListArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineNicListArrayOutput { return v.NicLists }).(VirtualMachineNicListArrayOutput)
}

func (o VirtualMachineOutput) NumSockets() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.NumSockets }).(pulumi.IntOutput)
}

func (o VirtualMachineOutput) NumVcpusPerSocket() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.NumVcpusPerSocket }).(pulumi.IntOutput)
}

func (o VirtualMachineOutput) NumVnumaNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.NumVnumaNodes }).(pulumi.IntOutput)
}

func (o VirtualMachineOutput) NutanixGuestTools() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.NutanixGuestTools }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.OwnerReference }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) ParentReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.ParentReference }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.PowerState }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) PowerStateMechanism() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.PowerStateMechanism }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.ProjectReference }).(pulumi.StringMapOutput)
}

func (o VirtualMachineOutput) SerialPortLists() VirtualMachineSerialPortListArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineSerialPortListArrayOutput { return v.SerialPortLists }).(VirtualMachineSerialPortListArrayOutput)
}

func (o VirtualMachineOutput) ShouldFailOnScriptFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.ShouldFailOnScriptFailure }).(pulumi.BoolOutput)
}

func (o VirtualMachineOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) UseHotAdd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.UseHotAdd }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineOutput) VgaConsoleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.VgaConsoleEnabled }).(pulumi.BoolOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].([]*VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].(map[string]*VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), &VirtualMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineArrayInput)(nil)).Elem(), VirtualMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMapInput)(nil)).Elem(), VirtualMachineMap{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}
