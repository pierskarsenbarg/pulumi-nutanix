// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FoundationCentralImageCluster struct {
	pulumi.CustomResourceState

	// Sha256sum of AOS package.
	AosPackageSha256sum pulumi.StringOutput `pulumi:"aosPackageSha256sum"`
	// URL to download AOS package. Required only if imaging is needed.
	AosPackageUrl pulumi.StringOutput `pulumi:"aosPackageUrl"`
	Archived      pulumi.BoolOutput   `pulumi:"archived"`
	// External management ip of the cluster.
	ClusterExternalIp pulumi.StringOutput `pulumi:"clusterExternalIp"`
	// Name of the cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Number of nodes in the cluster.
	ClusterSize   pulumi.IntOutput                                 `pulumi:"clusterSize"`
	ClusterStatus FoundationCentralImageClusterClusterStatusOutput `pulumi:"clusterStatus"`
	// Common network settings across the nodes in the cluster.
	CommonNetworkSettings  FoundationCentralImageClusterCommonNetworkSettingsOutput     `pulumi:"commonNetworkSettings"`
	CreatedTimestamp       pulumi.StringOutput                                          `pulumi:"createdTimestamp"`
	CurrentTime            pulumi.StringOutput                                          `pulumi:"currentTime"`
	Destroyed              pulumi.BoolOutput                                            `pulumi:"destroyed"`
	FoundationInitConfigs  FoundationCentralImageClusterFoundationInitConfigArrayOutput `pulumi:"foundationInitConfigs"`
	FoundationInitNodeUuid pulumi.StringOutput                                          `pulumi:"foundationInitNodeUuid"`
	// Details of the hypervisor iso. (Deprecated)
	HypervisorIsoDetails FoundationCentralImageClusterHypervisorIsoDetailsOutput `pulumi:"hypervisorIsoDetails"`
	// Details of the hypervisor iso. Required for deploying node with AOS >= 6.8
	HypervisorIsos   FoundationCentralImageClusterHypervisorIsosPtrOutput `pulumi:"hypervisorIsos"`
	ImageClusterUuid pulumi.StringOutput                                  `pulumi:"imageClusterUuid"`
	// Unique id of the cluster.
	ImagedClusterUuid   pulumi.StringOutput                              `pulumi:"imagedClusterUuid"`
	ImagedNodeUuidLists pulumi.StringArrayOutput                         `pulumi:"imagedNodeUuidLists"`
	NodeLists           FoundationCentralImageClusterNodeListArrayOutput `pulumi:"nodeLists"`
	// Redundancy factor of the cluster.
	RedundancyFactor    pulumi.IntOutput     `pulumi:"redundancyFactor"`
	SkipClusterCreation pulumi.BoolPtrOutput `pulumi:"skipClusterCreation"`
	// Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
	StorageNodeCount pulumi.IntOutput `pulumi:"storageNodeCount"`
	// Timezone to be set on the cluster.
	Timezone     pulumi.StringOutput `pulumi:"timezone"`
	WorkflowType pulumi.StringOutput `pulumi:"workflowType"`
}

// NewFoundationCentralImageCluster registers a new resource with the given unique name, arguments, and options.
func NewFoundationCentralImageCluster(ctx *pulumi.Context,
	name string, args *FoundationCentralImageClusterArgs, opts ...pulumi.ResourceOption) (*FoundationCentralImageCluster, error) {
	if args == nil {
		args = &FoundationCentralImageClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FoundationCentralImageCluster
	err := ctx.RegisterResource("nutanix:index/foundationCentralImageCluster:FoundationCentralImageCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFoundationCentralImageCluster gets an existing FoundationCentralImageCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFoundationCentralImageCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FoundationCentralImageClusterState, opts ...pulumi.ResourceOption) (*FoundationCentralImageCluster, error) {
	var resource FoundationCentralImageCluster
	err := ctx.ReadResource("nutanix:index/foundationCentralImageCluster:FoundationCentralImageCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FoundationCentralImageCluster resources.
type foundationCentralImageClusterState struct {
	// Sha256sum of AOS package.
	AosPackageSha256sum *string `pulumi:"aosPackageSha256sum"`
	// URL to download AOS package. Required only if imaging is needed.
	AosPackageUrl *string `pulumi:"aosPackageUrl"`
	Archived      *bool   `pulumi:"archived"`
	// External management ip of the cluster.
	ClusterExternalIp *string `pulumi:"clusterExternalIp"`
	// Name of the cluster.
	ClusterName *string `pulumi:"clusterName"`
	// Number of nodes in the cluster.
	ClusterSize   *int                                        `pulumi:"clusterSize"`
	ClusterStatus *FoundationCentralImageClusterClusterStatus `pulumi:"clusterStatus"`
	// Common network settings across the nodes in the cluster.
	CommonNetworkSettings  *FoundationCentralImageClusterCommonNetworkSettings `pulumi:"commonNetworkSettings"`
	CreatedTimestamp       *string                                             `pulumi:"createdTimestamp"`
	CurrentTime            *string                                             `pulumi:"currentTime"`
	Destroyed              *bool                                               `pulumi:"destroyed"`
	FoundationInitConfigs  []FoundationCentralImageClusterFoundationInitConfig `pulumi:"foundationInitConfigs"`
	FoundationInitNodeUuid *string                                             `pulumi:"foundationInitNodeUuid"`
	// Details of the hypervisor iso. (Deprecated)
	HypervisorIsoDetails *FoundationCentralImageClusterHypervisorIsoDetails `pulumi:"hypervisorIsoDetails"`
	// Details of the hypervisor iso. Required for deploying node with AOS >= 6.8
	HypervisorIsos   *FoundationCentralImageClusterHypervisorIsos `pulumi:"hypervisorIsos"`
	ImageClusterUuid *string                                      `pulumi:"imageClusterUuid"`
	// Unique id of the cluster.
	ImagedClusterUuid   *string                                 `pulumi:"imagedClusterUuid"`
	ImagedNodeUuidLists []string                                `pulumi:"imagedNodeUuidLists"`
	NodeLists           []FoundationCentralImageClusterNodeList `pulumi:"nodeLists"`
	// Redundancy factor of the cluster.
	RedundancyFactor    *int  `pulumi:"redundancyFactor"`
	SkipClusterCreation *bool `pulumi:"skipClusterCreation"`
	// Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
	StorageNodeCount *int `pulumi:"storageNodeCount"`
	// Timezone to be set on the cluster.
	Timezone     *string `pulumi:"timezone"`
	WorkflowType *string `pulumi:"workflowType"`
}

type FoundationCentralImageClusterState struct {
	// Sha256sum of AOS package.
	AosPackageSha256sum pulumi.StringPtrInput
	// URL to download AOS package. Required only if imaging is needed.
	AosPackageUrl pulumi.StringPtrInput
	Archived      pulumi.BoolPtrInput
	// External management ip of the cluster.
	ClusterExternalIp pulumi.StringPtrInput
	// Name of the cluster.
	ClusterName pulumi.StringPtrInput
	// Number of nodes in the cluster.
	ClusterSize   pulumi.IntPtrInput
	ClusterStatus FoundationCentralImageClusterClusterStatusPtrInput
	// Common network settings across the nodes in the cluster.
	CommonNetworkSettings  FoundationCentralImageClusterCommonNetworkSettingsPtrInput
	CreatedTimestamp       pulumi.StringPtrInput
	CurrentTime            pulumi.StringPtrInput
	Destroyed              pulumi.BoolPtrInput
	FoundationInitConfigs  FoundationCentralImageClusterFoundationInitConfigArrayInput
	FoundationInitNodeUuid pulumi.StringPtrInput
	// Details of the hypervisor iso. (Deprecated)
	HypervisorIsoDetails FoundationCentralImageClusterHypervisorIsoDetailsPtrInput
	// Details of the hypervisor iso. Required for deploying node with AOS >= 6.8
	HypervisorIsos   FoundationCentralImageClusterHypervisorIsosPtrInput
	ImageClusterUuid pulumi.StringPtrInput
	// Unique id of the cluster.
	ImagedClusterUuid   pulumi.StringPtrInput
	ImagedNodeUuidLists pulumi.StringArrayInput
	NodeLists           FoundationCentralImageClusterNodeListArrayInput
	// Redundancy factor of the cluster.
	RedundancyFactor    pulumi.IntPtrInput
	SkipClusterCreation pulumi.BoolPtrInput
	// Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
	StorageNodeCount pulumi.IntPtrInput
	// Timezone to be set on the cluster.
	Timezone     pulumi.StringPtrInput
	WorkflowType pulumi.StringPtrInput
}

func (FoundationCentralImageClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationCentralImageClusterState)(nil)).Elem()
}

type foundationCentralImageClusterArgs struct {
	// Sha256sum of AOS package.
	AosPackageSha256sum *string `pulumi:"aosPackageSha256sum"`
	// URL to download AOS package. Required only if imaging is needed.
	AosPackageUrl *string `pulumi:"aosPackageUrl"`
	// External management ip of the cluster.
	ClusterExternalIp *string `pulumi:"clusterExternalIp"`
	// Name of the cluster.
	ClusterName *string `pulumi:"clusterName"`
	// Number of nodes in the cluster.
	ClusterSize   *int                                        `pulumi:"clusterSize"`
	ClusterStatus *FoundationCentralImageClusterClusterStatus `pulumi:"clusterStatus"`
	// Common network settings across the nodes in the cluster.
	CommonNetworkSettings *FoundationCentralImageClusterCommonNetworkSettings `pulumi:"commonNetworkSettings"`
	// Details of the hypervisor iso. (Deprecated)
	HypervisorIsoDetails *FoundationCentralImageClusterHypervisorIsoDetails `pulumi:"hypervisorIsoDetails"`
	// Details of the hypervisor iso. Required for deploying node with AOS >= 6.8
	HypervisorIsos   *FoundationCentralImageClusterHypervisorIsos `pulumi:"hypervisorIsos"`
	ImageClusterUuid *string                                      `pulumi:"imageClusterUuid"`
	NodeLists        []FoundationCentralImageClusterNodeList      `pulumi:"nodeLists"`
	// Redundancy factor of the cluster.
	RedundancyFactor    *int  `pulumi:"redundancyFactor"`
	SkipClusterCreation *bool `pulumi:"skipClusterCreation"`
	// Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
	StorageNodeCount *int `pulumi:"storageNodeCount"`
	// Timezone to be set on the cluster.
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a FoundationCentralImageCluster resource.
type FoundationCentralImageClusterArgs struct {
	// Sha256sum of AOS package.
	AosPackageSha256sum pulumi.StringPtrInput
	// URL to download AOS package. Required only if imaging is needed.
	AosPackageUrl pulumi.StringPtrInput
	// External management ip of the cluster.
	ClusterExternalIp pulumi.StringPtrInput
	// Name of the cluster.
	ClusterName pulumi.StringPtrInput
	// Number of nodes in the cluster.
	ClusterSize   pulumi.IntPtrInput
	ClusterStatus FoundationCentralImageClusterClusterStatusPtrInput
	// Common network settings across the nodes in the cluster.
	CommonNetworkSettings FoundationCentralImageClusterCommonNetworkSettingsPtrInput
	// Details of the hypervisor iso. (Deprecated)
	HypervisorIsoDetails FoundationCentralImageClusterHypervisorIsoDetailsPtrInput
	// Details of the hypervisor iso. Required for deploying node with AOS >= 6.8
	HypervisorIsos   FoundationCentralImageClusterHypervisorIsosPtrInput
	ImageClusterUuid pulumi.StringPtrInput
	NodeLists        FoundationCentralImageClusterNodeListArrayInput
	// Redundancy factor of the cluster.
	RedundancyFactor    pulumi.IntPtrInput
	SkipClusterCreation pulumi.BoolPtrInput
	// Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
	StorageNodeCount pulumi.IntPtrInput
	// Timezone to be set on the cluster.
	Timezone pulumi.StringPtrInput
}

func (FoundationCentralImageClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationCentralImageClusterArgs)(nil)).Elem()
}

type FoundationCentralImageClusterInput interface {
	pulumi.Input

	ToFoundationCentralImageClusterOutput() FoundationCentralImageClusterOutput
	ToFoundationCentralImageClusterOutputWithContext(ctx context.Context) FoundationCentralImageClusterOutput
}

func (*FoundationCentralImageCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationCentralImageCluster)(nil)).Elem()
}

func (i *FoundationCentralImageCluster) ToFoundationCentralImageClusterOutput() FoundationCentralImageClusterOutput {
	return i.ToFoundationCentralImageClusterOutputWithContext(context.Background())
}

func (i *FoundationCentralImageCluster) ToFoundationCentralImageClusterOutputWithContext(ctx context.Context) FoundationCentralImageClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationCentralImageClusterOutput)
}

// FoundationCentralImageClusterArrayInput is an input type that accepts FoundationCentralImageClusterArray and FoundationCentralImageClusterArrayOutput values.
// You can construct a concrete instance of `FoundationCentralImageClusterArrayInput` via:
//
//	FoundationCentralImageClusterArray{ FoundationCentralImageClusterArgs{...} }
type FoundationCentralImageClusterArrayInput interface {
	pulumi.Input

	ToFoundationCentralImageClusterArrayOutput() FoundationCentralImageClusterArrayOutput
	ToFoundationCentralImageClusterArrayOutputWithContext(context.Context) FoundationCentralImageClusterArrayOutput
}

type FoundationCentralImageClusterArray []FoundationCentralImageClusterInput

func (FoundationCentralImageClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationCentralImageCluster)(nil)).Elem()
}

func (i FoundationCentralImageClusterArray) ToFoundationCentralImageClusterArrayOutput() FoundationCentralImageClusterArrayOutput {
	return i.ToFoundationCentralImageClusterArrayOutputWithContext(context.Background())
}

func (i FoundationCentralImageClusterArray) ToFoundationCentralImageClusterArrayOutputWithContext(ctx context.Context) FoundationCentralImageClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationCentralImageClusterArrayOutput)
}

// FoundationCentralImageClusterMapInput is an input type that accepts FoundationCentralImageClusterMap and FoundationCentralImageClusterMapOutput values.
// You can construct a concrete instance of `FoundationCentralImageClusterMapInput` via:
//
//	FoundationCentralImageClusterMap{ "key": FoundationCentralImageClusterArgs{...} }
type FoundationCentralImageClusterMapInput interface {
	pulumi.Input

	ToFoundationCentralImageClusterMapOutput() FoundationCentralImageClusterMapOutput
	ToFoundationCentralImageClusterMapOutputWithContext(context.Context) FoundationCentralImageClusterMapOutput
}

type FoundationCentralImageClusterMap map[string]FoundationCentralImageClusterInput

func (FoundationCentralImageClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationCentralImageCluster)(nil)).Elem()
}

func (i FoundationCentralImageClusterMap) ToFoundationCentralImageClusterMapOutput() FoundationCentralImageClusterMapOutput {
	return i.ToFoundationCentralImageClusterMapOutputWithContext(context.Background())
}

func (i FoundationCentralImageClusterMap) ToFoundationCentralImageClusterMapOutputWithContext(ctx context.Context) FoundationCentralImageClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationCentralImageClusterMapOutput)
}

type FoundationCentralImageClusterOutput struct{ *pulumi.OutputState }

func (FoundationCentralImageClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationCentralImageCluster)(nil)).Elem()
}

func (o FoundationCentralImageClusterOutput) ToFoundationCentralImageClusterOutput() FoundationCentralImageClusterOutput {
	return o
}

func (o FoundationCentralImageClusterOutput) ToFoundationCentralImageClusterOutputWithContext(ctx context.Context) FoundationCentralImageClusterOutput {
	return o
}

// Sha256sum of AOS package.
func (o FoundationCentralImageClusterOutput) AosPackageSha256sum() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.AosPackageSha256sum }).(pulumi.StringOutput)
}

// URL to download AOS package. Required only if imaging is needed.
func (o FoundationCentralImageClusterOutput) AosPackageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.AosPackageUrl }).(pulumi.StringOutput)
}

func (o FoundationCentralImageClusterOutput) Archived() pulumi.BoolOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.BoolOutput { return v.Archived }).(pulumi.BoolOutput)
}

// External management ip of the cluster.
func (o FoundationCentralImageClusterOutput) ClusterExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.ClusterExternalIp }).(pulumi.StringOutput)
}

// Name of the cluster.
func (o FoundationCentralImageClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Number of nodes in the cluster.
func (o FoundationCentralImageClusterOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.IntOutput { return v.ClusterSize }).(pulumi.IntOutput)
}

func (o FoundationCentralImageClusterOutput) ClusterStatus() FoundationCentralImageClusterClusterStatusOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) FoundationCentralImageClusterClusterStatusOutput {
		return v.ClusterStatus
	}).(FoundationCentralImageClusterClusterStatusOutput)
}

// Common network settings across the nodes in the cluster.
func (o FoundationCentralImageClusterOutput) CommonNetworkSettings() FoundationCentralImageClusterCommonNetworkSettingsOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) FoundationCentralImageClusterCommonNetworkSettingsOutput {
		return v.CommonNetworkSettings
	}).(FoundationCentralImageClusterCommonNetworkSettingsOutput)
}

func (o FoundationCentralImageClusterOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

func (o FoundationCentralImageClusterOutput) CurrentTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.CurrentTime }).(pulumi.StringOutput)
}

func (o FoundationCentralImageClusterOutput) Destroyed() pulumi.BoolOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.BoolOutput { return v.Destroyed }).(pulumi.BoolOutput)
}

func (o FoundationCentralImageClusterOutput) FoundationInitConfigs() FoundationCentralImageClusterFoundationInitConfigArrayOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) FoundationCentralImageClusterFoundationInitConfigArrayOutput {
		return v.FoundationInitConfigs
	}).(FoundationCentralImageClusterFoundationInitConfigArrayOutput)
}

func (o FoundationCentralImageClusterOutput) FoundationInitNodeUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.FoundationInitNodeUuid }).(pulumi.StringOutput)
}

// Details of the hypervisor iso. (Deprecated)
func (o FoundationCentralImageClusterOutput) HypervisorIsoDetails() FoundationCentralImageClusterHypervisorIsoDetailsOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) FoundationCentralImageClusterHypervisorIsoDetailsOutput {
		return v.HypervisorIsoDetails
	}).(FoundationCentralImageClusterHypervisorIsoDetailsOutput)
}

// Details of the hypervisor iso. Required for deploying node with AOS >= 6.8
func (o FoundationCentralImageClusterOutput) HypervisorIsos() FoundationCentralImageClusterHypervisorIsosPtrOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) FoundationCentralImageClusterHypervisorIsosPtrOutput {
		return v.HypervisorIsos
	}).(FoundationCentralImageClusterHypervisorIsosPtrOutput)
}

func (o FoundationCentralImageClusterOutput) ImageClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.ImageClusterUuid }).(pulumi.StringOutput)
}

// Unique id of the cluster.
func (o FoundationCentralImageClusterOutput) ImagedClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.ImagedClusterUuid }).(pulumi.StringOutput)
}

func (o FoundationCentralImageClusterOutput) ImagedNodeUuidLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringArrayOutput { return v.ImagedNodeUuidLists }).(pulumi.StringArrayOutput)
}

func (o FoundationCentralImageClusterOutput) NodeLists() FoundationCentralImageClusterNodeListArrayOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) FoundationCentralImageClusterNodeListArrayOutput {
		return v.NodeLists
	}).(FoundationCentralImageClusterNodeListArrayOutput)
}

// Redundancy factor of the cluster.
func (o FoundationCentralImageClusterOutput) RedundancyFactor() pulumi.IntOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.IntOutput { return v.RedundancyFactor }).(pulumi.IntOutput)
}

func (o FoundationCentralImageClusterOutput) SkipClusterCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.BoolPtrOutput { return v.SkipClusterCreation }).(pulumi.BoolPtrOutput)
}

// Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
func (o FoundationCentralImageClusterOutput) StorageNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.IntOutput { return v.StorageNodeCount }).(pulumi.IntOutput)
}

// Timezone to be set on the cluster.
func (o FoundationCentralImageClusterOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

func (o FoundationCentralImageClusterOutput) WorkflowType() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralImageCluster) pulumi.StringOutput { return v.WorkflowType }).(pulumi.StringOutput)
}

type FoundationCentralImageClusterArrayOutput struct{ *pulumi.OutputState }

func (FoundationCentralImageClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationCentralImageCluster)(nil)).Elem()
}

func (o FoundationCentralImageClusterArrayOutput) ToFoundationCentralImageClusterArrayOutput() FoundationCentralImageClusterArrayOutput {
	return o
}

func (o FoundationCentralImageClusterArrayOutput) ToFoundationCentralImageClusterArrayOutputWithContext(ctx context.Context) FoundationCentralImageClusterArrayOutput {
	return o
}

func (o FoundationCentralImageClusterArrayOutput) Index(i pulumi.IntInput) FoundationCentralImageClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FoundationCentralImageCluster {
		return vs[0].([]*FoundationCentralImageCluster)[vs[1].(int)]
	}).(FoundationCentralImageClusterOutput)
}

type FoundationCentralImageClusterMapOutput struct{ *pulumi.OutputState }

func (FoundationCentralImageClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationCentralImageCluster)(nil)).Elem()
}

func (o FoundationCentralImageClusterMapOutput) ToFoundationCentralImageClusterMapOutput() FoundationCentralImageClusterMapOutput {
	return o
}

func (o FoundationCentralImageClusterMapOutput) ToFoundationCentralImageClusterMapOutputWithContext(ctx context.Context) FoundationCentralImageClusterMapOutput {
	return o
}

func (o FoundationCentralImageClusterMapOutput) MapIndex(k pulumi.StringInput) FoundationCentralImageClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FoundationCentralImageCluster {
		return vs[0].(map[string]*FoundationCentralImageCluster)[vs[1].(string)]
	}).(FoundationCentralImageClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationCentralImageClusterInput)(nil)).Elem(), &FoundationCentralImageCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationCentralImageClusterArrayInput)(nil)).Elem(), FoundationCentralImageClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationCentralImageClusterMapInput)(nil)).Elem(), FoundationCentralImageClusterMap{})
	pulumi.RegisterOutputType(FoundationCentralImageClusterOutput{})
	pulumi.RegisterOutputType(FoundationCentralImageClusterArrayOutput{})
	pulumi.RegisterOutputType(FoundationCentralImageClusterMapOutput{})
}
