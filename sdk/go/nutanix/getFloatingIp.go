// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a datasource to retrieve floating IPs with floatingIpUuid .
func LookupFloatingIp(ctx *pulumi.Context, args *LookupFloatingIpArgs, opts ...pulumi.InvokeOption) (*LookupFloatingIpResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupFloatingIpResult
	err := ctx.Invoke("nutanix:index/getFloatingIp:getFloatingIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFloatingIp.
type LookupFloatingIpArgs struct {
	// Floating IP UUID
	FloatingIpUuid string `pulumi:"floatingIpUuid"`
}

// A collection of values returned by getFloatingIp.
type LookupFloatingIpResult struct {
	// The version of the API.
	ApiVersion     string `pulumi:"apiVersion"`
	FloatingIpUuid string `pulumi:"floatingIpUuid"`
	// The provider-assigned unique ID for this managed resource.
	Id       string            `pulumi:"id"`
	Metadata map[string]string `pulumi:"metadata"`
	// Floating IP spec
	Specs []GetFloatingIpSpec `pulumi:"specs"`
	// Floating IP output status
	Statuses []GetFloatingIpStatus `pulumi:"statuses"`
}

func LookupFloatingIpOutput(ctx *pulumi.Context, args LookupFloatingIpOutputArgs, opts ...pulumi.InvokeOption) LookupFloatingIpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFloatingIpResult, error) {
			args := v.(LookupFloatingIpArgs)
			r, err := LookupFloatingIp(ctx, &args, opts...)
			var s LookupFloatingIpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFloatingIpResultOutput)
}

// A collection of arguments for invoking getFloatingIp.
type LookupFloatingIpOutputArgs struct {
	// Floating IP UUID
	FloatingIpUuid pulumi.StringInput `pulumi:"floatingIpUuid"`
}

func (LookupFloatingIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFloatingIpArgs)(nil)).Elem()
}

// A collection of values returned by getFloatingIp.
type LookupFloatingIpResultOutput struct{ *pulumi.OutputState }

func (LookupFloatingIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFloatingIpResult)(nil)).Elem()
}

func (o LookupFloatingIpResultOutput) ToLookupFloatingIpResultOutput() LookupFloatingIpResultOutput {
	return o
}

func (o LookupFloatingIpResultOutput) ToLookupFloatingIpResultOutputWithContext(ctx context.Context) LookupFloatingIpResultOutput {
	return o
}

// The version of the API.
func (o LookupFloatingIpResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o LookupFloatingIpResultOutput) FloatingIpUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.FloatingIpUuid }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFloatingIpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupFloatingIpResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Floating IP spec
func (o LookupFloatingIpResultOutput) Specs() GetFloatingIpSpecArrayOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) []GetFloatingIpSpec { return v.Specs }).(GetFloatingIpSpecArrayOutput)
}

// Floating IP output status
func (o LookupFloatingIpResultOutput) Statuses() GetFloatingIpStatusArrayOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) []GetFloatingIpStatus { return v.Statuses }).(GetFloatingIpStatusArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFloatingIpResultOutput{})
}
