// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NdbScaleDatabase struct {
	pulumi.CustomResourceState

	ApplicationType          pulumi.StringOutput                       `pulumi:"applicationType"`
	Clone                    pulumi.BoolOutput                         `pulumi:"clone"`
	DataStorageSize          pulumi.IntOutput                          `pulumi:"dataStorageSize"`
	DatabaseClusterType      pulumi.StringOutput                       `pulumi:"databaseClusterType"`
	DatabaseInstanceId       pulumi.StringOutput                       `pulumi:"databaseInstanceId"`
	DatabaseName             pulumi.StringOutput                       `pulumi:"databaseName"`
	DatabaseNodes            NdbScaleDatabaseDatabaseNodeArrayOutput   `pulumi:"databaseNodes"`
	DatabaseUuid             pulumi.StringOutput                       `pulumi:"databaseUuid"`
	Databasetype             pulumi.StringOutput                       `pulumi:"databasetype"`
	DateCreated              pulumi.StringOutput                       `pulumi:"dateCreated"`
	DateModified             pulumi.StringOutput                       `pulumi:"dateModified"`
	DbserverLogicalCluster   pulumi.StringMapOutput                    `pulumi:"dbserverLogicalCluster"`
	DbserverLogicalClusterId pulumi.StringOutput                       `pulumi:"dbserverLogicalClusterId"`
	Description              pulumi.StringOutput                       `pulumi:"description"`
	Infos                    NdbScaleDatabaseInfoArrayOutput           `pulumi:"infos"`
	LcmConfigs               NdbScaleDatabaseLcmConfigArrayOutput      `pulumi:"lcmConfigs"`
	LinkedDatabases          NdbScaleDatabaseLinkedDatabaseArrayOutput `pulumi:"linkedDatabases"`
	Metric                   pulumi.StringMapOutput                    `pulumi:"metric"`
	Name                     pulumi.StringOutput                       `pulumi:"name"`
	ParentDatabaseId         pulumi.StringOutput                       `pulumi:"parentDatabaseId"`
	ParentSourceDatabaseId   pulumi.StringOutput                       `pulumi:"parentSourceDatabaseId"`
	PostScriptCmd            pulumi.StringPtrOutput                    `pulumi:"postScriptCmd"`
	PreScriptCmd             pulumi.StringPtrOutput                    `pulumi:"preScriptCmd"`
	// List of all the properties
	Properties    NdbScaleDatabasePropertyArrayOutput    `pulumi:"properties"`
	ScaleCount    pulumi.IntPtrOutput                    `pulumi:"scaleCount"`
	Status        pulumi.StringOutput                    `pulumi:"status"`
	Tags          NdbScaleDatabaseTagArrayOutput         `pulumi:"tags"`
	TimeMachineId pulumi.StringOutput                    `pulumi:"timeMachineId"`
	TimeMachines  NdbScaleDatabaseTimeMachineArrayOutput `pulumi:"timeMachines"`
	TimeZone      pulumi.StringOutput                    `pulumi:"timeZone"`
	Type          pulumi.StringOutput                    `pulumi:"type"`
}

// NewNdbScaleDatabase registers a new resource with the given unique name, arguments, and options.
func NewNdbScaleDatabase(ctx *pulumi.Context,
	name string, args *NdbScaleDatabaseArgs, opts ...pulumi.ResourceOption) (*NdbScaleDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationType == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationType'")
	}
	if args.DataStorageSize == nil {
		return nil, errors.New("invalid value for required argument 'DataStorageSize'")
	}
	if args.DatabaseUuid == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseUuid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbScaleDatabase
	err := ctx.RegisterResource("nutanix:index/ndbScaleDatabase:NdbScaleDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbScaleDatabase gets an existing NdbScaleDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbScaleDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbScaleDatabaseState, opts ...pulumi.ResourceOption) (*NdbScaleDatabase, error) {
	var resource NdbScaleDatabase
	err := ctx.ReadResource("nutanix:index/ndbScaleDatabase:NdbScaleDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbScaleDatabase resources.
type ndbScaleDatabaseState struct {
	ApplicationType          *string                          `pulumi:"applicationType"`
	Clone                    *bool                            `pulumi:"clone"`
	DataStorageSize          *int                             `pulumi:"dataStorageSize"`
	DatabaseClusterType      *string                          `pulumi:"databaseClusterType"`
	DatabaseInstanceId       *string                          `pulumi:"databaseInstanceId"`
	DatabaseName             *string                          `pulumi:"databaseName"`
	DatabaseNodes            []NdbScaleDatabaseDatabaseNode   `pulumi:"databaseNodes"`
	DatabaseUuid             *string                          `pulumi:"databaseUuid"`
	Databasetype             *string                          `pulumi:"databasetype"`
	DateCreated              *string                          `pulumi:"dateCreated"`
	DateModified             *string                          `pulumi:"dateModified"`
	DbserverLogicalCluster   map[string]string                `pulumi:"dbserverLogicalCluster"`
	DbserverLogicalClusterId *string                          `pulumi:"dbserverLogicalClusterId"`
	Description              *string                          `pulumi:"description"`
	Infos                    []NdbScaleDatabaseInfo           `pulumi:"infos"`
	LcmConfigs               []NdbScaleDatabaseLcmConfig      `pulumi:"lcmConfigs"`
	LinkedDatabases          []NdbScaleDatabaseLinkedDatabase `pulumi:"linkedDatabases"`
	Metric                   map[string]string                `pulumi:"metric"`
	Name                     *string                          `pulumi:"name"`
	ParentDatabaseId         *string                          `pulumi:"parentDatabaseId"`
	ParentSourceDatabaseId   *string                          `pulumi:"parentSourceDatabaseId"`
	PostScriptCmd            *string                          `pulumi:"postScriptCmd"`
	PreScriptCmd             *string                          `pulumi:"preScriptCmd"`
	// List of all the properties
	Properties    []NdbScaleDatabaseProperty    `pulumi:"properties"`
	ScaleCount    *int                          `pulumi:"scaleCount"`
	Status        *string                       `pulumi:"status"`
	Tags          []NdbScaleDatabaseTag         `pulumi:"tags"`
	TimeMachineId *string                       `pulumi:"timeMachineId"`
	TimeMachines  []NdbScaleDatabaseTimeMachine `pulumi:"timeMachines"`
	TimeZone      *string                       `pulumi:"timeZone"`
	Type          *string                       `pulumi:"type"`
}

type NdbScaleDatabaseState struct {
	ApplicationType          pulumi.StringPtrInput
	Clone                    pulumi.BoolPtrInput
	DataStorageSize          pulumi.IntPtrInput
	DatabaseClusterType      pulumi.StringPtrInput
	DatabaseInstanceId       pulumi.StringPtrInput
	DatabaseName             pulumi.StringPtrInput
	DatabaseNodes            NdbScaleDatabaseDatabaseNodeArrayInput
	DatabaseUuid             pulumi.StringPtrInput
	Databasetype             pulumi.StringPtrInput
	DateCreated              pulumi.StringPtrInput
	DateModified             pulumi.StringPtrInput
	DbserverLogicalCluster   pulumi.StringMapInput
	DbserverLogicalClusterId pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	Infos                    NdbScaleDatabaseInfoArrayInput
	LcmConfigs               NdbScaleDatabaseLcmConfigArrayInput
	LinkedDatabases          NdbScaleDatabaseLinkedDatabaseArrayInput
	Metric                   pulumi.StringMapInput
	Name                     pulumi.StringPtrInput
	ParentDatabaseId         pulumi.StringPtrInput
	ParentSourceDatabaseId   pulumi.StringPtrInput
	PostScriptCmd            pulumi.StringPtrInput
	PreScriptCmd             pulumi.StringPtrInput
	// List of all the properties
	Properties    NdbScaleDatabasePropertyArrayInput
	ScaleCount    pulumi.IntPtrInput
	Status        pulumi.StringPtrInput
	Tags          NdbScaleDatabaseTagArrayInput
	TimeMachineId pulumi.StringPtrInput
	TimeMachines  NdbScaleDatabaseTimeMachineArrayInput
	TimeZone      pulumi.StringPtrInput
	Type          pulumi.StringPtrInput
}

func (NdbScaleDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbScaleDatabaseState)(nil)).Elem()
}

type ndbScaleDatabaseArgs struct {
	ApplicationType string                `pulumi:"applicationType"`
	DataStorageSize int                   `pulumi:"dataStorageSize"`
	DatabaseUuid    string                `pulumi:"databaseUuid"`
	PostScriptCmd   *string               `pulumi:"postScriptCmd"`
	PreScriptCmd    *string               `pulumi:"preScriptCmd"`
	ScaleCount      *int                  `pulumi:"scaleCount"`
	Tags            []NdbScaleDatabaseTag `pulumi:"tags"`
}

// The set of arguments for constructing a NdbScaleDatabase resource.
type NdbScaleDatabaseArgs struct {
	ApplicationType pulumi.StringInput
	DataStorageSize pulumi.IntInput
	DatabaseUuid    pulumi.StringInput
	PostScriptCmd   pulumi.StringPtrInput
	PreScriptCmd    pulumi.StringPtrInput
	ScaleCount      pulumi.IntPtrInput
	Tags            NdbScaleDatabaseTagArrayInput
}

func (NdbScaleDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbScaleDatabaseArgs)(nil)).Elem()
}

type NdbScaleDatabaseInput interface {
	pulumi.Input

	ToNdbScaleDatabaseOutput() NdbScaleDatabaseOutput
	ToNdbScaleDatabaseOutputWithContext(ctx context.Context) NdbScaleDatabaseOutput
}

func (*NdbScaleDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbScaleDatabase)(nil)).Elem()
}

func (i *NdbScaleDatabase) ToNdbScaleDatabaseOutput() NdbScaleDatabaseOutput {
	return i.ToNdbScaleDatabaseOutputWithContext(context.Background())
}

func (i *NdbScaleDatabase) ToNdbScaleDatabaseOutputWithContext(ctx context.Context) NdbScaleDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbScaleDatabaseOutput)
}

// NdbScaleDatabaseArrayInput is an input type that accepts NdbScaleDatabaseArray and NdbScaleDatabaseArrayOutput values.
// You can construct a concrete instance of `NdbScaleDatabaseArrayInput` via:
//
//	NdbScaleDatabaseArray{ NdbScaleDatabaseArgs{...} }
type NdbScaleDatabaseArrayInput interface {
	pulumi.Input

	ToNdbScaleDatabaseArrayOutput() NdbScaleDatabaseArrayOutput
	ToNdbScaleDatabaseArrayOutputWithContext(context.Context) NdbScaleDatabaseArrayOutput
}

type NdbScaleDatabaseArray []NdbScaleDatabaseInput

func (NdbScaleDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbScaleDatabase)(nil)).Elem()
}

func (i NdbScaleDatabaseArray) ToNdbScaleDatabaseArrayOutput() NdbScaleDatabaseArrayOutput {
	return i.ToNdbScaleDatabaseArrayOutputWithContext(context.Background())
}

func (i NdbScaleDatabaseArray) ToNdbScaleDatabaseArrayOutputWithContext(ctx context.Context) NdbScaleDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbScaleDatabaseArrayOutput)
}

// NdbScaleDatabaseMapInput is an input type that accepts NdbScaleDatabaseMap and NdbScaleDatabaseMapOutput values.
// You can construct a concrete instance of `NdbScaleDatabaseMapInput` via:
//
//	NdbScaleDatabaseMap{ "key": NdbScaleDatabaseArgs{...} }
type NdbScaleDatabaseMapInput interface {
	pulumi.Input

	ToNdbScaleDatabaseMapOutput() NdbScaleDatabaseMapOutput
	ToNdbScaleDatabaseMapOutputWithContext(context.Context) NdbScaleDatabaseMapOutput
}

type NdbScaleDatabaseMap map[string]NdbScaleDatabaseInput

func (NdbScaleDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbScaleDatabase)(nil)).Elem()
}

func (i NdbScaleDatabaseMap) ToNdbScaleDatabaseMapOutput() NdbScaleDatabaseMapOutput {
	return i.ToNdbScaleDatabaseMapOutputWithContext(context.Background())
}

func (i NdbScaleDatabaseMap) ToNdbScaleDatabaseMapOutputWithContext(ctx context.Context) NdbScaleDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbScaleDatabaseMapOutput)
}

type NdbScaleDatabaseOutput struct{ *pulumi.OutputState }

func (NdbScaleDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbScaleDatabase)(nil)).Elem()
}

func (o NdbScaleDatabaseOutput) ToNdbScaleDatabaseOutput() NdbScaleDatabaseOutput {
	return o
}

func (o NdbScaleDatabaseOutput) ToNdbScaleDatabaseOutputWithContext(ctx context.Context) NdbScaleDatabaseOutput {
	return o
}

func (o NdbScaleDatabaseOutput) ApplicationType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.ApplicationType }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) Clone() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.BoolOutput { return v.Clone }).(pulumi.BoolOutput)
}

func (o NdbScaleDatabaseOutput) DataStorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.IntOutput { return v.DataStorageSize }).(pulumi.IntOutput)
}

func (o NdbScaleDatabaseOutput) DatabaseClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.DatabaseClusterType }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) DatabaseInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.DatabaseInstanceId }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) DatabaseNodes() NdbScaleDatabaseDatabaseNodeArrayOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) NdbScaleDatabaseDatabaseNodeArrayOutput { return v.DatabaseNodes }).(NdbScaleDatabaseDatabaseNodeArrayOutput)
}

func (o NdbScaleDatabaseOutput) DatabaseUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.DatabaseUuid }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) Databasetype() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.Databasetype }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) DbserverLogicalCluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringMapOutput { return v.DbserverLogicalCluster }).(pulumi.StringMapOutput)
}

func (o NdbScaleDatabaseOutput) DbserverLogicalClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.DbserverLogicalClusterId }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) Infos() NdbScaleDatabaseInfoArrayOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) NdbScaleDatabaseInfoArrayOutput { return v.Infos }).(NdbScaleDatabaseInfoArrayOutput)
}

func (o NdbScaleDatabaseOutput) LcmConfigs() NdbScaleDatabaseLcmConfigArrayOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) NdbScaleDatabaseLcmConfigArrayOutput { return v.LcmConfigs }).(NdbScaleDatabaseLcmConfigArrayOutput)
}

func (o NdbScaleDatabaseOutput) LinkedDatabases() NdbScaleDatabaseLinkedDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) NdbScaleDatabaseLinkedDatabaseArrayOutput { return v.LinkedDatabases }).(NdbScaleDatabaseLinkedDatabaseArrayOutput)
}

func (o NdbScaleDatabaseOutput) Metric() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringMapOutput { return v.Metric }).(pulumi.StringMapOutput)
}

func (o NdbScaleDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) ParentDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.ParentDatabaseId }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) ParentSourceDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.ParentSourceDatabaseId }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) PostScriptCmd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringPtrOutput { return v.PostScriptCmd }).(pulumi.StringPtrOutput)
}

func (o NdbScaleDatabaseOutput) PreScriptCmd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringPtrOutput { return v.PreScriptCmd }).(pulumi.StringPtrOutput)
}

// List of all the properties
func (o NdbScaleDatabaseOutput) Properties() NdbScaleDatabasePropertyArrayOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) NdbScaleDatabasePropertyArrayOutput { return v.Properties }).(NdbScaleDatabasePropertyArrayOutput)
}

func (o NdbScaleDatabaseOutput) ScaleCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.IntPtrOutput { return v.ScaleCount }).(pulumi.IntPtrOutput)
}

func (o NdbScaleDatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) Tags() NdbScaleDatabaseTagArrayOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) NdbScaleDatabaseTagArrayOutput { return v.Tags }).(NdbScaleDatabaseTagArrayOutput)
}

func (o NdbScaleDatabaseOutput) TimeMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.TimeMachineId }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) TimeMachines() NdbScaleDatabaseTimeMachineArrayOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) NdbScaleDatabaseTimeMachineArrayOutput { return v.TimeMachines }).(NdbScaleDatabaseTimeMachineArrayOutput)
}

func (o NdbScaleDatabaseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

func (o NdbScaleDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbScaleDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NdbScaleDatabaseArrayOutput struct{ *pulumi.OutputState }

func (NdbScaleDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbScaleDatabase)(nil)).Elem()
}

func (o NdbScaleDatabaseArrayOutput) ToNdbScaleDatabaseArrayOutput() NdbScaleDatabaseArrayOutput {
	return o
}

func (o NdbScaleDatabaseArrayOutput) ToNdbScaleDatabaseArrayOutputWithContext(ctx context.Context) NdbScaleDatabaseArrayOutput {
	return o
}

func (o NdbScaleDatabaseArrayOutput) Index(i pulumi.IntInput) NdbScaleDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbScaleDatabase {
		return vs[0].([]*NdbScaleDatabase)[vs[1].(int)]
	}).(NdbScaleDatabaseOutput)
}

type NdbScaleDatabaseMapOutput struct{ *pulumi.OutputState }

func (NdbScaleDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbScaleDatabase)(nil)).Elem()
}

func (o NdbScaleDatabaseMapOutput) ToNdbScaleDatabaseMapOutput() NdbScaleDatabaseMapOutput {
	return o
}

func (o NdbScaleDatabaseMapOutput) ToNdbScaleDatabaseMapOutputWithContext(ctx context.Context) NdbScaleDatabaseMapOutput {
	return o
}

func (o NdbScaleDatabaseMapOutput) MapIndex(k pulumi.StringInput) NdbScaleDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbScaleDatabase {
		return vs[0].(map[string]*NdbScaleDatabase)[vs[1].(string)]
	}).(NdbScaleDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbScaleDatabaseInput)(nil)).Elem(), &NdbScaleDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbScaleDatabaseArrayInput)(nil)).Elem(), NdbScaleDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbScaleDatabaseMapInput)(nil)).Elem(), NdbScaleDatabaseMap{})
	pulumi.RegisterOutputType(NdbScaleDatabaseOutput{})
	pulumi.RegisterOutputType(NdbScaleDatabaseArrayOutput{})
	pulumi.RegisterOutputType(NdbScaleDatabaseMapOutput{})
}
