// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource to create Floating IPs.
//
// ## create Floating IP with External Subnet UUID
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewFloatingIp(ctx, "fip1", &nutanix.FloatingIpArgs{
//				ExternalSubnetReferenceUuid: pulumi.String("{{ext_sub_uuid}}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## create Floating IP with vpc name with external subnet name
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewFloatingIp(ctx, "fip2", &nutanix.FloatingIpArgs{
//				ExternalSubnetReferenceName: pulumi.String("{{ext_sub_name}}"),
//				PrivateIp:                   pulumi.String("{{ip_address}}"),
//				VpcReferenceName:            pulumi.String("{{vpc_name}}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FloatingIp struct {
	pulumi.CustomResourceState

	// The version of the API.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// The reference to a subnet. Should not be used with
	// {external_subnet_reference_uuid} .
	ExternalSubnetReferenceName pulumi.StringPtrOutput `pulumi:"externalSubnetReferenceName"`
	// The reference to a subnet. Should not be used with {external_subnet_reference_name} .
	ExternalSubnetReferenceUuid pulumi.StringOutput `pulumi:"externalSubnetReferenceUuid"`
	// The floatingIps kind metadata.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Private IP with which floating IP is associated. Should be used with vpcReference .
	PrivateIp pulumi.StringPtrOutput `pulumi:"privateIp"`
	// The reference to a vmNic .
	VmNicReferenceUuid pulumi.StringPtrOutput `pulumi:"vmNicReferenceUuid"`
	// The reference to a vpc. Should not be used with {vpc_reference_uuid}.
	VpcReferenceName pulumi.StringPtrOutput `pulumi:"vpcReferenceName"`
	// The reference to a vpc. Should not be used with {vpc_reference_name}.
	VpcReferenceUuid pulumi.StringOutput `pulumi:"vpcReferenceUuid"`
}

// NewFloatingIp registers a new resource with the given unique name, arguments, and options.
func NewFloatingIp(ctx *pulumi.Context,
	name string, args *FloatingIpArgs, opts ...pulumi.ResourceOption) (*FloatingIp, error) {
	if args == nil {
		args = &FloatingIpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FloatingIp
	err := ctx.RegisterResource("nutanix:index/floatingIp:FloatingIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloatingIp gets an existing FloatingIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloatingIpState, opts ...pulumi.ResourceOption) (*FloatingIp, error) {
	var resource FloatingIp
	err := ctx.ReadResource("nutanix:index/floatingIp:FloatingIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloatingIp resources.
type floatingIpState struct {
	// The version of the API.
	ApiVersion *string `pulumi:"apiVersion"`
	// The reference to a subnet. Should not be used with
	// {external_subnet_reference_uuid} .
	ExternalSubnetReferenceName *string `pulumi:"externalSubnetReferenceName"`
	// The reference to a subnet. Should not be used with {external_subnet_reference_name} .
	ExternalSubnetReferenceUuid *string `pulumi:"externalSubnetReferenceUuid"`
	// The floatingIps kind metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// Private IP with which floating IP is associated. Should be used with vpcReference .
	PrivateIp *string `pulumi:"privateIp"`
	// The reference to a vmNic .
	VmNicReferenceUuid *string `pulumi:"vmNicReferenceUuid"`
	// The reference to a vpc. Should not be used with {vpc_reference_uuid}.
	VpcReferenceName *string `pulumi:"vpcReferenceName"`
	// The reference to a vpc. Should not be used with {vpc_reference_name}.
	VpcReferenceUuid *string `pulumi:"vpcReferenceUuid"`
}

type FloatingIpState struct {
	// The version of the API.
	ApiVersion pulumi.StringPtrInput
	// The reference to a subnet. Should not be used with
	// {external_subnet_reference_uuid} .
	ExternalSubnetReferenceName pulumi.StringPtrInput
	// The reference to a subnet. Should not be used with {external_subnet_reference_name} .
	ExternalSubnetReferenceUuid pulumi.StringPtrInput
	// The floatingIps kind metadata.
	Metadata pulumi.StringMapInput
	// Private IP with which floating IP is associated. Should be used with vpcReference .
	PrivateIp pulumi.StringPtrInput
	// The reference to a vmNic .
	VmNicReferenceUuid pulumi.StringPtrInput
	// The reference to a vpc. Should not be used with {vpc_reference_uuid}.
	VpcReferenceName pulumi.StringPtrInput
	// The reference to a vpc. Should not be used with {vpc_reference_name}.
	VpcReferenceUuid pulumi.StringPtrInput
}

func (FloatingIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpState)(nil)).Elem()
}

type floatingIpArgs struct {
	// The version of the API.
	ApiVersion *string `pulumi:"apiVersion"`
	// The reference to a subnet. Should not be used with
	// {external_subnet_reference_uuid} .
	ExternalSubnetReferenceName *string `pulumi:"externalSubnetReferenceName"`
	// The reference to a subnet. Should not be used with {external_subnet_reference_name} .
	ExternalSubnetReferenceUuid *string `pulumi:"externalSubnetReferenceUuid"`
	// Private IP with which floating IP is associated. Should be used with vpcReference .
	PrivateIp *string `pulumi:"privateIp"`
	// The reference to a vmNic .
	VmNicReferenceUuid *string `pulumi:"vmNicReferenceUuid"`
	// The reference to a vpc. Should not be used with {vpc_reference_uuid}.
	VpcReferenceName *string `pulumi:"vpcReferenceName"`
	// The reference to a vpc. Should not be used with {vpc_reference_name}.
	VpcReferenceUuid *string `pulumi:"vpcReferenceUuid"`
}

// The set of arguments for constructing a FloatingIp resource.
type FloatingIpArgs struct {
	// The version of the API.
	ApiVersion pulumi.StringPtrInput
	// The reference to a subnet. Should not be used with
	// {external_subnet_reference_uuid} .
	ExternalSubnetReferenceName pulumi.StringPtrInput
	// The reference to a subnet. Should not be used with {external_subnet_reference_name} .
	ExternalSubnetReferenceUuid pulumi.StringPtrInput
	// Private IP with which floating IP is associated. Should be used with vpcReference .
	PrivateIp pulumi.StringPtrInput
	// The reference to a vmNic .
	VmNicReferenceUuid pulumi.StringPtrInput
	// The reference to a vpc. Should not be used with {vpc_reference_uuid}.
	VpcReferenceName pulumi.StringPtrInput
	// The reference to a vpc. Should not be used with {vpc_reference_name}.
	VpcReferenceUuid pulumi.StringPtrInput
}

func (FloatingIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpArgs)(nil)).Elem()
}

type FloatingIpInput interface {
	pulumi.Input

	ToFloatingIpOutput() FloatingIpOutput
	ToFloatingIpOutputWithContext(ctx context.Context) FloatingIpOutput
}

func (*FloatingIp) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIp)(nil)).Elem()
}

func (i *FloatingIp) ToFloatingIpOutput() FloatingIpOutput {
	return i.ToFloatingIpOutputWithContext(context.Background())
}

func (i *FloatingIp) ToFloatingIpOutputWithContext(ctx context.Context) FloatingIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpOutput)
}

// FloatingIpArrayInput is an input type that accepts FloatingIpArray and FloatingIpArrayOutput values.
// You can construct a concrete instance of `FloatingIpArrayInput` via:
//
//	FloatingIpArray{ FloatingIpArgs{...} }
type FloatingIpArrayInput interface {
	pulumi.Input

	ToFloatingIpArrayOutput() FloatingIpArrayOutput
	ToFloatingIpArrayOutputWithContext(context.Context) FloatingIpArrayOutput
}

type FloatingIpArray []FloatingIpInput

func (FloatingIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FloatingIp)(nil)).Elem()
}

func (i FloatingIpArray) ToFloatingIpArrayOutput() FloatingIpArrayOutput {
	return i.ToFloatingIpArrayOutputWithContext(context.Background())
}

func (i FloatingIpArray) ToFloatingIpArrayOutputWithContext(ctx context.Context) FloatingIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpArrayOutput)
}

// FloatingIpMapInput is an input type that accepts FloatingIpMap and FloatingIpMapOutput values.
// You can construct a concrete instance of `FloatingIpMapInput` via:
//
//	FloatingIpMap{ "key": FloatingIpArgs{...} }
type FloatingIpMapInput interface {
	pulumi.Input

	ToFloatingIpMapOutput() FloatingIpMapOutput
	ToFloatingIpMapOutputWithContext(context.Context) FloatingIpMapOutput
}

type FloatingIpMap map[string]FloatingIpInput

func (FloatingIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FloatingIp)(nil)).Elem()
}

func (i FloatingIpMap) ToFloatingIpMapOutput() FloatingIpMapOutput {
	return i.ToFloatingIpMapOutputWithContext(context.Background())
}

func (i FloatingIpMap) ToFloatingIpMapOutputWithContext(ctx context.Context) FloatingIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpMapOutput)
}

type FloatingIpOutput struct{ *pulumi.OutputState }

func (FloatingIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIp)(nil)).Elem()
}

func (o FloatingIpOutput) ToFloatingIpOutput() FloatingIpOutput {
	return o
}

func (o FloatingIpOutput) ToFloatingIpOutputWithContext(ctx context.Context) FloatingIpOutput {
	return o
}

// The version of the API.
func (o FloatingIpOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// The reference to a subnet. Should not be used with
// {external_subnet_reference_uuid} .
func (o FloatingIpOutput) ExternalSubnetReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringPtrOutput { return v.ExternalSubnetReferenceName }).(pulumi.StringPtrOutput)
}

// The reference to a subnet. Should not be used with {external_subnet_reference_name} .
func (o FloatingIpOutput) ExternalSubnetReferenceUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringOutput { return v.ExternalSubnetReferenceUuid }).(pulumi.StringOutput)
}

// The floatingIps kind metadata.
func (o FloatingIpOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// Private IP with which floating IP is associated. Should be used with vpcReference .
func (o FloatingIpOutput) PrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringPtrOutput { return v.PrivateIp }).(pulumi.StringPtrOutput)
}

// The reference to a vmNic .
func (o FloatingIpOutput) VmNicReferenceUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringPtrOutput { return v.VmNicReferenceUuid }).(pulumi.StringPtrOutput)
}

// The reference to a vpc. Should not be used with {vpc_reference_uuid}.
func (o FloatingIpOutput) VpcReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringPtrOutput { return v.VpcReferenceName }).(pulumi.StringPtrOutput)
}

// The reference to a vpc. Should not be used with {vpc_reference_name}.
func (o FloatingIpOutput) VpcReferenceUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIp) pulumi.StringOutput { return v.VpcReferenceUuid }).(pulumi.StringOutput)
}

type FloatingIpArrayOutput struct{ *pulumi.OutputState }

func (FloatingIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FloatingIp)(nil)).Elem()
}

func (o FloatingIpArrayOutput) ToFloatingIpArrayOutput() FloatingIpArrayOutput {
	return o
}

func (o FloatingIpArrayOutput) ToFloatingIpArrayOutputWithContext(ctx context.Context) FloatingIpArrayOutput {
	return o
}

func (o FloatingIpArrayOutput) Index(i pulumi.IntInput) FloatingIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FloatingIp {
		return vs[0].([]*FloatingIp)[vs[1].(int)]
	}).(FloatingIpOutput)
}

type FloatingIpMapOutput struct{ *pulumi.OutputState }

func (FloatingIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FloatingIp)(nil)).Elem()
}

func (o FloatingIpMapOutput) ToFloatingIpMapOutput() FloatingIpMapOutput {
	return o
}

func (o FloatingIpMapOutput) ToFloatingIpMapOutputWithContext(ctx context.Context) FloatingIpMapOutput {
	return o
}

func (o FloatingIpMapOutput) MapIndex(k pulumi.StringInput) FloatingIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FloatingIp {
		return vs[0].(map[string]*FloatingIp)[vs[1].(string)]
	}).(FloatingIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpInput)(nil)).Elem(), &FloatingIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpArrayInput)(nil)).Elem(), FloatingIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpMapInput)(nil)).Elem(), FloatingIpMap{})
	pulumi.RegisterOutputType(FloatingIpOutput{})
	pulumi.RegisterOutputType(FloatingIpArrayOutput{})
	pulumi.RegisterOutputType(FloatingIpMapOutput{})
}
