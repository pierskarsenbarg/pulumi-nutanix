// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource to create Floating IPs.
//
// ## Example1 :  create Floating IP with External Subnet
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create Floating IP with External Subnet UUID
//			_, err := nutanix.NewFloatingIpV2(ctx, "fip-ext-subnet", &nutanix.FloatingIpV2Args{
//				Description:             pulumi.String("example fip  description"),
//				ExternalSubnetReference: pulumi.String("ba250e3e-1db1-4950-917f-a9e2ea35b8e3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example2 :  create Floating IP with External Subnet with vm association
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewFloatingIpV2(ctx, "fip-ext-subnet-vm", &nutanix.FloatingIpV2Args{
//				Associations: nutanix.FloatingIpV2AssociationArray{
//					&nutanix.FloatingIpV2AssociationArgs{
//						VmNicAssociations: nutanix.FloatingIpV2AssociationVmNicAssociationArray{
//							&nutanix.FloatingIpV2AssociationVmNicAssociationArgs{
//								VmNicReference: pulumi.String("31e4b3b1-4b3b-4b3b-4b3b-4b3b4b3b4b3b"),
//							},
//						},
//					},
//				},
//				Description:             pulumi.String("example fip  description"),
//				ExternalSubnetReference: pulumi.String("ba250e3e-1db1-4950-917f-a9e2ea35b8e3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FloatingIpV2 struct {
	pulumi.CustomResourceState

	// Association status of floating IP.
	AssociationStatus pulumi.StringOutput `pulumi:"associationStatus"`
	// Association of the Floating IP with either NIC or Private IP
	Associations FloatingIpV2AssociationArrayOutput `pulumi:"associations"`
	// Description for the Floating IP.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	ExtId       pulumi.StringOutput    `pulumi:"extId"`
	// External subnet reference for the Floating IP to be allocated in on-prem only.
	ExternalSubnetReference pulumi.StringPtrOutput `pulumi:"externalSubnetReference"`
	// Networking common base object
	ExternalSubnets FloatingIpV2ExternalSubnetArrayOutput `pulumi:"externalSubnets"`
	FloatingIpValue pulumi.StringOutput                   `pulumi:"floatingIpValue"`
	// Floating IP address.
	FloatingIps FloatingIpV2FloatingIpArrayOutput `pulumi:"floatingIps"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links                        FloatingIpV2LinkArrayOutput `pulumi:"links"`
	LoadBalancerSessionReference pulumi.StringPtrOutput      `pulumi:"loadBalancerSessionReference"`
	// Metadata associated with this resource.
	Metadatas FloatingIpV2MetadataArrayOutput `pulumi:"metadatas"`
	// Name of the floating IP.
	Name      pulumi.StringOutput `pulumi:"name"`
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// VM NIC reference.
	VmNicReference pulumi.StringOutput `pulumi:"vmNicReference"`
	// Virtual NIC for projections
	VmNics FloatingIpV2VmNicArrayOutput `pulumi:"vmNics"`
	// VPC reference UUID
	VpcReference pulumi.StringOutput `pulumi:"vpcReference"`
	// Networking common base object
	Vpcs FloatingIpV2VpcArrayOutput `pulumi:"vpcs"`
}

// NewFloatingIpV2 registers a new resource with the given unique name, arguments, and options.
func NewFloatingIpV2(ctx *pulumi.Context,
	name string, args *FloatingIpV2Args, opts ...pulumi.ResourceOption) (*FloatingIpV2, error) {
	if args == nil {
		args = &FloatingIpV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FloatingIpV2
	err := ctx.RegisterResource("nutanix:index/floatingIpV2:FloatingIpV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloatingIpV2 gets an existing FloatingIpV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIpV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloatingIpV2State, opts ...pulumi.ResourceOption) (*FloatingIpV2, error) {
	var resource FloatingIpV2
	err := ctx.ReadResource("nutanix:index/floatingIpV2:FloatingIpV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloatingIpV2 resources.
type floatingIpV2State struct {
	// Association status of floating IP.
	AssociationStatus *string `pulumi:"associationStatus"`
	// Association of the Floating IP with either NIC or Private IP
	Associations []FloatingIpV2Association `pulumi:"associations"`
	// Description for the Floating IP.
	Description *string `pulumi:"description"`
	ExtId       *string `pulumi:"extId"`
	// External subnet reference for the Floating IP to be allocated in on-prem only.
	ExternalSubnetReference *string `pulumi:"externalSubnetReference"`
	// Networking common base object
	ExternalSubnets []FloatingIpV2ExternalSubnet `pulumi:"externalSubnets"`
	FloatingIpValue *string                      `pulumi:"floatingIpValue"`
	// Floating IP address.
	FloatingIps []FloatingIpV2FloatingIp `pulumi:"floatingIps"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links                        []FloatingIpV2Link `pulumi:"links"`
	LoadBalancerSessionReference *string            `pulumi:"loadBalancerSessionReference"`
	// Metadata associated with this resource.
	Metadatas []FloatingIpV2Metadata `pulumi:"metadatas"`
	// Name of the floating IP.
	Name      *string `pulumi:"name"`
	PrivateIp *string `pulumi:"privateIp"`
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId *string `pulumi:"tenantId"`
	// VM NIC reference.
	VmNicReference *string `pulumi:"vmNicReference"`
	// Virtual NIC for projections
	VmNics []FloatingIpV2VmNic `pulumi:"vmNics"`
	// VPC reference UUID
	VpcReference *string `pulumi:"vpcReference"`
	// Networking common base object
	Vpcs []FloatingIpV2Vpc `pulumi:"vpcs"`
}

type FloatingIpV2State struct {
	// Association status of floating IP.
	AssociationStatus pulumi.StringPtrInput
	// Association of the Floating IP with either NIC or Private IP
	Associations FloatingIpV2AssociationArrayInput
	// Description for the Floating IP.
	Description pulumi.StringPtrInput
	ExtId       pulumi.StringPtrInput
	// External subnet reference for the Floating IP to be allocated in on-prem only.
	ExternalSubnetReference pulumi.StringPtrInput
	// Networking common base object
	ExternalSubnets FloatingIpV2ExternalSubnetArrayInput
	FloatingIpValue pulumi.StringPtrInput
	// Floating IP address.
	FloatingIps FloatingIpV2FloatingIpArrayInput
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links                        FloatingIpV2LinkArrayInput
	LoadBalancerSessionReference pulumi.StringPtrInput
	// Metadata associated with this resource.
	Metadatas FloatingIpV2MetadataArrayInput
	// Name of the floating IP.
	Name      pulumi.StringPtrInput
	PrivateIp pulumi.StringPtrInput
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringPtrInput
	// VM NIC reference.
	VmNicReference pulumi.StringPtrInput
	// Virtual NIC for projections
	VmNics FloatingIpV2VmNicArrayInput
	// VPC reference UUID
	VpcReference pulumi.StringPtrInput
	// Networking common base object
	Vpcs FloatingIpV2VpcArrayInput
}

func (FloatingIpV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpV2State)(nil)).Elem()
}

type floatingIpV2Args struct {
	// Association of the Floating IP with either NIC or Private IP
	Associations []FloatingIpV2Association `pulumi:"associations"`
	// Description for the Floating IP.
	Description *string `pulumi:"description"`
	ExtId       *string `pulumi:"extId"`
	// External subnet reference for the Floating IP to be allocated in on-prem only.
	ExternalSubnetReference *string `pulumi:"externalSubnetReference"`
	// Networking common base object
	ExternalSubnets []FloatingIpV2ExternalSubnet `pulumi:"externalSubnets"`
	// Floating IP address.
	FloatingIps                  []FloatingIpV2FloatingIp `pulumi:"floatingIps"`
	LoadBalancerSessionReference *string                  `pulumi:"loadBalancerSessionReference"`
	// Name of the floating IP.
	Name *string `pulumi:"name"`
	// VM NIC reference.
	VmNicReference *string `pulumi:"vmNicReference"`
	// Virtual NIC for projections
	VmNics []FloatingIpV2VmNic `pulumi:"vmNics"`
	// VPC reference UUID
	VpcReference *string `pulumi:"vpcReference"`
	// Networking common base object
	Vpcs []FloatingIpV2Vpc `pulumi:"vpcs"`
}

// The set of arguments for constructing a FloatingIpV2 resource.
type FloatingIpV2Args struct {
	// Association of the Floating IP with either NIC or Private IP
	Associations FloatingIpV2AssociationArrayInput
	// Description for the Floating IP.
	Description pulumi.StringPtrInput
	ExtId       pulumi.StringPtrInput
	// External subnet reference for the Floating IP to be allocated in on-prem only.
	ExternalSubnetReference pulumi.StringPtrInput
	// Networking common base object
	ExternalSubnets FloatingIpV2ExternalSubnetArrayInput
	// Floating IP address.
	FloatingIps                  FloatingIpV2FloatingIpArrayInput
	LoadBalancerSessionReference pulumi.StringPtrInput
	// Name of the floating IP.
	Name pulumi.StringPtrInput
	// VM NIC reference.
	VmNicReference pulumi.StringPtrInput
	// Virtual NIC for projections
	VmNics FloatingIpV2VmNicArrayInput
	// VPC reference UUID
	VpcReference pulumi.StringPtrInput
	// Networking common base object
	Vpcs FloatingIpV2VpcArrayInput
}

func (FloatingIpV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpV2Args)(nil)).Elem()
}

type FloatingIpV2Input interface {
	pulumi.Input

	ToFloatingIpV2Output() FloatingIpV2Output
	ToFloatingIpV2OutputWithContext(ctx context.Context) FloatingIpV2Output
}

func (*FloatingIpV2) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIpV2)(nil)).Elem()
}

func (i *FloatingIpV2) ToFloatingIpV2Output() FloatingIpV2Output {
	return i.ToFloatingIpV2OutputWithContext(context.Background())
}

func (i *FloatingIpV2) ToFloatingIpV2OutputWithContext(ctx context.Context) FloatingIpV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpV2Output)
}

// FloatingIpV2ArrayInput is an input type that accepts FloatingIpV2Array and FloatingIpV2ArrayOutput values.
// You can construct a concrete instance of `FloatingIpV2ArrayInput` via:
//
//	FloatingIpV2Array{ FloatingIpV2Args{...} }
type FloatingIpV2ArrayInput interface {
	pulumi.Input

	ToFloatingIpV2ArrayOutput() FloatingIpV2ArrayOutput
	ToFloatingIpV2ArrayOutputWithContext(context.Context) FloatingIpV2ArrayOutput
}

type FloatingIpV2Array []FloatingIpV2Input

func (FloatingIpV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FloatingIpV2)(nil)).Elem()
}

func (i FloatingIpV2Array) ToFloatingIpV2ArrayOutput() FloatingIpV2ArrayOutput {
	return i.ToFloatingIpV2ArrayOutputWithContext(context.Background())
}

func (i FloatingIpV2Array) ToFloatingIpV2ArrayOutputWithContext(ctx context.Context) FloatingIpV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpV2ArrayOutput)
}

// FloatingIpV2MapInput is an input type that accepts FloatingIpV2Map and FloatingIpV2MapOutput values.
// You can construct a concrete instance of `FloatingIpV2MapInput` via:
//
//	FloatingIpV2Map{ "key": FloatingIpV2Args{...} }
type FloatingIpV2MapInput interface {
	pulumi.Input

	ToFloatingIpV2MapOutput() FloatingIpV2MapOutput
	ToFloatingIpV2MapOutputWithContext(context.Context) FloatingIpV2MapOutput
}

type FloatingIpV2Map map[string]FloatingIpV2Input

func (FloatingIpV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FloatingIpV2)(nil)).Elem()
}

func (i FloatingIpV2Map) ToFloatingIpV2MapOutput() FloatingIpV2MapOutput {
	return i.ToFloatingIpV2MapOutputWithContext(context.Background())
}

func (i FloatingIpV2Map) ToFloatingIpV2MapOutputWithContext(ctx context.Context) FloatingIpV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpV2MapOutput)
}

type FloatingIpV2Output struct{ *pulumi.OutputState }

func (FloatingIpV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIpV2)(nil)).Elem()
}

func (o FloatingIpV2Output) ToFloatingIpV2Output() FloatingIpV2Output {
	return o
}

func (o FloatingIpV2Output) ToFloatingIpV2OutputWithContext(ctx context.Context) FloatingIpV2Output {
	return o
}

// Association status of floating IP.
func (o FloatingIpV2Output) AssociationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.AssociationStatus }).(pulumi.StringOutput)
}

// Association of the Floating IP with either NIC or Private IP
func (o FloatingIpV2Output) Associations() FloatingIpV2AssociationArrayOutput {
	return o.ApplyT(func(v *FloatingIpV2) FloatingIpV2AssociationArrayOutput { return v.Associations }).(FloatingIpV2AssociationArrayOutput)
}

// Description for the Floating IP.
func (o FloatingIpV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FloatingIpV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// External subnet reference for the Floating IP to be allocated in on-prem only.
func (o FloatingIpV2Output) ExternalSubnetReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringPtrOutput { return v.ExternalSubnetReference }).(pulumi.StringPtrOutput)
}

// Networking common base object
func (o FloatingIpV2Output) ExternalSubnets() FloatingIpV2ExternalSubnetArrayOutput {
	return o.ApplyT(func(v *FloatingIpV2) FloatingIpV2ExternalSubnetArrayOutput { return v.ExternalSubnets }).(FloatingIpV2ExternalSubnetArrayOutput)
}

func (o FloatingIpV2Output) FloatingIpValue() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.FloatingIpValue }).(pulumi.StringOutput)
}

// Floating IP address.
func (o FloatingIpV2Output) FloatingIps() FloatingIpV2FloatingIpArrayOutput {
	return o.ApplyT(func(v *FloatingIpV2) FloatingIpV2FloatingIpArrayOutput { return v.FloatingIps }).(FloatingIpV2FloatingIpArrayOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o FloatingIpV2Output) Links() FloatingIpV2LinkArrayOutput {
	return o.ApplyT(func(v *FloatingIpV2) FloatingIpV2LinkArrayOutput { return v.Links }).(FloatingIpV2LinkArrayOutput)
}

func (o FloatingIpV2Output) LoadBalancerSessionReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringPtrOutput { return v.LoadBalancerSessionReference }).(pulumi.StringPtrOutput)
}

// Metadata associated with this resource.
func (o FloatingIpV2Output) Metadatas() FloatingIpV2MetadataArrayOutput {
	return o.ApplyT(func(v *FloatingIpV2) FloatingIpV2MetadataArrayOutput { return v.Metadatas }).(FloatingIpV2MetadataArrayOutput)
}

// Name of the floating IP.
func (o FloatingIpV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FloatingIpV2Output) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// A globally unique identifier that represents the tenant that owns this entity.
func (o FloatingIpV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// VM NIC reference.
func (o FloatingIpV2Output) VmNicReference() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.VmNicReference }).(pulumi.StringOutput)
}

// Virtual NIC for projections
func (o FloatingIpV2Output) VmNics() FloatingIpV2VmNicArrayOutput {
	return o.ApplyT(func(v *FloatingIpV2) FloatingIpV2VmNicArrayOutput { return v.VmNics }).(FloatingIpV2VmNicArrayOutput)
}

// VPC reference UUID
func (o FloatingIpV2Output) VpcReference() pulumi.StringOutput {
	return o.ApplyT(func(v *FloatingIpV2) pulumi.StringOutput { return v.VpcReference }).(pulumi.StringOutput)
}

// Networking common base object
func (o FloatingIpV2Output) Vpcs() FloatingIpV2VpcArrayOutput {
	return o.ApplyT(func(v *FloatingIpV2) FloatingIpV2VpcArrayOutput { return v.Vpcs }).(FloatingIpV2VpcArrayOutput)
}

type FloatingIpV2ArrayOutput struct{ *pulumi.OutputState }

func (FloatingIpV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FloatingIpV2)(nil)).Elem()
}

func (o FloatingIpV2ArrayOutput) ToFloatingIpV2ArrayOutput() FloatingIpV2ArrayOutput {
	return o
}

func (o FloatingIpV2ArrayOutput) ToFloatingIpV2ArrayOutputWithContext(ctx context.Context) FloatingIpV2ArrayOutput {
	return o
}

func (o FloatingIpV2ArrayOutput) Index(i pulumi.IntInput) FloatingIpV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FloatingIpV2 {
		return vs[0].([]*FloatingIpV2)[vs[1].(int)]
	}).(FloatingIpV2Output)
}

type FloatingIpV2MapOutput struct{ *pulumi.OutputState }

func (FloatingIpV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FloatingIpV2)(nil)).Elem()
}

func (o FloatingIpV2MapOutput) ToFloatingIpV2MapOutput() FloatingIpV2MapOutput {
	return o
}

func (o FloatingIpV2MapOutput) ToFloatingIpV2MapOutputWithContext(ctx context.Context) FloatingIpV2MapOutput {
	return o
}

func (o FloatingIpV2MapOutput) MapIndex(k pulumi.StringInput) FloatingIpV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FloatingIpV2 {
		return vs[0].(map[string]*FloatingIpV2)[vs[1].(string)]
	}).(FloatingIpV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpV2Input)(nil)).Elem(), &FloatingIpV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpV2ArrayInput)(nil)).Elem(), FloatingIpV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpV2MapInput)(nil)).Elem(), FloatingIpV2Map{})
	pulumi.RegisterOutputType(FloatingIpV2Output{})
	pulumi.RegisterOutputType(FloatingIpV2ArrayOutput{})
	pulumi.RegisterOutputType(FloatingIpV2MapOutput{})
}
