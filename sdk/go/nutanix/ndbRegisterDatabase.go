// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to register the database based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// register PostgreSQL database with instance not registered on VM
//			_, err := nutanix.NewNdbRegisterDatabase(ctx, "name", &nutanix.NdbRegisterDatabaseArgs{
//				Category:     pulumi.String("DEFAULT"),
//				DatabaseName: pulumi.String("test-inst"),
//				DatabaseType: pulumi.String("postgres_database"),
//				Description:  pulumi.String("added by terraform"),
//				NxClusterId:  pulumi.String("{{ cluster_ID }}"),
//				PostgressInfos: nutanix.NdbRegisterDatabasePostgressInfoArray{
//					&nutanix.NdbRegisterDatabasePostgressInfoArgs{
//						BackupPolicy:         pulumi.String("prefer_secondary"),
//						DbName:               pulumi.String("testdb1"),
//						DbPassword:           pulumi.String("pass"),
//						DbUser:               pulumi.String("postgres"),
//						ListenerPort:         pulumi.String("5432"),
//						PostgresSoftwareHome: pulumi.String("{{ directory where the PostgreSQL database software is installed }}"),
//					},
//				},
//				ResetDescriptionInNxCluster: pulumi.Bool(false),
//				TimeMachineInfo: &nutanix.NdbRegisterDatabaseTimeMachineInfoArgs{
//					Description: pulumi.String("description of tms"),
//					Name:        pulumi.String("test-pg-inst-regis"),
//					Schedule: &nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleArgs{
//						Continuousschedule: &nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs{
//							Enabled:           pulumi.Bool(true),
//							Logbackupinterval: pulumi.Int(30),
//							Snapshotsperday:   pulumi.Int(1),
//						},
//						Monthlyschedule: &nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs{
//							Dayofmonth: pulumi.Int(27),
//							Enabled:    pulumi.Bool(true),
//						},
//						Quartelyschedule: &nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs{
//							Dayofmonth: pulumi.Int(27),
//							Enabled:    pulumi.Bool(true),
//							Startmonth: pulumi.String("JANUARY"),
//						},
//						Snapshottimeofday: &nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs{
//							Hours:   pulumi.Int(16),
//							Minutes: pulumi.Int(0),
//							Seconds: pulumi.Int(0),
//						},
//						Weeklyschedule: &nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs{
//							Dayofweek: pulumi.String("WEDNESDAY"),
//							Enabled:   pulumi.Bool(true),
//						},
//						Yearlyschedule: &nutanix.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs{
//							Dayofmonth: pulumi.Int(31),
//							Enabled:    pulumi.Bool(false),
//							Month:      pulumi.String("DECEMBER"),
//						},
//					},
//					Slaid: pulumi.String(" {{ SLA ID}}"),
//				},
//				VmIp:             pulumi.String("{{ vm_ip }}"),
//				VmPassword:       pulumi.String("{{ vm_password }}"),
//				VmUsername:       pulumi.String("{{ vm_username }}"),
//				WorkingDirectory: pulumi.String("/tmp"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbRegisterDatabase struct {
	pulumi.CustomResourceState

	// action arguments
	Actionarguments NdbRegisterDatabaseActionargumentArrayOutput `pulumi:"actionarguments"`
	// auto tune staging drive. Default is true
	AutoTuneStagingDrive pulumi.BoolPtrOutput `pulumi:"autoTuneStagingDrive"`
	// category of database. Default is "DEFAULT"
	Category pulumi.StringPtrOutput `pulumi:"category"`
	// whether instance is cloned or not
	Clone pulumi.BoolOutput `pulumi:"clone"`
	// clustered or not. Default is false
	Clustered pulumi.BoolPtrOutput `pulumi:"clustered"`
	// database cluster type
	DatabaseClusterType pulumi.StringOutput `pulumi:"databaseClusterType"`
	// name of database
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// database nodes associated with database instance
	DatabaseNodes NdbRegisterDatabaseDatabaseNodeArrayOutput `pulumi:"databaseNodes"`
	// status of database
	DatabaseStatus pulumi.StringOutput `pulumi:"databaseStatus"`
	// type of database. Required value: postgres_database
	DatabaseType pulumi.StringOutput `pulumi:"databaseType"`
	// date created for db instance
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// date modified for instance
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// dbserver logical cluster
	DbserverLogicalCluster pulumi.StringMapOutput `pulumi:"dbserverLogicalCluster"`
	// dbserver logical cluster id
	DbserverLogicalClusterId pulumi.StringOutput `pulumi:"dbserverLogicalClusterId"`
	// - (Optional) Delete the database from the VM. Default value is false
	Delete pulumi.BoolPtrOutput `pulumi:"delete"`
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster pulumi.BoolPtrOutput `pulumi:"deleteLogicalCluster"`
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine pulumi.BoolPtrOutput `pulumi:"deleteTimeMachine"`
	// description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// - (Optional) Force delete of instance. Default is false
	Forced pulumi.BoolPtrOutput `pulumi:"forced"`
	// forced install. Default:  true
	ForcedInstall pulumi.BoolPtrOutput   `pulumi:"forcedInstall"`
	GroupInfo     pulumi.StringMapOutput `pulumi:"groupInfo"`
	// info of instance
	Infos NdbRegisterDatabaseInfoArrayOutput `pulumi:"infos"`
	// LCM config of instance
	LcmConfigs NdbRegisterDatabaseLcmConfigArrayOutput `pulumi:"lcmConfigs"`
	// linked databases within database instance
	LinkedDatabases NdbRegisterDatabaseLinkedDatabaseArrayOutput `pulumi:"linkedDatabases"`
	// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
	Metric pulumi.StringMapOutput `pulumi:"metric"`
	// Name of database instance
	Name pulumi.StringOutput `pulumi:"name"`
	// cluster on which NDB is present
	NxClusterId pulumi.StringPtrOutput `pulumi:"nxClusterId"`
	// parent database id
	ParentDatabaseId pulumi.StringOutput `pulumi:"parentDatabaseId"`
	// parent source database id
	ParentSourceDatabaseId pulumi.StringOutput `pulumi:"parentSourceDatabaseId"`
	// parent time machine id
	ParentTimeMachineId pulumi.StringOutput `pulumi:"parentTimeMachineId"`
	// Postgress_Info for registering.
	PostgressInfos NdbRegisterDatabasePostgressInfoArrayOutput `pulumi:"postgressInfos"`
	// properties of database created
	Properties NdbRegisterDatabasePropertyArrayOutput `pulumi:"properties"`
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove pulumi.BoolPtrOutput `pulumi:"remove"`
	// Reset description in cluster
	ResetDescriptionInNxCluster pulumi.BoolPtrOutput `pulumi:"resetDescriptionInNxCluster"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrOutput `pulumi:"softRemove"`
	// status of instance
	Status pulumi.StringOutput `pulumi:"status"`
	// tags
	Tags NdbRegisterDatabaseTagArrayOutput `pulumi:"tags"`
	// time machine id of instance
	TimeMachineId pulumi.StringOutput `pulumi:"timeMachineId"`
	// Time Machine info
	TimeMachineInfo NdbRegisterDatabaseTimeMachineInfoPtrOutput `pulumi:"timeMachineInfo"`
	// Time Machine details of instance
	TimeMachines NdbRegisterDatabaseTimeMachineArrayOutput `pulumi:"timeMachines"`
	// timezone on which instance is created xw
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// type of database
	Type pulumi.StringOutput `pulumi:"type"`
	// description for VM
	VmDescription pulumi.StringPtrOutput `pulumi:"vmDescription"`
	// IP address of dbserver VM
	VmIp pulumi.StringOutput `pulumi:"vmIp"`
	// password of the NDB drive user account.
	VmPassword pulumi.StringPtrOutput `pulumi:"vmPassword"`
	// ssh key for vm
	VmSshkey pulumi.StringPtrOutput `pulumi:"vmSshkey"`
	// username of the NDB drive user account that has sudo access.
	VmUsername pulumi.StringPtrOutput `pulumi:"vmUsername"`
	// working directory. Default is /tmp
	WorkingDirectory pulumi.StringPtrOutput `pulumi:"workingDirectory"`
}

// NewNdbRegisterDatabase registers a new resource with the given unique name, arguments, and options.
func NewNdbRegisterDatabase(ctx *pulumi.Context,
	name string, args *NdbRegisterDatabaseArgs, opts ...pulumi.ResourceOption) (*NdbRegisterDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.DatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseType'")
	}
	if args.VmIp == nil {
		return nil, errors.New("invalid value for required argument 'VmIp'")
	}
	if args.VmPassword != nil {
		args.VmPassword = pulumi.ToSecret(args.VmPassword).(pulumi.StringPtrInput)
	}
	if args.VmSshkey != nil {
		args.VmSshkey = pulumi.ToSecret(args.VmSshkey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"vmPassword",
		"vmSshkey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbRegisterDatabase
	err := ctx.RegisterResource("nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbRegisterDatabase gets an existing NdbRegisterDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbRegisterDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbRegisterDatabaseState, opts ...pulumi.ResourceOption) (*NdbRegisterDatabase, error) {
	var resource NdbRegisterDatabase
	err := ctx.ReadResource("nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbRegisterDatabase resources.
type ndbRegisterDatabaseState struct {
	// action arguments
	Actionarguments []NdbRegisterDatabaseActionargument `pulumi:"actionarguments"`
	// auto tune staging drive. Default is true
	AutoTuneStagingDrive *bool `pulumi:"autoTuneStagingDrive"`
	// category of database. Default is "DEFAULT"
	Category *string `pulumi:"category"`
	// whether instance is cloned or not
	Clone *bool `pulumi:"clone"`
	// clustered or not. Default is false
	Clustered *bool `pulumi:"clustered"`
	// database cluster type
	DatabaseClusterType *string `pulumi:"databaseClusterType"`
	// name of database
	DatabaseName *string `pulumi:"databaseName"`
	// database nodes associated with database instance
	DatabaseNodes []NdbRegisterDatabaseDatabaseNode `pulumi:"databaseNodes"`
	// status of database
	DatabaseStatus *string `pulumi:"databaseStatus"`
	// type of database. Required value: postgres_database
	DatabaseType *string `pulumi:"databaseType"`
	// date created for db instance
	DateCreated *string `pulumi:"dateCreated"`
	// date modified for instance
	DateModified *string `pulumi:"dateModified"`
	// dbserver logical cluster
	DbserverLogicalCluster map[string]string `pulumi:"dbserverLogicalCluster"`
	// dbserver logical cluster id
	DbserverLogicalClusterId *string `pulumi:"dbserverLogicalClusterId"`
	// - (Optional) Delete the database from the VM. Default value is false
	Delete *bool `pulumi:"delete"`
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster *bool `pulumi:"deleteLogicalCluster"`
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine *bool `pulumi:"deleteTimeMachine"`
	// description
	Description *string `pulumi:"description"`
	// - (Optional) Force delete of instance. Default is false
	Forced *bool `pulumi:"forced"`
	// forced install. Default:  true
	ForcedInstall *bool             `pulumi:"forcedInstall"`
	GroupInfo     map[string]string `pulumi:"groupInfo"`
	// info of instance
	Infos []NdbRegisterDatabaseInfo `pulumi:"infos"`
	// LCM config of instance
	LcmConfigs []NdbRegisterDatabaseLcmConfig `pulumi:"lcmConfigs"`
	// linked databases within database instance
	LinkedDatabases []NdbRegisterDatabaseLinkedDatabase `pulumi:"linkedDatabases"`
	// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
	Metric map[string]string `pulumi:"metric"`
	// Name of database instance
	Name *string `pulumi:"name"`
	// cluster on which NDB is present
	NxClusterId *string `pulumi:"nxClusterId"`
	// parent database id
	ParentDatabaseId *string `pulumi:"parentDatabaseId"`
	// parent source database id
	ParentSourceDatabaseId *string `pulumi:"parentSourceDatabaseId"`
	// parent time machine id
	ParentTimeMachineId *string `pulumi:"parentTimeMachineId"`
	// Postgress_Info for registering.
	PostgressInfos []NdbRegisterDatabasePostgressInfo `pulumi:"postgressInfos"`
	// properties of database created
	Properties []NdbRegisterDatabaseProperty `pulumi:"properties"`
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove *bool `pulumi:"remove"`
	// Reset description in cluster
	ResetDescriptionInNxCluster *bool `pulumi:"resetDescriptionInNxCluster"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove *bool `pulumi:"softRemove"`
	// status of instance
	Status *string `pulumi:"status"`
	// tags
	Tags []NdbRegisterDatabaseTag `pulumi:"tags"`
	// time machine id of instance
	TimeMachineId *string `pulumi:"timeMachineId"`
	// Time Machine info
	TimeMachineInfo *NdbRegisterDatabaseTimeMachineInfo `pulumi:"timeMachineInfo"`
	// Time Machine details of instance
	TimeMachines []NdbRegisterDatabaseTimeMachine `pulumi:"timeMachines"`
	// timezone on which instance is created xw
	TimeZone *string `pulumi:"timeZone"`
	// type of database
	Type *string `pulumi:"type"`
	// description for VM
	VmDescription *string `pulumi:"vmDescription"`
	// IP address of dbserver VM
	VmIp *string `pulumi:"vmIp"`
	// password of the NDB drive user account.
	VmPassword *string `pulumi:"vmPassword"`
	// ssh key for vm
	VmSshkey *string `pulumi:"vmSshkey"`
	// username of the NDB drive user account that has sudo access.
	VmUsername *string `pulumi:"vmUsername"`
	// working directory. Default is /tmp
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

type NdbRegisterDatabaseState struct {
	// action arguments
	Actionarguments NdbRegisterDatabaseActionargumentArrayInput
	// auto tune staging drive. Default is true
	AutoTuneStagingDrive pulumi.BoolPtrInput
	// category of database. Default is "DEFAULT"
	Category pulumi.StringPtrInput
	// whether instance is cloned or not
	Clone pulumi.BoolPtrInput
	// clustered or not. Default is false
	Clustered pulumi.BoolPtrInput
	// database cluster type
	DatabaseClusterType pulumi.StringPtrInput
	// name of database
	DatabaseName pulumi.StringPtrInput
	// database nodes associated with database instance
	DatabaseNodes NdbRegisterDatabaseDatabaseNodeArrayInput
	// status of database
	DatabaseStatus pulumi.StringPtrInput
	// type of database. Required value: postgres_database
	DatabaseType pulumi.StringPtrInput
	// date created for db instance
	DateCreated pulumi.StringPtrInput
	// date modified for instance
	DateModified pulumi.StringPtrInput
	// dbserver logical cluster
	DbserverLogicalCluster pulumi.StringMapInput
	// dbserver logical cluster id
	DbserverLogicalClusterId pulumi.StringPtrInput
	// - (Optional) Delete the database from the VM. Default value is false
	Delete pulumi.BoolPtrInput
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster pulumi.BoolPtrInput
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine pulumi.BoolPtrInput
	// description
	Description pulumi.StringPtrInput
	// - (Optional) Force delete of instance. Default is false
	Forced pulumi.BoolPtrInput
	// forced install. Default:  true
	ForcedInstall pulumi.BoolPtrInput
	GroupInfo     pulumi.StringMapInput
	// info of instance
	Infos NdbRegisterDatabaseInfoArrayInput
	// LCM config of instance
	LcmConfigs NdbRegisterDatabaseLcmConfigArrayInput
	// linked databases within database instance
	LinkedDatabases NdbRegisterDatabaseLinkedDatabaseArrayInput
	// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
	Metric pulumi.StringMapInput
	// Name of database instance
	Name pulumi.StringPtrInput
	// cluster on which NDB is present
	NxClusterId pulumi.StringPtrInput
	// parent database id
	ParentDatabaseId pulumi.StringPtrInput
	// parent source database id
	ParentSourceDatabaseId pulumi.StringPtrInput
	// parent time machine id
	ParentTimeMachineId pulumi.StringPtrInput
	// Postgress_Info for registering.
	PostgressInfos NdbRegisterDatabasePostgressInfoArrayInput
	// properties of database created
	Properties NdbRegisterDatabasePropertyArrayInput
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove pulumi.BoolPtrInput
	// Reset description in cluster
	ResetDescriptionInNxCluster pulumi.BoolPtrInput
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrInput
	// status of instance
	Status pulumi.StringPtrInput
	// tags
	Tags NdbRegisterDatabaseTagArrayInput
	// time machine id of instance
	TimeMachineId pulumi.StringPtrInput
	// Time Machine info
	TimeMachineInfo NdbRegisterDatabaseTimeMachineInfoPtrInput
	// Time Machine details of instance
	TimeMachines NdbRegisterDatabaseTimeMachineArrayInput
	// timezone on which instance is created xw
	TimeZone pulumi.StringPtrInput
	// type of database
	Type pulumi.StringPtrInput
	// description for VM
	VmDescription pulumi.StringPtrInput
	// IP address of dbserver VM
	VmIp pulumi.StringPtrInput
	// password of the NDB drive user account.
	VmPassword pulumi.StringPtrInput
	// ssh key for vm
	VmSshkey pulumi.StringPtrInput
	// username of the NDB drive user account that has sudo access.
	VmUsername pulumi.StringPtrInput
	// working directory. Default is /tmp
	WorkingDirectory pulumi.StringPtrInput
}

func (NdbRegisterDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbRegisterDatabaseState)(nil)).Elem()
}

type ndbRegisterDatabaseArgs struct {
	// action arguments
	Actionarguments []NdbRegisterDatabaseActionargument `pulumi:"actionarguments"`
	// auto tune staging drive. Default is true
	AutoTuneStagingDrive *bool `pulumi:"autoTuneStagingDrive"`
	// category of database. Default is "DEFAULT"
	Category *string `pulumi:"category"`
	// clustered or not. Default is false
	Clustered *bool `pulumi:"clustered"`
	// name of database
	DatabaseName string `pulumi:"databaseName"`
	// type of database. Required value: postgres_database
	DatabaseType string `pulumi:"databaseType"`
	// - (Optional) Delete the database from the VM. Default value is false
	Delete *bool `pulumi:"delete"`
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster *bool `pulumi:"deleteLogicalCluster"`
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine *bool `pulumi:"deleteTimeMachine"`
	// description
	Description *string `pulumi:"description"`
	// - (Optional) Force delete of instance. Default is false
	Forced *bool `pulumi:"forced"`
	// forced install. Default:  true
	ForcedInstall *bool `pulumi:"forcedInstall"`
	// cluster on which NDB is present
	NxClusterId *string `pulumi:"nxClusterId"`
	// Postgress_Info for registering.
	PostgressInfos []NdbRegisterDatabasePostgressInfo `pulumi:"postgressInfos"`
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove *bool `pulumi:"remove"`
	// Reset description in cluster
	ResetDescriptionInNxCluster *bool `pulumi:"resetDescriptionInNxCluster"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove *bool `pulumi:"softRemove"`
	// tags
	Tags []NdbRegisterDatabaseTag `pulumi:"tags"`
	// Time Machine info
	TimeMachineInfo *NdbRegisterDatabaseTimeMachineInfo `pulumi:"timeMachineInfo"`
	// description for VM
	VmDescription *string `pulumi:"vmDescription"`
	// IP address of dbserver VM
	VmIp string `pulumi:"vmIp"`
	// password of the NDB drive user account.
	VmPassword *string `pulumi:"vmPassword"`
	// ssh key for vm
	VmSshkey *string `pulumi:"vmSshkey"`
	// username of the NDB drive user account that has sudo access.
	VmUsername *string `pulumi:"vmUsername"`
	// working directory. Default is /tmp
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a NdbRegisterDatabase resource.
type NdbRegisterDatabaseArgs struct {
	// action arguments
	Actionarguments NdbRegisterDatabaseActionargumentArrayInput
	// auto tune staging drive. Default is true
	AutoTuneStagingDrive pulumi.BoolPtrInput
	// category of database. Default is "DEFAULT"
	Category pulumi.StringPtrInput
	// clustered or not. Default is false
	Clustered pulumi.BoolPtrInput
	// name of database
	DatabaseName pulumi.StringInput
	// type of database. Required value: postgres_database
	DatabaseType pulumi.StringInput
	// - (Optional) Delete the database from the VM. Default value is false
	Delete pulumi.BoolPtrInput
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster pulumi.BoolPtrInput
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine pulumi.BoolPtrInput
	// description
	Description pulumi.StringPtrInput
	// - (Optional) Force delete of instance. Default is false
	Forced pulumi.BoolPtrInput
	// forced install. Default:  true
	ForcedInstall pulumi.BoolPtrInput
	// cluster on which NDB is present
	NxClusterId pulumi.StringPtrInput
	// Postgress_Info for registering.
	PostgressInfos NdbRegisterDatabasePostgressInfoArrayInput
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove pulumi.BoolPtrInput
	// Reset description in cluster
	ResetDescriptionInNxCluster pulumi.BoolPtrInput
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrInput
	// tags
	Tags NdbRegisterDatabaseTagArrayInput
	// Time Machine info
	TimeMachineInfo NdbRegisterDatabaseTimeMachineInfoPtrInput
	// description for VM
	VmDescription pulumi.StringPtrInput
	// IP address of dbserver VM
	VmIp pulumi.StringInput
	// password of the NDB drive user account.
	VmPassword pulumi.StringPtrInput
	// ssh key for vm
	VmSshkey pulumi.StringPtrInput
	// username of the NDB drive user account that has sudo access.
	VmUsername pulumi.StringPtrInput
	// working directory. Default is /tmp
	WorkingDirectory pulumi.StringPtrInput
}

func (NdbRegisterDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbRegisterDatabaseArgs)(nil)).Elem()
}

type NdbRegisterDatabaseInput interface {
	pulumi.Input

	ToNdbRegisterDatabaseOutput() NdbRegisterDatabaseOutput
	ToNdbRegisterDatabaseOutputWithContext(ctx context.Context) NdbRegisterDatabaseOutput
}

func (*NdbRegisterDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbRegisterDatabase)(nil)).Elem()
}

func (i *NdbRegisterDatabase) ToNdbRegisterDatabaseOutput() NdbRegisterDatabaseOutput {
	return i.ToNdbRegisterDatabaseOutputWithContext(context.Background())
}

func (i *NdbRegisterDatabase) ToNdbRegisterDatabaseOutputWithContext(ctx context.Context) NdbRegisterDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbRegisterDatabaseOutput)
}

// NdbRegisterDatabaseArrayInput is an input type that accepts NdbRegisterDatabaseArray and NdbRegisterDatabaseArrayOutput values.
// You can construct a concrete instance of `NdbRegisterDatabaseArrayInput` via:
//
//	NdbRegisterDatabaseArray{ NdbRegisterDatabaseArgs{...} }
type NdbRegisterDatabaseArrayInput interface {
	pulumi.Input

	ToNdbRegisterDatabaseArrayOutput() NdbRegisterDatabaseArrayOutput
	ToNdbRegisterDatabaseArrayOutputWithContext(context.Context) NdbRegisterDatabaseArrayOutput
}

type NdbRegisterDatabaseArray []NdbRegisterDatabaseInput

func (NdbRegisterDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbRegisterDatabase)(nil)).Elem()
}

func (i NdbRegisterDatabaseArray) ToNdbRegisterDatabaseArrayOutput() NdbRegisterDatabaseArrayOutput {
	return i.ToNdbRegisterDatabaseArrayOutputWithContext(context.Background())
}

func (i NdbRegisterDatabaseArray) ToNdbRegisterDatabaseArrayOutputWithContext(ctx context.Context) NdbRegisterDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbRegisterDatabaseArrayOutput)
}

// NdbRegisterDatabaseMapInput is an input type that accepts NdbRegisterDatabaseMap and NdbRegisterDatabaseMapOutput values.
// You can construct a concrete instance of `NdbRegisterDatabaseMapInput` via:
//
//	NdbRegisterDatabaseMap{ "key": NdbRegisterDatabaseArgs{...} }
type NdbRegisterDatabaseMapInput interface {
	pulumi.Input

	ToNdbRegisterDatabaseMapOutput() NdbRegisterDatabaseMapOutput
	ToNdbRegisterDatabaseMapOutputWithContext(context.Context) NdbRegisterDatabaseMapOutput
}

type NdbRegisterDatabaseMap map[string]NdbRegisterDatabaseInput

func (NdbRegisterDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbRegisterDatabase)(nil)).Elem()
}

func (i NdbRegisterDatabaseMap) ToNdbRegisterDatabaseMapOutput() NdbRegisterDatabaseMapOutput {
	return i.ToNdbRegisterDatabaseMapOutputWithContext(context.Background())
}

func (i NdbRegisterDatabaseMap) ToNdbRegisterDatabaseMapOutputWithContext(ctx context.Context) NdbRegisterDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbRegisterDatabaseMapOutput)
}

type NdbRegisterDatabaseOutput struct{ *pulumi.OutputState }

func (NdbRegisterDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbRegisterDatabase)(nil)).Elem()
}

func (o NdbRegisterDatabaseOutput) ToNdbRegisterDatabaseOutput() NdbRegisterDatabaseOutput {
	return o
}

func (o NdbRegisterDatabaseOutput) ToNdbRegisterDatabaseOutputWithContext(ctx context.Context) NdbRegisterDatabaseOutput {
	return o
}

// action arguments
func (o NdbRegisterDatabaseOutput) Actionarguments() NdbRegisterDatabaseActionargumentArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseActionargumentArrayOutput { return v.Actionarguments }).(NdbRegisterDatabaseActionargumentArrayOutput)
}

// auto tune staging drive. Default is true
func (o NdbRegisterDatabaseOutput) AutoTuneStagingDrive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.AutoTuneStagingDrive }).(pulumi.BoolPtrOutput)
}

// category of database. Default is "DEFAULT"
func (o NdbRegisterDatabaseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

// whether instance is cloned or not
func (o NdbRegisterDatabaseOutput) Clone() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolOutput { return v.Clone }).(pulumi.BoolOutput)
}

// clustered or not. Default is false
func (o NdbRegisterDatabaseOutput) Clustered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.Clustered }).(pulumi.BoolPtrOutput)
}

// database cluster type
func (o NdbRegisterDatabaseOutput) DatabaseClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.DatabaseClusterType }).(pulumi.StringOutput)
}

// name of database
func (o NdbRegisterDatabaseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// database nodes associated with database instance
func (o NdbRegisterDatabaseOutput) DatabaseNodes() NdbRegisterDatabaseDatabaseNodeArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseDatabaseNodeArrayOutput { return v.DatabaseNodes }).(NdbRegisterDatabaseDatabaseNodeArrayOutput)
}

// status of database
func (o NdbRegisterDatabaseOutput) DatabaseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.DatabaseStatus }).(pulumi.StringOutput)
}

// type of database. Required value: postgres_database
func (o NdbRegisterDatabaseOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

// date created for db instance
func (o NdbRegisterDatabaseOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// date modified for instance
func (o NdbRegisterDatabaseOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// dbserver logical cluster
func (o NdbRegisterDatabaseOutput) DbserverLogicalCluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringMapOutput { return v.DbserverLogicalCluster }).(pulumi.StringMapOutput)
}

// dbserver logical cluster id
func (o NdbRegisterDatabaseOutput) DbserverLogicalClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.DbserverLogicalClusterId }).(pulumi.StringOutput)
}

// - (Optional) Delete the database from the VM. Default value is false
func (o NdbRegisterDatabaseOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.Delete }).(pulumi.BoolPtrOutput)
}

// - (Optional) Delete the logical cluster. Default is true
func (o NdbRegisterDatabaseOutput) DeleteLogicalCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.DeleteLogicalCluster }).(pulumi.BoolPtrOutput)
}

// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
func (o NdbRegisterDatabaseOutput) DeleteTimeMachine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.DeleteTimeMachine }).(pulumi.BoolPtrOutput)
}

// description
func (o NdbRegisterDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// - (Optional) Force delete of instance. Default is false
func (o NdbRegisterDatabaseOutput) Forced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.Forced }).(pulumi.BoolPtrOutput)
}

// forced install. Default:  true
func (o NdbRegisterDatabaseOutput) ForcedInstall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.ForcedInstall }).(pulumi.BoolPtrOutput)
}

func (o NdbRegisterDatabaseOutput) GroupInfo() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringMapOutput { return v.GroupInfo }).(pulumi.StringMapOutput)
}

// info of instance
func (o NdbRegisterDatabaseOutput) Infos() NdbRegisterDatabaseInfoArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseInfoArrayOutput { return v.Infos }).(NdbRegisterDatabaseInfoArrayOutput)
}

// LCM config of instance
func (o NdbRegisterDatabaseOutput) LcmConfigs() NdbRegisterDatabaseLcmConfigArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseLcmConfigArrayOutput { return v.LcmConfigs }).(NdbRegisterDatabaseLcmConfigArrayOutput)
}

// linked databases within database instance
func (o NdbRegisterDatabaseOutput) LinkedDatabases() NdbRegisterDatabaseLinkedDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseLinkedDatabaseArrayOutput { return v.LinkedDatabases }).(NdbRegisterDatabaseLinkedDatabaseArrayOutput)
}

// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
func (o NdbRegisterDatabaseOutput) Metric() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringMapOutput { return v.Metric }).(pulumi.StringMapOutput)
}

// Name of database instance
func (o NdbRegisterDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// cluster on which NDB is present
func (o NdbRegisterDatabaseOutput) NxClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.NxClusterId }).(pulumi.StringPtrOutput)
}

// parent database id
func (o NdbRegisterDatabaseOutput) ParentDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.ParentDatabaseId }).(pulumi.StringOutput)
}

// parent source database id
func (o NdbRegisterDatabaseOutput) ParentSourceDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.ParentSourceDatabaseId }).(pulumi.StringOutput)
}

// parent time machine id
func (o NdbRegisterDatabaseOutput) ParentTimeMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.ParentTimeMachineId }).(pulumi.StringOutput)
}

// Postgress_Info for registering.
func (o NdbRegisterDatabaseOutput) PostgressInfos() NdbRegisterDatabasePostgressInfoArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabasePostgressInfoArrayOutput { return v.PostgressInfos }).(NdbRegisterDatabasePostgressInfoArrayOutput)
}

// properties of database created
func (o NdbRegisterDatabaseOutput) Properties() NdbRegisterDatabasePropertyArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabasePropertyArrayOutput { return v.Properties }).(NdbRegisterDatabasePropertyArrayOutput)
}

// - (Optional) Unregister the database from NDB. Default value is true
func (o NdbRegisterDatabaseOutput) Remove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.Remove }).(pulumi.BoolPtrOutput)
}

// Reset description in cluster
func (o NdbRegisterDatabaseOutput) ResetDescriptionInNxCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.ResetDescriptionInNxCluster }).(pulumi.BoolPtrOutput)
}

// - (Optional) Soft remove. Default will be false
func (o NdbRegisterDatabaseOutput) SoftRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.BoolPtrOutput { return v.SoftRemove }).(pulumi.BoolPtrOutput)
}

// status of instance
func (o NdbRegisterDatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// tags
func (o NdbRegisterDatabaseOutput) Tags() NdbRegisterDatabaseTagArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseTagArrayOutput { return v.Tags }).(NdbRegisterDatabaseTagArrayOutput)
}

// time machine id of instance
func (o NdbRegisterDatabaseOutput) TimeMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.TimeMachineId }).(pulumi.StringOutput)
}

// Time Machine info
func (o NdbRegisterDatabaseOutput) TimeMachineInfo() NdbRegisterDatabaseTimeMachineInfoPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseTimeMachineInfoPtrOutput { return v.TimeMachineInfo }).(NdbRegisterDatabaseTimeMachineInfoPtrOutput)
}

// Time Machine details of instance
func (o NdbRegisterDatabaseOutput) TimeMachines() NdbRegisterDatabaseTimeMachineArrayOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) NdbRegisterDatabaseTimeMachineArrayOutput { return v.TimeMachines }).(NdbRegisterDatabaseTimeMachineArrayOutput)
}

// timezone on which instance is created xw
func (o NdbRegisterDatabaseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// type of database
func (o NdbRegisterDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// description for VM
func (o NdbRegisterDatabaseOutput) VmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.VmDescription }).(pulumi.StringPtrOutput)
}

// IP address of dbserver VM
func (o NdbRegisterDatabaseOutput) VmIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringOutput { return v.VmIp }).(pulumi.StringOutput)
}

// password of the NDB drive user account.
func (o NdbRegisterDatabaseOutput) VmPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.VmPassword }).(pulumi.StringPtrOutput)
}

// ssh key for vm
func (o NdbRegisterDatabaseOutput) VmSshkey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.VmSshkey }).(pulumi.StringPtrOutput)
}

// username of the NDB drive user account that has sudo access.
func (o NdbRegisterDatabaseOutput) VmUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.VmUsername }).(pulumi.StringPtrOutput)
}

// working directory. Default is /tmp
func (o NdbRegisterDatabaseOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbRegisterDatabase) pulumi.StringPtrOutput { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type NdbRegisterDatabaseArrayOutput struct{ *pulumi.OutputState }

func (NdbRegisterDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbRegisterDatabase)(nil)).Elem()
}

func (o NdbRegisterDatabaseArrayOutput) ToNdbRegisterDatabaseArrayOutput() NdbRegisterDatabaseArrayOutput {
	return o
}

func (o NdbRegisterDatabaseArrayOutput) ToNdbRegisterDatabaseArrayOutputWithContext(ctx context.Context) NdbRegisterDatabaseArrayOutput {
	return o
}

func (o NdbRegisterDatabaseArrayOutput) Index(i pulumi.IntInput) NdbRegisterDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbRegisterDatabase {
		return vs[0].([]*NdbRegisterDatabase)[vs[1].(int)]
	}).(NdbRegisterDatabaseOutput)
}

type NdbRegisterDatabaseMapOutput struct{ *pulumi.OutputState }

func (NdbRegisterDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbRegisterDatabase)(nil)).Elem()
}

func (o NdbRegisterDatabaseMapOutput) ToNdbRegisterDatabaseMapOutput() NdbRegisterDatabaseMapOutput {
	return o
}

func (o NdbRegisterDatabaseMapOutput) ToNdbRegisterDatabaseMapOutputWithContext(ctx context.Context) NdbRegisterDatabaseMapOutput {
	return o
}

func (o NdbRegisterDatabaseMapOutput) MapIndex(k pulumi.StringInput) NdbRegisterDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbRegisterDatabase {
		return vs[0].(map[string]*NdbRegisterDatabase)[vs[1].(string)]
	}).(NdbRegisterDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbRegisterDatabaseInput)(nil)).Elem(), &NdbRegisterDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbRegisterDatabaseArrayInput)(nil)).Elem(), NdbRegisterDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbRegisterDatabaseMapInput)(nil)).Elem(), NdbRegisterDatabaseMap{})
	pulumi.RegisterOutputType(NdbRegisterDatabaseOutput{})
	pulumi.RegisterOutputType(NdbRegisterDatabaseArrayOutput{})
	pulumi.RegisterOutputType(NdbRegisterDatabaseMapOutput{})
}
