// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Nutanix Recovery Plan resource to Create a Recovery Plan.
type RecoveryPlan struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringOutput             `pulumi:"apiVersion"`
	Categories RecoveryPlanCategoryArrayOutput `pulumi:"categories"`
	// A description for Recovery Plan.
	Description pulumi.StringOutput    `pulumi:"description"`
	Metadata    pulumi.StringMapOutput `pulumi:"metadata"`
	// The name for the Recovery Plan.
	Name             pulumi.StringOutput                `pulumi:"name"`
	OwnerReference   RecoveryPlanOwnerReferenceOutput   `pulumi:"ownerReference"`
	Parameters       RecoveryPlanParametersOutput       `pulumi:"parameters"`
	ProjectReference RecoveryPlanProjectReferenceOutput `pulumi:"projectReference"`
	StageLists       RecoveryPlanStageListArrayOutput   `pulumi:"stageLists"`
	State            pulumi.StringOutput                `pulumi:"state"`
}

// NewRecoveryPlan registers a new resource with the given unique name, arguments, and options.
func NewRecoveryPlan(ctx *pulumi.Context,
	name string, args *RecoveryPlanArgs, opts ...pulumi.ResourceOption) (*RecoveryPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.StageLists == nil {
		return nil, errors.New("invalid value for required argument 'StageLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecoveryPlan
	err := ctx.RegisterResource("nutanix:index/recoveryPlan:RecoveryPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecoveryPlan gets an existing RecoveryPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecoveryPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecoveryPlanState, opts ...pulumi.ResourceOption) (*RecoveryPlan, error) {
	var resource RecoveryPlan
	err := ctx.ReadResource("nutanix:index/recoveryPlan:RecoveryPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecoveryPlan resources.
type recoveryPlanState struct {
	ApiVersion *string                `pulumi:"apiVersion"`
	Categories []RecoveryPlanCategory `pulumi:"categories"`
	// A description for Recovery Plan.
	Description *string           `pulumi:"description"`
	Metadata    map[string]string `pulumi:"metadata"`
	// The name for the Recovery Plan.
	Name             *string                       `pulumi:"name"`
	OwnerReference   *RecoveryPlanOwnerReference   `pulumi:"ownerReference"`
	Parameters       *RecoveryPlanParameters       `pulumi:"parameters"`
	ProjectReference *RecoveryPlanProjectReference `pulumi:"projectReference"`
	StageLists       []RecoveryPlanStageList       `pulumi:"stageLists"`
	State            *string                       `pulumi:"state"`
}

type RecoveryPlanState struct {
	ApiVersion pulumi.StringPtrInput
	Categories RecoveryPlanCategoryArrayInput
	// A description for Recovery Plan.
	Description pulumi.StringPtrInput
	Metadata    pulumi.StringMapInput
	// The name for the Recovery Plan.
	Name             pulumi.StringPtrInput
	OwnerReference   RecoveryPlanOwnerReferencePtrInput
	Parameters       RecoveryPlanParametersPtrInput
	ProjectReference RecoveryPlanProjectReferencePtrInput
	StageLists       RecoveryPlanStageListArrayInput
	State            pulumi.StringPtrInput
}

func (RecoveryPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryPlanState)(nil)).Elem()
}

type recoveryPlanArgs struct {
	Categories []RecoveryPlanCategory `pulumi:"categories"`
	// A description for Recovery Plan.
	Description *string `pulumi:"description"`
	// The name for the Recovery Plan.
	Name             *string                       `pulumi:"name"`
	OwnerReference   *RecoveryPlanOwnerReference   `pulumi:"ownerReference"`
	Parameters       RecoveryPlanParameters        `pulumi:"parameters"`
	ProjectReference *RecoveryPlanProjectReference `pulumi:"projectReference"`
	StageLists       []RecoveryPlanStageList       `pulumi:"stageLists"`
}

// The set of arguments for constructing a RecoveryPlan resource.
type RecoveryPlanArgs struct {
	Categories RecoveryPlanCategoryArrayInput
	// A description for Recovery Plan.
	Description pulumi.StringPtrInput
	// The name for the Recovery Plan.
	Name             pulumi.StringPtrInput
	OwnerReference   RecoveryPlanOwnerReferencePtrInput
	Parameters       RecoveryPlanParametersInput
	ProjectReference RecoveryPlanProjectReferencePtrInput
	StageLists       RecoveryPlanStageListArrayInput
}

func (RecoveryPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryPlanArgs)(nil)).Elem()
}

type RecoveryPlanInput interface {
	pulumi.Input

	ToRecoveryPlanOutput() RecoveryPlanOutput
	ToRecoveryPlanOutputWithContext(ctx context.Context) RecoveryPlanOutput
}

func (*RecoveryPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoveryPlan)(nil)).Elem()
}

func (i *RecoveryPlan) ToRecoveryPlanOutput() RecoveryPlanOutput {
	return i.ToRecoveryPlanOutputWithContext(context.Background())
}

func (i *RecoveryPlan) ToRecoveryPlanOutputWithContext(ctx context.Context) RecoveryPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryPlanOutput)
}

// RecoveryPlanArrayInput is an input type that accepts RecoveryPlanArray and RecoveryPlanArrayOutput values.
// You can construct a concrete instance of `RecoveryPlanArrayInput` via:
//
//	RecoveryPlanArray{ RecoveryPlanArgs{...} }
type RecoveryPlanArrayInput interface {
	pulumi.Input

	ToRecoveryPlanArrayOutput() RecoveryPlanArrayOutput
	ToRecoveryPlanArrayOutputWithContext(context.Context) RecoveryPlanArrayOutput
}

type RecoveryPlanArray []RecoveryPlanInput

func (RecoveryPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoveryPlan)(nil)).Elem()
}

func (i RecoveryPlanArray) ToRecoveryPlanArrayOutput() RecoveryPlanArrayOutput {
	return i.ToRecoveryPlanArrayOutputWithContext(context.Background())
}

func (i RecoveryPlanArray) ToRecoveryPlanArrayOutputWithContext(ctx context.Context) RecoveryPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryPlanArrayOutput)
}

// RecoveryPlanMapInput is an input type that accepts RecoveryPlanMap and RecoveryPlanMapOutput values.
// You can construct a concrete instance of `RecoveryPlanMapInput` via:
//
//	RecoveryPlanMap{ "key": RecoveryPlanArgs{...} }
type RecoveryPlanMapInput interface {
	pulumi.Input

	ToRecoveryPlanMapOutput() RecoveryPlanMapOutput
	ToRecoveryPlanMapOutputWithContext(context.Context) RecoveryPlanMapOutput
}

type RecoveryPlanMap map[string]RecoveryPlanInput

func (RecoveryPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoveryPlan)(nil)).Elem()
}

func (i RecoveryPlanMap) ToRecoveryPlanMapOutput() RecoveryPlanMapOutput {
	return i.ToRecoveryPlanMapOutputWithContext(context.Background())
}

func (i RecoveryPlanMap) ToRecoveryPlanMapOutputWithContext(ctx context.Context) RecoveryPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryPlanMapOutput)
}

type RecoveryPlanOutput struct{ *pulumi.OutputState }

func (RecoveryPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoveryPlan)(nil)).Elem()
}

func (o RecoveryPlanOutput) ToRecoveryPlanOutput() RecoveryPlanOutput {
	return o
}

func (o RecoveryPlanOutput) ToRecoveryPlanOutputWithContext(ctx context.Context) RecoveryPlanOutput {
	return o
}

func (o RecoveryPlanOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPlan) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o RecoveryPlanOutput) Categories() RecoveryPlanCategoryArrayOutput {
	return o.ApplyT(func(v *RecoveryPlan) RecoveryPlanCategoryArrayOutput { return v.Categories }).(RecoveryPlanCategoryArrayOutput)
}

// A description for Recovery Plan.
func (o RecoveryPlanOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPlan) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o RecoveryPlanOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RecoveryPlan) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The name for the Recovery Plan.
func (o RecoveryPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RecoveryPlanOutput) OwnerReference() RecoveryPlanOwnerReferenceOutput {
	return o.ApplyT(func(v *RecoveryPlan) RecoveryPlanOwnerReferenceOutput { return v.OwnerReference }).(RecoveryPlanOwnerReferenceOutput)
}

func (o RecoveryPlanOutput) Parameters() RecoveryPlanParametersOutput {
	return o.ApplyT(func(v *RecoveryPlan) RecoveryPlanParametersOutput { return v.Parameters }).(RecoveryPlanParametersOutput)
}

func (o RecoveryPlanOutput) ProjectReference() RecoveryPlanProjectReferenceOutput {
	return o.ApplyT(func(v *RecoveryPlan) RecoveryPlanProjectReferenceOutput { return v.ProjectReference }).(RecoveryPlanProjectReferenceOutput)
}

func (o RecoveryPlanOutput) StageLists() RecoveryPlanStageListArrayOutput {
	return o.ApplyT(func(v *RecoveryPlan) RecoveryPlanStageListArrayOutput { return v.StageLists }).(RecoveryPlanStageListArrayOutput)
}

func (o RecoveryPlanOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryPlan) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type RecoveryPlanArrayOutput struct{ *pulumi.OutputState }

func (RecoveryPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoveryPlan)(nil)).Elem()
}

func (o RecoveryPlanArrayOutput) ToRecoveryPlanArrayOutput() RecoveryPlanArrayOutput {
	return o
}

func (o RecoveryPlanArrayOutput) ToRecoveryPlanArrayOutputWithContext(ctx context.Context) RecoveryPlanArrayOutput {
	return o
}

func (o RecoveryPlanArrayOutput) Index(i pulumi.IntInput) RecoveryPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecoveryPlan {
		return vs[0].([]*RecoveryPlan)[vs[1].(int)]
	}).(RecoveryPlanOutput)
}

type RecoveryPlanMapOutput struct{ *pulumi.OutputState }

func (RecoveryPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoveryPlan)(nil)).Elem()
}

func (o RecoveryPlanMapOutput) ToRecoveryPlanMapOutput() RecoveryPlanMapOutput {
	return o
}

func (o RecoveryPlanMapOutput) ToRecoveryPlanMapOutputWithContext(ctx context.Context) RecoveryPlanMapOutput {
	return o
}

func (o RecoveryPlanMapOutput) MapIndex(k pulumi.StringInput) RecoveryPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecoveryPlan {
		return vs[0].(map[string]*RecoveryPlan)[vs[1].(string)]
	}).(RecoveryPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryPlanInput)(nil)).Elem(), &RecoveryPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryPlanArrayInput)(nil)).Elem(), RecoveryPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryPlanMapInput)(nil)).Elem(), RecoveryPlanMap{})
	pulumi.RegisterOutputType(RecoveryPlanOutput{})
	pulumi.RegisterOutputType(RecoveryPlanArrayOutput{})
	pulumi.RegisterOutputType(RecoveryPlanMapOutput{})
}
