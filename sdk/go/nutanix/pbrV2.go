// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PbrV2 struct {
	pulumi.CustomResourceState

	Description pulumi.StringOutput      `pulumi:"description"`
	ExtId       pulumi.StringOutput      `pulumi:"extId"`
	Links       PbrV2LinkArrayOutput     `pulumi:"links"`
	Metadatas   PbrV2MetadataArrayOutput `pulumi:"metadatas"`
	Name        pulumi.StringOutput      `pulumi:"name"`
	Policies    PbrV2PolicyArrayOutput   `pulumi:"policies"`
	Priority    pulumi.IntOutput         `pulumi:"priority"`
	TenantId    pulumi.StringOutput      `pulumi:"tenantId"`
	VpcExtId    pulumi.StringOutput      `pulumi:"vpcExtId"`
	Vpcs        PbrV2VpcArrayOutput      `pulumi:"vpcs"`
}

// NewPbrV2 registers a new resource with the given unique name, arguments, and options.
func NewPbrV2(ctx *pulumi.Context,
	name string, args *PbrV2Args, opts ...pulumi.ResourceOption) (*PbrV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.VpcExtId == nil {
		return nil, errors.New("invalid value for required argument 'VpcExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PbrV2
	err := ctx.RegisterResource("nutanix:index/pbrV2:PbrV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPbrV2 gets an existing PbrV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPbrV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PbrV2State, opts ...pulumi.ResourceOption) (*PbrV2, error) {
	var resource PbrV2
	err := ctx.ReadResource("nutanix:index/pbrV2:PbrV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PbrV2 resources.
type pbrV2State struct {
	Description *string         `pulumi:"description"`
	ExtId       *string         `pulumi:"extId"`
	Links       []PbrV2Link     `pulumi:"links"`
	Metadatas   []PbrV2Metadata `pulumi:"metadatas"`
	Name        *string         `pulumi:"name"`
	Policies    []PbrV2Policy   `pulumi:"policies"`
	Priority    *int            `pulumi:"priority"`
	TenantId    *string         `pulumi:"tenantId"`
	VpcExtId    *string         `pulumi:"vpcExtId"`
	Vpcs        []PbrV2Vpc      `pulumi:"vpcs"`
}

type PbrV2State struct {
	Description pulumi.StringPtrInput
	ExtId       pulumi.StringPtrInput
	Links       PbrV2LinkArrayInput
	Metadatas   PbrV2MetadataArrayInput
	Name        pulumi.StringPtrInput
	Policies    PbrV2PolicyArrayInput
	Priority    pulumi.IntPtrInput
	TenantId    pulumi.StringPtrInput
	VpcExtId    pulumi.StringPtrInput
	Vpcs        PbrV2VpcArrayInput
}

func (PbrV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*pbrV2State)(nil)).Elem()
}

type pbrV2Args struct {
	Description *string       `pulumi:"description"`
	ExtId       *string       `pulumi:"extId"`
	Name        *string       `pulumi:"name"`
	Policies    []PbrV2Policy `pulumi:"policies"`
	Priority    int           `pulumi:"priority"`
	VpcExtId    string        `pulumi:"vpcExtId"`
}

// The set of arguments for constructing a PbrV2 resource.
type PbrV2Args struct {
	Description pulumi.StringPtrInput
	ExtId       pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Policies    PbrV2PolicyArrayInput
	Priority    pulumi.IntInput
	VpcExtId    pulumi.StringInput
}

func (PbrV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*pbrV2Args)(nil)).Elem()
}

type PbrV2Input interface {
	pulumi.Input

	ToPbrV2Output() PbrV2Output
	ToPbrV2OutputWithContext(ctx context.Context) PbrV2Output
}

func (*PbrV2) ElementType() reflect.Type {
	return reflect.TypeOf((**PbrV2)(nil)).Elem()
}

func (i *PbrV2) ToPbrV2Output() PbrV2Output {
	return i.ToPbrV2OutputWithContext(context.Background())
}

func (i *PbrV2) ToPbrV2OutputWithContext(ctx context.Context) PbrV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(PbrV2Output)
}

// PbrV2ArrayInput is an input type that accepts PbrV2Array and PbrV2ArrayOutput values.
// You can construct a concrete instance of `PbrV2ArrayInput` via:
//
//	PbrV2Array{ PbrV2Args{...} }
type PbrV2ArrayInput interface {
	pulumi.Input

	ToPbrV2ArrayOutput() PbrV2ArrayOutput
	ToPbrV2ArrayOutputWithContext(context.Context) PbrV2ArrayOutput
}

type PbrV2Array []PbrV2Input

func (PbrV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PbrV2)(nil)).Elem()
}

func (i PbrV2Array) ToPbrV2ArrayOutput() PbrV2ArrayOutput {
	return i.ToPbrV2ArrayOutputWithContext(context.Background())
}

func (i PbrV2Array) ToPbrV2ArrayOutputWithContext(ctx context.Context) PbrV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PbrV2ArrayOutput)
}

// PbrV2MapInput is an input type that accepts PbrV2Map and PbrV2MapOutput values.
// You can construct a concrete instance of `PbrV2MapInput` via:
//
//	PbrV2Map{ "key": PbrV2Args{...} }
type PbrV2MapInput interface {
	pulumi.Input

	ToPbrV2MapOutput() PbrV2MapOutput
	ToPbrV2MapOutputWithContext(context.Context) PbrV2MapOutput
}

type PbrV2Map map[string]PbrV2Input

func (PbrV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PbrV2)(nil)).Elem()
}

func (i PbrV2Map) ToPbrV2MapOutput() PbrV2MapOutput {
	return i.ToPbrV2MapOutputWithContext(context.Background())
}

func (i PbrV2Map) ToPbrV2MapOutputWithContext(ctx context.Context) PbrV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PbrV2MapOutput)
}

type PbrV2Output struct{ *pulumi.OutputState }

func (PbrV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PbrV2)(nil)).Elem()
}

func (o PbrV2Output) ToPbrV2Output() PbrV2Output {
	return o
}

func (o PbrV2Output) ToPbrV2OutputWithContext(ctx context.Context) PbrV2Output {
	return o
}

func (o PbrV2Output) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PbrV2) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o PbrV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *PbrV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

func (o PbrV2Output) Links() PbrV2LinkArrayOutput {
	return o.ApplyT(func(v *PbrV2) PbrV2LinkArrayOutput { return v.Links }).(PbrV2LinkArrayOutput)
}

func (o PbrV2Output) Metadatas() PbrV2MetadataArrayOutput {
	return o.ApplyT(func(v *PbrV2) PbrV2MetadataArrayOutput { return v.Metadatas }).(PbrV2MetadataArrayOutput)
}

func (o PbrV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PbrV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PbrV2Output) Policies() PbrV2PolicyArrayOutput {
	return o.ApplyT(func(v *PbrV2) PbrV2PolicyArrayOutput { return v.Policies }).(PbrV2PolicyArrayOutput)
}

func (o PbrV2Output) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *PbrV2) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o PbrV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PbrV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o PbrV2Output) VpcExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *PbrV2) pulumi.StringOutput { return v.VpcExtId }).(pulumi.StringOutput)
}

func (o PbrV2Output) Vpcs() PbrV2VpcArrayOutput {
	return o.ApplyT(func(v *PbrV2) PbrV2VpcArrayOutput { return v.Vpcs }).(PbrV2VpcArrayOutput)
}

type PbrV2ArrayOutput struct{ *pulumi.OutputState }

func (PbrV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PbrV2)(nil)).Elem()
}

func (o PbrV2ArrayOutput) ToPbrV2ArrayOutput() PbrV2ArrayOutput {
	return o
}

func (o PbrV2ArrayOutput) ToPbrV2ArrayOutputWithContext(ctx context.Context) PbrV2ArrayOutput {
	return o
}

func (o PbrV2ArrayOutput) Index(i pulumi.IntInput) PbrV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PbrV2 {
		return vs[0].([]*PbrV2)[vs[1].(int)]
	}).(PbrV2Output)
}

type PbrV2MapOutput struct{ *pulumi.OutputState }

func (PbrV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PbrV2)(nil)).Elem()
}

func (o PbrV2MapOutput) ToPbrV2MapOutput() PbrV2MapOutput {
	return o
}

func (o PbrV2MapOutput) ToPbrV2MapOutputWithContext(ctx context.Context) PbrV2MapOutput {
	return o
}

func (o PbrV2MapOutput) MapIndex(k pulumi.StringInput) PbrV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PbrV2 {
		return vs[0].(map[string]*PbrV2)[vs[1].(string)]
	}).(PbrV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PbrV2Input)(nil)).Elem(), &PbrV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*PbrV2ArrayInput)(nil)).Elem(), PbrV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PbrV2MapInput)(nil)).Elem(), PbrV2Map{})
	pulumi.RegisterOutputType(PbrV2Output{})
	pulumi.RegisterOutputType(PbrV2ArrayOutput{})
	pulumi.RegisterOutputType(PbrV2MapOutput{})
}
