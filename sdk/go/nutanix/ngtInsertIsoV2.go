// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource toInserts the Nutanix Guest Tools installation and configuration ISO into a virtual machine.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNgtInsertIsoV2(ctx, "example", &nutanix.NgtInsertIsoV2Args{
//				Capablities: pulumi.StringArray{
//					pulumi.String("VSS_SNAPSHOT"),
//				},
//				ExtId:        pulumi.String("ab520e1d-4950-1db1-917f-a9e2ea35b8e3"),
//				IsConfigOnly: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NgtInsertIsoV2 struct {
	pulumi.CustomResourceState

	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion pulumi.StringOutput `pulumi:"availableVersion"`
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayOutput `pulumi:"capablities"`
	// uuid of the Virtual Machine.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// Version of the operating system on the VM.
	GuestOsVersion pulumi.StringOutput `pulumi:"guestOsVersion"`
	// Indicates that the Nutanix Guest Tools are already installed on the guest VM, and the ISO is being inserted to update the configuration of these tools.
	IsConfigOnly pulumi.BoolOutput `pulumi:"isConfigOnly"`
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled pulumi.BoolOutput `pulumi:"isInstalled"`
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted pulumi.BoolOutput `pulumi:"isIsoInserted"`
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable pulumi.BoolOutput `pulumi:"isReachable"`
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled pulumi.BoolOutput `pulumi:"isVmMobilityDriversInstalled"`
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable pulumi.BoolOutput `pulumi:"isVssSnapshotCapable"`
	// Version of Nutanix Guest Tools installed on the VM.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewNgtInsertIsoV2 registers a new resource with the given unique name, arguments, and options.
func NewNgtInsertIsoV2(ctx *pulumi.Context,
	name string, args *NgtInsertIsoV2Args, opts ...pulumi.ResourceOption) (*NgtInsertIsoV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgtInsertIsoV2
	err := ctx.RegisterResource("nutanix:index/ngtInsertIsoV2:NgtInsertIsoV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgtInsertIsoV2 gets an existing NgtInsertIsoV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgtInsertIsoV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgtInsertIsoV2State, opts ...pulumi.ResourceOption) (*NgtInsertIsoV2, error) {
	var resource NgtInsertIsoV2
	err := ctx.ReadResource("nutanix:index/ngtInsertIsoV2:NgtInsertIsoV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgtInsertIsoV2 resources.
type ngtInsertIsoV2State struct {
	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion *string `pulumi:"availableVersion"`
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities []string `pulumi:"capablities"`
	// uuid of the Virtual Machine.
	ExtId *string `pulumi:"extId"`
	// Version of the operating system on the VM.
	GuestOsVersion *string `pulumi:"guestOsVersion"`
	// Indicates that the Nutanix Guest Tools are already installed on the guest VM, and the ISO is being inserted to update the configuration of these tools.
	IsConfigOnly *bool `pulumi:"isConfigOnly"`
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled *bool `pulumi:"isInstalled"`
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted *bool `pulumi:"isIsoInserted"`
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable *bool `pulumi:"isReachable"`
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled *bool `pulumi:"isVmMobilityDriversInstalled"`
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable *bool `pulumi:"isVssSnapshotCapable"`
	// Version of Nutanix Guest Tools installed on the VM.
	Version *string `pulumi:"version"`
}

type NgtInsertIsoV2State struct {
	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion pulumi.StringPtrInput
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayInput
	// uuid of the Virtual Machine.
	ExtId pulumi.StringPtrInput
	// Version of the operating system on the VM.
	GuestOsVersion pulumi.StringPtrInput
	// Indicates that the Nutanix Guest Tools are already installed on the guest VM, and the ISO is being inserted to update the configuration of these tools.
	IsConfigOnly pulumi.BoolPtrInput
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled pulumi.BoolPtrInput
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled pulumi.BoolPtrInput
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted pulumi.BoolPtrInput
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable pulumi.BoolPtrInput
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled pulumi.BoolPtrInput
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable pulumi.BoolPtrInput
	// Version of Nutanix Guest Tools installed on the VM.
	Version pulumi.StringPtrInput
}

func (NgtInsertIsoV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*ngtInsertIsoV2State)(nil)).Elem()
}

type ngtInsertIsoV2Args struct {
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities []string `pulumi:"capablities"`
	// uuid of the Virtual Machine.
	ExtId string `pulumi:"extId"`
	// Indicates that the Nutanix Guest Tools are already installed on the guest VM, and the ISO is being inserted to update the configuration of these tools.
	IsConfigOnly *bool `pulumi:"isConfigOnly"`
}

// The set of arguments for constructing a NgtInsertIsoV2 resource.
type NgtInsertIsoV2Args struct {
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayInput
	// uuid of the Virtual Machine.
	ExtId pulumi.StringInput
	// Indicates that the Nutanix Guest Tools are already installed on the guest VM, and the ISO is being inserted to update the configuration of these tools.
	IsConfigOnly pulumi.BoolPtrInput
}

func (NgtInsertIsoV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ngtInsertIsoV2Args)(nil)).Elem()
}

type NgtInsertIsoV2Input interface {
	pulumi.Input

	ToNgtInsertIsoV2Output() NgtInsertIsoV2Output
	ToNgtInsertIsoV2OutputWithContext(ctx context.Context) NgtInsertIsoV2Output
}

func (*NgtInsertIsoV2) ElementType() reflect.Type {
	return reflect.TypeOf((**NgtInsertIsoV2)(nil)).Elem()
}

func (i *NgtInsertIsoV2) ToNgtInsertIsoV2Output() NgtInsertIsoV2Output {
	return i.ToNgtInsertIsoV2OutputWithContext(context.Background())
}

func (i *NgtInsertIsoV2) ToNgtInsertIsoV2OutputWithContext(ctx context.Context) NgtInsertIsoV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(NgtInsertIsoV2Output)
}

// NgtInsertIsoV2ArrayInput is an input type that accepts NgtInsertIsoV2Array and NgtInsertIsoV2ArrayOutput values.
// You can construct a concrete instance of `NgtInsertIsoV2ArrayInput` via:
//
//	NgtInsertIsoV2Array{ NgtInsertIsoV2Args{...} }
type NgtInsertIsoV2ArrayInput interface {
	pulumi.Input

	ToNgtInsertIsoV2ArrayOutput() NgtInsertIsoV2ArrayOutput
	ToNgtInsertIsoV2ArrayOutputWithContext(context.Context) NgtInsertIsoV2ArrayOutput
}

type NgtInsertIsoV2Array []NgtInsertIsoV2Input

func (NgtInsertIsoV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgtInsertIsoV2)(nil)).Elem()
}

func (i NgtInsertIsoV2Array) ToNgtInsertIsoV2ArrayOutput() NgtInsertIsoV2ArrayOutput {
	return i.ToNgtInsertIsoV2ArrayOutputWithContext(context.Background())
}

func (i NgtInsertIsoV2Array) ToNgtInsertIsoV2ArrayOutputWithContext(ctx context.Context) NgtInsertIsoV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgtInsertIsoV2ArrayOutput)
}

// NgtInsertIsoV2MapInput is an input type that accepts NgtInsertIsoV2Map and NgtInsertIsoV2MapOutput values.
// You can construct a concrete instance of `NgtInsertIsoV2MapInput` via:
//
//	NgtInsertIsoV2Map{ "key": NgtInsertIsoV2Args{...} }
type NgtInsertIsoV2MapInput interface {
	pulumi.Input

	ToNgtInsertIsoV2MapOutput() NgtInsertIsoV2MapOutput
	ToNgtInsertIsoV2MapOutputWithContext(context.Context) NgtInsertIsoV2MapOutput
}

type NgtInsertIsoV2Map map[string]NgtInsertIsoV2Input

func (NgtInsertIsoV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgtInsertIsoV2)(nil)).Elem()
}

func (i NgtInsertIsoV2Map) ToNgtInsertIsoV2MapOutput() NgtInsertIsoV2MapOutput {
	return i.ToNgtInsertIsoV2MapOutputWithContext(context.Background())
}

func (i NgtInsertIsoV2Map) ToNgtInsertIsoV2MapOutputWithContext(ctx context.Context) NgtInsertIsoV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgtInsertIsoV2MapOutput)
}

type NgtInsertIsoV2Output struct{ *pulumi.OutputState }

func (NgtInsertIsoV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**NgtInsertIsoV2)(nil)).Elem()
}

func (o NgtInsertIsoV2Output) ToNgtInsertIsoV2Output() NgtInsertIsoV2Output {
	return o
}

func (o NgtInsertIsoV2Output) ToNgtInsertIsoV2OutputWithContext(ctx context.Context) NgtInsertIsoV2Output {
	return o
}

// Version of Nutanix Guest Tools available on the cluster.
func (o NgtInsertIsoV2Output) AvailableVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.StringOutput { return v.AvailableVersion }).(pulumi.StringOutput)
}

// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
func (o NgtInsertIsoV2Output) Capablities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.StringArrayOutput { return v.Capablities }).(pulumi.StringArrayOutput)
}

// uuid of the Virtual Machine.
func (o NgtInsertIsoV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Version of the operating system on the VM.
func (o NgtInsertIsoV2Output) GuestOsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.StringOutput { return v.GuestOsVersion }).(pulumi.StringOutput)
}

// Indicates that the Nutanix Guest Tools are already installed on the guest VM, and the ISO is being inserted to update the configuration of these tools.
func (o NgtInsertIsoV2Output) IsConfigOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.BoolOutput { return v.IsConfigOnly }).(pulumi.BoolOutput)
}

// Indicates whether Nutanix Guest Tools is enabled or not.
func (o NgtInsertIsoV2Output) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Indicates whether Nutanix Guest Tools is installed on the VM or not.
func (o NgtInsertIsoV2Output) IsInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.BoolOutput { return v.IsInstalled }).(pulumi.BoolOutput)
}

// Indicates whether Nutanix Guest Tools ISO is inserted or not.
func (o NgtInsertIsoV2Output) IsIsoInserted() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.BoolOutput { return v.IsIsoInserted }).(pulumi.BoolOutput)
}

// Indicates whether the communication from VM to CVM is active or not.
func (o NgtInsertIsoV2Output) IsReachable() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.BoolOutput { return v.IsReachable }).(pulumi.BoolOutput)
}

// Indicates whether the VM mobility drivers are installed on the VM or not.
func (o NgtInsertIsoV2Output) IsVmMobilityDriversInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.BoolOutput { return v.IsVmMobilityDriversInstalled }).(pulumi.BoolOutput)
}

// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
func (o NgtInsertIsoV2Output) IsVssSnapshotCapable() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.BoolOutput { return v.IsVssSnapshotCapable }).(pulumi.BoolOutput)
}

// Version of Nutanix Guest Tools installed on the VM.
func (o NgtInsertIsoV2Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtInsertIsoV2) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type NgtInsertIsoV2ArrayOutput struct{ *pulumi.OutputState }

func (NgtInsertIsoV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgtInsertIsoV2)(nil)).Elem()
}

func (o NgtInsertIsoV2ArrayOutput) ToNgtInsertIsoV2ArrayOutput() NgtInsertIsoV2ArrayOutput {
	return o
}

func (o NgtInsertIsoV2ArrayOutput) ToNgtInsertIsoV2ArrayOutputWithContext(ctx context.Context) NgtInsertIsoV2ArrayOutput {
	return o
}

func (o NgtInsertIsoV2ArrayOutput) Index(i pulumi.IntInput) NgtInsertIsoV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgtInsertIsoV2 {
		return vs[0].([]*NgtInsertIsoV2)[vs[1].(int)]
	}).(NgtInsertIsoV2Output)
}

type NgtInsertIsoV2MapOutput struct{ *pulumi.OutputState }

func (NgtInsertIsoV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgtInsertIsoV2)(nil)).Elem()
}

func (o NgtInsertIsoV2MapOutput) ToNgtInsertIsoV2MapOutput() NgtInsertIsoV2MapOutput {
	return o
}

func (o NgtInsertIsoV2MapOutput) ToNgtInsertIsoV2MapOutputWithContext(ctx context.Context) NgtInsertIsoV2MapOutput {
	return o
}

func (o NgtInsertIsoV2MapOutput) MapIndex(k pulumi.StringInput) NgtInsertIsoV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgtInsertIsoV2 {
		return vs[0].(map[string]*NgtInsertIsoV2)[vs[1].(string)]
	}).(NgtInsertIsoV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgtInsertIsoV2Input)(nil)).Elem(), &NgtInsertIsoV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgtInsertIsoV2ArrayInput)(nil)).Elem(), NgtInsertIsoV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgtInsertIsoV2MapInput)(nil)).Elem(), NgtInsertIsoV2Map{})
	pulumi.RegisterOutputType(NgtInsertIsoV2Output{})
	pulumi.RegisterOutputType(NgtInsertIsoV2ArrayOutput{})
	pulumi.RegisterOutputType(NgtInsertIsoV2MapOutput{})
}
