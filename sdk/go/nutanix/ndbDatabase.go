// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create database instance based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.
//
// ## Example Usage
//
// ### NDB database resource with new database server VM
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbDatabase(ctx, "dbp", &nutanix.NdbDatabaseArgs{
//				Databasetype:             pulumi.String("postgres_database"),
//				Description:              pulumi.String("add description"),
//				Softwareprofileid:        pulumi.String("{{ software_profile_id }}"),
//				Softwareprofileversionid: pulumi.String("{{ software_profile_version_id }}"),
//				Computeprofileid:         pulumi.String("{{ compute_profile_id }}"),
//				Networkprofileid:         pulumi.String("{{ network_profile_id }}"),
//				Dbparameterprofileid:     pulumi.String("{{ db_parameter_profile_id }}"),
//				PostgresqlInfo: &nutanix.NdbDatabasePostgresqlInfoArgs{
//					ListenerPort:  pulumi.String("{{ listner_port }}"),
//					DatabaseSize:  pulumi.String("{{ 200 }}"),
//					DbPassword:    pulumi.String("password"),
//					DatabaseNames: pulumi.String("testdb1"),
//				},
//				Nxclusterid:  pulumi.Any(local.Clusters.EraCluster.Id),
//				Sshpublickey: pulumi.String("{{ ssh-public-key }}"),
//				Nodes: nutanix.NdbDatabaseNodeArray{
//					&nutanix.NdbDatabaseNodeArgs{
//						Vmname:           pulumi.String("test-era-vm1"),
//						Networkprofileid: pulumi.String("<network-profile-uuid>"),
//					},
//				},
//				Timemachineinfo: &nutanix.NdbDatabaseTimemachineinfoArgs{
//					Name:        pulumi.String("test-pg-inst"),
//					Description: pulumi.String("description of time machine"),
//					Slaid:       pulumi.String("{{ sla_id }}"),
//					Schedule: &nutanix.NdbDatabaseTimemachineinfoScheduleArgs{
//						Snapshottimeofday: &nutanix.NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs{
//							Hours:   pulumi.Int(16),
//							Minutes: pulumi.Int(0),
//							Seconds: pulumi.Int(0),
//						},
//						Continuousschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs{
//							Enabled:           pulumi.Bool(true),
//							Logbackupinterval: pulumi.Int(30),
//							Snapshotsperday:   pulumi.Int(1),
//						},
//						Weeklyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs{
//							Enabled:   pulumi.Bool(true),
//							Dayofweek: pulumi.String("WEDNESDAY"),
//						},
//						Monthlyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs{
//							Enabled:    pulumi.Bool(true),
//							Dayofmonth: pulumi.Int(27),
//						},
//						Quartelyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs{
//							Enabled:    pulumi.Bool(true),
//							Startmonth: pulumi.String("JANUARY"),
//							Dayofmonth: pulumi.Int(27),
//						},
//						Yearlyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs{
//							Enabled:    pulumi.Bool(false),
//							Dayofmonth: pulumi.Int(31),
//							Month:      pulumi.String("DECEMBER"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### NDB database resource with registered database server VM
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbDatabase(ctx, "dbp", &nutanix.NdbDatabaseArgs{
//				Actionarguments: nutanix.NdbDatabaseActionargumentArray{
//					&nutanix.NdbDatabaseActionargumentArgs{
//						Name:  pulumi.String("host_ip"),
//						Value: pulumi.String("{{ hostIP }}"),
//					},
//				},
//				Createdbserver:       pulumi.Bool(false),
//				Databasetype:         pulumi.String("postgres_database"),
//				Dbparameterprofileid: pulumi.String("{{ db_parameter_profile_id }}"),
//				DbserverId:           pulumi.String("{{ dbserver_id }}"),
//				Description:          pulumi.String("add description"),
//				Nodes: nutanix.NdbDatabaseNodeArray{
//					&nutanix.NdbDatabaseNodeArgs{
//						Dbserverid: pulumi.String("{{ dbserver_id }}"),
//					},
//				},
//				PostgresqlInfo: &nutanix.NdbDatabasePostgresqlInfoArgs{
//					DatabaseNames: pulumi.String("testdb1"),
//					DatabaseSize:  pulumi.String("{{ 200 }}"),
//					DbPassword:    pulumi.String("password"),
//					ListenerPort:  pulumi.String("{{ listner_port }}"),
//				},
//				Timemachineinfo: &nutanix.NdbDatabaseTimemachineinfoArgs{
//					Description: pulumi.String("description of time machine"),
//					Name:        pulumi.String("test-pg-inst"),
//					Schedule: &nutanix.NdbDatabaseTimemachineinfoScheduleArgs{
//						Continuousschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs{
//							Enabled:           pulumi.Bool(true),
//							Logbackupinterval: pulumi.Int(30),
//							Snapshotsperday:   pulumi.Int(1),
//						},
//						Monthlyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs{
//							Dayofmonth: pulumi.Int(27),
//							Enabled:    pulumi.Bool(true),
//						},
//						Quartelyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs{
//							Dayofmonth: pulumi.Int(27),
//							Enabled:    pulumi.Bool(true),
//							Startmonth: pulumi.String("JANUARY"),
//						},
//						Snapshottimeofday: &nutanix.NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs{
//							Hours:   pulumi.Int(16),
//							Minutes: pulumi.Int(0),
//							Seconds: pulumi.Int(0),
//						},
//						Weeklyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs{
//							Dayofweek: pulumi.String("WEDNESDAY"),
//							Enabled:   pulumi.Bool(true),
//						},
//						Yearlyschedule: &nutanix.NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs{
//							Dayofmonth: pulumi.Int(31),
//							Enabled:    pulumi.Bool(false),
//							Month:      pulumi.String("DECEMBER"),
//						},
//					},
//					Slaid: pulumi.String("{{ sla_id }}"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## lifecycle
//
// * `Update` : - Currently only update of instance's name and description is supported using this resource
//
// See detailed information in [NDB Database Instance](https://www.nutanix.dev/api_references/ndb/#/9d9eee4304496-provision-a-database).
type NdbDatabase struct {
	pulumi.CustomResourceState

	// - (Optional) action arguments for database. For postgress, you can use postgresql_info
	Actionarguments NdbDatabaseActionargumentArrayOutput `pulumi:"actionarguments"`
	// - (Optional) Enable auto tuning of staging drive. Default: true
	Autotunestagingdrive pulumi.BoolPtrOutput              `pulumi:"autotunestagingdrive"`
	Clone                pulumi.BoolOutput                 `pulumi:"clone"`
	ClusterInfos         NdbDatabaseClusterInfoArrayOutput `pulumi:"clusterInfos"`
	// - (Optional) If clustered database. Default: false
	Clustered pulumi.BoolPtrOutput `pulumi:"clustered"`
	// - (Optional) ID of compute profile
	Computeprofileid pulumi.StringPtrOutput `pulumi:"computeprofileid"`
	// - (Optional) Set this to create new DB server VM. Default: true
	Createdbserver      pulumi.BoolPtrOutput               `pulumi:"createdbserver"`
	DatabaseClusterType pulumi.StringOutput                `pulumi:"databaseClusterType"`
	DatabaseInstanceId  pulumi.StringOutput                `pulumi:"databaseInstanceId"`
	DatabaseName        pulumi.StringOutput                `pulumi:"databaseName"`
	DatabaseNodes       NdbDatabaseDatabaseNodeArrayOutput `pulumi:"databaseNodes"`
	// - (Required) Type of database. Valid values: postgres_database
	Databasetype pulumi.StringPtrOutput `pulumi:"databasetype"`
	DateCreated  pulumi.StringOutput    `pulumi:"dateCreated"`
	DateModified pulumi.StringOutput    `pulumi:"dateModified"`
	// - (Optional) DB parameters profile ID
	Dbparameterprofileid     pulumi.StringPtrOutput `pulumi:"dbparameterprofileid"`
	DbserverLogicalCluster   pulumi.StringMapOutput `pulumi:"dbserverLogicalCluster"`
	DbserverLogicalClusterId pulumi.StringOutput    `pulumi:"dbserverLogicalClusterId"`
	// - (Optional) DB server VM ID for creating instance on registered DB server VM
	Dbserverid pulumi.StringPtrOutput `pulumi:"dbserverid"`
	// - (Optional) Delete the database from the VM. Default value is true
	Delete pulumi.BoolPtrOutput `pulumi:"delete"`
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster pulumi.BoolPtrOutput `pulumi:"deleteLogicalCluster"`
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine pulumi.BoolPtrOutput `pulumi:"deleteTimeMachine"`
	// - (Optional) The description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// - (Optional) Force delete of instance. Default is false
	Forced           pulumi.BoolPtrOutput                 `pulumi:"forced"`
	Infos            NdbDatabaseInfoArrayOutput           `pulumi:"infos"`
	LcmConfigs       NdbDatabaseLcmConfigArrayOutput      `pulumi:"lcmConfigs"`
	LinkedDatabases  NdbDatabaseLinkedDatabaseArrayOutput `pulumi:"linkedDatabases"`
	MaintenanceTasks NdbDatabaseMaintenanceTasksPtrOutput `pulumi:"maintenanceTasks"`
	Metric           pulumi.StringMapOutput               `pulumi:"metric"`
	// - (Required) Name of the instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// - (Optional) ID of network profile
	Networkprofileid pulumi.StringPtrOutput `pulumi:"networkprofileid"`
	// - (Optional) Timezone of new DB server VM
	Newdbservertimezone pulumi.StringPtrOutput `pulumi:"newdbservertimezone"`
	// - (Optional) No. of nodes/db server vms. Default: 1
	Nodecount pulumi.IntPtrOutput `pulumi:"nodecount"`
	// - (Optional) nodes info
	Nodes NdbDatabaseNodeArrayOutput `pulumi:"nodes"`
	// - (Optional) Cluster ID for DB server VM
	Nxclusterid      pulumi.StringPtrOutput `pulumi:"nxclusterid"`
	ParentDatabaseId pulumi.StringOutput    `pulumi:"parentDatabaseId"`
	// - (Optional) action arguments for postgress type database.
	PostgresqlInfo NdbDatabasePostgresqlInfoPtrOutput `pulumi:"postgresqlInfo"`
	// List of all the properties
	Properties NdbDatabasePropertyArrayOutput `pulumi:"properties"`
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove pulumi.BoolPtrOutput `pulumi:"remove"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrOutput `pulumi:"softRemove"`
	// - (Optional) ID of software profile
	Softwareprofileid pulumi.StringPtrOutput `pulumi:"softwareprofileid"`
	// - (Optional) ID of version in software profile
	Softwareprofileversionid pulumi.StringPtrOutput `pulumi:"softwareprofileversionid"`
	// - (Optional) public key for ssh access to DB server VM
	Sshpublickey  pulumi.StringPtrOutput            `pulumi:"sshpublickey"`
	Status        pulumi.StringOutput               `pulumi:"status"`
	Tags          NdbDatabaseTagArrayOutput         `pulumi:"tags"`
	TimeMachineId pulumi.StringOutput               `pulumi:"timeMachineId"`
	TimeMachines  NdbDatabaseTimeMachineArrayOutput `pulumi:"timeMachines"`
	TimeZone      pulumi.StringOutput               `pulumi:"timeZone"`
	// - (Optional) time machine config
	Timemachineinfo NdbDatabaseTimemachineinfoPtrOutput `pulumi:"timemachineinfo"`
	Type            pulumi.StringOutput                 `pulumi:"type"`
	// - (Optional) password for DB server VM and era drive user
	VmPassword pulumi.StringPtrOutput `pulumi:"vmPassword"`
}

// NewNdbDatabase registers a new resource with the given unique name, arguments, and options.
func NewNdbDatabase(ctx *pulumi.Context,
	name string, args *NdbDatabaseArgs, opts ...pulumi.ResourceOption) (*NdbDatabase, error) {
	if args == nil {
		args = &NdbDatabaseArgs{}
	}

	if args.Sshpublickey != nil {
		args.Sshpublickey = pulumi.ToSecret(args.Sshpublickey).(pulumi.StringPtrInput)
	}
	if args.VmPassword != nil {
		args.VmPassword = pulumi.ToSecret(args.VmPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sshpublickey",
		"vmPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbDatabase
	err := ctx.RegisterResource("nutanix:index/ndbDatabase:NdbDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbDatabase gets an existing NdbDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbDatabaseState, opts ...pulumi.ResourceOption) (*NdbDatabase, error) {
	var resource NdbDatabase
	err := ctx.ReadResource("nutanix:index/ndbDatabase:NdbDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbDatabase resources.
type ndbDatabaseState struct {
	// - (Optional) action arguments for database. For postgress, you can use postgresql_info
	Actionarguments []NdbDatabaseActionargument `pulumi:"actionarguments"`
	// - (Optional) Enable auto tuning of staging drive. Default: true
	Autotunestagingdrive *bool                    `pulumi:"autotunestagingdrive"`
	Clone                *bool                    `pulumi:"clone"`
	ClusterInfos         []NdbDatabaseClusterInfo `pulumi:"clusterInfos"`
	// - (Optional) If clustered database. Default: false
	Clustered *bool `pulumi:"clustered"`
	// - (Optional) ID of compute profile
	Computeprofileid *string `pulumi:"computeprofileid"`
	// - (Optional) Set this to create new DB server VM. Default: true
	Createdbserver      *bool                     `pulumi:"createdbserver"`
	DatabaseClusterType *string                   `pulumi:"databaseClusterType"`
	DatabaseInstanceId  *string                   `pulumi:"databaseInstanceId"`
	DatabaseName        *string                   `pulumi:"databaseName"`
	DatabaseNodes       []NdbDatabaseDatabaseNode `pulumi:"databaseNodes"`
	// - (Required) Type of database. Valid values: postgres_database
	Databasetype *string `pulumi:"databasetype"`
	DateCreated  *string `pulumi:"dateCreated"`
	DateModified *string `pulumi:"dateModified"`
	// - (Optional) DB parameters profile ID
	Dbparameterprofileid     *string           `pulumi:"dbparameterprofileid"`
	DbserverLogicalCluster   map[string]string `pulumi:"dbserverLogicalCluster"`
	DbserverLogicalClusterId *string           `pulumi:"dbserverLogicalClusterId"`
	// - (Optional) DB server VM ID for creating instance on registered DB server VM
	Dbserverid *string `pulumi:"dbserverid"`
	// - (Optional) Delete the database from the VM. Default value is true
	Delete *bool `pulumi:"delete"`
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster *bool `pulumi:"deleteLogicalCluster"`
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine *bool `pulumi:"deleteTimeMachine"`
	// - (Optional) The description
	Description *string `pulumi:"description"`
	// - (Optional) Force delete of instance. Default is false
	Forced           *bool                        `pulumi:"forced"`
	Infos            []NdbDatabaseInfo            `pulumi:"infos"`
	LcmConfigs       []NdbDatabaseLcmConfig       `pulumi:"lcmConfigs"`
	LinkedDatabases  []NdbDatabaseLinkedDatabase  `pulumi:"linkedDatabases"`
	MaintenanceTasks *NdbDatabaseMaintenanceTasks `pulumi:"maintenanceTasks"`
	Metric           map[string]string            `pulumi:"metric"`
	// - (Required) Name of the instance.
	Name *string `pulumi:"name"`
	// - (Optional) ID of network profile
	Networkprofileid *string `pulumi:"networkprofileid"`
	// - (Optional) Timezone of new DB server VM
	Newdbservertimezone *string `pulumi:"newdbservertimezone"`
	// - (Optional) No. of nodes/db server vms. Default: 1
	Nodecount *int `pulumi:"nodecount"`
	// - (Optional) nodes info
	Nodes []NdbDatabaseNode `pulumi:"nodes"`
	// - (Optional) Cluster ID for DB server VM
	Nxclusterid      *string `pulumi:"nxclusterid"`
	ParentDatabaseId *string `pulumi:"parentDatabaseId"`
	// - (Optional) action arguments for postgress type database.
	PostgresqlInfo *NdbDatabasePostgresqlInfo `pulumi:"postgresqlInfo"`
	// List of all the properties
	Properties []NdbDatabaseProperty `pulumi:"properties"`
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove *bool `pulumi:"remove"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove *bool `pulumi:"softRemove"`
	// - (Optional) ID of software profile
	Softwareprofileid *string `pulumi:"softwareprofileid"`
	// - (Optional) ID of version in software profile
	Softwareprofileversionid *string `pulumi:"softwareprofileversionid"`
	// - (Optional) public key for ssh access to DB server VM
	Sshpublickey  *string                  `pulumi:"sshpublickey"`
	Status        *string                  `pulumi:"status"`
	Tags          []NdbDatabaseTag         `pulumi:"tags"`
	TimeMachineId *string                  `pulumi:"timeMachineId"`
	TimeMachines  []NdbDatabaseTimeMachine `pulumi:"timeMachines"`
	TimeZone      *string                  `pulumi:"timeZone"`
	// - (Optional) time machine config
	Timemachineinfo *NdbDatabaseTimemachineinfo `pulumi:"timemachineinfo"`
	Type            *string                     `pulumi:"type"`
	// - (Optional) password for DB server VM and era drive user
	VmPassword *string `pulumi:"vmPassword"`
}

type NdbDatabaseState struct {
	// - (Optional) action arguments for database. For postgress, you can use postgresql_info
	Actionarguments NdbDatabaseActionargumentArrayInput
	// - (Optional) Enable auto tuning of staging drive. Default: true
	Autotunestagingdrive pulumi.BoolPtrInput
	Clone                pulumi.BoolPtrInput
	ClusterInfos         NdbDatabaseClusterInfoArrayInput
	// - (Optional) If clustered database. Default: false
	Clustered pulumi.BoolPtrInput
	// - (Optional) ID of compute profile
	Computeprofileid pulumi.StringPtrInput
	// - (Optional) Set this to create new DB server VM. Default: true
	Createdbserver      pulumi.BoolPtrInput
	DatabaseClusterType pulumi.StringPtrInput
	DatabaseInstanceId  pulumi.StringPtrInput
	DatabaseName        pulumi.StringPtrInput
	DatabaseNodes       NdbDatabaseDatabaseNodeArrayInput
	// - (Required) Type of database. Valid values: postgres_database
	Databasetype pulumi.StringPtrInput
	DateCreated  pulumi.StringPtrInput
	DateModified pulumi.StringPtrInput
	// - (Optional) DB parameters profile ID
	Dbparameterprofileid     pulumi.StringPtrInput
	DbserverLogicalCluster   pulumi.StringMapInput
	DbserverLogicalClusterId pulumi.StringPtrInput
	// - (Optional) DB server VM ID for creating instance on registered DB server VM
	Dbserverid pulumi.StringPtrInput
	// - (Optional) Delete the database from the VM. Default value is true
	Delete pulumi.BoolPtrInput
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster pulumi.BoolPtrInput
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine pulumi.BoolPtrInput
	// - (Optional) The description
	Description pulumi.StringPtrInput
	// - (Optional) Force delete of instance. Default is false
	Forced           pulumi.BoolPtrInput
	Infos            NdbDatabaseInfoArrayInput
	LcmConfigs       NdbDatabaseLcmConfigArrayInput
	LinkedDatabases  NdbDatabaseLinkedDatabaseArrayInput
	MaintenanceTasks NdbDatabaseMaintenanceTasksPtrInput
	Metric           pulumi.StringMapInput
	// - (Required) Name of the instance.
	Name pulumi.StringPtrInput
	// - (Optional) ID of network profile
	Networkprofileid pulumi.StringPtrInput
	// - (Optional) Timezone of new DB server VM
	Newdbservertimezone pulumi.StringPtrInput
	// - (Optional) No. of nodes/db server vms. Default: 1
	Nodecount pulumi.IntPtrInput
	// - (Optional) nodes info
	Nodes NdbDatabaseNodeArrayInput
	// - (Optional) Cluster ID for DB server VM
	Nxclusterid      pulumi.StringPtrInput
	ParentDatabaseId pulumi.StringPtrInput
	// - (Optional) action arguments for postgress type database.
	PostgresqlInfo NdbDatabasePostgresqlInfoPtrInput
	// List of all the properties
	Properties NdbDatabasePropertyArrayInput
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove pulumi.BoolPtrInput
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrInput
	// - (Optional) ID of software profile
	Softwareprofileid pulumi.StringPtrInput
	// - (Optional) ID of version in software profile
	Softwareprofileversionid pulumi.StringPtrInput
	// - (Optional) public key for ssh access to DB server VM
	Sshpublickey  pulumi.StringPtrInput
	Status        pulumi.StringPtrInput
	Tags          NdbDatabaseTagArrayInput
	TimeMachineId pulumi.StringPtrInput
	TimeMachines  NdbDatabaseTimeMachineArrayInput
	TimeZone      pulumi.StringPtrInput
	// - (Optional) time machine config
	Timemachineinfo NdbDatabaseTimemachineinfoPtrInput
	Type            pulumi.StringPtrInput
	// - (Optional) password for DB server VM and era drive user
	VmPassword pulumi.StringPtrInput
}

func (NdbDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDatabaseState)(nil)).Elem()
}

type ndbDatabaseArgs struct {
	// - (Optional) action arguments for database. For postgress, you can use postgresql_info
	Actionarguments []NdbDatabaseActionargument `pulumi:"actionarguments"`
	// - (Optional) Enable auto tuning of staging drive. Default: true
	Autotunestagingdrive *bool                    `pulumi:"autotunestagingdrive"`
	ClusterInfos         []NdbDatabaseClusterInfo `pulumi:"clusterInfos"`
	// - (Optional) If clustered database. Default: false
	Clustered *bool `pulumi:"clustered"`
	// - (Optional) ID of compute profile
	Computeprofileid *string `pulumi:"computeprofileid"`
	// - (Optional) Set this to create new DB server VM. Default: true
	Createdbserver     *bool   `pulumi:"createdbserver"`
	DatabaseInstanceId *string `pulumi:"databaseInstanceId"`
	// - (Required) Type of database. Valid values: postgres_database
	Databasetype *string `pulumi:"databasetype"`
	// - (Optional) DB parameters profile ID
	Dbparameterprofileid *string `pulumi:"dbparameterprofileid"`
	// - (Optional) DB server VM ID for creating instance on registered DB server VM
	Dbserverid *string `pulumi:"dbserverid"`
	// - (Optional) Delete the database from the VM. Default value is true
	Delete *bool `pulumi:"delete"`
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster *bool `pulumi:"deleteLogicalCluster"`
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine *bool `pulumi:"deleteTimeMachine"`
	// - (Optional) The description
	Description *string `pulumi:"description"`
	// - (Optional) Force delete of instance. Default is false
	Forced           *bool                        `pulumi:"forced"`
	MaintenanceTasks *NdbDatabaseMaintenanceTasks `pulumi:"maintenanceTasks"`
	// - (Required) Name of the instance.
	Name *string `pulumi:"name"`
	// - (Optional) ID of network profile
	Networkprofileid *string `pulumi:"networkprofileid"`
	// - (Optional) Timezone of new DB server VM
	Newdbservertimezone *string `pulumi:"newdbservertimezone"`
	// - (Optional) No. of nodes/db server vms. Default: 1
	Nodecount *int `pulumi:"nodecount"`
	// - (Optional) nodes info
	Nodes []NdbDatabaseNode `pulumi:"nodes"`
	// - (Optional) Cluster ID for DB server VM
	Nxclusterid *string `pulumi:"nxclusterid"`
	// - (Optional) action arguments for postgress type database.
	PostgresqlInfo *NdbDatabasePostgresqlInfo `pulumi:"postgresqlInfo"`
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove *bool `pulumi:"remove"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove *bool `pulumi:"softRemove"`
	// - (Optional) ID of software profile
	Softwareprofileid *string `pulumi:"softwareprofileid"`
	// - (Optional) ID of version in software profile
	Softwareprofileversionid *string `pulumi:"softwareprofileversionid"`
	// - (Optional) public key for ssh access to DB server VM
	Sshpublickey *string          `pulumi:"sshpublickey"`
	Tags         []NdbDatabaseTag `pulumi:"tags"`
	// - (Optional) time machine config
	Timemachineinfo *NdbDatabaseTimemachineinfo `pulumi:"timemachineinfo"`
	// - (Optional) password for DB server VM and era drive user
	VmPassword *string `pulumi:"vmPassword"`
}

// The set of arguments for constructing a NdbDatabase resource.
type NdbDatabaseArgs struct {
	// - (Optional) action arguments for database. For postgress, you can use postgresql_info
	Actionarguments NdbDatabaseActionargumentArrayInput
	// - (Optional) Enable auto tuning of staging drive. Default: true
	Autotunestagingdrive pulumi.BoolPtrInput
	ClusterInfos         NdbDatabaseClusterInfoArrayInput
	// - (Optional) If clustered database. Default: false
	Clustered pulumi.BoolPtrInput
	// - (Optional) ID of compute profile
	Computeprofileid pulumi.StringPtrInput
	// - (Optional) Set this to create new DB server VM. Default: true
	Createdbserver     pulumi.BoolPtrInput
	DatabaseInstanceId pulumi.StringPtrInput
	// - (Required) Type of database. Valid values: postgres_database
	Databasetype pulumi.StringPtrInput
	// - (Optional) DB parameters profile ID
	Dbparameterprofileid pulumi.StringPtrInput
	// - (Optional) DB server VM ID for creating instance on registered DB server VM
	Dbserverid pulumi.StringPtrInput
	// - (Optional) Delete the database from the VM. Default value is true
	Delete pulumi.BoolPtrInput
	// - (Optional) Delete the logical cluster. Default is true
	DeleteLogicalCluster pulumi.BoolPtrInput
	// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
	DeleteTimeMachine pulumi.BoolPtrInput
	// - (Optional) The description
	Description pulumi.StringPtrInput
	// - (Optional) Force delete of instance. Default is false
	Forced           pulumi.BoolPtrInput
	MaintenanceTasks NdbDatabaseMaintenanceTasksPtrInput
	// - (Required) Name of the instance.
	Name pulumi.StringPtrInput
	// - (Optional) ID of network profile
	Networkprofileid pulumi.StringPtrInput
	// - (Optional) Timezone of new DB server VM
	Newdbservertimezone pulumi.StringPtrInput
	// - (Optional) No. of nodes/db server vms. Default: 1
	Nodecount pulumi.IntPtrInput
	// - (Optional) nodes info
	Nodes NdbDatabaseNodeArrayInput
	// - (Optional) Cluster ID for DB server VM
	Nxclusterid pulumi.StringPtrInput
	// - (Optional) action arguments for postgress type database.
	PostgresqlInfo NdbDatabasePostgresqlInfoPtrInput
	// - (Optional) Unregister the database from NDB. Default value is true
	Remove pulumi.BoolPtrInput
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrInput
	// - (Optional) ID of software profile
	Softwareprofileid pulumi.StringPtrInput
	// - (Optional) ID of version in software profile
	Softwareprofileversionid pulumi.StringPtrInput
	// - (Optional) public key for ssh access to DB server VM
	Sshpublickey pulumi.StringPtrInput
	Tags         NdbDatabaseTagArrayInput
	// - (Optional) time machine config
	Timemachineinfo NdbDatabaseTimemachineinfoPtrInput
	// - (Optional) password for DB server VM and era drive user
	VmPassword pulumi.StringPtrInput
}

func (NdbDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDatabaseArgs)(nil)).Elem()
}

type NdbDatabaseInput interface {
	pulumi.Input

	ToNdbDatabaseOutput() NdbDatabaseOutput
	ToNdbDatabaseOutputWithContext(ctx context.Context) NdbDatabaseOutput
}

func (*NdbDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDatabase)(nil)).Elem()
}

func (i *NdbDatabase) ToNdbDatabaseOutput() NdbDatabaseOutput {
	return i.ToNdbDatabaseOutputWithContext(context.Background())
}

func (i *NdbDatabase) ToNdbDatabaseOutputWithContext(ctx context.Context) NdbDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseOutput)
}

// NdbDatabaseArrayInput is an input type that accepts NdbDatabaseArray and NdbDatabaseArrayOutput values.
// You can construct a concrete instance of `NdbDatabaseArrayInput` via:
//
//	NdbDatabaseArray{ NdbDatabaseArgs{...} }
type NdbDatabaseArrayInput interface {
	pulumi.Input

	ToNdbDatabaseArrayOutput() NdbDatabaseArrayOutput
	ToNdbDatabaseArrayOutputWithContext(context.Context) NdbDatabaseArrayOutput
}

type NdbDatabaseArray []NdbDatabaseInput

func (NdbDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDatabase)(nil)).Elem()
}

func (i NdbDatabaseArray) ToNdbDatabaseArrayOutput() NdbDatabaseArrayOutput {
	return i.ToNdbDatabaseArrayOutputWithContext(context.Background())
}

func (i NdbDatabaseArray) ToNdbDatabaseArrayOutputWithContext(ctx context.Context) NdbDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseArrayOutput)
}

// NdbDatabaseMapInput is an input type that accepts NdbDatabaseMap and NdbDatabaseMapOutput values.
// You can construct a concrete instance of `NdbDatabaseMapInput` via:
//
//	NdbDatabaseMap{ "key": NdbDatabaseArgs{...} }
type NdbDatabaseMapInput interface {
	pulumi.Input

	ToNdbDatabaseMapOutput() NdbDatabaseMapOutput
	ToNdbDatabaseMapOutputWithContext(context.Context) NdbDatabaseMapOutput
}

type NdbDatabaseMap map[string]NdbDatabaseInput

func (NdbDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDatabase)(nil)).Elem()
}

func (i NdbDatabaseMap) ToNdbDatabaseMapOutput() NdbDatabaseMapOutput {
	return i.ToNdbDatabaseMapOutputWithContext(context.Background())
}

func (i NdbDatabaseMap) ToNdbDatabaseMapOutputWithContext(ctx context.Context) NdbDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseMapOutput)
}

type NdbDatabaseOutput struct{ *pulumi.OutputState }

func (NdbDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDatabase)(nil)).Elem()
}

func (o NdbDatabaseOutput) ToNdbDatabaseOutput() NdbDatabaseOutput {
	return o
}

func (o NdbDatabaseOutput) ToNdbDatabaseOutputWithContext(ctx context.Context) NdbDatabaseOutput {
	return o
}

// - (Optional) action arguments for database. For postgress, you can use postgresql_info
func (o NdbDatabaseOutput) Actionarguments() NdbDatabaseActionargumentArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseActionargumentArrayOutput { return v.Actionarguments }).(NdbDatabaseActionargumentArrayOutput)
}

// - (Optional) Enable auto tuning of staging drive. Default: true
func (o NdbDatabaseOutput) Autotunestagingdrive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.Autotunestagingdrive }).(pulumi.BoolPtrOutput)
}

func (o NdbDatabaseOutput) Clone() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolOutput { return v.Clone }).(pulumi.BoolOutput)
}

func (o NdbDatabaseOutput) ClusterInfos() NdbDatabaseClusterInfoArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseClusterInfoArrayOutput { return v.ClusterInfos }).(NdbDatabaseClusterInfoArrayOutput)
}

// - (Optional) If clustered database. Default: false
func (o NdbDatabaseOutput) Clustered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.Clustered }).(pulumi.BoolPtrOutput)
}

// - (Optional) ID of compute profile
func (o NdbDatabaseOutput) Computeprofileid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Computeprofileid }).(pulumi.StringPtrOutput)
}

// - (Optional) Set this to create new DB server VM. Default: true
func (o NdbDatabaseOutput) Createdbserver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.Createdbserver }).(pulumi.BoolPtrOutput)
}

func (o NdbDatabaseOutput) DatabaseClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.DatabaseClusterType }).(pulumi.StringOutput)
}

func (o NdbDatabaseOutput) DatabaseInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.DatabaseInstanceId }).(pulumi.StringOutput)
}

func (o NdbDatabaseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o NdbDatabaseOutput) DatabaseNodes() NdbDatabaseDatabaseNodeArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseDatabaseNodeArrayOutput { return v.DatabaseNodes }).(NdbDatabaseDatabaseNodeArrayOutput)
}

// - (Required) Type of database. Valid values: postgres_database
func (o NdbDatabaseOutput) Databasetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Databasetype }).(pulumi.StringPtrOutput)
}

func (o NdbDatabaseOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

func (o NdbDatabaseOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// - (Optional) DB parameters profile ID
func (o NdbDatabaseOutput) Dbparameterprofileid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Dbparameterprofileid }).(pulumi.StringPtrOutput)
}

func (o NdbDatabaseOutput) DbserverLogicalCluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringMapOutput { return v.DbserverLogicalCluster }).(pulumi.StringMapOutput)
}

func (o NdbDatabaseOutput) DbserverLogicalClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.DbserverLogicalClusterId }).(pulumi.StringOutput)
}

// - (Optional) DB server VM ID for creating instance on registered DB server VM
func (o NdbDatabaseOutput) Dbserverid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Dbserverid }).(pulumi.StringPtrOutput)
}

// - (Optional) Delete the database from the VM. Default value is true
func (o NdbDatabaseOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.Delete }).(pulumi.BoolPtrOutput)
}

// - (Optional) Delete the logical cluster. Default is true
func (o NdbDatabaseOutput) DeleteLogicalCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.DeleteLogicalCluster }).(pulumi.BoolPtrOutput)
}

// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
func (o NdbDatabaseOutput) DeleteTimeMachine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.DeleteTimeMachine }).(pulumi.BoolPtrOutput)
}

// - (Optional) The description
func (o NdbDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// - (Optional) Force delete of instance. Default is false
func (o NdbDatabaseOutput) Forced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.Forced }).(pulumi.BoolPtrOutput)
}

func (o NdbDatabaseOutput) Infos() NdbDatabaseInfoArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseInfoArrayOutput { return v.Infos }).(NdbDatabaseInfoArrayOutput)
}

func (o NdbDatabaseOutput) LcmConfigs() NdbDatabaseLcmConfigArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseLcmConfigArrayOutput { return v.LcmConfigs }).(NdbDatabaseLcmConfigArrayOutput)
}

func (o NdbDatabaseOutput) LinkedDatabases() NdbDatabaseLinkedDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseLinkedDatabaseArrayOutput { return v.LinkedDatabases }).(NdbDatabaseLinkedDatabaseArrayOutput)
}

func (o NdbDatabaseOutput) MaintenanceTasks() NdbDatabaseMaintenanceTasksPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseMaintenanceTasksPtrOutput { return v.MaintenanceTasks }).(NdbDatabaseMaintenanceTasksPtrOutput)
}

func (o NdbDatabaseOutput) Metric() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringMapOutput { return v.Metric }).(pulumi.StringMapOutput)
}

// - (Required) Name of the instance.
func (o NdbDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - (Optional) ID of network profile
func (o NdbDatabaseOutput) Networkprofileid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Networkprofileid }).(pulumi.StringPtrOutput)
}

// - (Optional) Timezone of new DB server VM
func (o NdbDatabaseOutput) Newdbservertimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Newdbservertimezone }).(pulumi.StringPtrOutput)
}

// - (Optional) No. of nodes/db server vms. Default: 1
func (o NdbDatabaseOutput) Nodecount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.IntPtrOutput { return v.Nodecount }).(pulumi.IntPtrOutput)
}

// - (Optional) nodes info
func (o NdbDatabaseOutput) Nodes() NdbDatabaseNodeArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseNodeArrayOutput { return v.Nodes }).(NdbDatabaseNodeArrayOutput)
}

// - (Optional) Cluster ID for DB server VM
func (o NdbDatabaseOutput) Nxclusterid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Nxclusterid }).(pulumi.StringPtrOutput)
}

func (o NdbDatabaseOutput) ParentDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.ParentDatabaseId }).(pulumi.StringOutput)
}

// - (Optional) action arguments for postgress type database.
func (o NdbDatabaseOutput) PostgresqlInfo() NdbDatabasePostgresqlInfoPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabasePostgresqlInfoPtrOutput { return v.PostgresqlInfo }).(NdbDatabasePostgresqlInfoPtrOutput)
}

// List of all the properties
func (o NdbDatabaseOutput) Properties() NdbDatabasePropertyArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabasePropertyArrayOutput { return v.Properties }).(NdbDatabasePropertyArrayOutput)
}

// - (Optional) Unregister the database from NDB. Default value is true
func (o NdbDatabaseOutput) Remove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.Remove }).(pulumi.BoolPtrOutput)
}

// - (Optional) Soft remove. Default will be false
func (o NdbDatabaseOutput) SoftRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.BoolPtrOutput { return v.SoftRemove }).(pulumi.BoolPtrOutput)
}

// - (Optional) ID of software profile
func (o NdbDatabaseOutput) Softwareprofileid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Softwareprofileid }).(pulumi.StringPtrOutput)
}

// - (Optional) ID of version in software profile
func (o NdbDatabaseOutput) Softwareprofileversionid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Softwareprofileversionid }).(pulumi.StringPtrOutput)
}

// - (Optional) public key for ssh access to DB server VM
func (o NdbDatabaseOutput) Sshpublickey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.Sshpublickey }).(pulumi.StringPtrOutput)
}

func (o NdbDatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NdbDatabaseOutput) Tags() NdbDatabaseTagArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseTagArrayOutput { return v.Tags }).(NdbDatabaseTagArrayOutput)
}

func (o NdbDatabaseOutput) TimeMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.TimeMachineId }).(pulumi.StringOutput)
}

func (o NdbDatabaseOutput) TimeMachines() NdbDatabaseTimeMachineArrayOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseTimeMachineArrayOutput { return v.TimeMachines }).(NdbDatabaseTimeMachineArrayOutput)
}

func (o NdbDatabaseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// - (Optional) time machine config
func (o NdbDatabaseOutput) Timemachineinfo() NdbDatabaseTimemachineinfoPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) NdbDatabaseTimemachineinfoPtrOutput { return v.Timemachineinfo }).(NdbDatabaseTimemachineinfoPtrOutput)
}

func (o NdbDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// - (Optional) password for DB server VM and era drive user
func (o NdbDatabaseOutput) VmPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabase) pulumi.StringPtrOutput { return v.VmPassword }).(pulumi.StringPtrOutput)
}

type NdbDatabaseArrayOutput struct{ *pulumi.OutputState }

func (NdbDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDatabase)(nil)).Elem()
}

func (o NdbDatabaseArrayOutput) ToNdbDatabaseArrayOutput() NdbDatabaseArrayOutput {
	return o
}

func (o NdbDatabaseArrayOutput) ToNdbDatabaseArrayOutputWithContext(ctx context.Context) NdbDatabaseArrayOutput {
	return o
}

func (o NdbDatabaseArrayOutput) Index(i pulumi.IntInput) NdbDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbDatabase {
		return vs[0].([]*NdbDatabase)[vs[1].(int)]
	}).(NdbDatabaseOutput)
}

type NdbDatabaseMapOutput struct{ *pulumi.OutputState }

func (NdbDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDatabase)(nil)).Elem()
}

func (o NdbDatabaseMapOutput) ToNdbDatabaseMapOutput() NdbDatabaseMapOutput {
	return o
}

func (o NdbDatabaseMapOutput) ToNdbDatabaseMapOutputWithContext(ctx context.Context) NdbDatabaseMapOutput {
	return o
}

func (o NdbDatabaseMapOutput) MapIndex(k pulumi.StringInput) NdbDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbDatabase {
		return vs[0].(map[string]*NdbDatabase)[vs[1].(string)]
	}).(NdbDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseInput)(nil)).Elem(), &NdbDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseArrayInput)(nil)).Elem(), NdbDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseMapInput)(nil)).Elem(), NdbDatabaseMap{})
	pulumi.RegisterOutputType(NdbDatabaseOutput{})
	pulumi.RegisterOutputType(NdbDatabaseArrayOutput{})
	pulumi.RegisterOutputType(NdbDatabaseMapOutput{})
}
