// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to Create a new Volume Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewVolumeGroupV2(ctx, "volumeGroupExample", &nutanix.VolumeGroupV2Args{
//				Description:                    pulumi.String("Test Create Volume group with spec"),
//				ShouldLoadBalanceVmAttachments: pulumi.Bool(false),
//				SharingStatus:                  pulumi.String("SHARED"),
//				TargetName:                     pulumi.String("volumegroup-test-001234"),
//				CreatedBy:                      pulumi.String("example"),
//				ClusterReference:               pulumi.String("ab520e1d-4950-1db1-917f-a9e2ea35b8e3"),
//				IscsiFeatures: nutanix.VolumeGroupV2IscsiFeatureArray{
//					&nutanix.VolumeGroupV2IscsiFeatureArgs{
//						EnabledAuthentications: pulumi.String("CHAP"),
//						TargetSecret:           pulumi.String("123456789abc"),
//					},
//				},
//				StorageFeatures: nutanix.VolumeGroupV2StorageFeatureArray{
//					&nutanix.VolumeGroupV2StorageFeatureArgs{
//						FlashModes: nutanix.VolumeGroupV2StorageFeatureFlashModeArray{
//							&nutanix.VolumeGroupV2StorageFeatureFlashModeArgs{
//								IsEnabled: pulumi.Bool(true),
//							},
//						},
//					},
//				},
//				UsageType: pulumi.String("USER"),
//				IsHidden:  pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VolumeGroupV2 struct {
	pulumi.CustomResourceState

	// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
	// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
	// - NONE : Volume Group has no attachment.
	// - DIRECT : Volume Group has a VM attachment.
	AttachmentType pulumi.StringPtrOutput `pulumi:"attachmentType"`
	// -(Required) The UUID of the cluster that will host the Volume Group.
	ClusterReference pulumi.StringOutput `pulumi:"clusterReference"`
	// -(Optional) Service/user who created this Volume Group.
	CreatedBy pulumi.StringPtrOutput `pulumi:"createdBy"`
	// -(Optional) Volume Group description. This is an optional field.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// -(Optional) A list of Volume Disks to be attached to the Volume Group.
	Disks VolumeGroupV2DiskArrayOutput `pulumi:"disks"`
	// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
	EnabledAuthentications pulumi.StringPtrOutput `pulumi:"enabledAuthentications"`
	// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
	IsHidden pulumi.BoolPtrOutput `pulumi:"isHidden"`
	// -(Optional) iSCSI specific settings for the Volume Group.
	IscsiFeatures VolumeGroupV2IscsiFeatureArrayOutput `pulumi:"iscsiFeatures"`
	// -(Required) Volume Group name. This is an optional field.
	Name pulumi.StringOutput `pulumi:"name"`
	// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
	// - NOT_ASSIGNED :  Volume Group does not use any protocol.
	// - ISCSI : Volume Group uses iSCSI protocol.
	// - NVMF : Volume Group uses NVMf protocol.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
	SharingStatus pulumi.StringPtrOutput `pulumi:"sharingStatus"`
	// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
	ShouldLoadBalanceVmAttachments pulumi.BoolPtrOutput `pulumi:"shouldLoadBalanceVmAttachments"`
	// -(Optional) Storage optimization features which must be enabled on the Volume Group.
	StorageFeatures VolumeGroupV2StorageFeatureArrayOutput `pulumi:"storageFeatures"`
	// -(Optional) Name of the external client target that will be visible and accessible to the client.
	TargetName pulumi.StringOutput `pulumi:"targetName"`
	// The specifications contain the target prefix for external clients as the value. This is an optional field.
	TargetPrefix pulumi.StringPtrOutput `pulumi:"targetPrefix"`
	// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
	UsageType pulumi.StringPtrOutput `pulumi:"usageType"`
}

// NewVolumeGroupV2 registers a new resource with the given unique name, arguments, and options.
func NewVolumeGroupV2(ctx *pulumi.Context,
	name string, args *VolumeGroupV2Args, opts ...pulumi.ResourceOption) (*VolumeGroupV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterReference == nil {
		return nil, errors.New("invalid value for required argument 'ClusterReference'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeGroupV2
	err := ctx.RegisterResource("nutanix:index/volumeGroupV2:VolumeGroupV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeGroupV2 gets an existing VolumeGroupV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeGroupV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeGroupV2State, opts ...pulumi.ResourceOption) (*VolumeGroupV2, error) {
	var resource VolumeGroupV2
	err := ctx.ReadResource("nutanix:index/volumeGroupV2:VolumeGroupV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeGroupV2 resources.
type volumeGroupV2State struct {
	// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
	// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
	// - NONE : Volume Group has no attachment.
	// - DIRECT : Volume Group has a VM attachment.
	AttachmentType *string `pulumi:"attachmentType"`
	// -(Required) The UUID of the cluster that will host the Volume Group.
	ClusterReference *string `pulumi:"clusterReference"`
	// -(Optional) Service/user who created this Volume Group.
	CreatedBy *string `pulumi:"createdBy"`
	// -(Optional) Volume Group description. This is an optional field.
	Description *string `pulumi:"description"`
	// -(Optional) A list of Volume Disks to be attached to the Volume Group.
	Disks []VolumeGroupV2Disk `pulumi:"disks"`
	// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
	EnabledAuthentications *string `pulumi:"enabledAuthentications"`
	// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
	ExtId *string `pulumi:"extId"`
	// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
	IsHidden *bool `pulumi:"isHidden"`
	// -(Optional) iSCSI specific settings for the Volume Group.
	IscsiFeatures []VolumeGroupV2IscsiFeature `pulumi:"iscsiFeatures"`
	// -(Required) Volume Group name. This is an optional field.
	Name *string `pulumi:"name"`
	// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
	// - NOT_ASSIGNED :  Volume Group does not use any protocol.
	// - ISCSI : Volume Group uses iSCSI protocol.
	// - NVMF : Volume Group uses NVMf protocol.
	Protocol *string `pulumi:"protocol"`
	// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
	SharingStatus *string `pulumi:"sharingStatus"`
	// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
	ShouldLoadBalanceVmAttachments *bool `pulumi:"shouldLoadBalanceVmAttachments"`
	// -(Optional) Storage optimization features which must be enabled on the Volume Group.
	StorageFeatures []VolumeGroupV2StorageFeature `pulumi:"storageFeatures"`
	// -(Optional) Name of the external client target that will be visible and accessible to the client.
	TargetName *string `pulumi:"targetName"`
	// The specifications contain the target prefix for external clients as the value. This is an optional field.
	TargetPrefix *string `pulumi:"targetPrefix"`
	// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
	UsageType *string `pulumi:"usageType"`
}

type VolumeGroupV2State struct {
	// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
	// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
	// - NONE : Volume Group has no attachment.
	// - DIRECT : Volume Group has a VM attachment.
	AttachmentType pulumi.StringPtrInput
	// -(Required) The UUID of the cluster that will host the Volume Group.
	ClusterReference pulumi.StringPtrInput
	// -(Optional) Service/user who created this Volume Group.
	CreatedBy pulumi.StringPtrInput
	// -(Optional) Volume Group description. This is an optional field.
	Description pulumi.StringPtrInput
	// -(Optional) A list of Volume Disks to be attached to the Volume Group.
	Disks VolumeGroupV2DiskArrayInput
	// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
	EnabledAuthentications pulumi.StringPtrInput
	// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
	ExtId pulumi.StringPtrInput
	// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
	IsHidden pulumi.BoolPtrInput
	// -(Optional) iSCSI specific settings for the Volume Group.
	IscsiFeatures VolumeGroupV2IscsiFeatureArrayInput
	// -(Required) Volume Group name. This is an optional field.
	Name pulumi.StringPtrInput
	// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
	// - NOT_ASSIGNED :  Volume Group does not use any protocol.
	// - ISCSI : Volume Group uses iSCSI protocol.
	// - NVMF : Volume Group uses NVMf protocol.
	Protocol pulumi.StringPtrInput
	// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
	SharingStatus pulumi.StringPtrInput
	// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
	ShouldLoadBalanceVmAttachments pulumi.BoolPtrInput
	// -(Optional) Storage optimization features which must be enabled on the Volume Group.
	StorageFeatures VolumeGroupV2StorageFeatureArrayInput
	// -(Optional) Name of the external client target that will be visible and accessible to the client.
	TargetName pulumi.StringPtrInput
	// The specifications contain the target prefix for external clients as the value. This is an optional field.
	TargetPrefix pulumi.StringPtrInput
	// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
	UsageType pulumi.StringPtrInput
}

func (VolumeGroupV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupV2State)(nil)).Elem()
}

type volumeGroupV2Args struct {
	// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
	// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
	// - NONE : Volume Group has no attachment.
	// - DIRECT : Volume Group has a VM attachment.
	AttachmentType *string `pulumi:"attachmentType"`
	// -(Required) The UUID of the cluster that will host the Volume Group.
	ClusterReference string `pulumi:"clusterReference"`
	// -(Optional) Service/user who created this Volume Group.
	CreatedBy *string `pulumi:"createdBy"`
	// -(Optional) Volume Group description. This is an optional field.
	Description *string `pulumi:"description"`
	// -(Optional) A list of Volume Disks to be attached to the Volume Group.
	Disks []VolumeGroupV2Disk `pulumi:"disks"`
	// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
	EnabledAuthentications *string `pulumi:"enabledAuthentications"`
	// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
	IsHidden *bool `pulumi:"isHidden"`
	// -(Optional) iSCSI specific settings for the Volume Group.
	IscsiFeatures []VolumeGroupV2IscsiFeature `pulumi:"iscsiFeatures"`
	// -(Required) Volume Group name. This is an optional field.
	Name *string `pulumi:"name"`
	// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
	// - NOT_ASSIGNED :  Volume Group does not use any protocol.
	// - ISCSI : Volume Group uses iSCSI protocol.
	// - NVMF : Volume Group uses NVMf protocol.
	Protocol *string `pulumi:"protocol"`
	// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
	SharingStatus *string `pulumi:"sharingStatus"`
	// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
	ShouldLoadBalanceVmAttachments *bool `pulumi:"shouldLoadBalanceVmAttachments"`
	// -(Optional) Storage optimization features which must be enabled on the Volume Group.
	StorageFeatures []VolumeGroupV2StorageFeature `pulumi:"storageFeatures"`
	// -(Optional) Name of the external client target that will be visible and accessible to the client.
	TargetName *string `pulumi:"targetName"`
	// The specifications contain the target prefix for external clients as the value. This is an optional field.
	TargetPrefix *string `pulumi:"targetPrefix"`
	// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
	UsageType *string `pulumi:"usageType"`
}

// The set of arguments for constructing a VolumeGroupV2 resource.
type VolumeGroupV2Args struct {
	// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
	// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
	// - NONE : Volume Group has no attachment.
	// - DIRECT : Volume Group has a VM attachment.
	AttachmentType pulumi.StringPtrInput
	// -(Required) The UUID of the cluster that will host the Volume Group.
	ClusterReference pulumi.StringInput
	// -(Optional) Service/user who created this Volume Group.
	CreatedBy pulumi.StringPtrInput
	// -(Optional) Volume Group description. This is an optional field.
	Description pulumi.StringPtrInput
	// -(Optional) A list of Volume Disks to be attached to the Volume Group.
	Disks VolumeGroupV2DiskArrayInput
	// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
	EnabledAuthentications pulumi.StringPtrInput
	// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
	IsHidden pulumi.BoolPtrInput
	// -(Optional) iSCSI specific settings for the Volume Group.
	IscsiFeatures VolumeGroupV2IscsiFeatureArrayInput
	// -(Required) Volume Group name. This is an optional field.
	Name pulumi.StringPtrInput
	// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
	// - NOT_ASSIGNED :  Volume Group does not use any protocol.
	// - ISCSI : Volume Group uses iSCSI protocol.
	// - NVMF : Volume Group uses NVMf protocol.
	Protocol pulumi.StringPtrInput
	// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
	SharingStatus pulumi.StringPtrInput
	// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
	ShouldLoadBalanceVmAttachments pulumi.BoolPtrInput
	// -(Optional) Storage optimization features which must be enabled on the Volume Group.
	StorageFeatures VolumeGroupV2StorageFeatureArrayInput
	// -(Optional) Name of the external client target that will be visible and accessible to the client.
	TargetName pulumi.StringPtrInput
	// The specifications contain the target prefix for external clients as the value. This is an optional field.
	TargetPrefix pulumi.StringPtrInput
	// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
	UsageType pulumi.StringPtrInput
}

func (VolumeGroupV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupV2Args)(nil)).Elem()
}

type VolumeGroupV2Input interface {
	pulumi.Input

	ToVolumeGroupV2Output() VolumeGroupV2Output
	ToVolumeGroupV2OutputWithContext(ctx context.Context) VolumeGroupV2Output
}

func (*VolumeGroupV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupV2)(nil)).Elem()
}

func (i *VolumeGroupV2) ToVolumeGroupV2Output() VolumeGroupV2Output {
	return i.ToVolumeGroupV2OutputWithContext(context.Background())
}

func (i *VolumeGroupV2) ToVolumeGroupV2OutputWithContext(ctx context.Context) VolumeGroupV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupV2Output)
}

// VolumeGroupV2ArrayInput is an input type that accepts VolumeGroupV2Array and VolumeGroupV2ArrayOutput values.
// You can construct a concrete instance of `VolumeGroupV2ArrayInput` via:
//
//	VolumeGroupV2Array{ VolumeGroupV2Args{...} }
type VolumeGroupV2ArrayInput interface {
	pulumi.Input

	ToVolumeGroupV2ArrayOutput() VolumeGroupV2ArrayOutput
	ToVolumeGroupV2ArrayOutputWithContext(context.Context) VolumeGroupV2ArrayOutput
}

type VolumeGroupV2Array []VolumeGroupV2Input

func (VolumeGroupV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupV2)(nil)).Elem()
}

func (i VolumeGroupV2Array) ToVolumeGroupV2ArrayOutput() VolumeGroupV2ArrayOutput {
	return i.ToVolumeGroupV2ArrayOutputWithContext(context.Background())
}

func (i VolumeGroupV2Array) ToVolumeGroupV2ArrayOutputWithContext(ctx context.Context) VolumeGroupV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupV2ArrayOutput)
}

// VolumeGroupV2MapInput is an input type that accepts VolumeGroupV2Map and VolumeGroupV2MapOutput values.
// You can construct a concrete instance of `VolumeGroupV2MapInput` via:
//
//	VolumeGroupV2Map{ "key": VolumeGroupV2Args{...} }
type VolumeGroupV2MapInput interface {
	pulumi.Input

	ToVolumeGroupV2MapOutput() VolumeGroupV2MapOutput
	ToVolumeGroupV2MapOutputWithContext(context.Context) VolumeGroupV2MapOutput
}

type VolumeGroupV2Map map[string]VolumeGroupV2Input

func (VolumeGroupV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupV2)(nil)).Elem()
}

func (i VolumeGroupV2Map) ToVolumeGroupV2MapOutput() VolumeGroupV2MapOutput {
	return i.ToVolumeGroupV2MapOutputWithContext(context.Background())
}

func (i VolumeGroupV2Map) ToVolumeGroupV2MapOutputWithContext(ctx context.Context) VolumeGroupV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupV2MapOutput)
}

type VolumeGroupV2Output struct{ *pulumi.OutputState }

func (VolumeGroupV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupV2)(nil)).Elem()
}

func (o VolumeGroupV2Output) ToVolumeGroupV2Output() VolumeGroupV2Output {
	return o
}

func (o VolumeGroupV2Output) ToVolumeGroupV2OutputWithContext(ctx context.Context) VolumeGroupV2Output {
	return o
}

// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
// - NONE : Volume Group has no attachment.
// - DIRECT : Volume Group has a VM attachment.
func (o VolumeGroupV2Output) AttachmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.AttachmentType }).(pulumi.StringPtrOutput)
}

// -(Required) The UUID of the cluster that will host the Volume Group.
func (o VolumeGroupV2Output) ClusterReference() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringOutput { return v.ClusterReference }).(pulumi.StringOutput)
}

// -(Optional) Service/user who created this Volume Group.
func (o VolumeGroupV2Output) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// -(Optional) Volume Group description. This is an optional field.
func (o VolumeGroupV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// -(Optional) A list of Volume Disks to be attached to the Volume Group.
func (o VolumeGroupV2Output) Disks() VolumeGroupV2DiskArrayOutput {
	return o.ApplyT(func(v *VolumeGroupV2) VolumeGroupV2DiskArrayOutput { return v.Disks }).(VolumeGroupV2DiskArrayOutput)
}

// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
func (o VolumeGroupV2Output) EnabledAuthentications() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.EnabledAuthentications }).(pulumi.StringPtrOutput)
}

// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
func (o VolumeGroupV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
func (o VolumeGroupV2Output) IsHidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.BoolPtrOutput { return v.IsHidden }).(pulumi.BoolPtrOutput)
}

// -(Optional) iSCSI specific settings for the Volume Group.
func (o VolumeGroupV2Output) IscsiFeatures() VolumeGroupV2IscsiFeatureArrayOutput {
	return o.ApplyT(func(v *VolumeGroupV2) VolumeGroupV2IscsiFeatureArrayOutput { return v.IscsiFeatures }).(VolumeGroupV2IscsiFeatureArrayOutput)
}

// -(Required) Volume Group name. This is an optional field.
func (o VolumeGroupV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
// - NOT_ASSIGNED :  Volume Group does not use any protocol.
// - ISCSI : Volume Group uses iSCSI protocol.
// - NVMF : Volume Group uses NVMf protocol.
func (o VolumeGroupV2Output) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
func (o VolumeGroupV2Output) SharingStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.SharingStatus }).(pulumi.StringPtrOutput)
}

// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
func (o VolumeGroupV2Output) ShouldLoadBalanceVmAttachments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.BoolPtrOutput { return v.ShouldLoadBalanceVmAttachments }).(pulumi.BoolPtrOutput)
}

// -(Optional) Storage optimization features which must be enabled on the Volume Group.
func (o VolumeGroupV2Output) StorageFeatures() VolumeGroupV2StorageFeatureArrayOutput {
	return o.ApplyT(func(v *VolumeGroupV2) VolumeGroupV2StorageFeatureArrayOutput { return v.StorageFeatures }).(VolumeGroupV2StorageFeatureArrayOutput)
}

// -(Optional) Name of the external client target that will be visible and accessible to the client.
func (o VolumeGroupV2Output) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringOutput { return v.TargetName }).(pulumi.StringOutput)
}

// The specifications contain the target prefix for external clients as the value. This is an optional field.
func (o VolumeGroupV2Output) TargetPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.TargetPrefix }).(pulumi.StringPtrOutput)
}

// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
func (o VolumeGroupV2Output) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupV2) pulumi.StringPtrOutput { return v.UsageType }).(pulumi.StringPtrOutput)
}

type VolumeGroupV2ArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupV2)(nil)).Elem()
}

func (o VolumeGroupV2ArrayOutput) ToVolumeGroupV2ArrayOutput() VolumeGroupV2ArrayOutput {
	return o
}

func (o VolumeGroupV2ArrayOutput) ToVolumeGroupV2ArrayOutputWithContext(ctx context.Context) VolumeGroupV2ArrayOutput {
	return o
}

func (o VolumeGroupV2ArrayOutput) Index(i pulumi.IntInput) VolumeGroupV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeGroupV2 {
		return vs[0].([]*VolumeGroupV2)[vs[1].(int)]
	}).(VolumeGroupV2Output)
}

type VolumeGroupV2MapOutput struct{ *pulumi.OutputState }

func (VolumeGroupV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupV2)(nil)).Elem()
}

func (o VolumeGroupV2MapOutput) ToVolumeGroupV2MapOutput() VolumeGroupV2MapOutput {
	return o
}

func (o VolumeGroupV2MapOutput) ToVolumeGroupV2MapOutputWithContext(ctx context.Context) VolumeGroupV2MapOutput {
	return o
}

func (o VolumeGroupV2MapOutput) MapIndex(k pulumi.StringInput) VolumeGroupV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeGroupV2 {
		return vs[0].(map[string]*VolumeGroupV2)[vs[1].(string)]
	}).(VolumeGroupV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupV2Input)(nil)).Elem(), &VolumeGroupV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupV2ArrayInput)(nil)).Elem(), VolumeGroupV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupV2MapInput)(nil)).Elem(), VolumeGroupV2Map{})
	pulumi.RegisterOutputType(VolumeGroupV2Output{})
	pulumi.RegisterOutputType(VolumeGroupV2ArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupV2MapOutput{})
}
