// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fetch a category
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewCategoryV2(ctx, "example", &nutanix.CategoryV2Args{
//				Description: pulumi.String("category example description"),
//				Key:         pulumi.String("category_example_key"),
//				Value:       pulumi.String("category_example_value"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CategoryV2 struct {
	pulumi.CustomResourceState

	// This field gives basic information about resources that are associated with the category.
	// The results present under this field summarize the counts of various kinds of resources associated with the category.
	// For more detailed information about the UUIDs of the resources, please look into the field detailedAssociations.
	// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
	// This field will not be present by default in listCategories API, unless the parameter $expand=associations is present in the URL.
	Associations CategoryV2AssociationArrayOutput `pulumi:"associations"`
	// -(Optional) A string consisting of the description of the category as defined by the user.
	// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
	// Description field can be updated through updateCategoryById API.
	// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
	// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
	Description pulumi.StringOutput `pulumi:"description"`
	// This field gives detailed information about the resources which are associated with the category.
	// The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.
	// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
	// This field will not be present by default in listCategories or getCategoryById APIs, unless the parameter $expand=detailedAssociations is present in the URL.
	DetailedAssociations CategoryV2DetailedAssociationArrayOutput `pulumi:"detailedAssociations"`
	// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	Key pulumi.StringOutput `pulumi:"key"`
	// -(Optional) This field contains the UUID of a user who owns the category.
	// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
	// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
	// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
	// It is used for enabling RBAC access to self-owned categories.
	OwnerUuid pulumi.StringOutput `pulumi:"ownerUuid"`
	// -(Required) Denotes the type of a category.
	// Valid values are:
	// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
	// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
	// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
	Type pulumi.StringOutput `pulumi:"type"`
	// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	// Updating the value will not change the extId of the category.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewCategoryV2 registers a new resource with the given unique name, arguments, and options.
func NewCategoryV2(ctx *pulumi.Context,
	name string, args *CategoryV2Args, opts ...pulumi.ResourceOption) (*CategoryV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CategoryV2
	err := ctx.RegisterResource("nutanix:index/categoryV2:CategoryV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCategoryV2 gets an existing CategoryV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCategoryV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CategoryV2State, opts ...pulumi.ResourceOption) (*CategoryV2, error) {
	var resource CategoryV2
	err := ctx.ReadResource("nutanix:index/categoryV2:CategoryV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CategoryV2 resources.
type categoryV2State struct {
	// This field gives basic information about resources that are associated with the category.
	// The results present under this field summarize the counts of various kinds of resources associated with the category.
	// For more detailed information about the UUIDs of the resources, please look into the field detailedAssociations.
	// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
	// This field will not be present by default in listCategories API, unless the parameter $expand=associations is present in the URL.
	Associations []CategoryV2Association `pulumi:"associations"`
	// -(Optional) A string consisting of the description of the category as defined by the user.
	// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
	// Description field can be updated through updateCategoryById API.
	// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
	// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
	Description *string `pulumi:"description"`
	// This field gives detailed information about the resources which are associated with the category.
	// The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.
	// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
	// This field will not be present by default in listCategories or getCategoryById APIs, unless the parameter $expand=detailedAssociations is present in the URL.
	DetailedAssociations []CategoryV2DetailedAssociation `pulumi:"detailedAssociations"`
	// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	Key *string `pulumi:"key"`
	// -(Optional) This field contains the UUID of a user who owns the category.
	// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
	// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
	// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
	// It is used for enabling RBAC access to self-owned categories.
	OwnerUuid *string `pulumi:"ownerUuid"`
	// -(Required) Denotes the type of a category.
	// Valid values are:
	// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
	// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
	// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
	Type *string `pulumi:"type"`
	// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	// Updating the value will not change the extId of the category.
	Value *string `pulumi:"value"`
}

type CategoryV2State struct {
	// This field gives basic information about resources that are associated with the category.
	// The results present under this field summarize the counts of various kinds of resources associated with the category.
	// For more detailed information about the UUIDs of the resources, please look into the field detailedAssociations.
	// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
	// This field will not be present by default in listCategories API, unless the parameter $expand=associations is present in the URL.
	Associations CategoryV2AssociationArrayInput
	// -(Optional) A string consisting of the description of the category as defined by the user.
	// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
	// Description field can be updated through updateCategoryById API.
	// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
	// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
	Description pulumi.StringPtrInput
	// This field gives detailed information about the resources which are associated with the category.
	// The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.
	// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
	// This field will not be present by default in listCategories or getCategoryById APIs, unless the parameter $expand=detailedAssociations is present in the URL.
	DetailedAssociations CategoryV2DetailedAssociationArrayInput
	// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	Key pulumi.StringPtrInput
	// -(Optional) This field contains the UUID of a user who owns the category.
	// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
	// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
	// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
	// It is used for enabling RBAC access to self-owned categories.
	OwnerUuid pulumi.StringPtrInput
	// -(Required) Denotes the type of a category.
	// Valid values are:
	// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
	// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
	// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
	Type pulumi.StringPtrInput
	// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	// Updating the value will not change the extId of the category.
	Value pulumi.StringPtrInput
}

func (CategoryV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*categoryV2State)(nil)).Elem()
}

type categoryV2Args struct {
	// -(Optional) A string consisting of the description of the category as defined by the user.
	// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
	// Description field can be updated through updateCategoryById API.
	// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
	// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
	Description *string `pulumi:"description"`
	// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	Key string `pulumi:"key"`
	// -(Optional) This field contains the UUID of a user who owns the category.
	// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
	// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
	// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
	// It is used for enabling RBAC access to self-owned categories.
	OwnerUuid *string `pulumi:"ownerUuid"`
	// -(Required) Denotes the type of a category.
	// Valid values are:
	// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
	// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
	// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
	Type *string `pulumi:"type"`
	// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	// Updating the value will not change the extId of the category.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a CategoryV2 resource.
type CategoryV2Args struct {
	// -(Optional) A string consisting of the description of the category as defined by the user.
	// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
	// Description field can be updated through updateCategoryById API.
	// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
	// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
	Description pulumi.StringPtrInput
	// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	Key pulumi.StringInput
	// -(Optional) This field contains the UUID of a user who owns the category.
	// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
	// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
	// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
	// It is used for enabling RBAC access to self-owned categories.
	OwnerUuid pulumi.StringPtrInput
	// -(Required) Denotes the type of a category.
	// Valid values are:
	// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
	// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
	// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
	Type pulumi.StringPtrInput
	// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
	//
	// - A string of maxlength of 64
	// - Character at the start cannot be `$`
	// - Character `/` is not allowed anywhere.
	//
	// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
	// This field can't be updated through `updateCategoryById` API.
	// Updating the value will not change the extId of the category.
	Value pulumi.StringInput
}

func (CategoryV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*categoryV2Args)(nil)).Elem()
}

type CategoryV2Input interface {
	pulumi.Input

	ToCategoryV2Output() CategoryV2Output
	ToCategoryV2OutputWithContext(ctx context.Context) CategoryV2Output
}

func (*CategoryV2) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryV2)(nil)).Elem()
}

func (i *CategoryV2) ToCategoryV2Output() CategoryV2Output {
	return i.ToCategoryV2OutputWithContext(context.Background())
}

func (i *CategoryV2) ToCategoryV2OutputWithContext(ctx context.Context) CategoryV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryV2Output)
}

// CategoryV2ArrayInput is an input type that accepts CategoryV2Array and CategoryV2ArrayOutput values.
// You can construct a concrete instance of `CategoryV2ArrayInput` via:
//
//	CategoryV2Array{ CategoryV2Args{...} }
type CategoryV2ArrayInput interface {
	pulumi.Input

	ToCategoryV2ArrayOutput() CategoryV2ArrayOutput
	ToCategoryV2ArrayOutputWithContext(context.Context) CategoryV2ArrayOutput
}

type CategoryV2Array []CategoryV2Input

func (CategoryV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CategoryV2)(nil)).Elem()
}

func (i CategoryV2Array) ToCategoryV2ArrayOutput() CategoryV2ArrayOutput {
	return i.ToCategoryV2ArrayOutputWithContext(context.Background())
}

func (i CategoryV2Array) ToCategoryV2ArrayOutputWithContext(ctx context.Context) CategoryV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryV2ArrayOutput)
}

// CategoryV2MapInput is an input type that accepts CategoryV2Map and CategoryV2MapOutput values.
// You can construct a concrete instance of `CategoryV2MapInput` via:
//
//	CategoryV2Map{ "key": CategoryV2Args{...} }
type CategoryV2MapInput interface {
	pulumi.Input

	ToCategoryV2MapOutput() CategoryV2MapOutput
	ToCategoryV2MapOutputWithContext(context.Context) CategoryV2MapOutput
}

type CategoryV2Map map[string]CategoryV2Input

func (CategoryV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CategoryV2)(nil)).Elem()
}

func (i CategoryV2Map) ToCategoryV2MapOutput() CategoryV2MapOutput {
	return i.ToCategoryV2MapOutputWithContext(context.Background())
}

func (i CategoryV2Map) ToCategoryV2MapOutputWithContext(ctx context.Context) CategoryV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryV2MapOutput)
}

type CategoryV2Output struct{ *pulumi.OutputState }

func (CategoryV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryV2)(nil)).Elem()
}

func (o CategoryV2Output) ToCategoryV2Output() CategoryV2Output {
	return o
}

func (o CategoryV2Output) ToCategoryV2OutputWithContext(ctx context.Context) CategoryV2Output {
	return o
}

// This field gives basic information about resources that are associated with the category.
// The results present under this field summarize the counts of various kinds of resources associated with the category.
// For more detailed information about the UUIDs of the resources, please look into the field detailedAssociations.
// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
// This field will not be present by default in listCategories API, unless the parameter $expand=associations is present in the URL.
func (o CategoryV2Output) Associations() CategoryV2AssociationArrayOutput {
	return o.ApplyT(func(v *CategoryV2) CategoryV2AssociationArrayOutput { return v.Associations }).(CategoryV2AssociationArrayOutput)
}

// -(Optional) A string consisting of the description of the category as defined by the user.
// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
// Description field can be updated through updateCategoryById API.
// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
func (o CategoryV2Output) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryV2) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// This field gives detailed information about the resources which are associated with the category.
// The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.
// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
// This field will not be present by default in listCategories or getCategoryById APIs, unless the parameter $expand=detailedAssociations is present in the URL.
func (o CategoryV2Output) DetailedAssociations() CategoryV2DetailedAssociationArrayOutput {
	return o.ApplyT(func(v *CategoryV2) CategoryV2DetailedAssociationArrayOutput { return v.DetailedAssociations }).(CategoryV2DetailedAssociationArrayOutput)
}

// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
//
// - A string of maxlength of 64
// - Character at the start cannot be `$`
// - Character `/` is not allowed anywhere.
//
// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
// This field can't be updated through `updateCategoryById` API.
func (o CategoryV2Output) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryV2) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// -(Optional) This field contains the UUID of a user who owns the category.
// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
// It is used for enabling RBAC access to self-owned categories.
func (o CategoryV2Output) OwnerUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryV2) pulumi.StringOutput { return v.OwnerUuid }).(pulumi.StringOutput)
}

// -(Required) Denotes the type of a category.
// Valid values are:
// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
func (o CategoryV2Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryV2) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
//
// - A string of maxlength of 64
// - Character at the start cannot be `$`
// - Character `/` is not allowed anywhere.
//
// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
// This field can't be updated through `updateCategoryById` API.
// Updating the value will not change the extId of the category.
func (o CategoryV2Output) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *CategoryV2) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type CategoryV2ArrayOutput struct{ *pulumi.OutputState }

func (CategoryV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CategoryV2)(nil)).Elem()
}

func (o CategoryV2ArrayOutput) ToCategoryV2ArrayOutput() CategoryV2ArrayOutput {
	return o
}

func (o CategoryV2ArrayOutput) ToCategoryV2ArrayOutputWithContext(ctx context.Context) CategoryV2ArrayOutput {
	return o
}

func (o CategoryV2ArrayOutput) Index(i pulumi.IntInput) CategoryV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CategoryV2 {
		return vs[0].([]*CategoryV2)[vs[1].(int)]
	}).(CategoryV2Output)
}

type CategoryV2MapOutput struct{ *pulumi.OutputState }

func (CategoryV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CategoryV2)(nil)).Elem()
}

func (o CategoryV2MapOutput) ToCategoryV2MapOutput() CategoryV2MapOutput {
	return o
}

func (o CategoryV2MapOutput) ToCategoryV2MapOutputWithContext(ctx context.Context) CategoryV2MapOutput {
	return o
}

func (o CategoryV2MapOutput) MapIndex(k pulumi.StringInput) CategoryV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CategoryV2 {
		return vs[0].(map[string]*CategoryV2)[vs[1].(string)]
	}).(CategoryV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryV2Input)(nil)).Elem(), &CategoryV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryV2ArrayInput)(nil)).Elem(), CategoryV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryV2MapInput)(nil)).Elem(), CategoryV2Map{})
	pulumi.RegisterOutputType(CategoryV2Output{})
	pulumi.RegisterOutputType(CategoryV2ArrayOutput{})
	pulumi.RegisterOutputType(CategoryV2MapOutput{})
}
