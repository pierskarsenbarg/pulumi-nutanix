// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource to Trigger an in-guest upgrade of Nutanix Guest Tools.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNgtUpgradeV2(ctx, "example", &nutanix.NgtUpgradeV2Args{
//				ExtId: pulumi.String("ab520e1d-4950-1db1-917f-a9e2ea35b8e3"),
//				RebootPreference: &nutanix.NgtUpgradeV2RebootPreferenceArgs{
//					ScheduleType: pulumi.String("IMMEDIATE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NgtUpgradeV2 struct {
	pulumi.CustomResourceState

	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion pulumi.StringOutput `pulumi:"availableVersion"`
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayOutput `pulumi:"capablities"`
	// uuid of the Virtual Machine.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// Version of the operating system on the VM.
	GuestOsVersion pulumi.StringOutput `pulumi:"guestOsVersion"`
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled pulumi.BoolOutput `pulumi:"isInstalled"`
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted pulumi.BoolOutput `pulumi:"isIsoInserted"`
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable pulumi.BoolOutput `pulumi:"isReachable"`
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled pulumi.BoolOutput `pulumi:"isVmMobilityDriversInstalled"`
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable pulumi.BoolOutput `pulumi:"isVssSnapshotCapable"`
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference NgtUpgradeV2RebootPreferencePtrOutput `pulumi:"rebootPreference"`
	// Version of Nutanix Guest Tools installed on the VM.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewNgtUpgradeV2 registers a new resource with the given unique name, arguments, and options.
func NewNgtUpgradeV2(ctx *pulumi.Context,
	name string, args *NgtUpgradeV2Args, opts ...pulumi.ResourceOption) (*NgtUpgradeV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgtUpgradeV2
	err := ctx.RegisterResource("nutanix:index/ngtUpgradeV2:NgtUpgradeV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgtUpgradeV2 gets an existing NgtUpgradeV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgtUpgradeV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgtUpgradeV2State, opts ...pulumi.ResourceOption) (*NgtUpgradeV2, error) {
	var resource NgtUpgradeV2
	err := ctx.ReadResource("nutanix:index/ngtUpgradeV2:NgtUpgradeV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgtUpgradeV2 resources.
type ngtUpgradeV2State struct {
	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion *string `pulumi:"availableVersion"`
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities []string `pulumi:"capablities"`
	// uuid of the Virtual Machine.
	ExtId *string `pulumi:"extId"`
	// Version of the operating system on the VM.
	GuestOsVersion *string `pulumi:"guestOsVersion"`
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled *bool `pulumi:"isInstalled"`
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted *bool `pulumi:"isIsoInserted"`
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable *bool `pulumi:"isReachable"`
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled *bool `pulumi:"isVmMobilityDriversInstalled"`
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable *bool `pulumi:"isVssSnapshotCapable"`
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference *NgtUpgradeV2RebootPreference `pulumi:"rebootPreference"`
	// Version of Nutanix Guest Tools installed on the VM.
	Version *string `pulumi:"version"`
}

type NgtUpgradeV2State struct {
	// Version of Nutanix Guest Tools available on the cluster.
	AvailableVersion pulumi.StringPtrInput
	// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
	Capablities pulumi.StringArrayInput
	// uuid of the Virtual Machine.
	ExtId pulumi.StringPtrInput
	// Version of the operating system on the VM.
	GuestOsVersion pulumi.StringPtrInput
	// Indicates whether Nutanix Guest Tools is enabled or not.
	IsEnabled pulumi.BoolPtrInput
	// Indicates whether Nutanix Guest Tools is installed on the VM or not.
	IsInstalled pulumi.BoolPtrInput
	// Indicates whether Nutanix Guest Tools ISO is inserted or not.
	IsIsoInserted pulumi.BoolPtrInput
	// Indicates whether the communication from VM to CVM is active or not.
	IsReachable pulumi.BoolPtrInput
	// Indicates whether the VM mobility drivers are installed on the VM or not.
	IsVmMobilityDriversInstalled pulumi.BoolPtrInput
	// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
	IsVssSnapshotCapable pulumi.BoolPtrInput
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference NgtUpgradeV2RebootPreferencePtrInput
	// Version of Nutanix Guest Tools installed on the VM.
	Version pulumi.StringPtrInput
}

func (NgtUpgradeV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*ngtUpgradeV2State)(nil)).Elem()
}

type ngtUpgradeV2Args struct {
	// uuid of the Virtual Machine.
	ExtId string `pulumi:"extId"`
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference *NgtUpgradeV2RebootPreference `pulumi:"rebootPreference"`
}

// The set of arguments for constructing a NgtUpgradeV2 resource.
type NgtUpgradeV2Args struct {
	// uuid of the Virtual Machine.
	ExtId pulumi.StringInput
	// The restart schedule after installing or upgrading Nutanix Guest Tools.
	RebootPreference NgtUpgradeV2RebootPreferencePtrInput
}

func (NgtUpgradeV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ngtUpgradeV2Args)(nil)).Elem()
}

type NgtUpgradeV2Input interface {
	pulumi.Input

	ToNgtUpgradeV2Output() NgtUpgradeV2Output
	ToNgtUpgradeV2OutputWithContext(ctx context.Context) NgtUpgradeV2Output
}

func (*NgtUpgradeV2) ElementType() reflect.Type {
	return reflect.TypeOf((**NgtUpgradeV2)(nil)).Elem()
}

func (i *NgtUpgradeV2) ToNgtUpgradeV2Output() NgtUpgradeV2Output {
	return i.ToNgtUpgradeV2OutputWithContext(context.Background())
}

func (i *NgtUpgradeV2) ToNgtUpgradeV2OutputWithContext(ctx context.Context) NgtUpgradeV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(NgtUpgradeV2Output)
}

// NgtUpgradeV2ArrayInput is an input type that accepts NgtUpgradeV2Array and NgtUpgradeV2ArrayOutput values.
// You can construct a concrete instance of `NgtUpgradeV2ArrayInput` via:
//
//	NgtUpgradeV2Array{ NgtUpgradeV2Args{...} }
type NgtUpgradeV2ArrayInput interface {
	pulumi.Input

	ToNgtUpgradeV2ArrayOutput() NgtUpgradeV2ArrayOutput
	ToNgtUpgradeV2ArrayOutputWithContext(context.Context) NgtUpgradeV2ArrayOutput
}

type NgtUpgradeV2Array []NgtUpgradeV2Input

func (NgtUpgradeV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgtUpgradeV2)(nil)).Elem()
}

func (i NgtUpgradeV2Array) ToNgtUpgradeV2ArrayOutput() NgtUpgradeV2ArrayOutput {
	return i.ToNgtUpgradeV2ArrayOutputWithContext(context.Background())
}

func (i NgtUpgradeV2Array) ToNgtUpgradeV2ArrayOutputWithContext(ctx context.Context) NgtUpgradeV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgtUpgradeV2ArrayOutput)
}

// NgtUpgradeV2MapInput is an input type that accepts NgtUpgradeV2Map and NgtUpgradeV2MapOutput values.
// You can construct a concrete instance of `NgtUpgradeV2MapInput` via:
//
//	NgtUpgradeV2Map{ "key": NgtUpgradeV2Args{...} }
type NgtUpgradeV2MapInput interface {
	pulumi.Input

	ToNgtUpgradeV2MapOutput() NgtUpgradeV2MapOutput
	ToNgtUpgradeV2MapOutputWithContext(context.Context) NgtUpgradeV2MapOutput
}

type NgtUpgradeV2Map map[string]NgtUpgradeV2Input

func (NgtUpgradeV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgtUpgradeV2)(nil)).Elem()
}

func (i NgtUpgradeV2Map) ToNgtUpgradeV2MapOutput() NgtUpgradeV2MapOutput {
	return i.ToNgtUpgradeV2MapOutputWithContext(context.Background())
}

func (i NgtUpgradeV2Map) ToNgtUpgradeV2MapOutputWithContext(ctx context.Context) NgtUpgradeV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgtUpgradeV2MapOutput)
}

type NgtUpgradeV2Output struct{ *pulumi.OutputState }

func (NgtUpgradeV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**NgtUpgradeV2)(nil)).Elem()
}

func (o NgtUpgradeV2Output) ToNgtUpgradeV2Output() NgtUpgradeV2Output {
	return o
}

func (o NgtUpgradeV2Output) ToNgtUpgradeV2OutputWithContext(ctx context.Context) NgtUpgradeV2Output {
	return o
}

// Version of Nutanix Guest Tools available on the cluster.
func (o NgtUpgradeV2Output) AvailableVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.StringOutput { return v.AvailableVersion }).(pulumi.StringOutput)
}

// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
func (o NgtUpgradeV2Output) Capablities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.StringArrayOutput { return v.Capablities }).(pulumi.StringArrayOutput)
}

// uuid of the Virtual Machine.
func (o NgtUpgradeV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Version of the operating system on the VM.
func (o NgtUpgradeV2Output) GuestOsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.StringOutput { return v.GuestOsVersion }).(pulumi.StringOutput)
}

// Indicates whether Nutanix Guest Tools is enabled or not.
func (o NgtUpgradeV2Output) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Indicates whether Nutanix Guest Tools is installed on the VM or not.
func (o NgtUpgradeV2Output) IsInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.BoolOutput { return v.IsInstalled }).(pulumi.BoolOutput)
}

// Indicates whether Nutanix Guest Tools ISO is inserted or not.
func (o NgtUpgradeV2Output) IsIsoInserted() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.BoolOutput { return v.IsIsoInserted }).(pulumi.BoolOutput)
}

// Indicates whether the communication from VM to CVM is active or not.
func (o NgtUpgradeV2Output) IsReachable() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.BoolOutput { return v.IsReachable }).(pulumi.BoolOutput)
}

// Indicates whether the VM mobility drivers are installed on the VM or not.
func (o NgtUpgradeV2Output) IsVmMobilityDriversInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.BoolOutput { return v.IsVmMobilityDriversInstalled }).(pulumi.BoolOutput)
}

// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
func (o NgtUpgradeV2Output) IsVssSnapshotCapable() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.BoolOutput { return v.IsVssSnapshotCapable }).(pulumi.BoolOutput)
}

// The restart schedule after installing or upgrading Nutanix Guest Tools.
func (o NgtUpgradeV2Output) RebootPreference() NgtUpgradeV2RebootPreferencePtrOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) NgtUpgradeV2RebootPreferencePtrOutput { return v.RebootPreference }).(NgtUpgradeV2RebootPreferencePtrOutput)
}

// Version of Nutanix Guest Tools installed on the VM.
func (o NgtUpgradeV2Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NgtUpgradeV2) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type NgtUpgradeV2ArrayOutput struct{ *pulumi.OutputState }

func (NgtUpgradeV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgtUpgradeV2)(nil)).Elem()
}

func (o NgtUpgradeV2ArrayOutput) ToNgtUpgradeV2ArrayOutput() NgtUpgradeV2ArrayOutput {
	return o
}

func (o NgtUpgradeV2ArrayOutput) ToNgtUpgradeV2ArrayOutputWithContext(ctx context.Context) NgtUpgradeV2ArrayOutput {
	return o
}

func (o NgtUpgradeV2ArrayOutput) Index(i pulumi.IntInput) NgtUpgradeV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgtUpgradeV2 {
		return vs[0].([]*NgtUpgradeV2)[vs[1].(int)]
	}).(NgtUpgradeV2Output)
}

type NgtUpgradeV2MapOutput struct{ *pulumi.OutputState }

func (NgtUpgradeV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgtUpgradeV2)(nil)).Elem()
}

func (o NgtUpgradeV2MapOutput) ToNgtUpgradeV2MapOutput() NgtUpgradeV2MapOutput {
	return o
}

func (o NgtUpgradeV2MapOutput) ToNgtUpgradeV2MapOutputWithContext(ctx context.Context) NgtUpgradeV2MapOutput {
	return o
}

func (o NgtUpgradeV2MapOutput) MapIndex(k pulumi.StringInput) NgtUpgradeV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgtUpgradeV2 {
		return vs[0].(map[string]*NgtUpgradeV2)[vs[1].(string)]
	}).(NgtUpgradeV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgtUpgradeV2Input)(nil)).Elem(), &NgtUpgradeV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgtUpgradeV2ArrayInput)(nil)).Elem(), NgtUpgradeV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgtUpgradeV2MapInput)(nil)).Elem(), NgtUpgradeV2Map{})
	pulumi.RegisterOutputType(NgtUpgradeV2Output{})
	pulumi.RegisterOutputType(NgtUpgradeV2ArrayOutput{})
	pulumi.RegisterOutputType(NgtUpgradeV2MapOutput{})
}
