// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a datasource to retrieve a user based on the input parameters.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("nutanix:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	Categories       []GetUserCategory `pulumi:"categories"`
	OwnerReference   map[string]string `pulumi:"ownerReference"`
	ProjectReference map[string]string `pulumi:"projectReference"`
	UserId           *string           `pulumi:"userId"`
	UserName         *string           `pulumi:"userName"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	AccessControlPolicyReferenceLists []GetUserAccessControlPolicyReferenceList `pulumi:"accessControlPolicyReferenceLists"`
	// The version of the API.
	// * `state`: - The state of the entity.
	// * `name`: - The name of the user.
	// * `userType`: - The name of the user.
	// * `displayName`: - The display name of the user (common name) provided by the directory service.
	// * `projectReferenceList`: - A list of projects the user is part of. See #reference for more details.
	// * `accessControlPolicyReferenceList`: - List of ACP references. See #reference for more details.
	// * `directoryServiceUser`: - (Optional) The directory service user configuration. See below for more information.
	// * `identityProviderUser`: - (Optional) (Optional) The identity provider user configuration. See below for more information.
	// * `categories`: - (Optional) Categories for the Access Control Policy.
	// * `projectReference`: - (Optional) The reference to a project.
	// * `ownerReference`: - (Optional) The reference to a user.
	ApiVersion            string                        `pulumi:"apiVersion"`
	Categories            []GetUserCategory             `pulumi:"categories"`
	DirectoryServiceUsers []GetUserDirectoryServiceUser `pulumi:"directoryServiceUsers"`
	DisplayName           string                        `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                        `pulumi:"id"`
	IdentityProviderUsers []GetUserIdentityProviderUser `pulumi:"identityProviderUsers"`
	Metadata              map[string]string             `pulumi:"metadata"`
	OwnerReference        map[string]string             `pulumi:"ownerReference"`
	ProjectReference      map[string]string             `pulumi:"projectReference"`
	ProjectReferenceLists []GetUserProjectReferenceList `pulumi:"projectReferenceLists"`
	State                 string                        `pulumi:"state"`
	UserId                *string                       `pulumi:"userId"`
	UserName              *string                       `pulumi:"userName"`
	UserType              string                        `pulumi:"userType"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	Categories       GetUserCategoryArrayInput `pulumi:"categories"`
	OwnerReference   pulumi.StringMapInput     `pulumi:"ownerReference"`
	ProjectReference pulumi.StringMapInput     `pulumi:"projectReference"`
	UserId           pulumi.StringPtrInput     `pulumi:"userId"`
	UserName         pulumi.StringPtrInput     `pulumi:"userName"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) AccessControlPolicyReferenceLists() GetUserAccessControlPolicyReferenceListArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserAccessControlPolicyReferenceList {
		return v.AccessControlPolicyReferenceLists
	}).(GetUserAccessControlPolicyReferenceListArrayOutput)
}

// The version of the API.
// * `state`: - The state of the entity.
// * `name`: - The name of the user.
// * `userType`: - The name of the user.
// * `displayName`: - The display name of the user (common name) provided by the directory service.
// * `projectReferenceList`: - A list of projects the user is part of. See #reference for more details.
// * `accessControlPolicyReferenceList`: - List of ACP references. See #reference for more details.
// * `directoryServiceUser`: - (Optional) The directory service user configuration. See below for more information.
// * `identityProviderUser`: - (Optional) (Optional) The identity provider user configuration. See below for more information.
// * `categories`: - (Optional) Categories for the Access Control Policy.
// * `projectReference`: - (Optional) The reference to a project.
// * `ownerReference`: - (Optional) The reference to a user.
func (o LookupUserResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Categories() GetUserCategoryArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserCategory { return v.Categories }).(GetUserCategoryArrayOutput)
}

func (o LookupUserResultOutput) DirectoryServiceUsers() GetUserDirectoryServiceUserArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserDirectoryServiceUser { return v.DirectoryServiceUsers }).(GetUserDirectoryServiceUserArrayOutput)
}

func (o LookupUserResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) IdentityProviderUsers() GetUserIdentityProviderUserArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserIdentityProviderUser { return v.IdentityProviderUsers }).(GetUserIdentityProviderUserArrayOutput)
}

func (o LookupUserResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o LookupUserResultOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserResult) map[string]string { return v.OwnerReference }).(pulumi.StringMapOutput)
}

func (o LookupUserResultOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserResult) map[string]string { return v.ProjectReference }).(pulumi.StringMapOutput)
}

func (o LookupUserResultOutput) ProjectReferenceLists() GetUserProjectReferenceListArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserProjectReferenceList { return v.ProjectReferenceLists }).(GetUserProjectReferenceListArrayOutput)
}

func (o LookupUserResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
