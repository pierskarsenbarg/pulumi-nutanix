// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get LCM configuration.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.LookupLcmConfigV2(ctx, &nutanix.LookupLcmConfigV2Args{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nutanix.LookupLcmConfigV2(ctx, &nutanix.LookupLcmConfigV2Args{
//				XClusterId: pulumi.StringRef("0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLcmConfigV2(ctx *pulumi.Context, args *LookupLcmConfigV2Args, opts ...pulumi.InvokeOption) (*LookupLcmConfigV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLcmConfigV2Result
	err := ctx.Invoke("nutanix:index/getLcmConfigV2:getLcmConfigV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLcmConfigV2.
type LookupLcmConfigV2Args struct {
	// Cluster uuid on which the resource is present or operation is being performed.
	XClusterId *string `pulumi:"xClusterId"`
}

// A collection of values returned by getLcmConfigV2.
type LookupLcmConfigV2Result struct {
	// The scheduled time in "%H:%M" 24-hour format of the next inventory execution. Used when autoInventoryEnabled is set to True. The default schedule time is 03:00(AM).
	AutoInventorySchedule string `pulumi:"autoInventorySchedule"`
	// This field indicates whether LCM framework on the cluster is running in connected-site mode or darksite mode. Values are :
	// - `CONNECTED_SITE`: In connected-site, LCM on the cluster has internet connectivity to reach configured portal for downloading LCM modules/bundles etc.
	// - `DARKSITE_DIRECT_UPLOAD`: LCM on the cluster does not have external connectivity and will have a facility to upload darksite bundles through LCM.
	// - `DARKSITE_WEB_SERVER`: LCM on the cluster does not have external connectivity and will have a connection to darksite webserver maintained by the customer.
	ConnectivityType string `pulumi:"connectivityType"`
	// List of entities for which One-Click upgrades are not available.
	DeprecatedSoftwareEntities []string `pulumi:"deprecatedSoftwareEntities"`
	// User friendly display version of LCM installed on the cluster.
	DisplayVersion string `pulumi:"displayVersion"`
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId string `pulumi:"extId"`
	// Indicates if LCM is enabled to auto-upgrade products. The default value is False.
	HasModuleAutoUpgradeEnabled bool `pulumi:"hasModuleAutoUpgradeEnabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates if the auto inventory operation is enabled. The default value is set to False.
	IsAutoInventoryEnabled bool `pulumi:"isAutoInventoryEnabled"`
	// Indicates if the bundle is uploaded or not.
	IsFrameworkBundleUploaded bool `pulumi:"isFrameworkBundleUploaded"`
	// Indicates if the LCM URL has HTTPS enabled. The default value is True.
	IsHttpsEnabled bool `pulumi:"isHttpsEnabled"`
	// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []GetLcmConfigV2Link `pulumi:"links"`
	// List of entities for which One-Click upgrades are supported.
	SupportedSoftwareEntities []string `pulumi:"supportedSoftwareEntities"`
	// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
	TenantId string `pulumi:"tenantId"`
	// URL of the LCM repository.
	Url string `pulumi:"url"`
	// LCM version installed on the cluster.
	Version    string  `pulumi:"version"`
	XClusterId *string `pulumi:"xClusterId"`
}

func LookupLcmConfigV2Output(ctx *pulumi.Context, args LookupLcmConfigV2OutputArgs, opts ...pulumi.InvokeOption) LookupLcmConfigV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLcmConfigV2ResultOutput, error) {
			args := v.(LookupLcmConfigV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getLcmConfigV2:getLcmConfigV2", args, LookupLcmConfigV2ResultOutput{}, options).(LookupLcmConfigV2ResultOutput), nil
		}).(LookupLcmConfigV2ResultOutput)
}

// A collection of arguments for invoking getLcmConfigV2.
type LookupLcmConfigV2OutputArgs struct {
	// Cluster uuid on which the resource is present or operation is being performed.
	XClusterId pulumi.StringPtrInput `pulumi:"xClusterId"`
}

func (LookupLcmConfigV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLcmConfigV2Args)(nil)).Elem()
}

// A collection of values returned by getLcmConfigV2.
type LookupLcmConfigV2ResultOutput struct{ *pulumi.OutputState }

func (LookupLcmConfigV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLcmConfigV2Result)(nil)).Elem()
}

func (o LookupLcmConfigV2ResultOutput) ToLookupLcmConfigV2ResultOutput() LookupLcmConfigV2ResultOutput {
	return o
}

func (o LookupLcmConfigV2ResultOutput) ToLookupLcmConfigV2ResultOutputWithContext(ctx context.Context) LookupLcmConfigV2ResultOutput {
	return o
}

// The scheduled time in "%H:%M" 24-hour format of the next inventory execution. Used when autoInventoryEnabled is set to True. The default schedule time is 03:00(AM).
func (o LookupLcmConfigV2ResultOutput) AutoInventorySchedule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.AutoInventorySchedule }).(pulumi.StringOutput)
}

// This field indicates whether LCM framework on the cluster is running in connected-site mode or darksite mode. Values are :
// - `CONNECTED_SITE`: In connected-site, LCM on the cluster has internet connectivity to reach configured portal for downloading LCM modules/bundles etc.
// - `DARKSITE_DIRECT_UPLOAD`: LCM on the cluster does not have external connectivity and will have a facility to upload darksite bundles through LCM.
// - `DARKSITE_WEB_SERVER`: LCM on the cluster does not have external connectivity and will have a connection to darksite webserver maintained by the customer.
func (o LookupLcmConfigV2ResultOutput) ConnectivityType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.ConnectivityType }).(pulumi.StringOutput)
}

// List of entities for which One-Click upgrades are not available.
func (o LookupLcmConfigV2ResultOutput) DeprecatedSoftwareEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) []string { return v.DeprecatedSoftwareEntities }).(pulumi.StringArrayOutput)
}

// User friendly display version of LCM installed on the cluster.
func (o LookupLcmConfigV2ResultOutput) DisplayVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.DisplayVersion }).(pulumi.StringOutput)
}

// A globally unique identifier of an instance that is suitable for external consumption.
func (o LookupLcmConfigV2ResultOutput) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.ExtId }).(pulumi.StringOutput)
}

// Indicates if LCM is enabled to auto-upgrade products. The default value is False.
func (o LookupLcmConfigV2ResultOutput) HasModuleAutoUpgradeEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) bool { return v.HasModuleAutoUpgradeEnabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLcmConfigV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates if the auto inventory operation is enabled. The default value is set to False.
func (o LookupLcmConfigV2ResultOutput) IsAutoInventoryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) bool { return v.IsAutoInventoryEnabled }).(pulumi.BoolOutput)
}

// Indicates if the bundle is uploaded or not.
func (o LookupLcmConfigV2ResultOutput) IsFrameworkBundleUploaded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) bool { return v.IsFrameworkBundleUploaded }).(pulumi.BoolOutput)
}

// Indicates if the LCM URL has HTTPS enabled. The default value is True.
func (o LookupLcmConfigV2ResultOutput) IsHttpsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) bool { return v.IsHttpsEnabled }).(pulumi.BoolOutput)
}

// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o LookupLcmConfigV2ResultOutput) Links() GetLcmConfigV2LinkArrayOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) []GetLcmConfigV2Link { return v.Links }).(GetLcmConfigV2LinkArrayOutput)
}

// List of entities for which One-Click upgrades are supported.
func (o LookupLcmConfigV2ResultOutput) SupportedSoftwareEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) []string { return v.SupportedSoftwareEntities }).(pulumi.StringArrayOutput)
}

// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
func (o LookupLcmConfigV2ResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.TenantId }).(pulumi.StringOutput)
}

// URL of the LCM repository.
func (o LookupLcmConfigV2ResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.Url }).(pulumi.StringOutput)
}

// LCM version installed on the cluster.
func (o LookupLcmConfigV2ResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) string { return v.Version }).(pulumi.StringOutput)
}

func (o LookupLcmConfigV2ResultOutput) XClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLcmConfigV2Result) *string { return v.XClusterId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLcmConfigV2ResultOutput{})
}
