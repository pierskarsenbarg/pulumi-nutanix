// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a time machine present in Nutanix Database Service
func GetNdbTimeMachine(ctx *pulumi.Context, args *GetNdbTimeMachineArgs, opts ...pulumi.InvokeOption) (*GetNdbTimeMachineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNdbTimeMachineResult
	err := ctx.Invoke("nutanix:index/getNdbTimeMachine:getNdbTimeMachine", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbTimeMachine.
type GetNdbTimeMachineArgs struct {
	// tags
	Tags []GetNdbTimeMachineTag `pulumi:"tags"`
	// time machine id
	TimeMachineId *string `pulumi:"timeMachineId"`
	// time machine name
	TimeMachineName *string `pulumi:"timeMachineName"`
}

// A collection of values returned by getNdbTimeMachine.
type GetNdbTimeMachineResult struct {
	// access level to time machines
	AccessLevel string `pulumi:"accessLevel"`
	// category of time machine
	Category string `pulumi:"category"`
	// clone time machine or not
	Clone bool `pulumi:"clone"`
	// clone info
	Clones string `pulumi:"clones"`
	// clustered or not
	Clustered bool `pulumi:"clustered"`
	// database info
	Database string `pulumi:"database"`
	// database id
	DatabaseId string `pulumi:"databaseId"`
	// date created
	DateCreated string `pulumi:"dateCreated"`
	// date modified
	DateModified string `pulumi:"dateModified"`
	// time machine description
	Description string `pulumi:"description"`
	// ea status of time machine
	EaStatus string `pulumi:"eaStatus"`
	// time machine id
	Id       string `pulumi:"id"`
	Internal bool   `pulumi:"internal"`
	// Metric info
	Metric string `pulumi:"metric"`
	// time machine name
	Name    string `pulumi:"name"`
	OwnerId string `pulumi:"ownerId"`
	// properties of time machines
	Properties []GetNdbTimeMachineProperty `pulumi:"properties"`
	// schedule id
	ScheduleId string `pulumi:"scheduleId"`
	// schedule info
	Schedules []GetNdbTimeMachineSchedule `pulumi:"schedules"`
	// scope
	Scope string `pulumi:"scope"`
	// sla id
	SlaId string `pulumi:"slaId"`
	// sla update in progress
	SlaUpdateInProgress bool `pulumi:"slaUpdateInProgress"`
	// sla update metadata
	SlaUpdateMetadata string `pulumi:"slaUpdateMetadata"`
	// sla info
	Slas []GetNdbTimeMachineSla `pulumi:"slas"`
	// source clusters
	SourceNxClusters []string `pulumi:"sourceNxClusters"`
	// status of time machine
	Status string `pulumi:"status"`
	// tags
	Tags            []GetNdbTimeMachineTag `pulumi:"tags"`
	TimeMachineId   *string                `pulumi:"timeMachineId"`
	TimeMachineName *string                `pulumi:"timeMachineName"`
	// type of time machine
	Type string `pulumi:"type"`
}

func GetNdbTimeMachineOutput(ctx *pulumi.Context, args GetNdbTimeMachineOutputArgs, opts ...pulumi.InvokeOption) GetNdbTimeMachineResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNdbTimeMachineResult, error) {
			args := v.(GetNdbTimeMachineArgs)
			r, err := GetNdbTimeMachine(ctx, &args, opts...)
			var s GetNdbTimeMachineResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNdbTimeMachineResultOutput)
}

// A collection of arguments for invoking getNdbTimeMachine.
type GetNdbTimeMachineOutputArgs struct {
	// tags
	Tags GetNdbTimeMachineTagArrayInput `pulumi:"tags"`
	// time machine id
	TimeMachineId pulumi.StringPtrInput `pulumi:"timeMachineId"`
	// time machine name
	TimeMachineName pulumi.StringPtrInput `pulumi:"timeMachineName"`
}

func (GetNdbTimeMachineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbTimeMachineArgs)(nil)).Elem()
}

// A collection of values returned by getNdbTimeMachine.
type GetNdbTimeMachineResultOutput struct{ *pulumi.OutputState }

func (GetNdbTimeMachineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNdbTimeMachineResult)(nil)).Elem()
}

func (o GetNdbTimeMachineResultOutput) ToGetNdbTimeMachineResultOutput() GetNdbTimeMachineResultOutput {
	return o
}

func (o GetNdbTimeMachineResultOutput) ToGetNdbTimeMachineResultOutputWithContext(ctx context.Context) GetNdbTimeMachineResultOutput {
	return o
}

// access level to time machines
func (o GetNdbTimeMachineResultOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// category of time machine
func (o GetNdbTimeMachineResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Category }).(pulumi.StringOutput)
}

// clone time machine or not
func (o GetNdbTimeMachineResultOutput) Clone() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) bool { return v.Clone }).(pulumi.BoolOutput)
}

// clone info
func (o GetNdbTimeMachineResultOutput) Clones() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Clones }).(pulumi.StringOutput)
}

// clustered or not
func (o GetNdbTimeMachineResultOutput) Clustered() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) bool { return v.Clustered }).(pulumi.BoolOutput)
}

// database info
func (o GetNdbTimeMachineResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Database }).(pulumi.StringOutput)
}

// database id
func (o GetNdbTimeMachineResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// date created
func (o GetNdbTimeMachineResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

// date modified
func (o GetNdbTimeMachineResultOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.DateModified }).(pulumi.StringOutput)
}

// time machine description
func (o GetNdbTimeMachineResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Description }).(pulumi.StringOutput)
}

// ea status of time machine
func (o GetNdbTimeMachineResultOutput) EaStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.EaStatus }).(pulumi.StringOutput)
}

// time machine id
func (o GetNdbTimeMachineResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNdbTimeMachineResultOutput) Internal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) bool { return v.Internal }).(pulumi.BoolOutput)
}

// Metric info
func (o GetNdbTimeMachineResultOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Metric }).(pulumi.StringOutput)
}

// time machine name
func (o GetNdbTimeMachineResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNdbTimeMachineResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

// properties of time machines
func (o GetNdbTimeMachineResultOutput) Properties() GetNdbTimeMachinePropertyArrayOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) []GetNdbTimeMachineProperty { return v.Properties }).(GetNdbTimeMachinePropertyArrayOutput)
}

// schedule id
func (o GetNdbTimeMachineResultOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.ScheduleId }).(pulumi.StringOutput)
}

// schedule info
func (o GetNdbTimeMachineResultOutput) Schedules() GetNdbTimeMachineScheduleArrayOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) []GetNdbTimeMachineSchedule { return v.Schedules }).(GetNdbTimeMachineScheduleArrayOutput)
}

// scope
func (o GetNdbTimeMachineResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Scope }).(pulumi.StringOutput)
}

// sla id
func (o GetNdbTimeMachineResultOutput) SlaId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.SlaId }).(pulumi.StringOutput)
}

// sla update in progress
func (o GetNdbTimeMachineResultOutput) SlaUpdateInProgress() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) bool { return v.SlaUpdateInProgress }).(pulumi.BoolOutput)
}

// sla update metadata
func (o GetNdbTimeMachineResultOutput) SlaUpdateMetadata() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.SlaUpdateMetadata }).(pulumi.StringOutput)
}

// sla info
func (o GetNdbTimeMachineResultOutput) Slas() GetNdbTimeMachineSlaArrayOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) []GetNdbTimeMachineSla { return v.Slas }).(GetNdbTimeMachineSlaArrayOutput)
}

// source clusters
func (o GetNdbTimeMachineResultOutput) SourceNxClusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) []string { return v.SourceNxClusters }).(pulumi.StringArrayOutput)
}

// status of time machine
func (o GetNdbTimeMachineResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Status }).(pulumi.StringOutput)
}

// tags
func (o GetNdbTimeMachineResultOutput) Tags() GetNdbTimeMachineTagArrayOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) []GetNdbTimeMachineTag { return v.Tags }).(GetNdbTimeMachineTagArrayOutput)
}

func (o GetNdbTimeMachineResultOutput) TimeMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) *string { return v.TimeMachineId }).(pulumi.StringPtrOutput)
}

func (o GetNdbTimeMachineResultOutput) TimeMachineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) *string { return v.TimeMachineName }).(pulumi.StringPtrOutput)
}

// type of time machine
func (o GetNdbTimeMachineResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNdbTimeMachineResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNdbTimeMachineResultOutput{})
}
