// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create an service Group
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Add Service  group. with TCP and UDP
//			_, err := nutanix.NewServiceGroupsV2(ctx, "tcp-udp-service", &nutanix.ServiceGroupsV2Args{
//				Description: pulumi.String("service group description"),
//				TcpServices: nutanix.ServiceGroupsV2TcpServiceArray{
//					&nutanix.ServiceGroupsV2TcpServiceArgs{
//						EndPort:   pulumi.Int(232),
//						StartPort: pulumi.Int(232),
//					},
//				},
//				UdpServices: nutanix.ServiceGroupsV2UdpServiceArray{
//					&nutanix.ServiceGroupsV2UdpServiceArgs{
//						EndPort:   pulumi.Int(232),
//						StartPort: pulumi.Int(232),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// service group with ICMP
//			_, err = nutanix.NewServiceGroupsV2(ctx, "icmp-service", &nutanix.ServiceGroupsV2Args{
//				Description: pulumi.String("service group description"),
//				IcmpServices: nutanix.ServiceGroupsV2IcmpServiceArray{
//					&nutanix.ServiceGroupsV2IcmpServiceArgs{
//						Code: pulumi.Int(0),
//						Type: pulumi.Int(8),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// service group with All TCP, UDP and ICMP
//			_, err = nutanix.NewServiceGroupsV2(ctx, "all-service", &nutanix.ServiceGroupsV2Args{
//				Description: pulumi.String("service group description"),
//				IcmpServices: nutanix.ServiceGroupsV2IcmpServiceArray{
//					&nutanix.ServiceGroupsV2IcmpServiceArgs{
//						Code: pulumi.Int(0),
//						Type: pulumi.Int(8),
//					},
//				},
//				TcpServices: nutanix.ServiceGroupsV2TcpServiceArray{
//					&nutanix.ServiceGroupsV2TcpServiceArgs{
//						EndPort:   pulumi.Int(232),
//						StartPort: pulumi.Int(232),
//					},
//				},
//				UdpServices: nutanix.ServiceGroupsV2UdpServiceArray{
//					&nutanix.ServiceGroupsV2UdpServiceArgs{
//						EndPort:   pulumi.Int(232),
//						StartPort: pulumi.Int(232),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServiceGroupsV2 struct {
	pulumi.CustomResourceState

	// created by.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Description of the service group
	Description pulumi.StringOutput `pulumi:"description"`
	// address group uuid.
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// Icmp Type Code List.
	IcmpServices ServiceGroupsV2IcmpServiceArrayOutput `pulumi:"icmpServices"`
	// Service Group is system defined or not.
	IsSystemDefined pulumi.BoolOutput `pulumi:"isSystemDefined"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links ServiceGroupsV2LinkArrayOutput `pulumi:"links"`
	// Name of the service group
	Name pulumi.StringOutput `pulumi:"name"`
	// Reference to policy associated with Address Group.
	PolicyReferences pulumi.StringArrayOutput `pulumi:"policyReferences"`
	// List of TCP ports in the service.
	TcpServices ServiceGroupsV2TcpServiceArrayOutput `pulumi:"tcpServices"`
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// List of UDP ports in the service.
	UdpServices ServiceGroupsV2UdpServiceArrayOutput `pulumi:"udpServices"`
}

// NewServiceGroupsV2 registers a new resource with the given unique name, arguments, and options.
func NewServiceGroupsV2(ctx *pulumi.Context,
	name string, args *ServiceGroupsV2Args, opts ...pulumi.ResourceOption) (*ServiceGroupsV2, error) {
	if args == nil {
		args = &ServiceGroupsV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceGroupsV2
	err := ctx.RegisterResource("nutanix:index/serviceGroupsV2:ServiceGroupsV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceGroupsV2 gets an existing ServiceGroupsV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceGroupsV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceGroupsV2State, opts ...pulumi.ResourceOption) (*ServiceGroupsV2, error) {
	var resource ServiceGroupsV2
	err := ctx.ReadResource("nutanix:index/serviceGroupsV2:ServiceGroupsV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceGroupsV2 resources.
type serviceGroupsV2State struct {
	// created by.
	CreatedBy *string `pulumi:"createdBy"`
	// Description of the service group
	Description *string `pulumi:"description"`
	// address group uuid.
	ExtId *string `pulumi:"extId"`
	// Icmp Type Code List.
	IcmpServices []ServiceGroupsV2IcmpService `pulumi:"icmpServices"`
	// Service Group is system defined or not.
	IsSystemDefined *bool `pulumi:"isSystemDefined"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []ServiceGroupsV2Link `pulumi:"links"`
	// Name of the service group
	Name *string `pulumi:"name"`
	// Reference to policy associated with Address Group.
	PolicyReferences []string `pulumi:"policyReferences"`
	// List of TCP ports in the service.
	TcpServices []ServiceGroupsV2TcpService `pulumi:"tcpServices"`
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId *string `pulumi:"tenantId"`
	// List of UDP ports in the service.
	UdpServices []ServiceGroupsV2UdpService `pulumi:"udpServices"`
}

type ServiceGroupsV2State struct {
	// created by.
	CreatedBy pulumi.StringPtrInput
	// Description of the service group
	Description pulumi.StringPtrInput
	// address group uuid.
	ExtId pulumi.StringPtrInput
	// Icmp Type Code List.
	IcmpServices ServiceGroupsV2IcmpServiceArrayInput
	// Service Group is system defined or not.
	IsSystemDefined pulumi.BoolPtrInput
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links ServiceGroupsV2LinkArrayInput
	// Name of the service group
	Name pulumi.StringPtrInput
	// Reference to policy associated with Address Group.
	PolicyReferences pulumi.StringArrayInput
	// List of TCP ports in the service.
	TcpServices ServiceGroupsV2TcpServiceArrayInput
	// A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringPtrInput
	// List of UDP ports in the service.
	UdpServices ServiceGroupsV2UdpServiceArrayInput
}

func (ServiceGroupsV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceGroupsV2State)(nil)).Elem()
}

type serviceGroupsV2Args struct {
	// Description of the service group
	Description *string `pulumi:"description"`
	// Icmp Type Code List.
	IcmpServices []ServiceGroupsV2IcmpService `pulumi:"icmpServices"`
	// Name of the service group
	Name *string `pulumi:"name"`
	// List of TCP ports in the service.
	TcpServices []ServiceGroupsV2TcpService `pulumi:"tcpServices"`
	// List of UDP ports in the service.
	UdpServices []ServiceGroupsV2UdpService `pulumi:"udpServices"`
}

// The set of arguments for constructing a ServiceGroupsV2 resource.
type ServiceGroupsV2Args struct {
	// Description of the service group
	Description pulumi.StringPtrInput
	// Icmp Type Code List.
	IcmpServices ServiceGroupsV2IcmpServiceArrayInput
	// Name of the service group
	Name pulumi.StringPtrInput
	// List of TCP ports in the service.
	TcpServices ServiceGroupsV2TcpServiceArrayInput
	// List of UDP ports in the service.
	UdpServices ServiceGroupsV2UdpServiceArrayInput
}

func (ServiceGroupsV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceGroupsV2Args)(nil)).Elem()
}

type ServiceGroupsV2Input interface {
	pulumi.Input

	ToServiceGroupsV2Output() ServiceGroupsV2Output
	ToServiceGroupsV2OutputWithContext(ctx context.Context) ServiceGroupsV2Output
}

func (*ServiceGroupsV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceGroupsV2)(nil)).Elem()
}

func (i *ServiceGroupsV2) ToServiceGroupsV2Output() ServiceGroupsV2Output {
	return i.ToServiceGroupsV2OutputWithContext(context.Background())
}

func (i *ServiceGroupsV2) ToServiceGroupsV2OutputWithContext(ctx context.Context) ServiceGroupsV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceGroupsV2Output)
}

// ServiceGroupsV2ArrayInput is an input type that accepts ServiceGroupsV2Array and ServiceGroupsV2ArrayOutput values.
// You can construct a concrete instance of `ServiceGroupsV2ArrayInput` via:
//
//	ServiceGroupsV2Array{ ServiceGroupsV2Args{...} }
type ServiceGroupsV2ArrayInput interface {
	pulumi.Input

	ToServiceGroupsV2ArrayOutput() ServiceGroupsV2ArrayOutput
	ToServiceGroupsV2ArrayOutputWithContext(context.Context) ServiceGroupsV2ArrayOutput
}

type ServiceGroupsV2Array []ServiceGroupsV2Input

func (ServiceGroupsV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceGroupsV2)(nil)).Elem()
}

func (i ServiceGroupsV2Array) ToServiceGroupsV2ArrayOutput() ServiceGroupsV2ArrayOutput {
	return i.ToServiceGroupsV2ArrayOutputWithContext(context.Background())
}

func (i ServiceGroupsV2Array) ToServiceGroupsV2ArrayOutputWithContext(ctx context.Context) ServiceGroupsV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceGroupsV2ArrayOutput)
}

// ServiceGroupsV2MapInput is an input type that accepts ServiceGroupsV2Map and ServiceGroupsV2MapOutput values.
// You can construct a concrete instance of `ServiceGroupsV2MapInput` via:
//
//	ServiceGroupsV2Map{ "key": ServiceGroupsV2Args{...} }
type ServiceGroupsV2MapInput interface {
	pulumi.Input

	ToServiceGroupsV2MapOutput() ServiceGroupsV2MapOutput
	ToServiceGroupsV2MapOutputWithContext(context.Context) ServiceGroupsV2MapOutput
}

type ServiceGroupsV2Map map[string]ServiceGroupsV2Input

func (ServiceGroupsV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceGroupsV2)(nil)).Elem()
}

func (i ServiceGroupsV2Map) ToServiceGroupsV2MapOutput() ServiceGroupsV2MapOutput {
	return i.ToServiceGroupsV2MapOutputWithContext(context.Background())
}

func (i ServiceGroupsV2Map) ToServiceGroupsV2MapOutputWithContext(ctx context.Context) ServiceGroupsV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceGroupsV2MapOutput)
}

type ServiceGroupsV2Output struct{ *pulumi.OutputState }

func (ServiceGroupsV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceGroupsV2)(nil)).Elem()
}

func (o ServiceGroupsV2Output) ToServiceGroupsV2Output() ServiceGroupsV2Output {
	return o
}

func (o ServiceGroupsV2Output) ToServiceGroupsV2OutputWithContext(ctx context.Context) ServiceGroupsV2Output {
	return o
}

// created by.
func (o ServiceGroupsV2Output) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of the service group
func (o ServiceGroupsV2Output) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// address group uuid.
func (o ServiceGroupsV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// Icmp Type Code List.
func (o ServiceGroupsV2Output) IcmpServices() ServiceGroupsV2IcmpServiceArrayOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) ServiceGroupsV2IcmpServiceArrayOutput { return v.IcmpServices }).(ServiceGroupsV2IcmpServiceArrayOutput)
}

// Service Group is system defined or not.
func (o ServiceGroupsV2Output) IsSystemDefined() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) pulumi.BoolOutput { return v.IsSystemDefined }).(pulumi.BoolOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o ServiceGroupsV2Output) Links() ServiceGroupsV2LinkArrayOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) ServiceGroupsV2LinkArrayOutput { return v.Links }).(ServiceGroupsV2LinkArrayOutput)
}

// Name of the service group
func (o ServiceGroupsV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Reference to policy associated with Address Group.
func (o ServiceGroupsV2Output) PolicyReferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) pulumi.StringArrayOutput { return v.PolicyReferences }).(pulumi.StringArrayOutput)
}

// List of TCP ports in the service.
func (o ServiceGroupsV2Output) TcpServices() ServiceGroupsV2TcpServiceArrayOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) ServiceGroupsV2TcpServiceArrayOutput { return v.TcpServices }).(ServiceGroupsV2TcpServiceArrayOutput)
}

// A globally unique identifier that represents the tenant that owns this entity.
func (o ServiceGroupsV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// List of UDP ports in the service.
func (o ServiceGroupsV2Output) UdpServices() ServiceGroupsV2UdpServiceArrayOutput {
	return o.ApplyT(func(v *ServiceGroupsV2) ServiceGroupsV2UdpServiceArrayOutput { return v.UdpServices }).(ServiceGroupsV2UdpServiceArrayOutput)
}

type ServiceGroupsV2ArrayOutput struct{ *pulumi.OutputState }

func (ServiceGroupsV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceGroupsV2)(nil)).Elem()
}

func (o ServiceGroupsV2ArrayOutput) ToServiceGroupsV2ArrayOutput() ServiceGroupsV2ArrayOutput {
	return o
}

func (o ServiceGroupsV2ArrayOutput) ToServiceGroupsV2ArrayOutputWithContext(ctx context.Context) ServiceGroupsV2ArrayOutput {
	return o
}

func (o ServiceGroupsV2ArrayOutput) Index(i pulumi.IntInput) ServiceGroupsV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceGroupsV2 {
		return vs[0].([]*ServiceGroupsV2)[vs[1].(int)]
	}).(ServiceGroupsV2Output)
}

type ServiceGroupsV2MapOutput struct{ *pulumi.OutputState }

func (ServiceGroupsV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceGroupsV2)(nil)).Elem()
}

func (o ServiceGroupsV2MapOutput) ToServiceGroupsV2MapOutput() ServiceGroupsV2MapOutput {
	return o
}

func (o ServiceGroupsV2MapOutput) ToServiceGroupsV2MapOutputWithContext(ctx context.Context) ServiceGroupsV2MapOutput {
	return o
}

func (o ServiceGroupsV2MapOutput) MapIndex(k pulumi.StringInput) ServiceGroupsV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceGroupsV2 {
		return vs[0].(map[string]*ServiceGroupsV2)[vs[1].(string)]
	}).(ServiceGroupsV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceGroupsV2Input)(nil)).Elem(), &ServiceGroupsV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceGroupsV2ArrayInput)(nil)).Elem(), ServiceGroupsV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceGroupsV2MapInput)(nil)).Elem(), ServiceGroupsV2Map{})
	pulumi.RegisterOutputType(ServiceGroupsV2Output{})
	pulumi.RegisterOutputType(ServiceGroupsV2ArrayOutput{})
	pulumi.RegisterOutputType(ServiceGroupsV2MapOutput{})
}
