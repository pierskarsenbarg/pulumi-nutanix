// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("nutanix:index/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	AdditionalFilters []GetSubnetAdditionalFilter `pulumi:"additionalFilters"`
	Categories        []GetSubnetCategory         `pulumi:"categories"`
	SubnetId          *string                     `pulumi:"subnetId"`
	SubnetName        *string                     `pulumi:"subnetName"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	AdditionalFilters         []GetSubnetAdditionalFilter `pulumi:"additionalFilters"`
	ApiVersion                string                      `pulumi:"apiVersion"`
	AvailabilityZoneReference map[string]string           `pulumi:"availabilityZoneReference"`
	Categories                []GetSubnetCategory         `pulumi:"categories"`
	ClusterName               string                      `pulumi:"clusterName"`
	ClusterUuid               string                      `pulumi:"clusterUuid"`
	DefaultGatewayIp          string                      `pulumi:"defaultGatewayIp"`
	Description               string                      `pulumi:"description"`
	DhcpDomainNameServerLists []string                    `pulumi:"dhcpDomainNameServerLists"`
	DhcpDomainSearchLists     []string                    `pulumi:"dhcpDomainSearchLists"`
	DhcpOptions               map[string]string           `pulumi:"dhcpOptions"`
	DhcpServerAddress         map[string]string           `pulumi:"dhcpServerAddress"`
	DhcpServerAddressPort     int                         `pulumi:"dhcpServerAddressPort"`
	EnableNat                 bool                        `pulumi:"enableNat"`
	// The provider-assigned unique ID for this managed resource.
	Id                            string                 `pulumi:"id"`
	IpConfigPoolListRanges        []string               `pulumi:"ipConfigPoolListRanges"`
	IsExternal                    bool                   `pulumi:"isExternal"`
	MessageLists                  []GetSubnetMessageList `pulumi:"messageLists"`
	Metadata                      map[string]string      `pulumi:"metadata"`
	Name                          string                 `pulumi:"name"`
	NetworkFunctionChainReference map[string]string      `pulumi:"networkFunctionChainReference"`
	OwnerReference                map[string]string      `pulumi:"ownerReference"`
	PrefixLength                  int                    `pulumi:"prefixLength"`
	ProjectReference              map[string]string      `pulumi:"projectReference"`
	State                         string                 `pulumi:"state"`
	SubnetId                      *string                `pulumi:"subnetId"`
	SubnetIp                      string                 `pulumi:"subnetIp"`
	SubnetName                    *string                `pulumi:"subnetName"`
	SubnetType                    string                 `pulumi:"subnetType"`
	VlanId                        int                    `pulumi:"vlanId"`
	VpcReference                  map[string]string      `pulumi:"vpcReference"`
	VswitchName                   string                 `pulumi:"vswitchName"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubnetResult, error) {
			args := v.(LookupSubnetArgs)
			r, err := LookupSubnet(ctx, &args, opts...)
			var s LookupSubnetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	AdditionalFilters GetSubnetAdditionalFilterArrayInput `pulumi:"additionalFilters"`
	Categories        GetSubnetCategoryArrayInput         `pulumi:"categories"`
	SubnetId          pulumi.StringPtrInput               `pulumi:"subnetId"`
	SubnetName        pulumi.StringPtrInput               `pulumi:"subnetName"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) AdditionalFilters() GetSubnetAdditionalFilterArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetAdditionalFilter { return v.AdditionalFilters }).(GetSubnetAdditionalFilterArrayOutput)
}

func (o LookupSubnetResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) AvailabilityZoneReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.AvailabilityZoneReference }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) Categories() GetSubnetCategoryArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetCategory { return v.Categories }).(GetSubnetCategoryArrayOutput)
}

func (o LookupSubnetResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.ClusterUuid }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DefaultGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.DefaultGatewayIp }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DhcpDomainNameServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []string { return v.DhcpDomainNameServerLists }).(pulumi.StringArrayOutput)
}

func (o LookupSubnetResultOutput) DhcpDomainSearchLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []string { return v.DhcpDomainSearchLists }).(pulumi.StringArrayOutput)
}

func (o LookupSubnetResultOutput) DhcpOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.DhcpOptions }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) DhcpServerAddress() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.DhcpServerAddress }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) DhcpServerAddressPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.DhcpServerAddressPort }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) EnableNat() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.EnableNat }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) IpConfigPoolListRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []string { return v.IpConfigPoolListRanges }).(pulumi.StringArrayOutput)
}

func (o LookupSubnetResultOutput) IsExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.IsExternal }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) MessageLists() GetSubnetMessageListArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetMessageList { return v.MessageLists }).(GetSubnetMessageListArrayOutput)
}

func (o LookupSubnetResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) NetworkFunctionChainReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.NetworkFunctionChainReference }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) OwnerReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.OwnerReference }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.PrefixLength }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) ProjectReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.ProjectReference }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o LookupSubnetResultOutput) SubnetIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SubnetIp }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) SubnetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetResult) *string { return v.SubnetName }).(pulumi.StringPtrOutput)
}

func (o LookupSubnetResultOutput) SubnetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SubnetType }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.VlanId }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) VpcReference() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.VpcReference }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) VswitchName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.VswitchName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
