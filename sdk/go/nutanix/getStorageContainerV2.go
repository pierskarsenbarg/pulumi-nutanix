// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a datasource to Fetch the configuration details of the existing Storage Container identified by the {containerExtId}.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetStorageContainerV2(ctx, &nutanix.GetStorageContainerV2Args{
//				ExtId: "1891fd3a-1ef7-4947-af56-9ee4b973c6fd",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetStorageContainerV2(ctx *pulumi.Context, args *GetStorageContainerV2Args, opts ...pulumi.InvokeOption) (*GetStorageContainerV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStorageContainerV2Result
	err := ctx.Invoke("nutanix:index/getStorageContainerV2:getStorageContainerV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStorageContainerV2.
type GetStorageContainerV2Args struct {
	// storage container UUID
	ExtId string `pulumi:"extId"`
}

// A collection of values returned by getStorageContainerV2.
type GetStorageContainerV2Result struct {
	// - Affinity host extId for RF 1 Storage Container.
	AffinityHostExtId string `pulumi:"affinityHostExtId"`
	// - Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
	CacheDeduplication string `pulumi:"cacheDeduplication"`
	// - ext id for the cluster owning the storage container.
	ClusterExtId string `pulumi:"clusterExtId"`
	// - Corresponding name of the Cluster owning the Storage Container instance.
	ClusterName string `pulumi:"clusterName"`
	// - The compression delay in seconds.
	CompressionDelaySecs int `pulumi:"compressionDelaySecs"`
	// - the storage container ext id
	ContainerExtId string `pulumi:"containerExtId"`
	// - Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
	ErasureCode string `pulumi:"erasureCode"`
	// - Delay in performing ErasureCode for the current Container instance.
	ErasureCodeDelaySecs int `pulumi:"erasureCodeDelaySecs"`
	// - the storage container uuid
	ExtId string `pulumi:"extId"`
	// - Indicates whether to prefer a higher Erasure Code fault domain.
	HasHigherEcFaultDomainPreference bool `pulumi:"hasHigherEcFaultDomainPreference"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// - Indicates whether the compression is enabled for the Container.
	IsCompressionEnabled bool `pulumi:"isCompressionEnabled"`
	// - Indicates whether the Container is encrypted or not.
	IsEncrypted bool `pulumi:"isEncrypted"`
	// - Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
	IsInlineEcEnabled bool `pulumi:"isInlineEcEnabled"`
	// - Indicates whether the Container is internal and is managed by Nutanix.
	IsInternal bool `pulumi:"isInternal"`
	// - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
	IsMarkedForRemoval bool `pulumi:"isMarkedForRemoval"`
	// - Indicates whether the NFS whitelist is inherited from global config.
	IsNfsWhitelistInherited bool `pulumi:"isNfsWhitelistInherited"`
	// - Indicates whether the Container instance has software encryption enabled.
	IsSoftwareEncryptionEnabled bool `pulumi:"isSoftwareEncryptionEnabled"`
	// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []GetStorageContainerV2Link `pulumi:"links"`
	// - Max capacity of the Container as defined by the user.
	LogicalAdvertisedCapacityBytes int `pulumi:"logicalAdvertisedCapacityBytes"`
	// - Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
	LogicalExplicitReservedCapacityBytes int `pulumi:"logicalExplicitReservedCapacityBytes"`
	// - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
	LogicalImplicitReservedCapacityBytes int `pulumi:"logicalImplicitReservedCapacityBytes"`
	// - Maximum physical capacity of the Storage Container in bytes.
	MaxCapacityBytes int `pulumi:"maxCapacityBytes"`
	// Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
	Name string `pulumi:"name"`
	// - List of NFS addresses which need to be whitelisted.
	NfsWhitelistAddresses []GetStorageContainerV2NfsWhitelistAddress `pulumi:"nfsWhitelistAddresses"`
	// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
	OnDiskDedup string `pulumi:"onDiskDedup"`
	// - owner ext id
	OwnerExtId string `pulumi:"ownerExtId"`
	// - Replication factor of the Storage Container.
	ReplicationFactor int `pulumi:"replicationFactor"`
	// - extId of the Storage Pool owning the Storage Container instance.
	StoragePoolExtId string `pulumi:"storagePoolExtId"`
	// - A globally unique identifier that represents the tenant that owns this entity.
	TenantId string `pulumi:"tenantId"`
}

func GetStorageContainerV2Output(ctx *pulumi.Context, args GetStorageContainerV2OutputArgs, opts ...pulumi.InvokeOption) GetStorageContainerV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetStorageContainerV2ResultOutput, error) {
			args := v.(GetStorageContainerV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getStorageContainerV2:getStorageContainerV2", args, GetStorageContainerV2ResultOutput{}, options).(GetStorageContainerV2ResultOutput), nil
		}).(GetStorageContainerV2ResultOutput)
}

// A collection of arguments for invoking getStorageContainerV2.
type GetStorageContainerV2OutputArgs struct {
	// storage container UUID
	ExtId pulumi.StringInput `pulumi:"extId"`
}

func (GetStorageContainerV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageContainerV2Args)(nil)).Elem()
}

// A collection of values returned by getStorageContainerV2.
type GetStorageContainerV2ResultOutput struct{ *pulumi.OutputState }

func (GetStorageContainerV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageContainerV2Result)(nil)).Elem()
}

func (o GetStorageContainerV2ResultOutput) ToGetStorageContainerV2ResultOutput() GetStorageContainerV2ResultOutput {
	return o
}

func (o GetStorageContainerV2ResultOutput) ToGetStorageContainerV2ResultOutputWithContext(ctx context.Context) GetStorageContainerV2ResultOutput {
	return o
}

// - Affinity host extId for RF 1 Storage Container.
func (o GetStorageContainerV2ResultOutput) AffinityHostExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.AffinityHostExtId }).(pulumi.StringOutput)
}

// - Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
func (o GetStorageContainerV2ResultOutput) CacheDeduplication() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.CacheDeduplication }).(pulumi.StringOutput)
}

// - ext id for the cluster owning the storage container.
func (o GetStorageContainerV2ResultOutput) ClusterExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.ClusterExtId }).(pulumi.StringOutput)
}

// - Corresponding name of the Cluster owning the Storage Container instance.
func (o GetStorageContainerV2ResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.ClusterName }).(pulumi.StringOutput)
}

// - The compression delay in seconds.
func (o GetStorageContainerV2ResultOutput) CompressionDelaySecs() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) int { return v.CompressionDelaySecs }).(pulumi.IntOutput)
}

// - the storage container ext id
func (o GetStorageContainerV2ResultOutput) ContainerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.ContainerExtId }).(pulumi.StringOutput)
}

// - Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
func (o GetStorageContainerV2ResultOutput) ErasureCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.ErasureCode }).(pulumi.StringOutput)
}

// - Delay in performing ErasureCode for the current Container instance.
func (o GetStorageContainerV2ResultOutput) ErasureCodeDelaySecs() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) int { return v.ErasureCodeDelaySecs }).(pulumi.IntOutput)
}

// - the storage container uuid
func (o GetStorageContainerV2ResultOutput) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.ExtId }).(pulumi.StringOutput)
}

// - Indicates whether to prefer a higher Erasure Code fault domain.
func (o GetStorageContainerV2ResultOutput) HasHigherEcFaultDomainPreference() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.HasHigherEcFaultDomainPreference }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetStorageContainerV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// - Indicates whether the compression is enabled for the Container.
func (o GetStorageContainerV2ResultOutput) IsCompressionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.IsCompressionEnabled }).(pulumi.BoolOutput)
}

// - Indicates whether the Container is encrypted or not.
func (o GetStorageContainerV2ResultOutput) IsEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.IsEncrypted }).(pulumi.BoolOutput)
}

// - Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
func (o GetStorageContainerV2ResultOutput) IsInlineEcEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.IsInlineEcEnabled }).(pulumi.BoolOutput)
}

// - Indicates whether the Container is internal and is managed by Nutanix.
func (o GetStorageContainerV2ResultOutput) IsInternal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.IsInternal }).(pulumi.BoolOutput)
}

// - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
func (o GetStorageContainerV2ResultOutput) IsMarkedForRemoval() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.IsMarkedForRemoval }).(pulumi.BoolOutput)
}

// - Indicates whether the NFS whitelist is inherited from global config.
func (o GetStorageContainerV2ResultOutput) IsNfsWhitelistInherited() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.IsNfsWhitelistInherited }).(pulumi.BoolOutput)
}

// - Indicates whether the Container instance has software encryption enabled.
func (o GetStorageContainerV2ResultOutput) IsSoftwareEncryptionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) bool { return v.IsSoftwareEncryptionEnabled }).(pulumi.BoolOutput)
}

// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o GetStorageContainerV2ResultOutput) Links() GetStorageContainerV2LinkArrayOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) []GetStorageContainerV2Link { return v.Links }).(GetStorageContainerV2LinkArrayOutput)
}

// - Max capacity of the Container as defined by the user.
func (o GetStorageContainerV2ResultOutput) LogicalAdvertisedCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) int { return v.LogicalAdvertisedCapacityBytes }).(pulumi.IntOutput)
}

// - Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
func (o GetStorageContainerV2ResultOutput) LogicalExplicitReservedCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) int { return v.LogicalExplicitReservedCapacityBytes }).(pulumi.IntOutput)
}

// - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
func (o GetStorageContainerV2ResultOutput) LogicalImplicitReservedCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) int { return v.LogicalImplicitReservedCapacityBytes }).(pulumi.IntOutput)
}

// - Maximum physical capacity of the Storage Container in bytes.
func (o GetStorageContainerV2ResultOutput) MaxCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) int { return v.MaxCapacityBytes }).(pulumi.IntOutput)
}

// Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
func (o GetStorageContainerV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.Name }).(pulumi.StringOutput)
}

// - List of NFS addresses which need to be whitelisted.
func (o GetStorageContainerV2ResultOutput) NfsWhitelistAddresses() GetStorageContainerV2NfsWhitelistAddressArrayOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) []GetStorageContainerV2NfsWhitelistAddress {
		return v.NfsWhitelistAddresses
	}).(GetStorageContainerV2NfsWhitelistAddressArrayOutput)
}

// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
func (o GetStorageContainerV2ResultOutput) OnDiskDedup() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.OnDiskDedup }).(pulumi.StringOutput)
}

// - owner ext id
func (o GetStorageContainerV2ResultOutput) OwnerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.OwnerExtId }).(pulumi.StringOutput)
}

// - Replication factor of the Storage Container.
func (o GetStorageContainerV2ResultOutput) ReplicationFactor() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) int { return v.ReplicationFactor }).(pulumi.IntOutput)
}

// - extId of the Storage Pool owning the Storage Container instance.
func (o GetStorageContainerV2ResultOutput) StoragePoolExtId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.StoragePoolExtId }).(pulumi.StringOutput)
}

// - A globally unique identifier that represents the tenant that owns this entity.
func (o GetStorageContainerV2ResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageContainerV2Result) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStorageContainerV2ResultOutput{})
}
