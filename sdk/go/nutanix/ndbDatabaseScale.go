// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to scale the database instance based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbDatabaseScale(ctx, "scale", &nutanix.NdbDatabaseScaleArgs{
//				ApplicationType: pulumi.String("{{ Application Type }}"),
//				DataStorageSize: pulumi.Int(1),
//				DatabaseUuid:    pulumi.String("{{ database_id }}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbDatabaseScale struct {
	pulumi.CustomResourceState

	// type of instance. eg: postgres_database
	ApplicationType pulumi.StringOutput `pulumi:"applicationType"`
	// whether instance is cloned or not
	Clone pulumi.BoolOutput `pulumi:"clone"`
	// data area (in GiB) to be added to the existing database.
	DataStorageSize pulumi.IntOutput `pulumi:"dataStorageSize"`
	// database cluster type
	DatabaseClusterType pulumi.StringOutput `pulumi:"databaseClusterType"`
	DatabaseInstanceId  pulumi.StringOutput `pulumi:"databaseInstanceId"`
	// name of database
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// database nodes associated with database instance
	DatabaseNodes NdbDatabaseScaleDatabaseNodeArrayOutput `pulumi:"databaseNodes"`
	// Database id
	DatabaseUuid pulumi.StringOutput `pulumi:"databaseUuid"`
	// type of database
	Databasetype pulumi.StringOutput `pulumi:"databasetype"`
	// date created for db instance
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// date modified for instance
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// dbserver logical cluster
	DbserverLogicalCluster pulumi.StringMapOutput `pulumi:"dbserverLogicalCluster"`
	// dbserver logical cluster id
	DbserverLogicalClusterId pulumi.StringOutput `pulumi:"dbserverLogicalClusterId"`
	// description of database instance
	Description pulumi.StringOutput `pulumi:"description"`
	// info of instance
	Infos NdbDatabaseScaleInfoArrayOutput `pulumi:"infos"`
	// LCM config of instance
	LcmConfigs NdbDatabaseScaleLcmConfigArrayOutput `pulumi:"lcmConfigs"`
	// linked databases within database instance
	LinkedDatabases NdbDatabaseScaleLinkedDatabaseArrayOutput `pulumi:"linkedDatabases"`
	// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
	Metric pulumi.StringMapOutput `pulumi:"metric"`
	// Name of database instance
	Name pulumi.StringOutput `pulumi:"name"`
	// parent database id
	ParentDatabaseId       pulumi.StringOutput `pulumi:"parentDatabaseId"`
	ParentSourceDatabaseId pulumi.StringOutput `pulumi:"parentSourceDatabaseId"`
	// post script command
	PostScriptCmd pulumi.StringPtrOutput `pulumi:"postScriptCmd"`
	// pre script command
	PreScriptCmd pulumi.StringPtrOutput `pulumi:"preScriptCmd"`
	// properties of database created
	Properties NdbDatabaseScalePropertyArrayOutput `pulumi:"properties"`
	// scale count helps to scale the same instance with same config
	ScaleCount pulumi.IntPtrOutput `pulumi:"scaleCount"`
	// status of instance
	Status pulumi.StringOutput `pulumi:"status"`
	// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
	Tags NdbDatabaseScaleTagArrayOutput `pulumi:"tags"`
	// time machine id of instance
	TimeMachineId pulumi.StringOutput `pulumi:"timeMachineId"`
	// Time Machine details of instance
	TimeMachines NdbDatabaseScaleTimeMachineArrayOutput `pulumi:"timeMachines"`
	// timezone on which instance is created xw
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// type of database
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNdbDatabaseScale registers a new resource with the given unique name, arguments, and options.
func NewNdbDatabaseScale(ctx *pulumi.Context,
	name string, args *NdbDatabaseScaleArgs, opts ...pulumi.ResourceOption) (*NdbDatabaseScale, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationType == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationType'")
	}
	if args.DataStorageSize == nil {
		return nil, errors.New("invalid value for required argument 'DataStorageSize'")
	}
	if args.DatabaseUuid == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseUuid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbDatabaseScale
	err := ctx.RegisterResource("nutanix:index/ndbDatabaseScale:NdbDatabaseScale", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbDatabaseScale gets an existing NdbDatabaseScale resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbDatabaseScale(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbDatabaseScaleState, opts ...pulumi.ResourceOption) (*NdbDatabaseScale, error) {
	var resource NdbDatabaseScale
	err := ctx.ReadResource("nutanix:index/ndbDatabaseScale:NdbDatabaseScale", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbDatabaseScale resources.
type ndbDatabaseScaleState struct {
	// type of instance. eg: postgres_database
	ApplicationType *string `pulumi:"applicationType"`
	// whether instance is cloned or not
	Clone *bool `pulumi:"clone"`
	// data area (in GiB) to be added to the existing database.
	DataStorageSize *int `pulumi:"dataStorageSize"`
	// database cluster type
	DatabaseClusterType *string `pulumi:"databaseClusterType"`
	DatabaseInstanceId  *string `pulumi:"databaseInstanceId"`
	// name of database
	DatabaseName *string `pulumi:"databaseName"`
	// database nodes associated with database instance
	DatabaseNodes []NdbDatabaseScaleDatabaseNode `pulumi:"databaseNodes"`
	// Database id
	DatabaseUuid *string `pulumi:"databaseUuid"`
	// type of database
	Databasetype *string `pulumi:"databasetype"`
	// date created for db instance
	DateCreated *string `pulumi:"dateCreated"`
	// date modified for instance
	DateModified *string `pulumi:"dateModified"`
	// dbserver logical cluster
	DbserverLogicalCluster map[string]string `pulumi:"dbserverLogicalCluster"`
	// dbserver logical cluster id
	DbserverLogicalClusterId *string `pulumi:"dbserverLogicalClusterId"`
	// description of database instance
	Description *string `pulumi:"description"`
	// info of instance
	Infos []NdbDatabaseScaleInfo `pulumi:"infos"`
	// LCM config of instance
	LcmConfigs []NdbDatabaseScaleLcmConfig `pulumi:"lcmConfigs"`
	// linked databases within database instance
	LinkedDatabases []NdbDatabaseScaleLinkedDatabase `pulumi:"linkedDatabases"`
	// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
	Metric map[string]string `pulumi:"metric"`
	// Name of database instance
	Name *string `pulumi:"name"`
	// parent database id
	ParentDatabaseId       *string `pulumi:"parentDatabaseId"`
	ParentSourceDatabaseId *string `pulumi:"parentSourceDatabaseId"`
	// post script command
	PostScriptCmd *string `pulumi:"postScriptCmd"`
	// pre script command
	PreScriptCmd *string `pulumi:"preScriptCmd"`
	// properties of database created
	Properties []NdbDatabaseScaleProperty `pulumi:"properties"`
	// scale count helps to scale the same instance with same config
	ScaleCount *int `pulumi:"scaleCount"`
	// status of instance
	Status *string `pulumi:"status"`
	// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
	Tags []NdbDatabaseScaleTag `pulumi:"tags"`
	// time machine id of instance
	TimeMachineId *string `pulumi:"timeMachineId"`
	// Time Machine details of instance
	TimeMachines []NdbDatabaseScaleTimeMachine `pulumi:"timeMachines"`
	// timezone on which instance is created xw
	TimeZone *string `pulumi:"timeZone"`
	// type of database
	Type *string `pulumi:"type"`
}

type NdbDatabaseScaleState struct {
	// type of instance. eg: postgres_database
	ApplicationType pulumi.StringPtrInput
	// whether instance is cloned or not
	Clone pulumi.BoolPtrInput
	// data area (in GiB) to be added to the existing database.
	DataStorageSize pulumi.IntPtrInput
	// database cluster type
	DatabaseClusterType pulumi.StringPtrInput
	DatabaseInstanceId  pulumi.StringPtrInput
	// name of database
	DatabaseName pulumi.StringPtrInput
	// database nodes associated with database instance
	DatabaseNodes NdbDatabaseScaleDatabaseNodeArrayInput
	// Database id
	DatabaseUuid pulumi.StringPtrInput
	// type of database
	Databasetype pulumi.StringPtrInput
	// date created for db instance
	DateCreated pulumi.StringPtrInput
	// date modified for instance
	DateModified pulumi.StringPtrInput
	// dbserver logical cluster
	DbserverLogicalCluster pulumi.StringMapInput
	// dbserver logical cluster id
	DbserverLogicalClusterId pulumi.StringPtrInput
	// description of database instance
	Description pulumi.StringPtrInput
	// info of instance
	Infos NdbDatabaseScaleInfoArrayInput
	// LCM config of instance
	LcmConfigs NdbDatabaseScaleLcmConfigArrayInput
	// linked databases within database instance
	LinkedDatabases NdbDatabaseScaleLinkedDatabaseArrayInput
	// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
	Metric pulumi.StringMapInput
	// Name of database instance
	Name pulumi.StringPtrInput
	// parent database id
	ParentDatabaseId       pulumi.StringPtrInput
	ParentSourceDatabaseId pulumi.StringPtrInput
	// post script command
	PostScriptCmd pulumi.StringPtrInput
	// pre script command
	PreScriptCmd pulumi.StringPtrInput
	// properties of database created
	Properties NdbDatabaseScalePropertyArrayInput
	// scale count helps to scale the same instance with same config
	ScaleCount pulumi.IntPtrInput
	// status of instance
	Status pulumi.StringPtrInput
	// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
	Tags NdbDatabaseScaleTagArrayInput
	// time machine id of instance
	TimeMachineId pulumi.StringPtrInput
	// Time Machine details of instance
	TimeMachines NdbDatabaseScaleTimeMachineArrayInput
	// timezone on which instance is created xw
	TimeZone pulumi.StringPtrInput
	// type of database
	Type pulumi.StringPtrInput
}

func (NdbDatabaseScaleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDatabaseScaleState)(nil)).Elem()
}

type ndbDatabaseScaleArgs struct {
	// type of instance. eg: postgres_database
	ApplicationType string `pulumi:"applicationType"`
	// data area (in GiB) to be added to the existing database.
	DataStorageSize int `pulumi:"dataStorageSize"`
	// Database id
	DatabaseUuid string `pulumi:"databaseUuid"`
	// post script command
	PostScriptCmd *string `pulumi:"postScriptCmd"`
	// pre script command
	PreScriptCmd *string `pulumi:"preScriptCmd"`
	// scale count helps to scale the same instance with same config
	ScaleCount *int `pulumi:"scaleCount"`
	// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
	Tags []NdbDatabaseScaleTag `pulumi:"tags"`
}

// The set of arguments for constructing a NdbDatabaseScale resource.
type NdbDatabaseScaleArgs struct {
	// type of instance. eg: postgres_database
	ApplicationType pulumi.StringInput
	// data area (in GiB) to be added to the existing database.
	DataStorageSize pulumi.IntInput
	// Database id
	DatabaseUuid pulumi.StringInput
	// post script command
	PostScriptCmd pulumi.StringPtrInput
	// pre script command
	PreScriptCmd pulumi.StringPtrInput
	// scale count helps to scale the same instance with same config
	ScaleCount pulumi.IntPtrInput
	// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
	Tags NdbDatabaseScaleTagArrayInput
}

func (NdbDatabaseScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDatabaseScaleArgs)(nil)).Elem()
}

type NdbDatabaseScaleInput interface {
	pulumi.Input

	ToNdbDatabaseScaleOutput() NdbDatabaseScaleOutput
	ToNdbDatabaseScaleOutputWithContext(ctx context.Context) NdbDatabaseScaleOutput
}

func (*NdbDatabaseScale) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDatabaseScale)(nil)).Elem()
}

func (i *NdbDatabaseScale) ToNdbDatabaseScaleOutput() NdbDatabaseScaleOutput {
	return i.ToNdbDatabaseScaleOutputWithContext(context.Background())
}

func (i *NdbDatabaseScale) ToNdbDatabaseScaleOutputWithContext(ctx context.Context) NdbDatabaseScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseScaleOutput)
}

// NdbDatabaseScaleArrayInput is an input type that accepts NdbDatabaseScaleArray and NdbDatabaseScaleArrayOutput values.
// You can construct a concrete instance of `NdbDatabaseScaleArrayInput` via:
//
//	NdbDatabaseScaleArray{ NdbDatabaseScaleArgs{...} }
type NdbDatabaseScaleArrayInput interface {
	pulumi.Input

	ToNdbDatabaseScaleArrayOutput() NdbDatabaseScaleArrayOutput
	ToNdbDatabaseScaleArrayOutputWithContext(context.Context) NdbDatabaseScaleArrayOutput
}

type NdbDatabaseScaleArray []NdbDatabaseScaleInput

func (NdbDatabaseScaleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDatabaseScale)(nil)).Elem()
}

func (i NdbDatabaseScaleArray) ToNdbDatabaseScaleArrayOutput() NdbDatabaseScaleArrayOutput {
	return i.ToNdbDatabaseScaleArrayOutputWithContext(context.Background())
}

func (i NdbDatabaseScaleArray) ToNdbDatabaseScaleArrayOutputWithContext(ctx context.Context) NdbDatabaseScaleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseScaleArrayOutput)
}

// NdbDatabaseScaleMapInput is an input type that accepts NdbDatabaseScaleMap and NdbDatabaseScaleMapOutput values.
// You can construct a concrete instance of `NdbDatabaseScaleMapInput` via:
//
//	NdbDatabaseScaleMap{ "key": NdbDatabaseScaleArgs{...} }
type NdbDatabaseScaleMapInput interface {
	pulumi.Input

	ToNdbDatabaseScaleMapOutput() NdbDatabaseScaleMapOutput
	ToNdbDatabaseScaleMapOutputWithContext(context.Context) NdbDatabaseScaleMapOutput
}

type NdbDatabaseScaleMap map[string]NdbDatabaseScaleInput

func (NdbDatabaseScaleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDatabaseScale)(nil)).Elem()
}

func (i NdbDatabaseScaleMap) ToNdbDatabaseScaleMapOutput() NdbDatabaseScaleMapOutput {
	return i.ToNdbDatabaseScaleMapOutputWithContext(context.Background())
}

func (i NdbDatabaseScaleMap) ToNdbDatabaseScaleMapOutputWithContext(ctx context.Context) NdbDatabaseScaleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDatabaseScaleMapOutput)
}

type NdbDatabaseScaleOutput struct{ *pulumi.OutputState }

func (NdbDatabaseScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDatabaseScale)(nil)).Elem()
}

func (o NdbDatabaseScaleOutput) ToNdbDatabaseScaleOutput() NdbDatabaseScaleOutput {
	return o
}

func (o NdbDatabaseScaleOutput) ToNdbDatabaseScaleOutputWithContext(ctx context.Context) NdbDatabaseScaleOutput {
	return o
}

// type of instance. eg: postgres_database
func (o NdbDatabaseScaleOutput) ApplicationType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.ApplicationType }).(pulumi.StringOutput)
}

// whether instance is cloned or not
func (o NdbDatabaseScaleOutput) Clone() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.BoolOutput { return v.Clone }).(pulumi.BoolOutput)
}

// data area (in GiB) to be added to the existing database.
func (o NdbDatabaseScaleOutput) DataStorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.IntOutput { return v.DataStorageSize }).(pulumi.IntOutput)
}

// database cluster type
func (o NdbDatabaseScaleOutput) DatabaseClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.DatabaseClusterType }).(pulumi.StringOutput)
}

func (o NdbDatabaseScaleOutput) DatabaseInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.DatabaseInstanceId }).(pulumi.StringOutput)
}

// name of database
func (o NdbDatabaseScaleOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// database nodes associated with database instance
func (o NdbDatabaseScaleOutput) DatabaseNodes() NdbDatabaseScaleDatabaseNodeArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) NdbDatabaseScaleDatabaseNodeArrayOutput { return v.DatabaseNodes }).(NdbDatabaseScaleDatabaseNodeArrayOutput)
}

// Database id
func (o NdbDatabaseScaleOutput) DatabaseUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.DatabaseUuid }).(pulumi.StringOutput)
}

// type of database
func (o NdbDatabaseScaleOutput) Databasetype() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.Databasetype }).(pulumi.StringOutput)
}

// date created for db instance
func (o NdbDatabaseScaleOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// date modified for instance
func (o NdbDatabaseScaleOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// dbserver logical cluster
func (o NdbDatabaseScaleOutput) DbserverLogicalCluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringMapOutput { return v.DbserverLogicalCluster }).(pulumi.StringMapOutput)
}

// dbserver logical cluster id
func (o NdbDatabaseScaleOutput) DbserverLogicalClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.DbserverLogicalClusterId }).(pulumi.StringOutput)
}

// description of database instance
func (o NdbDatabaseScaleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// info of instance
func (o NdbDatabaseScaleOutput) Infos() NdbDatabaseScaleInfoArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) NdbDatabaseScaleInfoArrayOutput { return v.Infos }).(NdbDatabaseScaleInfoArrayOutput)
}

// LCM config of instance
func (o NdbDatabaseScaleOutput) LcmConfigs() NdbDatabaseScaleLcmConfigArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) NdbDatabaseScaleLcmConfigArrayOutput { return v.LcmConfigs }).(NdbDatabaseScaleLcmConfigArrayOutput)
}

// linked databases within database instance
func (o NdbDatabaseScaleOutput) LinkedDatabases() NdbDatabaseScaleLinkedDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) NdbDatabaseScaleLinkedDatabaseArrayOutput { return v.LinkedDatabases }).(NdbDatabaseScaleLinkedDatabaseArrayOutput)
}

// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
func (o NdbDatabaseScaleOutput) Metric() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringMapOutput { return v.Metric }).(pulumi.StringMapOutput)
}

// Name of database instance
func (o NdbDatabaseScaleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// parent database id
func (o NdbDatabaseScaleOutput) ParentDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.ParentDatabaseId }).(pulumi.StringOutput)
}

func (o NdbDatabaseScaleOutput) ParentSourceDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.ParentSourceDatabaseId }).(pulumi.StringOutput)
}

// post script command
func (o NdbDatabaseScaleOutput) PostScriptCmd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringPtrOutput { return v.PostScriptCmd }).(pulumi.StringPtrOutput)
}

// pre script command
func (o NdbDatabaseScaleOutput) PreScriptCmd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringPtrOutput { return v.PreScriptCmd }).(pulumi.StringPtrOutput)
}

// properties of database created
func (o NdbDatabaseScaleOutput) Properties() NdbDatabaseScalePropertyArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) NdbDatabaseScalePropertyArrayOutput { return v.Properties }).(NdbDatabaseScalePropertyArrayOutput)
}

// scale count helps to scale the same instance with same config
func (o NdbDatabaseScaleOutput) ScaleCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.IntPtrOutput { return v.ScaleCount }).(pulumi.IntPtrOutput)
}

// status of instance
func (o NdbDatabaseScaleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
func (o NdbDatabaseScaleOutput) Tags() NdbDatabaseScaleTagArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) NdbDatabaseScaleTagArrayOutput { return v.Tags }).(NdbDatabaseScaleTagArrayOutput)
}

// time machine id of instance
func (o NdbDatabaseScaleOutput) TimeMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.TimeMachineId }).(pulumi.StringOutput)
}

// Time Machine details of instance
func (o NdbDatabaseScaleOutput) TimeMachines() NdbDatabaseScaleTimeMachineArrayOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) NdbDatabaseScaleTimeMachineArrayOutput { return v.TimeMachines }).(NdbDatabaseScaleTimeMachineArrayOutput)
}

// timezone on which instance is created xw
func (o NdbDatabaseScaleOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// type of database
func (o NdbDatabaseScaleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDatabaseScale) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NdbDatabaseScaleArrayOutput struct{ *pulumi.OutputState }

func (NdbDatabaseScaleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDatabaseScale)(nil)).Elem()
}

func (o NdbDatabaseScaleArrayOutput) ToNdbDatabaseScaleArrayOutput() NdbDatabaseScaleArrayOutput {
	return o
}

func (o NdbDatabaseScaleArrayOutput) ToNdbDatabaseScaleArrayOutputWithContext(ctx context.Context) NdbDatabaseScaleArrayOutput {
	return o
}

func (o NdbDatabaseScaleArrayOutput) Index(i pulumi.IntInput) NdbDatabaseScaleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbDatabaseScale {
		return vs[0].([]*NdbDatabaseScale)[vs[1].(int)]
	}).(NdbDatabaseScaleOutput)
}

type NdbDatabaseScaleMapOutput struct{ *pulumi.OutputState }

func (NdbDatabaseScaleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDatabaseScale)(nil)).Elem()
}

func (o NdbDatabaseScaleMapOutput) ToNdbDatabaseScaleMapOutput() NdbDatabaseScaleMapOutput {
	return o
}

func (o NdbDatabaseScaleMapOutput) ToNdbDatabaseScaleMapOutputWithContext(ctx context.Context) NdbDatabaseScaleMapOutput {
	return o
}

func (o NdbDatabaseScaleMapOutput) MapIndex(k pulumi.StringInput) NdbDatabaseScaleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbDatabaseScale {
		return vs[0].(map[string]*NdbDatabaseScale)[vs[1].(string)]
	}).(NdbDatabaseScaleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseScaleInput)(nil)).Elem(), &NdbDatabaseScale{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseScaleArrayInput)(nil)).Elem(), NdbDatabaseScaleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDatabaseScaleMapInput)(nil)).Elem(), NdbDatabaseScaleMap{})
	pulumi.RegisterOutputType(NdbDatabaseScaleOutput{})
	pulumi.RegisterOutputType(NdbDatabaseScaleArrayOutput{})
	pulumi.RegisterOutputType(NdbDatabaseScaleMapOutput{})
}
