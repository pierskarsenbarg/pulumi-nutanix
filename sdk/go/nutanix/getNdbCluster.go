// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a cluster in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			c1, err := nutanix.LookupNdbCluster(ctx, &nutanix.LookupNdbClusterArgs{
//				ClusterName: pulumi.StringRef("<era-cluster-name>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("cluster", c1)
//			return nil
//		})
//	}
//
// ```
func LookupNdbCluster(ctx *pulumi.Context, args *LookupNdbClusterArgs, opts ...pulumi.InvokeOption) (*LookupNdbClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNdbClusterResult
	err := ctx.Invoke("nutanix:index/getNdbCluster:getNdbCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbCluster.
type LookupNdbClusterArgs struct {
	// ID of cluster
	ClusterId *string `pulumi:"clusterId"`
	// and `clusterId` are mutually exclusive.
	ClusterName *string `pulumi:"clusterName"`
}

// A collection of values returned by getNdbCluster.
type LookupNdbClusterResult struct {
	// - cloud info
	CloudInfo string `pulumi:"cloudInfo"`
	// - cloud type
	CloudType   string  `pulumi:"cloudType"`
	ClusterId   *string `pulumi:"clusterId"`
	ClusterName *string `pulumi:"clusterName"`
	// - creation date
	DateCreated string `pulumi:"dateCreated"`
	// - date modified
	DateModified string `pulumi:"dateModified"`
	// - description
	Description string `pulumi:"description"`
	// - no. of entities related
	EntityCounts []GetNdbClusterEntityCount `pulumi:"entityCounts"`
	// - fqdn
	Fqdns string `pulumi:"fqdns"`
	// - if healthy status
	Healthy bool `pulumi:"healthy"`
	// - hypervisor type
	HypervisorType string `pulumi:"hypervisorType"`
	// - hypervisor version
	HypervisorVersion string `pulumi:"hypervisorVersion"`
	// - id of cluster
	Id string `pulumi:"id"`
	// - IP address
	IpAddresses []string `pulumi:"ipAddresses"`
	// - NA
	ManagementServerInfo string `pulumi:"managementServerInfo"`
	// - name of cluster
	Name string `pulumi:"name"`
	// - nutanix cluster uuid
	NxClusterUuid string `pulumi:"nxClusterUuid"`
	// - owner UUID
	OwnerId string `pulumi:"ownerId"`
	// - password
	Password string `pulumi:"password"`
	// - list of properties
	Properties []GetNdbClusterProperty `pulumi:"properties"`
	// - NA
	ReferenceCount int `pulumi:"referenceCount"`
	// - resource related consumption info
	ResourceConfigs []GetNdbClusterResourceConfig `pulumi:"resourceConfigs"`
	// - current status
	Status string `pulumi:"status"`
	// - unique name of cluster
	UniqueName string `pulumi:"uniqueName"`
	// - username
	Username string `pulumi:"username"`
	// - version
	Version string `pulumi:"version"`
}

func LookupNdbClusterOutput(ctx *pulumi.Context, args LookupNdbClusterOutputArgs, opts ...pulumi.InvokeOption) LookupNdbClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNdbClusterResultOutput, error) {
			args := v.(LookupNdbClusterArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNdbClusterResult
			secret, err := ctx.InvokePackageRaw("nutanix:index/getNdbCluster:getNdbCluster", args, &rv, "", opts...)
			if err != nil {
				return LookupNdbClusterResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNdbClusterResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNdbClusterResultOutput), nil
			}
			return output, nil
		}).(LookupNdbClusterResultOutput)
}

// A collection of arguments for invoking getNdbCluster.
type LookupNdbClusterOutputArgs struct {
	// ID of cluster
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// and `clusterId` are mutually exclusive.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
}

func (LookupNdbClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbClusterArgs)(nil)).Elem()
}

// A collection of values returned by getNdbCluster.
type LookupNdbClusterResultOutput struct{ *pulumi.OutputState }

func (LookupNdbClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbClusterResult)(nil)).Elem()
}

func (o LookupNdbClusterResultOutput) ToLookupNdbClusterResultOutput() LookupNdbClusterResultOutput {
	return o
}

func (o LookupNdbClusterResultOutput) ToLookupNdbClusterResultOutputWithContext(ctx context.Context) LookupNdbClusterResultOutput {
	return o
}

// - cloud info
func (o LookupNdbClusterResultOutput) CloudInfo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.CloudInfo }).(pulumi.StringOutput)
}

// - cloud type
func (o LookupNdbClusterResultOutput) CloudType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.CloudType }).(pulumi.StringOutput)
}

func (o LookupNdbClusterResultOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

func (o LookupNdbClusterResultOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// - creation date
func (o LookupNdbClusterResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

// - date modified
func (o LookupNdbClusterResultOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.DateModified }).(pulumi.StringOutput)
}

// - description
func (o LookupNdbClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// - no. of entities related
func (o LookupNdbClusterResultOutput) EntityCounts() GetNdbClusterEntityCountArrayOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) []GetNdbClusterEntityCount { return v.EntityCounts }).(GetNdbClusterEntityCountArrayOutput)
}

// - fqdn
func (o LookupNdbClusterResultOutput) Fqdns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Fqdns }).(pulumi.StringOutput)
}

// - if healthy status
func (o LookupNdbClusterResultOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) bool { return v.Healthy }).(pulumi.BoolOutput)
}

// - hypervisor type
func (o LookupNdbClusterResultOutput) HypervisorType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.HypervisorType }).(pulumi.StringOutput)
}

// - hypervisor version
func (o LookupNdbClusterResultOutput) HypervisorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.HypervisorVersion }).(pulumi.StringOutput)
}

// - id of cluster
func (o LookupNdbClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// - IP address
func (o LookupNdbClusterResultOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// - NA
func (o LookupNdbClusterResultOutput) ManagementServerInfo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.ManagementServerInfo }).(pulumi.StringOutput)
}

// - name of cluster
func (o LookupNdbClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// - nutanix cluster uuid
func (o LookupNdbClusterResultOutput) NxClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.NxClusterUuid }).(pulumi.StringOutput)
}

// - owner UUID
func (o LookupNdbClusterResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

// - password
func (o LookupNdbClusterResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Password }).(pulumi.StringOutput)
}

// - list of properties
func (o LookupNdbClusterResultOutput) Properties() GetNdbClusterPropertyArrayOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) []GetNdbClusterProperty { return v.Properties }).(GetNdbClusterPropertyArrayOutput)
}

// - NA
func (o LookupNdbClusterResultOutput) ReferenceCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) int { return v.ReferenceCount }).(pulumi.IntOutput)
}

// - resource related consumption info
func (o LookupNdbClusterResultOutput) ResourceConfigs() GetNdbClusterResourceConfigArrayOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) []GetNdbClusterResourceConfig { return v.ResourceConfigs }).(GetNdbClusterResourceConfigArrayOutput)
}

// - current status
func (o LookupNdbClusterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Status }).(pulumi.StringOutput)
}

// - unique name of cluster
func (o LookupNdbClusterResultOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.UniqueName }).(pulumi.StringOutput)
}

// - username
func (o LookupNdbClusterResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Username }).(pulumi.StringOutput)
}

// - version
func (o LookupNdbClusterResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbClusterResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNdbClusterResultOutput{})
}
