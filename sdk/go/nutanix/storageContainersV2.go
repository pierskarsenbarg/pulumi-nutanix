// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Nutanix resource to create VPC.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewStorageContainersV2(ctx, "storage-container", &nutanix.StorageContainersV2Args{
//				CacheDeduplication:                   pulumi.String("OFF"),
//				ErasureCode:                          pulumi.String("OFF"),
//				HasHigherEcFaultDomainPreference:     pulumi.Bool(false),
//				IsCompressionEnabled:                 pulumi.Bool(true),
//				IsInlineEcEnabled:                    pulumi.Bool(false),
//				IsInternal:                           pulumi.Bool(false),
//				IsSoftwareEncryptionEnabled:          pulumi.Bool(false),
//				LogicalAdvertisedCapacityBytes:       pulumi.Int(1073741824000),
//				LogicalExplicitReservedCapacityBytes: pulumi.Int(32),
//				NfsWhitelistAddresses: nutanix.StorageContainersV2NfsWhitelistAddressArray{
//					&nutanix.StorageContainersV2NfsWhitelistAddressArgs{
//						Ipv4s: nutanix.StorageContainersV2NfsWhitelistAddressIpv4Array{
//							&nutanix.StorageContainersV2NfsWhitelistAddressIpv4Args{
//								PrefixLength: pulumi.Int(32),
//								Value:        pulumi.String("192.168.15.0"),
//							},
//						},
//					},
//				},
//				OnDiskDedup:       pulumi.String("OFF"),
//				ReplicationFactor: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StorageContainersV2 struct {
	pulumi.CustomResourceState

	// -(Optional) Affinity host extId for RF 1 Storage Container.
	AffinityHostExtId pulumi.StringOutput `pulumi:"affinityHostExtId"`
	// -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
	CacheDeduplication pulumi.StringOutput `pulumi:"cacheDeduplication"`
	// - ext id for the cluster owning the storage container.
	ClusterExtId pulumi.StringOutput `pulumi:"clusterExtId"`
	// - Corresponding name of the Cluster owning the Storage Container instance.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// -(Optional) The compression delay in seconds.
	CompressionDelaySecs pulumi.IntOutput `pulumi:"compressionDelaySecs"`
	// - the storage container ext id
	ContainerExtId pulumi.StringOutput `pulumi:"containerExtId"`
	// -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
	ErasureCode pulumi.StringOutput `pulumi:"erasureCode"`
	// -(Optional) Delay in performing ErasureCode for the current Container instance.
	ErasureCodeDelaySecs pulumi.IntOutput `pulumi:"erasureCodeDelaySecs"`
	// - the storage container uuid
	ExtId pulumi.StringOutput `pulumi:"extId"`
	// -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
	HasHigherEcFaultDomainPreference pulumi.BoolOutput `pulumi:"hasHigherEcFaultDomainPreference"`
	IgnoreSmallFiles                 pulumi.BoolOutput `pulumi:"ignoreSmallFiles"`
	// -(Optional) Indicates whether the compression is enabled for the Container.
	IsCompressionEnabled pulumi.BoolOutput `pulumi:"isCompressionEnabled"`
	// - Indicates whether the Container is encrypted or not.
	IsEncrypted pulumi.BoolOutput `pulumi:"isEncrypted"`
	// -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
	IsInlineEcEnabled pulumi.BoolOutput `pulumi:"isInlineEcEnabled"`
	// - Indicates whether the Container is internal and is managed by Nutanix.
	IsInternal pulumi.BoolOutput `pulumi:"isInternal"`
	// - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
	IsMarkedForRemoval pulumi.BoolOutput `pulumi:"isMarkedForRemoval"`
	// -(Optional) Indicates whether the Container instance has software encryption enabled.
	IsSoftwareEncryptionEnabled pulumi.BoolOutput `pulumi:"isSoftwareEncryptionEnabled"`
	// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links StorageContainersV2LinkArrayOutput `pulumi:"links"`
	// -(Optional) Max capacity of the Container as defined by the user.
	LogicalAdvertisedCapacityBytes pulumi.IntOutput `pulumi:"logicalAdvertisedCapacityBytes"`
	// -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
	LogicalExplicitReservedCapacityBytes pulumi.IntOutput `pulumi:"logicalExplicitReservedCapacityBytes"`
	// - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
	LogicalImplicitReservedCapacityBytes pulumi.IntOutput `pulumi:"logicalImplicitReservedCapacityBytes"`
	// - Maximum physical capacity of the Storage Container in bytes.
	MaxCapacityBytes pulumi.IntOutput `pulumi:"maxCapacityBytes"`
	// -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// -(Optional) List of NFS addresses which need to be whitelisted.
	NfsWhitelistAddresses StorageContainersV2NfsWhitelistAddressArrayOutput `pulumi:"nfsWhitelistAddresses"`
	// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
	OnDiskDedup pulumi.StringOutput `pulumi:"onDiskDedup"`
	// -(Optional) owner ext id
	OwnerExtId pulumi.StringOutput `pulumi:"ownerExtId"`
	// -(Optional) Replication factor of the Storage Container.
	ReplicationFactor pulumi.IntOutput `pulumi:"replicationFactor"`
	// - extId of the Storage Pool owning the Storage Container instance.
	StoragePoolExtId pulumi.StringOutput `pulumi:"storagePoolExtId"`
	// - A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewStorageContainersV2 registers a new resource with the given unique name, arguments, and options.
func NewStorageContainersV2(ctx *pulumi.Context,
	name string, args *StorageContainersV2Args, opts ...pulumi.ResourceOption) (*StorageContainersV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterExtId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageContainersV2
	err := ctx.RegisterResource("nutanix:index/storageContainersV2:StorageContainersV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageContainersV2 gets an existing StorageContainersV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageContainersV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageContainersV2State, opts ...pulumi.ResourceOption) (*StorageContainersV2, error) {
	var resource StorageContainersV2
	err := ctx.ReadResource("nutanix:index/storageContainersV2:StorageContainersV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageContainersV2 resources.
type storageContainersV2State struct {
	// -(Optional) Affinity host extId for RF 1 Storage Container.
	AffinityHostExtId *string `pulumi:"affinityHostExtId"`
	// -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
	CacheDeduplication *string `pulumi:"cacheDeduplication"`
	// - ext id for the cluster owning the storage container.
	ClusterExtId *string `pulumi:"clusterExtId"`
	// - Corresponding name of the Cluster owning the Storage Container instance.
	ClusterName *string `pulumi:"clusterName"`
	// -(Optional) The compression delay in seconds.
	CompressionDelaySecs *int `pulumi:"compressionDelaySecs"`
	// - the storage container ext id
	ContainerExtId *string `pulumi:"containerExtId"`
	// -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
	ErasureCode *string `pulumi:"erasureCode"`
	// -(Optional) Delay in performing ErasureCode for the current Container instance.
	ErasureCodeDelaySecs *int `pulumi:"erasureCodeDelaySecs"`
	// - the storage container uuid
	ExtId *string `pulumi:"extId"`
	// -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
	HasHigherEcFaultDomainPreference *bool `pulumi:"hasHigherEcFaultDomainPreference"`
	IgnoreSmallFiles                 *bool `pulumi:"ignoreSmallFiles"`
	// -(Optional) Indicates whether the compression is enabled for the Container.
	IsCompressionEnabled *bool `pulumi:"isCompressionEnabled"`
	// - Indicates whether the Container is encrypted or not.
	IsEncrypted *bool `pulumi:"isEncrypted"`
	// -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
	IsInlineEcEnabled *bool `pulumi:"isInlineEcEnabled"`
	// - Indicates whether the Container is internal and is managed by Nutanix.
	IsInternal *bool `pulumi:"isInternal"`
	// - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
	IsMarkedForRemoval *bool `pulumi:"isMarkedForRemoval"`
	// -(Optional) Indicates whether the Container instance has software encryption enabled.
	IsSoftwareEncryptionEnabled *bool `pulumi:"isSoftwareEncryptionEnabled"`
	// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []StorageContainersV2Link `pulumi:"links"`
	// -(Optional) Max capacity of the Container as defined by the user.
	LogicalAdvertisedCapacityBytes *int `pulumi:"logicalAdvertisedCapacityBytes"`
	// -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
	LogicalExplicitReservedCapacityBytes *int `pulumi:"logicalExplicitReservedCapacityBytes"`
	// - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
	LogicalImplicitReservedCapacityBytes *int `pulumi:"logicalImplicitReservedCapacityBytes"`
	// - Maximum physical capacity of the Storage Container in bytes.
	MaxCapacityBytes *int `pulumi:"maxCapacityBytes"`
	// -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
	Name *string `pulumi:"name"`
	// -(Optional) List of NFS addresses which need to be whitelisted.
	NfsWhitelistAddresses []StorageContainersV2NfsWhitelistAddress `pulumi:"nfsWhitelistAddresses"`
	// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
	OnDiskDedup *string `pulumi:"onDiskDedup"`
	// -(Optional) owner ext id
	OwnerExtId *string `pulumi:"ownerExtId"`
	// -(Optional) Replication factor of the Storage Container.
	ReplicationFactor *int `pulumi:"replicationFactor"`
	// - extId of the Storage Pool owning the Storage Container instance.
	StoragePoolExtId *string `pulumi:"storagePoolExtId"`
	// - A globally unique identifier that represents the tenant that owns this entity.
	TenantId *string `pulumi:"tenantId"`
}

type StorageContainersV2State struct {
	// -(Optional) Affinity host extId for RF 1 Storage Container.
	AffinityHostExtId pulumi.StringPtrInput
	// -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
	CacheDeduplication pulumi.StringPtrInput
	// - ext id for the cluster owning the storage container.
	ClusterExtId pulumi.StringPtrInput
	// - Corresponding name of the Cluster owning the Storage Container instance.
	ClusterName pulumi.StringPtrInput
	// -(Optional) The compression delay in seconds.
	CompressionDelaySecs pulumi.IntPtrInput
	// - the storage container ext id
	ContainerExtId pulumi.StringPtrInput
	// -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
	ErasureCode pulumi.StringPtrInput
	// -(Optional) Delay in performing ErasureCode for the current Container instance.
	ErasureCodeDelaySecs pulumi.IntPtrInput
	// - the storage container uuid
	ExtId pulumi.StringPtrInput
	// -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
	HasHigherEcFaultDomainPreference pulumi.BoolPtrInput
	IgnoreSmallFiles                 pulumi.BoolPtrInput
	// -(Optional) Indicates whether the compression is enabled for the Container.
	IsCompressionEnabled pulumi.BoolPtrInput
	// - Indicates whether the Container is encrypted or not.
	IsEncrypted pulumi.BoolPtrInput
	// -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
	IsInlineEcEnabled pulumi.BoolPtrInput
	// - Indicates whether the Container is internal and is managed by Nutanix.
	IsInternal pulumi.BoolPtrInput
	// - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
	IsMarkedForRemoval pulumi.BoolPtrInput
	// -(Optional) Indicates whether the Container instance has software encryption enabled.
	IsSoftwareEncryptionEnabled pulumi.BoolPtrInput
	// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links StorageContainersV2LinkArrayInput
	// -(Optional) Max capacity of the Container as defined by the user.
	LogicalAdvertisedCapacityBytes pulumi.IntPtrInput
	// -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
	LogicalExplicitReservedCapacityBytes pulumi.IntPtrInput
	// - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
	LogicalImplicitReservedCapacityBytes pulumi.IntPtrInput
	// - Maximum physical capacity of the Storage Container in bytes.
	MaxCapacityBytes pulumi.IntPtrInput
	// -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
	Name pulumi.StringPtrInput
	// -(Optional) List of NFS addresses which need to be whitelisted.
	NfsWhitelistAddresses StorageContainersV2NfsWhitelistAddressArrayInput
	// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
	OnDiskDedup pulumi.StringPtrInput
	// -(Optional) owner ext id
	OwnerExtId pulumi.StringPtrInput
	// -(Optional) Replication factor of the Storage Container.
	ReplicationFactor pulumi.IntPtrInput
	// - extId of the Storage Pool owning the Storage Container instance.
	StoragePoolExtId pulumi.StringPtrInput
	// - A globally unique identifier that represents the tenant that owns this entity.
	TenantId pulumi.StringPtrInput
}

func (StorageContainersV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*storageContainersV2State)(nil)).Elem()
}

type storageContainersV2Args struct {
	// -(Optional) Affinity host extId for RF 1 Storage Container.
	AffinityHostExtId *string `pulumi:"affinityHostExtId"`
	// -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
	CacheDeduplication *string `pulumi:"cacheDeduplication"`
	// - ext id for the cluster owning the storage container.
	ClusterExtId string `pulumi:"clusterExtId"`
	// -(Optional) The compression delay in seconds.
	CompressionDelaySecs *int `pulumi:"compressionDelaySecs"`
	// - the storage container ext id
	ContainerExtId *string `pulumi:"containerExtId"`
	// -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
	ErasureCode *string `pulumi:"erasureCode"`
	// -(Optional) Delay in performing ErasureCode for the current Container instance.
	ErasureCodeDelaySecs *int `pulumi:"erasureCodeDelaySecs"`
	// - the storage container uuid
	ExtId *string `pulumi:"extId"`
	// -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
	HasHigherEcFaultDomainPreference *bool `pulumi:"hasHigherEcFaultDomainPreference"`
	IgnoreSmallFiles                 *bool `pulumi:"ignoreSmallFiles"`
	// -(Optional) Indicates whether the compression is enabled for the Container.
	IsCompressionEnabled *bool `pulumi:"isCompressionEnabled"`
	// -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
	IsInlineEcEnabled *bool `pulumi:"isInlineEcEnabled"`
	// - Indicates whether the Container is internal and is managed by Nutanix.
	IsInternal *bool `pulumi:"isInternal"`
	// -(Optional) Indicates whether the Container instance has software encryption enabled.
	IsSoftwareEncryptionEnabled *bool `pulumi:"isSoftwareEncryptionEnabled"`
	// -(Optional) Max capacity of the Container as defined by the user.
	LogicalAdvertisedCapacityBytes *int `pulumi:"logicalAdvertisedCapacityBytes"`
	// -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
	LogicalExplicitReservedCapacityBytes *int `pulumi:"logicalExplicitReservedCapacityBytes"`
	// -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
	Name *string `pulumi:"name"`
	// -(Optional) List of NFS addresses which need to be whitelisted.
	NfsWhitelistAddresses []StorageContainersV2NfsWhitelistAddress `pulumi:"nfsWhitelistAddresses"`
	// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
	OnDiskDedup *string `pulumi:"onDiskDedup"`
	// -(Optional) owner ext id
	OwnerExtId *string `pulumi:"ownerExtId"`
	// -(Optional) Replication factor of the Storage Container.
	ReplicationFactor *int `pulumi:"replicationFactor"`
}

// The set of arguments for constructing a StorageContainersV2 resource.
type StorageContainersV2Args struct {
	// -(Optional) Affinity host extId for RF 1 Storage Container.
	AffinityHostExtId pulumi.StringPtrInput
	// -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
	CacheDeduplication pulumi.StringPtrInput
	// - ext id for the cluster owning the storage container.
	ClusterExtId pulumi.StringInput
	// -(Optional) The compression delay in seconds.
	CompressionDelaySecs pulumi.IntPtrInput
	// - the storage container ext id
	ContainerExtId pulumi.StringPtrInput
	// -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
	ErasureCode pulumi.StringPtrInput
	// -(Optional) Delay in performing ErasureCode for the current Container instance.
	ErasureCodeDelaySecs pulumi.IntPtrInput
	// - the storage container uuid
	ExtId pulumi.StringPtrInput
	// -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
	HasHigherEcFaultDomainPreference pulumi.BoolPtrInput
	IgnoreSmallFiles                 pulumi.BoolPtrInput
	// -(Optional) Indicates whether the compression is enabled for the Container.
	IsCompressionEnabled pulumi.BoolPtrInput
	// -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
	IsInlineEcEnabled pulumi.BoolPtrInput
	// - Indicates whether the Container is internal and is managed by Nutanix.
	IsInternal pulumi.BoolPtrInput
	// -(Optional) Indicates whether the Container instance has software encryption enabled.
	IsSoftwareEncryptionEnabled pulumi.BoolPtrInput
	// -(Optional) Max capacity of the Container as defined by the user.
	LogicalAdvertisedCapacityBytes pulumi.IntPtrInput
	// -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
	LogicalExplicitReservedCapacityBytes pulumi.IntPtrInput
	// -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
	Name pulumi.StringPtrInput
	// -(Optional) List of NFS addresses which need to be whitelisted.
	NfsWhitelistAddresses StorageContainersV2NfsWhitelistAddressArrayInput
	// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
	OnDiskDedup pulumi.StringPtrInput
	// -(Optional) owner ext id
	OwnerExtId pulumi.StringPtrInput
	// -(Optional) Replication factor of the Storage Container.
	ReplicationFactor pulumi.IntPtrInput
}

func (StorageContainersV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*storageContainersV2Args)(nil)).Elem()
}

type StorageContainersV2Input interface {
	pulumi.Input

	ToStorageContainersV2Output() StorageContainersV2Output
	ToStorageContainersV2OutputWithContext(ctx context.Context) StorageContainersV2Output
}

func (*StorageContainersV2) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageContainersV2)(nil)).Elem()
}

func (i *StorageContainersV2) ToStorageContainersV2Output() StorageContainersV2Output {
	return i.ToStorageContainersV2OutputWithContext(context.Background())
}

func (i *StorageContainersV2) ToStorageContainersV2OutputWithContext(ctx context.Context) StorageContainersV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(StorageContainersV2Output)
}

// StorageContainersV2ArrayInput is an input type that accepts StorageContainersV2Array and StorageContainersV2ArrayOutput values.
// You can construct a concrete instance of `StorageContainersV2ArrayInput` via:
//
//	StorageContainersV2Array{ StorageContainersV2Args{...} }
type StorageContainersV2ArrayInput interface {
	pulumi.Input

	ToStorageContainersV2ArrayOutput() StorageContainersV2ArrayOutput
	ToStorageContainersV2ArrayOutputWithContext(context.Context) StorageContainersV2ArrayOutput
}

type StorageContainersV2Array []StorageContainersV2Input

func (StorageContainersV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageContainersV2)(nil)).Elem()
}

func (i StorageContainersV2Array) ToStorageContainersV2ArrayOutput() StorageContainersV2ArrayOutput {
	return i.ToStorageContainersV2ArrayOutputWithContext(context.Background())
}

func (i StorageContainersV2Array) ToStorageContainersV2ArrayOutputWithContext(ctx context.Context) StorageContainersV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageContainersV2ArrayOutput)
}

// StorageContainersV2MapInput is an input type that accepts StorageContainersV2Map and StorageContainersV2MapOutput values.
// You can construct a concrete instance of `StorageContainersV2MapInput` via:
//
//	StorageContainersV2Map{ "key": StorageContainersV2Args{...} }
type StorageContainersV2MapInput interface {
	pulumi.Input

	ToStorageContainersV2MapOutput() StorageContainersV2MapOutput
	ToStorageContainersV2MapOutputWithContext(context.Context) StorageContainersV2MapOutput
}

type StorageContainersV2Map map[string]StorageContainersV2Input

func (StorageContainersV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageContainersV2)(nil)).Elem()
}

func (i StorageContainersV2Map) ToStorageContainersV2MapOutput() StorageContainersV2MapOutput {
	return i.ToStorageContainersV2MapOutputWithContext(context.Background())
}

func (i StorageContainersV2Map) ToStorageContainersV2MapOutputWithContext(ctx context.Context) StorageContainersV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageContainersV2MapOutput)
}

type StorageContainersV2Output struct{ *pulumi.OutputState }

func (StorageContainersV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageContainersV2)(nil)).Elem()
}

func (o StorageContainersV2Output) ToStorageContainersV2Output() StorageContainersV2Output {
	return o
}

func (o StorageContainersV2Output) ToStorageContainersV2OutputWithContext(ctx context.Context) StorageContainersV2Output {
	return o
}

// -(Optional) Affinity host extId for RF 1 Storage Container.
func (o StorageContainersV2Output) AffinityHostExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.AffinityHostExtId }).(pulumi.StringOutput)
}

// -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
func (o StorageContainersV2Output) CacheDeduplication() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.CacheDeduplication }).(pulumi.StringOutput)
}

// - ext id for the cluster owning the storage container.
func (o StorageContainersV2Output) ClusterExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.ClusterExtId }).(pulumi.StringOutput)
}

// - Corresponding name of the Cluster owning the Storage Container instance.
func (o StorageContainersV2Output) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// -(Optional) The compression delay in seconds.
func (o StorageContainersV2Output) CompressionDelaySecs() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.IntOutput { return v.CompressionDelaySecs }).(pulumi.IntOutput)
}

// - the storage container ext id
func (o StorageContainersV2Output) ContainerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.ContainerExtId }).(pulumi.StringOutput)
}

// -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
func (o StorageContainersV2Output) ErasureCode() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.ErasureCode }).(pulumi.StringOutput)
}

// -(Optional) Delay in performing ErasureCode for the current Container instance.
func (o StorageContainersV2Output) ErasureCodeDelaySecs() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.IntOutput { return v.ErasureCodeDelaySecs }).(pulumi.IntOutput)
}

// - the storage container uuid
func (o StorageContainersV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

// -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
func (o StorageContainersV2Output) HasHigherEcFaultDomainPreference() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.HasHigherEcFaultDomainPreference }).(pulumi.BoolOutput)
}

func (o StorageContainersV2Output) IgnoreSmallFiles() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.IgnoreSmallFiles }).(pulumi.BoolOutput)
}

// -(Optional) Indicates whether the compression is enabled for the Container.
func (o StorageContainersV2Output) IsCompressionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.IsCompressionEnabled }).(pulumi.BoolOutput)
}

// - Indicates whether the Container is encrypted or not.
func (o StorageContainersV2Output) IsEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.IsEncrypted }).(pulumi.BoolOutput)
}

// -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
func (o StorageContainersV2Output) IsInlineEcEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.IsInlineEcEnabled }).(pulumi.BoolOutput)
}

// - Indicates whether the Container is internal and is managed by Nutanix.
func (o StorageContainersV2Output) IsInternal() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.IsInternal }).(pulumi.BoolOutput)
}

// - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
func (o StorageContainersV2Output) IsMarkedForRemoval() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.IsMarkedForRemoval }).(pulumi.BoolOutput)
}

// -(Optional) Indicates whether the Container instance has software encryption enabled.
func (o StorageContainersV2Output) IsSoftwareEncryptionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.BoolOutput { return v.IsSoftwareEncryptionEnabled }).(pulumi.BoolOutput)
}

// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o StorageContainersV2Output) Links() StorageContainersV2LinkArrayOutput {
	return o.ApplyT(func(v *StorageContainersV2) StorageContainersV2LinkArrayOutput { return v.Links }).(StorageContainersV2LinkArrayOutput)
}

// -(Optional) Max capacity of the Container as defined by the user.
func (o StorageContainersV2Output) LogicalAdvertisedCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.IntOutput { return v.LogicalAdvertisedCapacityBytes }).(pulumi.IntOutput)
}

// -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
func (o StorageContainersV2Output) LogicalExplicitReservedCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.IntOutput { return v.LogicalExplicitReservedCapacityBytes }).(pulumi.IntOutput)
}

// - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
func (o StorageContainersV2Output) LogicalImplicitReservedCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.IntOutput { return v.LogicalImplicitReservedCapacityBytes }).(pulumi.IntOutput)
}

// - Maximum physical capacity of the Storage Container in bytes.
func (o StorageContainersV2Output) MaxCapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.IntOutput { return v.MaxCapacityBytes }).(pulumi.IntOutput)
}

// -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
func (o StorageContainersV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// -(Optional) List of NFS addresses which need to be whitelisted.
func (o StorageContainersV2Output) NfsWhitelistAddresses() StorageContainersV2NfsWhitelistAddressArrayOutput {
	return o.ApplyT(func(v *StorageContainersV2) StorageContainersV2NfsWhitelistAddressArrayOutput {
		return v.NfsWhitelistAddresses
	}).(StorageContainersV2NfsWhitelistAddressArrayOutput)
}

// - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
func (o StorageContainersV2Output) OnDiskDedup() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.OnDiskDedup }).(pulumi.StringOutput)
}

// -(Optional) owner ext id
func (o StorageContainersV2Output) OwnerExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.OwnerExtId }).(pulumi.StringOutput)
}

// -(Optional) Replication factor of the Storage Container.
func (o StorageContainersV2Output) ReplicationFactor() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.IntOutput { return v.ReplicationFactor }).(pulumi.IntOutput)
}

// - extId of the Storage Pool owning the Storage Container instance.
func (o StorageContainersV2Output) StoragePoolExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.StoragePoolExtId }).(pulumi.StringOutput)
}

// - A globally unique identifier that represents the tenant that owns this entity.
func (o StorageContainersV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageContainersV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type StorageContainersV2ArrayOutput struct{ *pulumi.OutputState }

func (StorageContainersV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageContainersV2)(nil)).Elem()
}

func (o StorageContainersV2ArrayOutput) ToStorageContainersV2ArrayOutput() StorageContainersV2ArrayOutput {
	return o
}

func (o StorageContainersV2ArrayOutput) ToStorageContainersV2ArrayOutputWithContext(ctx context.Context) StorageContainersV2ArrayOutput {
	return o
}

func (o StorageContainersV2ArrayOutput) Index(i pulumi.IntInput) StorageContainersV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageContainersV2 {
		return vs[0].([]*StorageContainersV2)[vs[1].(int)]
	}).(StorageContainersV2Output)
}

type StorageContainersV2MapOutput struct{ *pulumi.OutputState }

func (StorageContainersV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageContainersV2)(nil)).Elem()
}

func (o StorageContainersV2MapOutput) ToStorageContainersV2MapOutput() StorageContainersV2MapOutput {
	return o
}

func (o StorageContainersV2MapOutput) ToStorageContainersV2MapOutputWithContext(ctx context.Context) StorageContainersV2MapOutput {
	return o
}

func (o StorageContainersV2MapOutput) MapIndex(k pulumi.StringInput) StorageContainersV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageContainersV2 {
		return vs[0].(map[string]*StorageContainersV2)[vs[1].(string)]
	}).(StorageContainersV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageContainersV2Input)(nil)).Elem(), &StorageContainersV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageContainersV2ArrayInput)(nil)).Elem(), StorageContainersV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageContainersV2MapInput)(nil)).Elem(), StorageContainersV2Map{})
	pulumi.RegisterOutputType(StorageContainersV2Output{})
	pulumi.RegisterOutputType(StorageContainersV2ArrayOutput{})
	pulumi.RegisterOutputType(StorageContainersV2MapOutput{})
}
