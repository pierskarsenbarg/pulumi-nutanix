// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a service group based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewServiceGroup(ctx, "test", &nutanix.ServiceGroupArgs{
//				Description: pulumi.String("this is service group"),
//				ServiceLists: nutanix.ServiceGroupServiceListArray{
//					&nutanix.ServiceGroupServiceListArgs{
//						Protocol: pulumi.String("TCP"),
//						TcpPortRangeLists: nutanix.ServiceGroupServiceListTcpPortRangeListArray{
//							&nutanix.ServiceGroupServiceListTcpPortRangeListArgs{
//								EndPort:   pulumi.Int(22),
//								StartPort: pulumi.Int(22),
//							},
//							&nutanix.ServiceGroupServiceListTcpPortRangeListArgs{
//								EndPort:   pulumi.Int(2222),
//								StartPort: pulumi.Int(2222),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServiceGroup struct {
	pulumi.CustomResourceState

	// - (Optional) Description of the service group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// - (Required) Name of the service group
	Name pulumi.StringOutput `pulumi:"name"`
	// - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
	ServiceLists ServiceGroupServiceListArrayOutput `pulumi:"serviceLists"`
	// - (ReadOnly) boolean value to denote if the service group is system defined
	SystemDefined pulumi.BoolOutput `pulumi:"systemDefined"`
}

// NewServiceGroup registers a new resource with the given unique name, arguments, and options.
func NewServiceGroup(ctx *pulumi.Context,
	name string, args *ServiceGroupArgs, opts ...pulumi.ResourceOption) (*ServiceGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceLists == nil {
		return nil, errors.New("invalid value for required argument 'ServiceLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceGroup
	err := ctx.RegisterResource("nutanix:index/serviceGroup:ServiceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceGroup gets an existing ServiceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceGroupState, opts ...pulumi.ResourceOption) (*ServiceGroup, error) {
	var resource ServiceGroup
	err := ctx.ReadResource("nutanix:index/serviceGroup:ServiceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceGroup resources.
type serviceGroupState struct {
	// - (Optional) Description of the service group
	Description *string `pulumi:"description"`
	// - (Required) Name of the service group
	Name *string `pulumi:"name"`
	// - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
	ServiceLists []ServiceGroupServiceList `pulumi:"serviceLists"`
	// - (ReadOnly) boolean value to denote if the service group is system defined
	SystemDefined *bool `pulumi:"systemDefined"`
}

type ServiceGroupState struct {
	// - (Optional) Description of the service group
	Description pulumi.StringPtrInput
	// - (Required) Name of the service group
	Name pulumi.StringPtrInput
	// - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
	ServiceLists ServiceGroupServiceListArrayInput
	// - (ReadOnly) boolean value to denote if the service group is system defined
	SystemDefined pulumi.BoolPtrInput
}

func (ServiceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceGroupState)(nil)).Elem()
}

type serviceGroupArgs struct {
	// - (Optional) Description of the service group
	Description *string `pulumi:"description"`
	// - (Required) Name of the service group
	Name *string `pulumi:"name"`
	// - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
	ServiceLists []ServiceGroupServiceList `pulumi:"serviceLists"`
}

// The set of arguments for constructing a ServiceGroup resource.
type ServiceGroupArgs struct {
	// - (Optional) Description of the service group
	Description pulumi.StringPtrInput
	// - (Required) Name of the service group
	Name pulumi.StringPtrInput
	// - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
	ServiceLists ServiceGroupServiceListArrayInput
}

func (ServiceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceGroupArgs)(nil)).Elem()
}

type ServiceGroupInput interface {
	pulumi.Input

	ToServiceGroupOutput() ServiceGroupOutput
	ToServiceGroupOutputWithContext(ctx context.Context) ServiceGroupOutput
}

func (*ServiceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceGroup)(nil)).Elem()
}

func (i *ServiceGroup) ToServiceGroupOutput() ServiceGroupOutput {
	return i.ToServiceGroupOutputWithContext(context.Background())
}

func (i *ServiceGroup) ToServiceGroupOutputWithContext(ctx context.Context) ServiceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceGroupOutput)
}

// ServiceGroupArrayInput is an input type that accepts ServiceGroupArray and ServiceGroupArrayOutput values.
// You can construct a concrete instance of `ServiceGroupArrayInput` via:
//
//	ServiceGroupArray{ ServiceGroupArgs{...} }
type ServiceGroupArrayInput interface {
	pulumi.Input

	ToServiceGroupArrayOutput() ServiceGroupArrayOutput
	ToServiceGroupArrayOutputWithContext(context.Context) ServiceGroupArrayOutput
}

type ServiceGroupArray []ServiceGroupInput

func (ServiceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceGroup)(nil)).Elem()
}

func (i ServiceGroupArray) ToServiceGroupArrayOutput() ServiceGroupArrayOutput {
	return i.ToServiceGroupArrayOutputWithContext(context.Background())
}

func (i ServiceGroupArray) ToServiceGroupArrayOutputWithContext(ctx context.Context) ServiceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceGroupArrayOutput)
}

// ServiceGroupMapInput is an input type that accepts ServiceGroupMap and ServiceGroupMapOutput values.
// You can construct a concrete instance of `ServiceGroupMapInput` via:
//
//	ServiceGroupMap{ "key": ServiceGroupArgs{...} }
type ServiceGroupMapInput interface {
	pulumi.Input

	ToServiceGroupMapOutput() ServiceGroupMapOutput
	ToServiceGroupMapOutputWithContext(context.Context) ServiceGroupMapOutput
}

type ServiceGroupMap map[string]ServiceGroupInput

func (ServiceGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceGroup)(nil)).Elem()
}

func (i ServiceGroupMap) ToServiceGroupMapOutput() ServiceGroupMapOutput {
	return i.ToServiceGroupMapOutputWithContext(context.Background())
}

func (i ServiceGroupMap) ToServiceGroupMapOutputWithContext(ctx context.Context) ServiceGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceGroupMapOutput)
}

type ServiceGroupOutput struct{ *pulumi.OutputState }

func (ServiceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceGroup)(nil)).Elem()
}

func (o ServiceGroupOutput) ToServiceGroupOutput() ServiceGroupOutput {
	return o
}

func (o ServiceGroupOutput) ToServiceGroupOutputWithContext(ctx context.Context) ServiceGroupOutput {
	return o
}

// - (Optional) Description of the service group
func (o ServiceGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// - (Required) Name of the service group
func (o ServiceGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
func (o ServiceGroupOutput) ServiceLists() ServiceGroupServiceListArrayOutput {
	return o.ApplyT(func(v *ServiceGroup) ServiceGroupServiceListArrayOutput { return v.ServiceLists }).(ServiceGroupServiceListArrayOutput)
}

// - (ReadOnly) boolean value to denote if the service group is system defined
func (o ServiceGroupOutput) SystemDefined() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceGroup) pulumi.BoolOutput { return v.SystemDefined }).(pulumi.BoolOutput)
}

type ServiceGroupArrayOutput struct{ *pulumi.OutputState }

func (ServiceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceGroup)(nil)).Elem()
}

func (o ServiceGroupArrayOutput) ToServiceGroupArrayOutput() ServiceGroupArrayOutput {
	return o
}

func (o ServiceGroupArrayOutput) ToServiceGroupArrayOutputWithContext(ctx context.Context) ServiceGroupArrayOutput {
	return o
}

func (o ServiceGroupArrayOutput) Index(i pulumi.IntInput) ServiceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceGroup {
		return vs[0].([]*ServiceGroup)[vs[1].(int)]
	}).(ServiceGroupOutput)
}

type ServiceGroupMapOutput struct{ *pulumi.OutputState }

func (ServiceGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceGroup)(nil)).Elem()
}

func (o ServiceGroupMapOutput) ToServiceGroupMapOutput() ServiceGroupMapOutput {
	return o
}

func (o ServiceGroupMapOutput) ToServiceGroupMapOutputWithContext(ctx context.Context) ServiceGroupMapOutput {
	return o
}

func (o ServiceGroupMapOutput) MapIndex(k pulumi.StringInput) ServiceGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceGroup {
		return vs[0].(map[string]*ServiceGroup)[vs[1].(string)]
	}).(ServiceGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceGroupInput)(nil)).Elem(), &ServiceGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceGroupArrayInput)(nil)).Elem(), ServiceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceGroupMapInput)(nil)).Elem(), ServiceGroupMap{})
	pulumi.RegisterOutputType(ServiceGroupOutput{})
	pulumi.RegisterOutputType(ServiceGroupArrayOutput{})
	pulumi.RegisterOutputType(ServiceGroupMapOutput{})
}
