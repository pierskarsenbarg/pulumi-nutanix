// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create database server VMs based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.
//
// ## Example Usage
type NdbDbserverVm struct {
	pulumi.CustomResourceState

	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Compute profile id.
	ComputeProfileId pulumi.StringOutput                `pulumi:"computeProfileId"`
	Credentials      NdbDbserverVmCredentialArrayOutput `pulumi:"credentials"`
	// database type. Valid values: postgres_database
	DatabaseType      pulumi.StringOutput `pulumi:"databaseType"`
	DbserverClusterId pulumi.StringOutput `pulumi:"dbserverClusterId"`
	// - (Optional) Delete the VM and associated storage. Default value is true
	Delete pulumi.BoolPtrOutput `pulumi:"delete"`
	// - (Optional) Delete volume grous. Default value is true
	DeleteVgs pulumi.BoolPtrOutput `pulumi:"deleteVgs"`
	// - (Optional) Delete the vm snapshots. Default is true
	DeleteVmSnapshots pulumi.BoolPtrOutput `pulumi:"deleteVmSnapshots"`
	// Type a description for the database server VM.
	Description    pulumi.StringOutput      `pulumi:"description"`
	EraDriveId     pulumi.StringOutput      `pulumi:"eraDriveId"`
	EraVersion     pulumi.StringOutput      `pulumi:"eraVersion"`
	Fqdns          pulumi.StringOutput      `pulumi:"fqdns"`
	IpAddresses    pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	LatestSnapshot pulumi.BoolPtrOutput     `pulumi:"latestSnapshot"`
	MacAddresses   pulumi.StringArrayOutput `pulumi:"macAddresses"`
	// maintenance window configured to enable automated patching.
	MaintenanceTasks NdbDbserverVmMaintenanceTasksPtrOutput `pulumi:"maintenanceTasks"`
	Name             pulumi.StringOutput                    `pulumi:"name"`
	// Network profile id.
	NetworkProfileId pulumi.StringOutput `pulumi:"networkProfileId"`
	NxClusterId      pulumi.StringOutput `pulumi:"nxClusterId"`
	// Postgres database server vm
	PostgresDatabases NdbDbserverVmPostgresDatabaseArrayOutput `pulumi:"postgresDatabases"`
	// List of all the properties
	Properties NdbDbserverVmPropertyArrayOutput `pulumi:"properties"`
	// - (Optional) Unregister the database from NDB. Default value is false
	Remove pulumi.BoolPtrOutput `pulumi:"remove"`
	// Snapshot id. If not given, it will use latest snapshot to provision db server vm.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrOutput `pulumi:"softRemove"`
	// software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
	SoftwareProfileId pulumi.StringPtrOutput `pulumi:"softwareProfileId"`
	// SOftware Profile Version Id.
	SoftwareProfileVersionId pulumi.StringPtrOutput      `pulumi:"softwareProfileVersionId"`
	Status                   pulumi.StringOutput         `pulumi:"status"`
	Tags                     NdbDbserverVmTagArrayOutput `pulumi:"tags"`
	// Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
	TimeMachineId pulumi.StringPtrOutput `pulumi:"timeMachineId"`
	Timezone      pulumi.StringPtrOutput `pulumi:"timezone"`
	Type          pulumi.StringOutput    `pulumi:"type"`
	VmClusterName pulumi.StringOutput    `pulumi:"vmClusterName"`
	VmClusterUuid pulumi.StringOutput    `pulumi:"vmClusterUuid"`
	// password of the NDB drive user account.
	VmPassword pulumi.StringPtrOutput `pulumi:"vmPassword"`
	VmTimezone pulumi.StringOutput    `pulumi:"vmTimezone"`
}

// NewNdbDbserverVm registers a new resource with the given unique name, arguments, and options.
func NewNdbDbserverVm(ctx *pulumi.Context,
	name string, args *NdbDbserverVmArgs, opts ...pulumi.ResourceOption) (*NdbDbserverVm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComputeProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ComputeProfileId'")
	}
	if args.DatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseType'")
	}
	if args.NetworkProfileId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkProfileId'")
	}
	if args.NxClusterId == nil {
		return nil, errors.New("invalid value for required argument 'NxClusterId'")
	}
	if args.VmPassword != nil {
		args.VmPassword = pulumi.ToSecret(args.VmPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"vmPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbDbserverVm
	err := ctx.RegisterResource("nutanix:index/ndbDbserverVm:NdbDbserverVm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbDbserverVm gets an existing NdbDbserverVm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbDbserverVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbDbserverVmState, opts ...pulumi.ResourceOption) (*NdbDbserverVm, error) {
	var resource NdbDbserverVm
	err := ctx.ReadResource("nutanix:index/ndbDbserverVm:NdbDbserverVm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbDbserverVm resources.
type ndbDbserverVmState struct {
	ClientId *string `pulumi:"clientId"`
	// Compute profile id.
	ComputeProfileId *string                   `pulumi:"computeProfileId"`
	Credentials      []NdbDbserverVmCredential `pulumi:"credentials"`
	// database type. Valid values: postgres_database
	DatabaseType      *string `pulumi:"databaseType"`
	DbserverClusterId *string `pulumi:"dbserverClusterId"`
	// - (Optional) Delete the VM and associated storage. Default value is true
	Delete *bool `pulumi:"delete"`
	// - (Optional) Delete volume grous. Default value is true
	DeleteVgs *bool `pulumi:"deleteVgs"`
	// - (Optional) Delete the vm snapshots. Default is true
	DeleteVmSnapshots *bool `pulumi:"deleteVmSnapshots"`
	// Type a description for the database server VM.
	Description    *string  `pulumi:"description"`
	EraDriveId     *string  `pulumi:"eraDriveId"`
	EraVersion     *string  `pulumi:"eraVersion"`
	Fqdns          *string  `pulumi:"fqdns"`
	IpAddresses    []string `pulumi:"ipAddresses"`
	LatestSnapshot *bool    `pulumi:"latestSnapshot"`
	MacAddresses   []string `pulumi:"macAddresses"`
	// maintenance window configured to enable automated patching.
	MaintenanceTasks *NdbDbserverVmMaintenanceTasks `pulumi:"maintenanceTasks"`
	Name             *string                        `pulumi:"name"`
	// Network profile id.
	NetworkProfileId *string `pulumi:"networkProfileId"`
	NxClusterId      *string `pulumi:"nxClusterId"`
	// Postgres database server vm
	PostgresDatabases []NdbDbserverVmPostgresDatabase `pulumi:"postgresDatabases"`
	// List of all the properties
	Properties []NdbDbserverVmProperty `pulumi:"properties"`
	// - (Optional) Unregister the database from NDB. Default value is false
	Remove *bool `pulumi:"remove"`
	// Snapshot id. If not given, it will use latest snapshot to provision db server vm.
	SnapshotId *string `pulumi:"snapshotId"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove *bool `pulumi:"softRemove"`
	// software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
	SoftwareProfileId *string `pulumi:"softwareProfileId"`
	// SOftware Profile Version Id.
	SoftwareProfileVersionId *string            `pulumi:"softwareProfileVersionId"`
	Status                   *string            `pulumi:"status"`
	Tags                     []NdbDbserverVmTag `pulumi:"tags"`
	// Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
	TimeMachineId *string `pulumi:"timeMachineId"`
	Timezone      *string `pulumi:"timezone"`
	Type          *string `pulumi:"type"`
	VmClusterName *string `pulumi:"vmClusterName"`
	VmClusterUuid *string `pulumi:"vmClusterUuid"`
	// password of the NDB drive user account.
	VmPassword *string `pulumi:"vmPassword"`
	VmTimezone *string `pulumi:"vmTimezone"`
}

type NdbDbserverVmState struct {
	ClientId pulumi.StringPtrInput
	// Compute profile id.
	ComputeProfileId pulumi.StringPtrInput
	Credentials      NdbDbserverVmCredentialArrayInput
	// database type. Valid values: postgres_database
	DatabaseType      pulumi.StringPtrInput
	DbserverClusterId pulumi.StringPtrInput
	// - (Optional) Delete the VM and associated storage. Default value is true
	Delete pulumi.BoolPtrInput
	// - (Optional) Delete volume grous. Default value is true
	DeleteVgs pulumi.BoolPtrInput
	// - (Optional) Delete the vm snapshots. Default is true
	DeleteVmSnapshots pulumi.BoolPtrInput
	// Type a description for the database server VM.
	Description    pulumi.StringPtrInput
	EraDriveId     pulumi.StringPtrInput
	EraVersion     pulumi.StringPtrInput
	Fqdns          pulumi.StringPtrInput
	IpAddresses    pulumi.StringArrayInput
	LatestSnapshot pulumi.BoolPtrInput
	MacAddresses   pulumi.StringArrayInput
	// maintenance window configured to enable automated patching.
	MaintenanceTasks NdbDbserverVmMaintenanceTasksPtrInput
	Name             pulumi.StringPtrInput
	// Network profile id.
	NetworkProfileId pulumi.StringPtrInput
	NxClusterId      pulumi.StringPtrInput
	// Postgres database server vm
	PostgresDatabases NdbDbserverVmPostgresDatabaseArrayInput
	// List of all the properties
	Properties NdbDbserverVmPropertyArrayInput
	// - (Optional) Unregister the database from NDB. Default value is false
	Remove pulumi.BoolPtrInput
	// Snapshot id. If not given, it will use latest snapshot to provision db server vm.
	SnapshotId pulumi.StringPtrInput
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrInput
	// software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
	SoftwareProfileId pulumi.StringPtrInput
	// SOftware Profile Version Id.
	SoftwareProfileVersionId pulumi.StringPtrInput
	Status                   pulumi.StringPtrInput
	Tags                     NdbDbserverVmTagArrayInput
	// Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
	TimeMachineId pulumi.StringPtrInput
	Timezone      pulumi.StringPtrInput
	Type          pulumi.StringPtrInput
	VmClusterName pulumi.StringPtrInput
	VmClusterUuid pulumi.StringPtrInput
	// password of the NDB drive user account.
	VmPassword pulumi.StringPtrInput
	VmTimezone pulumi.StringPtrInput
}

func (NdbDbserverVmState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDbserverVmState)(nil)).Elem()
}

type ndbDbserverVmArgs struct {
	// Compute profile id.
	ComputeProfileId string                    `pulumi:"computeProfileId"`
	Credentials      []NdbDbserverVmCredential `pulumi:"credentials"`
	// database type. Valid values: postgres_database
	DatabaseType string `pulumi:"databaseType"`
	// - (Optional) Delete the VM and associated storage. Default value is true
	Delete *bool `pulumi:"delete"`
	// - (Optional) Delete volume grous. Default value is true
	DeleteVgs *bool `pulumi:"deleteVgs"`
	// - (Optional) Delete the vm snapshots. Default is true
	DeleteVmSnapshots *bool `pulumi:"deleteVmSnapshots"`
	// Type a description for the database server VM.
	Description    *string `pulumi:"description"`
	LatestSnapshot *bool   `pulumi:"latestSnapshot"`
	// maintenance window configured to enable automated patching.
	MaintenanceTasks *NdbDbserverVmMaintenanceTasks `pulumi:"maintenanceTasks"`
	// Network profile id.
	NetworkProfileId string `pulumi:"networkProfileId"`
	NxClusterId      string `pulumi:"nxClusterId"`
	// Postgres database server vm
	PostgresDatabases []NdbDbserverVmPostgresDatabase `pulumi:"postgresDatabases"`
	// - (Optional) Unregister the database from NDB. Default value is false
	Remove *bool `pulumi:"remove"`
	// Snapshot id. If not given, it will use latest snapshot to provision db server vm.
	SnapshotId *string `pulumi:"snapshotId"`
	// - (Optional) Soft remove. Default will be false
	SoftRemove *bool `pulumi:"softRemove"`
	// software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
	SoftwareProfileId *string `pulumi:"softwareProfileId"`
	// SOftware Profile Version Id.
	SoftwareProfileVersionId *string            `pulumi:"softwareProfileVersionId"`
	Tags                     []NdbDbserverVmTag `pulumi:"tags"`
	// Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
	TimeMachineId *string `pulumi:"timeMachineId"`
	Timezone      *string `pulumi:"timezone"`
	// password of the NDB drive user account.
	VmPassword *string `pulumi:"vmPassword"`
}

// The set of arguments for constructing a NdbDbserverVm resource.
type NdbDbserverVmArgs struct {
	// Compute profile id.
	ComputeProfileId pulumi.StringInput
	Credentials      NdbDbserverVmCredentialArrayInput
	// database type. Valid values: postgres_database
	DatabaseType pulumi.StringInput
	// - (Optional) Delete the VM and associated storage. Default value is true
	Delete pulumi.BoolPtrInput
	// - (Optional) Delete volume grous. Default value is true
	DeleteVgs pulumi.BoolPtrInput
	// - (Optional) Delete the vm snapshots. Default is true
	DeleteVmSnapshots pulumi.BoolPtrInput
	// Type a description for the database server VM.
	Description    pulumi.StringPtrInput
	LatestSnapshot pulumi.BoolPtrInput
	// maintenance window configured to enable automated patching.
	MaintenanceTasks NdbDbserverVmMaintenanceTasksPtrInput
	// Network profile id.
	NetworkProfileId pulumi.StringInput
	NxClusterId      pulumi.StringInput
	// Postgres database server vm
	PostgresDatabases NdbDbserverVmPostgresDatabaseArrayInput
	// - (Optional) Unregister the database from NDB. Default value is false
	Remove pulumi.BoolPtrInput
	// Snapshot id. If not given, it will use latest snapshot to provision db server vm.
	SnapshotId pulumi.StringPtrInput
	// - (Optional) Soft remove. Default will be false
	SoftRemove pulumi.BoolPtrInput
	// software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
	SoftwareProfileId pulumi.StringPtrInput
	// SOftware Profile Version Id.
	SoftwareProfileVersionId pulumi.StringPtrInput
	Tags                     NdbDbserverVmTagArrayInput
	// Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
	TimeMachineId pulumi.StringPtrInput
	Timezone      pulumi.StringPtrInput
	// password of the NDB drive user account.
	VmPassword pulumi.StringPtrInput
}

func (NdbDbserverVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbDbserverVmArgs)(nil)).Elem()
}

type NdbDbserverVmInput interface {
	pulumi.Input

	ToNdbDbserverVmOutput() NdbDbserverVmOutput
	ToNdbDbserverVmOutputWithContext(ctx context.Context) NdbDbserverVmOutput
}

func (*NdbDbserverVm) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDbserverVm)(nil)).Elem()
}

func (i *NdbDbserverVm) ToNdbDbserverVmOutput() NdbDbserverVmOutput {
	return i.ToNdbDbserverVmOutputWithContext(context.Background())
}

func (i *NdbDbserverVm) ToNdbDbserverVmOutputWithContext(ctx context.Context) NdbDbserverVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDbserverVmOutput)
}

// NdbDbserverVmArrayInput is an input type that accepts NdbDbserverVmArray and NdbDbserverVmArrayOutput values.
// You can construct a concrete instance of `NdbDbserverVmArrayInput` via:
//
//	NdbDbserverVmArray{ NdbDbserverVmArgs{...} }
type NdbDbserverVmArrayInput interface {
	pulumi.Input

	ToNdbDbserverVmArrayOutput() NdbDbserverVmArrayOutput
	ToNdbDbserverVmArrayOutputWithContext(context.Context) NdbDbserverVmArrayOutput
}

type NdbDbserverVmArray []NdbDbserverVmInput

func (NdbDbserverVmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDbserverVm)(nil)).Elem()
}

func (i NdbDbserverVmArray) ToNdbDbserverVmArrayOutput() NdbDbserverVmArrayOutput {
	return i.ToNdbDbserverVmArrayOutputWithContext(context.Background())
}

func (i NdbDbserverVmArray) ToNdbDbserverVmArrayOutputWithContext(ctx context.Context) NdbDbserverVmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDbserverVmArrayOutput)
}

// NdbDbserverVmMapInput is an input type that accepts NdbDbserverVmMap and NdbDbserverVmMapOutput values.
// You can construct a concrete instance of `NdbDbserverVmMapInput` via:
//
//	NdbDbserverVmMap{ "key": NdbDbserverVmArgs{...} }
type NdbDbserverVmMapInput interface {
	pulumi.Input

	ToNdbDbserverVmMapOutput() NdbDbserverVmMapOutput
	ToNdbDbserverVmMapOutputWithContext(context.Context) NdbDbserverVmMapOutput
}

type NdbDbserverVmMap map[string]NdbDbserverVmInput

func (NdbDbserverVmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDbserverVm)(nil)).Elem()
}

func (i NdbDbserverVmMap) ToNdbDbserverVmMapOutput() NdbDbserverVmMapOutput {
	return i.ToNdbDbserverVmMapOutputWithContext(context.Background())
}

func (i NdbDbserverVmMap) ToNdbDbserverVmMapOutputWithContext(ctx context.Context) NdbDbserverVmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbDbserverVmMapOutput)
}

type NdbDbserverVmOutput struct{ *pulumi.OutputState }

func (NdbDbserverVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbDbserverVm)(nil)).Elem()
}

func (o NdbDbserverVmOutput) ToNdbDbserverVmOutput() NdbDbserverVmOutput {
	return o
}

func (o NdbDbserverVmOutput) ToNdbDbserverVmOutputWithContext(ctx context.Context) NdbDbserverVmOutput {
	return o
}

func (o NdbDbserverVmOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Compute profile id.
func (o NdbDbserverVmOutput) ComputeProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.ComputeProfileId }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) Credentials() NdbDbserverVmCredentialArrayOutput {
	return o.ApplyT(func(v *NdbDbserverVm) NdbDbserverVmCredentialArrayOutput { return v.Credentials }).(NdbDbserverVmCredentialArrayOutput)
}

// database type. Valid values: postgres_database
func (o NdbDbserverVmOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) DbserverClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.DbserverClusterId }).(pulumi.StringOutput)
}

// - (Optional) Delete the VM and associated storage. Default value is true
func (o NdbDbserverVmOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.BoolPtrOutput { return v.Delete }).(pulumi.BoolPtrOutput)
}

// - (Optional) Delete volume grous. Default value is true
func (o NdbDbserverVmOutput) DeleteVgs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.BoolPtrOutput { return v.DeleteVgs }).(pulumi.BoolPtrOutput)
}

// - (Optional) Delete the vm snapshots. Default is true
func (o NdbDbserverVmOutput) DeleteVmSnapshots() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.BoolPtrOutput { return v.DeleteVmSnapshots }).(pulumi.BoolPtrOutput)
}

// Type a description for the database server VM.
func (o NdbDbserverVmOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) EraDriveId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.EraDriveId }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) EraVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.EraVersion }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) Fqdns() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.Fqdns }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

func (o NdbDbserverVmOutput) LatestSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.BoolPtrOutput { return v.LatestSnapshot }).(pulumi.BoolPtrOutput)
}

func (o NdbDbserverVmOutput) MacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringArrayOutput { return v.MacAddresses }).(pulumi.StringArrayOutput)
}

// maintenance window configured to enable automated patching.
func (o NdbDbserverVmOutput) MaintenanceTasks() NdbDbserverVmMaintenanceTasksPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) NdbDbserverVmMaintenanceTasksPtrOutput { return v.MaintenanceTasks }).(NdbDbserverVmMaintenanceTasksPtrOutput)
}

func (o NdbDbserverVmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network profile id.
func (o NdbDbserverVmOutput) NetworkProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.NetworkProfileId }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) NxClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.NxClusterId }).(pulumi.StringOutput)
}

// Postgres database server vm
func (o NdbDbserverVmOutput) PostgresDatabases() NdbDbserverVmPostgresDatabaseArrayOutput {
	return o.ApplyT(func(v *NdbDbserverVm) NdbDbserverVmPostgresDatabaseArrayOutput { return v.PostgresDatabases }).(NdbDbserverVmPostgresDatabaseArrayOutput)
}

// List of all the properties
func (o NdbDbserverVmOutput) Properties() NdbDbserverVmPropertyArrayOutput {
	return o.ApplyT(func(v *NdbDbserverVm) NdbDbserverVmPropertyArrayOutput { return v.Properties }).(NdbDbserverVmPropertyArrayOutput)
}

// - (Optional) Unregister the database from NDB. Default value is false
func (o NdbDbserverVmOutput) Remove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.BoolPtrOutput { return v.Remove }).(pulumi.BoolPtrOutput)
}

// Snapshot id. If not given, it will use latest snapshot to provision db server vm.
func (o NdbDbserverVmOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// - (Optional) Soft remove. Default will be false
func (o NdbDbserverVmOutput) SoftRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.BoolPtrOutput { return v.SoftRemove }).(pulumi.BoolPtrOutput)
}

// software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
func (o NdbDbserverVmOutput) SoftwareProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringPtrOutput { return v.SoftwareProfileId }).(pulumi.StringPtrOutput)
}

// SOftware Profile Version Id.
func (o NdbDbserverVmOutput) SoftwareProfileVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringPtrOutput { return v.SoftwareProfileVersionId }).(pulumi.StringPtrOutput)
}

func (o NdbDbserverVmOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) Tags() NdbDbserverVmTagArrayOutput {
	return o.ApplyT(func(v *NdbDbserverVm) NdbDbserverVmTagArrayOutput { return v.Tags }).(NdbDbserverVmTagArrayOutput)
}

// Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
func (o NdbDbserverVmOutput) TimeMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringPtrOutput { return v.TimeMachineId }).(pulumi.StringPtrOutput)
}

func (o NdbDbserverVmOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

func (o NdbDbserverVmOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) VmClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.VmClusterName }).(pulumi.StringOutput)
}

func (o NdbDbserverVmOutput) VmClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.VmClusterUuid }).(pulumi.StringOutput)
}

// password of the NDB drive user account.
func (o NdbDbserverVmOutput) VmPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringPtrOutput { return v.VmPassword }).(pulumi.StringPtrOutput)
}

func (o NdbDbserverVmOutput) VmTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbDbserverVm) pulumi.StringOutput { return v.VmTimezone }).(pulumi.StringOutput)
}

type NdbDbserverVmArrayOutput struct{ *pulumi.OutputState }

func (NdbDbserverVmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbDbserverVm)(nil)).Elem()
}

func (o NdbDbserverVmArrayOutput) ToNdbDbserverVmArrayOutput() NdbDbserverVmArrayOutput {
	return o
}

func (o NdbDbserverVmArrayOutput) ToNdbDbserverVmArrayOutputWithContext(ctx context.Context) NdbDbserverVmArrayOutput {
	return o
}

func (o NdbDbserverVmArrayOutput) Index(i pulumi.IntInput) NdbDbserverVmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbDbserverVm {
		return vs[0].([]*NdbDbserverVm)[vs[1].(int)]
	}).(NdbDbserverVmOutput)
}

type NdbDbserverVmMapOutput struct{ *pulumi.OutputState }

func (NdbDbserverVmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbDbserverVm)(nil)).Elem()
}

func (o NdbDbserverVmMapOutput) ToNdbDbserverVmMapOutput() NdbDbserverVmMapOutput {
	return o
}

func (o NdbDbserverVmMapOutput) ToNdbDbserverVmMapOutputWithContext(ctx context.Context) NdbDbserverVmMapOutput {
	return o
}

func (o NdbDbserverVmMapOutput) MapIndex(k pulumi.StringInput) NdbDbserverVmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbDbserverVm {
		return vs[0].(map[string]*NdbDbserverVm)[vs[1].(string)]
	}).(NdbDbserverVmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDbserverVmInput)(nil)).Elem(), &NdbDbserverVm{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDbserverVmArrayInput)(nil)).Elem(), NdbDbserverVmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbDbserverVmMapInput)(nil)).Elem(), NdbDbserverVmMap{})
	pulumi.RegisterOutputType(NdbDbserverVmOutput{})
	pulumi.RegisterOutputType(NdbDbserverVmArrayOutput{})
	pulumi.RegisterOutputType(NdbDbserverVmMapOutput{})
}
