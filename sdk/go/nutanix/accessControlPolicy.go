// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create an access control policy based on the input parameters.
type AccessControlPolicy struct {
	pulumi.CustomResourceState

	// The version of the API.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// - (Optional) Categories for the Access Control Policy.
	Categories         AccessControlPolicyCategoryArrayOutput          `pulumi:"categories"`
	ContextFilterLists AccessControlPolicyContextFilterListArrayOutput `pulumi:"contextFilterLists"`
	// - (Optional) The description of Access Control Policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// - The Access Control Policy kind metadata.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// - (Optional) Name of the Access Control Policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// - (Optional) The reference to a user.
	OwnerReference AccessControlPolicyOwnerReferenceOutput `pulumi:"ownerReference"`
	// - (Required) The reference to a role.
	RoleReference AccessControlPolicyRoleReferenceOutput `pulumi:"roleReference"`
	// - The state of the Access Control Policy.
	State pulumi.StringOutput `pulumi:"state"`
	// - (Optional) The User group(s) being assigned a given role.
	UserGroupReferenceLists AccessControlPolicyUserGroupReferenceListArrayOutput `pulumi:"userGroupReferenceLists"`
	// - (Optional) The User(s) being assigned a given role.
	UserReferenceLists AccessControlPolicyUserReferenceListArrayOutput `pulumi:"userReferenceLists"`
}

// NewAccessControlPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessControlPolicy(ctx *pulumi.Context,
	name string, args *AccessControlPolicyArgs, opts ...pulumi.ResourceOption) (*AccessControlPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleReference == nil {
		return nil, errors.New("invalid value for required argument 'RoleReference'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessControlPolicy
	err := ctx.RegisterResource("nutanix:index/accessControlPolicy:AccessControlPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessControlPolicy gets an existing AccessControlPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessControlPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessControlPolicyState, opts ...pulumi.ResourceOption) (*AccessControlPolicy, error) {
	var resource AccessControlPolicy
	err := ctx.ReadResource("nutanix:index/accessControlPolicy:AccessControlPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessControlPolicy resources.
type accessControlPolicyState struct {
	// The version of the API.
	ApiVersion *string `pulumi:"apiVersion"`
	// - (Optional) Categories for the Access Control Policy.
	Categories         []AccessControlPolicyCategory          `pulumi:"categories"`
	ContextFilterLists []AccessControlPolicyContextFilterList `pulumi:"contextFilterLists"`
	// - (Optional) The description of Access Control Policy.
	Description *string `pulumi:"description"`
	// - The Access Control Policy kind metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// - (Optional) Name of the Access Control Policy.
	Name *string `pulumi:"name"`
	// - (Optional) The reference to a user.
	OwnerReference *AccessControlPolicyOwnerReference `pulumi:"ownerReference"`
	// - (Required) The reference to a role.
	RoleReference *AccessControlPolicyRoleReference `pulumi:"roleReference"`
	// - The state of the Access Control Policy.
	State *string `pulumi:"state"`
	// - (Optional) The User group(s) being assigned a given role.
	UserGroupReferenceLists []AccessControlPolicyUserGroupReferenceList `pulumi:"userGroupReferenceLists"`
	// - (Optional) The User(s) being assigned a given role.
	UserReferenceLists []AccessControlPolicyUserReferenceList `pulumi:"userReferenceLists"`
}

type AccessControlPolicyState struct {
	// The version of the API.
	ApiVersion pulumi.StringPtrInput
	// - (Optional) Categories for the Access Control Policy.
	Categories         AccessControlPolicyCategoryArrayInput
	ContextFilterLists AccessControlPolicyContextFilterListArrayInput
	// - (Optional) The description of Access Control Policy.
	Description pulumi.StringPtrInput
	// - The Access Control Policy kind metadata.
	Metadata pulumi.StringMapInput
	// - (Optional) Name of the Access Control Policy.
	Name pulumi.StringPtrInput
	// - (Optional) The reference to a user.
	OwnerReference AccessControlPolicyOwnerReferencePtrInput
	// - (Required) The reference to a role.
	RoleReference AccessControlPolicyRoleReferencePtrInput
	// - The state of the Access Control Policy.
	State pulumi.StringPtrInput
	// - (Optional) The User group(s) being assigned a given role.
	UserGroupReferenceLists AccessControlPolicyUserGroupReferenceListArrayInput
	// - (Optional) The User(s) being assigned a given role.
	UserReferenceLists AccessControlPolicyUserReferenceListArrayInput
}

func (AccessControlPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessControlPolicyState)(nil)).Elem()
}

type accessControlPolicyArgs struct {
	// - (Optional) Categories for the Access Control Policy.
	Categories         []AccessControlPolicyCategory          `pulumi:"categories"`
	ContextFilterLists []AccessControlPolicyContextFilterList `pulumi:"contextFilterLists"`
	// - (Optional) The description of Access Control Policy.
	Description *string `pulumi:"description"`
	// - (Optional) Name of the Access Control Policy.
	Name *string `pulumi:"name"`
	// - (Optional) The reference to a user.
	OwnerReference *AccessControlPolicyOwnerReference `pulumi:"ownerReference"`
	// - (Required) The reference to a role.
	RoleReference AccessControlPolicyRoleReference `pulumi:"roleReference"`
	// - (Optional) The User group(s) being assigned a given role.
	UserGroupReferenceLists []AccessControlPolicyUserGroupReferenceList `pulumi:"userGroupReferenceLists"`
	// - (Optional) The User(s) being assigned a given role.
	UserReferenceLists []AccessControlPolicyUserReferenceList `pulumi:"userReferenceLists"`
}

// The set of arguments for constructing a AccessControlPolicy resource.
type AccessControlPolicyArgs struct {
	// - (Optional) Categories for the Access Control Policy.
	Categories         AccessControlPolicyCategoryArrayInput
	ContextFilterLists AccessControlPolicyContextFilterListArrayInput
	// - (Optional) The description of Access Control Policy.
	Description pulumi.StringPtrInput
	// - (Optional) Name of the Access Control Policy.
	Name pulumi.StringPtrInput
	// - (Optional) The reference to a user.
	OwnerReference AccessControlPolicyOwnerReferencePtrInput
	// - (Required) The reference to a role.
	RoleReference AccessControlPolicyRoleReferenceInput
	// - (Optional) The User group(s) being assigned a given role.
	UserGroupReferenceLists AccessControlPolicyUserGroupReferenceListArrayInput
	// - (Optional) The User(s) being assigned a given role.
	UserReferenceLists AccessControlPolicyUserReferenceListArrayInput
}

func (AccessControlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessControlPolicyArgs)(nil)).Elem()
}

type AccessControlPolicyInput interface {
	pulumi.Input

	ToAccessControlPolicyOutput() AccessControlPolicyOutput
	ToAccessControlPolicyOutputWithContext(ctx context.Context) AccessControlPolicyOutput
}

func (*AccessControlPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlPolicy)(nil)).Elem()
}

func (i *AccessControlPolicy) ToAccessControlPolicyOutput() AccessControlPolicyOutput {
	return i.ToAccessControlPolicyOutputWithContext(context.Background())
}

func (i *AccessControlPolicy) ToAccessControlPolicyOutputWithContext(ctx context.Context) AccessControlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlPolicyOutput)
}

// AccessControlPolicyArrayInput is an input type that accepts AccessControlPolicyArray and AccessControlPolicyArrayOutput values.
// You can construct a concrete instance of `AccessControlPolicyArrayInput` via:
//
//	AccessControlPolicyArray{ AccessControlPolicyArgs{...} }
type AccessControlPolicyArrayInput interface {
	pulumi.Input

	ToAccessControlPolicyArrayOutput() AccessControlPolicyArrayOutput
	ToAccessControlPolicyArrayOutputWithContext(context.Context) AccessControlPolicyArrayOutput
}

type AccessControlPolicyArray []AccessControlPolicyInput

func (AccessControlPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessControlPolicy)(nil)).Elem()
}

func (i AccessControlPolicyArray) ToAccessControlPolicyArrayOutput() AccessControlPolicyArrayOutput {
	return i.ToAccessControlPolicyArrayOutputWithContext(context.Background())
}

func (i AccessControlPolicyArray) ToAccessControlPolicyArrayOutputWithContext(ctx context.Context) AccessControlPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlPolicyArrayOutput)
}

// AccessControlPolicyMapInput is an input type that accepts AccessControlPolicyMap and AccessControlPolicyMapOutput values.
// You can construct a concrete instance of `AccessControlPolicyMapInput` via:
//
//	AccessControlPolicyMap{ "key": AccessControlPolicyArgs{...} }
type AccessControlPolicyMapInput interface {
	pulumi.Input

	ToAccessControlPolicyMapOutput() AccessControlPolicyMapOutput
	ToAccessControlPolicyMapOutputWithContext(context.Context) AccessControlPolicyMapOutput
}

type AccessControlPolicyMap map[string]AccessControlPolicyInput

func (AccessControlPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessControlPolicy)(nil)).Elem()
}

func (i AccessControlPolicyMap) ToAccessControlPolicyMapOutput() AccessControlPolicyMapOutput {
	return i.ToAccessControlPolicyMapOutputWithContext(context.Background())
}

func (i AccessControlPolicyMap) ToAccessControlPolicyMapOutputWithContext(ctx context.Context) AccessControlPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlPolicyMapOutput)
}

type AccessControlPolicyOutput struct{ *pulumi.OutputState }

func (AccessControlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlPolicy)(nil)).Elem()
}

func (o AccessControlPolicyOutput) ToAccessControlPolicyOutput() AccessControlPolicyOutput {
	return o
}

func (o AccessControlPolicyOutput) ToAccessControlPolicyOutputWithContext(ctx context.Context) AccessControlPolicyOutput {
	return o
}

// The version of the API.
func (o AccessControlPolicyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessControlPolicy) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// - (Optional) Categories for the Access Control Policy.
func (o AccessControlPolicyOutput) Categories() AccessControlPolicyCategoryArrayOutput {
	return o.ApplyT(func(v *AccessControlPolicy) AccessControlPolicyCategoryArrayOutput { return v.Categories }).(AccessControlPolicyCategoryArrayOutput)
}

func (o AccessControlPolicyOutput) ContextFilterLists() AccessControlPolicyContextFilterListArrayOutput {
	return o.ApplyT(func(v *AccessControlPolicy) AccessControlPolicyContextFilterListArrayOutput {
		return v.ContextFilterLists
	}).(AccessControlPolicyContextFilterListArrayOutput)
}

// - (Optional) The description of Access Control Policy.
func (o AccessControlPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessControlPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// - The Access Control Policy kind metadata.
func (o AccessControlPolicyOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccessControlPolicy) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// - (Optional) Name of the Access Control Policy.
func (o AccessControlPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessControlPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - (Optional) The reference to a user.
func (o AccessControlPolicyOutput) OwnerReference() AccessControlPolicyOwnerReferenceOutput {
	return o.ApplyT(func(v *AccessControlPolicy) AccessControlPolicyOwnerReferenceOutput { return v.OwnerReference }).(AccessControlPolicyOwnerReferenceOutput)
}

// - (Required) The reference to a role.
func (o AccessControlPolicyOutput) RoleReference() AccessControlPolicyRoleReferenceOutput {
	return o.ApplyT(func(v *AccessControlPolicy) AccessControlPolicyRoleReferenceOutput { return v.RoleReference }).(AccessControlPolicyRoleReferenceOutput)
}

// - The state of the Access Control Policy.
func (o AccessControlPolicyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessControlPolicy) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// - (Optional) The User group(s) being assigned a given role.
func (o AccessControlPolicyOutput) UserGroupReferenceLists() AccessControlPolicyUserGroupReferenceListArrayOutput {
	return o.ApplyT(func(v *AccessControlPolicy) AccessControlPolicyUserGroupReferenceListArrayOutput {
		return v.UserGroupReferenceLists
	}).(AccessControlPolicyUserGroupReferenceListArrayOutput)
}

// - (Optional) The User(s) being assigned a given role.
func (o AccessControlPolicyOutput) UserReferenceLists() AccessControlPolicyUserReferenceListArrayOutput {
	return o.ApplyT(func(v *AccessControlPolicy) AccessControlPolicyUserReferenceListArrayOutput {
		return v.UserReferenceLists
	}).(AccessControlPolicyUserReferenceListArrayOutput)
}

type AccessControlPolicyArrayOutput struct{ *pulumi.OutputState }

func (AccessControlPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessControlPolicy)(nil)).Elem()
}

func (o AccessControlPolicyArrayOutput) ToAccessControlPolicyArrayOutput() AccessControlPolicyArrayOutput {
	return o
}

func (o AccessControlPolicyArrayOutput) ToAccessControlPolicyArrayOutputWithContext(ctx context.Context) AccessControlPolicyArrayOutput {
	return o
}

func (o AccessControlPolicyArrayOutput) Index(i pulumi.IntInput) AccessControlPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessControlPolicy {
		return vs[0].([]*AccessControlPolicy)[vs[1].(int)]
	}).(AccessControlPolicyOutput)
}

type AccessControlPolicyMapOutput struct{ *pulumi.OutputState }

func (AccessControlPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessControlPolicy)(nil)).Elem()
}

func (o AccessControlPolicyMapOutput) ToAccessControlPolicyMapOutput() AccessControlPolicyMapOutput {
	return o
}

func (o AccessControlPolicyMapOutput) ToAccessControlPolicyMapOutputWithContext(ctx context.Context) AccessControlPolicyMapOutput {
	return o
}

func (o AccessControlPolicyMapOutput) MapIndex(k pulumi.StringInput) AccessControlPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessControlPolicy {
		return vs[0].(map[string]*AccessControlPolicy)[vs[1].(string)]
	}).(AccessControlPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessControlPolicyInput)(nil)).Elem(), &AccessControlPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessControlPolicyArrayInput)(nil)).Elem(), AccessControlPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessControlPolicyMapInput)(nil)).Elem(), AccessControlPolicyMap{})
	pulumi.RegisterOutputType(AccessControlPolicyOutput{})
	pulumi.RegisterOutputType(AccessControlPolicyArrayOutput{})
	pulumi.RegisterOutputType(AccessControlPolicyMapOutput{})
}
