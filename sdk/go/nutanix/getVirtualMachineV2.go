// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves configuration details for a Virtual Machine.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.LookupVirtualMachineV2(ctx, &nutanix.LookupVirtualMachineV2Args{
//				ExtId: "{{ ext_id of vm }}",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVirtualMachineV2(ctx *pulumi.Context, args *LookupVirtualMachineV2Args, opts ...pulumi.InvokeOption) (*LookupVirtualMachineV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualMachineV2Result
	err := ctx.Invoke("nutanix:index/getVirtualMachineV2:getVirtualMachineV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualMachineV2.
type LookupVirtualMachineV2Args struct {
	// Represents virtual machine UUID
	ExtId string `pulumi:"extId"`
}

// A collection of values returned by getVirtualMachineV2.
type LookupVirtualMachineV2Result struct {
	// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
	ApcConfigs        []GetVirtualMachineV2ApcConfig        `pulumi:"apcConfigs"`
	AvailabilityZones []GetVirtualMachineV2AvailabilityZone `pulumi:"availabilityZones"`
	// BIOS UUID of the VM. It should be of type UUID.
	BiosUuid string `pulumi:"biosUuid"`
	// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
	BootConfigs []GetVirtualMachineV2BootConfig `pulumi:"bootConfigs"`
	// Categories for the VM.
	Categories []GetVirtualMachineV2Category `pulumi:"categories"`
	// CD-ROMs attached to the VM.
	CdRoms []GetVirtualMachineV2CdRom `pulumi:"cdRoms"`
	// Reference to a cluster.
	Clusters []GetVirtualMachineV2Cluster `pulumi:"clusters"`
	// VM creation time
	CreateTime string `pulumi:"createTime"`
	// VM description
	Description string `pulumi:"description"`
	// Disks attached to the VM.
	Disks []GetVirtualMachineV2Disk `pulumi:"disks"`
	// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor
	EnabledCpuFeatures []string `pulumi:"enabledCpuFeatures"`
	// A globally unique identifier of an instance that is suitable for external consumption.
	ExtId string `pulumi:"extId"`
	// Generation UUID of the VM. It should be of type UUID.
	GenerationUuid string `pulumi:"generationUuid"`
	// GPUs attached to the VM.
	Gpuses []GetVirtualMachineV2Gpus `pulumi:"gpuses"`
	// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
	GuestCustomizations []GetVirtualMachineV2GuestCustomization `pulumi:"guestCustomizations"`
	// The details about Nutanix Guest Tools for a VM.
	GuestTools []GetVirtualMachineV2GuestTool `pulumi:"guestTools"`
	// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	HardwareClockTimezone string `pulumi:"hardwareClockTimezone"`
	// Reference to the host, the VM is running on.
	Hosts []GetVirtualMachineV2Host `pulumi:"hosts"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
	IsAgentVm bool `pulumi:"isAgentVm"`
	// Indicates whether to remove AHV branding from VM firmware tables or not.
	IsBrandingEnabled bool `pulumi:"isBrandingEnabled"`
	// Indicates whether the VM CPU hotplug is enabled.
	IsCpuHotplugEnabled bool `pulumi:"isCpuHotplugEnabled"`
	// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
	IsCpuPassthroughEnabled bool `pulumi:"isCpuPassthroughEnabled"`
	// Indicates whether the vGPU console is enabled or not.
	IsGpuConsoleEnabled bool `pulumi:"isGpuConsoleEnabled"`
	// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
	IsMemoryOvercommitEnabled bool `pulumi:"isMemoryOvercommitEnabled"`
	// Indicates whether the VM SCSI controller is enabled.
	IsScsiControllerEnabled bool `pulumi:"isScsiControllerEnabled"`
	// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
	IsVcpuHardPinningEnabled bool `pulumi:"isVcpuHardPinningEnabled"`
	// Indicates whether the VGA console should be disabled or not.
	IsVgaConsoleEnabled bool `pulumi:"isVgaConsoleEnabled"`
	// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
	MachineType string `pulumi:"machineType"`
	// Memory size in bytes.
	MemorySizeBytes int `pulumi:"memorySizeBytes"`
	// Name of the GPU resource.
	Name string `pulumi:"name"`
	// NICs attached to the VM.
	Nics []GetVirtualMachineV2Nic `pulumi:"nics"`
	// Number of cores per socket.
	NumCoresPerSocket int `pulumi:"numCoresPerSocket"`
	// Number of NUMA nodes. 0 means NUMA is disabled.
	NumNumaNodes int `pulumi:"numNumaNodes"`
	// Number of vCPU sockets.
	NumSockets int `pulumi:"numSockets"`
	// Number of threads per core
	NumThreadsPerCore int `pulumi:"numThreadsPerCore"`
	// Ownership information for the VM.
	OwnershipInfos []GetVirtualMachineV2OwnershipInfo `pulumi:"ownershipInfos"`
	PowerState     string                             `pulumi:"powerState"`
	// Status of protection policy applied to this VM.
	ProtectionPolicyStates []GetVirtualMachineV2ProtectionPolicyState `pulumi:"protectionPolicyStates"`
	// The type of protection applied on a VM. PD_PROTECTED indicates a VM is protected using the Prism Element. RULE_PROTECTED indicates a VM protection using the Prism Central.
	ProtectionType string `pulumi:"protectionType"`
	// Serial ports configured on the VM.
	SerialPorts []GetVirtualMachineV2SerialPort `pulumi:"serialPorts"`
	// Reference to an entity that the VM should be cloned or created from
	Sources []GetVirtualMachineV2Source `pulumi:"sources"`
	// Storage configuration for VM disks
	StorageConfigs []GetVirtualMachineV2StorageConfig `pulumi:"storageConfigs"`
	// VM last updated time.
	UpdateTime string `pulumi:"updateTime"`
	// Indicates how the vTPM for the VM should be configured.
	VtpmConfigs []GetVirtualMachineV2VtpmConfig `pulumi:"vtpmConfigs"`
}

func LookupVirtualMachineV2Output(ctx *pulumi.Context, args LookupVirtualMachineV2OutputArgs, opts ...pulumi.InvokeOption) LookupVirtualMachineV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVirtualMachineV2ResultOutput, error) {
			args := v.(LookupVirtualMachineV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getVirtualMachineV2:getVirtualMachineV2", args, LookupVirtualMachineV2ResultOutput{}, options).(LookupVirtualMachineV2ResultOutput), nil
		}).(LookupVirtualMachineV2ResultOutput)
}

// A collection of arguments for invoking getVirtualMachineV2.
type LookupVirtualMachineV2OutputArgs struct {
	// Represents virtual machine UUID
	ExtId pulumi.StringInput `pulumi:"extId"`
}

func (LookupVirtualMachineV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineV2Args)(nil)).Elem()
}

// A collection of values returned by getVirtualMachineV2.
type LookupVirtualMachineV2ResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualMachineV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineV2Result)(nil)).Elem()
}

func (o LookupVirtualMachineV2ResultOutput) ToLookupVirtualMachineV2ResultOutput() LookupVirtualMachineV2ResultOutput {
	return o
}

func (o LookupVirtualMachineV2ResultOutput) ToLookupVirtualMachineV2ResultOutputWithContext(ctx context.Context) LookupVirtualMachineV2ResultOutput {
	return o
}

// Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
func (o LookupVirtualMachineV2ResultOutput) ApcConfigs() GetVirtualMachineV2ApcConfigArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2ApcConfig { return v.ApcConfigs }).(GetVirtualMachineV2ApcConfigArrayOutput)
}

func (o LookupVirtualMachineV2ResultOutput) AvailabilityZones() GetVirtualMachineV2AvailabilityZoneArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2AvailabilityZone { return v.AvailabilityZones }).(GetVirtualMachineV2AvailabilityZoneArrayOutput)
}

// BIOS UUID of the VM. It should be of type UUID.
func (o LookupVirtualMachineV2ResultOutput) BiosUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.BiosUuid }).(pulumi.StringOutput)
}

// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
func (o LookupVirtualMachineV2ResultOutput) BootConfigs() GetVirtualMachineV2BootConfigArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2BootConfig { return v.BootConfigs }).(GetVirtualMachineV2BootConfigArrayOutput)
}

// Categories for the VM.
func (o LookupVirtualMachineV2ResultOutput) Categories() GetVirtualMachineV2CategoryArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2Category { return v.Categories }).(GetVirtualMachineV2CategoryArrayOutput)
}

// CD-ROMs attached to the VM.
func (o LookupVirtualMachineV2ResultOutput) CdRoms() GetVirtualMachineV2CdRomArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2CdRom { return v.CdRoms }).(GetVirtualMachineV2CdRomArrayOutput)
}

// Reference to a cluster.
func (o LookupVirtualMachineV2ResultOutput) Clusters() GetVirtualMachineV2ClusterArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2Cluster { return v.Clusters }).(GetVirtualMachineV2ClusterArrayOutput)
}

// VM creation time
func (o LookupVirtualMachineV2ResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.CreateTime }).(pulumi.StringOutput)
}

// VM description
func (o LookupVirtualMachineV2ResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.Description }).(pulumi.StringOutput)
}

// Disks attached to the VM.
func (o LookupVirtualMachineV2ResultOutput) Disks() GetVirtualMachineV2DiskArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2Disk { return v.Disks }).(GetVirtualMachineV2DiskArrayOutput)
}

// The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor
func (o LookupVirtualMachineV2ResultOutput) EnabledCpuFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []string { return v.EnabledCpuFeatures }).(pulumi.StringArrayOutput)
}

// A globally unique identifier of an instance that is suitable for external consumption.
func (o LookupVirtualMachineV2ResultOutput) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.ExtId }).(pulumi.StringOutput)
}

// Generation UUID of the VM. It should be of type UUID.
func (o LookupVirtualMachineV2ResultOutput) GenerationUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.GenerationUuid }).(pulumi.StringOutput)
}

// GPUs attached to the VM.
func (o LookupVirtualMachineV2ResultOutput) Gpuses() GetVirtualMachineV2GpusArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2Gpus { return v.Gpuses }).(GetVirtualMachineV2GpusArrayOutput)
}

// Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
func (o LookupVirtualMachineV2ResultOutput) GuestCustomizations() GetVirtualMachineV2GuestCustomizationArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2GuestCustomization {
		return v.GuestCustomizations
	}).(GetVirtualMachineV2GuestCustomizationArrayOutput)
}

// The details about Nutanix Guest Tools for a VM.
func (o LookupVirtualMachineV2ResultOutput) GuestTools() GetVirtualMachineV2GuestToolArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2GuestTool { return v.GuestTools }).(GetVirtualMachineV2GuestToolArrayOutput)
}

// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
func (o LookupVirtualMachineV2ResultOutput) HardwareClockTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.HardwareClockTimezone }).(pulumi.StringOutput)
}

// Reference to the host, the VM is running on.
func (o LookupVirtualMachineV2ResultOutput) Hosts() GetVirtualMachineV2HostArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2Host { return v.Hosts }).(GetVirtualMachineV2HostArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVirtualMachineV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
func (o LookupVirtualMachineV2ResultOutput) IsAgentVm() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsAgentVm }).(pulumi.BoolOutput)
}

// Indicates whether to remove AHV branding from VM firmware tables or not.
func (o LookupVirtualMachineV2ResultOutput) IsBrandingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsBrandingEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the VM CPU hotplug is enabled.
func (o LookupVirtualMachineV2ResultOutput) IsCpuHotplugEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsCpuHotplugEnabled }).(pulumi.BoolOutput)
}

// Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
func (o LookupVirtualMachineV2ResultOutput) IsCpuPassthroughEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsCpuPassthroughEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the vGPU console is enabled or not.
func (o LookupVirtualMachineV2ResultOutput) IsGpuConsoleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsGpuConsoleEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
func (o LookupVirtualMachineV2ResultOutput) IsMemoryOvercommitEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsMemoryOvercommitEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the VM SCSI controller is enabled.
func (o LookupVirtualMachineV2ResultOutput) IsScsiControllerEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsScsiControllerEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
func (o LookupVirtualMachineV2ResultOutput) IsVcpuHardPinningEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsVcpuHardPinningEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the VGA console should be disabled or not.
func (o LookupVirtualMachineV2ResultOutput) IsVgaConsoleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) bool { return v.IsVgaConsoleEnabled }).(pulumi.BoolOutput)
}

// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
func (o LookupVirtualMachineV2ResultOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.MachineType }).(pulumi.StringOutput)
}

// Memory size in bytes.
func (o LookupVirtualMachineV2ResultOutput) MemorySizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) int { return v.MemorySizeBytes }).(pulumi.IntOutput)
}

// Name of the GPU resource.
func (o LookupVirtualMachineV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.Name }).(pulumi.StringOutput)
}

// NICs attached to the VM.
func (o LookupVirtualMachineV2ResultOutput) Nics() GetVirtualMachineV2NicArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2Nic { return v.Nics }).(GetVirtualMachineV2NicArrayOutput)
}

// Number of cores per socket.
func (o LookupVirtualMachineV2ResultOutput) NumCoresPerSocket() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) int { return v.NumCoresPerSocket }).(pulumi.IntOutput)
}

// Number of NUMA nodes. 0 means NUMA is disabled.
func (o LookupVirtualMachineV2ResultOutput) NumNumaNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) int { return v.NumNumaNodes }).(pulumi.IntOutput)
}

// Number of vCPU sockets.
func (o LookupVirtualMachineV2ResultOutput) NumSockets() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) int { return v.NumSockets }).(pulumi.IntOutput)
}

// Number of threads per core
func (o LookupVirtualMachineV2ResultOutput) NumThreadsPerCore() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) int { return v.NumThreadsPerCore }).(pulumi.IntOutput)
}

// Ownership information for the VM.
func (o LookupVirtualMachineV2ResultOutput) OwnershipInfos() GetVirtualMachineV2OwnershipInfoArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2OwnershipInfo { return v.OwnershipInfos }).(GetVirtualMachineV2OwnershipInfoArrayOutput)
}

func (o LookupVirtualMachineV2ResultOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.PowerState }).(pulumi.StringOutput)
}

// Status of protection policy applied to this VM.
func (o LookupVirtualMachineV2ResultOutput) ProtectionPolicyStates() GetVirtualMachineV2ProtectionPolicyStateArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2ProtectionPolicyState {
		return v.ProtectionPolicyStates
	}).(GetVirtualMachineV2ProtectionPolicyStateArrayOutput)
}

// The type of protection applied on a VM. PD_PROTECTED indicates a VM is protected using the Prism Element. RULE_PROTECTED indicates a VM protection using the Prism Central.
func (o LookupVirtualMachineV2ResultOutput) ProtectionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.ProtectionType }).(pulumi.StringOutput)
}

// Serial ports configured on the VM.
func (o LookupVirtualMachineV2ResultOutput) SerialPorts() GetVirtualMachineV2SerialPortArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2SerialPort { return v.SerialPorts }).(GetVirtualMachineV2SerialPortArrayOutput)
}

// Reference to an entity that the VM should be cloned or created from
func (o LookupVirtualMachineV2ResultOutput) Sources() GetVirtualMachineV2SourceArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2Source { return v.Sources }).(GetVirtualMachineV2SourceArrayOutput)
}

// Storage configuration for VM disks
func (o LookupVirtualMachineV2ResultOutput) StorageConfigs() GetVirtualMachineV2StorageConfigArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2StorageConfig { return v.StorageConfigs }).(GetVirtualMachineV2StorageConfigArrayOutput)
}

// VM last updated time.
func (o LookupVirtualMachineV2ResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Indicates how the vTPM for the VM should be configured.
func (o LookupVirtualMachineV2ResultOutput) VtpmConfigs() GetVirtualMachineV2VtpmConfigArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineV2Result) []GetVirtualMachineV2VtpmConfig { return v.VtpmConfigs }).(GetVirtualMachineV2VtpmConfigArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualMachineV2ResultOutput{})
}
