// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage time machine data availability across all the registered Nutanix clusters in NDB.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbTmsCluster(ctx, "cls", &nutanix.NdbTmsClusterArgs{
//				NxClusterId:   pulumi.String("{{ cluster_id }}"),
//				SlaId:         pulumi.String("{{ sla_id }}"),
//				TimeMachineId: pulumi.String("{{ tms_id }}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbTmsCluster struct {
	pulumi.CustomResourceState

	// created date of time machine associated with cluster
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// modified date of time machine associated with cluster
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// description of nutanix cluster associated with time machine
	Description pulumi.StringOutput `pulumi:"description"`
	// log drive id
	LogDriveId pulumi.StringOutput `pulumi:"logDriveId"`
	// log drive status of time machine
	LogDriveStatus pulumi.StringOutput `pulumi:"logDriveStatus"`
	// Nutanix cluster id on the associated registered clusters.
	NxClusterId pulumi.StringOutput `pulumi:"nxClusterId"`
	// owner id
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// schedule id of the data associated with time machine
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	// SLA id for the associated cluster.
	SlaId pulumi.StringOutput `pulumi:"slaId"`
	// source is present or not
	Source pulumi.BoolOutput `pulumi:"source"`
	// source clusters in time machines
	SourceClusters pulumi.StringArrayOutput `pulumi:"sourceClusters"`
	// status of the cluster associated with time machine
	Status pulumi.StringOutput `pulumi:"status"`
	// time machine id
	TimeMachineId pulumi.StringOutput `pulumi:"timeMachineId"`
	// Default value is "OTHER"
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewNdbTmsCluster registers a new resource with the given unique name, arguments, and options.
func NewNdbTmsCluster(ctx *pulumi.Context,
	name string, args *NdbTmsClusterArgs, opts ...pulumi.ResourceOption) (*NdbTmsCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NxClusterId == nil {
		return nil, errors.New("invalid value for required argument 'NxClusterId'")
	}
	if args.SlaId == nil {
		return nil, errors.New("invalid value for required argument 'SlaId'")
	}
	if args.TimeMachineId == nil {
		return nil, errors.New("invalid value for required argument 'TimeMachineId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbTmsCluster
	err := ctx.RegisterResource("nutanix:index/ndbTmsCluster:NdbTmsCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbTmsCluster gets an existing NdbTmsCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbTmsCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbTmsClusterState, opts ...pulumi.ResourceOption) (*NdbTmsCluster, error) {
	var resource NdbTmsCluster
	err := ctx.ReadResource("nutanix:index/ndbTmsCluster:NdbTmsCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbTmsCluster resources.
type ndbTmsClusterState struct {
	// created date of time machine associated with cluster
	DateCreated *string `pulumi:"dateCreated"`
	// modified date of time machine associated with cluster
	DateModified *string `pulumi:"dateModified"`
	// description of nutanix cluster associated with time machine
	Description *string `pulumi:"description"`
	// log drive id
	LogDriveId *string `pulumi:"logDriveId"`
	// log drive status of time machine
	LogDriveStatus *string `pulumi:"logDriveStatus"`
	// Nutanix cluster id on the associated registered clusters.
	NxClusterId *string `pulumi:"nxClusterId"`
	// owner id
	OwnerId *string `pulumi:"ownerId"`
	// schedule id of the data associated with time machine
	ScheduleId *string `pulumi:"scheduleId"`
	// SLA id for the associated cluster.
	SlaId *string `pulumi:"slaId"`
	// source is present or not
	Source *bool `pulumi:"source"`
	// source clusters in time machines
	SourceClusters []string `pulumi:"sourceClusters"`
	// status of the cluster associated with time machine
	Status *string `pulumi:"status"`
	// time machine id
	TimeMachineId *string `pulumi:"timeMachineId"`
	// Default value is "OTHER"
	Type *string `pulumi:"type"`
}

type NdbTmsClusterState struct {
	// created date of time machine associated with cluster
	DateCreated pulumi.StringPtrInput
	// modified date of time machine associated with cluster
	DateModified pulumi.StringPtrInput
	// description of nutanix cluster associated with time machine
	Description pulumi.StringPtrInput
	// log drive id
	LogDriveId pulumi.StringPtrInput
	// log drive status of time machine
	LogDriveStatus pulumi.StringPtrInput
	// Nutanix cluster id on the associated registered clusters.
	NxClusterId pulumi.StringPtrInput
	// owner id
	OwnerId pulumi.StringPtrInput
	// schedule id of the data associated with time machine
	ScheduleId pulumi.StringPtrInput
	// SLA id for the associated cluster.
	SlaId pulumi.StringPtrInput
	// source is present or not
	Source pulumi.BoolPtrInput
	// source clusters in time machines
	SourceClusters pulumi.StringArrayInput
	// status of the cluster associated with time machine
	Status pulumi.StringPtrInput
	// time machine id
	TimeMachineId pulumi.StringPtrInput
	// Default value is "OTHER"
	Type pulumi.StringPtrInput
}

func (NdbTmsClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbTmsClusterState)(nil)).Elem()
}

type ndbTmsClusterArgs struct {
	// Nutanix cluster id on the associated registered clusters.
	NxClusterId string `pulumi:"nxClusterId"`
	// SLA id for the associated cluster.
	SlaId string `pulumi:"slaId"`
	// time machine id
	TimeMachineId string `pulumi:"timeMachineId"`
	// Default value is "OTHER"
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NdbTmsCluster resource.
type NdbTmsClusterArgs struct {
	// Nutanix cluster id on the associated registered clusters.
	NxClusterId pulumi.StringInput
	// SLA id for the associated cluster.
	SlaId pulumi.StringInput
	// time machine id
	TimeMachineId pulumi.StringInput
	// Default value is "OTHER"
	Type pulumi.StringPtrInput
}

func (NdbTmsClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbTmsClusterArgs)(nil)).Elem()
}

type NdbTmsClusterInput interface {
	pulumi.Input

	ToNdbTmsClusterOutput() NdbTmsClusterOutput
	ToNdbTmsClusterOutputWithContext(ctx context.Context) NdbTmsClusterOutput
}

func (*NdbTmsCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbTmsCluster)(nil)).Elem()
}

func (i *NdbTmsCluster) ToNdbTmsClusterOutput() NdbTmsClusterOutput {
	return i.ToNdbTmsClusterOutputWithContext(context.Background())
}

func (i *NdbTmsCluster) ToNdbTmsClusterOutputWithContext(ctx context.Context) NdbTmsClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbTmsClusterOutput)
}

// NdbTmsClusterArrayInput is an input type that accepts NdbTmsClusterArray and NdbTmsClusterArrayOutput values.
// You can construct a concrete instance of `NdbTmsClusterArrayInput` via:
//
//	NdbTmsClusterArray{ NdbTmsClusterArgs{...} }
type NdbTmsClusterArrayInput interface {
	pulumi.Input

	ToNdbTmsClusterArrayOutput() NdbTmsClusterArrayOutput
	ToNdbTmsClusterArrayOutputWithContext(context.Context) NdbTmsClusterArrayOutput
}

type NdbTmsClusterArray []NdbTmsClusterInput

func (NdbTmsClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbTmsCluster)(nil)).Elem()
}

func (i NdbTmsClusterArray) ToNdbTmsClusterArrayOutput() NdbTmsClusterArrayOutput {
	return i.ToNdbTmsClusterArrayOutputWithContext(context.Background())
}

func (i NdbTmsClusterArray) ToNdbTmsClusterArrayOutputWithContext(ctx context.Context) NdbTmsClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbTmsClusterArrayOutput)
}

// NdbTmsClusterMapInput is an input type that accepts NdbTmsClusterMap and NdbTmsClusterMapOutput values.
// You can construct a concrete instance of `NdbTmsClusterMapInput` via:
//
//	NdbTmsClusterMap{ "key": NdbTmsClusterArgs{...} }
type NdbTmsClusterMapInput interface {
	pulumi.Input

	ToNdbTmsClusterMapOutput() NdbTmsClusterMapOutput
	ToNdbTmsClusterMapOutputWithContext(context.Context) NdbTmsClusterMapOutput
}

type NdbTmsClusterMap map[string]NdbTmsClusterInput

func (NdbTmsClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbTmsCluster)(nil)).Elem()
}

func (i NdbTmsClusterMap) ToNdbTmsClusterMapOutput() NdbTmsClusterMapOutput {
	return i.ToNdbTmsClusterMapOutputWithContext(context.Background())
}

func (i NdbTmsClusterMap) ToNdbTmsClusterMapOutputWithContext(ctx context.Context) NdbTmsClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbTmsClusterMapOutput)
}

type NdbTmsClusterOutput struct{ *pulumi.OutputState }

func (NdbTmsClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbTmsCluster)(nil)).Elem()
}

func (o NdbTmsClusterOutput) ToNdbTmsClusterOutput() NdbTmsClusterOutput {
	return o
}

func (o NdbTmsClusterOutput) ToNdbTmsClusterOutputWithContext(ctx context.Context) NdbTmsClusterOutput {
	return o
}

// created date of time machine associated with cluster
func (o NdbTmsClusterOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// modified date of time machine associated with cluster
func (o NdbTmsClusterOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// description of nutanix cluster associated with time machine
func (o NdbTmsClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// log drive id
func (o NdbTmsClusterOutput) LogDriveId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.LogDriveId }).(pulumi.StringOutput)
}

// log drive status of time machine
func (o NdbTmsClusterOutput) LogDriveStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.LogDriveStatus }).(pulumi.StringOutput)
}

// Nutanix cluster id on the associated registered clusters.
func (o NdbTmsClusterOutput) NxClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.NxClusterId }).(pulumi.StringOutput)
}

// owner id
func (o NdbTmsClusterOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// schedule id of the data associated with time machine
func (o NdbTmsClusterOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

// SLA id for the associated cluster.
func (o NdbTmsClusterOutput) SlaId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.SlaId }).(pulumi.StringOutput)
}

// source is present or not
func (o NdbTmsClusterOutput) Source() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.BoolOutput { return v.Source }).(pulumi.BoolOutput)
}

// source clusters in time machines
func (o NdbTmsClusterOutput) SourceClusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringArrayOutput { return v.SourceClusters }).(pulumi.StringArrayOutput)
}

// status of the cluster associated with time machine
func (o NdbTmsClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// time machine id
func (o NdbTmsClusterOutput) TimeMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringOutput { return v.TimeMachineId }).(pulumi.StringOutput)
}

// Default value is "OTHER"
func (o NdbTmsClusterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbTmsCluster) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type NdbTmsClusterArrayOutput struct{ *pulumi.OutputState }

func (NdbTmsClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbTmsCluster)(nil)).Elem()
}

func (o NdbTmsClusterArrayOutput) ToNdbTmsClusterArrayOutput() NdbTmsClusterArrayOutput {
	return o
}

func (o NdbTmsClusterArrayOutput) ToNdbTmsClusterArrayOutputWithContext(ctx context.Context) NdbTmsClusterArrayOutput {
	return o
}

func (o NdbTmsClusterArrayOutput) Index(i pulumi.IntInput) NdbTmsClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbTmsCluster {
		return vs[0].([]*NdbTmsCluster)[vs[1].(int)]
	}).(NdbTmsClusterOutput)
}

type NdbTmsClusterMapOutput struct{ *pulumi.OutputState }

func (NdbTmsClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbTmsCluster)(nil)).Elem()
}

func (o NdbTmsClusterMapOutput) ToNdbTmsClusterMapOutput() NdbTmsClusterMapOutput {
	return o
}

func (o NdbTmsClusterMapOutput) ToNdbTmsClusterMapOutputWithContext(ctx context.Context) NdbTmsClusterMapOutput {
	return o
}

func (o NdbTmsClusterMapOutput) MapIndex(k pulumi.StringInput) NdbTmsClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbTmsCluster {
		return vs[0].(map[string]*NdbTmsCluster)[vs[1].(string)]
	}).(NdbTmsClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbTmsClusterInput)(nil)).Elem(), &NdbTmsCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbTmsClusterArrayInput)(nil)).Elem(), NdbTmsClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbTmsClusterMapInput)(nil)).Elem(), NdbTmsClusterMap{})
	pulumi.RegisterOutputType(NdbTmsClusterOutput{})
	pulumi.RegisterOutputType(NdbTmsClusterArrayOutput{})
	pulumi.RegisterOutputType(NdbTmsClusterMapOutput{})
}
