// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a database instance in Nutanix Database Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			db1, err := nutanix.LookupNdbDatabase(ctx, &nutanix.LookupNdbDatabaseArgs{
//				DatabaseId: "<sample-id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("db1Output", db1)
//			return nil
//		})
//	}
//
// ```
func LookupNdbDatabase(ctx *pulumi.Context, args *LookupNdbDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupNdbDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNdbDatabaseResult
	err := ctx.Invoke("nutanix:index/getNdbDatabase:getNdbDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNdbDatabase.
type LookupNdbDatabaseArgs struct {
	// ID of database instance
	DatabaseId string `pulumi:"databaseId"`
	// - tags attached
	Tags []GetNdbDatabaseTag `pulumi:"tags"`
}

// A collection of values returned by getNdbDatabase.
type LookupNdbDatabaseResult struct {
	// - if cloned
	Clone bool `pulumi:"clone"`
	// - if clustered or not
	Clustered           bool   `pulumi:"clustered"`
	DatabaseClusterType string `pulumi:"databaseClusterType"`
	DatabaseId          string `pulumi:"databaseId"`
	// - database instance name
	DatabaseName string `pulumi:"databaseName"`
	// - nodes info
	DatabaseNodes []GetNdbDatabaseDatabaseNode `pulumi:"databaseNodes"`
	Databases     map[string]string            `pulumi:"databases"`
	// - creation date
	DateCreated string `pulumi:"dateCreated"`
	// - date modified
	DateModified string `pulumi:"dateModified"`
	// - NA
	DbserverLogicalCluster map[string]string `pulumi:"dbserverLogicalCluster"`
	// - NA
	DbserverLogicalClusterId string `pulumi:"dbserverLogicalClusterId"`
	// - description
	Description string `pulumi:"description"`
	EraCreated  bool   `pulumi:"eraCreated"`
	// - id of database instance
	Id string `pulumi:"id"`
	// - info regarding disks, vm, storage, etc.
	Infos []GetNdbDatabaseInfo `pulumi:"infos"`
	// - lcm configuration
	LcmConfigs []GetNdbDatabaseLcmConfig `pulumi:"lcmConfigs"`
	// - list of databases created in instance with info
	LinkedDatabases []GetNdbDatabaseLinkedDatabase `pulumi:"linkedDatabases"`
	// - metrics
	Metric map[string]string `pulumi:"metric"`
	// - name of database instance
	Name string `pulumi:"name"`
	// - parent database ID
	ParentDatabaseId string `pulumi:"parentDatabaseId"`
	// - properties
	Properties []GetNdbDatabaseProperty `pulumi:"properties"`
	// - status of database instance
	Status string `pulumi:"status"`
	// - tags attached
	Tags []GetNdbDatabaseTag `pulumi:"tags"`
	// - time machine ID
	TimeMachineId string `pulumi:"timeMachineId"`
	// - time machine related config info
	TimeMachines []GetNdbDatabaseTimeMachine `pulumi:"timeMachines"`
	// - timezone
	TimeZone string `pulumi:"timeZone"`
	// - database engine type
	Type string `pulumi:"type"`
}

func LookupNdbDatabaseOutput(ctx *pulumi.Context, args LookupNdbDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupNdbDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNdbDatabaseResultOutput, error) {
			args := v.(LookupNdbDatabaseArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNdbDatabaseResult
			secret, err := ctx.InvokePackageRaw("nutanix:index/getNdbDatabase:getNdbDatabase", args, &rv, "", opts...)
			if err != nil {
				return LookupNdbDatabaseResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNdbDatabaseResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNdbDatabaseResultOutput), nil
			}
			return output, nil
		}).(LookupNdbDatabaseResultOutput)
}

// A collection of arguments for invoking getNdbDatabase.
type LookupNdbDatabaseOutputArgs struct {
	// ID of database instance
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	// - tags attached
	Tags GetNdbDatabaseTagArrayInput `pulumi:"tags"`
}

func (LookupNdbDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getNdbDatabase.
type LookupNdbDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupNdbDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNdbDatabaseResult)(nil)).Elem()
}

func (o LookupNdbDatabaseResultOutput) ToLookupNdbDatabaseResultOutput() LookupNdbDatabaseResultOutput {
	return o
}

func (o LookupNdbDatabaseResultOutput) ToLookupNdbDatabaseResultOutputWithContext(ctx context.Context) LookupNdbDatabaseResultOutput {
	return o
}

// - if cloned
func (o LookupNdbDatabaseResultOutput) Clone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) bool { return v.Clone }).(pulumi.BoolOutput)
}

// - if clustered or not
func (o LookupNdbDatabaseResultOutput) Clustered() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) bool { return v.Clustered }).(pulumi.BoolOutput)
}

func (o LookupNdbDatabaseResultOutput) DatabaseClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.DatabaseClusterType }).(pulumi.StringOutput)
}

func (o LookupNdbDatabaseResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// - database instance name
func (o LookupNdbDatabaseResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// - nodes info
func (o LookupNdbDatabaseResultOutput) DatabaseNodes() GetNdbDatabaseDatabaseNodeArrayOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) []GetNdbDatabaseDatabaseNode { return v.DatabaseNodes }).(GetNdbDatabaseDatabaseNodeArrayOutput)
}

func (o LookupNdbDatabaseResultOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// - creation date
func (o LookupNdbDatabaseResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

// - date modified
func (o LookupNdbDatabaseResultOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.DateModified }).(pulumi.StringOutput)
}

// - NA
func (o LookupNdbDatabaseResultOutput) DbserverLogicalCluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) map[string]string { return v.DbserverLogicalCluster }).(pulumi.StringMapOutput)
}

// - NA
func (o LookupNdbDatabaseResultOutput) DbserverLogicalClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.DbserverLogicalClusterId }).(pulumi.StringOutput)
}

// - description
func (o LookupNdbDatabaseResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupNdbDatabaseResultOutput) EraCreated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) bool { return v.EraCreated }).(pulumi.BoolOutput)
}

// - id of database instance
func (o LookupNdbDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// - info regarding disks, vm, storage, etc.
func (o LookupNdbDatabaseResultOutput) Infos() GetNdbDatabaseInfoArrayOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) []GetNdbDatabaseInfo { return v.Infos }).(GetNdbDatabaseInfoArrayOutput)
}

// - lcm configuration
func (o LookupNdbDatabaseResultOutput) LcmConfigs() GetNdbDatabaseLcmConfigArrayOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) []GetNdbDatabaseLcmConfig { return v.LcmConfigs }).(GetNdbDatabaseLcmConfigArrayOutput)
}

// - list of databases created in instance with info
func (o LookupNdbDatabaseResultOutput) LinkedDatabases() GetNdbDatabaseLinkedDatabaseArrayOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) []GetNdbDatabaseLinkedDatabase { return v.LinkedDatabases }).(GetNdbDatabaseLinkedDatabaseArrayOutput)
}

// - metrics
func (o LookupNdbDatabaseResultOutput) Metric() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) map[string]string { return v.Metric }).(pulumi.StringMapOutput)
}

// - name of database instance
func (o LookupNdbDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// - parent database ID
func (o LookupNdbDatabaseResultOutput) ParentDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.ParentDatabaseId }).(pulumi.StringOutput)
}

// - properties
func (o LookupNdbDatabaseResultOutput) Properties() GetNdbDatabasePropertyArrayOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) []GetNdbDatabaseProperty { return v.Properties }).(GetNdbDatabasePropertyArrayOutput)
}

// - status of database instance
func (o LookupNdbDatabaseResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.Status }).(pulumi.StringOutput)
}

// - tags attached
func (o LookupNdbDatabaseResultOutput) Tags() GetNdbDatabaseTagArrayOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) []GetNdbDatabaseTag { return v.Tags }).(GetNdbDatabaseTagArrayOutput)
}

// - time machine ID
func (o LookupNdbDatabaseResultOutput) TimeMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.TimeMachineId }).(pulumi.StringOutput)
}

// - time machine related config info
func (o LookupNdbDatabaseResultOutput) TimeMachines() GetNdbDatabaseTimeMachineArrayOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) []GetNdbDatabaseTimeMachine { return v.TimeMachines }).(GetNdbDatabaseTimeMachineArrayOutput)
}

// - timezone
func (o LookupNdbDatabaseResultOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.TimeZone }).(pulumi.StringOutput)
}

// - database engine type
func (o LookupNdbDatabaseResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNdbDatabaseResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNdbDatabaseResultOutput{})
}
