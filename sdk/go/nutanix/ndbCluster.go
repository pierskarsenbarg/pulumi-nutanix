// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to add a Nutanix cluster based on the input parameters.
type NdbCluster struct {
	pulumi.CustomResourceState

	// agent network info to register cluster
	AgentNetworkInfos NdbClusterAgentNetworkInfoArrayOutput `pulumi:"agentNetworkInfos"`
	AgentVmPrefix     pulumi.StringPtrOutput                `pulumi:"agentVmPrefix"`
	// - cloud info
	CloudInfo pulumi.StringOutput `pulumi:"cloudInfo"`
	// - cloud type
	CloudType pulumi.StringOutput `pulumi:"cloudType"`
	// Prism Element IP address
	ClusterIp   pulumi.StringOutput    `pulumi:"clusterIp"`
	ClusterType pulumi.StringPtrOutput `pulumi:"clusterType"`
	// - creation date
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// - date modified
	DateModified pulumi.StringOutput `pulumi:"dateModified"`
	// description of cluster
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// - no. of entities related
	EntityCounts NdbClusterEntityCountArrayOutput `pulumi:"entityCounts"`
	// - fqdn
	Fqdns pulumi.StringOutput `pulumi:"fqdns"`
	// - if healthy status
	Healthy pulumi.BoolOutput `pulumi:"healthy"`
	// - hypervisor type
	HypervisorType pulumi.StringOutput `pulumi:"hypervisorType"`
	// - hypervisor version
	HypervisorVersion pulumi.StringOutput `pulumi:"hypervisorVersion"`
	// - IP address
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// - NA
	ManagementServerInfo pulumi.StringOutput `pulumi:"managementServerInfo"`
	// name of the cluster to be registered
	Name pulumi.StringOutput `pulumi:"name"`
	// network segmentation to segment the network traffic of the agent VM.
	NetworksInfos NdbClusterNetworksInfoArrayOutput `pulumi:"networksInfos"`
	// - nutanix cluster uuid
	NxClusterUuid pulumi.StringOutput `pulumi:"nxClusterUuid"`
	// - owner UUID
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// Prism Element password
	Password pulumi.StringOutput `pulumi:"password"`
	Port     pulumi.IntPtrOutput `pulumi:"port"`
	// - list of properties
	Properties NdbClusterPropertyArrayOutput `pulumi:"properties"`
	Protocol   pulumi.StringPtrOutput        `pulumi:"protocol"`
	// - NA
	ReferenceCount pulumi.IntOutput `pulumi:"referenceCount"`
	// - resource related consumption info
	ResourceConfigs NdbClusterResourceConfigArrayOutput `pulumi:"resourceConfigs"`
	// - current status
	Status pulumi.StringOutput `pulumi:"status"`
	// select a storage container which is used for performing database operations in the cluster
	StorageContainer pulumi.StringOutput `pulumi:"storageContainer"`
	// - unique name of cluster
	UniqueName pulumi.StringOutput `pulumi:"uniqueName"`
	// username of the Prism Element administrator
	Username pulumi.StringOutput `pulumi:"username"`
	// - version
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewNdbCluster registers a new resource with the given unique name, arguments, and options.
func NewNdbCluster(ctx *pulumi.Context,
	name string, args *NdbClusterArgs, opts ...pulumi.ResourceOption) (*NdbCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentNetworkInfos == nil {
		return nil, errors.New("invalid value for required argument 'AgentNetworkInfos'")
	}
	if args.ClusterIp == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIp'")
	}
	if args.NetworksInfos == nil {
		return nil, errors.New("invalid value for required argument 'NetworksInfos'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.StorageContainer == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainer'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbCluster
	err := ctx.RegisterResource("nutanix:index/ndbCluster:NdbCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbCluster gets an existing NdbCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbClusterState, opts ...pulumi.ResourceOption) (*NdbCluster, error) {
	var resource NdbCluster
	err := ctx.ReadResource("nutanix:index/ndbCluster:NdbCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbCluster resources.
type ndbClusterState struct {
	// agent network info to register cluster
	AgentNetworkInfos []NdbClusterAgentNetworkInfo `pulumi:"agentNetworkInfos"`
	AgentVmPrefix     *string                      `pulumi:"agentVmPrefix"`
	// - cloud info
	CloudInfo *string `pulumi:"cloudInfo"`
	// - cloud type
	CloudType *string `pulumi:"cloudType"`
	// Prism Element IP address
	ClusterIp   *string `pulumi:"clusterIp"`
	ClusterType *string `pulumi:"clusterType"`
	// - creation date
	DateCreated *string `pulumi:"dateCreated"`
	// - date modified
	DateModified *string `pulumi:"dateModified"`
	// description of cluster
	Description *string `pulumi:"description"`
	// - no. of entities related
	EntityCounts []NdbClusterEntityCount `pulumi:"entityCounts"`
	// - fqdn
	Fqdns *string `pulumi:"fqdns"`
	// - if healthy status
	Healthy *bool `pulumi:"healthy"`
	// - hypervisor type
	HypervisorType *string `pulumi:"hypervisorType"`
	// - hypervisor version
	HypervisorVersion *string `pulumi:"hypervisorVersion"`
	// - IP address
	IpAddresses []string `pulumi:"ipAddresses"`
	// - NA
	ManagementServerInfo *string `pulumi:"managementServerInfo"`
	// name of the cluster to be registered
	Name *string `pulumi:"name"`
	// network segmentation to segment the network traffic of the agent VM.
	NetworksInfos []NdbClusterNetworksInfo `pulumi:"networksInfos"`
	// - nutanix cluster uuid
	NxClusterUuid *string `pulumi:"nxClusterUuid"`
	// - owner UUID
	OwnerId *string `pulumi:"ownerId"`
	// Prism Element password
	Password *string `pulumi:"password"`
	Port     *int    `pulumi:"port"`
	// - list of properties
	Properties []NdbClusterProperty `pulumi:"properties"`
	Protocol   *string              `pulumi:"protocol"`
	// - NA
	ReferenceCount *int `pulumi:"referenceCount"`
	// - resource related consumption info
	ResourceConfigs []NdbClusterResourceConfig `pulumi:"resourceConfigs"`
	// - current status
	Status *string `pulumi:"status"`
	// select a storage container which is used for performing database operations in the cluster
	StorageContainer *string `pulumi:"storageContainer"`
	// - unique name of cluster
	UniqueName *string `pulumi:"uniqueName"`
	// username of the Prism Element administrator
	Username *string `pulumi:"username"`
	// - version
	Version *string `pulumi:"version"`
}

type NdbClusterState struct {
	// agent network info to register cluster
	AgentNetworkInfos NdbClusterAgentNetworkInfoArrayInput
	AgentVmPrefix     pulumi.StringPtrInput
	// - cloud info
	CloudInfo pulumi.StringPtrInput
	// - cloud type
	CloudType pulumi.StringPtrInput
	// Prism Element IP address
	ClusterIp   pulumi.StringPtrInput
	ClusterType pulumi.StringPtrInput
	// - creation date
	DateCreated pulumi.StringPtrInput
	// - date modified
	DateModified pulumi.StringPtrInput
	// description of cluster
	Description pulumi.StringPtrInput
	// - no. of entities related
	EntityCounts NdbClusterEntityCountArrayInput
	// - fqdn
	Fqdns pulumi.StringPtrInput
	// - if healthy status
	Healthy pulumi.BoolPtrInput
	// - hypervisor type
	HypervisorType pulumi.StringPtrInput
	// - hypervisor version
	HypervisorVersion pulumi.StringPtrInput
	// - IP address
	IpAddresses pulumi.StringArrayInput
	// - NA
	ManagementServerInfo pulumi.StringPtrInput
	// name of the cluster to be registered
	Name pulumi.StringPtrInput
	// network segmentation to segment the network traffic of the agent VM.
	NetworksInfos NdbClusterNetworksInfoArrayInput
	// - nutanix cluster uuid
	NxClusterUuid pulumi.StringPtrInput
	// - owner UUID
	OwnerId pulumi.StringPtrInput
	// Prism Element password
	Password pulumi.StringPtrInput
	Port     pulumi.IntPtrInput
	// - list of properties
	Properties NdbClusterPropertyArrayInput
	Protocol   pulumi.StringPtrInput
	// - NA
	ReferenceCount pulumi.IntPtrInput
	// - resource related consumption info
	ResourceConfigs NdbClusterResourceConfigArrayInput
	// - current status
	Status pulumi.StringPtrInput
	// select a storage container which is used for performing database operations in the cluster
	StorageContainer pulumi.StringPtrInput
	// - unique name of cluster
	UniqueName pulumi.StringPtrInput
	// username of the Prism Element administrator
	Username pulumi.StringPtrInput
	// - version
	Version pulumi.StringPtrInput
}

func (NdbClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbClusterState)(nil)).Elem()
}

type ndbClusterArgs struct {
	// agent network info to register cluster
	AgentNetworkInfos []NdbClusterAgentNetworkInfo `pulumi:"agentNetworkInfos"`
	AgentVmPrefix     *string                      `pulumi:"agentVmPrefix"`
	// Prism Element IP address
	ClusterIp   string  `pulumi:"clusterIp"`
	ClusterType *string `pulumi:"clusterType"`
	// description of cluster
	Description *string `pulumi:"description"`
	// name of the cluster to be registered
	Name *string `pulumi:"name"`
	// network segmentation to segment the network traffic of the agent VM.
	NetworksInfos []NdbClusterNetworksInfo `pulumi:"networksInfos"`
	// Prism Element password
	Password string  `pulumi:"password"`
	Port     *int    `pulumi:"port"`
	Protocol *string `pulumi:"protocol"`
	// select a storage container which is used for performing database operations in the cluster
	StorageContainer string `pulumi:"storageContainer"`
	// username of the Prism Element administrator
	Username string `pulumi:"username"`
	// - version
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a NdbCluster resource.
type NdbClusterArgs struct {
	// agent network info to register cluster
	AgentNetworkInfos NdbClusterAgentNetworkInfoArrayInput
	AgentVmPrefix     pulumi.StringPtrInput
	// Prism Element IP address
	ClusterIp   pulumi.StringInput
	ClusterType pulumi.StringPtrInput
	// description of cluster
	Description pulumi.StringPtrInput
	// name of the cluster to be registered
	Name pulumi.StringPtrInput
	// network segmentation to segment the network traffic of the agent VM.
	NetworksInfos NdbClusterNetworksInfoArrayInput
	// Prism Element password
	Password pulumi.StringInput
	Port     pulumi.IntPtrInput
	Protocol pulumi.StringPtrInput
	// select a storage container which is used for performing database operations in the cluster
	StorageContainer pulumi.StringInput
	// username of the Prism Element administrator
	Username pulumi.StringInput
	// - version
	Version pulumi.StringPtrInput
}

func (NdbClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbClusterArgs)(nil)).Elem()
}

type NdbClusterInput interface {
	pulumi.Input

	ToNdbClusterOutput() NdbClusterOutput
	ToNdbClusterOutputWithContext(ctx context.Context) NdbClusterOutput
}

func (*NdbCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbCluster)(nil)).Elem()
}

func (i *NdbCluster) ToNdbClusterOutput() NdbClusterOutput {
	return i.ToNdbClusterOutputWithContext(context.Background())
}

func (i *NdbCluster) ToNdbClusterOutputWithContext(ctx context.Context) NdbClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbClusterOutput)
}

// NdbClusterArrayInput is an input type that accepts NdbClusterArray and NdbClusterArrayOutput values.
// You can construct a concrete instance of `NdbClusterArrayInput` via:
//
//	NdbClusterArray{ NdbClusterArgs{...} }
type NdbClusterArrayInput interface {
	pulumi.Input

	ToNdbClusterArrayOutput() NdbClusterArrayOutput
	ToNdbClusterArrayOutputWithContext(context.Context) NdbClusterArrayOutput
}

type NdbClusterArray []NdbClusterInput

func (NdbClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbCluster)(nil)).Elem()
}

func (i NdbClusterArray) ToNdbClusterArrayOutput() NdbClusterArrayOutput {
	return i.ToNdbClusterArrayOutputWithContext(context.Background())
}

func (i NdbClusterArray) ToNdbClusterArrayOutputWithContext(ctx context.Context) NdbClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbClusterArrayOutput)
}

// NdbClusterMapInput is an input type that accepts NdbClusterMap and NdbClusterMapOutput values.
// You can construct a concrete instance of `NdbClusterMapInput` via:
//
//	NdbClusterMap{ "key": NdbClusterArgs{...} }
type NdbClusterMapInput interface {
	pulumi.Input

	ToNdbClusterMapOutput() NdbClusterMapOutput
	ToNdbClusterMapOutputWithContext(context.Context) NdbClusterMapOutput
}

type NdbClusterMap map[string]NdbClusterInput

func (NdbClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbCluster)(nil)).Elem()
}

func (i NdbClusterMap) ToNdbClusterMapOutput() NdbClusterMapOutput {
	return i.ToNdbClusterMapOutputWithContext(context.Background())
}

func (i NdbClusterMap) ToNdbClusterMapOutputWithContext(ctx context.Context) NdbClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbClusterMapOutput)
}

type NdbClusterOutput struct{ *pulumi.OutputState }

func (NdbClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbCluster)(nil)).Elem()
}

func (o NdbClusterOutput) ToNdbClusterOutput() NdbClusterOutput {
	return o
}

func (o NdbClusterOutput) ToNdbClusterOutputWithContext(ctx context.Context) NdbClusterOutput {
	return o
}

// agent network info to register cluster
func (o NdbClusterOutput) AgentNetworkInfos() NdbClusterAgentNetworkInfoArrayOutput {
	return o.ApplyT(func(v *NdbCluster) NdbClusterAgentNetworkInfoArrayOutput { return v.AgentNetworkInfos }).(NdbClusterAgentNetworkInfoArrayOutput)
}

func (o NdbClusterOutput) AgentVmPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringPtrOutput { return v.AgentVmPrefix }).(pulumi.StringPtrOutput)
}

// - cloud info
func (o NdbClusterOutput) CloudInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.CloudInfo }).(pulumi.StringOutput)
}

// - cloud type
func (o NdbClusterOutput) CloudType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.CloudType }).(pulumi.StringOutput)
}

// Prism Element IP address
func (o NdbClusterOutput) ClusterIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.ClusterIp }).(pulumi.StringOutput)
}

func (o NdbClusterOutput) ClusterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringPtrOutput { return v.ClusterType }).(pulumi.StringPtrOutput)
}

// - creation date
func (o NdbClusterOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// - date modified
func (o NdbClusterOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.DateModified }).(pulumi.StringOutput)
}

// description of cluster
func (o NdbClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// - no. of entities related
func (o NdbClusterOutput) EntityCounts() NdbClusterEntityCountArrayOutput {
	return o.ApplyT(func(v *NdbCluster) NdbClusterEntityCountArrayOutput { return v.EntityCounts }).(NdbClusterEntityCountArrayOutput)
}

// - fqdn
func (o NdbClusterOutput) Fqdns() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.Fqdns }).(pulumi.StringOutput)
}

// - if healthy status
func (o NdbClusterOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.BoolOutput { return v.Healthy }).(pulumi.BoolOutput)
}

// - hypervisor type
func (o NdbClusterOutput) HypervisorType() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.HypervisorType }).(pulumi.StringOutput)
}

// - hypervisor version
func (o NdbClusterOutput) HypervisorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.HypervisorVersion }).(pulumi.StringOutput)
}

// - IP address
func (o NdbClusterOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// - NA
func (o NdbClusterOutput) ManagementServerInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.ManagementServerInfo }).(pulumi.StringOutput)
}

// name of the cluster to be registered
func (o NdbClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// network segmentation to segment the network traffic of the agent VM.
func (o NdbClusterOutput) NetworksInfos() NdbClusterNetworksInfoArrayOutput {
	return o.ApplyT(func(v *NdbCluster) NdbClusterNetworksInfoArrayOutput { return v.NetworksInfos }).(NdbClusterNetworksInfoArrayOutput)
}

// - nutanix cluster uuid
func (o NdbClusterOutput) NxClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.NxClusterUuid }).(pulumi.StringOutput)
}

// - owner UUID
func (o NdbClusterOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// Prism Element password
func (o NdbClusterOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o NdbClusterOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// - list of properties
func (o NdbClusterOutput) Properties() NdbClusterPropertyArrayOutput {
	return o.ApplyT(func(v *NdbCluster) NdbClusterPropertyArrayOutput { return v.Properties }).(NdbClusterPropertyArrayOutput)
}

func (o NdbClusterOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// - NA
func (o NdbClusterOutput) ReferenceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.IntOutput { return v.ReferenceCount }).(pulumi.IntOutput)
}

// - resource related consumption info
func (o NdbClusterOutput) ResourceConfigs() NdbClusterResourceConfigArrayOutput {
	return o.ApplyT(func(v *NdbCluster) NdbClusterResourceConfigArrayOutput { return v.ResourceConfigs }).(NdbClusterResourceConfigArrayOutput)
}

// - current status
func (o NdbClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// select a storage container which is used for performing database operations in the cluster
func (o NdbClusterOutput) StorageContainer() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.StorageContainer }).(pulumi.StringOutput)
}

// - unique name of cluster
func (o NdbClusterOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.UniqueName }).(pulumi.StringOutput)
}

// username of the Prism Element administrator
func (o NdbClusterOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// - version
func (o NdbClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbCluster) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type NdbClusterArrayOutput struct{ *pulumi.OutputState }

func (NdbClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbCluster)(nil)).Elem()
}

func (o NdbClusterArrayOutput) ToNdbClusterArrayOutput() NdbClusterArrayOutput {
	return o
}

func (o NdbClusterArrayOutput) ToNdbClusterArrayOutputWithContext(ctx context.Context) NdbClusterArrayOutput {
	return o
}

func (o NdbClusterArrayOutput) Index(i pulumi.IntInput) NdbClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbCluster {
		return vs[0].([]*NdbCluster)[vs[1].(int)]
	}).(NdbClusterOutput)
}

type NdbClusterMapOutput struct{ *pulumi.OutputState }

func (NdbClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbCluster)(nil)).Elem()
}

func (o NdbClusterMapOutput) ToNdbClusterMapOutput() NdbClusterMapOutput {
	return o
}

func (o NdbClusterMapOutput) ToNdbClusterMapOutputWithContext(ctx context.Context) NdbClusterMapOutput {
	return o
}

func (o NdbClusterMapOutput) MapIndex(k pulumi.StringInput) NdbClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbCluster {
		return vs[0].(map[string]*NdbCluster)[vs[1].(string)]
	}).(NdbClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbClusterInput)(nil)).Elem(), &NdbCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbClusterArrayInput)(nil)).Elem(), NdbClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbClusterMapInput)(nil)).Elem(), NdbClusterMap{})
	pulumi.RegisterOutputType(NdbClusterOutput{})
	pulumi.RegisterOutputType(NdbClusterArrayOutput{})
	pulumi.RegisterOutputType(NdbClusterMapOutput{})
}
