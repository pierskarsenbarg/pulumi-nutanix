// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uploads hypervisor or AOS image to foundation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nutanix.NewFoundationImage(ctx, "nos-image", &nutanix.FoundationImageArgs{
// 			Filename:      pulumi.String("nos_image.tar"),
// 			InstallerType: pulumi.String("nos"),
// 			Source:        pulumi.String("../../../files/nutanix_installer_x86_64.tar"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = nutanix.NewFoundationImage(ctx, "hypervisor-image", &nutanix.FoundationImageArgs{
// 			Filename:      pulumi.String("esx_image.iso"),
// 			InstallerType: pulumi.String("esx"),
// 			Source:        pulumi.String("../../../files/VMware-Installer.x86_64.iso"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## lifecycle
//
// * `Update` : - Resource will trigger new resource create call for any kind of update in resource config and delete existing image from foundation vm.
//
// See detailed information in [Nutanix Foundation Image](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjM0MDQ-upload-hypervisor-or-aos-image-to-foundation).
type FoundationImage struct {
	pulumi.CustomResourceState

	Filename      pulumi.StringOutput `pulumi:"filename"`
	InWhitelist   pulumi.BoolOutput   `pulumi:"inWhitelist"`
	InstallerType pulumi.StringOutput `pulumi:"installerType"`
	Md5sum        pulumi.StringOutput `pulumi:"md5sum"`
	Name          pulumi.StringOutput `pulumi:"name"`
	Source        pulumi.StringOutput `pulumi:"source"`
}

// NewFoundationImage registers a new resource with the given unique name, arguments, and options.
func NewFoundationImage(ctx *pulumi.Context,
	name string, args *FoundationImageArgs, opts ...pulumi.ResourceOption) (*FoundationImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filename == nil {
		return nil, errors.New("invalid value for required argument 'Filename'")
	}
	if args.InstallerType == nil {
		return nil, errors.New("invalid value for required argument 'InstallerType'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FoundationImage
	err := ctx.RegisterResource("nutanix:index/foundationImage:FoundationImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFoundationImage gets an existing FoundationImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFoundationImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FoundationImageState, opts ...pulumi.ResourceOption) (*FoundationImage, error) {
	var resource FoundationImage
	err := ctx.ReadResource("nutanix:index/foundationImage:FoundationImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FoundationImage resources.
type foundationImageState struct {
	Filename      *string `pulumi:"filename"`
	InWhitelist   *bool   `pulumi:"inWhitelist"`
	InstallerType *string `pulumi:"installerType"`
	Md5sum        *string `pulumi:"md5sum"`
	Name          *string `pulumi:"name"`
	Source        *string `pulumi:"source"`
}

type FoundationImageState struct {
	Filename      pulumi.StringPtrInput
	InWhitelist   pulumi.BoolPtrInput
	InstallerType pulumi.StringPtrInput
	Md5sum        pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Source        pulumi.StringPtrInput
}

func (FoundationImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationImageState)(nil)).Elem()
}

type foundationImageArgs struct {
	Filename      string `pulumi:"filename"`
	InstallerType string `pulumi:"installerType"`
	Source        string `pulumi:"source"`
}

// The set of arguments for constructing a FoundationImage resource.
type FoundationImageArgs struct {
	Filename      pulumi.StringInput
	InstallerType pulumi.StringInput
	Source        pulumi.StringInput
}

func (FoundationImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationImageArgs)(nil)).Elem()
}

type FoundationImageInput interface {
	pulumi.Input

	ToFoundationImageOutput() FoundationImageOutput
	ToFoundationImageOutputWithContext(ctx context.Context) FoundationImageOutput
}

func (*FoundationImage) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationImage)(nil)).Elem()
}

func (i *FoundationImage) ToFoundationImageOutput() FoundationImageOutput {
	return i.ToFoundationImageOutputWithContext(context.Background())
}

func (i *FoundationImage) ToFoundationImageOutputWithContext(ctx context.Context) FoundationImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationImageOutput)
}

// FoundationImageArrayInput is an input type that accepts FoundationImageArray and FoundationImageArrayOutput values.
// You can construct a concrete instance of `FoundationImageArrayInput` via:
//
//          FoundationImageArray{ FoundationImageArgs{...} }
type FoundationImageArrayInput interface {
	pulumi.Input

	ToFoundationImageArrayOutput() FoundationImageArrayOutput
	ToFoundationImageArrayOutputWithContext(context.Context) FoundationImageArrayOutput
}

type FoundationImageArray []FoundationImageInput

func (FoundationImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationImage)(nil)).Elem()
}

func (i FoundationImageArray) ToFoundationImageArrayOutput() FoundationImageArrayOutput {
	return i.ToFoundationImageArrayOutputWithContext(context.Background())
}

func (i FoundationImageArray) ToFoundationImageArrayOutputWithContext(ctx context.Context) FoundationImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationImageArrayOutput)
}

// FoundationImageMapInput is an input type that accepts FoundationImageMap and FoundationImageMapOutput values.
// You can construct a concrete instance of `FoundationImageMapInput` via:
//
//          FoundationImageMap{ "key": FoundationImageArgs{...} }
type FoundationImageMapInput interface {
	pulumi.Input

	ToFoundationImageMapOutput() FoundationImageMapOutput
	ToFoundationImageMapOutputWithContext(context.Context) FoundationImageMapOutput
}

type FoundationImageMap map[string]FoundationImageInput

func (FoundationImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationImage)(nil)).Elem()
}

func (i FoundationImageMap) ToFoundationImageMapOutput() FoundationImageMapOutput {
	return i.ToFoundationImageMapOutputWithContext(context.Background())
}

func (i FoundationImageMap) ToFoundationImageMapOutputWithContext(ctx context.Context) FoundationImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationImageMapOutput)
}

type FoundationImageOutput struct{ *pulumi.OutputState }

func (FoundationImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationImage)(nil)).Elem()
}

func (o FoundationImageOutput) ToFoundationImageOutput() FoundationImageOutput {
	return o
}

func (o FoundationImageOutput) ToFoundationImageOutputWithContext(ctx context.Context) FoundationImageOutput {
	return o
}

func (o FoundationImageOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationImage) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

func (o FoundationImageOutput) InWhitelist() pulumi.BoolOutput {
	return o.ApplyT(func(v *FoundationImage) pulumi.BoolOutput { return v.InWhitelist }).(pulumi.BoolOutput)
}

func (o FoundationImageOutput) InstallerType() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationImage) pulumi.StringOutput { return v.InstallerType }).(pulumi.StringOutput)
}

func (o FoundationImageOutput) Md5sum() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationImage) pulumi.StringOutput { return v.Md5sum }).(pulumi.StringOutput)
}

func (o FoundationImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationImage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FoundationImageOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationImage) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type FoundationImageArrayOutput struct{ *pulumi.OutputState }

func (FoundationImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationImage)(nil)).Elem()
}

func (o FoundationImageArrayOutput) ToFoundationImageArrayOutput() FoundationImageArrayOutput {
	return o
}

func (o FoundationImageArrayOutput) ToFoundationImageArrayOutputWithContext(ctx context.Context) FoundationImageArrayOutput {
	return o
}

func (o FoundationImageArrayOutput) Index(i pulumi.IntInput) FoundationImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FoundationImage {
		return vs[0].([]*FoundationImage)[vs[1].(int)]
	}).(FoundationImageOutput)
}

type FoundationImageMapOutput struct{ *pulumi.OutputState }

func (FoundationImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationImage)(nil)).Elem()
}

func (o FoundationImageMapOutput) ToFoundationImageMapOutput() FoundationImageMapOutput {
	return o
}

func (o FoundationImageMapOutput) ToFoundationImageMapOutputWithContext(ctx context.Context) FoundationImageMapOutput {
	return o
}

func (o FoundationImageMapOutput) MapIndex(k pulumi.StringInput) FoundationImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FoundationImage {
		return vs[0].(map[string]*FoundationImage)[vs[1].(string)]
	}).(FoundationImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationImageInput)(nil)).Elem(), &FoundationImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationImageArrayInput)(nil)).Elem(), FoundationImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationImageMapInput)(nil)).Elem(), FoundationImageMap{})
	pulumi.RegisterOutputType(FoundationImageOutput{})
	pulumi.RegisterOutputType(FoundationImageArrayOutput{})
	pulumi.RegisterOutputType(FoundationImageMapOutput{})
}
