// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to associate a maintenance window with database server VM based on the input parameters.
//
// ## Example Usage
//
// ### resource to associated maintenance window with OS_PATCHING
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbMaintenanceTask(ctx, "name", &nutanix.NdbMaintenanceTaskArgs{
//				DbserverIds: pulumi.StringArray{
//					pulumi.String("{{ dbserver_vm_id }}"),
//				},
//				MaintenanceWindowId: pulumi.String("{{ maintenance_window_id }}"),
//				Tasks: nutanix.NdbMaintenanceTaskTaskArray{
//					&nutanix.NdbMaintenanceTaskTaskArgs{
//						TaskType: pulumi.String("OS_PATCHING"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### resource to associated maintenance window with DB_PATCHING
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbMaintenanceTask(ctx, "name", &nutanix.NdbMaintenanceTaskArgs{
//				DbserverIds: pulumi.StringArray{
//					pulumi.String("{{ dbserver_vm_id }}"),
//				},
//				MaintenanceWindowId: pulumi.String("{{ maintenance_window_id }}"),
//				Tasks: nutanix.NdbMaintenanceTaskTaskArray{
//					&nutanix.NdbMaintenanceTaskTaskArgs{
//						TaskType: pulumi.String("DB_PATCHING"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### resource to associated maintenance window with pre and post command on each task
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbMaintenanceTask(ctx, "name", &nutanix.NdbMaintenanceTaskArgs{
//				DbserverIds: pulumi.StringArray{
//					pulumi.String("{{ dbserver_vm_id }}"),
//				},
//				MaintenanceWindowId: pulumi.String("{{ maintenance_window_id }}"),
//				Tasks: nutanix.NdbMaintenanceTaskTaskArray{
//					&nutanix.NdbMaintenanceTaskTaskArgs{
//						PostCommand: pulumi.String("{{ post_command for db patching }}"),
//						PreCommand:  pulumi.String("{{ pre_command for db patching }}"),
//						TaskType:    pulumi.String("DB_PATCHING"),
//					},
//					&nutanix.NdbMaintenanceTaskTaskArgs{
//						PostCommand: pulumi.String("{{ post_command for os patching }}"),
//						PreCommand:  pulumi.String("{{ pre_command for os patching}}"),
//						TaskType:    pulumi.String("OS_PATCHING"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbMaintenanceTask struct {
	pulumi.CustomResourceState

	// dbserver cluster ids. Conflicts with "dbserverId"
	DbserverClusters pulumi.StringArrayOutput `pulumi:"dbserverClusters"`
	// dbserver vm id. Conflicts with "dbserverCluster"
	DbserverIds pulumi.StringArrayOutput `pulumi:"dbserverIds"`
	// Entity Task Association  List.
	EntityTaskAssociations NdbMaintenanceTaskEntityTaskAssociationArrayOutput `pulumi:"entityTaskAssociations"`
	// maintenance window id which has to be associated
	MaintenanceWindowId pulumi.StringOutput `pulumi:"maintenanceWindowId"`
	// task input for Operating System Patching or Database Patching or both
	Tasks NdbMaintenanceTaskTaskArrayOutput `pulumi:"tasks"`
}

// NewNdbMaintenanceTask registers a new resource with the given unique name, arguments, and options.
func NewNdbMaintenanceTask(ctx *pulumi.Context,
	name string, args *NdbMaintenanceTaskArgs, opts ...pulumi.ResourceOption) (*NdbMaintenanceTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaintenanceWindowId == nil {
		return nil, errors.New("invalid value for required argument 'MaintenanceWindowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbMaintenanceTask
	err := ctx.RegisterResource("nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbMaintenanceTask gets an existing NdbMaintenanceTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbMaintenanceTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbMaintenanceTaskState, opts ...pulumi.ResourceOption) (*NdbMaintenanceTask, error) {
	var resource NdbMaintenanceTask
	err := ctx.ReadResource("nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbMaintenanceTask resources.
type ndbMaintenanceTaskState struct {
	// dbserver cluster ids. Conflicts with "dbserverId"
	DbserverClusters []string `pulumi:"dbserverClusters"`
	// dbserver vm id. Conflicts with "dbserverCluster"
	DbserverIds []string `pulumi:"dbserverIds"`
	// Entity Task Association  List.
	EntityTaskAssociations []NdbMaintenanceTaskEntityTaskAssociation `pulumi:"entityTaskAssociations"`
	// maintenance window id which has to be associated
	MaintenanceWindowId *string `pulumi:"maintenanceWindowId"`
	// task input for Operating System Patching or Database Patching or both
	Tasks []NdbMaintenanceTaskTask `pulumi:"tasks"`
}

type NdbMaintenanceTaskState struct {
	// dbserver cluster ids. Conflicts with "dbserverId"
	DbserverClusters pulumi.StringArrayInput
	// dbserver vm id. Conflicts with "dbserverCluster"
	DbserverIds pulumi.StringArrayInput
	// Entity Task Association  List.
	EntityTaskAssociations NdbMaintenanceTaskEntityTaskAssociationArrayInput
	// maintenance window id which has to be associated
	MaintenanceWindowId pulumi.StringPtrInput
	// task input for Operating System Patching or Database Patching or both
	Tasks NdbMaintenanceTaskTaskArrayInput
}

func (NdbMaintenanceTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbMaintenanceTaskState)(nil)).Elem()
}

type ndbMaintenanceTaskArgs struct {
	// dbserver cluster ids. Conflicts with "dbserverId"
	DbserverClusters []string `pulumi:"dbserverClusters"`
	// dbserver vm id. Conflicts with "dbserverCluster"
	DbserverIds []string `pulumi:"dbserverIds"`
	// maintenance window id which has to be associated
	MaintenanceWindowId string `pulumi:"maintenanceWindowId"`
	// task input for Operating System Patching or Database Patching or both
	Tasks []NdbMaintenanceTaskTask `pulumi:"tasks"`
}

// The set of arguments for constructing a NdbMaintenanceTask resource.
type NdbMaintenanceTaskArgs struct {
	// dbserver cluster ids. Conflicts with "dbserverId"
	DbserverClusters pulumi.StringArrayInput
	// dbserver vm id. Conflicts with "dbserverCluster"
	DbserverIds pulumi.StringArrayInput
	// maintenance window id which has to be associated
	MaintenanceWindowId pulumi.StringInput
	// task input for Operating System Patching or Database Patching or both
	Tasks NdbMaintenanceTaskTaskArrayInput
}

func (NdbMaintenanceTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbMaintenanceTaskArgs)(nil)).Elem()
}

type NdbMaintenanceTaskInput interface {
	pulumi.Input

	ToNdbMaintenanceTaskOutput() NdbMaintenanceTaskOutput
	ToNdbMaintenanceTaskOutputWithContext(ctx context.Context) NdbMaintenanceTaskOutput
}

func (*NdbMaintenanceTask) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbMaintenanceTask)(nil)).Elem()
}

func (i *NdbMaintenanceTask) ToNdbMaintenanceTaskOutput() NdbMaintenanceTaskOutput {
	return i.ToNdbMaintenanceTaskOutputWithContext(context.Background())
}

func (i *NdbMaintenanceTask) ToNdbMaintenanceTaskOutputWithContext(ctx context.Context) NdbMaintenanceTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbMaintenanceTaskOutput)
}

// NdbMaintenanceTaskArrayInput is an input type that accepts NdbMaintenanceTaskArray and NdbMaintenanceTaskArrayOutput values.
// You can construct a concrete instance of `NdbMaintenanceTaskArrayInput` via:
//
//	NdbMaintenanceTaskArray{ NdbMaintenanceTaskArgs{...} }
type NdbMaintenanceTaskArrayInput interface {
	pulumi.Input

	ToNdbMaintenanceTaskArrayOutput() NdbMaintenanceTaskArrayOutput
	ToNdbMaintenanceTaskArrayOutputWithContext(context.Context) NdbMaintenanceTaskArrayOutput
}

type NdbMaintenanceTaskArray []NdbMaintenanceTaskInput

func (NdbMaintenanceTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbMaintenanceTask)(nil)).Elem()
}

func (i NdbMaintenanceTaskArray) ToNdbMaintenanceTaskArrayOutput() NdbMaintenanceTaskArrayOutput {
	return i.ToNdbMaintenanceTaskArrayOutputWithContext(context.Background())
}

func (i NdbMaintenanceTaskArray) ToNdbMaintenanceTaskArrayOutputWithContext(ctx context.Context) NdbMaintenanceTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbMaintenanceTaskArrayOutput)
}

// NdbMaintenanceTaskMapInput is an input type that accepts NdbMaintenanceTaskMap and NdbMaintenanceTaskMapOutput values.
// You can construct a concrete instance of `NdbMaintenanceTaskMapInput` via:
//
//	NdbMaintenanceTaskMap{ "key": NdbMaintenanceTaskArgs{...} }
type NdbMaintenanceTaskMapInput interface {
	pulumi.Input

	ToNdbMaintenanceTaskMapOutput() NdbMaintenanceTaskMapOutput
	ToNdbMaintenanceTaskMapOutputWithContext(context.Context) NdbMaintenanceTaskMapOutput
}

type NdbMaintenanceTaskMap map[string]NdbMaintenanceTaskInput

func (NdbMaintenanceTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbMaintenanceTask)(nil)).Elem()
}

func (i NdbMaintenanceTaskMap) ToNdbMaintenanceTaskMapOutput() NdbMaintenanceTaskMapOutput {
	return i.ToNdbMaintenanceTaskMapOutputWithContext(context.Background())
}

func (i NdbMaintenanceTaskMap) ToNdbMaintenanceTaskMapOutputWithContext(ctx context.Context) NdbMaintenanceTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbMaintenanceTaskMapOutput)
}

type NdbMaintenanceTaskOutput struct{ *pulumi.OutputState }

func (NdbMaintenanceTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbMaintenanceTask)(nil)).Elem()
}

func (o NdbMaintenanceTaskOutput) ToNdbMaintenanceTaskOutput() NdbMaintenanceTaskOutput {
	return o
}

func (o NdbMaintenanceTaskOutput) ToNdbMaintenanceTaskOutputWithContext(ctx context.Context) NdbMaintenanceTaskOutput {
	return o
}

// dbserver cluster ids. Conflicts with "dbserverId"
func (o NdbMaintenanceTaskOutput) DbserverClusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceTask) pulumi.StringArrayOutput { return v.DbserverClusters }).(pulumi.StringArrayOutput)
}

// dbserver vm id. Conflicts with "dbserverCluster"
func (o NdbMaintenanceTaskOutput) DbserverIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceTask) pulumi.StringArrayOutput { return v.DbserverIds }).(pulumi.StringArrayOutput)
}

// Entity Task Association  List.
func (o NdbMaintenanceTaskOutput) EntityTaskAssociations() NdbMaintenanceTaskEntityTaskAssociationArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceTask) NdbMaintenanceTaskEntityTaskAssociationArrayOutput {
		return v.EntityTaskAssociations
	}).(NdbMaintenanceTaskEntityTaskAssociationArrayOutput)
}

// maintenance window id which has to be associated
func (o NdbMaintenanceTaskOutput) MaintenanceWindowId() pulumi.StringOutput {
	return o.ApplyT(func(v *NdbMaintenanceTask) pulumi.StringOutput { return v.MaintenanceWindowId }).(pulumi.StringOutput)
}

// task input for Operating System Patching or Database Patching or both
func (o NdbMaintenanceTaskOutput) Tasks() NdbMaintenanceTaskTaskArrayOutput {
	return o.ApplyT(func(v *NdbMaintenanceTask) NdbMaintenanceTaskTaskArrayOutput { return v.Tasks }).(NdbMaintenanceTaskTaskArrayOutput)
}

type NdbMaintenanceTaskArrayOutput struct{ *pulumi.OutputState }

func (NdbMaintenanceTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbMaintenanceTask)(nil)).Elem()
}

func (o NdbMaintenanceTaskArrayOutput) ToNdbMaintenanceTaskArrayOutput() NdbMaintenanceTaskArrayOutput {
	return o
}

func (o NdbMaintenanceTaskArrayOutput) ToNdbMaintenanceTaskArrayOutputWithContext(ctx context.Context) NdbMaintenanceTaskArrayOutput {
	return o
}

func (o NdbMaintenanceTaskArrayOutput) Index(i pulumi.IntInput) NdbMaintenanceTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbMaintenanceTask {
		return vs[0].([]*NdbMaintenanceTask)[vs[1].(int)]
	}).(NdbMaintenanceTaskOutput)
}

type NdbMaintenanceTaskMapOutput struct{ *pulumi.OutputState }

func (NdbMaintenanceTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbMaintenanceTask)(nil)).Elem()
}

func (o NdbMaintenanceTaskMapOutput) ToNdbMaintenanceTaskMapOutput() NdbMaintenanceTaskMapOutput {
	return o
}

func (o NdbMaintenanceTaskMapOutput) ToNdbMaintenanceTaskMapOutputWithContext(ctx context.Context) NdbMaintenanceTaskMapOutput {
	return o
}

func (o NdbMaintenanceTaskMapOutput) MapIndex(k pulumi.StringInput) NdbMaintenanceTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbMaintenanceTask {
		return vs[0].(map[string]*NdbMaintenanceTask)[vs[1].(string)]
	}).(NdbMaintenanceTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbMaintenanceTaskInput)(nil)).Elem(), &NdbMaintenanceTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbMaintenanceTaskArrayInput)(nil)).Elem(), NdbMaintenanceTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbMaintenanceTaskMapInput)(nil)).Elem(), NdbMaintenanceTaskMap{})
	pulumi.RegisterOutputType(NdbMaintenanceTaskOutput{})
	pulumi.RegisterOutputType(NdbMaintenanceTaskArrayOutput{})
	pulumi.RegisterOutputType(NdbMaintenanceTaskMapOutput{})
}
