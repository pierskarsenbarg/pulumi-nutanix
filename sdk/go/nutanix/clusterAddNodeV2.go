// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Add node on a cluster identified by {extId}.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// // cluster of 3 node uuid that we want to add node
// clustersExtId := "00057b8b-0b3b-4b3b-0000-000000000000";
// // for example
// cvmIp := "10.xx.xx.xx";
// //# check if the node to add is un configured or not
// cluster_node, err := nutanix.NewClustersDiscoverUnconfiguredNodesV2(ctx, "cluster-node", &nutanix.ClustersDiscoverUnconfiguredNodesV2Args{
// ExtId: pulumi.String(clustersExtId),
// AddressType: pulumi.String("IPV4"),
// IpFilterLists: nutanix.ClustersDiscoverUnconfiguredNodesV2IpFilterListArray{
// &nutanix.ClustersDiscoverUnconfiguredNodesV2IpFilterListArgs{
// Ipv4s: nutanix.ClustersDiscoverUnconfiguredNodesV2IpFilterListIpv4Array{
// &nutanix.ClustersDiscoverUnconfiguredNodesV2IpFilterListIpv4Args{
// Value: pulumi.String(cvmIp),
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// //# fetch Network info for unconfigured node
// node_network_info, err := nutanix.NewClustersUnconfiguredNodeNetworksV2(ctx, "node-network-info", &nutanix.ClustersUnconfiguredNodeNetworksV2Args{
// ExtId: pulumi.String(clustersExtId),
// RequestType: pulumi.String("expand_cluster"),
// NodeLists: nutanix.ClustersUnconfiguredNodeNetworksV2NodeListArray{
// &nutanix.ClustersUnconfiguredNodeNetworksV2NodeListArgs{
// CvmIps: nutanix.ClustersUnconfiguredNodeNetworksV2NodeListCvmIpArray{
// &nutanix.ClustersUnconfiguredNodeNetworksV2NodeListCvmIpArgs{
// Ipv4s: nutanix.ClustersUnconfiguredNodeNetworksV2NodeListCvmIpIpv4Array{
// &nutanix.ClustersUnconfiguredNodeNetworksV2NodeListCvmIpIpv4Args{
// Value: pulumi.String(cvmIp),
// },
// },
// },
// },
// HypervisorIps: nutanix.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIpArray{
// &nutanix.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIpArgs{
// Ipv4s: nutanix.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIpIpv4Array{
// &nutanix.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIpIpv4Args{
// Value: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].HypervisorIps[0].Ipv4s[0].Value, nil
// }).(pulumi.StringPtrOutput),
// },
// },
// },
// },
// },
// },
// }, pulumi.DependsOn([]pulumi.Resource{
// cluster_node,
// }))
// if err != nil {
// return err
// }
// //# add node to the cluster
// _, err = nutanix.NewClusterAddNodeV2(ctx, "add-node", &nutanix.ClusterAddNodeV2Args{
// ClusterExtId: pulumi.String(clustersExtId),
// ShouldSkipAddNode: pulumi.Bool(false),
// ShouldSkipPreExpandChecks: pulumi.Bool(false),
// NodeParams: nutanix.ClusterAddNodeV2NodeParamArray{
// &nutanix.ClusterAddNodeV2NodeParamArgs{
// ShouldSkipHostNetworking: pulumi.Bool(false),
// HypervisorIsos: nutanix.ClusterAddNodeV2NodeParamHypervisorIsoArray{
// &nutanix.ClusterAddNodeV2NodeParamHypervisorIsoArgs{
// Type: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].HypervisorType, nil
// }).(pulumi.StringPtrOutput),
// },
// },
// NodeLists: nutanix.ClusterAddNodeV2NodeParamNodeListArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListArgs{
// NodeUuid: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].NodeUuid, nil
// }).(pulumi.StringPtrOutput),
// Model: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].RackableUnitModel, nil
// }).(pulumi.StringPtrOutput),
// BlockId: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].RackableUnitSerial, nil
// }).(pulumi.StringPtrOutput),
// HypervisorType: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].HypervisorType, nil
// }).(pulumi.StringPtrOutput),
// HypervisorVersion: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].HypervisorVersion, nil
// }).(pulumi.StringPtrOutput),
// NodePosition: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].NodePosition, nil
// }).(pulumi.StringPtrOutput),
// NosVersion: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].NosVersion, nil
// }).(pulumi.StringPtrOutput),
// HypervisorHostname: pulumi.String("example"),
// CurrentNetworkInterface: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].Uplinks[0].UplinkLists[0].Name, nil
// }).(pulumi.StringPtrOutput),
// HypervisorIps: nutanix.ClusterAddNodeV2NodeParamNodeListHypervisorIpArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListHypervisorIpArgs{
// Ipv4s: nutanix.ClusterAddNodeV2NodeParamNodeListHypervisorIpIpv4Array{
// &nutanix.ClusterAddNodeV2NodeParamNodeListHypervisorIpIpv4Args{
// Value: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].HypervisorIps[0].Ipv4s[0].Value, nil
// }).(pulumi.StringPtrOutput),
// },
// },
// },
// },
// CvmIps: nutanix.ClusterAddNodeV2NodeParamNodeListCvmIpArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListCvmIpArgs{
// Ipv4s: nutanix.ClusterAddNodeV2NodeParamNodeListCvmIpIpv4Array{
// &nutanix.ClusterAddNodeV2NodeParamNodeListCvmIpIpv4Args{
// Value: pulumi.String(cvmIp),
// },
// },
// },
// },
// IpmiIps: nutanix.ClusterAddNodeV2NodeParamNodeListIpmiIpArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListIpmiIpArgs{
// Ipv4s: nutanix.ClusterAddNodeV2NodeParamNodeListIpmiIpIpv4Array{
// &nutanix.ClusterAddNodeV2NodeParamNodeListIpmiIpIpv4Args{
// Value: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].IpmiIps[0].Ipv4s[0].Value, nil
// }).(pulumi.StringPtrOutput),
// },
// },
// },
// },
// IsRoboMixedHypervisor: pulumi.Bool(true),
// Networks: nutanix.ClusterAddNodeV2NodeParamNodeListNetworkArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListNetworkArgs{
// Name: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].NetworkInfos[0].Hcis[0].Name, nil
// }).(pulumi.StringPtrOutput),
// Networks: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (interface{}, error) {
// return nodesNetworkingDetails[0].NetworkInfos[0].Hcis[0].Networks, nil
// }).(pulumi.Interface{}Output),
// Uplinks: nutanix.ClusterAddNodeV2NodeParamNodeListNetworkUplinkArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListNetworkUplinkArgs{
// Actives: nutanix.ClusterAddNodeV2NodeParamNodeListNetworkUplinkActiveArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListNetworkUplinkActiveArgs{
// Name: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].Uplinks[0].UplinkLists[0].Name, nil
// }).(pulumi.StringPtrOutput),
// Mac: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].Uplinks[0].UplinkLists[0].Mac, nil
// }).(pulumi.StringPtrOutput),
// Value: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].Uplinks[0].UplinkLists[0].Name, nil
// }).(pulumi.StringPtrOutput),
// },
// },
// Standbies: nutanix.ClusterAddNodeV2NodeParamNodeListNetworkUplinkStandbyArray{
// &nutanix.ClusterAddNodeV2NodeParamNodeListNetworkUplinkStandbyArgs{
// Name: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].Uplinks[0].UplinkLists[1].Name, nil
// }).(pulumi.StringPtrOutput),
// Mac: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].Uplinks[0].UplinkLists[1].Mac, nil
// }).(pulumi.StringPtrOutput),
// Value: node_network_info.NodesNetworkingDetails.ApplyT(func(nodesNetworkingDetails []nutanix.ClustersUnconfiguredNodeNetworksV2NodesNetworkingDetail) (*string, error) {
// return &nodesNetworkingDetails[0].Uplinks[0].UplinkLists[1].Name, nil
// }).(pulumi.StringPtrOutput),
// },
// },
// },
// },
// },
// },
// },
// },
// },
// },
// ConfigParams: nutanix.ClusterAddNodeV2ConfigParamArray{
// &nutanix.ClusterAddNodeV2ConfigParamArgs{
// ShouldSkipImaging: pulumi.Bool(true),
// TargetHypervisor: cluster_node.UnconfiguredNodes.ApplyT(func(unconfiguredNodes []nutanix.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNode) (*string, error) {
// return &unconfiguredNodes[0].HypervisorType, nil
// }).(pulumi.StringPtrOutput),
// },
// },
// RemoveNodeParams: nutanix.ClusterAddNodeV2RemoveNodeParamArray{
// &nutanix.ClusterAddNodeV2RemoveNodeParamArgs{
// ExtraParams: nutanix.ClusterAddNodeV2RemoveNodeParamExtraParamArray{
// &nutanix.ClusterAddNodeV2RemoveNodeParamExtraParamArgs{
// ShouldSkipUpgradeCheck: pulumi.Bool(false),
// SkipSpaceCheck: pulumi.Bool(false),
// ShouldSkipAddCheck: pulumi.Bool(false),
// },
// },
// ShouldSkipRemove: pulumi.Bool(false),
// ShouldSkipPrechecks: pulumi.Bool(false),
// },
// },
// }, pulumi.DependsOn([]pulumi.Resource{
// node_network_info,
// }))
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
type ClusterAddNodeV2 struct {
	pulumi.CustomResourceState

	// -(Required) Cluster UUID.
	ClusterExtId pulumi.StringOutput `pulumi:"clusterExtId"`
	// -(Optional) Config parameters.
	ConfigParams ClusterAddNodeV2ConfigParamArrayOutput `pulumi:"configParams"`
	// -(Required) Parameters of the node to be added.
	NodeParams ClusterAddNodeV2NodeParamArrayOutput `pulumi:"nodeParams"`
	// -(Optional) configuration for node removal.
	RemoveNodeParams ClusterAddNodeV2RemoveNodeParamArrayOutput `pulumi:"removeNodeParams"`
	// -(Optional) Indicates if node addition can be skipped.
	ShouldSkipAddNode pulumi.BoolOutput `pulumi:"shouldSkipAddNode"`
	// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
	ShouldSkipPreExpandChecks pulumi.BoolOutput `pulumi:"shouldSkipPreExpandChecks"`
}

// NewClusterAddNodeV2 registers a new resource with the given unique name, arguments, and options.
func NewClusterAddNodeV2(ctx *pulumi.Context,
	name string, args *ClusterAddNodeV2Args, opts ...pulumi.ResourceOption) (*ClusterAddNodeV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterExtId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterExtId'")
	}
	if args.NodeParams == nil {
		return nil, errors.New("invalid value for required argument 'NodeParams'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterAddNodeV2
	err := ctx.RegisterResource("nutanix:index/clusterAddNodeV2:ClusterAddNodeV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterAddNodeV2 gets an existing ClusterAddNodeV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterAddNodeV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterAddNodeV2State, opts ...pulumi.ResourceOption) (*ClusterAddNodeV2, error) {
	var resource ClusterAddNodeV2
	err := ctx.ReadResource("nutanix:index/clusterAddNodeV2:ClusterAddNodeV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterAddNodeV2 resources.
type clusterAddNodeV2State struct {
	// -(Required) Cluster UUID.
	ClusterExtId *string `pulumi:"clusterExtId"`
	// -(Optional) Config parameters.
	ConfigParams []ClusterAddNodeV2ConfigParam `pulumi:"configParams"`
	// -(Required) Parameters of the node to be added.
	NodeParams []ClusterAddNodeV2NodeParam `pulumi:"nodeParams"`
	// -(Optional) configuration for node removal.
	RemoveNodeParams []ClusterAddNodeV2RemoveNodeParam `pulumi:"removeNodeParams"`
	// -(Optional) Indicates if node addition can be skipped.
	ShouldSkipAddNode *bool `pulumi:"shouldSkipAddNode"`
	// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
	ShouldSkipPreExpandChecks *bool `pulumi:"shouldSkipPreExpandChecks"`
}

type ClusterAddNodeV2State struct {
	// -(Required) Cluster UUID.
	ClusterExtId pulumi.StringPtrInput
	// -(Optional) Config parameters.
	ConfigParams ClusterAddNodeV2ConfigParamArrayInput
	// -(Required) Parameters of the node to be added.
	NodeParams ClusterAddNodeV2NodeParamArrayInput
	// -(Optional) configuration for node removal.
	RemoveNodeParams ClusterAddNodeV2RemoveNodeParamArrayInput
	// -(Optional) Indicates if node addition can be skipped.
	ShouldSkipAddNode pulumi.BoolPtrInput
	// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
	ShouldSkipPreExpandChecks pulumi.BoolPtrInput
}

func (ClusterAddNodeV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAddNodeV2State)(nil)).Elem()
}

type clusterAddNodeV2Args struct {
	// -(Required) Cluster UUID.
	ClusterExtId string `pulumi:"clusterExtId"`
	// -(Optional) Config parameters.
	ConfigParams []ClusterAddNodeV2ConfigParam `pulumi:"configParams"`
	// -(Required) Parameters of the node to be added.
	NodeParams []ClusterAddNodeV2NodeParam `pulumi:"nodeParams"`
	// -(Optional) configuration for node removal.
	RemoveNodeParams []ClusterAddNodeV2RemoveNodeParam `pulumi:"removeNodeParams"`
	// -(Optional) Indicates if node addition can be skipped.
	ShouldSkipAddNode *bool `pulumi:"shouldSkipAddNode"`
	// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
	ShouldSkipPreExpandChecks *bool `pulumi:"shouldSkipPreExpandChecks"`
}

// The set of arguments for constructing a ClusterAddNodeV2 resource.
type ClusterAddNodeV2Args struct {
	// -(Required) Cluster UUID.
	ClusterExtId pulumi.StringInput
	// -(Optional) Config parameters.
	ConfigParams ClusterAddNodeV2ConfigParamArrayInput
	// -(Required) Parameters of the node to be added.
	NodeParams ClusterAddNodeV2NodeParamArrayInput
	// -(Optional) configuration for node removal.
	RemoveNodeParams ClusterAddNodeV2RemoveNodeParamArrayInput
	// -(Optional) Indicates if node addition can be skipped.
	ShouldSkipAddNode pulumi.BoolPtrInput
	// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
	ShouldSkipPreExpandChecks pulumi.BoolPtrInput
}

func (ClusterAddNodeV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAddNodeV2Args)(nil)).Elem()
}

type ClusterAddNodeV2Input interface {
	pulumi.Input

	ToClusterAddNodeV2Output() ClusterAddNodeV2Output
	ToClusterAddNodeV2OutputWithContext(ctx context.Context) ClusterAddNodeV2Output
}

func (*ClusterAddNodeV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAddNodeV2)(nil)).Elem()
}

func (i *ClusterAddNodeV2) ToClusterAddNodeV2Output() ClusterAddNodeV2Output {
	return i.ToClusterAddNodeV2OutputWithContext(context.Background())
}

func (i *ClusterAddNodeV2) ToClusterAddNodeV2OutputWithContext(ctx context.Context) ClusterAddNodeV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAddNodeV2Output)
}

// ClusterAddNodeV2ArrayInput is an input type that accepts ClusterAddNodeV2Array and ClusterAddNodeV2ArrayOutput values.
// You can construct a concrete instance of `ClusterAddNodeV2ArrayInput` via:
//
//	ClusterAddNodeV2Array{ ClusterAddNodeV2Args{...} }
type ClusterAddNodeV2ArrayInput interface {
	pulumi.Input

	ToClusterAddNodeV2ArrayOutput() ClusterAddNodeV2ArrayOutput
	ToClusterAddNodeV2ArrayOutputWithContext(context.Context) ClusterAddNodeV2ArrayOutput
}

type ClusterAddNodeV2Array []ClusterAddNodeV2Input

func (ClusterAddNodeV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAddNodeV2)(nil)).Elem()
}

func (i ClusterAddNodeV2Array) ToClusterAddNodeV2ArrayOutput() ClusterAddNodeV2ArrayOutput {
	return i.ToClusterAddNodeV2ArrayOutputWithContext(context.Background())
}

func (i ClusterAddNodeV2Array) ToClusterAddNodeV2ArrayOutputWithContext(ctx context.Context) ClusterAddNodeV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAddNodeV2ArrayOutput)
}

// ClusterAddNodeV2MapInput is an input type that accepts ClusterAddNodeV2Map and ClusterAddNodeV2MapOutput values.
// You can construct a concrete instance of `ClusterAddNodeV2MapInput` via:
//
//	ClusterAddNodeV2Map{ "key": ClusterAddNodeV2Args{...} }
type ClusterAddNodeV2MapInput interface {
	pulumi.Input

	ToClusterAddNodeV2MapOutput() ClusterAddNodeV2MapOutput
	ToClusterAddNodeV2MapOutputWithContext(context.Context) ClusterAddNodeV2MapOutput
}

type ClusterAddNodeV2Map map[string]ClusterAddNodeV2Input

func (ClusterAddNodeV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAddNodeV2)(nil)).Elem()
}

func (i ClusterAddNodeV2Map) ToClusterAddNodeV2MapOutput() ClusterAddNodeV2MapOutput {
	return i.ToClusterAddNodeV2MapOutputWithContext(context.Background())
}

func (i ClusterAddNodeV2Map) ToClusterAddNodeV2MapOutputWithContext(ctx context.Context) ClusterAddNodeV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAddNodeV2MapOutput)
}

type ClusterAddNodeV2Output struct{ *pulumi.OutputState }

func (ClusterAddNodeV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAddNodeV2)(nil)).Elem()
}

func (o ClusterAddNodeV2Output) ToClusterAddNodeV2Output() ClusterAddNodeV2Output {
	return o
}

func (o ClusterAddNodeV2Output) ToClusterAddNodeV2OutputWithContext(ctx context.Context) ClusterAddNodeV2Output {
	return o
}

// -(Required) Cluster UUID.
func (o ClusterAddNodeV2Output) ClusterExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAddNodeV2) pulumi.StringOutput { return v.ClusterExtId }).(pulumi.StringOutput)
}

// -(Optional) Config parameters.
func (o ClusterAddNodeV2Output) ConfigParams() ClusterAddNodeV2ConfigParamArrayOutput {
	return o.ApplyT(func(v *ClusterAddNodeV2) ClusterAddNodeV2ConfigParamArrayOutput { return v.ConfigParams }).(ClusterAddNodeV2ConfigParamArrayOutput)
}

// -(Required) Parameters of the node to be added.
func (o ClusterAddNodeV2Output) NodeParams() ClusterAddNodeV2NodeParamArrayOutput {
	return o.ApplyT(func(v *ClusterAddNodeV2) ClusterAddNodeV2NodeParamArrayOutput { return v.NodeParams }).(ClusterAddNodeV2NodeParamArrayOutput)
}

// -(Optional) configuration for node removal.
func (o ClusterAddNodeV2Output) RemoveNodeParams() ClusterAddNodeV2RemoveNodeParamArrayOutput {
	return o.ApplyT(func(v *ClusterAddNodeV2) ClusterAddNodeV2RemoveNodeParamArrayOutput { return v.RemoveNodeParams }).(ClusterAddNodeV2RemoveNodeParamArrayOutput)
}

// -(Optional) Indicates if node addition can be skipped.
func (o ClusterAddNodeV2Output) ShouldSkipAddNode() pulumi.BoolOutput {
	return o.ApplyT(func(v *ClusterAddNodeV2) pulumi.BoolOutput { return v.ShouldSkipAddNode }).(pulumi.BoolOutput)
}

// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
func (o ClusterAddNodeV2Output) ShouldSkipPreExpandChecks() pulumi.BoolOutput {
	return o.ApplyT(func(v *ClusterAddNodeV2) pulumi.BoolOutput { return v.ShouldSkipPreExpandChecks }).(pulumi.BoolOutput)
}

type ClusterAddNodeV2ArrayOutput struct{ *pulumi.OutputState }

func (ClusterAddNodeV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAddNodeV2)(nil)).Elem()
}

func (o ClusterAddNodeV2ArrayOutput) ToClusterAddNodeV2ArrayOutput() ClusterAddNodeV2ArrayOutput {
	return o
}

func (o ClusterAddNodeV2ArrayOutput) ToClusterAddNodeV2ArrayOutputWithContext(ctx context.Context) ClusterAddNodeV2ArrayOutput {
	return o
}

func (o ClusterAddNodeV2ArrayOutput) Index(i pulumi.IntInput) ClusterAddNodeV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterAddNodeV2 {
		return vs[0].([]*ClusterAddNodeV2)[vs[1].(int)]
	}).(ClusterAddNodeV2Output)
}

type ClusterAddNodeV2MapOutput struct{ *pulumi.OutputState }

func (ClusterAddNodeV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAddNodeV2)(nil)).Elem()
}

func (o ClusterAddNodeV2MapOutput) ToClusterAddNodeV2MapOutput() ClusterAddNodeV2MapOutput {
	return o
}

func (o ClusterAddNodeV2MapOutput) ToClusterAddNodeV2MapOutputWithContext(ctx context.Context) ClusterAddNodeV2MapOutput {
	return o
}

func (o ClusterAddNodeV2MapOutput) MapIndex(k pulumi.StringInput) ClusterAddNodeV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterAddNodeV2 {
		return vs[0].(map[string]*ClusterAddNodeV2)[vs[1].(string)]
	}).(ClusterAddNodeV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAddNodeV2Input)(nil)).Elem(), &ClusterAddNodeV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAddNodeV2ArrayInput)(nil)).Elem(), ClusterAddNodeV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAddNodeV2MapInput)(nil)).Elem(), ClusterAddNodeV2Map{})
	pulumi.RegisterOutputType(ClusterAddNodeV2Output{})
	pulumi.RegisterOutputType(ClusterAddNodeV2ArrayOutput{})
	pulumi.RegisterOutputType(ClusterAddNodeV2MapOutput{})
}
