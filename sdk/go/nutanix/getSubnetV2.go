// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a subnet with the specified UUID.
func LookupSubnetV2(ctx *pulumi.Context, args *LookupSubnetV2Args, opts ...pulumi.InvokeOption) (*LookupSubnetV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetV2Result
	err := ctx.Invoke("nutanix:index/getSubnetV2:getSubnetV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnetV2.
type LookupSubnetV2Args struct {
	// - (Required) The UUID of the subnet.
	ExtId string `pulumi:"extId"`
	// List of IPs that are excluded while allocating IP addresses to VM ports.
	ReservedIpAddresses []GetSubnetV2ReservedIpAddress `pulumi:"reservedIpAddresses"`
}

// A collection of values returned by getSubnetV2.
type LookupSubnetV2Result struct {
	// Name of the bridge on the host for the subnet.
	BridgeName string `pulumi:"bridgeName"`
	// Cluster Name
	ClusterName string `pulumi:"clusterName"`
	// UUID of the cluster this subnet belongs to.
	ClusterReference string `pulumi:"clusterReference"`
	// Description of the subnet.
	Description string `pulumi:"description"`
	// List of DHCP options to be configured.
	DhcpOptions []GetSubnetV2DhcpOption `pulumi:"dhcpOptions"`
	// List of IPs, which are a subset from the reserved IP address list, that must be advertised to the SDN gateway.
	DynamicIpAddresses []GetSubnetV2DynamicIpAddress `pulumi:"dynamicIpAddresses"`
	ExtId              string                        `pulumi:"extId"`
	// Hypervisor Type
	HypervisorType string `pulumi:"hypervisorType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IP configuration for the subnet.
	IpConfigs []GetSubnetV2IpConfig `pulumi:"ipConfigs"`
	// IP Prefix in CIDR format.
	IpPrefix string `pulumi:"ipPrefix"`
	// IP usage statistics.
	IpUsages []GetSubnetV2IpUsage `pulumi:"ipUsages"`
	// Indicates whether the subnet is used for advanced networking.
	IsAdvancedNetworking bool `pulumi:"isAdvancedNetworking"`
	// Indicates whether the subnet is used for external connectivity.
	IsExternal bool `pulumi:"isExternal"`
	// Indicates whether NAT must be enabled for VPCs attached to the subnet. This is supported only for external subnets. NAT is enabled by default on external subnets.
	IsNatEnabled bool `pulumi:"isNatEnabled"`
	// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
	Links []GetSubnetV2Link `pulumi:"links"`
	// Migration state of the subnet. This field is read-only.
	MigrationState string `pulumi:"migrationState"`
	// Name of the subnet.
	Name string `pulumi:"name"`
	// UUID of the Network function chain entity that this subnet belongs to (type VLAN only).
	NetworkFunctionChainReference string `pulumi:"networkFunctionChainReference"`
	// or VLAN subnet, this field represents VLAN Id, valid range is from 0 to 4095; For overlay subnet, this field represents 24-bit VNI, this field is read-only.
	NetworkId int `pulumi:"networkId"`
	// List of IPs that are excluded while allocating IP addresses to VM ports.
	ReservedIpAddresses []GetSubnetV2ReservedIpAddress `pulumi:"reservedIpAddresses"`
	// Type of subnet.
	SubnetType string `pulumi:"subnetType"`
	// UUID of the virtual switch this subnet belongs to (type VLAN only).
	VirtualSwitchReference string `pulumi:"virtualSwitchReference"`
	// Schema to configure a virtual switch
	VirtualSwitches []GetSubnetV2VirtualSwitch `pulumi:"virtualSwitches"`
	// UUID of Virtual Private Cloud this subnet belongs to (type Overlay only).
	VpcReference string `pulumi:"vpcReference"`
	// Networking common base object
	Vpcs []GetSubnetV2Vpc `pulumi:"vpcs"`
}

func LookupSubnetV2Output(ctx *pulumi.Context, args LookupSubnetV2OutputArgs, opts ...pulumi.InvokeOption) LookupSubnetV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubnetV2ResultOutput, error) {
			args := v.(LookupSubnetV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getSubnetV2:getSubnetV2", args, LookupSubnetV2ResultOutput{}, options).(LookupSubnetV2ResultOutput), nil
		}).(LookupSubnetV2ResultOutput)
}

// A collection of arguments for invoking getSubnetV2.
type LookupSubnetV2OutputArgs struct {
	// - (Required) The UUID of the subnet.
	ExtId pulumi.StringInput `pulumi:"extId"`
	// List of IPs that are excluded while allocating IP addresses to VM ports.
	ReservedIpAddresses GetSubnetV2ReservedIpAddressArrayInput `pulumi:"reservedIpAddresses"`
}

func (LookupSubnetV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetV2Args)(nil)).Elem()
}

// A collection of values returned by getSubnetV2.
type LookupSubnetV2ResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetV2Result)(nil)).Elem()
}

func (o LookupSubnetV2ResultOutput) ToLookupSubnetV2ResultOutput() LookupSubnetV2ResultOutput {
	return o
}

func (o LookupSubnetV2ResultOutput) ToLookupSubnetV2ResultOutputWithContext(ctx context.Context) LookupSubnetV2ResultOutput {
	return o
}

// Name of the bridge on the host for the subnet.
func (o LookupSubnetV2ResultOutput) BridgeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.BridgeName }).(pulumi.StringOutput)
}

// Cluster Name
func (o LookupSubnetV2ResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.ClusterName }).(pulumi.StringOutput)
}

// UUID of the cluster this subnet belongs to.
func (o LookupSubnetV2ResultOutput) ClusterReference() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.ClusterReference }).(pulumi.StringOutput)
}

// Description of the subnet.
func (o LookupSubnetV2ResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.Description }).(pulumi.StringOutput)
}

// List of DHCP options to be configured.
func (o LookupSubnetV2ResultOutput) DhcpOptions() GetSubnetV2DhcpOptionArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2DhcpOption { return v.DhcpOptions }).(GetSubnetV2DhcpOptionArrayOutput)
}

// List of IPs, which are a subset from the reserved IP address list, that must be advertised to the SDN gateway.
func (o LookupSubnetV2ResultOutput) DynamicIpAddresses() GetSubnetV2DynamicIpAddressArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2DynamicIpAddress { return v.DynamicIpAddresses }).(GetSubnetV2DynamicIpAddressArrayOutput)
}

func (o LookupSubnetV2ResultOutput) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.ExtId }).(pulumi.StringOutput)
}

// Hypervisor Type
func (o LookupSubnetV2ResultOutput) HypervisorType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.HypervisorType }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubnetV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// IP configuration for the subnet.
func (o LookupSubnetV2ResultOutput) IpConfigs() GetSubnetV2IpConfigArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2IpConfig { return v.IpConfigs }).(GetSubnetV2IpConfigArrayOutput)
}

// IP Prefix in CIDR format.
func (o LookupSubnetV2ResultOutput) IpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.IpPrefix }).(pulumi.StringOutput)
}

// IP usage statistics.
func (o LookupSubnetV2ResultOutput) IpUsages() GetSubnetV2IpUsageArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2IpUsage { return v.IpUsages }).(GetSubnetV2IpUsageArrayOutput)
}

// Indicates whether the subnet is used for advanced networking.
func (o LookupSubnetV2ResultOutput) IsAdvancedNetworking() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) bool { return v.IsAdvancedNetworking }).(pulumi.BoolOutput)
}

// Indicates whether the subnet is used for external connectivity.
func (o LookupSubnetV2ResultOutput) IsExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) bool { return v.IsExternal }).(pulumi.BoolOutput)
}

// Indicates whether NAT must be enabled for VPCs attached to the subnet. This is supported only for external subnets. NAT is enabled by default on external subnets.
func (o LookupSubnetV2ResultOutput) IsNatEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) bool { return v.IsNatEnabled }).(pulumi.BoolOutput)
}

// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
func (o LookupSubnetV2ResultOutput) Links() GetSubnetV2LinkArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2Link { return v.Links }).(GetSubnetV2LinkArrayOutput)
}

// Migration state of the subnet. This field is read-only.
func (o LookupSubnetV2ResultOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Name of the subnet.
func (o LookupSubnetV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.Name }).(pulumi.StringOutput)
}

// UUID of the Network function chain entity that this subnet belongs to (type VLAN only).
func (o LookupSubnetV2ResultOutput) NetworkFunctionChainReference() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.NetworkFunctionChainReference }).(pulumi.StringOutput)
}

// or VLAN subnet, this field represents VLAN Id, valid range is from 0 to 4095; For overlay subnet, this field represents 24-bit VNI, this field is read-only.
func (o LookupSubnetV2ResultOutput) NetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) int { return v.NetworkId }).(pulumi.IntOutput)
}

// List of IPs that are excluded while allocating IP addresses to VM ports.
func (o LookupSubnetV2ResultOutput) ReservedIpAddresses() GetSubnetV2ReservedIpAddressArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2ReservedIpAddress { return v.ReservedIpAddresses }).(GetSubnetV2ReservedIpAddressArrayOutput)
}

// Type of subnet.
func (o LookupSubnetV2ResultOutput) SubnetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.SubnetType }).(pulumi.StringOutput)
}

// UUID of the virtual switch this subnet belongs to (type VLAN only).
func (o LookupSubnetV2ResultOutput) VirtualSwitchReference() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.VirtualSwitchReference }).(pulumi.StringOutput)
}

// Schema to configure a virtual switch
func (o LookupSubnetV2ResultOutput) VirtualSwitches() GetSubnetV2VirtualSwitchArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2VirtualSwitch { return v.VirtualSwitches }).(GetSubnetV2VirtualSwitchArrayOutput)
}

// UUID of Virtual Private Cloud this subnet belongs to (type Overlay only).
func (o LookupSubnetV2ResultOutput) VpcReference() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) string { return v.VpcReference }).(pulumi.StringOutput)
}

// Networking common base object
func (o LookupSubnetV2ResultOutput) Vpcs() GetSubnetV2VpcArrayOutput {
	return o.ApplyT(func(v LookupSubnetV2Result) []GetSubnetV2Vpc { return v.Vpcs }).(GetSubnetV2VpcArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetV2ResultOutput{})
}
