// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to authorize db server VMs for cloning of database instance based on the input parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewNdbAuthorizeDbserver(ctx, "name", &nutanix.NdbAuthorizeDbserverArgs{
//				DbserversIds: pulumi.StringArray{
//					pulumi.String("{{ dbServer_IDs}}"),
//				},
//				TimeMachineName: pulumi.String("test-pg-inst"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NdbAuthorizeDbserver struct {
	pulumi.CustomResourceState

	DbserversIds  pulumi.StringArrayOutput `pulumi:"dbserversIds"`
	TimeMachineId pulumi.StringPtrOutput   `pulumi:"timeMachineId"`
	// * ` dbserversId  `: (Required)
	TimeMachineName pulumi.StringPtrOutput `pulumi:"timeMachineName"`
}

// NewNdbAuthorizeDbserver registers a new resource with the given unique name, arguments, and options.
func NewNdbAuthorizeDbserver(ctx *pulumi.Context,
	name string, args *NdbAuthorizeDbserverArgs, opts ...pulumi.ResourceOption) (*NdbAuthorizeDbserver, error) {
	if args == nil {
		args = &NdbAuthorizeDbserverArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NdbAuthorizeDbserver
	err := ctx.RegisterResource("nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNdbAuthorizeDbserver gets an existing NdbAuthorizeDbserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNdbAuthorizeDbserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NdbAuthorizeDbserverState, opts ...pulumi.ResourceOption) (*NdbAuthorizeDbserver, error) {
	var resource NdbAuthorizeDbserver
	err := ctx.ReadResource("nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NdbAuthorizeDbserver resources.
type ndbAuthorizeDbserverState struct {
	DbserversIds  []string `pulumi:"dbserversIds"`
	TimeMachineId *string  `pulumi:"timeMachineId"`
	// * ` dbserversId  `: (Required)
	TimeMachineName *string `pulumi:"timeMachineName"`
}

type NdbAuthorizeDbserverState struct {
	DbserversIds  pulumi.StringArrayInput
	TimeMachineId pulumi.StringPtrInput
	// * ` dbserversId  `: (Required)
	TimeMachineName pulumi.StringPtrInput
}

func (NdbAuthorizeDbserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbAuthorizeDbserverState)(nil)).Elem()
}

type ndbAuthorizeDbserverArgs struct {
	DbserversIds  []string `pulumi:"dbserversIds"`
	TimeMachineId *string  `pulumi:"timeMachineId"`
	// * ` dbserversId  `: (Required)
	TimeMachineName *string `pulumi:"timeMachineName"`
}

// The set of arguments for constructing a NdbAuthorizeDbserver resource.
type NdbAuthorizeDbserverArgs struct {
	DbserversIds  pulumi.StringArrayInput
	TimeMachineId pulumi.StringPtrInput
	// * ` dbserversId  `: (Required)
	TimeMachineName pulumi.StringPtrInput
}

func (NdbAuthorizeDbserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ndbAuthorizeDbserverArgs)(nil)).Elem()
}

type NdbAuthorizeDbserverInput interface {
	pulumi.Input

	ToNdbAuthorizeDbserverOutput() NdbAuthorizeDbserverOutput
	ToNdbAuthorizeDbserverOutputWithContext(ctx context.Context) NdbAuthorizeDbserverOutput
}

func (*NdbAuthorizeDbserver) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbAuthorizeDbserver)(nil)).Elem()
}

func (i *NdbAuthorizeDbserver) ToNdbAuthorizeDbserverOutput() NdbAuthorizeDbserverOutput {
	return i.ToNdbAuthorizeDbserverOutputWithContext(context.Background())
}

func (i *NdbAuthorizeDbserver) ToNdbAuthorizeDbserverOutputWithContext(ctx context.Context) NdbAuthorizeDbserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbAuthorizeDbserverOutput)
}

// NdbAuthorizeDbserverArrayInput is an input type that accepts NdbAuthorizeDbserverArray and NdbAuthorizeDbserverArrayOutput values.
// You can construct a concrete instance of `NdbAuthorizeDbserverArrayInput` via:
//
//	NdbAuthorizeDbserverArray{ NdbAuthorizeDbserverArgs{...} }
type NdbAuthorizeDbserverArrayInput interface {
	pulumi.Input

	ToNdbAuthorizeDbserverArrayOutput() NdbAuthorizeDbserverArrayOutput
	ToNdbAuthorizeDbserverArrayOutputWithContext(context.Context) NdbAuthorizeDbserverArrayOutput
}

type NdbAuthorizeDbserverArray []NdbAuthorizeDbserverInput

func (NdbAuthorizeDbserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbAuthorizeDbserver)(nil)).Elem()
}

func (i NdbAuthorizeDbserverArray) ToNdbAuthorizeDbserverArrayOutput() NdbAuthorizeDbserverArrayOutput {
	return i.ToNdbAuthorizeDbserverArrayOutputWithContext(context.Background())
}

func (i NdbAuthorizeDbserverArray) ToNdbAuthorizeDbserverArrayOutputWithContext(ctx context.Context) NdbAuthorizeDbserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbAuthorizeDbserverArrayOutput)
}

// NdbAuthorizeDbserverMapInput is an input type that accepts NdbAuthorizeDbserverMap and NdbAuthorizeDbserverMapOutput values.
// You can construct a concrete instance of `NdbAuthorizeDbserverMapInput` via:
//
//	NdbAuthorizeDbserverMap{ "key": NdbAuthorizeDbserverArgs{...} }
type NdbAuthorizeDbserverMapInput interface {
	pulumi.Input

	ToNdbAuthorizeDbserverMapOutput() NdbAuthorizeDbserverMapOutput
	ToNdbAuthorizeDbserverMapOutputWithContext(context.Context) NdbAuthorizeDbserverMapOutput
}

type NdbAuthorizeDbserverMap map[string]NdbAuthorizeDbserverInput

func (NdbAuthorizeDbserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbAuthorizeDbserver)(nil)).Elem()
}

func (i NdbAuthorizeDbserverMap) ToNdbAuthorizeDbserverMapOutput() NdbAuthorizeDbserverMapOutput {
	return i.ToNdbAuthorizeDbserverMapOutputWithContext(context.Background())
}

func (i NdbAuthorizeDbserverMap) ToNdbAuthorizeDbserverMapOutputWithContext(ctx context.Context) NdbAuthorizeDbserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NdbAuthorizeDbserverMapOutput)
}

type NdbAuthorizeDbserverOutput struct{ *pulumi.OutputState }

func (NdbAuthorizeDbserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NdbAuthorizeDbserver)(nil)).Elem()
}

func (o NdbAuthorizeDbserverOutput) ToNdbAuthorizeDbserverOutput() NdbAuthorizeDbserverOutput {
	return o
}

func (o NdbAuthorizeDbserverOutput) ToNdbAuthorizeDbserverOutputWithContext(ctx context.Context) NdbAuthorizeDbserverOutput {
	return o
}

func (o NdbAuthorizeDbserverOutput) DbserversIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NdbAuthorizeDbserver) pulumi.StringArrayOutput { return v.DbserversIds }).(pulumi.StringArrayOutput)
}

func (o NdbAuthorizeDbserverOutput) TimeMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbAuthorizeDbserver) pulumi.StringPtrOutput { return v.TimeMachineId }).(pulumi.StringPtrOutput)
}

// * ` dbserversId  `: (Required)
func (o NdbAuthorizeDbserverOutput) TimeMachineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NdbAuthorizeDbserver) pulumi.StringPtrOutput { return v.TimeMachineName }).(pulumi.StringPtrOutput)
}

type NdbAuthorizeDbserverArrayOutput struct{ *pulumi.OutputState }

func (NdbAuthorizeDbserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NdbAuthorizeDbserver)(nil)).Elem()
}

func (o NdbAuthorizeDbserverArrayOutput) ToNdbAuthorizeDbserverArrayOutput() NdbAuthorizeDbserverArrayOutput {
	return o
}

func (o NdbAuthorizeDbserverArrayOutput) ToNdbAuthorizeDbserverArrayOutputWithContext(ctx context.Context) NdbAuthorizeDbserverArrayOutput {
	return o
}

func (o NdbAuthorizeDbserverArrayOutput) Index(i pulumi.IntInput) NdbAuthorizeDbserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NdbAuthorizeDbserver {
		return vs[0].([]*NdbAuthorizeDbserver)[vs[1].(int)]
	}).(NdbAuthorizeDbserverOutput)
}

type NdbAuthorizeDbserverMapOutput struct{ *pulumi.OutputState }

func (NdbAuthorizeDbserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NdbAuthorizeDbserver)(nil)).Elem()
}

func (o NdbAuthorizeDbserverMapOutput) ToNdbAuthorizeDbserverMapOutput() NdbAuthorizeDbserverMapOutput {
	return o
}

func (o NdbAuthorizeDbserverMapOutput) ToNdbAuthorizeDbserverMapOutputWithContext(ctx context.Context) NdbAuthorizeDbserverMapOutput {
	return o
}

func (o NdbAuthorizeDbserverMapOutput) MapIndex(k pulumi.StringInput) NdbAuthorizeDbserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NdbAuthorizeDbserver {
		return vs[0].(map[string]*NdbAuthorizeDbserver)[vs[1].(string)]
	}).(NdbAuthorizeDbserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NdbAuthorizeDbserverInput)(nil)).Elem(), &NdbAuthorizeDbserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbAuthorizeDbserverArrayInput)(nil)).Elem(), NdbAuthorizeDbserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NdbAuthorizeDbserverMapInput)(nil)).Elem(), NdbAuthorizeDbserverMap{})
	pulumi.RegisterOutputType(NdbAuthorizeDbserverOutput{})
	pulumi.RegisterOutputType(NdbAuthorizeDbserverArrayOutput{})
	pulumi.RegisterOutputType(NdbAuthorizeDbserverMapOutput{})
}
