// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This operation creates a new default certificate and keys. It also creates the alternate FQDNs and alternate IPs for the Object store. The certificate of an Object store can be created when it is in a OBJECT_STORE_AVAILABLE or OBJECT_STORE_CERT_CREATION_FAILED state. If the publicCert, privateKey, and ca values are provided in the request body, these values are used to create the new certificate. If these values are not provided, a new certificate will be generated if 'shouldGenerate' is set to true and if it is set to false, the existing certificate will be used as the new certificate. Optionally, a list of additional alternate FQDNs and alternate IPs can be provided. These alternateFqdns and alternateIps must be included in the CA certificate if it has been provided.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetCertificateV2(ctx, &nutanix.GetCertificateV2Args{
//				ExtId:            "ef0a9a54-e7e1-42e2-a59f-de779ec1c9ea",
//				ObjectStoreExtId: "ac91151a-28b4-4ffe-b150-6bcb2ec80cd4",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## JSON Example
//
// See detailed information in [Nutanix Create a SSL certificate for an Object store V4 ](https://developers.nutanix.com/api-reference?namespace=objects&version=v4.0#tag/ObjectStores/operation/createCertificate).
type ObjectStoreCertificateV2 struct {
	pulumi.CustomResourceState

	AlternateFqdns ObjectStoreCertificateV2AlternateFqdnArrayOutput `pulumi:"alternateFqdns"`
	AlternateIps   ObjectStoreCertificateV2AlternateIpArrayOutput   `pulumi:"alternateIps"`
	// -(Required) The UUID of the certificate of an Object store.
	ExtId     pulumi.StringOutput                         `pulumi:"extId"`
	Links     ObjectStoreCertificateV2LinkArrayOutput     `pulumi:"links"`
	Metadatas ObjectStoreCertificateV2MetadataArrayOutput `pulumi:"metadatas"`
	// -(Required) The UUID of the Object store.
	ObjectStoreExtId pulumi.StringOutput `pulumi:"objectStoreExtId"`
	// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
	Path     pulumi.StringOutput `pulumi:"path"`
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewObjectStoreCertificateV2 registers a new resource with the given unique name, arguments, and options.
func NewObjectStoreCertificateV2(ctx *pulumi.Context,
	name string, args *ObjectStoreCertificateV2Args, opts ...pulumi.ResourceOption) (*ObjectStoreCertificateV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObjectStoreExtId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectStoreExtId'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObjectStoreCertificateV2
	err := ctx.RegisterResource("nutanix:index/objectStoreCertificateV2:ObjectStoreCertificateV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectStoreCertificateV2 gets an existing ObjectStoreCertificateV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectStoreCertificateV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectStoreCertificateV2State, opts ...pulumi.ResourceOption) (*ObjectStoreCertificateV2, error) {
	var resource ObjectStoreCertificateV2
	err := ctx.ReadResource("nutanix:index/objectStoreCertificateV2:ObjectStoreCertificateV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectStoreCertificateV2 resources.
type objectStoreCertificateV2State struct {
	AlternateFqdns []ObjectStoreCertificateV2AlternateFqdn `pulumi:"alternateFqdns"`
	AlternateIps   []ObjectStoreCertificateV2AlternateIp   `pulumi:"alternateIps"`
	// -(Required) The UUID of the certificate of an Object store.
	ExtId     *string                            `pulumi:"extId"`
	Links     []ObjectStoreCertificateV2Link     `pulumi:"links"`
	Metadatas []ObjectStoreCertificateV2Metadata `pulumi:"metadatas"`
	// -(Required) The UUID of the Object store.
	ObjectStoreExtId *string `pulumi:"objectStoreExtId"`
	// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
	Path     *string `pulumi:"path"`
	TenantId *string `pulumi:"tenantId"`
}

type ObjectStoreCertificateV2State struct {
	AlternateFqdns ObjectStoreCertificateV2AlternateFqdnArrayInput
	AlternateIps   ObjectStoreCertificateV2AlternateIpArrayInput
	// -(Required) The UUID of the certificate of an Object store.
	ExtId     pulumi.StringPtrInput
	Links     ObjectStoreCertificateV2LinkArrayInput
	Metadatas ObjectStoreCertificateV2MetadataArrayInput
	// -(Required) The UUID of the Object store.
	ObjectStoreExtId pulumi.StringPtrInput
	// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
	Path     pulumi.StringPtrInput
	TenantId pulumi.StringPtrInput
}

func (ObjectStoreCertificateV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreCertificateV2State)(nil)).Elem()
}

type objectStoreCertificateV2Args struct {
	// -(Required) The UUID of the Object store.
	ObjectStoreExtId string `pulumi:"objectStoreExtId"`
	// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a ObjectStoreCertificateV2 resource.
type ObjectStoreCertificateV2Args struct {
	// -(Required) The UUID of the Object store.
	ObjectStoreExtId pulumi.StringInput
	// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
	Path pulumi.StringInput
}

func (ObjectStoreCertificateV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreCertificateV2Args)(nil)).Elem()
}

type ObjectStoreCertificateV2Input interface {
	pulumi.Input

	ToObjectStoreCertificateV2Output() ObjectStoreCertificateV2Output
	ToObjectStoreCertificateV2OutputWithContext(ctx context.Context) ObjectStoreCertificateV2Output
}

func (*ObjectStoreCertificateV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStoreCertificateV2)(nil)).Elem()
}

func (i *ObjectStoreCertificateV2) ToObjectStoreCertificateV2Output() ObjectStoreCertificateV2Output {
	return i.ToObjectStoreCertificateV2OutputWithContext(context.Background())
}

func (i *ObjectStoreCertificateV2) ToObjectStoreCertificateV2OutputWithContext(ctx context.Context) ObjectStoreCertificateV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreCertificateV2Output)
}

// ObjectStoreCertificateV2ArrayInput is an input type that accepts ObjectStoreCertificateV2Array and ObjectStoreCertificateV2ArrayOutput values.
// You can construct a concrete instance of `ObjectStoreCertificateV2ArrayInput` via:
//
//	ObjectStoreCertificateV2Array{ ObjectStoreCertificateV2Args{...} }
type ObjectStoreCertificateV2ArrayInput interface {
	pulumi.Input

	ToObjectStoreCertificateV2ArrayOutput() ObjectStoreCertificateV2ArrayOutput
	ToObjectStoreCertificateV2ArrayOutputWithContext(context.Context) ObjectStoreCertificateV2ArrayOutput
}

type ObjectStoreCertificateV2Array []ObjectStoreCertificateV2Input

func (ObjectStoreCertificateV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStoreCertificateV2)(nil)).Elem()
}

func (i ObjectStoreCertificateV2Array) ToObjectStoreCertificateV2ArrayOutput() ObjectStoreCertificateV2ArrayOutput {
	return i.ToObjectStoreCertificateV2ArrayOutputWithContext(context.Background())
}

func (i ObjectStoreCertificateV2Array) ToObjectStoreCertificateV2ArrayOutputWithContext(ctx context.Context) ObjectStoreCertificateV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreCertificateV2ArrayOutput)
}

// ObjectStoreCertificateV2MapInput is an input type that accepts ObjectStoreCertificateV2Map and ObjectStoreCertificateV2MapOutput values.
// You can construct a concrete instance of `ObjectStoreCertificateV2MapInput` via:
//
//	ObjectStoreCertificateV2Map{ "key": ObjectStoreCertificateV2Args{...} }
type ObjectStoreCertificateV2MapInput interface {
	pulumi.Input

	ToObjectStoreCertificateV2MapOutput() ObjectStoreCertificateV2MapOutput
	ToObjectStoreCertificateV2MapOutputWithContext(context.Context) ObjectStoreCertificateV2MapOutput
}

type ObjectStoreCertificateV2Map map[string]ObjectStoreCertificateV2Input

func (ObjectStoreCertificateV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStoreCertificateV2)(nil)).Elem()
}

func (i ObjectStoreCertificateV2Map) ToObjectStoreCertificateV2MapOutput() ObjectStoreCertificateV2MapOutput {
	return i.ToObjectStoreCertificateV2MapOutputWithContext(context.Background())
}

func (i ObjectStoreCertificateV2Map) ToObjectStoreCertificateV2MapOutputWithContext(ctx context.Context) ObjectStoreCertificateV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreCertificateV2MapOutput)
}

type ObjectStoreCertificateV2Output struct{ *pulumi.OutputState }

func (ObjectStoreCertificateV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStoreCertificateV2)(nil)).Elem()
}

func (o ObjectStoreCertificateV2Output) ToObjectStoreCertificateV2Output() ObjectStoreCertificateV2Output {
	return o
}

func (o ObjectStoreCertificateV2Output) ToObjectStoreCertificateV2OutputWithContext(ctx context.Context) ObjectStoreCertificateV2Output {
	return o
}

func (o ObjectStoreCertificateV2Output) AlternateFqdns() ObjectStoreCertificateV2AlternateFqdnArrayOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) ObjectStoreCertificateV2AlternateFqdnArrayOutput {
		return v.AlternateFqdns
	}).(ObjectStoreCertificateV2AlternateFqdnArrayOutput)
}

func (o ObjectStoreCertificateV2Output) AlternateIps() ObjectStoreCertificateV2AlternateIpArrayOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) ObjectStoreCertificateV2AlternateIpArrayOutput {
		return v.AlternateIps
	}).(ObjectStoreCertificateV2AlternateIpArrayOutput)
}

// -(Required) The UUID of the certificate of an Object store.
func (o ObjectStoreCertificateV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

func (o ObjectStoreCertificateV2Output) Links() ObjectStoreCertificateV2LinkArrayOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) ObjectStoreCertificateV2LinkArrayOutput { return v.Links }).(ObjectStoreCertificateV2LinkArrayOutput)
}

func (o ObjectStoreCertificateV2Output) Metadatas() ObjectStoreCertificateV2MetadataArrayOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) ObjectStoreCertificateV2MetadataArrayOutput { return v.Metadatas }).(ObjectStoreCertificateV2MetadataArrayOutput)
}

// -(Required) The UUID of the Object store.
func (o ObjectStoreCertificateV2Output) ObjectStoreExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) pulumi.StringOutput { return v.ObjectStoreExtId }).(pulumi.StringOutput)
}

// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
func (o ObjectStoreCertificateV2Output) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

func (o ObjectStoreCertificateV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStoreCertificateV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type ObjectStoreCertificateV2ArrayOutput struct{ *pulumi.OutputState }

func (ObjectStoreCertificateV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStoreCertificateV2)(nil)).Elem()
}

func (o ObjectStoreCertificateV2ArrayOutput) ToObjectStoreCertificateV2ArrayOutput() ObjectStoreCertificateV2ArrayOutput {
	return o
}

func (o ObjectStoreCertificateV2ArrayOutput) ToObjectStoreCertificateV2ArrayOutputWithContext(ctx context.Context) ObjectStoreCertificateV2ArrayOutput {
	return o
}

func (o ObjectStoreCertificateV2ArrayOutput) Index(i pulumi.IntInput) ObjectStoreCertificateV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectStoreCertificateV2 {
		return vs[0].([]*ObjectStoreCertificateV2)[vs[1].(int)]
	}).(ObjectStoreCertificateV2Output)
}

type ObjectStoreCertificateV2MapOutput struct{ *pulumi.OutputState }

func (ObjectStoreCertificateV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStoreCertificateV2)(nil)).Elem()
}

func (o ObjectStoreCertificateV2MapOutput) ToObjectStoreCertificateV2MapOutput() ObjectStoreCertificateV2MapOutput {
	return o
}

func (o ObjectStoreCertificateV2MapOutput) ToObjectStoreCertificateV2MapOutputWithContext(ctx context.Context) ObjectStoreCertificateV2MapOutput {
	return o
}

func (o ObjectStoreCertificateV2MapOutput) MapIndex(k pulumi.StringInput) ObjectStoreCertificateV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectStoreCertificateV2 {
		return vs[0].(map[string]*ObjectStoreCertificateV2)[vs[1].(string)]
	}).(ObjectStoreCertificateV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreCertificateV2Input)(nil)).Elem(), &ObjectStoreCertificateV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreCertificateV2ArrayInput)(nil)).Elem(), ObjectStoreCertificateV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreCertificateV2MapInput)(nil)).Elem(), ObjectStoreCertificateV2Map{})
	pulumi.RegisterOutputType(ObjectStoreCertificateV2Output{})
	pulumi.RegisterOutputType(ObjectStoreCertificateV2ArrayOutput{})
	pulumi.RegisterOutputType(ObjectStoreCertificateV2MapOutput{})
}
