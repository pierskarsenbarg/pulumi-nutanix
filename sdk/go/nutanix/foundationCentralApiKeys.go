// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a new API key for nodes registration with Foundation Central.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.NewFoundationCentralApiKeys(ctx, "newApiKey", &nutanix.FoundationCentralApiKeysArgs{
//				Alias: pulumi.String("<NAME-FOR-API-KEY>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FoundationCentralApiKeys struct {
	pulumi.CustomResourceState

	// - (Required) Alias for the api key to be created.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Api key in string format.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// Time when the api key was created.
	CreatedTimestamp pulumi.StringOutput `pulumi:"createdTimestamp"`
	// Current time of Foundation Central.
	CurrentTime pulumi.StringOutput `pulumi:"currentTime"`
	// UUID of the api key.
	KeyUuid pulumi.StringOutput `pulumi:"keyUuid"`
}

// NewFoundationCentralApiKeys registers a new resource with the given unique name, arguments, and options.
func NewFoundationCentralApiKeys(ctx *pulumi.Context,
	name string, args *FoundationCentralApiKeysArgs, opts ...pulumi.ResourceOption) (*FoundationCentralApiKeys, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FoundationCentralApiKeys
	err := ctx.RegisterResource("nutanix:index/foundationCentralApiKeys:FoundationCentralApiKeys", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFoundationCentralApiKeys gets an existing FoundationCentralApiKeys resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFoundationCentralApiKeys(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FoundationCentralApiKeysState, opts ...pulumi.ResourceOption) (*FoundationCentralApiKeys, error) {
	var resource FoundationCentralApiKeys
	err := ctx.ReadResource("nutanix:index/foundationCentralApiKeys:FoundationCentralApiKeys", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FoundationCentralApiKeys resources.
type foundationCentralApiKeysState struct {
	// - (Required) Alias for the api key to be created.
	Alias *string `pulumi:"alias"`
	// Api key in string format.
	ApiKey *string `pulumi:"apiKey"`
	// Time when the api key was created.
	CreatedTimestamp *string `pulumi:"createdTimestamp"`
	// Current time of Foundation Central.
	CurrentTime *string `pulumi:"currentTime"`
	// UUID of the api key.
	KeyUuid *string `pulumi:"keyUuid"`
}

type FoundationCentralApiKeysState struct {
	// - (Required) Alias for the api key to be created.
	Alias pulumi.StringPtrInput
	// Api key in string format.
	ApiKey pulumi.StringPtrInput
	// Time when the api key was created.
	CreatedTimestamp pulumi.StringPtrInput
	// Current time of Foundation Central.
	CurrentTime pulumi.StringPtrInput
	// UUID of the api key.
	KeyUuid pulumi.StringPtrInput
}

func (FoundationCentralApiKeysState) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationCentralApiKeysState)(nil)).Elem()
}

type foundationCentralApiKeysArgs struct {
	// - (Required) Alias for the api key to be created.
	Alias string `pulumi:"alias"`
}

// The set of arguments for constructing a FoundationCentralApiKeys resource.
type FoundationCentralApiKeysArgs struct {
	// - (Required) Alias for the api key to be created.
	Alias pulumi.StringInput
}

func (FoundationCentralApiKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*foundationCentralApiKeysArgs)(nil)).Elem()
}

type FoundationCentralApiKeysInput interface {
	pulumi.Input

	ToFoundationCentralApiKeysOutput() FoundationCentralApiKeysOutput
	ToFoundationCentralApiKeysOutputWithContext(ctx context.Context) FoundationCentralApiKeysOutput
}

func (*FoundationCentralApiKeys) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationCentralApiKeys)(nil)).Elem()
}

func (i *FoundationCentralApiKeys) ToFoundationCentralApiKeysOutput() FoundationCentralApiKeysOutput {
	return i.ToFoundationCentralApiKeysOutputWithContext(context.Background())
}

func (i *FoundationCentralApiKeys) ToFoundationCentralApiKeysOutputWithContext(ctx context.Context) FoundationCentralApiKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationCentralApiKeysOutput)
}

// FoundationCentralApiKeysArrayInput is an input type that accepts FoundationCentralApiKeysArray and FoundationCentralApiKeysArrayOutput values.
// You can construct a concrete instance of `FoundationCentralApiKeysArrayInput` via:
//
//	FoundationCentralApiKeysArray{ FoundationCentralApiKeysArgs{...} }
type FoundationCentralApiKeysArrayInput interface {
	pulumi.Input

	ToFoundationCentralApiKeysArrayOutput() FoundationCentralApiKeysArrayOutput
	ToFoundationCentralApiKeysArrayOutputWithContext(context.Context) FoundationCentralApiKeysArrayOutput
}

type FoundationCentralApiKeysArray []FoundationCentralApiKeysInput

func (FoundationCentralApiKeysArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationCentralApiKeys)(nil)).Elem()
}

func (i FoundationCentralApiKeysArray) ToFoundationCentralApiKeysArrayOutput() FoundationCentralApiKeysArrayOutput {
	return i.ToFoundationCentralApiKeysArrayOutputWithContext(context.Background())
}

func (i FoundationCentralApiKeysArray) ToFoundationCentralApiKeysArrayOutputWithContext(ctx context.Context) FoundationCentralApiKeysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationCentralApiKeysArrayOutput)
}

// FoundationCentralApiKeysMapInput is an input type that accepts FoundationCentralApiKeysMap and FoundationCentralApiKeysMapOutput values.
// You can construct a concrete instance of `FoundationCentralApiKeysMapInput` via:
//
//	FoundationCentralApiKeysMap{ "key": FoundationCentralApiKeysArgs{...} }
type FoundationCentralApiKeysMapInput interface {
	pulumi.Input

	ToFoundationCentralApiKeysMapOutput() FoundationCentralApiKeysMapOutput
	ToFoundationCentralApiKeysMapOutputWithContext(context.Context) FoundationCentralApiKeysMapOutput
}

type FoundationCentralApiKeysMap map[string]FoundationCentralApiKeysInput

func (FoundationCentralApiKeysMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationCentralApiKeys)(nil)).Elem()
}

func (i FoundationCentralApiKeysMap) ToFoundationCentralApiKeysMapOutput() FoundationCentralApiKeysMapOutput {
	return i.ToFoundationCentralApiKeysMapOutputWithContext(context.Background())
}

func (i FoundationCentralApiKeysMap) ToFoundationCentralApiKeysMapOutputWithContext(ctx context.Context) FoundationCentralApiKeysMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoundationCentralApiKeysMapOutput)
}

type FoundationCentralApiKeysOutput struct{ *pulumi.OutputState }

func (FoundationCentralApiKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FoundationCentralApiKeys)(nil)).Elem()
}

func (o FoundationCentralApiKeysOutput) ToFoundationCentralApiKeysOutput() FoundationCentralApiKeysOutput {
	return o
}

func (o FoundationCentralApiKeysOutput) ToFoundationCentralApiKeysOutputWithContext(ctx context.Context) FoundationCentralApiKeysOutput {
	return o
}

// - (Required) Alias for the api key to be created.
func (o FoundationCentralApiKeysOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralApiKeys) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Api key in string format.
func (o FoundationCentralApiKeysOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralApiKeys) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// Time when the api key was created.
func (o FoundationCentralApiKeysOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralApiKeys) pulumi.StringOutput { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

// Current time of Foundation Central.
func (o FoundationCentralApiKeysOutput) CurrentTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralApiKeys) pulumi.StringOutput { return v.CurrentTime }).(pulumi.StringOutput)
}

// UUID of the api key.
func (o FoundationCentralApiKeysOutput) KeyUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FoundationCentralApiKeys) pulumi.StringOutput { return v.KeyUuid }).(pulumi.StringOutput)
}

type FoundationCentralApiKeysArrayOutput struct{ *pulumi.OutputState }

func (FoundationCentralApiKeysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoundationCentralApiKeys)(nil)).Elem()
}

func (o FoundationCentralApiKeysArrayOutput) ToFoundationCentralApiKeysArrayOutput() FoundationCentralApiKeysArrayOutput {
	return o
}

func (o FoundationCentralApiKeysArrayOutput) ToFoundationCentralApiKeysArrayOutputWithContext(ctx context.Context) FoundationCentralApiKeysArrayOutput {
	return o
}

func (o FoundationCentralApiKeysArrayOutput) Index(i pulumi.IntInput) FoundationCentralApiKeysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FoundationCentralApiKeys {
		return vs[0].([]*FoundationCentralApiKeys)[vs[1].(int)]
	}).(FoundationCentralApiKeysOutput)
}

type FoundationCentralApiKeysMapOutput struct{ *pulumi.OutputState }

func (FoundationCentralApiKeysMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoundationCentralApiKeys)(nil)).Elem()
}

func (o FoundationCentralApiKeysMapOutput) ToFoundationCentralApiKeysMapOutput() FoundationCentralApiKeysMapOutput {
	return o
}

func (o FoundationCentralApiKeysMapOutput) ToFoundationCentralApiKeysMapOutputWithContext(ctx context.Context) FoundationCentralApiKeysMapOutput {
	return o
}

func (o FoundationCentralApiKeysMapOutput) MapIndex(k pulumi.StringInput) FoundationCentralApiKeysOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FoundationCentralApiKeys {
		return vs[0].(map[string]*FoundationCentralApiKeys)[vs[1].(string)]
	}).(FoundationCentralApiKeysOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationCentralApiKeysInput)(nil)).Elem(), &FoundationCentralApiKeys{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationCentralApiKeysArrayInput)(nil)).Elem(), FoundationCentralApiKeysArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoundationCentralApiKeysMapInput)(nil)).Elem(), FoundationCentralApiKeysMap{})
	pulumi.RegisterOutputType(FoundationCentralApiKeysOutput{})
	pulumi.RegisterOutputType(FoundationCentralApiKeysArrayOutput{})
	pulumi.RegisterOutputType(FoundationCentralApiKeysMapOutput{})
}
