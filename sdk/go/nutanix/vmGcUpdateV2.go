// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VmGcUpdateV2 struct {
	pulumi.CustomResourceState

	Configs VmGcUpdateV2ConfigArrayOutput `pulumi:"configs"`
	ExtId   pulumi.StringOutput           `pulumi:"extId"`
}

// NewVmGcUpdateV2 registers a new resource with the given unique name, arguments, and options.
func NewVmGcUpdateV2(ctx *pulumi.Context,
	name string, args *VmGcUpdateV2Args, opts ...pulumi.ResourceOption) (*VmGcUpdateV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtId == nil {
		return nil, errors.New("invalid value for required argument 'ExtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmGcUpdateV2
	err := ctx.RegisterResource("nutanix:index/vmGcUpdateV2:VmGcUpdateV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmGcUpdateV2 gets an existing VmGcUpdateV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmGcUpdateV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmGcUpdateV2State, opts ...pulumi.ResourceOption) (*VmGcUpdateV2, error) {
	var resource VmGcUpdateV2
	err := ctx.ReadResource("nutanix:index/vmGcUpdateV2:VmGcUpdateV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmGcUpdateV2 resources.
type vmGcUpdateV2State struct {
	Configs []VmGcUpdateV2Config `pulumi:"configs"`
	ExtId   *string              `pulumi:"extId"`
}

type VmGcUpdateV2State struct {
	Configs VmGcUpdateV2ConfigArrayInput
	ExtId   pulumi.StringPtrInput
}

func (VmGcUpdateV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*vmGcUpdateV2State)(nil)).Elem()
}

type vmGcUpdateV2Args struct {
	Configs []VmGcUpdateV2Config `pulumi:"configs"`
	ExtId   string               `pulumi:"extId"`
}

// The set of arguments for constructing a VmGcUpdateV2 resource.
type VmGcUpdateV2Args struct {
	Configs VmGcUpdateV2ConfigArrayInput
	ExtId   pulumi.StringInput
}

func (VmGcUpdateV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vmGcUpdateV2Args)(nil)).Elem()
}

type VmGcUpdateV2Input interface {
	pulumi.Input

	ToVmGcUpdateV2Output() VmGcUpdateV2Output
	ToVmGcUpdateV2OutputWithContext(ctx context.Context) VmGcUpdateV2Output
}

func (*VmGcUpdateV2) ElementType() reflect.Type {
	return reflect.TypeOf((**VmGcUpdateV2)(nil)).Elem()
}

func (i *VmGcUpdateV2) ToVmGcUpdateV2Output() VmGcUpdateV2Output {
	return i.ToVmGcUpdateV2OutputWithContext(context.Background())
}

func (i *VmGcUpdateV2) ToVmGcUpdateV2OutputWithContext(ctx context.Context) VmGcUpdateV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VmGcUpdateV2Output)
}

// VmGcUpdateV2ArrayInput is an input type that accepts VmGcUpdateV2Array and VmGcUpdateV2ArrayOutput values.
// You can construct a concrete instance of `VmGcUpdateV2ArrayInput` via:
//
//	VmGcUpdateV2Array{ VmGcUpdateV2Args{...} }
type VmGcUpdateV2ArrayInput interface {
	pulumi.Input

	ToVmGcUpdateV2ArrayOutput() VmGcUpdateV2ArrayOutput
	ToVmGcUpdateV2ArrayOutputWithContext(context.Context) VmGcUpdateV2ArrayOutput
}

type VmGcUpdateV2Array []VmGcUpdateV2Input

func (VmGcUpdateV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmGcUpdateV2)(nil)).Elem()
}

func (i VmGcUpdateV2Array) ToVmGcUpdateV2ArrayOutput() VmGcUpdateV2ArrayOutput {
	return i.ToVmGcUpdateV2ArrayOutputWithContext(context.Background())
}

func (i VmGcUpdateV2Array) ToVmGcUpdateV2ArrayOutputWithContext(ctx context.Context) VmGcUpdateV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGcUpdateV2ArrayOutput)
}

// VmGcUpdateV2MapInput is an input type that accepts VmGcUpdateV2Map and VmGcUpdateV2MapOutput values.
// You can construct a concrete instance of `VmGcUpdateV2MapInput` via:
//
//	VmGcUpdateV2Map{ "key": VmGcUpdateV2Args{...} }
type VmGcUpdateV2MapInput interface {
	pulumi.Input

	ToVmGcUpdateV2MapOutput() VmGcUpdateV2MapOutput
	ToVmGcUpdateV2MapOutputWithContext(context.Context) VmGcUpdateV2MapOutput
}

type VmGcUpdateV2Map map[string]VmGcUpdateV2Input

func (VmGcUpdateV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmGcUpdateV2)(nil)).Elem()
}

func (i VmGcUpdateV2Map) ToVmGcUpdateV2MapOutput() VmGcUpdateV2MapOutput {
	return i.ToVmGcUpdateV2MapOutputWithContext(context.Background())
}

func (i VmGcUpdateV2Map) ToVmGcUpdateV2MapOutputWithContext(ctx context.Context) VmGcUpdateV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGcUpdateV2MapOutput)
}

type VmGcUpdateV2Output struct{ *pulumi.OutputState }

func (VmGcUpdateV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VmGcUpdateV2)(nil)).Elem()
}

func (o VmGcUpdateV2Output) ToVmGcUpdateV2Output() VmGcUpdateV2Output {
	return o
}

func (o VmGcUpdateV2Output) ToVmGcUpdateV2OutputWithContext(ctx context.Context) VmGcUpdateV2Output {
	return o
}

func (o VmGcUpdateV2Output) Configs() VmGcUpdateV2ConfigArrayOutput {
	return o.ApplyT(func(v *VmGcUpdateV2) VmGcUpdateV2ConfigArrayOutput { return v.Configs }).(VmGcUpdateV2ConfigArrayOutput)
}

func (o VmGcUpdateV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmGcUpdateV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

type VmGcUpdateV2ArrayOutput struct{ *pulumi.OutputState }

func (VmGcUpdateV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmGcUpdateV2)(nil)).Elem()
}

func (o VmGcUpdateV2ArrayOutput) ToVmGcUpdateV2ArrayOutput() VmGcUpdateV2ArrayOutput {
	return o
}

func (o VmGcUpdateV2ArrayOutput) ToVmGcUpdateV2ArrayOutputWithContext(ctx context.Context) VmGcUpdateV2ArrayOutput {
	return o
}

func (o VmGcUpdateV2ArrayOutput) Index(i pulumi.IntInput) VmGcUpdateV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmGcUpdateV2 {
		return vs[0].([]*VmGcUpdateV2)[vs[1].(int)]
	}).(VmGcUpdateV2Output)
}

type VmGcUpdateV2MapOutput struct{ *pulumi.OutputState }

func (VmGcUpdateV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmGcUpdateV2)(nil)).Elem()
}

func (o VmGcUpdateV2MapOutput) ToVmGcUpdateV2MapOutput() VmGcUpdateV2MapOutput {
	return o
}

func (o VmGcUpdateV2MapOutput) ToVmGcUpdateV2MapOutputWithContext(ctx context.Context) VmGcUpdateV2MapOutput {
	return o
}

func (o VmGcUpdateV2MapOutput) MapIndex(k pulumi.StringInput) VmGcUpdateV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmGcUpdateV2 {
		return vs[0].(map[string]*VmGcUpdateV2)[vs[1].(string)]
	}).(VmGcUpdateV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmGcUpdateV2Input)(nil)).Elem(), &VmGcUpdateV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmGcUpdateV2ArrayInput)(nil)).Elem(), VmGcUpdateV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmGcUpdateV2MapInput)(nil)).Elem(), VmGcUpdateV2Map{})
	pulumi.RegisterOutputType(VmGcUpdateV2Output{})
	pulumi.RegisterOutputType(VmGcUpdateV2ArrayOutput{})
	pulumi.RegisterOutputType(VmGcUpdateV2MapOutput{})
}
