// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a datasource to retrieve all the floating IPs .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetFloatingIps(ctx, &nutanix.GetFloatingIpsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFloatingIps(ctx *pulumi.Context, args *GetFloatingIpsArgs, opts ...pulumi.InvokeOption) (*GetFloatingIpsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFloatingIpsResult
	err := ctx.Invoke("nutanix:index/getFloatingIps:getFloatingIps", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFloatingIps.
type GetFloatingIpsArgs struct {
	// - The floatingIp kind metadata.
	Metadatas []GetFloatingIpsMetadata `pulumi:"metadatas"`
}

// A collection of values returned by getFloatingIps.
type GetFloatingIpsResult struct {
	// version of the API
	ApiVersion string `pulumi:"apiVersion"`
	// List of Floating IPs.
	Entities []GetFloatingIpsEntity `pulumi:"entities"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// - The floatingIp kind metadata.
	Metadatas []GetFloatingIpsMetadata `pulumi:"metadatas"`
}

func GetFloatingIpsOutput(ctx *pulumi.Context, args GetFloatingIpsOutputArgs, opts ...pulumi.InvokeOption) GetFloatingIpsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFloatingIpsResultOutput, error) {
			args := v.(GetFloatingIpsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getFloatingIps:getFloatingIps", args, GetFloatingIpsResultOutput{}, options).(GetFloatingIpsResultOutput), nil
		}).(GetFloatingIpsResultOutput)
}

// A collection of arguments for invoking getFloatingIps.
type GetFloatingIpsOutputArgs struct {
	// - The floatingIp kind metadata.
	Metadatas GetFloatingIpsMetadataArrayInput `pulumi:"metadatas"`
}

func (GetFloatingIpsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFloatingIpsArgs)(nil)).Elem()
}

// A collection of values returned by getFloatingIps.
type GetFloatingIpsResultOutput struct{ *pulumi.OutputState }

func (GetFloatingIpsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFloatingIpsResult)(nil)).Elem()
}

func (o GetFloatingIpsResultOutput) ToGetFloatingIpsResultOutput() GetFloatingIpsResultOutput {
	return o
}

func (o GetFloatingIpsResultOutput) ToGetFloatingIpsResultOutputWithContext(ctx context.Context) GetFloatingIpsResultOutput {
	return o
}

// version of the API
func (o GetFloatingIpsResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetFloatingIpsResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of Floating IPs.
func (o GetFloatingIpsResultOutput) Entities() GetFloatingIpsEntityArrayOutput {
	return o.ApplyT(func(v GetFloatingIpsResult) []GetFloatingIpsEntity { return v.Entities }).(GetFloatingIpsEntityArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFloatingIpsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFloatingIpsResult) string { return v.Id }).(pulumi.StringOutput)
}

// - The floatingIp kind metadata.
func (o GetFloatingIpsResultOutput) Metadatas() GetFloatingIpsMetadataArrayOutput {
	return o.ApplyT(func(v GetFloatingIpsResult) []GetFloatingIpsMetadata { return v.Metadatas }).(GetFloatingIpsMetadataArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFloatingIpsResultOutput{})
}
