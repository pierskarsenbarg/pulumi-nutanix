// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to Registers a domain manager (Prism Central) instance to other entities like PE and PC. This process is asynchronous, creating a registration task and returning its UUID.
type PcRegistrationV2 struct {
	pulumi.CustomResourceState

	Configs                        PcRegistrationV2ConfigArrayOutput  `pulumi:"configs"`
	ExtId                          pulumi.StringOutput                `pulumi:"extId"`
	HostingClusterExtId            pulumi.StringOutput                `pulumi:"hostingClusterExtId"`
	IsRegisteredWithHostingCluster pulumi.BoolOutput                  `pulumi:"isRegisteredWithHostingCluster"`
	Links                          PcRegistrationV2LinkArrayOutput    `pulumi:"links"`
	Networks                       PcRegistrationV2NetworkArrayOutput `pulumi:"networks"`
	NodeExtIds                     pulumi.StringArrayOutput           `pulumi:"nodeExtIds"`
	// -(Required) The display name for the Role.
	PcExtId pulumi.StringOutput `pulumi:"pcExtId"`
	// -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
	// The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
	// * `prism.v4.management.DomainManagerRemoteClusterSpec`
	// * `prism.v4.management.AOSRemoteClusterSpec`
	// * `prism.v4.management.ClusterReference`
	RemoteCluster                PcRegistrationV2RemoteClusterOutput `pulumi:"remoteCluster"`
	ShouldEnableHighAvailability pulumi.BoolOutput                   `pulumi:"shouldEnableHighAvailability"`
	TenantId                     pulumi.StringOutput                 `pulumi:"tenantId"`
}

// NewPcRegistrationV2 registers a new resource with the given unique name, arguments, and options.
func NewPcRegistrationV2(ctx *pulumi.Context,
	name string, args *PcRegistrationV2Args, opts ...pulumi.ResourceOption) (*PcRegistrationV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PcExtId == nil {
		return nil, errors.New("invalid value for required argument 'PcExtId'")
	}
	if args.RemoteCluster == nil {
		return nil, errors.New("invalid value for required argument 'RemoteCluster'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PcRegistrationV2
	err := ctx.RegisterResource("nutanix:index/pcRegistrationV2:PcRegistrationV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPcRegistrationV2 gets an existing PcRegistrationV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPcRegistrationV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PcRegistrationV2State, opts ...pulumi.ResourceOption) (*PcRegistrationV2, error) {
	var resource PcRegistrationV2
	err := ctx.ReadResource("nutanix:index/pcRegistrationV2:PcRegistrationV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PcRegistrationV2 resources.
type pcRegistrationV2State struct {
	Configs                        []PcRegistrationV2Config  `pulumi:"configs"`
	ExtId                          *string                   `pulumi:"extId"`
	HostingClusterExtId            *string                   `pulumi:"hostingClusterExtId"`
	IsRegisteredWithHostingCluster *bool                     `pulumi:"isRegisteredWithHostingCluster"`
	Links                          []PcRegistrationV2Link    `pulumi:"links"`
	Networks                       []PcRegistrationV2Network `pulumi:"networks"`
	NodeExtIds                     []string                  `pulumi:"nodeExtIds"`
	// -(Required) The display name for the Role.
	PcExtId *string `pulumi:"pcExtId"`
	// -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
	// The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
	// * `prism.v4.management.DomainManagerRemoteClusterSpec`
	// * `prism.v4.management.AOSRemoteClusterSpec`
	// * `prism.v4.management.ClusterReference`
	RemoteCluster                *PcRegistrationV2RemoteCluster `pulumi:"remoteCluster"`
	ShouldEnableHighAvailability *bool                          `pulumi:"shouldEnableHighAvailability"`
	TenantId                     *string                        `pulumi:"tenantId"`
}

type PcRegistrationV2State struct {
	Configs                        PcRegistrationV2ConfigArrayInput
	ExtId                          pulumi.StringPtrInput
	HostingClusterExtId            pulumi.StringPtrInput
	IsRegisteredWithHostingCluster pulumi.BoolPtrInput
	Links                          PcRegistrationV2LinkArrayInput
	Networks                       PcRegistrationV2NetworkArrayInput
	NodeExtIds                     pulumi.StringArrayInput
	// -(Required) The display name for the Role.
	PcExtId pulumi.StringPtrInput
	// -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
	// The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
	// * `prism.v4.management.DomainManagerRemoteClusterSpec`
	// * `prism.v4.management.AOSRemoteClusterSpec`
	// * `prism.v4.management.ClusterReference`
	RemoteCluster                PcRegistrationV2RemoteClusterPtrInput
	ShouldEnableHighAvailability pulumi.BoolPtrInput
	TenantId                     pulumi.StringPtrInput
}

func (PcRegistrationV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*pcRegistrationV2State)(nil)).Elem()
}

type pcRegistrationV2Args struct {
	// -(Required) The display name for the Role.
	PcExtId string `pulumi:"pcExtId"`
	// -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
	// The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
	// * `prism.v4.management.DomainManagerRemoteClusterSpec`
	// * `prism.v4.management.AOSRemoteClusterSpec`
	// * `prism.v4.management.ClusterReference`
	RemoteCluster PcRegistrationV2RemoteCluster `pulumi:"remoteCluster"`
}

// The set of arguments for constructing a PcRegistrationV2 resource.
type PcRegistrationV2Args struct {
	// -(Required) The display name for the Role.
	PcExtId pulumi.StringInput
	// -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
	// The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
	// * `prism.v4.management.DomainManagerRemoteClusterSpec`
	// * `prism.v4.management.AOSRemoteClusterSpec`
	// * `prism.v4.management.ClusterReference`
	RemoteCluster PcRegistrationV2RemoteClusterInput
}

func (PcRegistrationV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*pcRegistrationV2Args)(nil)).Elem()
}

type PcRegistrationV2Input interface {
	pulumi.Input

	ToPcRegistrationV2Output() PcRegistrationV2Output
	ToPcRegistrationV2OutputWithContext(ctx context.Context) PcRegistrationV2Output
}

func (*PcRegistrationV2) ElementType() reflect.Type {
	return reflect.TypeOf((**PcRegistrationV2)(nil)).Elem()
}

func (i *PcRegistrationV2) ToPcRegistrationV2Output() PcRegistrationV2Output {
	return i.ToPcRegistrationV2OutputWithContext(context.Background())
}

func (i *PcRegistrationV2) ToPcRegistrationV2OutputWithContext(ctx context.Context) PcRegistrationV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(PcRegistrationV2Output)
}

// PcRegistrationV2ArrayInput is an input type that accepts PcRegistrationV2Array and PcRegistrationV2ArrayOutput values.
// You can construct a concrete instance of `PcRegistrationV2ArrayInput` via:
//
//	PcRegistrationV2Array{ PcRegistrationV2Args{...} }
type PcRegistrationV2ArrayInput interface {
	pulumi.Input

	ToPcRegistrationV2ArrayOutput() PcRegistrationV2ArrayOutput
	ToPcRegistrationV2ArrayOutputWithContext(context.Context) PcRegistrationV2ArrayOutput
}

type PcRegistrationV2Array []PcRegistrationV2Input

func (PcRegistrationV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PcRegistrationV2)(nil)).Elem()
}

func (i PcRegistrationV2Array) ToPcRegistrationV2ArrayOutput() PcRegistrationV2ArrayOutput {
	return i.ToPcRegistrationV2ArrayOutputWithContext(context.Background())
}

func (i PcRegistrationV2Array) ToPcRegistrationV2ArrayOutputWithContext(ctx context.Context) PcRegistrationV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcRegistrationV2ArrayOutput)
}

// PcRegistrationV2MapInput is an input type that accepts PcRegistrationV2Map and PcRegistrationV2MapOutput values.
// You can construct a concrete instance of `PcRegistrationV2MapInput` via:
//
//	PcRegistrationV2Map{ "key": PcRegistrationV2Args{...} }
type PcRegistrationV2MapInput interface {
	pulumi.Input

	ToPcRegistrationV2MapOutput() PcRegistrationV2MapOutput
	ToPcRegistrationV2MapOutputWithContext(context.Context) PcRegistrationV2MapOutput
}

type PcRegistrationV2Map map[string]PcRegistrationV2Input

func (PcRegistrationV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PcRegistrationV2)(nil)).Elem()
}

func (i PcRegistrationV2Map) ToPcRegistrationV2MapOutput() PcRegistrationV2MapOutput {
	return i.ToPcRegistrationV2MapOutputWithContext(context.Background())
}

func (i PcRegistrationV2Map) ToPcRegistrationV2MapOutputWithContext(ctx context.Context) PcRegistrationV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcRegistrationV2MapOutput)
}

type PcRegistrationV2Output struct{ *pulumi.OutputState }

func (PcRegistrationV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PcRegistrationV2)(nil)).Elem()
}

func (o PcRegistrationV2Output) ToPcRegistrationV2Output() PcRegistrationV2Output {
	return o
}

func (o PcRegistrationV2Output) ToPcRegistrationV2OutputWithContext(ctx context.Context) PcRegistrationV2Output {
	return o
}

func (o PcRegistrationV2Output) Configs() PcRegistrationV2ConfigArrayOutput {
	return o.ApplyT(func(v *PcRegistrationV2) PcRegistrationV2ConfigArrayOutput { return v.Configs }).(PcRegistrationV2ConfigArrayOutput)
}

func (o PcRegistrationV2Output) ExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *PcRegistrationV2) pulumi.StringOutput { return v.ExtId }).(pulumi.StringOutput)
}

func (o PcRegistrationV2Output) HostingClusterExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *PcRegistrationV2) pulumi.StringOutput { return v.HostingClusterExtId }).(pulumi.StringOutput)
}

func (o PcRegistrationV2Output) IsRegisteredWithHostingCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v *PcRegistrationV2) pulumi.BoolOutput { return v.IsRegisteredWithHostingCluster }).(pulumi.BoolOutput)
}

func (o PcRegistrationV2Output) Links() PcRegistrationV2LinkArrayOutput {
	return o.ApplyT(func(v *PcRegistrationV2) PcRegistrationV2LinkArrayOutput { return v.Links }).(PcRegistrationV2LinkArrayOutput)
}

func (o PcRegistrationV2Output) Networks() PcRegistrationV2NetworkArrayOutput {
	return o.ApplyT(func(v *PcRegistrationV2) PcRegistrationV2NetworkArrayOutput { return v.Networks }).(PcRegistrationV2NetworkArrayOutput)
}

func (o PcRegistrationV2Output) NodeExtIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PcRegistrationV2) pulumi.StringArrayOutput { return v.NodeExtIds }).(pulumi.StringArrayOutput)
}

// -(Required) The display name for the Role.
func (o PcRegistrationV2Output) PcExtId() pulumi.StringOutput {
	return o.ApplyT(func(v *PcRegistrationV2) pulumi.StringOutput { return v.PcExtId }).(pulumi.StringOutput)
}

// -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
// The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
// * `prism.v4.management.DomainManagerRemoteClusterSpec`
// * `prism.v4.management.AOSRemoteClusterSpec`
// * `prism.v4.management.ClusterReference`
func (o PcRegistrationV2Output) RemoteCluster() PcRegistrationV2RemoteClusterOutput {
	return o.ApplyT(func(v *PcRegistrationV2) PcRegistrationV2RemoteClusterOutput { return v.RemoteCluster }).(PcRegistrationV2RemoteClusterOutput)
}

func (o PcRegistrationV2Output) ShouldEnableHighAvailability() pulumi.BoolOutput {
	return o.ApplyT(func(v *PcRegistrationV2) pulumi.BoolOutput { return v.ShouldEnableHighAvailability }).(pulumi.BoolOutput)
}

func (o PcRegistrationV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PcRegistrationV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type PcRegistrationV2ArrayOutput struct{ *pulumi.OutputState }

func (PcRegistrationV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PcRegistrationV2)(nil)).Elem()
}

func (o PcRegistrationV2ArrayOutput) ToPcRegistrationV2ArrayOutput() PcRegistrationV2ArrayOutput {
	return o
}

func (o PcRegistrationV2ArrayOutput) ToPcRegistrationV2ArrayOutputWithContext(ctx context.Context) PcRegistrationV2ArrayOutput {
	return o
}

func (o PcRegistrationV2ArrayOutput) Index(i pulumi.IntInput) PcRegistrationV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PcRegistrationV2 {
		return vs[0].([]*PcRegistrationV2)[vs[1].(int)]
	}).(PcRegistrationV2Output)
}

type PcRegistrationV2MapOutput struct{ *pulumi.OutputState }

func (PcRegistrationV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PcRegistrationV2)(nil)).Elem()
}

func (o PcRegistrationV2MapOutput) ToPcRegistrationV2MapOutput() PcRegistrationV2MapOutput {
	return o
}

func (o PcRegistrationV2MapOutput) ToPcRegistrationV2MapOutputWithContext(ctx context.Context) PcRegistrationV2MapOutput {
	return o
}

func (o PcRegistrationV2MapOutput) MapIndex(k pulumi.StringInput) PcRegistrationV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PcRegistrationV2 {
		return vs[0].(map[string]*PcRegistrationV2)[vs[1].(string)]
	}).(PcRegistrationV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PcRegistrationV2Input)(nil)).Elem(), &PcRegistrationV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*PcRegistrationV2ArrayInput)(nil)).Elem(), PcRegistrationV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PcRegistrationV2MapInput)(nil)).Elem(), PcRegistrationV2Map{})
	pulumi.RegisterOutputType(PcRegistrationV2Output{})
	pulumi.RegisterOutputType(PcRegistrationV2ArrayOutput{})
	pulumi.RegisterOutputType(PcRegistrationV2MapOutput{})
}
