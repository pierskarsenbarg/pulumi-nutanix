// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nutanix

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a list of elements representing the domain manager (Prism Central) instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-nutanix/sdk/go/nutanix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nutanix.GetPcsV2(ctx, &nutanix.GetPcsV2Args{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nutanix.GetPcsV2(ctx, &nutanix.GetPcsV2Args{
//				Select: pulumi.StringRef("config,extId"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## PCS
//
// The `pcs` argument supports the following:
//
// * `tenantId`: - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
// * `extId`: - A globally unique identifier of an instance that is suitable for external consumption.
// * `links`: - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
// * `config`: - Domain manager (Prism Central) cluster configuration details.
// * `isRegisteredWithHostingCluster`: - Boolean value indicating if the domain manager (Prism Central) is registered with the hosting cluster, that is, Prism Element.
// * `network`: - Domain manager (Prism Central) network configuration details.
// * `hostingClusterExtId`: - The external identifier of the cluster hosting the domain manager (Prism Central) instance.
// * `shouldEnableHighAvailability`: - This configuration enables Prism Central to be deployed in scale-out mode.
// * `nodeExtIds`: - Domain manager (Prism Central) nodes external identifier.
//
// ### Config
// The config argument supports the following:
//
// * `shouldEnableLockdownMode`: - A boolean value indicating whether to enable lockdown mode for a cluster.
// * `buildInfo`: -Currently representing the build information to be used for the cluster creation.
// * `name`: - Name of the domain manager (Prism Central).
// * `size`: - Domain manager (Prism Central) size is an enumeration of starter, small, large, or extra large starter values. possible values are:
//   - `SMALL` : Domain manager (Prism Central) of size small.
//   - `LARGE` : Domain manager (Prism Central) of size large.
//   - `EXTRALARGE` : Domain manager (Prism Central) of size extra large.
//   - `STARTER` : Domain manager (Prism Central) of size starter.
//
// * `bootstrapConfig`: - Bootstrap configuration details for the domain manager (Prism Central).
// * `resourceConfig`: - This configuration is used to provide the resource-related details like container external identifiers, number of VCPUs, memory size, data disk size of the domain manager (Prism Central). In the case of a multi-node setup, the sum of resources like number of VCPUs, memory size and data disk size are provided.
//
// #### Build Info
// The `buildInfo` argument supports the following:
//
// * `version`: - Software version.
//
// #### Bootstrap Config
// The `bootstrapConfig` argument supports the following:
//
// * `environmentInfo`: - Environment information for the domain manager (Prism Central) cluster.
//
// ##### Environment Info
// The `environmentInfo` argument supports the following:
//
//   - `type`: - Enums denoting the environment type of the PC, that is, on-prem PC or cloud PC.
//     Following are the supported entity types:
//   - `ONPREM` : On-prem environment.
//   - `NTNX_CLOUD` : Nutanix cloud environment.
//   - `providerType`: - Enums denoting the provider type of the PC, that is, AHV or ESXi.
//     Following are the supported provider types:
//   - `VSPHERE` : Vsphere cloud provider.
//   - `AZURE` : Azure cloud provider.
//   - `NTNX` : Nutanix cloud provider.
//   - `GCP` : GCP cloud provider.
//   - `AWS` : AWS cloud provider.
//   - `provisioningType`: - Enums denoting the instance type of the cloud PC. It indicates whether the PC is created on bare-metal or on a cloud-provisioned VM. Hence, it supports two possible values:
//   - `NTNX` : Nutanix instance.
//   - `NATIVE` : Native instance.
//
// #### Resource Config
// The `resourceConfig` argument supports the following:
//
// * `numVcpus`: - This property is used for readOnly purposes to display Prism Central number of VCPUs allocation.
// * `memorySizeBytes`: - This property is used for readOnly purposes to display Prism Central RAM allocation at the cluster level.
// * `dataDiskSizeBytes`: - This property is used for readOnly purposes to display Prism Central data disk size allocation at a cluster level.
// * `containerExtIds`: - The external identifier of the container that will be used to create the domain manager (Prism Central) cluster.
//
// ### Network
// the `network` argument supports the following:
//
// * `externalAddress`: - An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
// * `nameServers`: - List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
// * `ntpServers`: - List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
// * `fqdn`: - Cluster fully qualified domain name. This is part of payload for cluster update operation only.
// * `externalNetworks`: - This configuration is used to manage Prism Central.
//
// #### External Address
// The `externalAddress` argument supports the following:
//
// * `ipv4`: - An unique address that identifies a device on the internet or a local network in IPv4 format.
// * `ipv6`: - An unique address that identifies a device on the internet or a local network in IPv6 format.
//
// #### Name Servers, NTP Servers
// The `nameServers` and `ntpServers` arguments support the following:
//
// * `ipv4`: - An unique address that identifies a device on the internet or a local network in IPv4 format.
// * `ipv6`: - An unique address that identifies a device on the internet or a local network in IPv6 format.
// * `fqdn`: - A fully qualified domain name that specifies its exact location in the tree hierarchy of the Domain Name System.
//
// #### External Networks
// The `externalNetworks` argument supports the following:
//
// * `defaultGateway`: - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
// * `subnetMask`: - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
// * `ipRanges`: - Range of IPs used for Prism Central network setup.
// * `networkExtId`: - The network external identifier to which Domain Manager (Prism Central) is to be deployed or is already configured.
//
// #### Default Gateway, Subnet Mask
// The `defaultGateway`and `subnetMask` arguments support the following:
//
// * `ipv4`: - An unique address that identifies a device on the internet or a local network in IPv4 format.
// * `ipv6`: - An unique address that identifies a device on the internet or a local network in IPv6 format.
// * `fqdn`: - A fully qualified domain name that specifies its exact location in the tree hierarchy of the Domain Name System.
//
// #### IP Ranges
// The `ipRanges` argument supports the following:
//
// * `begin`: - The beginning IP address of the range.
// * `end`: - The ending IP address of the range.
//
// #### begin, end
// The `begin` and `end` arguments support the following:
//
// * `ipv4`: - An unique address that identifies a device on the internet or a local network in IPv4 format.
// * `ipv6`: - An unique address that identifies a device on the internet or a local network in IPv6 format.
//
// #### IpV4, IpV6
// The `ipv4` and `ipv6` arguments support the following:
//
// * `value`: - The IPv4/IPv6 address of the host.
// * `prefixLength`: - The prefix length of the network to which this host IPv4/IPv6 address belongs.
//
// #### FQDN
// The `fqdn` argument supports the following:
//
// * `value`: - The fully qualified domain name of the host.
//
// See detailed information in [Nutanix List PCs V4](https://developers.nutanix.com/api-reference?namespace=prism&version=v4.0#tag/DomainManager/operation/listDomainManagers).
func GetPcsV2(ctx *pulumi.Context, args *GetPcsV2Args, opts ...pulumi.InvokeOption) (*GetPcsV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPcsV2Result
	err := ctx.Invoke("nutanix:index/getPcsV2:getPcsV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPcsV2.
type GetPcsV2Args struct {
	// - URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the \$select must conform to the OData V4.01 URL conventions. If a \$select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. supported values are:
	Select *string `pulumi:"select"`
}

// A collection of values returned by getPcsV2.
type GetPcsV2Result struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// - A list of domain manager (Prism Central) entities.
	Pcs    []GetPcsV2Pc `pulumi:"pcs"`
	Select *string      `pulumi:"select"`
}

func GetPcsV2Output(ctx *pulumi.Context, args GetPcsV2OutputArgs, opts ...pulumi.InvokeOption) GetPcsV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPcsV2ResultOutput, error) {
			args := v.(GetPcsV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nutanix:index/getPcsV2:getPcsV2", args, GetPcsV2ResultOutput{}, options).(GetPcsV2ResultOutput), nil
		}).(GetPcsV2ResultOutput)
}

// A collection of arguments for invoking getPcsV2.
type GetPcsV2OutputArgs struct {
	// - URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the \$select must conform to the OData V4.01 URL conventions. If a \$select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. supported values are:
	Select pulumi.StringPtrInput `pulumi:"select"`
}

func (GetPcsV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPcsV2Args)(nil)).Elem()
}

// A collection of values returned by getPcsV2.
type GetPcsV2ResultOutput struct{ *pulumi.OutputState }

func (GetPcsV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPcsV2Result)(nil)).Elem()
}

func (o GetPcsV2ResultOutput) ToGetPcsV2ResultOutput() GetPcsV2ResultOutput {
	return o
}

func (o GetPcsV2ResultOutput) ToGetPcsV2ResultOutputWithContext(ctx context.Context) GetPcsV2ResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetPcsV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPcsV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// - A list of domain manager (Prism Central) entities.
func (o GetPcsV2ResultOutput) Pcs() GetPcsV2PcArrayOutput {
	return o.ApplyT(func(v GetPcsV2Result) []GetPcsV2Pc { return v.Pcs }).(GetPcsV2PcArrayOutput)
}

func (o GetPcsV2ResultOutput) Select() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPcsV2Result) *string { return v.Select }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPcsV2ResultOutput{})
}
