// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Triggers custom action execution using it's name in Self Service Application.
 *
 * ## Example Usage
 *
 * ### 
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const testSelfServiceAppProvision = new nutanix.SelfServiceAppProvision("testSelfServiceAppProvision", {
 *     bpName: "NAME OF BLUEPRINT",
 *     appName: "NAME OF APPLICATION",
 *     appDescription: "DESCRIPTION OF APPLICATION",
 * });
 * const testSelfServiceAppCustomAction = new nutanix.SelfServiceAppCustomAction("testSelfServiceAppCustomAction", {
 *     appName: testSelfServiceAppProvision.appName,
 *     actionName: "NAME OF ACTION",
 * });
 * ```
 */
export class SelfServiceAppCustomAction extends pulumi.CustomResource {
    /**
     * Get an existing SelfServiceAppCustomAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SelfServiceAppCustomActionState, opts?: pulumi.CustomResourceOptions): SelfServiceAppCustomAction {
        return new SelfServiceAppCustomAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/selfServiceAppCustomAction:SelfServiceAppCustomAction';

    /**
     * Returns true if the given object is an instance of SelfServiceAppCustomAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SelfServiceAppCustomAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SelfServiceAppCustomAction.__pulumiType;
    }

    /**
     * - (Required) The name of the action to run.
     *
     * Both (`appName` and `appUuid`) are optional. You can provide either of them. But atleast one of them is required to make this resource work.
     */
    public readonly actionName!: pulumi.Output<string>;
    /**
     * - (Optional) The name of the application.
     */
    public readonly appName!: pulumi.Output<string | undefined>;
    /**
     * - (Optional) The UUID of the application.
     */
    public readonly appUuid!: pulumi.Output<string | undefined>;
    /**
     * - (Computed) The UUID of the runlog associated with the execution of the custom action. This can be used to track the progress or status of the action execution.
     */
    public readonly runlogUuid!: pulumi.Output<string>;

    /**
     * Create a SelfServiceAppCustomAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SelfServiceAppCustomActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SelfServiceAppCustomActionArgs | SelfServiceAppCustomActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SelfServiceAppCustomActionState | undefined;
            resourceInputs["actionName"] = state ? state.actionName : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["appUuid"] = state ? state.appUuid : undefined;
            resourceInputs["runlogUuid"] = state ? state.runlogUuid : undefined;
        } else {
            const args = argsOrState as SelfServiceAppCustomActionArgs | undefined;
            if ((!args || args.actionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionName'");
            }
            resourceInputs["actionName"] = args ? args.actionName : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["appUuid"] = args ? args.appUuid : undefined;
            resourceInputs["runlogUuid"] = args ? args.runlogUuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SelfServiceAppCustomAction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SelfServiceAppCustomAction resources.
 */
export interface SelfServiceAppCustomActionState {
    /**
     * - (Required) The name of the action to run.
     *
     * Both (`appName` and `appUuid`) are optional. You can provide either of them. But atleast one of them is required to make this resource work.
     */
    actionName?: pulumi.Input<string>;
    /**
     * - (Optional) The name of the application.
     */
    appName?: pulumi.Input<string>;
    /**
     * - (Optional) The UUID of the application.
     */
    appUuid?: pulumi.Input<string>;
    /**
     * - (Computed) The UUID of the runlog associated with the execution of the custom action. This can be used to track the progress or status of the action execution.
     */
    runlogUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SelfServiceAppCustomAction resource.
 */
export interface SelfServiceAppCustomActionArgs {
    /**
     * - (Required) The name of the action to run.
     *
     * Both (`appName` and `appUuid`) are optional. You can provide either of them. But atleast one of them is required to make this resource work.
     */
    actionName: pulumi.Input<string>;
    /**
     * - (Optional) The name of the application.
     */
    appName?: pulumi.Input<string>;
    /**
     * - (Optional) The UUID of the application.
     */
    appUuid?: pulumi.Input<string>;
    /**
     * - (Computed) The UUID of the runlog associated with the execution of the custom action. This can be used to track the progress or status of the action execution.
     */
    runlogUuid?: pulumi.Input<string>;
}
