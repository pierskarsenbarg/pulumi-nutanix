// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to add a User group to the system..
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const usrGroup = new nutanix.UserGroupsV2("usrGroup", {
 *     distinguishedName: "cn=group_0664229e,ou=group,dc=devtest,dc=local",
 *     groupType: "LDAP",
 *     idpId: "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
 * });
 * // Saml User group
 * const saml_ug = new nutanix.UserGroupsV2("saml-ug", {
 *     groupType: "SAML",
 *     idpId: "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
 * });
 * ```
 */
export class UserGroupsV2 extends pulumi.CustomResource {
    /**
     * Get an existing UserGroupsV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGroupsV2State, opts?: pulumi.CustomResourceOptions): UserGroupsV2 {
        return new UserGroupsV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/userGroupsV2:UserGroupsV2';

    /**
     * Returns true if the given object is an instance of UserGroupsV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGroupsV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroupsV2.__pulumiType;
    }

    /**
     * - User or Service who created the User Group.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * - Creation time of the User Group.
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * -(Optional) Identifier for the User Group in the form of a distinguished name.
     */
    declare public readonly distinguishedName: pulumi.Output<string | undefined>;
    /**
     * The External Identifier of the User Group.
     */
    declare public readonly extId: pulumi.Output<string>;
    /**
     * -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)), SAML (User Group belonging to a SAML IDP.)
     */
    declare public readonly groupType: pulumi.Output<string>;
    /**
     * -(Required) Identifier of the IDP for the User Group.
     */
    declare public readonly idpId: pulumi.Output<string>;
    /**
     * - Last updated time of the User Group.
     */
    declare public /*out*/ readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * -(Optional) Common Name of the User Group.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a UserGroupsV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserGroupsV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGroupsV2Args | UserGroupsV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGroupsV2State | undefined;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["distinguishedName"] = state?.distinguishedName;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["groupType"] = state?.groupType;
            resourceInputs["idpId"] = state?.idpId;
            resourceInputs["lastUpdatedTime"] = state?.lastUpdatedTime;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as UserGroupsV2Args | undefined;
            if (args?.groupType === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupType'");
            }
            if (args?.idpId === undefined && !opts.urn) {
                throw new Error("Missing required property 'idpId'");
            }
            resourceInputs["distinguishedName"] = args?.distinguishedName;
            resourceInputs["extId"] = args?.extId;
            resourceInputs["groupType"] = args?.groupType;
            resourceInputs["idpId"] = args?.idpId;
            resourceInputs["name"] = args?.name;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroupsV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserGroupsV2 resources.
 */
export interface UserGroupsV2State {
    /**
     * - User or Service who created the User Group.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * - Creation time of the User Group.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * -(Optional) Identifier for the User Group in the form of a distinguished name.
     */
    distinguishedName?: pulumi.Input<string>;
    /**
     * The External Identifier of the User Group.
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)), SAML (User Group belonging to a SAML IDP.)
     */
    groupType?: pulumi.Input<string>;
    /**
     * -(Required) Identifier of the IDP for the User Group.
     */
    idpId?: pulumi.Input<string>;
    /**
     * - Last updated time of the User Group.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * -(Optional) Common Name of the User Group.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserGroupsV2 resource.
 */
export interface UserGroupsV2Args {
    /**
     * -(Optional) Identifier for the User Group in the form of a distinguished name.
     */
    distinguishedName?: pulumi.Input<string>;
    /**
     * The External Identifier of the User Group.
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)), SAML (User Group belonging to a SAML IDP.)
     */
    groupType: pulumi.Input<string>;
    /**
     * -(Required) Identifier of the IDP for the User Group.
     */
    idpId: pulumi.Input<string>;
    /**
     * -(Optional) Common Name of the User Group.
     */
    name?: pulumi.Input<string>;
}
