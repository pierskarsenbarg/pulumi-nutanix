// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * List all keys identified by the external identifier of a user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const getKeys = nutanix.getUserKeysV2({
 *     userExtId: "<SERVICE_ACCOUNT_UUID>",
 * });
 * const getKeysFilter = nutanix.getUserKeysV2({
 *     filter: "name eq '<NAME_OF_API_KEY>'",
 *     userExtId: "<SERVICE_ACCOUNT_UUID>",
 * });
 * ```
 *
 * ## Argument Reference
 *
 * The following arguments are supported:
 *
 * * `userExtId`: - ( Required ) External Identifier of the User.
 * * `page`:- (Optional)A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.
 * * `limit`:- (Optional) A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.
 * * `filter` :- (Optional) A URL query parameter that allows clients to filter a collection of resources. The expression specified with \$filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the \$filter must conform to the OData V4.01 URL conventions. For example, filter '\$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '\$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'. The filter can be applied to the following fields:
 *     * assignedTo
 *     * creationType
 *     * extId
 *     * keyType
 *     * lastUpdatedBy
 *     * name
 *     * status
 *     * tenantId
 * * `orderby` :- (Optional) A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '\$orderby=templateName desc' would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields:     * createdBy
 *     * assignedTo
 *     * createdBy
 *     * createdTime
 *     * expiryTime
 *     * keyType
 *     * lastUpdatedTime
 *     * lastUsedTime
 *     * name
 *     * status
 *     * tenantId
 * * `select` :- (Optional) A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the \$select must conform to the OData V4.01 URL conventions. If a \$select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. following fields:
 *     * assignedTo
 *     * createdBy
 *     * createdTime
 *     * creationType
 *     * description
 *     * expiryTime
 *     * extId
 *     * keyType
 *     * lastUpdatedBy
 *     * lastUpdatedTime
 *     * lastUsedTime
 *     * name
 *     * status
 *     * tenantId
 */
export function getUserKeysV2(args: GetUserKeysV2Args, opts?: pulumi.InvokeOptions): Promise<GetUserKeysV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getUserKeysV2:getUserKeysV2", {
        "filter": args.filter,
        "limit": args.limit,
        "orderBy": args.orderBy,
        "page": args.page,
        "select": args.select,
        "userExtId": args.userExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserKeysV2.
 */
export interface GetUserKeysV2Args {
    filter?: string;
    limit?: number;
    orderBy?: string;
    page?: number;
    select?: string;
    userExtId: string;
}

/**
 * A collection of values returned by getUserKeysV2.
 */
export interface GetUserKeysV2Result {
    readonly filter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keys: outputs.GetUserKeysV2Key[];
    readonly limit?: number;
    readonly orderBy?: string;
    readonly page?: number;
    readonly select?: string;
    readonly userExtId: string;
}
/**
 * List all keys identified by the external identifier of a user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const getKeys = nutanix.getUserKeysV2({
 *     userExtId: "<SERVICE_ACCOUNT_UUID>",
 * });
 * const getKeysFilter = nutanix.getUserKeysV2({
 *     filter: "name eq '<NAME_OF_API_KEY>'",
 *     userExtId: "<SERVICE_ACCOUNT_UUID>",
 * });
 * ```
 *
 * ## Argument Reference
 *
 * The following arguments are supported:
 *
 * * `userExtId`: - ( Required ) External Identifier of the User.
 * * `page`:- (Optional)A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.
 * * `limit`:- (Optional) A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.
 * * `filter` :- (Optional) A URL query parameter that allows clients to filter a collection of resources. The expression specified with \$filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the \$filter must conform to the OData V4.01 URL conventions. For example, filter '\$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '\$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'. The filter can be applied to the following fields:
 *     * assignedTo
 *     * creationType
 *     * extId
 *     * keyType
 *     * lastUpdatedBy
 *     * name
 *     * status
 *     * tenantId
 * * `orderby` :- (Optional) A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '\$orderby=templateName desc' would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields:     * createdBy
 *     * assignedTo
 *     * createdBy
 *     * createdTime
 *     * expiryTime
 *     * keyType
 *     * lastUpdatedTime
 *     * lastUsedTime
 *     * name
 *     * status
 *     * tenantId
 * * `select` :- (Optional) A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the \$select must conform to the OData V4.01 URL conventions. If a \$select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. following fields:
 *     * assignedTo
 *     * createdBy
 *     * createdTime
 *     * creationType
 *     * description
 *     * expiryTime
 *     * extId
 *     * keyType
 *     * lastUpdatedBy
 *     * lastUpdatedTime
 *     * lastUsedTime
 *     * name
 *     * status
 *     * tenantId
 */
export function getUserKeysV2Output(args: GetUserKeysV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUserKeysV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getUserKeysV2:getUserKeysV2", {
        "filter": args.filter,
        "limit": args.limit,
        "orderBy": args.orderBy,
        "page": args.page,
        "select": args.select,
        "userExtId": args.userExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserKeysV2.
 */
export interface GetUserKeysV2OutputArgs {
    filter?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    orderBy?: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    select?: pulumi.Input<string>;
    userExtId: pulumi.Input<string>;
}
