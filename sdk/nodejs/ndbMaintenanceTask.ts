// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to associate a maintenance window with database server VM based on the input parameters.
 *
 * ## Example Usage
 *
 * ### resource to associated maintenance window with OS_PATCHING
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbMaintenanceTask("name", {
 *     dbserverIds: ["{{ dbserver_vm_id }}"],
 *     maintenanceWindowId: "{{ maintenance_window_id }}",
 *     tasks: [{
 *         taskType: "OS_PATCHING",
 *     }],
 * });
 * ```
 *
 * ### resource to associated maintenance window with DB_PATCHING
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbMaintenanceTask("name", {
 *     dbserverIds: ["{{ dbserver_vm_id }}"],
 *     maintenanceWindowId: "{{ maintenance_window_id }}",
 *     tasks: [{
 *         taskType: "DB_PATCHING",
 *     }],
 * });
 * ```
 *
 * ### resource to associated maintenance window with pre and post command on each task
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbMaintenanceTask("name", {
 *     dbserverIds: ["{{ dbserver_vm_id }}"],
 *     maintenanceWindowId: "{{ maintenance_window_id }}",
 *     tasks: [
 *         {
 *             postCommand: "{{ post_command for db patching }}",
 *             preCommand: "{{ pre_command for db patching }}",
 *             taskType: "DB_PATCHING",
 *         },
 *         {
 *             postCommand: "{{ post_command for os patching }}",
 *             preCommand: "{{ pre_command for os patching}}",
 *             taskType: "OS_PATCHING",
 *         },
 *     ],
 * });
 * ```
 */
export class NdbMaintenanceTask extends pulumi.CustomResource {
    /**
     * Get an existing NdbMaintenanceTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbMaintenanceTaskState, opts?: pulumi.CustomResourceOptions): NdbMaintenanceTask {
        return new NdbMaintenanceTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask';

    /**
     * Returns true if the given object is an instance of NdbMaintenanceTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbMaintenanceTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbMaintenanceTask.__pulumiType;
    }

    /**
     * dbserver cluster ids. Conflicts with "dbserverId"
     */
    declare public readonly dbserverClusters: pulumi.Output<string[] | undefined>;
    /**
     * dbserver vm id. Conflicts with "dbserverCluster"
     */
    declare public readonly dbserverIds: pulumi.Output<string[] | undefined>;
    /**
     * Entity Task Association  List.
     */
    declare public /*out*/ readonly entityTaskAssociations: pulumi.Output<outputs.NdbMaintenanceTaskEntityTaskAssociation[]>;
    /**
     * maintenance window id which has to be associated
     */
    declare public readonly maintenanceWindowId: pulumi.Output<string>;
    /**
     * task input for Operating System Patching or Database Patching or both
     */
    declare public readonly tasks: pulumi.Output<outputs.NdbMaintenanceTaskTask[] | undefined>;

    /**
     * Create a NdbMaintenanceTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbMaintenanceTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbMaintenanceTaskArgs | NdbMaintenanceTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbMaintenanceTaskState | undefined;
            resourceInputs["dbserverClusters"] = state?.dbserverClusters;
            resourceInputs["dbserverIds"] = state?.dbserverIds;
            resourceInputs["entityTaskAssociations"] = state?.entityTaskAssociations;
            resourceInputs["maintenanceWindowId"] = state?.maintenanceWindowId;
            resourceInputs["tasks"] = state?.tasks;
        } else {
            const args = argsOrState as NdbMaintenanceTaskArgs | undefined;
            if (args?.maintenanceWindowId === undefined && !opts.urn) {
                throw new Error("Missing required property 'maintenanceWindowId'");
            }
            resourceInputs["dbserverClusters"] = args?.dbserverClusters;
            resourceInputs["dbserverIds"] = args?.dbserverIds;
            resourceInputs["maintenanceWindowId"] = args?.maintenanceWindowId;
            resourceInputs["tasks"] = args?.tasks;
            resourceInputs["entityTaskAssociations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbMaintenanceTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbMaintenanceTask resources.
 */
export interface NdbMaintenanceTaskState {
    /**
     * dbserver cluster ids. Conflicts with "dbserverId"
     */
    dbserverClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * dbserver vm id. Conflicts with "dbserverCluster"
     */
    dbserverIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Entity Task Association  List.
     */
    entityTaskAssociations?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociation>[]>;
    /**
     * maintenance window id which has to be associated
     */
    maintenanceWindowId?: pulumi.Input<string>;
    /**
     * task input for Operating System Patching or Database Patching or both
     */
    tasks?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskTask>[]>;
}

/**
 * The set of arguments for constructing a NdbMaintenanceTask resource.
 */
export interface NdbMaintenanceTaskArgs {
    /**
     * dbserver cluster ids. Conflicts with "dbserverId"
     */
    dbserverClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * dbserver vm id. Conflicts with "dbserverCluster"
     */
    dbserverIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * maintenance window id which has to be associated
     */
    maintenanceWindowId: pulumi.Input<string>;
    /**
     * task input for Operating System Patching or Database Patching or both
     */
    tasks?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskTask>[]>;
}
