// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create software profile versions based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbSoftwareVersionProfile("name", {
 *     engineType: "postgres_database",
 *     profileId: resource.nutanix_ndb_profile.name12.id,
 *     description: "made  by tf",
 *     postgresDatabases: [{
 *         sourceDbserverId: "{{ DB_Server_ID }}",
 *     }],
 *     availableClusterIds: ["{{ cluster_ids }}"],
 *     status: "published",
 * });
 * ```
 */
export class NdbSoftwareVersionProfile extends pulumi.CustomResource {
    /**
     * Get an existing NdbSoftwareVersionProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbSoftwareVersionProfileState, opts?: pulumi.CustomResourceOptions): NdbSoftwareVersionProfile {
        return new NdbSoftwareVersionProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile';

    /**
     * Returns true if the given object is an instance of NdbSoftwareVersionProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbSoftwareVersionProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbSoftwareVersionProfile.__pulumiType;
    }

    /**
     * available cluster ids
     */
    public readonly availableClusterIds!: pulumi.Output<string[] | undefined>;
    /**
     * Db version of software profile
     */
    public /*out*/ readonly dbVersion!: pulumi.Output<string>;
    /**
     * deprecated or not
     */
    public /*out*/ readonly deprecated!: pulumi.Output<boolean>;
    /**
     * description of profile
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * engine type of profile
     */
    public readonly engineType!: pulumi.Output<string>;
    /**
     * Name of profile
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * owner  of profile
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * postgres database info
     */
    public readonly postgresDatabases!: pulumi.Output<outputs.NdbSoftwareVersionProfilePostgresDatabase[] | undefined>;
    /**
     * profile id
     */
    public readonly profileId!: pulumi.Output<string>;
    /**
     * properties of software profile
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbSoftwareVersionProfileProperty[]>;
    /**
     * properties map of profile
     */
    public /*out*/ readonly propertiesMap!: pulumi.Output<{[key: string]: string}>;
    /**
     * Published or not
     */
    public /*out*/ readonly published!: pulumi.Output<boolean>;
    /**
     * status of profile. Allowed Values are "deprecated", "published", "unpublished"
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * system profile or not.
     */
    public /*out*/ readonly systemProfile!: pulumi.Output<boolean>;
    /**
     * topology of software profile
     */
    public /*out*/ readonly topology!: pulumi.Output<string>;
    /**
     * Version of software profile
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * version cluster association
     */
    public /*out*/ readonly versionClusterAssociations!: pulumi.Output<outputs.NdbSoftwareVersionProfileVersionClusterAssociation[]>;

    /**
     * Create a NdbSoftwareVersionProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbSoftwareVersionProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbSoftwareVersionProfileArgs | NdbSoftwareVersionProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbSoftwareVersionProfileState | undefined;
            resourceInputs["availableClusterIds"] = state ? state.availableClusterIds : undefined;
            resourceInputs["dbVersion"] = state ? state.dbVersion : undefined;
            resourceInputs["deprecated"] = state ? state.deprecated : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engineType"] = state ? state.engineType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["postgresDatabases"] = state ? state.postgresDatabases : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["propertiesMap"] = state ? state.propertiesMap : undefined;
            resourceInputs["published"] = state ? state.published : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["systemProfile"] = state ? state.systemProfile : undefined;
            resourceInputs["topology"] = state ? state.topology : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versionClusterAssociations"] = state ? state.versionClusterAssociations : undefined;
        } else {
            const args = argsOrState as NdbSoftwareVersionProfileArgs | undefined;
            if ((!args || args.engineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineType'");
            }
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["availableClusterIds"] = args ? args.availableClusterIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engineType"] = args ? args.engineType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["postgresDatabases"] = args ? args.postgresDatabases : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["dbVersion"] = undefined /*out*/;
            resourceInputs["deprecated"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["propertiesMap"] = undefined /*out*/;
            resourceInputs["published"] = undefined /*out*/;
            resourceInputs["systemProfile"] = undefined /*out*/;
            resourceInputs["topology"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["versionClusterAssociations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbSoftwareVersionProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbSoftwareVersionProfile resources.
 */
export interface NdbSoftwareVersionProfileState {
    /**
     * available cluster ids
     */
    availableClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Db version of software profile
     */
    dbVersion?: pulumi.Input<string>;
    /**
     * deprecated or not
     */
    deprecated?: pulumi.Input<boolean>;
    /**
     * description of profile
     */
    description?: pulumi.Input<string>;
    /**
     * engine type of profile
     */
    engineType?: pulumi.Input<string>;
    /**
     * Name of profile
     */
    name?: pulumi.Input<string>;
    /**
     * owner  of profile
     */
    owner?: pulumi.Input<string>;
    /**
     * postgres database info
     */
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbSoftwareVersionProfilePostgresDatabase>[]>;
    /**
     * profile id
     */
    profileId?: pulumi.Input<string>;
    /**
     * properties of software profile
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbSoftwareVersionProfileProperty>[]>;
    /**
     * properties map of profile
     */
    propertiesMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Published or not
     */
    published?: pulumi.Input<boolean>;
    /**
     * status of profile. Allowed Values are "deprecated", "published", "unpublished"
     */
    status?: pulumi.Input<string>;
    /**
     * system profile or not.
     */
    systemProfile?: pulumi.Input<boolean>;
    /**
     * topology of software profile
     */
    topology?: pulumi.Input<string>;
    /**
     * Version of software profile
     */
    version?: pulumi.Input<string>;
    /**
     * version cluster association
     */
    versionClusterAssociations?: pulumi.Input<pulumi.Input<inputs.NdbSoftwareVersionProfileVersionClusterAssociation>[]>;
}

/**
 * The set of arguments for constructing a NdbSoftwareVersionProfile resource.
 */
export interface NdbSoftwareVersionProfileArgs {
    /**
     * available cluster ids
     */
    availableClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * description of profile
     */
    description?: pulumi.Input<string>;
    /**
     * engine type of profile
     */
    engineType: pulumi.Input<string>;
    /**
     * Name of profile
     */
    name?: pulumi.Input<string>;
    /**
     * postgres database info
     */
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbSoftwareVersionProfilePostgresDatabase>[]>;
    /**
     * profile id
     */
    profileId: pulumi.Input<string>;
    /**
     * status of profile. Allowed Values are "deprecated", "published", "unpublished"
     */
    status?: pulumi.Input<string>;
}
