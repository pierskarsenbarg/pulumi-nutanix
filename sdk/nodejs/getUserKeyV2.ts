// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Fetches the requested key through the provided external identifier for the user and the key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const getKey = nutanix.getUserKeyV2({
 *     extId: "<USER_KEY_UUID>",
 *     userExtId: "<SERVICE_ACCOUNT_UUID>",
 * });
 * ```
 *
 * ## Argument Reference
 *
 * The following arguments are supported:
 *
 * * `userExtId`: - ( Required ) External Identifier of the User.
 * * `extId`: - ( Required ) External identifier of the key.
 */
export function getUserKeyV2(args: GetUserKeyV2Args, opts?: pulumi.InvokeOptions): Promise<GetUserKeyV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getUserKeyV2:getUserKeyV2", {
        "description": args.description,
        "extId": args.extId,
        "userExtId": args.userExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserKeyV2.
 */
export interface GetUserKeyV2Args {
    /**
     * - Brief description of the key.
     */
    description?: string;
    /**
     * The External Identifier of the User Group.
     */
    extId: string;
    userExtId: string;
}

/**
 * A collection of values returned by getUserKeyV2.
 */
export interface GetUserKeyV2Result {
    /**
     * - External client to whom the given key is allocated.
     */
    readonly assignedTo: string;
    /**
     * - User or service who created the key.
     */
    readonly createdBy: string;
    /**
     * - The creation time of the key.
     */
    readonly createdTime: string;
    /**
     * - The creation mechanism of this entity.
     */
    readonly creationType: string;
    /**
     * - Brief description of the key.
     */
    readonly description?: string;
    /**
     * - The time when the key will expire.
     */
    readonly expiryTime: string;
    /**
     * The External Identifier of the User Group.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * - Details specific to type of the key.
     */
    readonly keyDetails: outputs.GetUserKeyV2KeyDetail[];
    /**
     * - The type of key.
     */
    readonly keyType: string;
    /**
     * - User who updated the key.
     */
    readonly lastUpdatedBy: string;
    /**
     * - The time when the key was updated.
     */
    readonly lastUpdatedTime: string;
    /**
     * - The time when the key was last used.
     */
    readonly lastUsedTime: string;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetUserKeyV2Link[];
    /**
     * - Identifier for the key in the form of a name.
     */
    readonly name: string;
    /**
     * - The status of the key.
     */
    readonly status: string;
    /**
     * A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
    readonly userExtId: string;
}
/**
 * Fetches the requested key through the provided external identifier for the user and the key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const getKey = nutanix.getUserKeyV2({
 *     extId: "<USER_KEY_UUID>",
 *     userExtId: "<SERVICE_ACCOUNT_UUID>",
 * });
 * ```
 *
 * ## Argument Reference
 *
 * The following arguments are supported:
 *
 * * `userExtId`: - ( Required ) External Identifier of the User.
 * * `extId`: - ( Required ) External identifier of the key.
 */
export function getUserKeyV2Output(args: GetUserKeyV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUserKeyV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getUserKeyV2:getUserKeyV2", {
        "description": args.description,
        "extId": args.extId,
        "userExtId": args.userExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserKeyV2.
 */
export interface GetUserKeyV2OutputArgs {
    /**
     * - Brief description of the key.
     */
    description?: pulumi.Input<string>;
    /**
     * The External Identifier of the User Group.
     */
    extId: pulumi.Input<string>;
    userExtId: pulumi.Input<string>;
}
