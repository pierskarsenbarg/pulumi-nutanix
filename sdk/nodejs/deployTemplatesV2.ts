// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeployTemplatesV2 extends pulumi.CustomResource {
    /**
     * Get an existing DeployTemplatesV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeployTemplatesV2State, opts?: pulumi.CustomResourceOptions): DeployTemplatesV2 {
        return new DeployTemplatesV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/deployTemplatesV2:DeployTemplatesV2';

    /**
     * Returns true if the given object is an instance of DeployTemplatesV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeployTemplatesV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeployTemplatesV2.__pulumiType;
    }

    public readonly clusterReference!: pulumi.Output<string>;
    public readonly extId!: pulumi.Output<string>;
    public readonly numberOfVms!: pulumi.Output<number>;
    public readonly overrideVmConfigMaps!: pulumi.Output<outputs.DeployTemplatesV2OverrideVmConfigMap[] | undefined>;
    public readonly versionId!: pulumi.Output<string | undefined>;

    /**
     * Create a DeployTemplatesV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeployTemplatesV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeployTemplatesV2Args | DeployTemplatesV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeployTemplatesV2State | undefined;
            resourceInputs["clusterReference"] = state ? state.clusterReference : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["numberOfVms"] = state ? state.numberOfVms : undefined;
            resourceInputs["overrideVmConfigMaps"] = state ? state.overrideVmConfigMaps : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as DeployTemplatesV2Args | undefined;
            if ((!args || args.clusterReference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterReference'");
            }
            if ((!args || args.extId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extId'");
            }
            if ((!args || args.numberOfVms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numberOfVms'");
            }
            resourceInputs["clusterReference"] = args ? args.clusterReference : undefined;
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["numberOfVms"] = args ? args.numberOfVms : undefined;
            resourceInputs["overrideVmConfigMaps"] = args ? args.overrideVmConfigMaps : undefined;
            resourceInputs["versionId"] = args ? args.versionId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeployTemplatesV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeployTemplatesV2 resources.
 */
export interface DeployTemplatesV2State {
    clusterReference?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    numberOfVms?: pulumi.Input<number>;
    overrideVmConfigMaps?: pulumi.Input<pulumi.Input<inputs.DeployTemplatesV2OverrideVmConfigMap>[]>;
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeployTemplatesV2 resource.
 */
export interface DeployTemplatesV2Args {
    clusterReference: pulumi.Input<string>;
    extId: pulumi.Input<string>;
    numberOfVms: pulumi.Input<number>;
    overrideVmConfigMaps?: pulumi.Input<pulumi.Input<inputs.DeployTemplatesV2OverrideVmConfigMap>[]>;
    versionId?: pulumi.Input<string>;
}
