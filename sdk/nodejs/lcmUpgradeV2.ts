// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Perform upgrade operation to a specific target version for discovered LCM entity/entities.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // upgrade the entity
 * const upgrade = new nutanix.LcmUpgradeV2("upgrade", {entityUpdateSpecs: [{
 *     entityUuid: "0c5c9e53-3551-4c5d-b13c-e41c04cbfaf7",
 *     toVersion: "4.0.0",
 * }]});
 * ```
 */
export class LcmUpgradeV2 extends pulumi.CustomResource {
    /**
     * Get an existing LcmUpgradeV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LcmUpgradeV2State, opts?: pulumi.CustomResourceOptions): LcmUpgradeV2 {
        return new LcmUpgradeV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/lcmUpgradeV2:LcmUpgradeV2';

    /**
     * Returns true if the given object is an instance of LcmUpgradeV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LcmUpgradeV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LcmUpgradeV2.__pulumiType;
    }

    /**
     * List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through. Items Enum: `POWER_OFF_UVMS`
     */
    public readonly autoHandleFlags!: pulumi.Output<string[] | undefined>;
    /**
     * List of entity update objects for getting recommendations.
     */
    public readonly entityUpdateSpecs!: pulumi.Output<outputs.LcmUpgradeV2EntityUpdateSpec[] | undefined>;
    /**
     * Cluster management server configuration used while updating clusters with ESX or Hyper-V.
     */
    public readonly managementServer!: pulumi.Output<outputs.LcmUpgradeV2ManagementServer | undefined>;
    /**
     * Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode. Value in Range [ 60 .. 86400]
     */
    public readonly maxWaitTimeInSecs!: pulumi.Output<number | undefined>;
    /**
     * List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
     */
    public readonly skippedPrecheckFlags!: pulumi.Output<string[] | undefined>;
    /**
     * Cluster uuid on which the resource is present or operation is being performed.
     */
    public readonly xClusterId!: pulumi.Output<string | undefined>;

    /**
     * Create a LcmUpgradeV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LcmUpgradeV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LcmUpgradeV2Args | LcmUpgradeV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LcmUpgradeV2State | undefined;
            resourceInputs["autoHandleFlags"] = state ? state.autoHandleFlags : undefined;
            resourceInputs["entityUpdateSpecs"] = state ? state.entityUpdateSpecs : undefined;
            resourceInputs["managementServer"] = state ? state.managementServer : undefined;
            resourceInputs["maxWaitTimeInSecs"] = state ? state.maxWaitTimeInSecs : undefined;
            resourceInputs["skippedPrecheckFlags"] = state ? state.skippedPrecheckFlags : undefined;
            resourceInputs["xClusterId"] = state ? state.xClusterId : undefined;
        } else {
            const args = argsOrState as LcmUpgradeV2Args | undefined;
            resourceInputs["autoHandleFlags"] = args ? args.autoHandleFlags : undefined;
            resourceInputs["entityUpdateSpecs"] = args ? args.entityUpdateSpecs : undefined;
            resourceInputs["managementServer"] = args ? args.managementServer : undefined;
            resourceInputs["maxWaitTimeInSecs"] = args ? args.maxWaitTimeInSecs : undefined;
            resourceInputs["skippedPrecheckFlags"] = args ? args.skippedPrecheckFlags : undefined;
            resourceInputs["xClusterId"] = args ? args.xClusterId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LcmUpgradeV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LcmUpgradeV2 resources.
 */
export interface LcmUpgradeV2State {
    /**
     * List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through. Items Enum: `POWER_OFF_UVMS`
     */
    autoHandleFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of entity update objects for getting recommendations.
     */
    entityUpdateSpecs?: pulumi.Input<pulumi.Input<inputs.LcmUpgradeV2EntityUpdateSpec>[]>;
    /**
     * Cluster management server configuration used while updating clusters with ESX or Hyper-V.
     */
    managementServer?: pulumi.Input<inputs.LcmUpgradeV2ManagementServer>;
    /**
     * Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode. Value in Range [ 60 .. 86400]
     */
    maxWaitTimeInSecs?: pulumi.Input<number>;
    /**
     * List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
     */
    skippedPrecheckFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cluster uuid on which the resource is present or operation is being performed.
     */
    xClusterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LcmUpgradeV2 resource.
 */
export interface LcmUpgradeV2Args {
    /**
     * List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through. Items Enum: `POWER_OFF_UVMS`
     */
    autoHandleFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of entity update objects for getting recommendations.
     */
    entityUpdateSpecs?: pulumi.Input<pulumi.Input<inputs.LcmUpgradeV2EntityUpdateSpec>[]>;
    /**
     * Cluster management server configuration used while updating clusters with ESX or Hyper-V.
     */
    managementServer?: pulumi.Input<inputs.LcmUpgradeV2ManagementServer>;
    /**
     * Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode. Value in Range [ 60 .. 86400]
     */
    maxWaitTimeInSecs?: pulumi.Input<number>;
    /**
     * List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
     */
    skippedPrecheckFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cluster uuid on which the resource is present or operation is being performed.
     */
    xClusterId?: pulumi.Input<string>;
}
