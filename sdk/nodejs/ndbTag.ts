// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to create tags based on the input parameters.
 *
 * ## Example Usage
 *
 * ### resource to create tag
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbTag("name", {
 *     description: "this is desc ok",
 *     entityType: "DATABASE",
 *     required: true,
 * });
 * ```
 *
 * ### resource to update tag with status
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbTag("name", {
 *     description: "this is desc ok",
 *     entityType: "DATABASE",
 *     required: true,
 *     status: "DEPRECATED",
 * });
 * ```
 */
export class NdbTag extends pulumi.CustomResource {
    /**
     * Get an existing NdbTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbTagState, opts?: pulumi.CustomResourceOptions): NdbTag {
        return new NdbTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbTag:NdbTag';

    /**
     * Returns true if the given object is an instance of NdbTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbTag.__pulumiType;
    }

    /**
     * date created of the tag
     */
    declare public /*out*/ readonly dateCreated: pulumi.Output<string>;
    /**
     * modified date of tha tag
     */
    declare public /*out*/ readonly dateModified: pulumi.Output<string>;
    /**
     * description for the tag
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
     */
    declare public readonly entityType: pulumi.Output<string>;
    /**
     * name for the tag
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * owner id of the tag
     */
    declare public /*out*/ readonly owner: pulumi.Output<string>;
    /**
     * provide a tag value for entities.
     */
    declare public readonly required: pulumi.Output<boolean | undefined>;
    /**
     * Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * value for the tag
     */
    declare public /*out*/ readonly values: pulumi.Output<number>;

    /**
     * Create a NdbTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbTagArgs | NdbTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbTagState | undefined;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateModified"] = state?.dateModified;
            resourceInputs["description"] = state?.description;
            resourceInputs["entityType"] = state?.entityType;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["required"] = state?.required;
            resourceInputs["status"] = state?.status;
            resourceInputs["values"] = state?.values;
        } else {
            const args = argsOrState as NdbTagArgs | undefined;
            if (args?.entityType === undefined && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["entityType"] = args?.entityType;
            resourceInputs["name"] = args?.name;
            resourceInputs["required"] = args?.required;
            resourceInputs["status"] = args?.status;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["values"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbTag.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbTag resources.
 */
export interface NdbTagState {
    /**
     * date created of the tag
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * modified date of tha tag
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description for the tag
     */
    description?: pulumi.Input<string>;
    /**
     * entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
     */
    entityType?: pulumi.Input<string>;
    /**
     * name for the tag
     */
    name?: pulumi.Input<string>;
    /**
     * owner id of the tag
     */
    owner?: pulumi.Input<string>;
    /**
     * provide a tag value for entities.
     */
    required?: pulumi.Input<boolean>;
    /**
     * Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
     */
    status?: pulumi.Input<string>;
    /**
     * value for the tag
     */
    values?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NdbTag resource.
 */
export interface NdbTagArgs {
    /**
     * description for the tag
     */
    description?: pulumi.Input<string>;
    /**
     * entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
     */
    entityType: pulumi.Input<string>;
    /**
     * name for the tag
     */
    name?: pulumi.Input<string>;
    /**
     * provide a tag value for entities.
     */
    required?: pulumi.Input<boolean>;
    /**
     * Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
     */
    status?: pulumi.Input<string>;
}
