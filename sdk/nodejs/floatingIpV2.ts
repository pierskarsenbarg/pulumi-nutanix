// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix resource to create Floating IPs.
 *
 * ## Example1 :  create Floating IP with External Subnet
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // create Floating IP with External Subnet UUID
 * const fip_ext_subnet = new nutanix.FloatingIpV2("fip-ext-subnet", {
 *     description: "example fip  description",
 *     externalSubnetReference: "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
 * });
 * ```
 *
 * ## Example2 :  create Floating IP with External Subnet with vm association
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const fip_ext_subnet_vm = new nutanix.FloatingIpV2("fip-ext-subnet-vm", {
 *     associations: [{
 *         vmNicAssociations: [{
 *             vmNicReference: "31e4b3b1-4b3b-4b3b-4b3b-4b3b4b3b4b3b",
 *         }],
 *     }],
 *     description: "example fip  description",
 *     externalSubnetReference: "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
 * });
 * ```
 */
export class FloatingIpV2 extends pulumi.CustomResource {
    /**
     * Get an existing FloatingIpV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloatingIpV2State, opts?: pulumi.CustomResourceOptions): FloatingIpV2 {
        return new FloatingIpV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/floatingIpV2:FloatingIpV2';

    /**
     * Returns true if the given object is an instance of FloatingIpV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FloatingIpV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FloatingIpV2.__pulumiType;
    }

    /**
     * Association status of floating IP.
     */
    public /*out*/ readonly associationStatus!: pulumi.Output<string>;
    /**
     * Association of the Floating IP with either NIC or Private IP
     */
    public readonly associations!: pulumi.Output<outputs.FloatingIpV2Association[] | undefined>;
    /**
     * Description for the Floating IP.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly extId!: pulumi.Output<string>;
    /**
     * External subnet reference for the Floating IP to be allocated in on-prem only.
     */
    public readonly externalSubnetReference!: pulumi.Output<string | undefined>;
    /**
     * Networking common base object
     */
    public readonly externalSubnets!: pulumi.Output<outputs.FloatingIpV2ExternalSubnet[]>;
    public /*out*/ readonly floatingIpValue!: pulumi.Output<string>;
    /**
     * Floating IP address.
     */
    public readonly floatingIps!: pulumi.Output<outputs.FloatingIpV2FloatingIp[]>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.FloatingIpV2Link[]>;
    public readonly loadBalancerSessionReference!: pulumi.Output<string | undefined>;
    /**
     * Metadata associated with this resource.
     */
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.FloatingIpV2Metadata[]>;
    /**
     * Name of the floating IP.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * VM NIC reference.
     */
    public readonly vmNicReference!: pulumi.Output<string>;
    /**
     * Virtual NIC for projections
     */
    public readonly vmNics!: pulumi.Output<outputs.FloatingIpV2VmNic[]>;
    /**
     * VPC reference UUID
     */
    public readonly vpcReference!: pulumi.Output<string>;
    /**
     * Networking common base object
     */
    public readonly vpcs!: pulumi.Output<outputs.FloatingIpV2Vpc[]>;

    /**
     * Create a FloatingIpV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FloatingIpV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FloatingIpV2Args | FloatingIpV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FloatingIpV2State | undefined;
            resourceInputs["associationStatus"] = state ? state.associationStatus : undefined;
            resourceInputs["associations"] = state ? state.associations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["externalSubnetReference"] = state ? state.externalSubnetReference : undefined;
            resourceInputs["externalSubnets"] = state ? state.externalSubnets : undefined;
            resourceInputs["floatingIpValue"] = state ? state.floatingIpValue : undefined;
            resourceInputs["floatingIps"] = state ? state.floatingIps : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["loadBalancerSessionReference"] = state ? state.loadBalancerSessionReference : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vmNicReference"] = state ? state.vmNicReference : undefined;
            resourceInputs["vmNics"] = state ? state.vmNics : undefined;
            resourceInputs["vpcReference"] = state ? state.vpcReference : undefined;
            resourceInputs["vpcs"] = state ? state.vpcs : undefined;
        } else {
            const args = argsOrState as FloatingIpV2Args | undefined;
            resourceInputs["associations"] = args ? args.associations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["externalSubnetReference"] = args ? args.externalSubnetReference : undefined;
            resourceInputs["externalSubnets"] = args ? args.externalSubnets : undefined;
            resourceInputs["floatingIps"] = args ? args.floatingIps : undefined;
            resourceInputs["loadBalancerSessionReference"] = args ? args.loadBalancerSessionReference : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["vmNicReference"] = args ? args.vmNicReference : undefined;
            resourceInputs["vmNics"] = args ? args.vmNics : undefined;
            resourceInputs["vpcReference"] = args ? args.vpcReference : undefined;
            resourceInputs["vpcs"] = args ? args.vpcs : undefined;
            resourceInputs["associationStatus"] = undefined /*out*/;
            resourceInputs["floatingIpValue"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FloatingIpV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FloatingIpV2 resources.
 */
export interface FloatingIpV2State {
    /**
     * Association status of floating IP.
     */
    associationStatus?: pulumi.Input<string>;
    /**
     * Association of the Floating IP with either NIC or Private IP
     */
    associations?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2Association>[]>;
    /**
     * Description for the Floating IP.
     */
    description?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    /**
     * External subnet reference for the Floating IP to be allocated in on-prem only.
     */
    externalSubnetReference?: pulumi.Input<string>;
    /**
     * Networking common base object
     */
    externalSubnets?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2ExternalSubnet>[]>;
    floatingIpValue?: pulumi.Input<string>;
    /**
     * Floating IP address.
     */
    floatingIps?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2FloatingIp>[]>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2Link>[]>;
    loadBalancerSessionReference?: pulumi.Input<string>;
    /**
     * Metadata associated with this resource.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2Metadata>[]>;
    /**
     * Name of the floating IP.
     */
    name?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * VM NIC reference.
     */
    vmNicReference?: pulumi.Input<string>;
    /**
     * Virtual NIC for projections
     */
    vmNics?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2VmNic>[]>;
    /**
     * VPC reference UUID
     */
    vpcReference?: pulumi.Input<string>;
    /**
     * Networking common base object
     */
    vpcs?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2Vpc>[]>;
}

/**
 * The set of arguments for constructing a FloatingIpV2 resource.
 */
export interface FloatingIpV2Args {
    /**
     * Association of the Floating IP with either NIC or Private IP
     */
    associations?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2Association>[]>;
    /**
     * Description for the Floating IP.
     */
    description?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    /**
     * External subnet reference for the Floating IP to be allocated in on-prem only.
     */
    externalSubnetReference?: pulumi.Input<string>;
    /**
     * Networking common base object
     */
    externalSubnets?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2ExternalSubnet>[]>;
    /**
     * Floating IP address.
     */
    floatingIps?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2FloatingIp>[]>;
    loadBalancerSessionReference?: pulumi.Input<string>;
    /**
     * Name of the floating IP.
     */
    name?: pulumi.Input<string>;
    /**
     * VM NIC reference.
     */
    vmNicReference?: pulumi.Input<string>;
    /**
     * Virtual NIC for projections
     */
    vmNics?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2VmNic>[]>;
    /**
     * VPC reference UUID
     */
    vpcReference?: pulumi.Input<string>;
    /**
     * Networking common base object
     */
    vpcs?: pulumi.Input<pulumi.Input<inputs.FloatingIpV2Vpc>[]>;
}
