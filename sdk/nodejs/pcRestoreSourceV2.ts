// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > The restore source is auto-deleted after sometime, nutanix.PcRestoreSourceV2 resource is auto-create new restore source if it was deleted, so notice that the id of the restore source resource will be different after recreation. and for update restore source, it will create a new restore source with the new configuration
 *
 * Create a restore source pointing to a cluster or object store to restore the domain manager. The created restore source is intended to be deleted after use. If the restore source is not deleted using the deleteRestoreSource API, then it is auto-deleted after sometime. Also note that a restore source will not contain a backup policy. It is only used to access the backup data at the location from where the Prism Central may be restored. Credentials used to access the restore source are not validated at the time of creation of the restore source. They are validated when the restore source is used to fetch data.
 *
 * ## Example Usage
 *
 * ### Cluster Location
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * //defining nutanix configuration for PE
 * const pe = new nutanix.Provider("pe", {
 *     username: _var.nutanix_pe_username,
 *     password: _var.nutanix_pe_password,
 *     endpoint: _var.nutanix_pe_endpoint,
 *     insecure: true,
 *     port: "9440",
 * });
 * // restore source is auto-deleted after sometime, nutanix_pc_restore_source_v2 resource is auto-create
 * // new restore source if it was deleted, so notice that the id of the restore source will be different
 * // after recreation
 * const cluster_location = new nutanix.PcRestoreSourceV2("cluster-location", {location: {
 *     clusterLocations: [{
 *         configs: [{
 *             extId: "323860ca-bd10-411e-9fe0-1430b62eaf45",
 *         }],
 *     }],
 * }}, {
 *     provider: nutanix.pe,
 * });
 * ```
 *
 * ### Object Store Location
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // using object store location
 * const object_store_location = new nutanix.PcRestoreSourceV2("object-store-location", {location: {
 *     objectStoreLocations: [{
 *         providerConfigs: [{
 *             bucketName: "nutanix-terraform-bucket",
 *             region: "us-west-1",
 *             credentials: {
 *                 accessKeyId: "IHSAJHDHADFWYTKJHFGCJKHASGJHKDSA",
 *                 secretAccessKey: "JGSDHJYHGFHGHDS+JKBASDF/HSDAFHJ+SjkfbdsASDfdJFdSDFJfk",
 *             },
 *         }],
 *         backupPolicies: [{
 *             rpoInMinutes: 120,
 *         }],
 *     }],
 * }});
 * ```
 */
export class PcRestoreSourceV2 extends pulumi.CustomResource {
    /**
     * Get an existing PcRestoreSourceV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PcRestoreSourceV2State, opts?: pulumi.CustomResourceOptions): PcRestoreSourceV2 {
        return new PcRestoreSourceV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/pcRestoreSourceV2:PcRestoreSourceV2';

    /**
     * Returns true if the given object is an instance of PcRestoreSourceV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PcRestoreSourceV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PcRestoreSourceV2.__pulumiType;
    }

    public /*out*/ readonly backupPauseReason!: pulumi.Output<string>;
    public /*out*/ readonly extId!: pulumi.Output<string>;
    public /*out*/ readonly isBackupPaused!: pulumi.Output<boolean>;
    public /*out*/ readonly lastSyncTime!: pulumi.Output<string>;
    public /*out*/ readonly links!: pulumi.Output<outputs.PcRestoreSourceV2Link[]>;
    /**
     * -(Required) Location of the backup target. For example, a cluster or an object store endpoint, such as AWS s3.
     */
    public readonly location!: pulumi.Output<outputs.PcRestoreSourceV2Location>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a PcRestoreSourceV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PcRestoreSourceV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PcRestoreSourceV2Args | PcRestoreSourceV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PcRestoreSourceV2State | undefined;
            resourceInputs["backupPauseReason"] = state ? state.backupPauseReason : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["isBackupPaused"] = state ? state.isBackupPaused : undefined;
            resourceInputs["lastSyncTime"] = state ? state.lastSyncTime : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as PcRestoreSourceV2Args | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["backupPauseReason"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["isBackupPaused"] = undefined /*out*/;
            resourceInputs["lastSyncTime"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PcRestoreSourceV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PcRestoreSourceV2 resources.
 */
export interface PcRestoreSourceV2State {
    backupPauseReason?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    isBackupPaused?: pulumi.Input<boolean>;
    lastSyncTime?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.PcRestoreSourceV2Link>[]>;
    /**
     * -(Required) Location of the backup target. For example, a cluster or an object store endpoint, such as AWS s3.
     */
    location?: pulumi.Input<inputs.PcRestoreSourceV2Location>;
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PcRestoreSourceV2 resource.
 */
export interface PcRestoreSourceV2Args {
    /**
     * -(Required) Location of the backup target. For example, a cluster or an object store endpoint, such as AWS s3.
     */
    location: pulumi.Input<inputs.PcRestoreSourceV2Location>;
}
