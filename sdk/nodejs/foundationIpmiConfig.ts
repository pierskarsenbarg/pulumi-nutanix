// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FoundationIpmiConfig extends pulumi.CustomResource {
    /**
     * Get an existing FoundationIpmiConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FoundationIpmiConfigState, opts?: pulumi.CustomResourceOptions): FoundationIpmiConfig {
        return new FoundationIpmiConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/foundationIpmiConfig:FoundationIpmiConfig';

    /**
     * Returns true if the given object is an instance of FoundationIpmiConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FoundationIpmiConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FoundationIpmiConfig.__pulumiType;
    }

    /**
     * - (Required) List of blocks.
     */
    declare public readonly blocks: pulumi.Output<outputs.FoundationIpmiConfigBlock[]>;
    /**
     * - (Required) IPMI gateway.
     */
    declare public readonly ipmiGateway: pulumi.Output<string>;
    /**
     * - (Required) IPMI netmask.
     */
    declare public readonly ipmiNetmask: pulumi.Output<string>;
    /**
     * - (Required) IPMI password.
     */
    declare public readonly ipmiPassword: pulumi.Output<string>;
    /**
     * - (Required) IPMI username.
     */
    declare public readonly ipmiUser: pulumi.Output<string>;

    /**
     * Create a FoundationIpmiConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FoundationIpmiConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FoundationIpmiConfigArgs | FoundationIpmiConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FoundationIpmiConfigState | undefined;
            resourceInputs["blocks"] = state?.blocks;
            resourceInputs["ipmiGateway"] = state?.ipmiGateway;
            resourceInputs["ipmiNetmask"] = state?.ipmiNetmask;
            resourceInputs["ipmiPassword"] = state?.ipmiPassword;
            resourceInputs["ipmiUser"] = state?.ipmiUser;
        } else {
            const args = argsOrState as FoundationIpmiConfigArgs | undefined;
            if (args?.blocks === undefined && !opts.urn) {
                throw new Error("Missing required property 'blocks'");
            }
            if (args?.ipmiGateway === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipmiGateway'");
            }
            if (args?.ipmiNetmask === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipmiNetmask'");
            }
            if (args?.ipmiPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipmiPassword'");
            }
            if (args?.ipmiUser === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipmiUser'");
            }
            resourceInputs["blocks"] = args?.blocks;
            resourceInputs["ipmiGateway"] = args?.ipmiGateway;
            resourceInputs["ipmiNetmask"] = args?.ipmiNetmask;
            resourceInputs["ipmiPassword"] = args?.ipmiPassword;
            resourceInputs["ipmiUser"] = args?.ipmiUser;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FoundationIpmiConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FoundationIpmiConfig resources.
 */
export interface FoundationIpmiConfigState {
    /**
     * - (Required) List of blocks.
     */
    blocks?: pulumi.Input<pulumi.Input<inputs.FoundationIpmiConfigBlock>[]>;
    /**
     * - (Required) IPMI gateway.
     */
    ipmiGateway?: pulumi.Input<string>;
    /**
     * - (Required) IPMI netmask.
     */
    ipmiNetmask?: pulumi.Input<string>;
    /**
     * - (Required) IPMI password.
     */
    ipmiPassword?: pulumi.Input<string>;
    /**
     * - (Required) IPMI username.
     */
    ipmiUser?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FoundationIpmiConfig resource.
 */
export interface FoundationIpmiConfigArgs {
    /**
     * - (Required) List of blocks.
     */
    blocks: pulumi.Input<pulumi.Input<inputs.FoundationIpmiConfigBlock>[]>;
    /**
     * - (Required) IPMI gateway.
     */
    ipmiGateway: pulumi.Input<string>;
    /**
     * - (Required) IPMI netmask.
     */
    ipmiNetmask: pulumi.Input<string>;
    /**
     * - (Required) IPMI password.
     */
    ipmiPassword: pulumi.Input<string>;
    /**
     * - (Required) IPMI username.
     */
    ipmiUser: pulumi.Input<string>;
}
