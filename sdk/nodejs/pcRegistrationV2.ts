// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to Registers a domain manager (Prism Central) instance to other entities like PE and PC. This process is asynchronous, creating a registration task and returning its UUID.
 */
export class PcRegistrationV2 extends pulumi.CustomResource {
    /**
     * Get an existing PcRegistrationV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PcRegistrationV2State, opts?: pulumi.CustomResourceOptions): PcRegistrationV2 {
        return new PcRegistrationV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/pcRegistrationV2:PcRegistrationV2';

    /**
     * Returns true if the given object is an instance of PcRegistrationV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PcRegistrationV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PcRegistrationV2.__pulumiType;
    }

    public /*out*/ readonly configs!: pulumi.Output<outputs.PcRegistrationV2Config[]>;
    public /*out*/ readonly extId!: pulumi.Output<string>;
    public /*out*/ readonly hostingClusterExtId!: pulumi.Output<string>;
    public /*out*/ readonly isRegisteredWithHostingCluster!: pulumi.Output<boolean>;
    public /*out*/ readonly links!: pulumi.Output<outputs.PcRegistrationV2Link[]>;
    public /*out*/ readonly networks!: pulumi.Output<outputs.PcRegistrationV2Network[]>;
    public /*out*/ readonly nodeExtIds!: pulumi.Output<string[]>;
    /**
     * -(Required) The display name for the Role.
     */
    public readonly pcExtId!: pulumi.Output<string>;
    /**
     * -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
     * The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
     * * `prism.v4.management.DomainManagerRemoteClusterSpec`
     * * `prism.v4.management.AOSRemoteClusterSpec`
     * * `prism.v4.management.ClusterReference`
     */
    public readonly remoteCluster!: pulumi.Output<outputs.PcRegistrationV2RemoteCluster>;
    public /*out*/ readonly shouldEnableHighAvailability!: pulumi.Output<boolean>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a PcRegistrationV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PcRegistrationV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PcRegistrationV2Args | PcRegistrationV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PcRegistrationV2State | undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["hostingClusterExtId"] = state ? state.hostingClusterExtId : undefined;
            resourceInputs["isRegisteredWithHostingCluster"] = state ? state.isRegisteredWithHostingCluster : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nodeExtIds"] = state ? state.nodeExtIds : undefined;
            resourceInputs["pcExtId"] = state ? state.pcExtId : undefined;
            resourceInputs["remoteCluster"] = state ? state.remoteCluster : undefined;
            resourceInputs["shouldEnableHighAvailability"] = state ? state.shouldEnableHighAvailability : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as PcRegistrationV2Args | undefined;
            if ((!args || args.pcExtId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pcExtId'");
            }
            if ((!args || args.remoteCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteCluster'");
            }
            resourceInputs["pcExtId"] = args ? args.pcExtId : undefined;
            resourceInputs["remoteCluster"] = args ? args.remoteCluster : undefined;
            resourceInputs["configs"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["hostingClusterExtId"] = undefined /*out*/;
            resourceInputs["isRegisteredWithHostingCluster"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["networks"] = undefined /*out*/;
            resourceInputs["nodeExtIds"] = undefined /*out*/;
            resourceInputs["shouldEnableHighAvailability"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PcRegistrationV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PcRegistrationV2 resources.
 */
export interface PcRegistrationV2State {
    configs?: pulumi.Input<pulumi.Input<inputs.PcRegistrationV2Config>[]>;
    extId?: pulumi.Input<string>;
    hostingClusterExtId?: pulumi.Input<string>;
    isRegisteredWithHostingCluster?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.PcRegistrationV2Link>[]>;
    networks?: pulumi.Input<pulumi.Input<inputs.PcRegistrationV2Network>[]>;
    nodeExtIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * -(Required) The display name for the Role.
     */
    pcExtId?: pulumi.Input<string>;
    /**
     * -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
     * The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
     * * `prism.v4.management.DomainManagerRemoteClusterSpec`
     * * `prism.v4.management.AOSRemoteClusterSpec`
     * * `prism.v4.management.ClusterReference`
     */
    remoteCluster?: pulumi.Input<inputs.PcRegistrationV2RemoteCluster>;
    shouldEnableHighAvailability?: pulumi.Input<boolean>;
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PcRegistrationV2 resource.
 */
export interface PcRegistrationV2Args {
    /**
     * -(Required) The display name for the Role.
     */
    pcExtId: pulumi.Input<string>;
    /**
     * -(Required)  The registration request consists of the remote cluster details. Credentials must be of domain manager (Prism Central) role.
     * The remote cluster details are different based on the object type. The object type is used to determine the type of remote cluster. The object type can be one of the following:
     * * `prism.v4.management.DomainManagerRemoteClusterSpec`
     * * `prism.v4.management.AOSRemoteClusterSpec`
     * * `prism.v4.management.ClusterReference`
     */
    remoteCluster: pulumi.Input<inputs.PcRegistrationV2RemoteCluster>;
}
