// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Nutanix Image resource to Create a image.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const test = new nutanix.Image("test", {
 *     description: "Ubuntu",
 *     sourceUri: "http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso",
 * });
 * // Create image with data_source_reference
 * const createImageWithDataSourceReference = new nutanix.Image("createImageWithDataSourceReference", {
 *     dataSourceReferences: [{
 *         kind: "vm_disk",
 *         uuid: "<uuid of the vm disk>",
 *     }],
 *     description: "Sql Server",
 *     imageType: "DISK_IMAGE",
 * });
 * ```
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * The version of the API.
     */
    declare public /*out*/ readonly apiVersion: pulumi.Output<string>;
    /**
     * - (Optional) The supported CPU architecture for a disk image.
     */
    declare public readonly architecture: pulumi.Output<string>;
    /**
     * - (Optional) The reference to a availability_zone.
     */
    declare public readonly availabilityZoneReference: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) Categories for the image.
     */
    declare public readonly categories: pulumi.Output<outputs.ImageCategory[]>;
    /**
     * - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
     */
    declare public readonly checksum: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly clusterName: pulumi.Output<string>;
    declare public readonly clusterReferences: pulumi.Output<outputs.ImageClusterReference[]>;
    declare public /*out*/ readonly clusterUuid: pulumi.Output<string>;
    declare public /*out*/ readonly currentClusterReferenceLists: pulumi.Output<outputs.ImageCurrentClusterReferenceList[]>;
    /**
     * Reference to a data source.
     */
    declare public readonly dataSourceReferences: pulumi.Output<outputs.ImageDataSourceReference[]>;
    /**
     * - (Optional) A description for image.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * - (Optional) The type of image.
     */
    declare public readonly imageType: pulumi.Output<string>;
    /**
     * - The image kind metadata.
     */
    declare public /*out*/ readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Required) The name for the image.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * - (Optional) The reference to a user.
     */
    declare public readonly ownerReference: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) The reference to a project.
     */
    declare public readonly projectReference: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * - List of URIs where the raw image data can be accessed.
     */
    declare public /*out*/ readonly retrievalUriLists: pulumi.Output<string[]>;
    /**
     * - The size of the image in bytes.
     */
    declare public /*out*/ readonly sizeBytes: pulumi.Output<number>;
    /**
     * - (Optional) A local path to upload an image.
     */
    declare public readonly sourcePath: pulumi.Output<string>;
    /**
     * - (Optional) The source URI points at the location of the source image which is used to create/update image.
     */
    declare public readonly sourceUri: pulumi.Output<string>;
    /**
     * - The state of the image.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * - (Optional) The image version.
     */
    declare public readonly version: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["apiVersion"] = state?.apiVersion;
            resourceInputs["architecture"] = state?.architecture;
            resourceInputs["availabilityZoneReference"] = state?.availabilityZoneReference;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["checksum"] = state?.checksum;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["clusterReferences"] = state?.clusterReferences;
            resourceInputs["clusterUuid"] = state?.clusterUuid;
            resourceInputs["currentClusterReferenceLists"] = state?.currentClusterReferenceLists;
            resourceInputs["dataSourceReferences"] = state?.dataSourceReferences;
            resourceInputs["description"] = state?.description;
            resourceInputs["imageType"] = state?.imageType;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["ownerReference"] = state?.ownerReference;
            resourceInputs["projectReference"] = state?.projectReference;
            resourceInputs["retrievalUriLists"] = state?.retrievalUriLists;
            resourceInputs["sizeBytes"] = state?.sizeBytes;
            resourceInputs["sourcePath"] = state?.sourcePath;
            resourceInputs["sourceUri"] = state?.sourceUri;
            resourceInputs["state"] = state?.state;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            resourceInputs["architecture"] = args?.architecture;
            resourceInputs["availabilityZoneReference"] = args?.availabilityZoneReference;
            resourceInputs["categories"] = args?.categories;
            resourceInputs["checksum"] = args?.checksum;
            resourceInputs["clusterReferences"] = args?.clusterReferences;
            resourceInputs["dataSourceReferences"] = args?.dataSourceReferences;
            resourceInputs["description"] = args?.description;
            resourceInputs["imageType"] = args?.imageType;
            resourceInputs["name"] = args?.name;
            resourceInputs["ownerReference"] = args?.ownerReference;
            resourceInputs["projectReference"] = args?.projectReference;
            resourceInputs["sourcePath"] = args?.sourcePath;
            resourceInputs["sourceUri"] = args?.sourceUri;
            resourceInputs["version"] = args?.version;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["clusterUuid"] = undefined /*out*/;
            resourceInputs["currentClusterReferenceLists"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["retrievalUriLists"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * The version of the API.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * - (Optional) The supported CPU architecture for a disk image.
     */
    architecture?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a availability_zone.
     */
    availabilityZoneReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Categories for the image.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.ImageCategory>[]>;
    /**
     * - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
     */
    checksum?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clusterName?: pulumi.Input<string>;
    clusterReferences?: pulumi.Input<pulumi.Input<inputs.ImageClusterReference>[]>;
    clusterUuid?: pulumi.Input<string>;
    currentClusterReferenceLists?: pulumi.Input<pulumi.Input<inputs.ImageCurrentClusterReferenceList>[]>;
    /**
     * Reference to a data source.
     */
    dataSourceReferences?: pulumi.Input<pulumi.Input<inputs.ImageDataSourceReference>[]>;
    /**
     * - (Optional) A description for image.
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) The type of image.
     */
    imageType?: pulumi.Input<string>;
    /**
     * - The image kind metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - List of URIs where the raw image data can be accessed.
     */
    retrievalUriLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - The size of the image in bytes.
     */
    sizeBytes?: pulumi.Input<number>;
    /**
     * - (Optional) A local path to upload an image.
     */
    sourcePath?: pulumi.Input<string>;
    /**
     * - (Optional) The source URI points at the location of the source image which is used to create/update image.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * - The state of the image.
     */
    state?: pulumi.Input<string>;
    /**
     * - (Optional) The image version.
     */
    version?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * - (Optional) The supported CPU architecture for a disk image.
     */
    architecture?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a availability_zone.
     */
    availabilityZoneReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Categories for the image.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.ImageCategory>[]>;
    /**
     * - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
     */
    checksum?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clusterReferences?: pulumi.Input<pulumi.Input<inputs.ImageClusterReference>[]>;
    /**
     * Reference to a data source.
     */
    dataSourceReferences?: pulumi.Input<pulumi.Input<inputs.ImageDataSourceReference>[]>;
    /**
     * - (Optional) A description for image.
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) The type of image.
     */
    imageType?: pulumi.Input<string>;
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) A local path to upload an image.
     */
    sourcePath?: pulumi.Input<string>;
    /**
     * - (Optional) The source URI points at the location of the source image which is used to create/update image.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * - (Optional) The image version.
     */
    version?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
