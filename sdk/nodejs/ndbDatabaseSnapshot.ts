// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to perform the snapshot for database instance based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbDatabaseSnapshot("name", {
 *     removeScheduleInDays: 1,
 *     timeMachineName: "{{ tms_name }}",
 * });
 * ```
 */
export class NdbDatabaseSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing NdbDatabaseSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbDatabaseSnapshotState, opts?: pulumi.CustomResourceOptions): NdbDatabaseSnapshot {
        return new NdbDatabaseSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot';

    /**
     * Returns true if the given object is an instance of NdbDatabaseSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbDatabaseSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbDatabaseSnapshot.__pulumiType;
    }

    /**
     * App info version
     */
    public /*out*/ readonly appInfoVersion!: pulumi.Output<string>;
    /**
     * Applicable types
     */
    public /*out*/ readonly applicableTypes!: pulumi.Output<string[]>;
    /**
     * database node id
     */
    public /*out*/ readonly databaseNodeId!: pulumi.Output<string>;
    /**
     * database snapshot
     */
    public /*out*/ readonly databaseSnapshot!: pulumi.Output<boolean>;
    /**
     * created date
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * modified date
     */
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    /**
     * dbserver id
     */
    public /*out*/ readonly dbserverId!: pulumi.Output<string>;
    /**
     * dbserver ip
     */
    public /*out*/ readonly dbserverIp!: pulumi.Output<string>;
    /**
     * dbserver name
     */
    public /*out*/ readonly dbserverName!: pulumi.Output<string>;
    /**
     * dbserver storage metadata version
     */
    public /*out*/ readonly dbserverStorageMetadataVersion!: pulumi.Output<number>;
    /**
     * description of snapshot
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * Default is set to Asia/Calcutta
     */
    public readonly expiryDateTimezone!: pulumi.Output<string | undefined>;
    /**
     * from timestamp
     */
    public /*out*/ readonly fromTimestamp!: pulumi.Output<string>;
    /**
     * LCM config
     */
    public /*out*/ readonly lcmConfigs!: pulumi.Output<outputs.NdbDatabaseSnapshotLcmConfig[]>;
    /**
     * Snapshot name. Default value is era_manual_snapshot.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * nx cluster id
     */
    public /*out*/ readonly nxClusterId!: pulumi.Output<string>;
    /**
     * parent snapshot
     */
    public /*out*/ readonly parentSnapshot!: pulumi.Output<boolean>;
    /**
     * parent snapshot id
     */
    public /*out*/ readonly parentSnapshotId!: pulumi.Output<string>;
    /**
     * processed
     */
    public /*out*/ readonly processed!: pulumi.Output<boolean>;
    /**
     * properties
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbDatabaseSnapshotProperty[]>;
    /**
     * protection domain
     */
    public /*out*/ readonly protectionDomainId!: pulumi.Output<string>;
    /**
     * Removal schedule after which the snapshot should be removed.
     */
    public readonly removeScheduleInDays!: pulumi.Output<number | undefined>;
    /**
     * snapshots to be replicated to clusters.
     */
    public readonly replicateToClusters!: pulumi.Output<string[] | undefined>;
    /**
     * replicated snapshots
     */
    public /*out*/ readonly replicatedSnapshots!: pulumi.Output<string[]>;
    public /*out*/ readonly santized!: pulumi.Output<boolean>;
    public /*out*/ readonly santizedFromSnapshotId!: pulumi.Output<string>;
    public /*out*/ readonly santizedSnapshots!: pulumi.Output<string>;
    /**
     * snapshot family
     */
    public /*out*/ readonly snapshotFamily!: pulumi.Output<string>;
    /**
     * snapshot size
     */
    public /*out*/ readonly snapshotSize!: pulumi.Output<number>;
    /**
     * snapshot timeStamp
     */
    public /*out*/ readonly snapshotTimestamp!: pulumi.Output<string>;
    /**
     * snapshot timestamp date
     */
    public /*out*/ readonly snapshotTimestampDate!: pulumi.Output<number>;
    /**
     * snapshot uuid
     */
    public /*out*/ readonly snapshotUuid!: pulumi.Output<string>;
    /**
     * software database snapshot
     */
    public /*out*/ readonly softwareDatabaseSnapshot!: pulumi.Output<boolean>;
    /**
     * software snapshot
     */
    public /*out*/ readonly softwareSnapshot!: pulumi.Output<string>;
    /**
     * software snapshot id
     */
    public /*out*/ readonly softwareSnapshotId!: pulumi.Output<string>;
    /**
     * status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * tags
     */
    public readonly tags!: pulumi.Output<outputs.NdbDatabaseSnapshotTag[]>;
    /**
     * Time Machine Id
     */
    public readonly timeMachineId!: pulumi.Output<string | undefined>;
    /**
     * Time Machine Name
     */
    public readonly timeMachineName!: pulumi.Output<string | undefined>;
    /**
     * timezone
     */
    public /*out*/ readonly timezone!: pulumi.Output<string>;
    /**
     * to timestamp
     */
    public /*out*/ readonly toTimestamp!: pulumi.Output<string>;
    /**
     * type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a NdbDatabaseSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NdbDatabaseSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbDatabaseSnapshotArgs | NdbDatabaseSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbDatabaseSnapshotState | undefined;
            resourceInputs["appInfoVersion"] = state ? state.appInfoVersion : undefined;
            resourceInputs["applicableTypes"] = state ? state.applicableTypes : undefined;
            resourceInputs["databaseNodeId"] = state ? state.databaseNodeId : undefined;
            resourceInputs["databaseSnapshot"] = state ? state.databaseSnapshot : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["dbserverId"] = state ? state.dbserverId : undefined;
            resourceInputs["dbserverIp"] = state ? state.dbserverIp : undefined;
            resourceInputs["dbserverName"] = state ? state.dbserverName : undefined;
            resourceInputs["dbserverStorageMetadataVersion"] = state ? state.dbserverStorageMetadataVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiryDateTimezone"] = state ? state.expiryDateTimezone : undefined;
            resourceInputs["fromTimestamp"] = state ? state.fromTimestamp : undefined;
            resourceInputs["lcmConfigs"] = state ? state.lcmConfigs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nxClusterId"] = state ? state.nxClusterId : undefined;
            resourceInputs["parentSnapshot"] = state ? state.parentSnapshot : undefined;
            resourceInputs["parentSnapshotId"] = state ? state.parentSnapshotId : undefined;
            resourceInputs["processed"] = state ? state.processed : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["protectionDomainId"] = state ? state.protectionDomainId : undefined;
            resourceInputs["removeScheduleInDays"] = state ? state.removeScheduleInDays : undefined;
            resourceInputs["replicateToClusters"] = state ? state.replicateToClusters : undefined;
            resourceInputs["replicatedSnapshots"] = state ? state.replicatedSnapshots : undefined;
            resourceInputs["santized"] = state ? state.santized : undefined;
            resourceInputs["santizedFromSnapshotId"] = state ? state.santizedFromSnapshotId : undefined;
            resourceInputs["santizedSnapshots"] = state ? state.santizedSnapshots : undefined;
            resourceInputs["snapshotFamily"] = state ? state.snapshotFamily : undefined;
            resourceInputs["snapshotSize"] = state ? state.snapshotSize : undefined;
            resourceInputs["snapshotTimestamp"] = state ? state.snapshotTimestamp : undefined;
            resourceInputs["snapshotTimestampDate"] = state ? state.snapshotTimestampDate : undefined;
            resourceInputs["snapshotUuid"] = state ? state.snapshotUuid : undefined;
            resourceInputs["softwareDatabaseSnapshot"] = state ? state.softwareDatabaseSnapshot : undefined;
            resourceInputs["softwareSnapshot"] = state ? state.softwareSnapshot : undefined;
            resourceInputs["softwareSnapshotId"] = state ? state.softwareSnapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeMachineId"] = state ? state.timeMachineId : undefined;
            resourceInputs["timeMachineName"] = state ? state.timeMachineName : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["toTimestamp"] = state ? state.toTimestamp : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NdbDatabaseSnapshotArgs | undefined;
            resourceInputs["expiryDateTimezone"] = args ? args.expiryDateTimezone : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["removeScheduleInDays"] = args ? args.removeScheduleInDays : undefined;
            resourceInputs["replicateToClusters"] = args ? args.replicateToClusters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeMachineId"] = args ? args.timeMachineId : undefined;
            resourceInputs["timeMachineName"] = args ? args.timeMachineName : undefined;
            resourceInputs["appInfoVersion"] = undefined /*out*/;
            resourceInputs["applicableTypes"] = undefined /*out*/;
            resourceInputs["databaseNodeId"] = undefined /*out*/;
            resourceInputs["databaseSnapshot"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverId"] = undefined /*out*/;
            resourceInputs["dbserverIp"] = undefined /*out*/;
            resourceInputs["dbserverName"] = undefined /*out*/;
            resourceInputs["dbserverStorageMetadataVersion"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["fromTimestamp"] = undefined /*out*/;
            resourceInputs["lcmConfigs"] = undefined /*out*/;
            resourceInputs["nxClusterId"] = undefined /*out*/;
            resourceInputs["parentSnapshot"] = undefined /*out*/;
            resourceInputs["parentSnapshotId"] = undefined /*out*/;
            resourceInputs["processed"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["protectionDomainId"] = undefined /*out*/;
            resourceInputs["replicatedSnapshots"] = undefined /*out*/;
            resourceInputs["santized"] = undefined /*out*/;
            resourceInputs["santizedFromSnapshotId"] = undefined /*out*/;
            resourceInputs["santizedSnapshots"] = undefined /*out*/;
            resourceInputs["snapshotFamily"] = undefined /*out*/;
            resourceInputs["snapshotSize"] = undefined /*out*/;
            resourceInputs["snapshotTimestamp"] = undefined /*out*/;
            resourceInputs["snapshotTimestampDate"] = undefined /*out*/;
            resourceInputs["snapshotUuid"] = undefined /*out*/;
            resourceInputs["softwareDatabaseSnapshot"] = undefined /*out*/;
            resourceInputs["softwareSnapshot"] = undefined /*out*/;
            resourceInputs["softwareSnapshotId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timezone"] = undefined /*out*/;
            resourceInputs["toTimestamp"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbDatabaseSnapshot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbDatabaseSnapshot resources.
 */
export interface NdbDatabaseSnapshotState {
    /**
     * App info version
     */
    appInfoVersion?: pulumi.Input<string>;
    /**
     * Applicable types
     */
    applicableTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * database node id
     */
    databaseNodeId?: pulumi.Input<string>;
    /**
     * database snapshot
     */
    databaseSnapshot?: pulumi.Input<boolean>;
    /**
     * created date
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * modified date
     */
    dateModified?: pulumi.Input<string>;
    /**
     * dbserver id
     */
    dbserverId?: pulumi.Input<string>;
    /**
     * dbserver ip
     */
    dbserverIp?: pulumi.Input<string>;
    /**
     * dbserver name
     */
    dbserverName?: pulumi.Input<string>;
    /**
     * dbserver storage metadata version
     */
    dbserverStorageMetadataVersion?: pulumi.Input<number>;
    /**
     * description of snapshot
     */
    description?: pulumi.Input<string>;
    /**
     * Default is set to Asia/Calcutta
     */
    expiryDateTimezone?: pulumi.Input<string>;
    /**
     * from timestamp
     */
    fromTimestamp?: pulumi.Input<string>;
    /**
     * LCM config
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfig>[]>;
    /**
     * Snapshot name. Default value is era_manual_snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * nx cluster id
     */
    nxClusterId?: pulumi.Input<string>;
    /**
     * parent snapshot
     */
    parentSnapshot?: pulumi.Input<boolean>;
    /**
     * parent snapshot id
     */
    parentSnapshotId?: pulumi.Input<string>;
    /**
     * processed
     */
    processed?: pulumi.Input<boolean>;
    /**
     * properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotProperty>[]>;
    /**
     * protection domain
     */
    protectionDomainId?: pulumi.Input<string>;
    /**
     * Removal schedule after which the snapshot should be removed.
     */
    removeScheduleInDays?: pulumi.Input<number>;
    /**
     * snapshots to be replicated to clusters.
     */
    replicateToClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * replicated snapshots
     */
    replicatedSnapshots?: pulumi.Input<pulumi.Input<string>[]>;
    santized?: pulumi.Input<boolean>;
    santizedFromSnapshotId?: pulumi.Input<string>;
    santizedSnapshots?: pulumi.Input<string>;
    /**
     * snapshot family
     */
    snapshotFamily?: pulumi.Input<string>;
    /**
     * snapshot size
     */
    snapshotSize?: pulumi.Input<number>;
    /**
     * snapshot timeStamp
     */
    snapshotTimestamp?: pulumi.Input<string>;
    /**
     * snapshot timestamp date
     */
    snapshotTimestampDate?: pulumi.Input<number>;
    /**
     * snapshot uuid
     */
    snapshotUuid?: pulumi.Input<string>;
    /**
     * software database snapshot
     */
    softwareDatabaseSnapshot?: pulumi.Input<boolean>;
    /**
     * software snapshot
     */
    softwareSnapshot?: pulumi.Input<string>;
    /**
     * software snapshot id
     */
    softwareSnapshotId?: pulumi.Input<string>;
    /**
     * status
     */
    status?: pulumi.Input<string>;
    /**
     * tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotTag>[]>;
    /**
     * Time Machine Id
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * Time Machine Name
     */
    timeMachineName?: pulumi.Input<string>;
    /**
     * timezone
     */
    timezone?: pulumi.Input<string>;
    /**
     * to timestamp
     */
    toTimestamp?: pulumi.Input<string>;
    /**
     * type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbDatabaseSnapshot resource.
 */
export interface NdbDatabaseSnapshotArgs {
    /**
     * Default is set to Asia/Calcutta
     */
    expiryDateTimezone?: pulumi.Input<string>;
    /**
     * Snapshot name. Default value is era_manual_snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * Removal schedule after which the snapshot should be removed.
     */
    removeScheduleInDays?: pulumi.Input<number>;
    /**
     * snapshots to be replicated to clusters.
     */
    replicateToClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotTag>[]>;
    /**
     * Time Machine Id
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * Time Machine Name
     */
    timeMachineName?: pulumi.Input<string>;
}
