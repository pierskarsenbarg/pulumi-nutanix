// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FoundationCentralImageCluster extends pulumi.CustomResource {
    /**
     * Get an existing FoundationCentralImageCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FoundationCentralImageClusterState, opts?: pulumi.CustomResourceOptions): FoundationCentralImageCluster {
        return new FoundationCentralImageCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/foundationCentralImageCluster:FoundationCentralImageCluster';

    /**
     * Returns true if the given object is an instance of FoundationCentralImageCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FoundationCentralImageCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FoundationCentralImageCluster.__pulumiType;
    }

    /**
     * Sha256sum of AOS package.
     */
    public readonly aosPackageSha256sum!: pulumi.Output<string>;
    /**
     * URL to download AOS package. Required only if imaging is needed.
     */
    public readonly aosPackageUrl!: pulumi.Output<string>;
    public /*out*/ readonly archived!: pulumi.Output<boolean>;
    /**
     * External management ip of the cluster.
     */
    public readonly clusterExternalIp!: pulumi.Output<string>;
    /**
     * Name of the cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Number of nodes in the cluster.
     */
    public readonly clusterSize!: pulumi.Output<number>;
    public readonly clusterStatus!: pulumi.Output<outputs.FoundationCentralImageClusterClusterStatus>;
    /**
     * Common network settings across the nodes in the cluster.
     */
    public readonly commonNetworkSettings!: pulumi.Output<outputs.FoundationCentralImageClusterCommonNetworkSettings>;
    public /*out*/ readonly createdTimestamp!: pulumi.Output<string>;
    public /*out*/ readonly currentTime!: pulumi.Output<string>;
    public /*out*/ readonly destroyed!: pulumi.Output<boolean>;
    public /*out*/ readonly foundationInitConfigs!: pulumi.Output<outputs.FoundationCentralImageClusterFoundationInitConfig[]>;
    public /*out*/ readonly foundationInitNodeUuid!: pulumi.Output<string>;
    /**
     * Details of the hypervisor iso.
     */
    public readonly hypervisorIsoDetails!: pulumi.Output<outputs.FoundationCentralImageClusterHypervisorIsoDetails>;
    public readonly imageClusterUuid!: pulumi.Output<string>;
    /**
     * Unique id of the cluster.
     */
    public /*out*/ readonly imagedClusterUuid!: pulumi.Output<string>;
    public /*out*/ readonly imagedNodeUuidLists!: pulumi.Output<string[]>;
    public readonly nodeLists!: pulumi.Output<outputs.FoundationCentralImageClusterNodeList[]>;
    /**
     * Redundancy factor of the cluster.
     */
    public readonly redundancyFactor!: pulumi.Output<number>;
    public readonly skipClusterCreation!: pulumi.Output<boolean | undefined>;
    /**
     * Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
     */
    public readonly storageNodeCount!: pulumi.Output<number>;
    /**
     * Timezone to be set on the cluster.
     */
    public readonly timezone!: pulumi.Output<string>;
    public /*out*/ readonly workflowType!: pulumi.Output<string>;

    /**
     * Create a FoundationCentralImageCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FoundationCentralImageClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FoundationCentralImageClusterArgs | FoundationCentralImageClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FoundationCentralImageClusterState | undefined;
            resourceInputs["aosPackageSha256sum"] = state ? state.aosPackageSha256sum : undefined;
            resourceInputs["aosPackageUrl"] = state ? state.aosPackageUrl : undefined;
            resourceInputs["archived"] = state ? state.archived : undefined;
            resourceInputs["clusterExternalIp"] = state ? state.clusterExternalIp : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterSize"] = state ? state.clusterSize : undefined;
            resourceInputs["clusterStatus"] = state ? state.clusterStatus : undefined;
            resourceInputs["commonNetworkSettings"] = state ? state.commonNetworkSettings : undefined;
            resourceInputs["createdTimestamp"] = state ? state.createdTimestamp : undefined;
            resourceInputs["currentTime"] = state ? state.currentTime : undefined;
            resourceInputs["destroyed"] = state ? state.destroyed : undefined;
            resourceInputs["foundationInitConfigs"] = state ? state.foundationInitConfigs : undefined;
            resourceInputs["foundationInitNodeUuid"] = state ? state.foundationInitNodeUuid : undefined;
            resourceInputs["hypervisorIsoDetails"] = state ? state.hypervisorIsoDetails : undefined;
            resourceInputs["imageClusterUuid"] = state ? state.imageClusterUuid : undefined;
            resourceInputs["imagedClusterUuid"] = state ? state.imagedClusterUuid : undefined;
            resourceInputs["imagedNodeUuidLists"] = state ? state.imagedNodeUuidLists : undefined;
            resourceInputs["nodeLists"] = state ? state.nodeLists : undefined;
            resourceInputs["redundancyFactor"] = state ? state.redundancyFactor : undefined;
            resourceInputs["skipClusterCreation"] = state ? state.skipClusterCreation : undefined;
            resourceInputs["storageNodeCount"] = state ? state.storageNodeCount : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["workflowType"] = state ? state.workflowType : undefined;
        } else {
            const args = argsOrState as FoundationCentralImageClusterArgs | undefined;
            resourceInputs["aosPackageSha256sum"] = args ? args.aosPackageSha256sum : undefined;
            resourceInputs["aosPackageUrl"] = args ? args.aosPackageUrl : undefined;
            resourceInputs["clusterExternalIp"] = args ? args.clusterExternalIp : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterSize"] = args ? args.clusterSize : undefined;
            resourceInputs["clusterStatus"] = args ? args.clusterStatus : undefined;
            resourceInputs["commonNetworkSettings"] = args ? args.commonNetworkSettings : undefined;
            resourceInputs["hypervisorIsoDetails"] = args ? args.hypervisorIsoDetails : undefined;
            resourceInputs["imageClusterUuid"] = args ? args.imageClusterUuid : undefined;
            resourceInputs["nodeLists"] = args ? args.nodeLists : undefined;
            resourceInputs["redundancyFactor"] = args ? args.redundancyFactor : undefined;
            resourceInputs["skipClusterCreation"] = args ? args.skipClusterCreation : undefined;
            resourceInputs["storageNodeCount"] = args ? args.storageNodeCount : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["archived"] = undefined /*out*/;
            resourceInputs["createdTimestamp"] = undefined /*out*/;
            resourceInputs["currentTime"] = undefined /*out*/;
            resourceInputs["destroyed"] = undefined /*out*/;
            resourceInputs["foundationInitConfigs"] = undefined /*out*/;
            resourceInputs["foundationInitNodeUuid"] = undefined /*out*/;
            resourceInputs["imagedClusterUuid"] = undefined /*out*/;
            resourceInputs["imagedNodeUuidLists"] = undefined /*out*/;
            resourceInputs["workflowType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FoundationCentralImageCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FoundationCentralImageCluster resources.
 */
export interface FoundationCentralImageClusterState {
    /**
     * Sha256sum of AOS package.
     */
    aosPackageSha256sum?: pulumi.Input<string>;
    /**
     * URL to download AOS package. Required only if imaging is needed.
     */
    aosPackageUrl?: pulumi.Input<string>;
    archived?: pulumi.Input<boolean>;
    /**
     * External management ip of the cluster.
     */
    clusterExternalIp?: pulumi.Input<string>;
    /**
     * Name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Number of nodes in the cluster.
     */
    clusterSize?: pulumi.Input<number>;
    clusterStatus?: pulumi.Input<inputs.FoundationCentralImageClusterClusterStatus>;
    /**
     * Common network settings across the nodes in the cluster.
     */
    commonNetworkSettings?: pulumi.Input<inputs.FoundationCentralImageClusterCommonNetworkSettings>;
    createdTimestamp?: pulumi.Input<string>;
    currentTime?: pulumi.Input<string>;
    destroyed?: pulumi.Input<boolean>;
    foundationInitConfigs?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfig>[]>;
    foundationInitNodeUuid?: pulumi.Input<string>;
    /**
     * Details of the hypervisor iso.
     */
    hypervisorIsoDetails?: pulumi.Input<inputs.FoundationCentralImageClusterHypervisorIsoDetails>;
    imageClusterUuid?: pulumi.Input<string>;
    /**
     * Unique id of the cluster.
     */
    imagedClusterUuid?: pulumi.Input<string>;
    imagedNodeUuidLists?: pulumi.Input<pulumi.Input<string>[]>;
    nodeLists?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterNodeList>[]>;
    /**
     * Redundancy factor of the cluster.
     */
    redundancyFactor?: pulumi.Input<number>;
    skipClusterCreation?: pulumi.Input<boolean>;
    /**
     * Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
     */
    storageNodeCount?: pulumi.Input<number>;
    /**
     * Timezone to be set on the cluster.
     */
    timezone?: pulumi.Input<string>;
    workflowType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FoundationCentralImageCluster resource.
 */
export interface FoundationCentralImageClusterArgs {
    /**
     * Sha256sum of AOS package.
     */
    aosPackageSha256sum?: pulumi.Input<string>;
    /**
     * URL to download AOS package. Required only if imaging is needed.
     */
    aosPackageUrl?: pulumi.Input<string>;
    /**
     * External management ip of the cluster.
     */
    clusterExternalIp?: pulumi.Input<string>;
    /**
     * Name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Number of nodes in the cluster.
     */
    clusterSize?: pulumi.Input<number>;
    clusterStatus?: pulumi.Input<inputs.FoundationCentralImageClusterClusterStatus>;
    /**
     * Common network settings across the nodes in the cluster.
     */
    commonNetworkSettings?: pulumi.Input<inputs.FoundationCentralImageClusterCommonNetworkSettings>;
    /**
     * Details of the hypervisor iso.
     */
    hypervisorIsoDetails?: pulumi.Input<inputs.FoundationCentralImageClusterHypervisorIsoDetails>;
    imageClusterUuid?: pulumi.Input<string>;
    nodeLists?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterNodeList>[]>;
    /**
     * Redundancy factor of the cluster.
     */
    redundancyFactor?: pulumi.Input<number>;
    skipClusterCreation?: pulumi.Input<boolean>;
    /**
     * Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
     */
    storageNodeCount?: pulumi.Input<number>;
    /**
     * Timezone to be set on the cluster.
     */
    timezone?: pulumi.Input<string>;
}
