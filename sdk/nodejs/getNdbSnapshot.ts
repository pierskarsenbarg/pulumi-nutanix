// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Describes the snapshot present in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const snaps = nutanix.getNdbSnapshot({
 *     filters: [{
 *         loadReplicatedChildSnapshots: "true",
 *     }],
 *     snapshotId: "{{ snapshot_id }}",
 * });
 * ```
 */
export function getNdbSnapshot(args: GetNdbSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetNdbSnapshotResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getNdbSnapshot:getNdbSnapshot", {
        "filters": args.filters,
        "snapshotId": args.snapshotId,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getNdbSnapshot.
 */
export interface GetNdbSnapshotArgs {
    /**
     * Filters will fetch the snapshot details as per input
     */
    filters?: inputs.GetNdbSnapshotFilter[];
    /**
     * Snapshot ID to be given
     */
    snapshotId: string;
    /**
     * tags
     */
    tags?: inputs.GetNdbSnapshotTag[];
}

/**
 * A collection of values returned by getNdbSnapshot.
 */
export interface GetNdbSnapshotResult {
    /**
     * App info version
     */
    readonly appInfoVersion: string;
    /**
     * Applicable types
     */
    readonly applicableTypes: string[];
    /**
     * database node id
     */
    readonly databaseNodeId: string;
    /**
     * database snapshot
     */
    readonly databaseSnapshot: boolean;
    /**
     * created date
     */
    readonly dateCreated: string;
    /**
     * modified date
     */
    readonly dateModified: string;
    /**
     * dbserver id
     */
    readonly dbserverId: string;
    /**
     * dbserver ip
     */
    readonly dbserverIp: string;
    /**
     * dbserver name
     */
    readonly dbserverName: string;
    /**
     * dbserver storage metadata version
     */
    readonly dbserverStorageMetadataVersion: number;
    /**
     * description of snapshot
     */
    readonly description: string;
    readonly filters?: outputs.GetNdbSnapshotFilter[];
    /**
     * from timestamp
     */
    readonly fromTimestamp: string;
    /**
     * name of snapshot
     */
    readonly id: string;
    /**
     * LCM config
     */
    readonly lcmConfigs: outputs.GetNdbSnapshotLcmConfig[];
    readonly name: string;
    /**
     * nx cluster id
     */
    readonly nxClusterId: string;
    /**
     * parent snapshot
     */
    readonly parentSnapshot: boolean;
    /**
     * parent snapshot id
     */
    readonly parentSnapshotId: string;
    /**
     * processed
     */
    readonly processed: boolean;
    /**
     * properties
     */
    readonly properties: outputs.GetNdbSnapshotProperty[];
    /**
     * protection domain
     */
    readonly protectionDomainId: string;
    /**
     * replicated snapshots
     */
    readonly replicatedSnapshots: string[];
    readonly santized: boolean;
    readonly santizedFromSnapshotId: string;
    readonly santizedSnapshots: string;
    /**
     * snapshot family
     */
    readonly snapshotFamily: string;
    readonly snapshotId: string;
    /**
     * snapshot size
     */
    readonly snapshotSize: number;
    /**
     * snapshot timeStamp
     */
    readonly snapshotTimestamp: string;
    /**
     * snapshot timestamp date
     */
    readonly snapshotTimestampDate: number;
    /**
     * snapshot uuid
     */
    readonly snapshotUuid: string;
    /**
     * software database snapshot
     */
    readonly softwareDatabaseSnapshot: boolean;
    /**
     * software snapshot
     */
    readonly softwareSnapshot: string;
    /**
     * software snapshot id
     */
    readonly softwareSnapshotId: string;
    /**
     * status
     */
    readonly status: string;
    /**
     * tags
     */
    readonly tags: outputs.GetNdbSnapshotTag[];
    readonly timeMachineId: string;
    /**
     * timezone
     */
    readonly timezone: string;
    /**
     * to timestamp
     */
    readonly toTimestamp: string;
    /**
     * type
     */
    readonly type: string;
}
/**
 * Describes the snapshot present in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const snaps = nutanix.getNdbSnapshot({
 *     filters: [{
 *         loadReplicatedChildSnapshots: "true",
 *     }],
 *     snapshotId: "{{ snapshot_id }}",
 * });
 * ```
 */
export function getNdbSnapshotOutput(args: GetNdbSnapshotOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNdbSnapshotResult> {
    return pulumi.output(args).apply((a: any) => getNdbSnapshot(a, opts))
}

/**
 * A collection of arguments for invoking getNdbSnapshot.
 */
export interface GetNdbSnapshotOutputArgs {
    /**
     * Filters will fetch the snapshot details as per input
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetNdbSnapshotFilterArgs>[]>;
    /**
     * Snapshot ID to be given
     */
    snapshotId: pulumi.Input<string>;
    /**
     * tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GetNdbSnapshotTagArgs>[]>;
}
