// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix datasource Get Route for the specified {extId}.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const route_by_id = nutanix.getRouteV2({
 *     extId: "7f66e20f-67f4-473f-96bb-c4fcfd487f16",
 *     routeTableExtId: "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
 * });
 * ```
 */
export function getRouteV2(args: GetRouteV2Args, opts?: pulumi.InvokeOptions): Promise<GetRouteV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getRouteV2:getRouteV2", {
        "extId": args.extId,
        "routeTableExtId": args.routeTableExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRouteV2.
 */
export interface GetRouteV2Args {
    /**
     * Route UUID.
     */
    extId: string;
    /**
     * Route table UUID
     */
    routeTableExtId: string;
}

/**
 * A collection of values returned by getRouteV2.
 */
export interface GetRouteV2Result {
    /**
     * BGP session description.
     */
    readonly description: string;
    /**
     * Destination IP Subnet Configuration.
     */
    readonly destinations: outputs.GetRouteV2Destination[];
    /**
     * Route UUID
     */
    readonly extId: string;
    /**
     * External routing domain associated with this route table.
     */
    readonly externalRoutingDomainReference: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether the route is active in the forwarding plane.
     */
    readonly isActive: boolean;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetRouteV2Link[];
    /**
     * Metadata associated with this resource.
     */
    readonly metadatas: outputs.GetRouteV2Metadata[];
    /**
     * Route name.
     */
    readonly name: string;
    /**
     * Route nexthop.
     */
    readonly nextHops: outputs.GetRouteV2NextHop[];
    /**
     * Route priority. A higher value implies greater preference is assigned to the route.
     */
    readonly priority: number;
    readonly routeTableExtId: string;
    /**
     * Route table reference.
     */
    readonly routeTableReference: string;
    /**
     * Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
     */
    readonly routeType: string;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    readonly tenantId: string;
    /**
     * VPC reference.
     */
    readonly vpcReference: string;
}
/**
 * Provides Nutanix datasource Get Route for the specified {extId}.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const route_by_id = nutanix.getRouteV2({
 *     extId: "7f66e20f-67f4-473f-96bb-c4fcfd487f16",
 *     routeTableExtId: "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
 * });
 * ```
 */
export function getRouteV2Output(args: GetRouteV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRouteV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getRouteV2:getRouteV2", {
        "extId": args.extId,
        "routeTableExtId": args.routeTableExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRouteV2.
 */
export interface GetRouteV2OutputArgs {
    /**
     * Route UUID.
     */
    extId: pulumi.Input<string>;
    /**
     * Route table UUID
     */
    routeTableExtId: pulumi.Input<string>;
}
