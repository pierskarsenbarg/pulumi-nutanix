// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * List all snapshots present in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const snaps = nutanix.getNdbSnapshots({
 *     filters: [{
 *         timeMachineId: "{{ time_machine_id }}",
 *     }],
 * });
 * ```
 *
 * ## Attribute Reference
 *
 * * `snapshots`: List of snapshots
 *
 * ### snapshots
 *
 * * `id`: name of snapshot
 * * `description`: description of snapshot
 * * `properties`: properties
 * * `ownerId`: owner id
 * * `dateCreated`: created date
 * * `dateModified`: modified date
 * * `properties`: properties
 * * `tags`: tags
 * * `snapshotUuid`: snapshot uuid
 * * `nxClusterId`: nx cluster id
 * * `protectionDomainId`: protection domain
 * * `parentSnapshotId`: parent snapshot id
 * * `databaseNodeId`: database node id
 * * `appInfoVersion`: App info version
 * * `status`: status
 * * `type`: type
 * * `applicableTypes`: Applicable types
 * * `snapshotTimestamp`: snapshot timeStamp
 * * `metadata`: metadata of snapshot
 * * `softwareSnapshotId`: software snapshot id
 * * `softwareDatabaseSnapshot`: software database snapshot
 * * `dbserverStorageMetadataVersion`: dbserver storage metadata version
 * * `santisedFromSnapshotId`: sanitized  snapshot id
 * * `timezone`: timezone
 * * `processed`: processed
 * * `databaseSnapshot`: database snapshot
 * * `fromTimestamp`: from timestamp
 * * `toTimestamp`: to timestamp
 * * `dbserverId`: dbserver id
 * * `dbserverName`: dbserver name
 * * `dbserverIp`:dbserver ip
 * * `replicatedSnapshots`: replicated snapshots
 * * `softwareSnapshot`: software snapshot
 * * `santisedSnapshots`:santised snapshots
 * * `snapshotFamily`: snapshot family
 * * `snapshotTimestampDate`: snapshot timestamp date
 * * `lcmConfig`: LCM config
 * * `parentSnapshot`: parent snapshot
 * * `snapshotSize`: snapshot size
 *
 * See detailed information in [NDB Snapshots](https://www.nutanix.dev/api_references/ndb/#/d0b89ff892448-get-list-of-all-snapshots).
 */
export function getNdbSnapshots(args?: GetNdbSnapshotsArgs, opts?: pulumi.InvokeOptions): Promise<GetNdbSnapshotsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getNdbSnapshots:getNdbSnapshots", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getNdbSnapshots.
 */
export interface GetNdbSnapshotsArgs {
    /**
     * filters help to fetch the snapshots based on input
     */
    filters?: inputs.GetNdbSnapshotsFilter[];
}

/**
 * A collection of values returned by getNdbSnapshots.
 */
export interface GetNdbSnapshotsResult {
    readonly filters?: outputs.GetNdbSnapshotsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly snapshots: outputs.GetNdbSnapshotsSnapshot[];
}
/**
 * List all snapshots present in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const snaps = nutanix.getNdbSnapshots({
 *     filters: [{
 *         timeMachineId: "{{ time_machine_id }}",
 *     }],
 * });
 * ```
 *
 * ## Attribute Reference
 *
 * * `snapshots`: List of snapshots
 *
 * ### snapshots
 *
 * * `id`: name of snapshot
 * * `description`: description of snapshot
 * * `properties`: properties
 * * `ownerId`: owner id
 * * `dateCreated`: created date
 * * `dateModified`: modified date
 * * `properties`: properties
 * * `tags`: tags
 * * `snapshotUuid`: snapshot uuid
 * * `nxClusterId`: nx cluster id
 * * `protectionDomainId`: protection domain
 * * `parentSnapshotId`: parent snapshot id
 * * `databaseNodeId`: database node id
 * * `appInfoVersion`: App info version
 * * `status`: status
 * * `type`: type
 * * `applicableTypes`: Applicable types
 * * `snapshotTimestamp`: snapshot timeStamp
 * * `metadata`: metadata of snapshot
 * * `softwareSnapshotId`: software snapshot id
 * * `softwareDatabaseSnapshot`: software database snapshot
 * * `dbserverStorageMetadataVersion`: dbserver storage metadata version
 * * `santisedFromSnapshotId`: sanitized  snapshot id
 * * `timezone`: timezone
 * * `processed`: processed
 * * `databaseSnapshot`: database snapshot
 * * `fromTimestamp`: from timestamp
 * * `toTimestamp`: to timestamp
 * * `dbserverId`: dbserver id
 * * `dbserverName`: dbserver name
 * * `dbserverIp`:dbserver ip
 * * `replicatedSnapshots`: replicated snapshots
 * * `softwareSnapshot`: software snapshot
 * * `santisedSnapshots`:santised snapshots
 * * `snapshotFamily`: snapshot family
 * * `snapshotTimestampDate`: snapshot timestamp date
 * * `lcmConfig`: LCM config
 * * `parentSnapshot`: parent snapshot
 * * `snapshotSize`: snapshot size
 *
 * See detailed information in [NDB Snapshots](https://www.nutanix.dev/api_references/ndb/#/d0b89ff892448-get-list-of-all-snapshots).
 */
export function getNdbSnapshotsOutput(args?: GetNdbSnapshotsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNdbSnapshotsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getNdbSnapshots:getNdbSnapshots", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getNdbSnapshots.
 */
export interface GetNdbSnapshotsOutputArgs {
    /**
     * filters help to fetch the snapshots based on input
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetNdbSnapshotsFilterArgs>[]>;
}
