// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create VLANs and IP address pools that are managed both in NDB and outside NDB.
 *
 * ## Example Usage
 *
 * ### resource to create network for NDB
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbNetwork("name", {
 *     clusterId: "{{ cluster_id }}",
 *     gateway: "{{ gatway for the vlan }}",
 *     ipPools: [{
 *         endIp: "{{ ending address range }}",
 *         startIp: "{{ starting address range}}",
 *     }],
 *     primaryDns: " {{ primary dns for the vlan }}",
 *     secondaryDns: "{{secondary dns for the vlan }}",
 *     subnetMask: "{{ subnet mask for the vlan}}",
 *     type: "Static",
 * });
 * ```
 */
export class NdbNetwork extends pulumi.CustomResource {
    /**
     * Get an existing NdbNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbNetworkState, opts?: pulumi.CustomResourceOptions): NdbNetwork {
        return new NdbNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbNetwork:NdbNetwork';

    /**
     * Returns true if the given object is an instance of NdbNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbNetwork.__pulumiType;
    }

    /**
     * Select the Nutanix cluster on which you want to add the VLAN.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * dns domain for vlan. (Static IP address assignment only)
     */
    public readonly dnsDomain!: pulumi.Output<string | undefined>;
    /**
     * Gateway for vlan. Supports in Static IP address assignment only
     */
    public readonly gateway!: pulumi.Output<string | undefined>;
    /**
     * Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
     */
    public readonly ipPools!: pulumi.Output<outputs.NdbNetworkIpPool[]>;
    /**
     * Managed by NDB or not
     */
    public /*out*/ readonly managed!: pulumi.Output<boolean>;
    /**
     * Name of the vlan to be attached in NDB
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * primary dns for vlan. (Static IP address assignment only)
     */
    public readonly primaryDns!: pulumi.Output<string | undefined>;
    /**
     * properties of network
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbNetworkProperty[]>;
    /**
     * properties map of network
     */
    public /*out*/ readonly propertiesMaps!: pulumi.Output<outputs.NdbNetworkPropertiesMap[]>;
    /**
     * secondary dns for vlan. (Static IP address assignment only)
     */
    public readonly secondaryDns!: pulumi.Output<string | undefined>;
    /**
     * stretched vlan id
     */
    public /*out*/ readonly stretchedVlanId!: pulumi.Output<string>;
    /**
     * Subnet mask for vlan. (Static IP address assignment only)
     */
    public readonly subnetMask!: pulumi.Output<string | undefined>;
    /**
     * Vlan type. Supports [DHCP, Static]
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NdbNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbNetworkArgs | NdbNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbNetworkState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dnsDomain"] = state ? state.dnsDomain : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ipPools"] = state ? state.ipPools : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryDns"] = state ? state.primaryDns : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["propertiesMaps"] = state ? state.propertiesMaps : undefined;
            resourceInputs["secondaryDns"] = state ? state.secondaryDns : undefined;
            resourceInputs["stretchedVlanId"] = state ? state.stretchedVlanId : undefined;
            resourceInputs["subnetMask"] = state ? state.subnetMask : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NdbNetworkArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dnsDomain"] = args ? args.dnsDomain : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["ipPools"] = args ? args.ipPools : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryDns"] = args ? args.primaryDns : undefined;
            resourceInputs["secondaryDns"] = args ? args.secondaryDns : undefined;
            resourceInputs["subnetMask"] = args ? args.subnetMask : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["managed"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["propertiesMaps"] = undefined /*out*/;
            resourceInputs["stretchedVlanId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbNetwork resources.
 */
export interface NdbNetworkState {
    /**
     * Select the Nutanix cluster on which you want to add the VLAN.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * dns domain for vlan. (Static IP address assignment only)
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Gateway for vlan. Supports in Static IP address assignment only
     */
    gateway?: pulumi.Input<string>;
    /**
     * Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
     */
    ipPools?: pulumi.Input<pulumi.Input<inputs.NdbNetworkIpPool>[]>;
    /**
     * Managed by NDB or not
     */
    managed?: pulumi.Input<boolean>;
    /**
     * Name of the vlan to be attached in NDB
     */
    name?: pulumi.Input<string>;
    /**
     * primary dns for vlan. (Static IP address assignment only)
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * properties of network
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbNetworkProperty>[]>;
    /**
     * properties map of network
     */
    propertiesMaps?: pulumi.Input<pulumi.Input<inputs.NdbNetworkPropertiesMap>[]>;
    /**
     * secondary dns for vlan. (Static IP address assignment only)
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * stretched vlan id
     */
    stretchedVlanId?: pulumi.Input<string>;
    /**
     * Subnet mask for vlan. (Static IP address assignment only)
     */
    subnetMask?: pulumi.Input<string>;
    /**
     * Vlan type. Supports [DHCP, Static]
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbNetwork resource.
 */
export interface NdbNetworkArgs {
    /**
     * Select the Nutanix cluster on which you want to add the VLAN.
     */
    clusterId: pulumi.Input<string>;
    /**
     * dns domain for vlan. (Static IP address assignment only)
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Gateway for vlan. Supports in Static IP address assignment only
     */
    gateway?: pulumi.Input<string>;
    /**
     * Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs
     */
    ipPools?: pulumi.Input<pulumi.Input<inputs.NdbNetworkIpPool>[]>;
    /**
     * Name of the vlan to be attached in NDB
     */
    name?: pulumi.Input<string>;
    /**
     * primary dns for vlan. (Static IP address assignment only)
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * secondary dns for vlan. (Static IP address assignment only)
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * Subnet mask for vlan. (Static IP address assignment only)
     */
    subnetMask?: pulumi.Input<string>;
    /**
     * Vlan type. Supports [DHCP, Static]
     */
    type: pulumi.Input<string>;
}
