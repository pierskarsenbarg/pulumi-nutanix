// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to perform the log cactup for database instance based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbLogCatchups("name", {databaseId: "{{ DatabaseID }}"});
 * ```
 */
export class NdbLogCatchups extends pulumi.CustomResource {
    /**
     * Get an existing NdbLogCatchups resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbLogCatchupsState, opts?: pulumi.CustomResourceOptions): NdbLogCatchups {
        return new NdbLogCatchups(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbLogCatchups:NdbLogCatchups';

    /**
     * Returns true if the given object is an instance of NdbLogCatchups.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbLogCatchups {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbLogCatchups.__pulumiType;
    }

    public readonly databaseId!: pulumi.Output<string | undefined>;
    /**
     * Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
     */
    public readonly forRestore!: pulumi.Output<boolean | undefined>;
    /**
     * it helps to perform same operation with same config.
     *
     *
     * See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
     */
    public readonly logCatchupVersion!: pulumi.Output<number | undefined>;
    /**
     * Time machine id of
     */
    public readonly timeMachineId!: pulumi.Output<string | undefined>;

    /**
     * Create a NdbLogCatchups resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NdbLogCatchupsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbLogCatchupsArgs | NdbLogCatchupsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbLogCatchupsState | undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["forRestore"] = state ? state.forRestore : undefined;
            resourceInputs["logCatchupVersion"] = state ? state.logCatchupVersion : undefined;
            resourceInputs["timeMachineId"] = state ? state.timeMachineId : undefined;
        } else {
            const args = argsOrState as NdbLogCatchupsArgs | undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["forRestore"] = args ? args.forRestore : undefined;
            resourceInputs["logCatchupVersion"] = args ? args.logCatchupVersion : undefined;
            resourceInputs["timeMachineId"] = args ? args.timeMachineId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbLogCatchups.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbLogCatchups resources.
 */
export interface NdbLogCatchupsState {
    databaseId?: pulumi.Input<string>;
    /**
     * Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
     */
    forRestore?: pulumi.Input<boolean>;
    /**
     * it helps to perform same operation with same config.
     *
     *
     * See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
     */
    logCatchupVersion?: pulumi.Input<number>;
    /**
     * Time machine id of
     */
    timeMachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbLogCatchups resource.
 */
export interface NdbLogCatchupsArgs {
    databaseId?: pulumi.Input<string>;
    /**
     * Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
     */
    forRestore?: pulumi.Input<boolean>;
    /**
     * it helps to perform same operation with same config.
     *
     *
     * See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
     */
    logCatchupVersion?: pulumi.Input<number>;
    /**
     * Time machine id of
     */
    timeMachineId?: pulumi.Input<string>;
}
