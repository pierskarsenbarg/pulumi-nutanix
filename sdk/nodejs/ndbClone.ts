// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to perform the clone of database instance based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbClone("name", {
 *     computeProfileId: "{{ compute_profile_id }}",
 *     createDbserver: true,
 *     databaseParameterProfileId: "{{ databse_profile_id }}",
 *     networkProfileId: "{{ network_profile_id }}",
 *     nodes: [{
 *         computeProfileId: "{{ compute_profile_id }}",
 *         networkProfileId: "{{ network_profile_id }}",
 *         nxClusterId: "{{ nx_Cluster_id }}",
 *         vmName: "test_vm_clone",
 *     }],
 *     nxClusterId: "{{ nx_Cluster_id }}",
 *     postgresqlInfos: [{
 *         dbPassword: "pass",
 *         vmName: "test_vm_clone",
 *     }],
 *     sshPublicKey: "{{ sshkey }}",
 *     timeMachineName: "test-pg-inst",
 *     timeZone: "Asia/Calcutta",
 *     userPitrTimestamp: "{{ point_in_time }}",
 * });
 * ```
 */
export class NdbClone extends pulumi.CustomResource {
    /**
     * Get an existing NdbClone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbCloneState, opts?: pulumi.CustomResourceOptions): NdbClone {
        return new NdbClone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbClone:NdbClone';

    /**
     * Returns true if the given object is an instance of NdbClone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbClone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbClone.__pulumiType;
    }

    /**
     * if any action arguments is required
     */
    declare public readonly actionarguments: pulumi.Output<outputs.NdbCloneActionargument[] | undefined>;
    /**
     * cloned or not
     */
    declare public /*out*/ readonly clone: pulumi.Output<boolean>;
    /**
     * clone will be clustered or not
     */
    declare public readonly clustered: pulumi.Output<boolean | undefined>;
    /**
     * specify the compute profile id
     */
    declare public readonly computeProfileId: pulumi.Output<string | undefined>;
    /**
     * create new dbserver
     */
    declare public readonly createDbserver: pulumi.Output<boolean | undefined>;
    /**
     * database cluster type
     */
    declare public /*out*/ readonly databaseClusterType: pulumi.Output<string>;
    /**
     * database name
     */
    declare public /*out*/ readonly databaseName: pulumi.Output<string>;
    /**
     * database nodes associated with database instance
     */
    declare public /*out*/ readonly databaseNodes: pulumi.Output<outputs.NdbCloneDatabaseNode[]>;
    /**
     * specify the database parameter profile id
     */
    declare public readonly databaseParameterProfileId: pulumi.Output<string | undefined>;
    /**
     * date created for clone
     */
    declare public /*out*/ readonly dateCreated: pulumi.Output<string>;
    /**
     * last modified date for clone
     */
    declare public /*out*/ readonly dateModified: pulumi.Output<string>;
    /**
     * dbserver cluster id
     */
    declare public readonly dbserverClusterId: pulumi.Output<string | undefined>;
    /**
     * Specify if you want to create a database server. This value can be set to true or false as required.
     */
    declare public readonly dbserverId: pulumi.Output<string | undefined>;
    /**
     * dbserver logical cluster
     */
    declare public /*out*/ readonly dbserverLogicalCluster: pulumi.Output<{[key: string]: string}>;
    /**
     * dbserver logical cluster id
     */
    declare public readonly dbserverLogicalClusterId: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Delete the database clone from the VM. Default value is true
     */
    declare public readonly delete: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    declare public readonly deleteLogicalCluster: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    declare public readonly deleteTimeMachine: pulumi.Output<boolean | undefined>;
    /**
     * database instance description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    declare public readonly forced: pulumi.Output<boolean | undefined>;
    /**
     * info of clone
     */
    declare public /*out*/ readonly infos: pulumi.Output<outputs.NdbCloneInfo[]>;
    /**
     * latest snapshot
     */
    declare public readonly latestSnapshot: pulumi.Output<boolean | undefined>;
    /**
     * LCM Config contains the expiry details and refresh details
     */
    declare public readonly lcmConfigs: pulumi.Output<outputs.NdbCloneLcmConfig[] | undefined>;
    /**
     * linked databases within database instance
     */
    declare public /*out*/ readonly linkedDatabases: pulumi.Output<outputs.NdbCloneLinkedDatabase[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    declare public /*out*/ readonly metric: pulumi.Output<{[key: string]: string}>;
    /**
     * database instance name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * specify the network profile id
     */
    declare public readonly networkProfileId: pulumi.Output<string | undefined>;
    /**
     * Node count. Default is 1 for single instance
     */
    declare public readonly nodeCount: pulumi.Output<number | undefined>;
    /**
     * Nodes contain info about dbservers vm
     */
    declare public readonly nodes: pulumi.Output<outputs.NdbCloneNode[]>;
    /**
     * cluster id on where clone will be present
     */
    declare public readonly nxClusterId: pulumi.Output<string>;
    declare public /*out*/ readonly parentDatabaseId: pulumi.Output<string>;
    /**
     * postgresql info for the clone
     */
    declare public readonly postgresqlInfos: pulumi.Output<outputs.NdbClonePostgresqlInfo[] | undefined>;
    /**
     * List of all the properties
     */
    declare public /*out*/ readonly properties: pulumi.Output<outputs.NdbCloneProperty[]>;
    /**
     * - (Optional) Unregister the database clone from NDB. Default value is false
     */
    declare public readonly remove: pulumi.Output<boolean | undefined>;
    /**
     * remove logical cluster. Default value is false
     */
    declare public readonly removeLogicalCluster: pulumi.Output<boolean | undefined>;
    /**
     * snapshot id from where clone is created
     */
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    declare public readonly softRemove: pulumi.Output<boolean | undefined>;
    /**
     * ssh public key
     */
    declare public readonly sshPublicKey: pulumi.Output<string | undefined>;
    /**
     * status of clone
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    declare public readonly tags: pulumi.Output<outputs.NdbCloneTag[]>;
    /**
     * time machine id
     */
    declare public readonly timeMachineId: pulumi.Output<string | undefined>;
    /**
     * time machine name
     */
    declare public readonly timeMachineName: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly timeMachines: pulumi.Output<outputs.NdbCloneTimeMachine[]>;
    /**
     * timezone
     */
    declare public readonly timeZone: pulumi.Output<string>;
    /**
     * type of clone
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * point in time for clone to be created
     */
    declare public readonly userPitrTimestamp: pulumi.Output<string | undefined>;
    /**
     * vm password
     */
    declare public readonly vmPassword: pulumi.Output<string | undefined>;

    /**
     * Create a NdbClone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbCloneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbCloneArgs | NdbCloneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbCloneState | undefined;
            resourceInputs["actionarguments"] = state?.actionarguments;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["clustered"] = state?.clustered;
            resourceInputs["computeProfileId"] = state?.computeProfileId;
            resourceInputs["createDbserver"] = state?.createDbserver;
            resourceInputs["databaseClusterType"] = state?.databaseClusterType;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["databaseNodes"] = state?.databaseNodes;
            resourceInputs["databaseParameterProfileId"] = state?.databaseParameterProfileId;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateModified"] = state?.dateModified;
            resourceInputs["dbserverClusterId"] = state?.dbserverClusterId;
            resourceInputs["dbserverId"] = state?.dbserverId;
            resourceInputs["dbserverLogicalCluster"] = state?.dbserverLogicalCluster;
            resourceInputs["dbserverLogicalClusterId"] = state?.dbserverLogicalClusterId;
            resourceInputs["delete"] = state?.delete;
            resourceInputs["deleteLogicalCluster"] = state?.deleteLogicalCluster;
            resourceInputs["deleteTimeMachine"] = state?.deleteTimeMachine;
            resourceInputs["description"] = state?.description;
            resourceInputs["forced"] = state?.forced;
            resourceInputs["infos"] = state?.infos;
            resourceInputs["latestSnapshot"] = state?.latestSnapshot;
            resourceInputs["lcmConfigs"] = state?.lcmConfigs;
            resourceInputs["linkedDatabases"] = state?.linkedDatabases;
            resourceInputs["metric"] = state?.metric;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkProfileId"] = state?.networkProfileId;
            resourceInputs["nodeCount"] = state?.nodeCount;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["nxClusterId"] = state?.nxClusterId;
            resourceInputs["parentDatabaseId"] = state?.parentDatabaseId;
            resourceInputs["postgresqlInfos"] = state?.postgresqlInfos;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["remove"] = state?.remove;
            resourceInputs["removeLogicalCluster"] = state?.removeLogicalCluster;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["softRemove"] = state?.softRemove;
            resourceInputs["sshPublicKey"] = state?.sshPublicKey;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeMachineId"] = state?.timeMachineId;
            resourceInputs["timeMachineName"] = state?.timeMachineName;
            resourceInputs["timeMachines"] = state?.timeMachines;
            resourceInputs["timeZone"] = state?.timeZone;
            resourceInputs["type"] = state?.type;
            resourceInputs["userPitrTimestamp"] = state?.userPitrTimestamp;
            resourceInputs["vmPassword"] = state?.vmPassword;
        } else {
            const args = argsOrState as NdbCloneArgs | undefined;
            if (args?.nodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if (args?.nxClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'nxClusterId'");
            }
            resourceInputs["actionarguments"] = args?.actionarguments;
            resourceInputs["clustered"] = args?.clustered;
            resourceInputs["computeProfileId"] = args?.computeProfileId;
            resourceInputs["createDbserver"] = args?.createDbserver;
            resourceInputs["databaseParameterProfileId"] = args?.databaseParameterProfileId;
            resourceInputs["dbserverClusterId"] = args?.dbserverClusterId;
            resourceInputs["dbserverId"] = args?.dbserverId;
            resourceInputs["dbserverLogicalClusterId"] = args?.dbserverLogicalClusterId;
            resourceInputs["delete"] = args?.delete;
            resourceInputs["deleteLogicalCluster"] = args?.deleteLogicalCluster;
            resourceInputs["deleteTimeMachine"] = args?.deleteTimeMachine;
            resourceInputs["description"] = args?.description;
            resourceInputs["forced"] = args?.forced;
            resourceInputs["latestSnapshot"] = args?.latestSnapshot;
            resourceInputs["lcmConfigs"] = args?.lcmConfigs;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkProfileId"] = args?.networkProfileId;
            resourceInputs["nodeCount"] = args?.nodeCount;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["nxClusterId"] = args?.nxClusterId;
            resourceInputs["postgresqlInfos"] = args?.postgresqlInfos;
            resourceInputs["remove"] = args?.remove;
            resourceInputs["removeLogicalCluster"] = args?.removeLogicalCluster;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["softRemove"] = args?.softRemove;
            resourceInputs["sshPublicKey"] = args?.sshPublicKey ? pulumi.secret(args.sshPublicKey) : undefined;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeMachineId"] = args?.timeMachineId;
            resourceInputs["timeMachineName"] = args?.timeMachineName;
            resourceInputs["timeZone"] = args?.timeZone;
            resourceInputs["userPitrTimestamp"] = args?.userPitrTimestamp;
            resourceInputs["vmPassword"] = args?.vmPassword ? pulumi.secret(args.vmPassword) : undefined;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["databaseClusterType"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseNodes"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverLogicalCluster"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["linkedDatabases"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeMachines"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sshPublicKey", "vmPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NdbClone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbClone resources.
 */
export interface NdbCloneState {
    /**
     * if any action arguments is required
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbCloneActionargument>[]>;
    /**
     * cloned or not
     */
    clone?: pulumi.Input<boolean>;
    /**
     * clone will be clustered or not
     */
    clustered?: pulumi.Input<boolean>;
    /**
     * specify the compute profile id
     */
    computeProfileId?: pulumi.Input<string>;
    /**
     * create new dbserver
     */
    createDbserver?: pulumi.Input<boolean>;
    /**
     * database cluster type
     */
    databaseClusterType?: pulumi.Input<string>;
    /**
     * database name
     */
    databaseName?: pulumi.Input<string>;
    /**
     * database nodes associated with database instance
     */
    databaseNodes?: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNode>[]>;
    /**
     * specify the database parameter profile id
     */
    databaseParameterProfileId?: pulumi.Input<string>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    /**
     * dbserver cluster id
     */
    dbserverClusterId?: pulumi.Input<string>;
    /**
     * Specify if you want to create a database server. This value can be set to true or false as required.
     */
    dbserverId?: pulumi.Input<string>;
    /**
     * dbserver logical cluster
     */
    dbserverLogicalCluster?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * dbserver logical cluster id
     */
    dbserverLogicalClusterId?: pulumi.Input<string>;
    /**
     * - (Optional) Delete the database clone from the VM. Default value is true
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    deleteLogicalCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    forced?: pulumi.Input<boolean>;
    /**
     * info of clone
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfo>[]>;
    /**
     * latest snapshot
     */
    latestSnapshot?: pulumi.Input<boolean>;
    /**
     * LCM Config contains the expiry details and refresh details
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfig>[]>;
    /**
     * linked databases within database instance
     */
    linkedDatabases?: pulumi.Input<pulumi.Input<inputs.NdbCloneLinkedDatabase>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    /**
     * specify the network profile id
     */
    networkProfileId?: pulumi.Input<string>;
    /**
     * Node count. Default is 1 for single instance
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Nodes contain info about dbservers vm
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.NdbCloneNode>[]>;
    /**
     * cluster id on where clone will be present
     */
    nxClusterId?: pulumi.Input<string>;
    parentDatabaseId?: pulumi.Input<string>;
    /**
     * postgresql info for the clone
     */
    postgresqlInfos?: pulumi.Input<pulumi.Input<inputs.NdbClonePostgresqlInfo>[]>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbCloneProperty>[]>;
    /**
     * - (Optional) Unregister the database clone from NDB. Default value is false
     */
    remove?: pulumi.Input<boolean>;
    /**
     * remove logical cluster. Default value is false
     */
    removeLogicalCluster?: pulumi.Input<boolean>;
    /**
     * snapshot id from where clone is created
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * ssh public key
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * status of clone
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbCloneTag>[]>;
    /**
     * time machine id
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * time machine name
     */
    timeMachineName?: pulumi.Input<string>;
    timeMachines?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachine>[]>;
    /**
     * timezone
     */
    timeZone?: pulumi.Input<string>;
    /**
     * type of clone
     */
    type?: pulumi.Input<string>;
    /**
     * point in time for clone to be created
     */
    userPitrTimestamp?: pulumi.Input<string>;
    /**
     * vm password
     */
    vmPassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbClone resource.
 */
export interface NdbCloneArgs {
    /**
     * if any action arguments is required
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbCloneActionargument>[]>;
    /**
     * clone will be clustered or not
     */
    clustered?: pulumi.Input<boolean>;
    /**
     * specify the compute profile id
     */
    computeProfileId?: pulumi.Input<string>;
    /**
     * create new dbserver
     */
    createDbserver?: pulumi.Input<boolean>;
    /**
     * specify the database parameter profile id
     */
    databaseParameterProfileId?: pulumi.Input<string>;
    /**
     * dbserver cluster id
     */
    dbserverClusterId?: pulumi.Input<string>;
    /**
     * Specify if you want to create a database server. This value can be set to true or false as required.
     */
    dbserverId?: pulumi.Input<string>;
    /**
     * dbserver logical cluster id
     */
    dbserverLogicalClusterId?: pulumi.Input<string>;
    /**
     * - (Optional) Delete the database clone from the VM. Default value is true
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    deleteLogicalCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    forced?: pulumi.Input<boolean>;
    /**
     * latest snapshot
     */
    latestSnapshot?: pulumi.Input<boolean>;
    /**
     * LCM Config contains the expiry details and refresh details
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfig>[]>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    /**
     * specify the network profile id
     */
    networkProfileId?: pulumi.Input<string>;
    /**
     * Node count. Default is 1 for single instance
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Nodes contain info about dbservers vm
     */
    nodes: pulumi.Input<pulumi.Input<inputs.NdbCloneNode>[]>;
    /**
     * cluster id on where clone will be present
     */
    nxClusterId: pulumi.Input<string>;
    /**
     * postgresql info for the clone
     */
    postgresqlInfos?: pulumi.Input<pulumi.Input<inputs.NdbClonePostgresqlInfo>[]>;
    /**
     * - (Optional) Unregister the database clone from NDB. Default value is false
     */
    remove?: pulumi.Input<boolean>;
    /**
     * remove logical cluster. Default value is false
     */
    removeLogicalCluster?: pulumi.Input<boolean>;
    /**
     * snapshot id from where clone is created
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * ssh public key
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbCloneTag>[]>;
    /**
     * time machine id
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * time machine name
     */
    timeMachineName?: pulumi.Input<string>;
    /**
     * timezone
     */
    timeZone?: pulumi.Input<string>;
    /**
     * point in time for clone to be created
     */
    userPitrTimestamp?: pulumi.Input<string>;
    /**
     * vm password
     */
    vmPassword?: pulumi.Input<string>;
}
