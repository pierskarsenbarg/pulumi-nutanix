// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to perform the clone of database instance based on the input parameters.
 *
 * ## resource for cloning using Point in time given time machine name
 *
 *     resource "nutanix.NdbClone" "name" {
 *         timeMachineName = "test-pg-inst"
 *         name = "test-inst-tf-check"
 *         nxClusterId = "{{ nx_Cluster_id }}"
 *         sshPublicKey = "{{ sshkey }}"
 *         user_pitr_timestamp=  "{{ pointInTime }}"
 *         timeZone = "Asia/Calcutta"
 *         createDbserver = true
 *         computeProfileId = "{{ computeProfileId }}"
 *         networkProfileId ="{{ networkProfileId }}"
 *         databaseParameterProfileId =  "{{ databseProfileId }}"
 *         nodes{
 *             vm_name= "testVmClone"
 *             computeProfileId = "{{ computeProfileId }}"
 *             networkProfileId ="{{ networkProfileId }}"
 *             nxClusterId = "{{ nx_Cluster_id }}"
 *         }
 *         postgresql_info{
 *             vm_name="testVmClone"
 *             db_password= "pass"
 *         }
 *     }
 */
export class NdbClone extends pulumi.CustomResource {
    /**
     * Get an existing NdbClone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbCloneState, opts?: pulumi.CustomResourceOptions): NdbClone {
        return new NdbClone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbClone:NdbClone';

    /**
     * Returns true if the given object is an instance of NdbClone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbClone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbClone.__pulumiType;
    }

    /**
     * if any action arguments is required
     */
    public readonly actionarguments!: pulumi.Output<outputs.NdbCloneActionargument[] | undefined>;
    /**
     * cloned or not
     */
    public /*out*/ readonly clone!: pulumi.Output<boolean>;
    /**
     * clone will be clustered or not
     */
    public readonly clustered!: pulumi.Output<boolean | undefined>;
    /**
     * specify the compute profile id
     */
    public readonly computeProfileId!: pulumi.Output<string | undefined>;
    /**
     * create new dbserver
     */
    public readonly createDbserver!: pulumi.Output<boolean | undefined>;
    /**
     * database cluster type
     */
    public /*out*/ readonly databaseClusterType!: pulumi.Output<string>;
    /**
     * database name
     */
    public /*out*/ readonly databaseName!: pulumi.Output<string>;
    /**
     * database nodes associated with database instance
     */
    public /*out*/ readonly databaseNodes!: pulumi.Output<outputs.NdbCloneDatabaseNode[]>;
    /**
     * specify the database parameter profile id
     */
    public readonly databaseParameterProfileId!: pulumi.Output<string | undefined>;
    /**
     * date created for clone
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * last modified date for clone
     */
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    /**
     * dbserver cluster id
     */
    public readonly dbserverClusterId!: pulumi.Output<string | undefined>;
    /**
     * Specify if you want to create a database server. This value can be set to true or false as required.
     */
    public readonly dbserverId!: pulumi.Output<string | undefined>;
    /**
     * dbserver logical cluster
     */
    public /*out*/ readonly dbserverLogicalCluster!: pulumi.Output<{[key: string]: string}>;
    /**
     * dbserver logical cluster id
     */
    public readonly dbserverLogicalClusterId!: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Delete the database clone from the VM. Default value is true
     */
    public readonly delete!: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    public readonly deleteLogicalCluster!: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    public readonly deleteTimeMachine!: pulumi.Output<boolean | undefined>;
    /**
     * database instance description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    public readonly forced!: pulumi.Output<boolean | undefined>;
    /**
     * info of clone
     */
    public /*out*/ readonly infos!: pulumi.Output<outputs.NdbCloneInfo[]>;
    /**
     * latest snapshot
     */
    public readonly latestSnapshot!: pulumi.Output<boolean | undefined>;
    /**
     * LCM Config contains the expiry details and refresh details
     */
    public readonly lcmConfigs!: pulumi.Output<outputs.NdbCloneLcmConfig[] | undefined>;
    /**
     * linked databases within database instance
     */
    public /*out*/ readonly linkedDatabases!: pulumi.Output<outputs.NdbCloneLinkedDatabase[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    public /*out*/ readonly metric!: pulumi.Output<{[key: string]: string}>;
    /**
     * database instance name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * specify the network profile id
     */
    public readonly networkProfileId!: pulumi.Output<string | undefined>;
    /**
     * Node count. Default is 1 for single instance
     */
    public readonly nodeCount!: pulumi.Output<number | undefined>;
    /**
     * Nodes contain info about dbservers vm
     */
    public readonly nodes!: pulumi.Output<outputs.NdbCloneNode[]>;
    /**
     * cluster id on where clone will be present
     */
    public readonly nxClusterId!: pulumi.Output<string>;
    public /*out*/ readonly parentDatabaseId!: pulumi.Output<string>;
    /**
     * postgresql info for the clone
     */
    public readonly postgresqlInfos!: pulumi.Output<outputs.NdbClonePostgresqlInfo[] | undefined>;
    /**
     * List of all the properties
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbCloneProperty[]>;
    /**
     * - (Optional) Unregister the database clone from NDB. Default value is false
     */
    public readonly remove!: pulumi.Output<boolean | undefined>;
    /**
     * remove logical cluster. Default value is false
     */
    public readonly removeLogicalCluster!: pulumi.Output<boolean | undefined>;
    /**
     * snapshot id from where clone is created
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    public readonly softRemove!: pulumi.Output<boolean | undefined>;
    /**
     * ssh public key
     */
    public readonly sshPublicKey!: pulumi.Output<string | undefined>;
    /**
     * status of clone
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    public readonly tags!: pulumi.Output<outputs.NdbCloneTag[]>;
    /**
     * time machine id
     */
    public readonly timeMachineId!: pulumi.Output<string | undefined>;
    /**
     * time machine name
     */
    public readonly timeMachineName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly timeMachines!: pulumi.Output<outputs.NdbCloneTimeMachine[]>;
    /**
     * timezone
     */
    public readonly timeZone!: pulumi.Output<string>;
    /**
     * type of clone
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * point in time for clone to be created
     */
    public readonly userPitrTimestamp!: pulumi.Output<string | undefined>;
    /**
     * vm password
     */
    public readonly vmPassword!: pulumi.Output<string | undefined>;

    /**
     * Create a NdbClone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbCloneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbCloneArgs | NdbCloneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbCloneState | undefined;
            resourceInputs["actionarguments"] = state ? state.actionarguments : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["clustered"] = state ? state.clustered : undefined;
            resourceInputs["computeProfileId"] = state ? state.computeProfileId : undefined;
            resourceInputs["createDbserver"] = state ? state.createDbserver : undefined;
            resourceInputs["databaseClusterType"] = state ? state.databaseClusterType : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseNodes"] = state ? state.databaseNodes : undefined;
            resourceInputs["databaseParameterProfileId"] = state ? state.databaseParameterProfileId : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["dbserverClusterId"] = state ? state.dbserverClusterId : undefined;
            resourceInputs["dbserverId"] = state ? state.dbserverId : undefined;
            resourceInputs["dbserverLogicalCluster"] = state ? state.dbserverLogicalCluster : undefined;
            resourceInputs["dbserverLogicalClusterId"] = state ? state.dbserverLogicalClusterId : undefined;
            resourceInputs["delete"] = state ? state.delete : undefined;
            resourceInputs["deleteLogicalCluster"] = state ? state.deleteLogicalCluster : undefined;
            resourceInputs["deleteTimeMachine"] = state ? state.deleteTimeMachine : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forced"] = state ? state.forced : undefined;
            resourceInputs["infos"] = state ? state.infos : undefined;
            resourceInputs["latestSnapshot"] = state ? state.latestSnapshot : undefined;
            resourceInputs["lcmConfigs"] = state ? state.lcmConfigs : undefined;
            resourceInputs["linkedDatabases"] = state ? state.linkedDatabases : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfileId"] = state ? state.networkProfileId : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["nxClusterId"] = state ? state.nxClusterId : undefined;
            resourceInputs["parentDatabaseId"] = state ? state.parentDatabaseId : undefined;
            resourceInputs["postgresqlInfos"] = state ? state.postgresqlInfos : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["remove"] = state ? state.remove : undefined;
            resourceInputs["removeLogicalCluster"] = state ? state.removeLogicalCluster : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["softRemove"] = state ? state.softRemove : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeMachineId"] = state ? state.timeMachineId : undefined;
            resourceInputs["timeMachineName"] = state ? state.timeMachineName : undefined;
            resourceInputs["timeMachines"] = state ? state.timeMachines : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userPitrTimestamp"] = state ? state.userPitrTimestamp : undefined;
            resourceInputs["vmPassword"] = state ? state.vmPassword : undefined;
        } else {
            const args = argsOrState as NdbCloneArgs | undefined;
            if ((!args || args.nodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if ((!args || args.nxClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nxClusterId'");
            }
            resourceInputs["actionarguments"] = args ? args.actionarguments : undefined;
            resourceInputs["clustered"] = args ? args.clustered : undefined;
            resourceInputs["computeProfileId"] = args ? args.computeProfileId : undefined;
            resourceInputs["createDbserver"] = args ? args.createDbserver : undefined;
            resourceInputs["databaseParameterProfileId"] = args ? args.databaseParameterProfileId : undefined;
            resourceInputs["dbserverClusterId"] = args ? args.dbserverClusterId : undefined;
            resourceInputs["dbserverId"] = args ? args.dbserverId : undefined;
            resourceInputs["dbserverLogicalClusterId"] = args ? args.dbserverLogicalClusterId : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["deleteLogicalCluster"] = args ? args.deleteLogicalCluster : undefined;
            resourceInputs["deleteTimeMachine"] = args ? args.deleteTimeMachine : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forced"] = args ? args.forced : undefined;
            resourceInputs["latestSnapshot"] = args ? args.latestSnapshot : undefined;
            resourceInputs["lcmConfigs"] = args ? args.lcmConfigs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfileId"] = args ? args.networkProfileId : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["nxClusterId"] = args ? args.nxClusterId : undefined;
            resourceInputs["postgresqlInfos"] = args ? args.postgresqlInfos : undefined;
            resourceInputs["remove"] = args ? args.remove : undefined;
            resourceInputs["removeLogicalCluster"] = args ? args.removeLogicalCluster : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["softRemove"] = args ? args.softRemove : undefined;
            resourceInputs["sshPublicKey"] = args?.sshPublicKey ? pulumi.secret(args.sshPublicKey) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeMachineId"] = args ? args.timeMachineId : undefined;
            resourceInputs["timeMachineName"] = args ? args.timeMachineName : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["userPitrTimestamp"] = args ? args.userPitrTimestamp : undefined;
            resourceInputs["vmPassword"] = args?.vmPassword ? pulumi.secret(args.vmPassword) : undefined;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["databaseClusterType"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseNodes"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverLogicalCluster"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["linkedDatabases"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeMachines"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sshPublicKey", "vmPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NdbClone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbClone resources.
 */
export interface NdbCloneState {
    /**
     * if any action arguments is required
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbCloneActionargument>[]>;
    /**
     * cloned or not
     */
    clone?: pulumi.Input<boolean>;
    /**
     * clone will be clustered or not
     */
    clustered?: pulumi.Input<boolean>;
    /**
     * specify the compute profile id
     */
    computeProfileId?: pulumi.Input<string>;
    /**
     * create new dbserver
     */
    createDbserver?: pulumi.Input<boolean>;
    /**
     * database cluster type
     */
    databaseClusterType?: pulumi.Input<string>;
    /**
     * database name
     */
    databaseName?: pulumi.Input<string>;
    /**
     * database nodes associated with database instance
     */
    databaseNodes?: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNode>[]>;
    /**
     * specify the database parameter profile id
     */
    databaseParameterProfileId?: pulumi.Input<string>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    /**
     * dbserver cluster id
     */
    dbserverClusterId?: pulumi.Input<string>;
    /**
     * Specify if you want to create a database server. This value can be set to true or false as required.
     */
    dbserverId?: pulumi.Input<string>;
    /**
     * dbserver logical cluster
     */
    dbserverLogicalCluster?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * dbserver logical cluster id
     */
    dbserverLogicalClusterId?: pulumi.Input<string>;
    /**
     * - (Optional) Delete the database clone from the VM. Default value is true
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    deleteLogicalCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    forced?: pulumi.Input<boolean>;
    /**
     * info of clone
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfo>[]>;
    /**
     * latest snapshot
     */
    latestSnapshot?: pulumi.Input<boolean>;
    /**
     * LCM Config contains the expiry details and refresh details
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfig>[]>;
    /**
     * linked databases within database instance
     */
    linkedDatabases?: pulumi.Input<pulumi.Input<inputs.NdbCloneLinkedDatabase>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    /**
     * specify the network profile id
     */
    networkProfileId?: pulumi.Input<string>;
    /**
     * Node count. Default is 1 for single instance
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Nodes contain info about dbservers vm
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.NdbCloneNode>[]>;
    /**
     * cluster id on where clone will be present
     */
    nxClusterId?: pulumi.Input<string>;
    parentDatabaseId?: pulumi.Input<string>;
    /**
     * postgresql info for the clone
     */
    postgresqlInfos?: pulumi.Input<pulumi.Input<inputs.NdbClonePostgresqlInfo>[]>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbCloneProperty>[]>;
    /**
     * - (Optional) Unregister the database clone from NDB. Default value is false
     */
    remove?: pulumi.Input<boolean>;
    /**
     * remove logical cluster. Default value is false
     */
    removeLogicalCluster?: pulumi.Input<boolean>;
    /**
     * snapshot id from where clone is created
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * ssh public key
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * status of clone
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbCloneTag>[]>;
    /**
     * time machine id
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * time machine name
     */
    timeMachineName?: pulumi.Input<string>;
    timeMachines?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachine>[]>;
    /**
     * timezone
     */
    timeZone?: pulumi.Input<string>;
    /**
     * type of clone
     */
    type?: pulumi.Input<string>;
    /**
     * point in time for clone to be created
     */
    userPitrTimestamp?: pulumi.Input<string>;
    /**
     * vm password
     */
    vmPassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbClone resource.
 */
export interface NdbCloneArgs {
    /**
     * if any action arguments is required
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbCloneActionargument>[]>;
    /**
     * clone will be clustered or not
     */
    clustered?: pulumi.Input<boolean>;
    /**
     * specify the compute profile id
     */
    computeProfileId?: pulumi.Input<string>;
    /**
     * create new dbserver
     */
    createDbserver?: pulumi.Input<boolean>;
    /**
     * specify the database parameter profile id
     */
    databaseParameterProfileId?: pulumi.Input<string>;
    /**
     * dbserver cluster id
     */
    dbserverClusterId?: pulumi.Input<string>;
    /**
     * Specify if you want to create a database server. This value can be set to true or false as required.
     */
    dbserverId?: pulumi.Input<string>;
    /**
     * dbserver logical cluster id
     */
    dbserverLogicalClusterId?: pulumi.Input<string>;
    /**
     * - (Optional) Delete the database clone from the VM. Default value is true
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    deleteLogicalCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    forced?: pulumi.Input<boolean>;
    /**
     * latest snapshot
     */
    latestSnapshot?: pulumi.Input<boolean>;
    /**
     * LCM Config contains the expiry details and refresh details
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfig>[]>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    /**
     * specify the network profile id
     */
    networkProfileId?: pulumi.Input<string>;
    /**
     * Node count. Default is 1 for single instance
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Nodes contain info about dbservers vm
     */
    nodes: pulumi.Input<pulumi.Input<inputs.NdbCloneNode>[]>;
    /**
     * cluster id on where clone will be present
     */
    nxClusterId: pulumi.Input<string>;
    /**
     * postgresql info for the clone
     */
    postgresqlInfos?: pulumi.Input<pulumi.Input<inputs.NdbClonePostgresqlInfo>[]>;
    /**
     * - (Optional) Unregister the database clone from NDB. Default value is false
     */
    remove?: pulumi.Input<boolean>;
    /**
     * remove logical cluster. Default value is false
     */
    removeLogicalCluster?: pulumi.Input<boolean>;
    /**
     * snapshot id from where clone is created
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * ssh public key
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbCloneTag>[]>;
    /**
     * time machine id
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * time machine name
     */
    timeMachineName?: pulumi.Input<string>;
    /**
     * timezone
     */
    timeZone?: pulumi.Input<string>;
    /**
     * point in time for clone to be created
     */
    userPitrTimestamp?: pulumi.Input<string>;
    /**
     * vm password
     */
    vmPassword?: pulumi.Input<string>;
}
