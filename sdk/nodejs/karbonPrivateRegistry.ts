// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Nutanix Karbon Registry resource to Create a private registry entry in Karbon.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const registries = pulumi.output(nutanix.getKarbonPrivateRegistry());
 * const registry = new nutanix.KarbonPrivateRegistry("registry", {});
 * ```
 */
export class KarbonPrivateRegistry extends pulumi.CustomResource {
    /**
     * Get an existing KarbonPrivateRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KarbonPrivateRegistryState, opts?: pulumi.CustomResourceOptions): KarbonPrivateRegistry {
        return new KarbonPrivateRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/karbonPrivateRegistry:KarbonPrivateRegistry';

    /**
     * Returns true if the given object is an instance of KarbonPrivateRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KarbonPrivateRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KarbonPrivateRegistry.__pulumiType;
    }

    public readonly cert!: pulumi.Output<string | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly url!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a KarbonPrivateRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KarbonPrivateRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KarbonPrivateRegistryArgs | KarbonPrivateRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KarbonPrivateRegistryState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as KarbonPrivateRegistryArgs | undefined;
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KarbonPrivateRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KarbonPrivateRegistry resources.
 */
export interface KarbonPrivateRegistryState {
    cert?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KarbonPrivateRegistry resource.
 */
export interface KarbonPrivateRegistryArgs {
    cert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    url: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}
