// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a resource to create an access control policy based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const test = new nutanix.AccessControlPolicy("test", {
 *     contextFilterLists: [{
 *         entityFilterExpressionLists: [
 *             {
 *                 leftHandSideEntityType: "cluster",
 *                 operator: "IN",
 *                 rightHandSide: {
 *                     uuidLists: ["00058ef8-c31c-f0bc-0000-000000007b23"],
 *                 },
 *             },
 *             {
 *                 leftHandSideEntityType: "image",
 *                 operator: "IN",
 *                 rightHandSide: {
 *                     collection: "ALL",
 *                 },
 *             },
 *             {
 *                 leftHandSideEntityType: "category",
 *                 operator: "IN",
 *                 rightHandSide: {
 *                     collection: "ALL",
 *                 },
 *             },
 *             {
 *                 leftHandSideEntityType: "marketplace_item",
 *                 operator: "IN",
 *                 rightHandSide: {
 *                     collection: "SELF_OWNED",
 *                 },
 *             },
 *             {
 *                 leftHandSideEntityType: "app_task",
 *                 operator: "IN",
 *                 rightHandSide: {
 *                     collection: "SELF_OWNED",
 *                 },
 *             },
 *             {
 *                 leftHandSideEntityType: "app_variable",
 *                 operator: "IN",
 *                 rightHandSide: {
 *                     collection: "SELF_OWNED",
 *                 },
 *             },
 *         ],
 *     }],
 *     description: "DESCRIPTION OF THE ACCESS CONTROL POLICY",
 *     roleReference: {
 *         kind: "role",
 *         uuid: "UUID of role",
 *     },
 *     userReferenceLists: [{
 *         name: "admin",
 *         uuid: "UUID of User existent",
 *     }],
 * });
 * ```
 */
export class AccessControlPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccessControlPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessControlPolicyState, opts?: pulumi.CustomResourceOptions): AccessControlPolicy {
        return new AccessControlPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/accessControlPolicy:AccessControlPolicy';

    /**
     * Returns true if the given object is an instance of AccessControlPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessControlPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessControlPolicy.__pulumiType;
    }

    /**
     * The version of the API.
     * * `state`: - The state of the Access Control Policy.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    public readonly categories!: pulumi.Output<outputs.AccessControlPolicyCategory[]>;
    public readonly contextFilterLists!: pulumi.Output<outputs.AccessControlPolicyContextFilterList[]>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly ownerReference!: pulumi.Output<outputs.AccessControlPolicyOwnerReference>;
    public readonly roleReference!: pulumi.Output<outputs.AccessControlPolicyRoleReference>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly userGroupReferenceLists!: pulumi.Output<outputs.AccessControlPolicyUserGroupReferenceList[]>;
    public readonly userReferenceLists!: pulumi.Output<outputs.AccessControlPolicyUserReferenceList[]>;

    /**
     * Create a AccessControlPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessControlPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessControlPolicyArgs | AccessControlPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessControlPolicyState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["contextFilterLists"] = state ? state.contextFilterLists : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerReference"] = state ? state.ownerReference : undefined;
            resourceInputs["roleReference"] = state ? state.roleReference : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["userGroupReferenceLists"] = state ? state.userGroupReferenceLists : undefined;
            resourceInputs["userReferenceLists"] = state ? state.userReferenceLists : undefined;
        } else {
            const args = argsOrState as AccessControlPolicyArgs | undefined;
            if ((!args || args.roleReference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleReference'");
            }
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["contextFilterLists"] = args ? args.contextFilterLists : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerReference"] = args ? args.ownerReference : undefined;
            resourceInputs["roleReference"] = args ? args.roleReference : undefined;
            resourceInputs["userGroupReferenceLists"] = args ? args.userGroupReferenceLists : undefined;
            resourceInputs["userReferenceLists"] = args ? args.userReferenceLists : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessControlPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessControlPolicy resources.
 */
export interface AccessControlPolicyState {
    /**
     * The version of the API.
     * * `state`: - The state of the Access Control Policy.
     */
    apiVersion?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyCategory>[]>;
    contextFilterLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterList>[]>;
    description?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    ownerReference?: pulumi.Input<inputs.AccessControlPolicyOwnerReference>;
    roleReference?: pulumi.Input<inputs.AccessControlPolicyRoleReference>;
    state?: pulumi.Input<string>;
    userGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyUserGroupReferenceList>[]>;
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyUserReferenceList>[]>;
}

/**
 * The set of arguments for constructing a AccessControlPolicy resource.
 */
export interface AccessControlPolicyArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyCategory>[]>;
    contextFilterLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterList>[]>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerReference?: pulumi.Input<inputs.AccessControlPolicyOwnerReference>;
    roleReference: pulumi.Input<inputs.AccessControlPolicyRoleReference>;
    userGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyUserGroupReferenceList>[]>;
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyUserReferenceList>[]>;
}
