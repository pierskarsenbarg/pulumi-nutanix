// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmCloneV2 extends pulumi.CustomResource {
    /**
     * Get an existing VmCloneV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmCloneV2State, opts?: pulumi.CustomResourceOptions): VmCloneV2 {
        return new VmCloneV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/vmCloneV2:VmCloneV2';

    /**
     * Returns true if the given object is an instance of VmCloneV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmCloneV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmCloneV2.__pulumiType;
    }

    public /*out*/ readonly apcConfigs!: pulumi.Output<outputs.VmCloneV2ApcConfig[]>;
    public /*out*/ readonly biosUuid!: pulumi.Output<string>;
    public readonly bootConfigs!: pulumi.Output<outputs.VmCloneV2BootConfig[]>;
    public /*out*/ readonly categories!: pulumi.Output<outputs.VmCloneV2Category[]>;
    public /*out*/ readonly cdRoms!: pulumi.Output<outputs.VmCloneV2CdRom[]>;
    public /*out*/ readonly clusters!: pulumi.Output<outputs.VmCloneV2Cluster[]>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly disks!: pulumi.Output<outputs.VmCloneV2Disk[]>;
    public /*out*/ readonly enabledCpuFeatures!: pulumi.Output<string[]>;
    public /*out*/ readonly extId!: pulumi.Output<string>;
    public /*out*/ readonly generationUuid!: pulumi.Output<string>;
    public /*out*/ readonly gpuses!: pulumi.Output<outputs.VmCloneV2Gpus[]>;
    public readonly guestCustomizations!: pulumi.Output<outputs.VmCloneV2GuestCustomization[]>;
    public /*out*/ readonly guestTools!: pulumi.Output<outputs.VmCloneV2GuestTool[]>;
    public /*out*/ readonly hardwareClockTimezone!: pulumi.Output<string>;
    public /*out*/ readonly hosts!: pulumi.Output<outputs.VmCloneV2Host[]>;
    public /*out*/ readonly isAgentVm!: pulumi.Output<boolean>;
    public /*out*/ readonly isBrandingEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isCpuHotplugEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isCpuPassthroughEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isGpuConsoleEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isMemoryOvercommitEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isScsiControllerEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isVcpuHardPinningEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isVgaConsoleEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly links!: pulumi.Output<outputs.VmCloneV2Link[]>;
    public /*out*/ readonly machineType!: pulumi.Output<string>;
    public readonly memorySizeBytes!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly nics!: pulumi.Output<outputs.VmCloneV2Nic[]>;
    public readonly numCoresPerSocket!: pulumi.Output<number>;
    public /*out*/ readonly numNumaNodes!: pulumi.Output<number>;
    public readonly numSockets!: pulumi.Output<number>;
    public readonly numThreadsPerCore!: pulumi.Output<number>;
    public /*out*/ readonly ownershipInfos!: pulumi.Output<outputs.VmCloneV2OwnershipInfo[]>;
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    public /*out*/ readonly protectionPolicyStates!: pulumi.Output<outputs.VmCloneV2ProtectionPolicyState[]>;
    public /*out*/ readonly protectionType!: pulumi.Output<string>;
    public /*out*/ readonly serialPorts!: pulumi.Output<outputs.VmCloneV2SerialPort[]>;
    public /*out*/ readonly sources!: pulumi.Output<outputs.VmCloneV2Source[]>;
    public /*out*/ readonly storageConfigs!: pulumi.Output<outputs.VmCloneV2StorageConfig[]>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    public readonly vmExtId!: pulumi.Output<string>;
    public /*out*/ readonly vtpmConfigs!: pulumi.Output<outputs.VmCloneV2VtpmConfig[]>;

    /**
     * Create a VmCloneV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmCloneV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmCloneV2Args | VmCloneV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmCloneV2State | undefined;
            resourceInputs["apcConfigs"] = state ? state.apcConfigs : undefined;
            resourceInputs["biosUuid"] = state ? state.biosUuid : undefined;
            resourceInputs["bootConfigs"] = state ? state.bootConfigs : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["cdRoms"] = state ? state.cdRoms : undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["enabledCpuFeatures"] = state ? state.enabledCpuFeatures : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["generationUuid"] = state ? state.generationUuid : undefined;
            resourceInputs["gpuses"] = state ? state.gpuses : undefined;
            resourceInputs["guestCustomizations"] = state ? state.guestCustomizations : undefined;
            resourceInputs["guestTools"] = state ? state.guestTools : undefined;
            resourceInputs["hardwareClockTimezone"] = state ? state.hardwareClockTimezone : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["isAgentVm"] = state ? state.isAgentVm : undefined;
            resourceInputs["isBrandingEnabled"] = state ? state.isBrandingEnabled : undefined;
            resourceInputs["isCpuHotplugEnabled"] = state ? state.isCpuHotplugEnabled : undefined;
            resourceInputs["isCpuPassthroughEnabled"] = state ? state.isCpuPassthroughEnabled : undefined;
            resourceInputs["isGpuConsoleEnabled"] = state ? state.isGpuConsoleEnabled : undefined;
            resourceInputs["isMemoryOvercommitEnabled"] = state ? state.isMemoryOvercommitEnabled : undefined;
            resourceInputs["isScsiControllerEnabled"] = state ? state.isScsiControllerEnabled : undefined;
            resourceInputs["isVcpuHardPinningEnabled"] = state ? state.isVcpuHardPinningEnabled : undefined;
            resourceInputs["isVgaConsoleEnabled"] = state ? state.isVgaConsoleEnabled : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["memorySizeBytes"] = state ? state.memorySizeBytes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nics"] = state ? state.nics : undefined;
            resourceInputs["numCoresPerSocket"] = state ? state.numCoresPerSocket : undefined;
            resourceInputs["numNumaNodes"] = state ? state.numNumaNodes : undefined;
            resourceInputs["numSockets"] = state ? state.numSockets : undefined;
            resourceInputs["numThreadsPerCore"] = state ? state.numThreadsPerCore : undefined;
            resourceInputs["ownershipInfos"] = state ? state.ownershipInfos : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["protectionPolicyStates"] = state ? state.protectionPolicyStates : undefined;
            resourceInputs["protectionType"] = state ? state.protectionType : undefined;
            resourceInputs["serialPorts"] = state ? state.serialPorts : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["storageConfigs"] = state ? state.storageConfigs : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vmExtId"] = state ? state.vmExtId : undefined;
            resourceInputs["vtpmConfigs"] = state ? state.vtpmConfigs : undefined;
        } else {
            const args = argsOrState as VmCloneV2Args | undefined;
            if ((!args || args.vmExtId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmExtId'");
            }
            resourceInputs["bootConfigs"] = args ? args.bootConfigs : undefined;
            resourceInputs["guestCustomizations"] = args ? args.guestCustomizations : undefined;
            resourceInputs["memorySizeBytes"] = args ? args.memorySizeBytes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nics"] = args ? args.nics : undefined;
            resourceInputs["numCoresPerSocket"] = args ? args.numCoresPerSocket : undefined;
            resourceInputs["numSockets"] = args ? args.numSockets : undefined;
            resourceInputs["numThreadsPerCore"] = args ? args.numThreadsPerCore : undefined;
            resourceInputs["vmExtId"] = args ? args.vmExtId : undefined;
            resourceInputs["apcConfigs"] = undefined /*out*/;
            resourceInputs["biosUuid"] = undefined /*out*/;
            resourceInputs["categories"] = undefined /*out*/;
            resourceInputs["cdRoms"] = undefined /*out*/;
            resourceInputs["clusters"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["disks"] = undefined /*out*/;
            resourceInputs["enabledCpuFeatures"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["generationUuid"] = undefined /*out*/;
            resourceInputs["gpuses"] = undefined /*out*/;
            resourceInputs["guestTools"] = undefined /*out*/;
            resourceInputs["hardwareClockTimezone"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["isAgentVm"] = undefined /*out*/;
            resourceInputs["isBrandingEnabled"] = undefined /*out*/;
            resourceInputs["isCpuHotplugEnabled"] = undefined /*out*/;
            resourceInputs["isCpuPassthroughEnabled"] = undefined /*out*/;
            resourceInputs["isGpuConsoleEnabled"] = undefined /*out*/;
            resourceInputs["isMemoryOvercommitEnabled"] = undefined /*out*/;
            resourceInputs["isScsiControllerEnabled"] = undefined /*out*/;
            resourceInputs["isVcpuHardPinningEnabled"] = undefined /*out*/;
            resourceInputs["isVgaConsoleEnabled"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["machineType"] = undefined /*out*/;
            resourceInputs["numNumaNodes"] = undefined /*out*/;
            resourceInputs["ownershipInfos"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["protectionPolicyStates"] = undefined /*out*/;
            resourceInputs["protectionType"] = undefined /*out*/;
            resourceInputs["serialPorts"] = undefined /*out*/;
            resourceInputs["sources"] = undefined /*out*/;
            resourceInputs["storageConfigs"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vtpmConfigs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmCloneV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmCloneV2 resources.
 */
export interface VmCloneV2State {
    apcConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2ApcConfig>[]>;
    biosUuid?: pulumi.Input<string>;
    bootConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2BootConfig>[]>;
    categories?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Category>[]>;
    cdRoms?: pulumi.Input<pulumi.Input<inputs.VmCloneV2CdRom>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Cluster>[]>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disks?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Disk>[]>;
    enabledCpuFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    extId?: pulumi.Input<string>;
    generationUuid?: pulumi.Input<string>;
    gpuses?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Gpus>[]>;
    guestCustomizations?: pulumi.Input<pulumi.Input<inputs.VmCloneV2GuestCustomization>[]>;
    guestTools?: pulumi.Input<pulumi.Input<inputs.VmCloneV2GuestTool>[]>;
    hardwareClockTimezone?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Host>[]>;
    isAgentVm?: pulumi.Input<boolean>;
    isBrandingEnabled?: pulumi.Input<boolean>;
    isCpuHotplugEnabled?: pulumi.Input<boolean>;
    isCpuPassthroughEnabled?: pulumi.Input<boolean>;
    isGpuConsoleEnabled?: pulumi.Input<boolean>;
    isMemoryOvercommitEnabled?: pulumi.Input<boolean>;
    isScsiControllerEnabled?: pulumi.Input<boolean>;
    isVcpuHardPinningEnabled?: pulumi.Input<boolean>;
    isVgaConsoleEnabled?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Link>[]>;
    machineType?: pulumi.Input<string>;
    memorySizeBytes?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nics?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Nic>[]>;
    numCoresPerSocket?: pulumi.Input<number>;
    numNumaNodes?: pulumi.Input<number>;
    numSockets?: pulumi.Input<number>;
    numThreadsPerCore?: pulumi.Input<number>;
    ownershipInfos?: pulumi.Input<pulumi.Input<inputs.VmCloneV2OwnershipInfo>[]>;
    powerState?: pulumi.Input<string>;
    protectionPolicyStates?: pulumi.Input<pulumi.Input<inputs.VmCloneV2ProtectionPolicyState>[]>;
    protectionType?: pulumi.Input<string>;
    serialPorts?: pulumi.Input<pulumi.Input<inputs.VmCloneV2SerialPort>[]>;
    sources?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Source>[]>;
    storageConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2StorageConfig>[]>;
    tenantId?: pulumi.Input<string>;
    updateTime?: pulumi.Input<string>;
    vmExtId?: pulumi.Input<string>;
    vtpmConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2VtpmConfig>[]>;
}

/**
 * The set of arguments for constructing a VmCloneV2 resource.
 */
export interface VmCloneV2Args {
    bootConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2BootConfig>[]>;
    guestCustomizations?: pulumi.Input<pulumi.Input<inputs.VmCloneV2GuestCustomization>[]>;
    memorySizeBytes?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nics?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Nic>[]>;
    numCoresPerSocket?: pulumi.Input<number>;
    numSockets?: pulumi.Input<number>;
    numThreadsPerCore?: pulumi.Input<number>;
    vmExtId: pulumi.Input<string>;
}
