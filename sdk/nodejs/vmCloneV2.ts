// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmCloneV2 extends pulumi.CustomResource {
    /**
     * Get an existing VmCloneV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmCloneV2State, opts?: pulumi.CustomResourceOptions): VmCloneV2 {
        return new VmCloneV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/vmCloneV2:VmCloneV2';

    /**
     * Returns true if the given object is an instance of VmCloneV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmCloneV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmCloneV2.__pulumiType;
    }

    declare public /*out*/ readonly apcConfigs: pulumi.Output<outputs.VmCloneV2ApcConfig[]>;
    declare public /*out*/ readonly biosUuid: pulumi.Output<string>;
    declare public readonly bootConfigs: pulumi.Output<outputs.VmCloneV2BootConfig[]>;
    declare public /*out*/ readonly categories: pulumi.Output<outputs.VmCloneV2Category[]>;
    declare public /*out*/ readonly cdRoms: pulumi.Output<outputs.VmCloneV2CdRom[]>;
    declare public /*out*/ readonly clusters: pulumi.Output<outputs.VmCloneV2Cluster[]>;
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public /*out*/ readonly description: pulumi.Output<string>;
    declare public /*out*/ readonly disks: pulumi.Output<outputs.VmCloneV2Disk[]>;
    declare public /*out*/ readonly enabledCpuFeatures: pulumi.Output<string[]>;
    declare public /*out*/ readonly extId: pulumi.Output<string>;
    declare public /*out*/ readonly generationUuid: pulumi.Output<string>;
    declare public /*out*/ readonly gpuses: pulumi.Output<outputs.VmCloneV2Gpus[]>;
    declare public readonly guestCustomizations: pulumi.Output<outputs.VmCloneV2GuestCustomization[]>;
    declare public /*out*/ readonly guestTools: pulumi.Output<outputs.VmCloneV2GuestTool[]>;
    declare public /*out*/ readonly hardwareClockTimezone: pulumi.Output<string>;
    declare public /*out*/ readonly hosts: pulumi.Output<outputs.VmCloneV2Host[]>;
    declare public /*out*/ readonly isAgentVm: pulumi.Output<boolean>;
    declare public /*out*/ readonly isBrandingEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isCpuHotplugEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isCpuPassthroughEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isGpuConsoleEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isMemoryOvercommitEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isScsiControllerEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isVcpuHardPinningEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isVgaConsoleEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly links: pulumi.Output<outputs.VmCloneV2Link[]>;
    declare public /*out*/ readonly machineType: pulumi.Output<string>;
    declare public readonly memorySizeBytes: pulumi.Output<number>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly nics: pulumi.Output<outputs.VmCloneV2Nic[]>;
    declare public readonly numCoresPerSocket: pulumi.Output<number>;
    declare public /*out*/ readonly numNumaNodes: pulumi.Output<number>;
    declare public readonly numSockets: pulumi.Output<number>;
    declare public readonly numThreadsPerCore: pulumi.Output<number>;
    declare public /*out*/ readonly ownershipInfos: pulumi.Output<outputs.VmCloneV2OwnershipInfo[]>;
    declare public /*out*/ readonly powerState: pulumi.Output<string>;
    declare public /*out*/ readonly protectionPolicyStates: pulumi.Output<outputs.VmCloneV2ProtectionPolicyState[]>;
    declare public /*out*/ readonly protectionType: pulumi.Output<string>;
    declare public /*out*/ readonly serialPorts: pulumi.Output<outputs.VmCloneV2SerialPort[]>;
    declare public /*out*/ readonly sources: pulumi.Output<outputs.VmCloneV2Source[]>;
    declare public /*out*/ readonly storageConfigs: pulumi.Output<outputs.VmCloneV2StorageConfig[]>;
    declare public /*out*/ readonly tenantId: pulumi.Output<string>;
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    declare public readonly vmExtId: pulumi.Output<string>;
    declare public /*out*/ readonly vtpmConfigs: pulumi.Output<outputs.VmCloneV2VtpmConfig[]>;

    /**
     * Create a VmCloneV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmCloneV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmCloneV2Args | VmCloneV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmCloneV2State | undefined;
            resourceInputs["apcConfigs"] = state?.apcConfigs;
            resourceInputs["biosUuid"] = state?.biosUuid;
            resourceInputs["bootConfigs"] = state?.bootConfigs;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["cdRoms"] = state?.cdRoms;
            resourceInputs["clusters"] = state?.clusters;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["disks"] = state?.disks;
            resourceInputs["enabledCpuFeatures"] = state?.enabledCpuFeatures;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["generationUuid"] = state?.generationUuid;
            resourceInputs["gpuses"] = state?.gpuses;
            resourceInputs["guestCustomizations"] = state?.guestCustomizations;
            resourceInputs["guestTools"] = state?.guestTools;
            resourceInputs["hardwareClockTimezone"] = state?.hardwareClockTimezone;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["isAgentVm"] = state?.isAgentVm;
            resourceInputs["isBrandingEnabled"] = state?.isBrandingEnabled;
            resourceInputs["isCpuHotplugEnabled"] = state?.isCpuHotplugEnabled;
            resourceInputs["isCpuPassthroughEnabled"] = state?.isCpuPassthroughEnabled;
            resourceInputs["isGpuConsoleEnabled"] = state?.isGpuConsoleEnabled;
            resourceInputs["isMemoryOvercommitEnabled"] = state?.isMemoryOvercommitEnabled;
            resourceInputs["isScsiControllerEnabled"] = state?.isScsiControllerEnabled;
            resourceInputs["isVcpuHardPinningEnabled"] = state?.isVcpuHardPinningEnabled;
            resourceInputs["isVgaConsoleEnabled"] = state?.isVgaConsoleEnabled;
            resourceInputs["links"] = state?.links;
            resourceInputs["machineType"] = state?.machineType;
            resourceInputs["memorySizeBytes"] = state?.memorySizeBytes;
            resourceInputs["name"] = state?.name;
            resourceInputs["nics"] = state?.nics;
            resourceInputs["numCoresPerSocket"] = state?.numCoresPerSocket;
            resourceInputs["numNumaNodes"] = state?.numNumaNodes;
            resourceInputs["numSockets"] = state?.numSockets;
            resourceInputs["numThreadsPerCore"] = state?.numThreadsPerCore;
            resourceInputs["ownershipInfos"] = state?.ownershipInfos;
            resourceInputs["powerState"] = state?.powerState;
            resourceInputs["protectionPolicyStates"] = state?.protectionPolicyStates;
            resourceInputs["protectionType"] = state?.protectionType;
            resourceInputs["serialPorts"] = state?.serialPorts;
            resourceInputs["sources"] = state?.sources;
            resourceInputs["storageConfigs"] = state?.storageConfigs;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["vmExtId"] = state?.vmExtId;
            resourceInputs["vtpmConfigs"] = state?.vtpmConfigs;
        } else {
            const args = argsOrState as VmCloneV2Args | undefined;
            if (args?.vmExtId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmExtId'");
            }
            resourceInputs["bootConfigs"] = args?.bootConfigs;
            resourceInputs["guestCustomizations"] = args?.guestCustomizations;
            resourceInputs["memorySizeBytes"] = args?.memorySizeBytes;
            resourceInputs["name"] = args?.name;
            resourceInputs["nics"] = args?.nics;
            resourceInputs["numCoresPerSocket"] = args?.numCoresPerSocket;
            resourceInputs["numSockets"] = args?.numSockets;
            resourceInputs["numThreadsPerCore"] = args?.numThreadsPerCore;
            resourceInputs["vmExtId"] = args?.vmExtId;
            resourceInputs["apcConfigs"] = undefined /*out*/;
            resourceInputs["biosUuid"] = undefined /*out*/;
            resourceInputs["categories"] = undefined /*out*/;
            resourceInputs["cdRoms"] = undefined /*out*/;
            resourceInputs["clusters"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["disks"] = undefined /*out*/;
            resourceInputs["enabledCpuFeatures"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["generationUuid"] = undefined /*out*/;
            resourceInputs["gpuses"] = undefined /*out*/;
            resourceInputs["guestTools"] = undefined /*out*/;
            resourceInputs["hardwareClockTimezone"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["isAgentVm"] = undefined /*out*/;
            resourceInputs["isBrandingEnabled"] = undefined /*out*/;
            resourceInputs["isCpuHotplugEnabled"] = undefined /*out*/;
            resourceInputs["isCpuPassthroughEnabled"] = undefined /*out*/;
            resourceInputs["isGpuConsoleEnabled"] = undefined /*out*/;
            resourceInputs["isMemoryOvercommitEnabled"] = undefined /*out*/;
            resourceInputs["isScsiControllerEnabled"] = undefined /*out*/;
            resourceInputs["isVcpuHardPinningEnabled"] = undefined /*out*/;
            resourceInputs["isVgaConsoleEnabled"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["machineType"] = undefined /*out*/;
            resourceInputs["numNumaNodes"] = undefined /*out*/;
            resourceInputs["ownershipInfos"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["protectionPolicyStates"] = undefined /*out*/;
            resourceInputs["protectionType"] = undefined /*out*/;
            resourceInputs["serialPorts"] = undefined /*out*/;
            resourceInputs["sources"] = undefined /*out*/;
            resourceInputs["storageConfigs"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vtpmConfigs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmCloneV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmCloneV2 resources.
 */
export interface VmCloneV2State {
    apcConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2ApcConfig>[]>;
    biosUuid?: pulumi.Input<string>;
    bootConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2BootConfig>[]>;
    categories?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Category>[]>;
    cdRoms?: pulumi.Input<pulumi.Input<inputs.VmCloneV2CdRom>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Cluster>[]>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disks?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Disk>[]>;
    enabledCpuFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    extId?: pulumi.Input<string>;
    generationUuid?: pulumi.Input<string>;
    gpuses?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Gpus>[]>;
    guestCustomizations?: pulumi.Input<pulumi.Input<inputs.VmCloneV2GuestCustomization>[]>;
    guestTools?: pulumi.Input<pulumi.Input<inputs.VmCloneV2GuestTool>[]>;
    hardwareClockTimezone?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Host>[]>;
    isAgentVm?: pulumi.Input<boolean>;
    isBrandingEnabled?: pulumi.Input<boolean>;
    isCpuHotplugEnabled?: pulumi.Input<boolean>;
    isCpuPassthroughEnabled?: pulumi.Input<boolean>;
    isGpuConsoleEnabled?: pulumi.Input<boolean>;
    isMemoryOvercommitEnabled?: pulumi.Input<boolean>;
    isScsiControllerEnabled?: pulumi.Input<boolean>;
    isVcpuHardPinningEnabled?: pulumi.Input<boolean>;
    isVgaConsoleEnabled?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Link>[]>;
    machineType?: pulumi.Input<string>;
    memorySizeBytes?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nics?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Nic>[]>;
    numCoresPerSocket?: pulumi.Input<number>;
    numNumaNodes?: pulumi.Input<number>;
    numSockets?: pulumi.Input<number>;
    numThreadsPerCore?: pulumi.Input<number>;
    ownershipInfos?: pulumi.Input<pulumi.Input<inputs.VmCloneV2OwnershipInfo>[]>;
    powerState?: pulumi.Input<string>;
    protectionPolicyStates?: pulumi.Input<pulumi.Input<inputs.VmCloneV2ProtectionPolicyState>[]>;
    protectionType?: pulumi.Input<string>;
    serialPorts?: pulumi.Input<pulumi.Input<inputs.VmCloneV2SerialPort>[]>;
    sources?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Source>[]>;
    storageConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2StorageConfig>[]>;
    tenantId?: pulumi.Input<string>;
    updateTime?: pulumi.Input<string>;
    vmExtId?: pulumi.Input<string>;
    vtpmConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2VtpmConfig>[]>;
}

/**
 * The set of arguments for constructing a VmCloneV2 resource.
 */
export interface VmCloneV2Args {
    bootConfigs?: pulumi.Input<pulumi.Input<inputs.VmCloneV2BootConfig>[]>;
    guestCustomizations?: pulumi.Input<pulumi.Input<inputs.VmCloneV2GuestCustomization>[]>;
    memorySizeBytes?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nics?: pulumi.Input<pulumi.Input<inputs.VmCloneV2Nic>[]>;
    numCoresPerSocket?: pulumi.Input<number>;
    numSockets?: pulumi.Input<number>;
    numThreadsPerCore?: pulumi.Input<number>;
    vmExtId: pulumi.Input<string>;
}
