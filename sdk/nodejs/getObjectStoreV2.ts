// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get an Object store for the provided UUID
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = nutanix.getObjectStoreV2({
 *     extId: "95eb5f66-f547-4aea-9af8-b580e2060693",
 * });
 * ```
 */
export function getObjectStoreV2(args: GetObjectStoreV2Args, opts?: pulumi.InvokeOptions): Promise<GetObjectStoreV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getObjectStoreV2:getObjectStoreV2", {
        "extId": args.extId,
        "numWorkerNodes": args.numWorkerNodes,
    }, opts);
}

/**
 * A collection of arguments for invoking getObjectStoreV2.
 */
export interface GetObjectStoreV2Args {
    /**
     * -(Required) The UUID of the Object store.
     */
    extId: string;
    /**
     * - The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
     */
    numWorkerNodes?: number;
}

/**
 * A collection of values returned by getObjectStoreV2.
 */
export interface GetObjectStoreV2Result {
    /**
     * - A list of the UUIDs of the certificates of an Object store.
     */
    readonly certificateExtIds: string[];
    /**
     * - UUID of the AHV or ESXi cluster.
     */
    readonly clusterExtId: string;
    /**
     * - The time when the Object store was created.
     */
    readonly creationTime: string;
    /**
     * - The deployment version of the Object store.
     */
    readonly deploymentVersion: string;
    /**
     * - A brief description of the Object store.
     */
    readonly description: string;
    /**
     * - The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'.
     */
    readonly domain: string;
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * - The time when the Object store was last updated.
     */
    readonly lastUpdateTime: string;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetObjectStoreV2Link[];
    /**
     * - Metadata associated with this resource.
     */
    readonly metadatas: outputs.GetObjectStoreV2Metadata[];
    /**
     * - The name of the Object store.
     */
    readonly name: string;
    /**
     * - The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
     */
    readonly numWorkerNodes: number;
    /**
     * - A list of static IP addresses used as public IPs to access the Object store.
     */
    readonly publicNetworkIps: outputs.GetObjectStoreV2PublicNetworkIp[];
    /**
     * - Public network reference of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
     */
    readonly publicNetworkReference: string;
    /**
     * - The region in which the Object store is deployed.
     */
    readonly region: string;
    /**
     * - Enum for the state of the Object store.
     * | Enum                                   | Description                                                     |
     * |----------------------------------------|-----------------------------------------------------------------|
     * | `DEPLOYING_OBJECT_STORE`             | The Object store is being deployed.                             |
     * | `OBJECT_STORE_DEPLOYMENT_FAILED`     | The Object store deployment has failed.                         |
     * | `DELETING_OBJECT_STORE`              | A deployed Object store is being deleted.                       |
     * | `OBJECT_STORE_OPERATION_FAILED`      | There was an error while performing an operation on the Object store. |
     * | `UNDEPLOYED_OBJECT_STORE`            | The Object store is not deployed.                               |
     * | `OBJECT_STORE_OPERATION_PENDING`     | There is an ongoing operation on the Object store.              |
     * | `OBJECT_STORE_AVAILABLE`            | There are no ongoing operations on the deployed Object store.   |
     * | `OBJECT_STORE_CERT_CREATION_FAILED`  | Creating the Object store certificate has failed.               |
     * | `CREATING_OBJECT_STORE_CERT`         | A certificate is being created for the Object store.            |
     * | `OBJECT_STORE_DELETION_FAILED`       | There was an error deleting the Object store.                   |
     */
    readonly state: string;
    /**
     * - An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
     */
    readonly storageNetworkDnsIps: outputs.GetObjectStoreV2StorageNetworkDnsIp[];
    /**
     * - Reference to the Storage Network of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
     */
    readonly storageNetworkReference: string;
    /**
     * - An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
     */
    readonly storageNetworkVips: outputs.GetObjectStoreV2StorageNetworkVip[];
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
    /**
     * - Size of the Object store in GiB.
     */
    readonly totalCapacityGib: number;
}
/**
 * Get an Object store for the provided UUID
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = nutanix.getObjectStoreV2({
 *     extId: "95eb5f66-f547-4aea-9af8-b580e2060693",
 * });
 * ```
 */
export function getObjectStoreV2Output(args: GetObjectStoreV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetObjectStoreV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getObjectStoreV2:getObjectStoreV2", {
        "extId": args.extId,
        "numWorkerNodes": args.numWorkerNodes,
    }, opts);
}

/**
 * A collection of arguments for invoking getObjectStoreV2.
 */
export interface GetObjectStoreV2OutputArgs {
    /**
     * -(Required) The UUID of the Object store.
     */
    extId: pulumi.Input<string>;
    /**
     * - The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
     */
    numWorkerNodes?: pulumi.Input<number>;
}
