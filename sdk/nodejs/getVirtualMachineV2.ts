// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves configuration details for a Virtual Machine.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const vm = nutanix.getVirtualMachineV2({
 *     extId: "{{ ext_id of vm }}",
 * });
 * ```
 */
export function getVirtualMachineV2(args: GetVirtualMachineV2Args, opts?: pulumi.InvokeOptions): Promise<GetVirtualMachineV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getVirtualMachineV2:getVirtualMachineV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualMachineV2.
 */
export interface GetVirtualMachineV2Args {
    /**
     * Represents virtual machine UUID
     */
    extId: string;
}

/**
 * A collection of values returned by getVirtualMachineV2.
 */
export interface GetVirtualMachineV2Result {
    /**
     * Advanced Processor Compatibility configuration for the VM. Enabling this retains the CPU model for the VM across power cycles and migrations.
     */
    readonly apcConfigs: outputs.GetVirtualMachineV2ApcConfig[];
    readonly availabilityZones: outputs.GetVirtualMachineV2AvailabilityZone[];
    /**
     * BIOS UUID of the VM. It should be of type UUID.
     */
    readonly biosUuid: string;
    /**
     * Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
     */
    readonly bootConfigs: outputs.GetVirtualMachineV2BootConfig[];
    /**
     * Categories for the VM.
     */
    readonly categories: outputs.GetVirtualMachineV2Category[];
    /**
     * CD-ROMs attached to the VM.
     */
    readonly cdRoms: outputs.GetVirtualMachineV2CdRom[];
    /**
     * Reference to a cluster.
     */
    readonly clusters: outputs.GetVirtualMachineV2Cluster[];
    /**
     * VM creation time
     */
    readonly createTime: string;
    /**
     * VM description
     */
    readonly description: string;
    /**
     * Disks attached to the VM.
     */
    readonly disks: outputs.GetVirtualMachineV2Disk[];
    /**
     * The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor
     */
    readonly enabledCpuFeatures: string[];
    /**
     * A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * Generation UUID of the VM. It should be of type UUID.
     */
    readonly generationUuid: string;
    /**
     * GPUs attached to the VM.
     */
    readonly gpuses: outputs.GetVirtualMachineV2Gpus[];
    /**
     * Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
     */
    readonly guestCustomizations: outputs.GetVirtualMachineV2GuestCustomization[];
    /**
     * The details about Nutanix Guest Tools for a VM.
     */
    readonly guestTools: outputs.GetVirtualMachineV2GuestTool[];
    /**
     * VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
     */
    readonly hardwareClockTimezone: string;
    /**
     * Reference to the host, the VM is running on.
     */
    readonly hosts: outputs.GetVirtualMachineV2Host[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
     */
    readonly isAgentVm: boolean;
    /**
     * Indicates whether to remove AHV branding from VM firmware tables or not.
     */
    readonly isBrandingEnabled: boolean;
    /**
     * Indicates whether the VM CPU hotplug is enabled.
     */
    readonly isCpuHotplugEnabled: boolean;
    /**
     * Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
     */
    readonly isCpuPassthroughEnabled: boolean;
    /**
     * Indicates whether the vGPU console is enabled or not.
     */
    readonly isGpuConsoleEnabled: boolean;
    /**
     * Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
     */
    readonly isMemoryOvercommitEnabled: boolean;
    /**
     * Indicates whether the VM SCSI controller is enabled.
     */
    readonly isScsiControllerEnabled: boolean;
    /**
     * Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
     */
    readonly isVcpuHardPinningEnabled: boolean;
    /**
     * Indicates whether the VGA console should be disabled or not.
     */
    readonly isVgaConsoleEnabled: boolean;
    /**
     * Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
     */
    readonly machineType: string;
    /**
     * Memory size in bytes.
     */
    readonly memorySizeBytes: number;
    /**
     * Name of the GPU resource.
     */
    readonly name: string;
    /**
     * NICs attached to the VM.
     */
    readonly nics: outputs.GetVirtualMachineV2Nic[];
    /**
     * Number of cores per socket.
     */
    readonly numCoresPerSocket: number;
    /**
     * Number of NUMA nodes. 0 means NUMA is disabled.
     */
    readonly numNumaNodes: number;
    /**
     * Number of vCPU sockets.
     */
    readonly numSockets: number;
    /**
     * Number of threads per core
     */
    readonly numThreadsPerCore: number;
    /**
     * Ownership information for the VM.
     */
    readonly ownershipInfos: outputs.GetVirtualMachineV2OwnershipInfo[];
    readonly powerState: string;
    /**
     * Status of protection policy applied to this VM.
     */
    readonly protectionPolicyStates: outputs.GetVirtualMachineV2ProtectionPolicyState[];
    /**
     * The type of protection applied on a VM. PD_PROTECTED indicates a VM is protected using the Prism Element. RULE_PROTECTED indicates a VM protection using the Prism Central.
     */
    readonly protectionType: string;
    /**
     * Serial ports configured on the VM.
     */
    readonly serialPorts: outputs.GetVirtualMachineV2SerialPort[];
    /**
     * Reference to an entity that the VM should be cloned or created from
     */
    readonly sources: outputs.GetVirtualMachineV2Source[];
    /**
     * Storage configuration for VM disks
     */
    readonly storageConfigs: outputs.GetVirtualMachineV2StorageConfig[];
    /**
     * VM last updated time.
     */
    readonly updateTime: string;
    /**
     * Indicates how the vTPM for the VM should be configured.
     */
    readonly vtpmConfigs: outputs.GetVirtualMachineV2VtpmConfig[];
}
/**
 * Retrieves configuration details for a Virtual Machine.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const vm = nutanix.getVirtualMachineV2({
 *     extId: "{{ ext_id of vm }}",
 * });
 * ```
 */
export function getVirtualMachineV2Output(args: GetVirtualMachineV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVirtualMachineV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getVirtualMachineV2:getVirtualMachineV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualMachineV2.
 */
export interface GetVirtualMachineV2OutputArgs {
    /**
     * Represents virtual machine UUID
     */
    extId: pulumi.Input<string>;
}
