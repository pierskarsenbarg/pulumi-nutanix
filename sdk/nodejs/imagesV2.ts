// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImagesV2 extends pulumi.CustomResource {
    /**
     * Get an existing ImagesV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagesV2State, opts?: pulumi.CustomResourceOptions): ImagesV2 {
        return new ImagesV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/imagesV2:ImagesV2';

    /**
     * Returns true if the given object is an instance of ImagesV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagesV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagesV2.__pulumiType;
    }

    public readonly categoryExtIds!: pulumi.Output<string[]>;
    public readonly checksums!: pulumi.Output<outputs.ImagesV2Checksum[] | undefined>;
    public readonly clusterLocationExtIds!: pulumi.Output<string[]>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastUpdateTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly ownerExtId!: pulumi.Output<string>;
    public /*out*/ readonly placementPolicyStatuses!: pulumi.Output<outputs.ImagesV2PlacementPolicyStatus[]>;
    public /*out*/ readonly sizeBytes!: pulumi.Output<number>;
    public readonly sources!: pulumi.Output<outputs.ImagesV2Source[] | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ImagesV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImagesV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagesV2Args | ImagesV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagesV2State | undefined;
            resourceInputs["categoryExtIds"] = state ? state.categoryExtIds : undefined;
            resourceInputs["checksums"] = state ? state.checksums : undefined;
            resourceInputs["clusterLocationExtIds"] = state ? state.clusterLocationExtIds : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdateTime"] = state ? state.lastUpdateTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerExtId"] = state ? state.ownerExtId : undefined;
            resourceInputs["placementPolicyStatuses"] = state ? state.placementPolicyStatuses : undefined;
            resourceInputs["sizeBytes"] = state ? state.sizeBytes : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ImagesV2Args | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["categoryExtIds"] = args ? args.categoryExtIds : undefined;
            resourceInputs["checksums"] = args ? args.checksums : undefined;
            resourceInputs["clusterLocationExtIds"] = args ? args.clusterLocationExtIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lastUpdateTime"] = undefined /*out*/;
            resourceInputs["ownerExtId"] = undefined /*out*/;
            resourceInputs["placementPolicyStatuses"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagesV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImagesV2 resources.
 */
export interface ImagesV2State {
    categoryExtIds?: pulumi.Input<pulumi.Input<string>[]>;
    checksums?: pulumi.Input<pulumi.Input<inputs.ImagesV2Checksum>[]>;
    clusterLocationExtIds?: pulumi.Input<pulumi.Input<string>[]>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lastUpdateTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerExtId?: pulumi.Input<string>;
    placementPolicyStatuses?: pulumi.Input<pulumi.Input<inputs.ImagesV2PlacementPolicyStatus>[]>;
    sizeBytes?: pulumi.Input<number>;
    sources?: pulumi.Input<pulumi.Input<inputs.ImagesV2Source>[]>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImagesV2 resource.
 */
export interface ImagesV2Args {
    categoryExtIds?: pulumi.Input<pulumi.Input<string>[]>;
    checksums?: pulumi.Input<pulumi.Input<inputs.ImagesV2Checksum>[]>;
    clusterLocationExtIds?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.ImagesV2Source>[]>;
    type: pulumi.Input<string>;
}
