// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Describes the clone present in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const name = nutanix.getNdbClone({
 *     cloneName: "test-inst-tf-check",
 *     filters: [{
 *         detailed: "true",
 *     }],
 * });
 * ```
 */
export function getNdbClone(args?: GetNdbCloneArgs, opts?: pulumi.InvokeOptions): Promise<GetNdbCloneResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getNdbClone:getNdbClone", {
        "cloneId": args.cloneId,
        "cloneName": args.cloneName,
        "filters": args.filters,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getNdbClone.
 */
export interface GetNdbCloneArgs {
    /**
     * Clone id
     */
    cloneId?: string;
    /**
     * Clone Name
     */
    cloneName?: string;
    /**
     * Fetches info based on filter
     */
    filters?: inputs.GetNdbCloneFilter[];
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: inputs.GetNdbCloneTag[];
}

/**
 * A collection of values returned by getNdbClone.
 */
export interface GetNdbCloneResult {
    /**
     * clone or not
     */
    readonly clone: boolean;
    readonly cloneId?: string;
    readonly cloneName?: string;
    /**
     * clustered or not
     */
    readonly clustered: boolean;
    /**
     * database cluster type
     */
    readonly databaseClusterType: string;
    /**
     * database name
     */
    readonly databaseName: string;
    /**
     * database nodes associated with database instance
     */
    readonly databaseNodes: outputs.GetNdbCloneDatabaseNode[];
    /**
     * database status
     */
    readonly databaseStatus: string;
    /**
     * database for a cloned instance
     */
    readonly databases: {[key: string]: string};
    /**
     * date created for clone
     */
    readonly dateCreated: string;
    /**
     * last modified date for clone
     */
    readonly dateModified: string;
    /**
     * dbserver logical cluster
     */
    readonly dbserverLogicalCluster: {[key: string]: string};
    /**
     * dbserver logical cluster id
     */
    readonly dbserverLogicalClusterId: string;
    /**
     * cloned description
     */
    readonly description: string;
    readonly filters?: outputs.GetNdbCloneFilter[];
    /**
     * cloned id
     */
    readonly id: string;
    /**
     * cloned info
     */
    readonly infos: outputs.GetNdbCloneInfo[];
    /**
     * LCM Config
     */
    readonly lcmConfigs: outputs.GetNdbCloneLcmConfig[];
    /**
     * linked databases within database instance
     */
    readonly linkedDatabases: outputs.GetNdbCloneLinkedDatabase[];
    /**
     * Metric of clone
     */
    readonly metric: {[key: string]: string};
    /**
     * cloned name
     */
    readonly name: string;
    /**
     * parent database id
     */
    readonly parentDatabaseId: string;
    /**
     * parent source database id
     */
    readonly parentSourceDatabaseId: string;
    /**
     * parent time machine id
     */
    readonly parentTimeMachineId: string;
    /**
     * properties of clone
     */
    readonly properties: outputs.GetNdbCloneProperty[];
    /**
     * status of clone
     */
    readonly status: string;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    readonly tags: outputs.GetNdbCloneTag[];
    /**
     * time machine id
     */
    readonly timeMachineId: string;
    /**
     * Time machine info
     */
    readonly timeMachines: outputs.GetNdbCloneTimeMachine[];
    /**
     * time zone
     */
    readonly timeZone: string;
    /**
     * type
     */
    readonly type: string;
}
/**
 * Describes the clone present in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const name = nutanix.getNdbClone({
 *     cloneName: "test-inst-tf-check",
 *     filters: [{
 *         detailed: "true",
 *     }],
 * });
 * ```
 */
export function getNdbCloneOutput(args?: GetNdbCloneOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNdbCloneResult> {
    return pulumi.output(args).apply((a: any) => getNdbClone(a, opts))
}

/**
 * A collection of arguments for invoking getNdbClone.
 */
export interface GetNdbCloneOutputArgs {
    /**
     * Clone id
     */
    cloneId?: pulumi.Input<string>;
    /**
     * Clone Name
     */
    cloneName?: pulumi.Input<string>;
    /**
     * Fetches info based on filter
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetNdbCloneFilterArgs>[]>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GetNdbCloneTagArgs>[]>;
}
