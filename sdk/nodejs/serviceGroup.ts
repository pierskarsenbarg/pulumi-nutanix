// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create a service group based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const test = new nutanix.ServiceGroup("test", {
 *     description: "this is service group",
 *     serviceLists: [{
 *         protocol: "TCP",
 *         tcpPortRangeLists: [
 *             {
 *                 endPort: 22,
 *                 startPort: 22,
 *             },
 *             {
 *                 endPort: 2222,
 *                 startPort: 2222,
 *             },
 *         ],
 *     }],
 * });
 * ```
 */
export class ServiceGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServiceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceGroupState, opts?: pulumi.CustomResourceOptions): ServiceGroup {
        return new ServiceGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/serviceGroup:ServiceGroup';

    /**
     * Returns true if the given object is an instance of ServiceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceGroup.__pulumiType;
    }

    /**
     * - (Optional) Description of the service group
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * - (Required) Name of the service group
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
     */
    declare public readonly serviceLists: pulumi.Output<outputs.ServiceGroupServiceList[]>;
    /**
     * - (ReadOnly) boolean value to denote if the service group is system defined
     */
    declare public /*out*/ readonly systemDefined: pulumi.Output<boolean>;

    /**
     * Create a ServiceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceGroupArgs | ServiceGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceGroupState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["serviceLists"] = state?.serviceLists;
            resourceInputs["systemDefined"] = state?.systemDefined;
        } else {
            const args = argsOrState as ServiceGroupArgs | undefined;
            if (args?.serviceLists === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceLists'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["serviceLists"] = args?.serviceLists;
            resourceInputs["systemDefined"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceGroup resources.
 */
export interface ServiceGroupState {
    /**
     * - (Optional) Description of the service group
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) Name of the service group
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
     */
    serviceLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceList>[]>;
    /**
     * - (ReadOnly) boolean value to denote if the service group is system defined
     */
    systemDefined?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServiceGroup resource.
 */
export interface ServiceGroupArgs {
    /**
     * - (Optional) Description of the service group
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) Name of the service group
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details
     */
    serviceLists: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceList>[]>;
}
