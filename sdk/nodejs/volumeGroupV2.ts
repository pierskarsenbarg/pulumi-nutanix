// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to Create a new Volume Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const volumeGroupExample = new nutanix.VolumeGroupV2("volumeGroupExample", {
 *     description: "Test Create Volume group with spec",
 *     shouldLoadBalanceVmAttachments: false,
 *     sharingStatus: "SHARED",
 *     targetName: "volumegroup-test-001234",
 *     createdBy: "example",
 *     clusterReference: "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
 *     iscsiFeatures: [{
 *         enabledAuthentications: "CHAP",
 *         targetSecret: "123456789abc",
 *     }],
 *     storageFeatures: [{
 *         flashModes: [{
 *             isEnabled: true,
 *         }],
 *     }],
 *     usageType: "USER",
 *     isHidden: false,
 * });
 * ```
 */
export class VolumeGroupV2 extends pulumi.CustomResource {
    /**
     * Get an existing VolumeGroupV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeGroupV2State, opts?: pulumi.CustomResourceOptions): VolumeGroupV2 {
        return new VolumeGroupV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/volumeGroupV2:VolumeGroupV2';

    /**
     * Returns true if the given object is an instance of VolumeGroupV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeGroupV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeGroupV2.__pulumiType;
    }

    /**
     * -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
     * - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
     * - NONE : Volume Group has no attachment.
     * - DIRECT : Volume Group has a VM attachment.
     */
    declare public readonly attachmentType: pulumi.Output<string | undefined>;
    /**
     * -(Required) The UUID of the cluster that will host the Volume Group.
     */
    declare public readonly clusterReference: pulumi.Output<string>;
    /**
     * -(Optional) Service/user who created this Volume Group.
     */
    declare public readonly createdBy: pulumi.Output<string | undefined>;
    /**
     * -(Optional) Volume Group description. This is an optional field.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * -(Optional) A list of Volume Disks to be attached to the Volume Group.
     */
    declare public readonly disks: pulumi.Output<outputs.VolumeGroupV2Disk[] | undefined>;
    /**
     * -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
     */
    declare public readonly enabledAuthentications: pulumi.Output<string | undefined>;
    /**
     * -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
     */
    declare public /*out*/ readonly extId: pulumi.Output<string>;
    /**
     * -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
     */
    declare public readonly isHidden: pulumi.Output<boolean | undefined>;
    /**
     * -(Optional) iSCSI specific settings for the Volume Group.
     */
    declare public readonly iscsiFeatures: pulumi.Output<outputs.VolumeGroupV2IscsiFeature[]>;
    /**
     * -(Required) Volume Group name. This is an optional field.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * -(Optional) Type of protocol to be used for Volume Group. Valid values are :
     * - NOT_ASSIGNED :  Volume Group does not use any protocol.
     * - ISCSI : Volume Group uses iSCSI protocol.
     * - NVMF : Volume Group uses NVMf protocol.
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
     */
    declare public readonly sharingStatus: pulumi.Output<string | undefined>;
    /**
     * -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
     */
    declare public readonly shouldLoadBalanceVmAttachments: pulumi.Output<boolean | undefined>;
    /**
     * -(Optional) Storage optimization features which must be enabled on the Volume Group.
     */
    declare public readonly storageFeatures: pulumi.Output<outputs.VolumeGroupV2StorageFeature[] | undefined>;
    /**
     * -(Optional) Name of the external client target that will be visible and accessible to the client.
     */
    declare public readonly targetName: pulumi.Output<string>;
    /**
     * The specifications contain the target prefix for external clients as the value. This is an optional field.
     */
    declare public readonly targetPrefix: pulumi.Output<string | undefined>;
    /**
     * -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
     */
    declare public readonly usageType: pulumi.Output<string | undefined>;

    /**
     * Create a VolumeGroupV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeGroupV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeGroupV2Args | VolumeGroupV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeGroupV2State | undefined;
            resourceInputs["attachmentType"] = state?.attachmentType;
            resourceInputs["clusterReference"] = state?.clusterReference;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["description"] = state?.description;
            resourceInputs["disks"] = state?.disks;
            resourceInputs["enabledAuthentications"] = state?.enabledAuthentications;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["isHidden"] = state?.isHidden;
            resourceInputs["iscsiFeatures"] = state?.iscsiFeatures;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["sharingStatus"] = state?.sharingStatus;
            resourceInputs["shouldLoadBalanceVmAttachments"] = state?.shouldLoadBalanceVmAttachments;
            resourceInputs["storageFeatures"] = state?.storageFeatures;
            resourceInputs["targetName"] = state?.targetName;
            resourceInputs["targetPrefix"] = state?.targetPrefix;
            resourceInputs["usageType"] = state?.usageType;
        } else {
            const args = argsOrState as VolumeGroupV2Args | undefined;
            if (args?.clusterReference === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterReference'");
            }
            resourceInputs["attachmentType"] = args?.attachmentType;
            resourceInputs["clusterReference"] = args?.clusterReference;
            resourceInputs["createdBy"] = args?.createdBy;
            resourceInputs["description"] = args?.description;
            resourceInputs["disks"] = args?.disks;
            resourceInputs["enabledAuthentications"] = args?.enabledAuthentications;
            resourceInputs["isHidden"] = args?.isHidden;
            resourceInputs["iscsiFeatures"] = args?.iscsiFeatures;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["sharingStatus"] = args?.sharingStatus;
            resourceInputs["shouldLoadBalanceVmAttachments"] = args?.shouldLoadBalanceVmAttachments;
            resourceInputs["storageFeatures"] = args?.storageFeatures;
            resourceInputs["targetName"] = args?.targetName;
            resourceInputs["targetPrefix"] = args?.targetPrefix;
            resourceInputs["usageType"] = args?.usageType;
            resourceInputs["extId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeGroupV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeGroupV2 resources.
 */
export interface VolumeGroupV2State {
    /**
     * -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
     * - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
     * - NONE : Volume Group has no attachment.
     * - DIRECT : Volume Group has a VM attachment.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * -(Required) The UUID of the cluster that will host the Volume Group.
     */
    clusterReference?: pulumi.Input<string>;
    /**
     * -(Optional) Service/user who created this Volume Group.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * -(Optional) Volume Group description. This is an optional field.
     */
    description?: pulumi.Input<string>;
    /**
     * -(Optional) A list of Volume Disks to be attached to the Volume Group.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VolumeGroupV2Disk>[]>;
    /**
     * -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
     */
    enabledAuthentications?: pulumi.Input<string>;
    /**
     * -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * -(Optional) iSCSI specific settings for the Volume Group.
     */
    iscsiFeatures?: pulumi.Input<pulumi.Input<inputs.VolumeGroupV2IscsiFeature>[]>;
    /**
     * -(Required) Volume Group name. This is an optional field.
     */
    name?: pulumi.Input<string>;
    /**
     * -(Optional) Type of protocol to be used for Volume Group. Valid values are :
     * - NOT_ASSIGNED :  Volume Group does not use any protocol.
     * - ISCSI : Volume Group uses iSCSI protocol.
     * - NVMF : Volume Group uses NVMf protocol.
     */
    protocol?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
     */
    sharingStatus?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
     */
    shouldLoadBalanceVmAttachments?: pulumi.Input<boolean>;
    /**
     * -(Optional) Storage optimization features which must be enabled on the Volume Group.
     */
    storageFeatures?: pulumi.Input<pulumi.Input<inputs.VolumeGroupV2StorageFeature>[]>;
    /**
     * -(Optional) Name of the external client target that will be visible and accessible to the client.
     */
    targetName?: pulumi.Input<string>;
    /**
     * The specifications contain the target prefix for external clients as the value. This is an optional field.
     */
    targetPrefix?: pulumi.Input<string>;
    /**
     * -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
     */
    usageType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeGroupV2 resource.
 */
export interface VolumeGroupV2Args {
    /**
     * -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
     * - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
     * - NONE : Volume Group has no attachment.
     * - DIRECT : Volume Group has a VM attachment.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * -(Required) The UUID of the cluster that will host the Volume Group.
     */
    clusterReference: pulumi.Input<string>;
    /**
     * -(Optional) Service/user who created this Volume Group.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * -(Optional) Volume Group description. This is an optional field.
     */
    description?: pulumi.Input<string>;
    /**
     * -(Optional) A list of Volume Disks to be attached to the Volume Group.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VolumeGroupV2Disk>[]>;
    /**
     * -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
     */
    enabledAuthentications?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * -(Optional) iSCSI specific settings for the Volume Group.
     */
    iscsiFeatures?: pulumi.Input<pulumi.Input<inputs.VolumeGroupV2IscsiFeature>[]>;
    /**
     * -(Required) Volume Group name. This is an optional field.
     */
    name?: pulumi.Input<string>;
    /**
     * -(Optional) Type of protocol to be used for Volume Group. Valid values are :
     * - NOT_ASSIGNED :  Volume Group does not use any protocol.
     * - ISCSI : Volume Group uses iSCSI protocol.
     * - NVMF : Volume Group uses NVMf protocol.
     */
    protocol?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
     */
    sharingStatus?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
     */
    shouldLoadBalanceVmAttachments?: pulumi.Input<boolean>;
    /**
     * -(Optional) Storage optimization features which must be enabled on the Volume Group.
     */
    storageFeatures?: pulumi.Input<pulumi.Input<inputs.VolumeGroupV2StorageFeature>[]>;
    /**
     * -(Optional) Name of the external client target that will be visible and accessible to the client.
     */
    targetName?: pulumi.Input<string>;
    /**
     * The specifications contain the target prefix for external clients as the value. This is an optional field.
     */
    targetPrefix?: pulumi.Input<string>;
    /**
     * -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
     */
    usageType?: pulumi.Input<string>;
}
