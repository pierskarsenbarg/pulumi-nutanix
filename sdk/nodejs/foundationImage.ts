// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Uploads hypervisor or AOS image to foundation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const nos_image = new nutanix.FoundationImage("nos-image", {
 *     filename: "nos_image.tar",
 *     installerType: "nos",
 *     source: "../../../files/nutanix_installer_x86_64.tar",
 * });
 * const hypervisor_image = new nutanix.FoundationImage("hypervisor-image", {
 *     filename: "esx_image.iso",
 *     installerType: "esx",
 *     source: "../../../files/VMware-Installer.x86_64.iso",
 * });
 * ```
 * ## lifecycle
 *
 * * `Update` : - Resource will trigger new resource create call for any kind of update in resource config and delete existing image from foundation vm.
 *
 * See detailed information in [Nutanix Foundation Image](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjM0MDQ-upload-hypervisor-or-aos-image-to-foundation).
 */
export class FoundationImage extends pulumi.CustomResource {
    /**
     * Get an existing FoundationImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FoundationImageState, opts?: pulumi.CustomResourceOptions): FoundationImage {
        return new FoundationImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/foundationImage:FoundationImage';

    /**
     * Returns true if the given object is an instance of FoundationImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FoundationImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FoundationImage.__pulumiType;
    }

    public readonly filename!: pulumi.Output<string>;
    public /*out*/ readonly inWhitelist!: pulumi.Output<boolean>;
    public readonly installerType!: pulumi.Output<string>;
    public /*out*/ readonly md5sum!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;

    /**
     * Create a FoundationImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FoundationImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FoundationImageArgs | FoundationImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FoundationImageState | undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["inWhitelist"] = state ? state.inWhitelist : undefined;
            resourceInputs["installerType"] = state ? state.installerType : undefined;
            resourceInputs["md5sum"] = state ? state.md5sum : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
        } else {
            const args = argsOrState as FoundationImageArgs | undefined;
            if ((!args || args.filename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filename'");
            }
            if ((!args || args.installerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'installerType'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["installerType"] = args ? args.installerType : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["inWhitelist"] = undefined /*out*/;
            resourceInputs["md5sum"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FoundationImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FoundationImage resources.
 */
export interface FoundationImageState {
    filename?: pulumi.Input<string>;
    inWhitelist?: pulumi.Input<boolean>;
    installerType?: pulumi.Input<string>;
    md5sum?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FoundationImage resource.
 */
export interface FoundationImageArgs {
    filename: pulumi.Input<string>;
    installerType: pulumi.Input<string>;
    source: pulumi.Input<string>;
}
