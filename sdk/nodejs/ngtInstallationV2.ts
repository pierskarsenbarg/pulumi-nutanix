// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix resource to Installs Nutanix Guest Tools in a Virtual Machine by using the provided credentials.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = new nutanix.NgtInstallationV2("example", {
 *     capablities: ["VSS_SNAPSHOT"],
 *     credential: {
 *         password: "pass.1234567890",
 *         username: "username",
 *     },
 *     extId: "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
 *     rebootPreference: {
 *         scheduleType: "IMMEDIATE",
 *     },
 * });
 * ```
 */
export class NgtInstallationV2 extends pulumi.CustomResource {
    /**
     * Get an existing NgtInstallationV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgtInstallationV2State, opts?: pulumi.CustomResourceOptions): NgtInstallationV2 {
        return new NgtInstallationV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ngtInstallationV2:NgtInstallationV2';

    /**
     * Returns true if the given object is an instance of NgtInstallationV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgtInstallationV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgtInstallationV2.__pulumiType;
    }

    /**
     * Version of Nutanix Guest Tools available on the cluster.
     */
    declare public /*out*/ readonly availableVersion: pulumi.Output<string>;
    /**
     * The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
     */
    declare public readonly capablities: pulumi.Output<string[]>;
    /**
     * Sign in credentials for the server.
     */
    declare public readonly credential: pulumi.Output<outputs.NgtInstallationV2Credential | undefined>;
    /**
     * uuid of the Virtual Machine.
     */
    declare public readonly extId: pulumi.Output<string>;
    /**
     * Version of the operating system on the VM.
     */
    declare public /*out*/ readonly guestOsVersion: pulumi.Output<string>;
    /**
     * Indicates whether Nutanix Guest Tools is enabled or not.
     */
    declare public readonly isEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether Nutanix Guest Tools is installed on the VM or not.
     */
    declare public /*out*/ readonly isInstalled: pulumi.Output<boolean>;
    /**
     * Indicates whether Nutanix Guest Tools ISO is inserted or not.
     */
    declare public /*out*/ readonly isIsoInserted: pulumi.Output<boolean>;
    /**
     * Indicates whether the communication from VM to CVM is active or not.
     */
    declare public /*out*/ readonly isReachable: pulumi.Output<boolean>;
    /**
     * Indicates whether the VM mobility drivers are installed on the VM or not.
     */
    declare public /*out*/ readonly isVmMobilityDriversInstalled: pulumi.Output<boolean>;
    /**
     * Indicates whether the VM is configured to take VSS snapshots through NGT or not.
     */
    declare public /*out*/ readonly isVssSnapshotCapable: pulumi.Output<boolean>;
    /**
     * The restart schedule after installing or upgrading Nutanix Guest Tools.
     */
    declare public readonly rebootPreference: pulumi.Output<outputs.NgtInstallationV2RebootPreference | undefined>;
    /**
     * Version of Nutanix Guest Tools installed on the VM.
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;

    /**
     * Create a NgtInstallationV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgtInstallationV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgtInstallationV2Args | NgtInstallationV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgtInstallationV2State | undefined;
            resourceInputs["availableVersion"] = state?.availableVersion;
            resourceInputs["capablities"] = state?.capablities;
            resourceInputs["credential"] = state?.credential;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["guestOsVersion"] = state?.guestOsVersion;
            resourceInputs["isEnabled"] = state?.isEnabled;
            resourceInputs["isInstalled"] = state?.isInstalled;
            resourceInputs["isIsoInserted"] = state?.isIsoInserted;
            resourceInputs["isReachable"] = state?.isReachable;
            resourceInputs["isVmMobilityDriversInstalled"] = state?.isVmMobilityDriversInstalled;
            resourceInputs["isVssSnapshotCapable"] = state?.isVssSnapshotCapable;
            resourceInputs["rebootPreference"] = state?.rebootPreference;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as NgtInstallationV2Args | undefined;
            if (args?.extId === undefined && !opts.urn) {
                throw new Error("Missing required property 'extId'");
            }
            resourceInputs["capablities"] = args?.capablities;
            resourceInputs["credential"] = args?.credential;
            resourceInputs["extId"] = args?.extId;
            resourceInputs["isEnabled"] = args?.isEnabled;
            resourceInputs["rebootPreference"] = args?.rebootPreference;
            resourceInputs["availableVersion"] = undefined /*out*/;
            resourceInputs["guestOsVersion"] = undefined /*out*/;
            resourceInputs["isInstalled"] = undefined /*out*/;
            resourceInputs["isIsoInserted"] = undefined /*out*/;
            resourceInputs["isReachable"] = undefined /*out*/;
            resourceInputs["isVmMobilityDriversInstalled"] = undefined /*out*/;
            resourceInputs["isVssSnapshotCapable"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgtInstallationV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgtInstallationV2 resources.
 */
export interface NgtInstallationV2State {
    /**
     * Version of Nutanix Guest Tools available on the cluster.
     */
    availableVersion?: pulumi.Input<string>;
    /**
     * The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
     */
    capablities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sign in credentials for the server.
     */
    credential?: pulumi.Input<inputs.NgtInstallationV2Credential>;
    /**
     * uuid of the Virtual Machine.
     */
    extId?: pulumi.Input<string>;
    /**
     * Version of the operating system on the VM.
     */
    guestOsVersion?: pulumi.Input<string>;
    /**
     * Indicates whether Nutanix Guest Tools is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether Nutanix Guest Tools is installed on the VM or not.
     */
    isInstalled?: pulumi.Input<boolean>;
    /**
     * Indicates whether Nutanix Guest Tools ISO is inserted or not.
     */
    isIsoInserted?: pulumi.Input<boolean>;
    /**
     * Indicates whether the communication from VM to CVM is active or not.
     */
    isReachable?: pulumi.Input<boolean>;
    /**
     * Indicates whether the VM mobility drivers are installed on the VM or not.
     */
    isVmMobilityDriversInstalled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the VM is configured to take VSS snapshots through NGT or not.
     */
    isVssSnapshotCapable?: pulumi.Input<boolean>;
    /**
     * The restart schedule after installing or upgrading Nutanix Guest Tools.
     */
    rebootPreference?: pulumi.Input<inputs.NgtInstallationV2RebootPreference>;
    /**
     * Version of Nutanix Guest Tools installed on the VM.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgtInstallationV2 resource.
 */
export interface NgtInstallationV2Args {
    /**
     * The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
     */
    capablities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sign in credentials for the server.
     */
    credential?: pulumi.Input<inputs.NgtInstallationV2Credential>;
    /**
     * uuid of the Virtual Machine.
     */
    extId: pulumi.Input<string>;
    /**
     * Indicates whether Nutanix Guest Tools is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The restart schedule after installing or upgrading Nutanix Guest Tools.
     */
    rebootPreference?: pulumi.Input<inputs.NgtInstallationV2RebootPreference>;
}
