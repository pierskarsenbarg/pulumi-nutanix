// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./accessControlPolicy";
export * from "./addressGroup";
export * from "./categoryKey";
export * from "./categoryValue";
export * from "./floatingIp";
export * from "./foundationCentralApiKeys";
export * from "./foundationCentralImageCluster";
export * from "./foundationImage";
export * from "./foundationImageNodes";
export * from "./foundationIpmiConfig";
export * from "./getAccessControlPolicies";
export * from "./getAccessControlPolicy";
export * from "./getAddressGroup";
export * from "./getAddressGroups";
export * from "./getAssertHelper";
export * from "./getCategoryKey";
export * from "./getCluster";
export * from "./getClusters";
export * from "./getFloatingIp";
export * from "./getFloatingIps";
export * from "./getFoundationCentralApiKeys";
export * from "./getFoundationCentralClusterDetails";
export * from "./getFoundationCentralImagedClustersList";
export * from "./getFoundationCentralImagedNodeDetails";
export * from "./getFoundationCentralImagedNodesList";
export * from "./getFoundationCentralListApiKeys";
export * from "./getFoundationDiscoverNodes";
export * from "./getFoundationHypervisorIsos";
export * from "./getFoundationNodPackages";
export * from "./getFoundationNodeNetworkDetails";
export * from "./getHost";
export * from "./getHosts";
export * from "./getImage";
export * from "./getKarbonCluster";
export * from "./getKarbonClusterKubeConfig";
export * from "./getKarbonClusterSsh";
export * from "./getKarbonClusters";
export * from "./getKarbonPrivateRegistries";
export * from "./getKarbonPrivateRegistry";
export * from "./getNetworkSecurityRule";
export * from "./getPbr";
export * from "./getPbrs";
export * from "./getPermission";
export * from "./getPermissions";
export * from "./getProject";
export * from "./getProjects";
export * from "./getProtectionRule";
export * from "./getProtectionRules";
export * from "./getRecoveryPlan";
export * from "./getRecoveryPlans";
export * from "./getRole";
export * from "./getRoles";
export * from "./getServiceGroup";
export * from "./getServiceGroups";
export * from "./getStaticRoutes";
export * from "./getSubnet";
export * from "./getSubnets";
export * from "./getUser";
export * from "./getUserGroup";
export * from "./getUserGroups";
export * from "./getUsers";
export * from "./getVirtualMachine";
export * from "./getVpc";
export * from "./getVpcs";
export * from "./image";
export * from "./karbonCluster";
export * from "./karbonPrivateRegistry";
export * from "./networkSecurityRule";
export * from "./pbr";
export * from "./project";
export * from "./protectionRule";
export * from "./provider";
export * from "./recoveryPlan";
export * from "./role";
export * from "./serviceGroup";
export * from "./staticRoutes";
export * from "./subnet";
export * from "./user";
export * from "./virtualMachine";
export * from "./vpc";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AccessControlPolicy } from "./accessControlPolicy";
import { AddressGroup } from "./addressGroup";
import { CategoryKey } from "./categoryKey";
import { CategoryValue } from "./categoryValue";
import { FloatingIp } from "./floatingIp";
import { FoundationCentralApiKeys } from "./foundationCentralApiKeys";
import { FoundationCentralImageCluster } from "./foundationCentralImageCluster";
import { FoundationImage } from "./foundationImage";
import { FoundationImageNodes } from "./foundationImageNodes";
import { FoundationIpmiConfig } from "./foundationIpmiConfig";
import { Image } from "./image";
import { KarbonCluster } from "./karbonCluster";
import { KarbonPrivateRegistry } from "./karbonPrivateRegistry";
import { NetworkSecurityRule } from "./networkSecurityRule";
import { Pbr } from "./pbr";
import { Project } from "./project";
import { ProtectionRule } from "./protectionRule";
import { RecoveryPlan } from "./recoveryPlan";
import { Role } from "./role";
import { ServiceGroup } from "./serviceGroup";
import { StaticRoutes } from "./staticRoutes";
import { Subnet } from "./subnet";
import { User } from "./user";
import { VirtualMachine } from "./virtualMachine";
import { Vpc } from "./vpc";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nutanix:index/accessControlPolicy:AccessControlPolicy":
                return new AccessControlPolicy(name, <any>undefined, { urn })
            case "nutanix:index/addressGroup:AddressGroup":
                return new AddressGroup(name, <any>undefined, { urn })
            case "nutanix:index/categoryKey:CategoryKey":
                return new CategoryKey(name, <any>undefined, { urn })
            case "nutanix:index/categoryValue:CategoryValue":
                return new CategoryValue(name, <any>undefined, { urn })
            case "nutanix:index/floatingIp:FloatingIp":
                return new FloatingIp(name, <any>undefined, { urn })
            case "nutanix:index/foundationCentralApiKeys:FoundationCentralApiKeys":
                return new FoundationCentralApiKeys(name, <any>undefined, { urn })
            case "nutanix:index/foundationCentralImageCluster:FoundationCentralImageCluster":
                return new FoundationCentralImageCluster(name, <any>undefined, { urn })
            case "nutanix:index/foundationImage:FoundationImage":
                return new FoundationImage(name, <any>undefined, { urn })
            case "nutanix:index/foundationImageNodes:FoundationImageNodes":
                return new FoundationImageNodes(name, <any>undefined, { urn })
            case "nutanix:index/foundationIpmiConfig:FoundationIpmiConfig":
                return new FoundationIpmiConfig(name, <any>undefined, { urn })
            case "nutanix:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "nutanix:index/karbonCluster:KarbonCluster":
                return new KarbonCluster(name, <any>undefined, { urn })
            case "nutanix:index/karbonPrivateRegistry:KarbonPrivateRegistry":
                return new KarbonPrivateRegistry(name, <any>undefined, { urn })
            case "nutanix:index/networkSecurityRule:NetworkSecurityRule":
                return new NetworkSecurityRule(name, <any>undefined, { urn })
            case "nutanix:index/pbr:Pbr":
                return new Pbr(name, <any>undefined, { urn })
            case "nutanix:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "nutanix:index/protectionRule:ProtectionRule":
                return new ProtectionRule(name, <any>undefined, { urn })
            case "nutanix:index/recoveryPlan:RecoveryPlan":
                return new RecoveryPlan(name, <any>undefined, { urn })
            case "nutanix:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "nutanix:index/serviceGroup:ServiceGroup":
                return new ServiceGroup(name, <any>undefined, { urn })
            case "nutanix:index/staticRoutes:StaticRoutes":
                return new StaticRoutes(name, <any>undefined, { urn })
            case "nutanix:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "nutanix:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "nutanix:index/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "nutanix:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nutanix", "index/accessControlPolicy", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/addressGroup", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/categoryKey", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/categoryValue", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/floatingIp", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationCentralApiKeys", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationCentralImageCluster", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationImage", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationImageNodes", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationIpmiConfig", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/image", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/karbonCluster", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/karbonPrivateRegistry", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/networkSecurityRule", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/pbr", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/project", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/protectionRule", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/recoveryPlan", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/role", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/serviceGroup", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/staticRoutes", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/subnet", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/user", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/virtualMachine", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/vpc", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("nutanix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nutanix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
