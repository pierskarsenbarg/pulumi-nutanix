// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessControlPolicyArgs, AccessControlPolicyState } from "./accessControlPolicy";
export type AccessControlPolicy = import("./accessControlPolicy").AccessControlPolicy;
export const AccessControlPolicy: typeof import("./accessControlPolicy").AccessControlPolicy = null as any;
utilities.lazyLoad(exports, ["AccessControlPolicy"], () => require("./accessControlPolicy"));

export { AddressGroupArgs, AddressGroupState } from "./addressGroup";
export type AddressGroup = import("./addressGroup").AddressGroup;
export const AddressGroup: typeof import("./addressGroup").AddressGroup = null as any;
utilities.lazyLoad(exports, ["AddressGroup"], () => require("./addressGroup"));

export { CategoryKeyArgs, CategoryKeyState } from "./categoryKey";
export type CategoryKey = import("./categoryKey").CategoryKey;
export const CategoryKey: typeof import("./categoryKey").CategoryKey = null as any;
utilities.lazyLoad(exports, ["CategoryKey"], () => require("./categoryKey"));

export { CategoryValueArgs, CategoryValueState } from "./categoryValue";
export type CategoryValue = import("./categoryValue").CategoryValue;
export const CategoryValue: typeof import("./categoryValue").CategoryValue = null as any;
utilities.lazyLoad(exports, ["CategoryValue"], () => require("./categoryValue"));

export { FloatingIpArgs, FloatingIpState } from "./floatingIp";
export type FloatingIp = import("./floatingIp").FloatingIp;
export const FloatingIp: typeof import("./floatingIp").FloatingIp = null as any;
utilities.lazyLoad(exports, ["FloatingIp"], () => require("./floatingIp"));

export { FoundationCentralApiKeysArgs, FoundationCentralApiKeysState } from "./foundationCentralApiKeys";
export type FoundationCentralApiKeys = import("./foundationCentralApiKeys").FoundationCentralApiKeys;
export const FoundationCentralApiKeys: typeof import("./foundationCentralApiKeys").FoundationCentralApiKeys = null as any;
utilities.lazyLoad(exports, ["FoundationCentralApiKeys"], () => require("./foundationCentralApiKeys"));

export { FoundationCentralImageClusterArgs, FoundationCentralImageClusterState } from "./foundationCentralImageCluster";
export type FoundationCentralImageCluster = import("./foundationCentralImageCluster").FoundationCentralImageCluster;
export const FoundationCentralImageCluster: typeof import("./foundationCentralImageCluster").FoundationCentralImageCluster = null as any;
utilities.lazyLoad(exports, ["FoundationCentralImageCluster"], () => require("./foundationCentralImageCluster"));

export { FoundationImageArgs, FoundationImageState } from "./foundationImage";
export type FoundationImage = import("./foundationImage").FoundationImage;
export const FoundationImage: typeof import("./foundationImage").FoundationImage = null as any;
utilities.lazyLoad(exports, ["FoundationImage"], () => require("./foundationImage"));

export { FoundationImageNodesArgs, FoundationImageNodesState } from "./foundationImageNodes";
export type FoundationImageNodes = import("./foundationImageNodes").FoundationImageNodes;
export const FoundationImageNodes: typeof import("./foundationImageNodes").FoundationImageNodes = null as any;
utilities.lazyLoad(exports, ["FoundationImageNodes"], () => require("./foundationImageNodes"));

export { FoundationIpmiConfigArgs, FoundationIpmiConfigState } from "./foundationIpmiConfig";
export type FoundationIpmiConfig = import("./foundationIpmiConfig").FoundationIpmiConfig;
export const FoundationIpmiConfig: typeof import("./foundationIpmiConfig").FoundationIpmiConfig = null as any;
utilities.lazyLoad(exports, ["FoundationIpmiConfig"], () => require("./foundationIpmiConfig"));

export { GetAccessControlPoliciesArgs, GetAccessControlPoliciesResult, GetAccessControlPoliciesOutputArgs } from "./getAccessControlPolicies";
export const getAccessControlPolicies: typeof import("./getAccessControlPolicies").getAccessControlPolicies = null as any;
export const getAccessControlPoliciesOutput: typeof import("./getAccessControlPolicies").getAccessControlPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlPolicies","getAccessControlPoliciesOutput"], () => require("./getAccessControlPolicies"));

export { GetAccessControlPolicyArgs, GetAccessControlPolicyResult, GetAccessControlPolicyOutputArgs } from "./getAccessControlPolicy";
export const getAccessControlPolicy: typeof import("./getAccessControlPolicy").getAccessControlPolicy = null as any;
export const getAccessControlPolicyOutput: typeof import("./getAccessControlPolicy").getAccessControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlPolicy","getAccessControlPolicyOutput"], () => require("./getAccessControlPolicy"));

export { GetAddressGroupArgs, GetAddressGroupResult, GetAddressGroupOutputArgs } from "./getAddressGroup";
export const getAddressGroup: typeof import("./getAddressGroup").getAddressGroup = null as any;
export const getAddressGroupOutput: typeof import("./getAddressGroup").getAddressGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroup","getAddressGroupOutput"], () => require("./getAddressGroup"));

export { GetAddressGroupsArgs, GetAddressGroupsResult, GetAddressGroupsOutputArgs } from "./getAddressGroups";
export const getAddressGroups: typeof import("./getAddressGroups").getAddressGroups = null as any;
export const getAddressGroupsOutput: typeof import("./getAddressGroups").getAddressGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroups","getAddressGroupsOutput"], () => require("./getAddressGroups"));

export { GetAssertHelperArgs, GetAssertHelperResult, GetAssertHelperOutputArgs } from "./getAssertHelper";
export const getAssertHelper: typeof import("./getAssertHelper").getAssertHelper = null as any;
export const getAssertHelperOutput: typeof import("./getAssertHelper").getAssertHelperOutput = null as any;
utilities.lazyLoad(exports, ["getAssertHelper","getAssertHelperOutput"], () => require("./getAssertHelper"));

export { GetCategoryKeyArgs, GetCategoryKeyResult, GetCategoryKeyOutputArgs } from "./getCategoryKey";
export const getCategoryKey: typeof import("./getCategoryKey").getCategoryKey = null as any;
export const getCategoryKeyOutput: typeof import("./getCategoryKey").getCategoryKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCategoryKey","getCategoryKeyOutput"], () => require("./getCategoryKey"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClustersResult } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetFloatingIpArgs, GetFloatingIpResult, GetFloatingIpOutputArgs } from "./getFloatingIp";
export const getFloatingIp: typeof import("./getFloatingIp").getFloatingIp = null as any;
export const getFloatingIpOutput: typeof import("./getFloatingIp").getFloatingIpOutput = null as any;
utilities.lazyLoad(exports, ["getFloatingIp","getFloatingIpOutput"], () => require("./getFloatingIp"));

export { GetFloatingIpsArgs, GetFloatingIpsResult, GetFloatingIpsOutputArgs } from "./getFloatingIps";
export const getFloatingIps: typeof import("./getFloatingIps").getFloatingIps = null as any;
export const getFloatingIpsOutput: typeof import("./getFloatingIps").getFloatingIpsOutput = null as any;
utilities.lazyLoad(exports, ["getFloatingIps","getFloatingIpsOutput"], () => require("./getFloatingIps"));

export { GetFoundationCentralApiKeysArgs, GetFoundationCentralApiKeysResult, GetFoundationCentralApiKeysOutputArgs } from "./getFoundationCentralApiKeys";
export const getFoundationCentralApiKeys: typeof import("./getFoundationCentralApiKeys").getFoundationCentralApiKeys = null as any;
export const getFoundationCentralApiKeysOutput: typeof import("./getFoundationCentralApiKeys").getFoundationCentralApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationCentralApiKeys","getFoundationCentralApiKeysOutput"], () => require("./getFoundationCentralApiKeys"));

export { GetFoundationCentralClusterDetailsArgs, GetFoundationCentralClusterDetailsResult, GetFoundationCentralClusterDetailsOutputArgs } from "./getFoundationCentralClusterDetails";
export const getFoundationCentralClusterDetails: typeof import("./getFoundationCentralClusterDetails").getFoundationCentralClusterDetails = null as any;
export const getFoundationCentralClusterDetailsOutput: typeof import("./getFoundationCentralClusterDetails").getFoundationCentralClusterDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationCentralClusterDetails","getFoundationCentralClusterDetailsOutput"], () => require("./getFoundationCentralClusterDetails"));

export { GetFoundationCentralImagedClustersListArgs, GetFoundationCentralImagedClustersListResult, GetFoundationCentralImagedClustersListOutputArgs } from "./getFoundationCentralImagedClustersList";
export const getFoundationCentralImagedClustersList: typeof import("./getFoundationCentralImagedClustersList").getFoundationCentralImagedClustersList = null as any;
export const getFoundationCentralImagedClustersListOutput: typeof import("./getFoundationCentralImagedClustersList").getFoundationCentralImagedClustersListOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationCentralImagedClustersList","getFoundationCentralImagedClustersListOutput"], () => require("./getFoundationCentralImagedClustersList"));

export { GetFoundationCentralImagedNodeDetailsArgs, GetFoundationCentralImagedNodeDetailsResult, GetFoundationCentralImagedNodeDetailsOutputArgs } from "./getFoundationCentralImagedNodeDetails";
export const getFoundationCentralImagedNodeDetails: typeof import("./getFoundationCentralImagedNodeDetails").getFoundationCentralImagedNodeDetails = null as any;
export const getFoundationCentralImagedNodeDetailsOutput: typeof import("./getFoundationCentralImagedNodeDetails").getFoundationCentralImagedNodeDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationCentralImagedNodeDetails","getFoundationCentralImagedNodeDetailsOutput"], () => require("./getFoundationCentralImagedNodeDetails"));

export { GetFoundationCentralImagedNodesListArgs, GetFoundationCentralImagedNodesListResult, GetFoundationCentralImagedNodesListOutputArgs } from "./getFoundationCentralImagedNodesList";
export const getFoundationCentralImagedNodesList: typeof import("./getFoundationCentralImagedNodesList").getFoundationCentralImagedNodesList = null as any;
export const getFoundationCentralImagedNodesListOutput: typeof import("./getFoundationCentralImagedNodesList").getFoundationCentralImagedNodesListOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationCentralImagedNodesList","getFoundationCentralImagedNodesListOutput"], () => require("./getFoundationCentralImagedNodesList"));

export { GetFoundationCentralListApiKeysArgs, GetFoundationCentralListApiKeysResult, GetFoundationCentralListApiKeysOutputArgs } from "./getFoundationCentralListApiKeys";
export const getFoundationCentralListApiKeys: typeof import("./getFoundationCentralListApiKeys").getFoundationCentralListApiKeys = null as any;
export const getFoundationCentralListApiKeysOutput: typeof import("./getFoundationCentralListApiKeys").getFoundationCentralListApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationCentralListApiKeys","getFoundationCentralListApiKeysOutput"], () => require("./getFoundationCentralListApiKeys"));

export { GetFoundationDiscoverNodesResult } from "./getFoundationDiscoverNodes";
export const getFoundationDiscoverNodes: typeof import("./getFoundationDiscoverNodes").getFoundationDiscoverNodes = null as any;
export const getFoundationDiscoverNodesOutput: typeof import("./getFoundationDiscoverNodes").getFoundationDiscoverNodesOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationDiscoverNodes","getFoundationDiscoverNodesOutput"], () => require("./getFoundationDiscoverNodes"));

export { GetFoundationHypervisorIsosResult } from "./getFoundationHypervisorIsos";
export const getFoundationHypervisorIsos: typeof import("./getFoundationHypervisorIsos").getFoundationHypervisorIsos = null as any;
export const getFoundationHypervisorIsosOutput: typeof import("./getFoundationHypervisorIsos").getFoundationHypervisorIsosOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationHypervisorIsos","getFoundationHypervisorIsosOutput"], () => require("./getFoundationHypervisorIsos"));

export { GetFoundationNodPackagesResult } from "./getFoundationNodPackages";
export const getFoundationNodPackages: typeof import("./getFoundationNodPackages").getFoundationNodPackages = null as any;
export const getFoundationNodPackagesOutput: typeof import("./getFoundationNodPackages").getFoundationNodPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationNodPackages","getFoundationNodPackagesOutput"], () => require("./getFoundationNodPackages"));

export { GetFoundationNodeNetworkDetailsArgs, GetFoundationNodeNetworkDetailsResult, GetFoundationNodeNetworkDetailsOutputArgs } from "./getFoundationNodeNetworkDetails";
export const getFoundationNodeNetworkDetails: typeof import("./getFoundationNodeNetworkDetails").getFoundationNodeNetworkDetails = null as any;
export const getFoundationNodeNetworkDetailsOutput: typeof import("./getFoundationNodeNetworkDetails").getFoundationNodeNetworkDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getFoundationNodeNetworkDetails","getFoundationNodeNetworkDetailsOutput"], () => require("./getFoundationNodeNetworkDetails"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetHostsResult } from "./getHosts";
export const getHosts: typeof import("./getHosts").getHosts = null as any;
export const getHostsOutput: typeof import("./getHosts").getHostsOutput = null as any;
utilities.lazyLoad(exports, ["getHosts","getHostsOutput"], () => require("./getHosts"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetKarbonClusterArgs, GetKarbonClusterResult, GetKarbonClusterOutputArgs } from "./getKarbonCluster";
export const getKarbonCluster: typeof import("./getKarbonCluster").getKarbonCluster = null as any;
export const getKarbonClusterOutput: typeof import("./getKarbonCluster").getKarbonClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKarbonCluster","getKarbonClusterOutput"], () => require("./getKarbonCluster"));

export { GetKarbonClusterKubeConfigArgs, GetKarbonClusterKubeConfigResult, GetKarbonClusterKubeConfigOutputArgs } from "./getKarbonClusterKubeConfig";
export const getKarbonClusterKubeConfig: typeof import("./getKarbonClusterKubeConfig").getKarbonClusterKubeConfig = null as any;
export const getKarbonClusterKubeConfigOutput: typeof import("./getKarbonClusterKubeConfig").getKarbonClusterKubeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getKarbonClusterKubeConfig","getKarbonClusterKubeConfigOutput"], () => require("./getKarbonClusterKubeConfig"));

export { GetKarbonClusterSshArgs, GetKarbonClusterSshResult, GetKarbonClusterSshOutputArgs } from "./getKarbonClusterSsh";
export const getKarbonClusterSsh: typeof import("./getKarbonClusterSsh").getKarbonClusterSsh = null as any;
export const getKarbonClusterSshOutput: typeof import("./getKarbonClusterSsh").getKarbonClusterSshOutput = null as any;
utilities.lazyLoad(exports, ["getKarbonClusterSsh","getKarbonClusterSshOutput"], () => require("./getKarbonClusterSsh"));

export { GetKarbonClustersResult } from "./getKarbonClusters";
export const getKarbonClusters: typeof import("./getKarbonClusters").getKarbonClusters = null as any;
export const getKarbonClustersOutput: typeof import("./getKarbonClusters").getKarbonClustersOutput = null as any;
utilities.lazyLoad(exports, ["getKarbonClusters","getKarbonClustersOutput"], () => require("./getKarbonClusters"));

export { GetKarbonPrivateRegistriesResult } from "./getKarbonPrivateRegistries";
export const getKarbonPrivateRegistries: typeof import("./getKarbonPrivateRegistries").getKarbonPrivateRegistries = null as any;
export const getKarbonPrivateRegistriesOutput: typeof import("./getKarbonPrivateRegistries").getKarbonPrivateRegistriesOutput = null as any;
utilities.lazyLoad(exports, ["getKarbonPrivateRegistries","getKarbonPrivateRegistriesOutput"], () => require("./getKarbonPrivateRegistries"));

export { GetKarbonPrivateRegistryArgs, GetKarbonPrivateRegistryResult, GetKarbonPrivateRegistryOutputArgs } from "./getKarbonPrivateRegistry";
export const getKarbonPrivateRegistry: typeof import("./getKarbonPrivateRegistry").getKarbonPrivateRegistry = null as any;
export const getKarbonPrivateRegistryOutput: typeof import("./getKarbonPrivateRegistry").getKarbonPrivateRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getKarbonPrivateRegistry","getKarbonPrivateRegistryOutput"], () => require("./getKarbonPrivateRegistry"));

export { GetNdbCloneArgs, GetNdbCloneResult, GetNdbCloneOutputArgs } from "./getNdbClone";
export const getNdbClone: typeof import("./getNdbClone").getNdbClone = null as any;
export const getNdbCloneOutput: typeof import("./getNdbClone").getNdbCloneOutput = null as any;
utilities.lazyLoad(exports, ["getNdbClone","getNdbCloneOutput"], () => require("./getNdbClone"));

export { GetNdbClonesArgs, GetNdbClonesResult, GetNdbClonesOutputArgs } from "./getNdbClones";
export const getNdbClones: typeof import("./getNdbClones").getNdbClones = null as any;
export const getNdbClonesOutput: typeof import("./getNdbClones").getNdbClonesOutput = null as any;
utilities.lazyLoad(exports, ["getNdbClones","getNdbClonesOutput"], () => require("./getNdbClones"));

export { GetNdbClusterArgs, GetNdbClusterResult, GetNdbClusterOutputArgs } from "./getNdbCluster";
export const getNdbCluster: typeof import("./getNdbCluster").getNdbCluster = null as any;
export const getNdbClusterOutput: typeof import("./getNdbCluster").getNdbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getNdbCluster","getNdbClusterOutput"], () => require("./getNdbCluster"));

export { GetNdbClustersResult } from "./getNdbClusters";
export const getNdbClusters: typeof import("./getNdbClusters").getNdbClusters = null as any;
export const getNdbClustersOutput: typeof import("./getNdbClusters").getNdbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getNdbClusters","getNdbClustersOutput"], () => require("./getNdbClusters"));

export { GetNdbDatabaseArgs, GetNdbDatabaseResult, GetNdbDatabaseOutputArgs } from "./getNdbDatabase";
export const getNdbDatabase: typeof import("./getNdbDatabase").getNdbDatabase = null as any;
export const getNdbDatabaseOutput: typeof import("./getNdbDatabase").getNdbDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getNdbDatabase","getNdbDatabaseOutput"], () => require("./getNdbDatabase"));

export { GetNdbDatabasesArgs, GetNdbDatabasesResult, GetNdbDatabasesOutputArgs } from "./getNdbDatabases";
export const getNdbDatabases: typeof import("./getNdbDatabases").getNdbDatabases = null as any;
export const getNdbDatabasesOutput: typeof import("./getNdbDatabases").getNdbDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getNdbDatabases","getNdbDatabasesOutput"], () => require("./getNdbDatabases"));

export { GetNdbDbserverArgs, GetNdbDbserverResult, GetNdbDbserverOutputArgs } from "./getNdbDbserver";
export const getNdbDbserver: typeof import("./getNdbDbserver").getNdbDbserver = null as any;
export const getNdbDbserverOutput: typeof import("./getNdbDbserver").getNdbDbserverOutput = null as any;
utilities.lazyLoad(exports, ["getNdbDbserver","getNdbDbserverOutput"], () => require("./getNdbDbserver"));

export { GetNdbDbserversResult } from "./getNdbDbservers";
export const getNdbDbservers: typeof import("./getNdbDbservers").getNdbDbservers = null as any;
export const getNdbDbserversOutput: typeof import("./getNdbDbservers").getNdbDbserversOutput = null as any;
utilities.lazyLoad(exports, ["getNdbDbservers","getNdbDbserversOutput"], () => require("./getNdbDbservers"));

export { GetNdbMaintenanceWindowArgs, GetNdbMaintenanceWindowResult, GetNdbMaintenanceWindowOutputArgs } from "./getNdbMaintenanceWindow";
export const getNdbMaintenanceWindow: typeof import("./getNdbMaintenanceWindow").getNdbMaintenanceWindow = null as any;
export const getNdbMaintenanceWindowOutput: typeof import("./getNdbMaintenanceWindow").getNdbMaintenanceWindowOutput = null as any;
utilities.lazyLoad(exports, ["getNdbMaintenanceWindow","getNdbMaintenanceWindowOutput"], () => require("./getNdbMaintenanceWindow"));

export { GetNdbMaintenanceWindowsResult } from "./getNdbMaintenanceWindows";
export const getNdbMaintenanceWindows: typeof import("./getNdbMaintenanceWindows").getNdbMaintenanceWindows = null as any;
export const getNdbMaintenanceWindowsOutput: typeof import("./getNdbMaintenanceWindows").getNdbMaintenanceWindowsOutput = null as any;
utilities.lazyLoad(exports, ["getNdbMaintenanceWindows","getNdbMaintenanceWindowsOutput"], () => require("./getNdbMaintenanceWindows"));

export { GetNdbNetworkArgs, GetNdbNetworkResult, GetNdbNetworkOutputArgs } from "./getNdbNetwork";
export const getNdbNetwork: typeof import("./getNdbNetwork").getNdbNetwork = null as any;
export const getNdbNetworkOutput: typeof import("./getNdbNetwork").getNdbNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNdbNetwork","getNdbNetworkOutput"], () => require("./getNdbNetwork"));

export { GetNdbNetworkAvailableIpsArgs, GetNdbNetworkAvailableIpsResult, GetNdbNetworkAvailableIpsOutputArgs } from "./getNdbNetworkAvailableIps";
export const getNdbNetworkAvailableIps: typeof import("./getNdbNetworkAvailableIps").getNdbNetworkAvailableIps = null as any;
export const getNdbNetworkAvailableIpsOutput: typeof import("./getNdbNetworkAvailableIps").getNdbNetworkAvailableIpsOutput = null as any;
utilities.lazyLoad(exports, ["getNdbNetworkAvailableIps","getNdbNetworkAvailableIpsOutput"], () => require("./getNdbNetworkAvailableIps"));

export { GetNdbNetworksResult } from "./getNdbNetworks";
export const getNdbNetworks: typeof import("./getNdbNetworks").getNdbNetworks = null as any;
export const getNdbNetworksOutput: typeof import("./getNdbNetworks").getNdbNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNdbNetworks","getNdbNetworksOutput"], () => require("./getNdbNetworks"));

export { GetNdbProfileArgs, GetNdbProfileResult, GetNdbProfileOutputArgs } from "./getNdbProfile";
export const getNdbProfile: typeof import("./getNdbProfile").getNdbProfile = null as any;
export const getNdbProfileOutput: typeof import("./getNdbProfile").getNdbProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNdbProfile","getNdbProfileOutput"], () => require("./getNdbProfile"));

export { GetNdbProfilesArgs, GetNdbProfilesResult, GetNdbProfilesOutputArgs } from "./getNdbProfiles";
export const getNdbProfiles: typeof import("./getNdbProfiles").getNdbProfiles = null as any;
export const getNdbProfilesOutput: typeof import("./getNdbProfiles").getNdbProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getNdbProfiles","getNdbProfilesOutput"], () => require("./getNdbProfiles"));

export { GetNdbSlaArgs, GetNdbSlaResult, GetNdbSlaOutputArgs } from "./getNdbSla";
export const getNdbSla: typeof import("./getNdbSla").getNdbSla = null as any;
export const getNdbSlaOutput: typeof import("./getNdbSla").getNdbSlaOutput = null as any;
utilities.lazyLoad(exports, ["getNdbSla","getNdbSlaOutput"], () => require("./getNdbSla"));

export { GetNdbSlasResult } from "./getNdbSlas";
export const getNdbSlas: typeof import("./getNdbSlas").getNdbSlas = null as any;
export const getNdbSlasOutput: typeof import("./getNdbSlas").getNdbSlasOutput = null as any;
utilities.lazyLoad(exports, ["getNdbSlas","getNdbSlasOutput"], () => require("./getNdbSlas"));

export { GetNdbSnapshotArgs, GetNdbSnapshotResult, GetNdbSnapshotOutputArgs } from "./getNdbSnapshot";
export const getNdbSnapshot: typeof import("./getNdbSnapshot").getNdbSnapshot = null as any;
export const getNdbSnapshotOutput: typeof import("./getNdbSnapshot").getNdbSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getNdbSnapshot","getNdbSnapshotOutput"], () => require("./getNdbSnapshot"));

export { GetNdbSnapshotsArgs, GetNdbSnapshotsResult, GetNdbSnapshotsOutputArgs } from "./getNdbSnapshots";
export const getNdbSnapshots: typeof import("./getNdbSnapshots").getNdbSnapshots = null as any;
export const getNdbSnapshotsOutput: typeof import("./getNdbSnapshots").getNdbSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getNdbSnapshots","getNdbSnapshotsOutput"], () => require("./getNdbSnapshots"));

export { GetNdbTagArgs, GetNdbTagResult, GetNdbTagOutputArgs } from "./getNdbTag";
export const getNdbTag: typeof import("./getNdbTag").getNdbTag = null as any;
export const getNdbTagOutput: typeof import("./getNdbTag").getNdbTagOutput = null as any;
utilities.lazyLoad(exports, ["getNdbTag","getNdbTagOutput"], () => require("./getNdbTag"));

export { GetNdbTagsArgs, GetNdbTagsResult, GetNdbTagsOutputArgs } from "./getNdbTags";
export const getNdbTags: typeof import("./getNdbTags").getNdbTags = null as any;
export const getNdbTagsOutput: typeof import("./getNdbTags").getNdbTagsOutput = null as any;
utilities.lazyLoad(exports, ["getNdbTags","getNdbTagsOutput"], () => require("./getNdbTags"));

export { GetNdbTimeMachineArgs, GetNdbTimeMachineResult, GetNdbTimeMachineOutputArgs } from "./getNdbTimeMachine";
export const getNdbTimeMachine: typeof import("./getNdbTimeMachine").getNdbTimeMachine = null as any;
export const getNdbTimeMachineOutput: typeof import("./getNdbTimeMachine").getNdbTimeMachineOutput = null as any;
utilities.lazyLoad(exports, ["getNdbTimeMachine","getNdbTimeMachineOutput"], () => require("./getNdbTimeMachine"));

export { GetNdbTimeMachinesResult } from "./getNdbTimeMachines";
export const getNdbTimeMachines: typeof import("./getNdbTimeMachines").getNdbTimeMachines = null as any;
export const getNdbTimeMachinesOutput: typeof import("./getNdbTimeMachines").getNdbTimeMachinesOutput = null as any;
utilities.lazyLoad(exports, ["getNdbTimeMachines","getNdbTimeMachinesOutput"], () => require("./getNdbTimeMachines"));

export { GetNdbTmsCapabilityArgs, GetNdbTmsCapabilityResult, GetNdbTmsCapabilityOutputArgs } from "./getNdbTmsCapability";
export const getNdbTmsCapability: typeof import("./getNdbTmsCapability").getNdbTmsCapability = null as any;
export const getNdbTmsCapabilityOutput: typeof import("./getNdbTmsCapability").getNdbTmsCapabilityOutput = null as any;
utilities.lazyLoad(exports, ["getNdbTmsCapability","getNdbTmsCapabilityOutput"], () => require("./getNdbTmsCapability"));

export { GetNetworkSecurityRuleArgs, GetNetworkSecurityRuleResult, GetNetworkSecurityRuleOutputArgs } from "./getNetworkSecurityRule";
export const getNetworkSecurityRule: typeof import("./getNetworkSecurityRule").getNetworkSecurityRule = null as any;
export const getNetworkSecurityRuleOutput: typeof import("./getNetworkSecurityRule").getNetworkSecurityRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSecurityRule","getNetworkSecurityRuleOutput"], () => require("./getNetworkSecurityRule"));

export { GetPbrArgs, GetPbrResult, GetPbrOutputArgs } from "./getPbr";
export const getPbr: typeof import("./getPbr").getPbr = null as any;
export const getPbrOutput: typeof import("./getPbr").getPbrOutput = null as any;
utilities.lazyLoad(exports, ["getPbr","getPbrOutput"], () => require("./getPbr"));

export { GetPbrsArgs, GetPbrsResult, GetPbrsOutputArgs } from "./getPbrs";
export const getPbrs: typeof import("./getPbrs").getPbrs = null as any;
export const getPbrsOutput: typeof import("./getPbrs").getPbrsOutput = null as any;
utilities.lazyLoad(exports, ["getPbrs","getPbrsOutput"], () => require("./getPbrs"));

export { GetPermissionArgs, GetPermissionResult, GetPermissionOutputArgs } from "./getPermission";
export const getPermission: typeof import("./getPermission").getPermission = null as any;
export const getPermissionOutput: typeof import("./getPermission").getPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getPermission","getPermissionOutput"], () => require("./getPermission"));

export { GetPermissionsArgs, GetPermissionsResult, GetPermissionsOutputArgs } from "./getPermissions";
export const getPermissions: typeof import("./getPermissions").getPermissions = null as any;
export const getPermissionsOutput: typeof import("./getPermissions").getPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getPermissions","getPermissionsOutput"], () => require("./getPermissions"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectsResult } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetProtectionRuleArgs, GetProtectionRuleResult, GetProtectionRuleOutputArgs } from "./getProtectionRule";
export const getProtectionRule: typeof import("./getProtectionRule").getProtectionRule = null as any;
export const getProtectionRuleOutput: typeof import("./getProtectionRule").getProtectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionRule","getProtectionRuleOutput"], () => require("./getProtectionRule"));

export { GetProtectionRulesResult } from "./getProtectionRules";
export const getProtectionRules: typeof import("./getProtectionRules").getProtectionRules = null as any;
export const getProtectionRulesOutput: typeof import("./getProtectionRules").getProtectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionRules","getProtectionRulesOutput"], () => require("./getProtectionRules"));

export { GetRecoveryPlanArgs, GetRecoveryPlanResult, GetRecoveryPlanOutputArgs } from "./getRecoveryPlan";
export const getRecoveryPlan: typeof import("./getRecoveryPlan").getRecoveryPlan = null as any;
export const getRecoveryPlanOutput: typeof import("./getRecoveryPlan").getRecoveryPlanOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryPlan","getRecoveryPlanOutput"], () => require("./getRecoveryPlan"));

export { GetRecoveryPlansResult } from "./getRecoveryPlans";
export const getRecoveryPlans: typeof import("./getRecoveryPlans").getRecoveryPlans = null as any;
export const getRecoveryPlansOutput: typeof import("./getRecoveryPlans").getRecoveryPlansOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryPlans","getRecoveryPlansOutput"], () => require("./getRecoveryPlans"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRolesArgs, GetRolesResult, GetRolesOutputArgs } from "./getRoles";
export const getRoles: typeof import("./getRoles").getRoles = null as any;
export const getRolesOutput: typeof import("./getRoles").getRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRoles","getRolesOutput"], () => require("./getRoles"));

export { GetServiceGroupArgs, GetServiceGroupResult, GetServiceGroupOutputArgs } from "./getServiceGroup";
export const getServiceGroup: typeof import("./getServiceGroup").getServiceGroup = null as any;
export const getServiceGroupOutput: typeof import("./getServiceGroup").getServiceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServiceGroup","getServiceGroupOutput"], () => require("./getServiceGroup"));

export { GetServiceGroupsArgs, GetServiceGroupsResult, GetServiceGroupsOutputArgs } from "./getServiceGroups";
export const getServiceGroups: typeof import("./getServiceGroups").getServiceGroups = null as any;
export const getServiceGroupsOutput: typeof import("./getServiceGroups").getServiceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceGroups","getServiceGroupsOutput"], () => require("./getServiceGroups"));

export { GetStaticRoutesArgs, GetStaticRoutesResult, GetStaticRoutesOutputArgs } from "./getStaticRoutes";
export const getStaticRoutes: typeof import("./getStaticRoutes").getStaticRoutes = null as any;
export const getStaticRoutesOutput: typeof import("./getStaticRoutes").getStaticRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getStaticRoutes","getStaticRoutesOutput"], () => require("./getStaticRoutes"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { GetUserGroupsArgs, GetUserGroupsResult, GetUserGroupsOutputArgs } from "./getUserGroups";
export const getUserGroups: typeof import("./getUserGroups").getUserGroups = null as any;
export const getUserGroupsOutput: typeof import("./getUserGroups").getUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroups","getUserGroupsOutput"], () => require("./getUserGroups"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetVirtualMachineArgs, GetVirtualMachineResult, GetVirtualMachineOutputArgs } from "./getVirtualMachine";
export const getVirtualMachine: typeof import("./getVirtualMachine").getVirtualMachine = null as any;
export const getVirtualMachineOutput: typeof import("./getVirtualMachine").getVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachine","getVirtualMachineOutput"], () => require("./getVirtualMachine"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { KarbonClusterArgs, KarbonClusterState } from "./karbonCluster";
export type KarbonCluster = import("./karbonCluster").KarbonCluster;
export const KarbonCluster: typeof import("./karbonCluster").KarbonCluster = null as any;
utilities.lazyLoad(exports, ["KarbonCluster"], () => require("./karbonCluster"));

export { KarbonPrivateRegistryArgs, KarbonPrivateRegistryState } from "./karbonPrivateRegistry";
export type KarbonPrivateRegistry = import("./karbonPrivateRegistry").KarbonPrivateRegistry;
export const KarbonPrivateRegistry: typeof import("./karbonPrivateRegistry").KarbonPrivateRegistry = null as any;
utilities.lazyLoad(exports, ["KarbonPrivateRegistry"], () => require("./karbonPrivateRegistry"));

export { KarbonWorkerNodepoolArgs, KarbonWorkerNodepoolState } from "./karbonWorkerNodepool";
export type KarbonWorkerNodepool = import("./karbonWorkerNodepool").KarbonWorkerNodepool;
export const KarbonWorkerNodepool: typeof import("./karbonWorkerNodepool").KarbonWorkerNodepool = null as any;
utilities.lazyLoad(exports, ["KarbonWorkerNodepool"], () => require("./karbonWorkerNodepool"));

export { NdbAuthorizeDbserverArgs, NdbAuthorizeDbserverState } from "./ndbAuthorizeDbserver";
export type NdbAuthorizeDbserver = import("./ndbAuthorizeDbserver").NdbAuthorizeDbserver;
export const NdbAuthorizeDbserver: typeof import("./ndbAuthorizeDbserver").NdbAuthorizeDbserver = null as any;
utilities.lazyLoad(exports, ["NdbAuthorizeDbserver"], () => require("./ndbAuthorizeDbserver"));

export { NdbCloneArgs, NdbCloneState } from "./ndbClone";
export type NdbClone = import("./ndbClone").NdbClone;
export const NdbClone: typeof import("./ndbClone").NdbClone = null as any;
utilities.lazyLoad(exports, ["NdbClone"], () => require("./ndbClone"));

export { NdbCloneRefreshArgs, NdbCloneRefreshState } from "./ndbCloneRefresh";
export type NdbCloneRefresh = import("./ndbCloneRefresh").NdbCloneRefresh;
export const NdbCloneRefresh: typeof import("./ndbCloneRefresh").NdbCloneRefresh = null as any;
utilities.lazyLoad(exports, ["NdbCloneRefresh"], () => require("./ndbCloneRefresh"));

export { NdbClusterArgs, NdbClusterState } from "./ndbCluster";
export type NdbCluster = import("./ndbCluster").NdbCluster;
export const NdbCluster: typeof import("./ndbCluster").NdbCluster = null as any;
utilities.lazyLoad(exports, ["NdbCluster"], () => require("./ndbCluster"));

export { NdbDatabaseArgs, NdbDatabaseState } from "./ndbDatabase";
export type NdbDatabase = import("./ndbDatabase").NdbDatabase;
export const NdbDatabase: typeof import("./ndbDatabase").NdbDatabase = null as any;
utilities.lazyLoad(exports, ["NdbDatabase"], () => require("./ndbDatabase"));

export { NdbDatabaseRestoreArgs, NdbDatabaseRestoreState } from "./ndbDatabaseRestore";
export type NdbDatabaseRestore = import("./ndbDatabaseRestore").NdbDatabaseRestore;
export const NdbDatabaseRestore: typeof import("./ndbDatabaseRestore").NdbDatabaseRestore = null as any;
utilities.lazyLoad(exports, ["NdbDatabaseRestore"], () => require("./ndbDatabaseRestore"));

export { NdbDatabaseScaleArgs, NdbDatabaseScaleState } from "./ndbDatabaseScale";
export type NdbDatabaseScale = import("./ndbDatabaseScale").NdbDatabaseScale;
export const NdbDatabaseScale: typeof import("./ndbDatabaseScale").NdbDatabaseScale = null as any;
utilities.lazyLoad(exports, ["NdbDatabaseScale"], () => require("./ndbDatabaseScale"));

export { NdbDatabaseSnapshotArgs, NdbDatabaseSnapshotState } from "./ndbDatabaseSnapshot";
export type NdbDatabaseSnapshot = import("./ndbDatabaseSnapshot").NdbDatabaseSnapshot;
export const NdbDatabaseSnapshot: typeof import("./ndbDatabaseSnapshot").NdbDatabaseSnapshot = null as any;
utilities.lazyLoad(exports, ["NdbDatabaseSnapshot"], () => require("./ndbDatabaseSnapshot"));

export { NdbDbserverVmArgs, NdbDbserverVmState } from "./ndbDbserverVm";
export type NdbDbserverVm = import("./ndbDbserverVm").NdbDbserverVm;
export const NdbDbserverVm: typeof import("./ndbDbserverVm").NdbDbserverVm = null as any;
utilities.lazyLoad(exports, ["NdbDbserverVm"], () => require("./ndbDbserverVm"));

export { NdbLinkedDatabasesArgs, NdbLinkedDatabasesState } from "./ndbLinkedDatabases";
export type NdbLinkedDatabases = import("./ndbLinkedDatabases").NdbLinkedDatabases;
export const NdbLinkedDatabases: typeof import("./ndbLinkedDatabases").NdbLinkedDatabases = null as any;
utilities.lazyLoad(exports, ["NdbLinkedDatabases"], () => require("./ndbLinkedDatabases"));

export { NdbLogCatchupsArgs, NdbLogCatchupsState } from "./ndbLogCatchups";
export type NdbLogCatchups = import("./ndbLogCatchups").NdbLogCatchups;
export const NdbLogCatchups: typeof import("./ndbLogCatchups").NdbLogCatchups = null as any;
utilities.lazyLoad(exports, ["NdbLogCatchups"], () => require("./ndbLogCatchups"));

export { NdbMaintenanceTaskArgs, NdbMaintenanceTaskState } from "./ndbMaintenanceTask";
export type NdbMaintenanceTask = import("./ndbMaintenanceTask").NdbMaintenanceTask;
export const NdbMaintenanceTask: typeof import("./ndbMaintenanceTask").NdbMaintenanceTask = null as any;
utilities.lazyLoad(exports, ["NdbMaintenanceTask"], () => require("./ndbMaintenanceTask"));

export { NdbMaintenanceWindowArgs, NdbMaintenanceWindowState } from "./ndbMaintenanceWindow";
export type NdbMaintenanceWindow = import("./ndbMaintenanceWindow").NdbMaintenanceWindow;
export const NdbMaintenanceWindow: typeof import("./ndbMaintenanceWindow").NdbMaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["NdbMaintenanceWindow"], () => require("./ndbMaintenanceWindow"));

export { NdbNetworkArgs, NdbNetworkState } from "./ndbNetwork";
export type NdbNetwork = import("./ndbNetwork").NdbNetwork;
export const NdbNetwork: typeof import("./ndbNetwork").NdbNetwork = null as any;
utilities.lazyLoad(exports, ["NdbNetwork"], () => require("./ndbNetwork"));

export { NdbProfileArgs, NdbProfileState } from "./ndbProfile";
export type NdbProfile = import("./ndbProfile").NdbProfile;
export const NdbProfile: typeof import("./ndbProfile").NdbProfile = null as any;
utilities.lazyLoad(exports, ["NdbProfile"], () => require("./ndbProfile"));

export { NdbRegisterDatabaseArgs, NdbRegisterDatabaseState } from "./ndbRegisterDatabase";
export type NdbRegisterDatabase = import("./ndbRegisterDatabase").NdbRegisterDatabase;
export const NdbRegisterDatabase: typeof import("./ndbRegisterDatabase").NdbRegisterDatabase = null as any;
utilities.lazyLoad(exports, ["NdbRegisterDatabase"], () => require("./ndbRegisterDatabase"));

export { NdbRegisterDbserverArgs, NdbRegisterDbserverState } from "./ndbRegisterDbserver";
export type NdbRegisterDbserver = import("./ndbRegisterDbserver").NdbRegisterDbserver;
export const NdbRegisterDbserver: typeof import("./ndbRegisterDbserver").NdbRegisterDbserver = null as any;
utilities.lazyLoad(exports, ["NdbRegisterDbserver"], () => require("./ndbRegisterDbserver"));

export { NdbScaleDatabaseArgs, NdbScaleDatabaseState } from "./ndbScaleDatabase";
export type NdbScaleDatabase = import("./ndbScaleDatabase").NdbScaleDatabase;
export const NdbScaleDatabase: typeof import("./ndbScaleDatabase").NdbScaleDatabase = null as any;
utilities.lazyLoad(exports, ["NdbScaleDatabase"], () => require("./ndbScaleDatabase"));

export { NdbSlaArgs, NdbSlaState } from "./ndbSla";
export type NdbSla = import("./ndbSla").NdbSla;
export const NdbSla: typeof import("./ndbSla").NdbSla = null as any;
utilities.lazyLoad(exports, ["NdbSla"], () => require("./ndbSla"));

export { NdbSoftwareVersionProfileArgs, NdbSoftwareVersionProfileState } from "./ndbSoftwareVersionProfile";
export type NdbSoftwareVersionProfile = import("./ndbSoftwareVersionProfile").NdbSoftwareVersionProfile;
export const NdbSoftwareVersionProfile: typeof import("./ndbSoftwareVersionProfile").NdbSoftwareVersionProfile = null as any;
utilities.lazyLoad(exports, ["NdbSoftwareVersionProfile"], () => require("./ndbSoftwareVersionProfile"));

export { NdbStretchedVlanArgs, NdbStretchedVlanState } from "./ndbStretchedVlan";
export type NdbStretchedVlan = import("./ndbStretchedVlan").NdbStretchedVlan;
export const NdbStretchedVlan: typeof import("./ndbStretchedVlan").NdbStretchedVlan = null as any;
utilities.lazyLoad(exports, ["NdbStretchedVlan"], () => require("./ndbStretchedVlan"));

export { NdbTagArgs, NdbTagState } from "./ndbTag";
export type NdbTag = import("./ndbTag").NdbTag;
export const NdbTag: typeof import("./ndbTag").NdbTag = null as any;
utilities.lazyLoad(exports, ["NdbTag"], () => require("./ndbTag"));

export { NdbTmsClusterArgs, NdbTmsClusterState } from "./ndbTmsCluster";
export type NdbTmsCluster = import("./ndbTmsCluster").NdbTmsCluster;
export const NdbTmsCluster: typeof import("./ndbTmsCluster").NdbTmsCluster = null as any;
utilities.lazyLoad(exports, ["NdbTmsCluster"], () => require("./ndbTmsCluster"));

export { NetworkSecurityRuleArgs, NetworkSecurityRuleState } from "./networkSecurityRule";
export type NetworkSecurityRule = import("./networkSecurityRule").NetworkSecurityRule;
export const NetworkSecurityRule: typeof import("./networkSecurityRule").NetworkSecurityRule = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityRule"], () => require("./networkSecurityRule"));

export { PbrArgs, PbrState } from "./pbr";
export type Pbr = import("./pbr").Pbr;
export const Pbr: typeof import("./pbr").Pbr = null as any;
utilities.lazyLoad(exports, ["Pbr"], () => require("./pbr"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProtectionRuleArgs, ProtectionRuleState } from "./protectionRule";
export type ProtectionRule = import("./protectionRule").ProtectionRule;
export const ProtectionRule: typeof import("./protectionRule").ProtectionRule = null as any;
utilities.lazyLoad(exports, ["ProtectionRule"], () => require("./protectionRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RecoveryPlanArgs, RecoveryPlanState } from "./recoveryPlan";
export type RecoveryPlan = import("./recoveryPlan").RecoveryPlan;
export const RecoveryPlan: typeof import("./recoveryPlan").RecoveryPlan = null as any;
utilities.lazyLoad(exports, ["RecoveryPlan"], () => require("./recoveryPlan"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { ServiceGroupArgs, ServiceGroupState } from "./serviceGroup";
export type ServiceGroup = import("./serviceGroup").ServiceGroup;
export const ServiceGroup: typeof import("./serviceGroup").ServiceGroup = null as any;
utilities.lazyLoad(exports, ["ServiceGroup"], () => require("./serviceGroup"));

export { StaticRoutesArgs, StaticRoutesState } from "./staticRoutes";
export type StaticRoutes = import("./staticRoutes").StaticRoutes;
export const StaticRoutes: typeof import("./staticRoutes").StaticRoutes = null as any;
utilities.lazyLoad(exports, ["StaticRoutes"], () => require("./staticRoutes"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupsArgs, UserGroupsState } from "./userGroups";
export type UserGroups = import("./userGroups").UserGroups;
export const UserGroups: typeof import("./userGroups").UserGroups = null as any;
utilities.lazyLoad(exports, ["UserGroups"], () => require("./userGroups"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nutanix:index/accessControlPolicy:AccessControlPolicy":
                return new AccessControlPolicy(name, <any>undefined, { urn })
            case "nutanix:index/addressGroup:AddressGroup":
                return new AddressGroup(name, <any>undefined, { urn })
            case "nutanix:index/categoryKey:CategoryKey":
                return new CategoryKey(name, <any>undefined, { urn })
            case "nutanix:index/categoryValue:CategoryValue":
                return new CategoryValue(name, <any>undefined, { urn })
            case "nutanix:index/floatingIp:FloatingIp":
                return new FloatingIp(name, <any>undefined, { urn })
            case "nutanix:index/foundationCentralApiKeys:FoundationCentralApiKeys":
                return new FoundationCentralApiKeys(name, <any>undefined, { urn })
            case "nutanix:index/foundationCentralImageCluster:FoundationCentralImageCluster":
                return new FoundationCentralImageCluster(name, <any>undefined, { urn })
            case "nutanix:index/foundationImage:FoundationImage":
                return new FoundationImage(name, <any>undefined, { urn })
            case "nutanix:index/foundationImageNodes:FoundationImageNodes":
                return new FoundationImageNodes(name, <any>undefined, { urn })
            case "nutanix:index/foundationIpmiConfig:FoundationIpmiConfig":
                return new FoundationIpmiConfig(name, <any>undefined, { urn })
            case "nutanix:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "nutanix:index/karbonCluster:KarbonCluster":
                return new KarbonCluster(name, <any>undefined, { urn })
            case "nutanix:index/karbonPrivateRegistry:KarbonPrivateRegistry":
                return new KarbonPrivateRegistry(name, <any>undefined, { urn })
            case "nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool":
                return new KarbonWorkerNodepool(name, <any>undefined, { urn })
            case "nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver":
                return new NdbAuthorizeDbserver(name, <any>undefined, { urn })
            case "nutanix:index/ndbClone:NdbClone":
                return new NdbClone(name, <any>undefined, { urn })
            case "nutanix:index/ndbCloneRefresh:NdbCloneRefresh":
                return new NdbCloneRefresh(name, <any>undefined, { urn })
            case "nutanix:index/ndbCluster:NdbCluster":
                return new NdbCluster(name, <any>undefined, { urn })
            case "nutanix:index/ndbDatabase:NdbDatabase":
                return new NdbDatabase(name, <any>undefined, { urn })
            case "nutanix:index/ndbDatabaseRestore:NdbDatabaseRestore":
                return new NdbDatabaseRestore(name, <any>undefined, { urn })
            case "nutanix:index/ndbDatabaseScale:NdbDatabaseScale":
                return new NdbDatabaseScale(name, <any>undefined, { urn })
            case "nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot":
                return new NdbDatabaseSnapshot(name, <any>undefined, { urn })
            case "nutanix:index/ndbDbserverVm:NdbDbserverVm":
                return new NdbDbserverVm(name, <any>undefined, { urn })
            case "nutanix:index/ndbLinkedDatabases:NdbLinkedDatabases":
                return new NdbLinkedDatabases(name, <any>undefined, { urn })
            case "nutanix:index/ndbLogCatchups:NdbLogCatchups":
                return new NdbLogCatchups(name, <any>undefined, { urn })
            case "nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask":
                return new NdbMaintenanceTask(name, <any>undefined, { urn })
            case "nutanix:index/ndbMaintenanceWindow:NdbMaintenanceWindow":
                return new NdbMaintenanceWindow(name, <any>undefined, { urn })
            case "nutanix:index/ndbNetwork:NdbNetwork":
                return new NdbNetwork(name, <any>undefined, { urn })
            case "nutanix:index/ndbProfile:NdbProfile":
                return new NdbProfile(name, <any>undefined, { urn })
            case "nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase":
                return new NdbRegisterDatabase(name, <any>undefined, { urn })
            case "nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver":
                return new NdbRegisterDbserver(name, <any>undefined, { urn })
            case "nutanix:index/ndbScaleDatabase:NdbScaleDatabase":
                return new NdbScaleDatabase(name, <any>undefined, { urn })
            case "nutanix:index/ndbSla:NdbSla":
                return new NdbSla(name, <any>undefined, { urn })
            case "nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile":
                return new NdbSoftwareVersionProfile(name, <any>undefined, { urn })
            case "nutanix:index/ndbStretchedVlan:NdbStretchedVlan":
                return new NdbStretchedVlan(name, <any>undefined, { urn })
            case "nutanix:index/ndbTag:NdbTag":
                return new NdbTag(name, <any>undefined, { urn })
            case "nutanix:index/ndbTmsCluster:NdbTmsCluster":
                return new NdbTmsCluster(name, <any>undefined, { urn })
            case "nutanix:index/networkSecurityRule:NetworkSecurityRule":
                return new NetworkSecurityRule(name, <any>undefined, { urn })
            case "nutanix:index/pbr:Pbr":
                return new Pbr(name, <any>undefined, { urn })
            case "nutanix:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "nutanix:index/protectionRule:ProtectionRule":
                return new ProtectionRule(name, <any>undefined, { urn })
            case "nutanix:index/recoveryPlan:RecoveryPlan":
                return new RecoveryPlan(name, <any>undefined, { urn })
            case "nutanix:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "nutanix:index/serviceGroup:ServiceGroup":
                return new ServiceGroup(name, <any>undefined, { urn })
            case "nutanix:index/staticRoutes:StaticRoutes":
                return new StaticRoutes(name, <any>undefined, { urn })
            case "nutanix:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "nutanix:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "nutanix:index/userGroups:UserGroups":
                return new UserGroups(name, <any>undefined, { urn })
            case "nutanix:index/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "nutanix:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nutanix", "index/accessControlPolicy", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/addressGroup", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/categoryKey", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/categoryValue", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/floatingIp", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationCentralApiKeys", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationCentralImageCluster", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationImage", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationImageNodes", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/foundationIpmiConfig", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/image", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/karbonCluster", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/karbonPrivateRegistry", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/karbonWorkerNodepool", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbAuthorizeDbserver", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbClone", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbCloneRefresh", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbCluster", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbDatabase", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbDatabaseRestore", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbDatabaseScale", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbDatabaseSnapshot", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbDbserverVm", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbLinkedDatabases", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbLogCatchups", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbMaintenanceTask", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbMaintenanceWindow", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbNetwork", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbProfile", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbRegisterDatabase", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbRegisterDbserver", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbScaleDatabase", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbSla", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbSoftwareVersionProfile", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbStretchedVlan", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbTag", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/ndbTmsCluster", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/networkSecurityRule", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/pbr", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/project", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/protectionRule", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/recoveryPlan", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/role", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/serviceGroup", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/staticRoutes", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/subnet", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/user", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/userGroups", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/virtualMachine", _module)
pulumi.runtime.registerResourceModule("nutanix", "index/vpc", _module)
pulumi.runtime.registerResourcePackage("nutanix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nutanix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
