// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a datasource to Fetch the configuration details of the existing Storage Container identified by the {containerExtId}.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_storage_container = nutanix.getStorageContainerV2({
 *     extId: "1891fd3a-1ef7-4947-af56-9ee4b973c6fd",
 * });
 * ```
 */
export function getStorageContainerV2(args: GetStorageContainerV2Args, opts?: pulumi.InvokeOptions): Promise<GetStorageContainerV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getStorageContainerV2:getStorageContainerV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStorageContainerV2.
 */
export interface GetStorageContainerV2Args {
    /**
     * storage container UUID
     */
    extId: string;
}

/**
 * A collection of values returned by getStorageContainerV2.
 */
export interface GetStorageContainerV2Result {
    /**
     * - Affinity host extId for RF 1 Storage Container.
     */
    readonly affinityHostExtId: string;
    /**
     * - Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    readonly cacheDeduplication: string;
    /**
     * - ext id for the cluster owning the storage container.
     */
    readonly clusterExtId: string;
    /**
     * - Corresponding name of the Cluster owning the Storage Container instance.
     */
    readonly clusterName: string;
    /**
     * - The compression delay in seconds.
     */
    readonly compressionDelaySecs: number;
    /**
     * - the storage container ext id
     */
    readonly containerExtId: string;
    /**
     * - Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    readonly erasureCode: string;
    /**
     * - Delay in performing ErasureCode for the current Container instance.
     */
    readonly erasureCodeDelaySecs: number;
    /**
     * - the storage container uuid
     */
    readonly extId: string;
    /**
     * - Indicates whether to prefer a higher Erasure Code fault domain.
     */
    readonly hasHigherEcFaultDomainPreference: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * - Indicates whether the compression is enabled for the Container.
     */
    readonly isCompressionEnabled: boolean;
    /**
     * - Indicates whether the Container is encrypted or not.
     */
    readonly isEncrypted: boolean;
    /**
     * - Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
     */
    readonly isInlineEcEnabled: boolean;
    /**
     * - Indicates whether the Container is internal and is managed by Nutanix.
     */
    readonly isInternal: boolean;
    /**
     * - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
     */
    readonly isMarkedForRemoval: boolean;
    /**
     * - Indicates whether the NFS whitelist is inherited from global config.
     */
    readonly isNfsWhitelistInherited: boolean;
    /**
     * - Indicates whether the Container instance has software encryption enabled.
     */
    readonly isSoftwareEncryptionEnabled: boolean;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetStorageContainerV2Link[];
    /**
     * - Max capacity of the Container as defined by the user.
     */
    readonly logicalAdvertisedCapacityBytes: number;
    /**
     * - Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
     */
    readonly logicalExplicitReservedCapacityBytes: number;
    /**
     * - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
     */
    readonly logicalImplicitReservedCapacityBytes: number;
    /**
     * - Maximum physical capacity of the Storage Container in bytes.
     */
    readonly maxCapacityBytes: number;
    /**
     * Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
     */
    readonly name: string;
    /**
     * - List of NFS addresses which need to be whitelisted.
     */
    readonly nfsWhitelistAddresses: outputs.GetStorageContainerV2NfsWhitelistAddress[];
    /**
     * - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
     */
    readonly onDiskDedup: string;
    /**
     * - owner ext id
     */
    readonly ownerExtId: string;
    /**
     * - Replication factor of the Storage Container.
     */
    readonly replicationFactor: number;
    /**
     * - extId of the Storage Pool owning the Storage Container instance.
     */
    readonly storagePoolExtId: string;
    /**
     * - A globally unique identifier that represents the tenant that owns this entity.
     */
    readonly tenantId: string;
}
/**
 * Provides a datasource to Fetch the configuration details of the existing Storage Container identified by the {containerExtId}.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_storage_container = nutanix.getStorageContainerV2({
 *     extId: "1891fd3a-1ef7-4947-af56-9ee4b973c6fd",
 * });
 * ```
 */
export function getStorageContainerV2Output(args: GetStorageContainerV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStorageContainerV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getStorageContainerV2:getStorageContainerV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStorageContainerV2.
 */
export interface GetStorageContainerV2OutputArgs {
    /**
     * storage container UUID
     */
    extId: pulumi.Input<string>;
}
