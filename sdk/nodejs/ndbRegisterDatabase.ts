// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to register the database based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // register PostgreSQL database with instance not registered on VM
 * const name = new nutanix.NdbRegisterDatabase("name", {
 *     category: "DEFAULT",
 *     databaseName: "test-inst",
 *     databaseType: "postgres_database",
 *     description: "added by terraform",
 *     nxClusterId: "{{ cluster_ID }}",
 *     postgressInfos: [{
 *         backupPolicy: "prefer_secondary",
 *         dbName: "testdb1",
 *         dbPassword: "pass",
 *         dbUser: "postgres",
 *         listenerPort: "5432",
 *         postgresSoftwareHome: "{{ directory where the PostgreSQL database software is installed }}",
 *     }],
 *     resetDescriptionInNxCluster: false,
 *     timeMachineInfo: {
 *         description: "description of tms",
 *         name: "test-pg-inst-regis",
 *         schedule: {
 *             continuousschedule: {
 *                 enabled: true,
 *                 logbackupinterval: 30,
 *                 snapshotsperday: 1,
 *             },
 *             monthlyschedule: {
 *                 dayofmonth: 27,
 *                 enabled: true,
 *             },
 *             quartelyschedule: {
 *                 dayofmonth: 27,
 *                 enabled: true,
 *                 startmonth: "JANUARY",
 *             },
 *             snapshottimeofday: {
 *                 hours: 16,
 *                 minutes: 0,
 *                 seconds: 0,
 *             },
 *             weeklyschedule: {
 *                 dayofweek: "WEDNESDAY",
 *                 enabled: true,
 *             },
 *             yearlyschedule: {
 *                 dayofmonth: 31,
 *                 enabled: false,
 *                 month: "DECEMBER",
 *             },
 *         },
 *         slaid: " {{ SLA ID}}",
 *     },
 *     vmIp: "{{ vm_ip }}",
 *     vmPassword: "{{ vm_password }}",
 *     vmUsername: "{{ vm_username }}",
 *     workingDirectory: "/tmp",
 * });
 * ```
 */
export class NdbRegisterDatabase extends pulumi.CustomResource {
    /**
     * Get an existing NdbRegisterDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbRegisterDatabaseState, opts?: pulumi.CustomResourceOptions): NdbRegisterDatabase {
        return new NdbRegisterDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase';

    /**
     * Returns true if the given object is an instance of NdbRegisterDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbRegisterDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbRegisterDatabase.__pulumiType;
    }

    /**
     * action arguments
     */
    declare public readonly actionarguments: pulumi.Output<outputs.NdbRegisterDatabaseActionargument[] | undefined>;
    /**
     * auto tune staging drive. Default is true
     */
    declare public readonly autoTuneStagingDrive: pulumi.Output<boolean | undefined>;
    /**
     * category of database. Default is "DEFAULT"
     */
    declare public readonly category: pulumi.Output<string | undefined>;
    /**
     * whether instance is cloned or not
     */
    declare public /*out*/ readonly clone: pulumi.Output<boolean>;
    /**
     * clustered or not. Default is false
     */
    declare public readonly clustered: pulumi.Output<boolean | undefined>;
    /**
     * database cluster type
     */
    declare public /*out*/ readonly databaseClusterType: pulumi.Output<string>;
    /**
     * name of database
     */
    declare public readonly databaseName: pulumi.Output<string>;
    /**
     * database nodes associated with database instance
     */
    declare public /*out*/ readonly databaseNodes: pulumi.Output<outputs.NdbRegisterDatabaseDatabaseNode[]>;
    /**
     * status of database
     */
    declare public /*out*/ readonly databaseStatus: pulumi.Output<string>;
    /**
     * type of database. Required value: postgres_database
     */
    declare public readonly databaseType: pulumi.Output<string>;
    /**
     * date created for db instance
     */
    declare public /*out*/ readonly dateCreated: pulumi.Output<string>;
    /**
     * date modified for instance
     */
    declare public /*out*/ readonly dateModified: pulumi.Output<string>;
    /**
     * dbserver logical cluster
     */
    declare public /*out*/ readonly dbserverLogicalCluster: pulumi.Output<{[key: string]: string}>;
    /**
     * dbserver logical cluster id
     */
    declare public /*out*/ readonly dbserverLogicalClusterId: pulumi.Output<string>;
    /**
     * - (Optional) Delete the database from the VM. Default value is false
     */
    declare public readonly delete: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    declare public readonly deleteLogicalCluster: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    declare public readonly deleteTimeMachine: pulumi.Output<boolean | undefined>;
    /**
     * description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    declare public readonly forced: pulumi.Output<boolean | undefined>;
    /**
     * forced install. Default:  true
     */
    declare public readonly forcedInstall: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly groupInfo: pulumi.Output<{[key: string]: string}>;
    /**
     * info of instance
     */
    declare public /*out*/ readonly infos: pulumi.Output<outputs.NdbRegisterDatabaseInfo[]>;
    /**
     * LCM config of instance
     */
    declare public /*out*/ readonly lcmConfigs: pulumi.Output<outputs.NdbRegisterDatabaseLcmConfig[]>;
    /**
     * linked databases within database instance
     */
    declare public /*out*/ readonly linkedDatabases: pulumi.Output<outputs.NdbRegisterDatabaseLinkedDatabase[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    declare public /*out*/ readonly metric: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of database instance
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * cluster on which NDB is present
     */
    declare public readonly nxClusterId: pulumi.Output<string | undefined>;
    /**
     * parent database id
     */
    declare public /*out*/ readonly parentDatabaseId: pulumi.Output<string>;
    /**
     * parent source database id
     */
    declare public /*out*/ readonly parentSourceDatabaseId: pulumi.Output<string>;
    /**
     * parent time machine id
     */
    declare public /*out*/ readonly parentTimeMachineId: pulumi.Output<string>;
    /**
     * Postgress_Info for registering.
     */
    declare public readonly postgressInfos: pulumi.Output<outputs.NdbRegisterDatabasePostgressInfo[] | undefined>;
    /**
     * properties of database created
     */
    declare public /*out*/ readonly properties: pulumi.Output<outputs.NdbRegisterDatabaseProperty[]>;
    /**
     * - (Optional) Unregister the database from NDB. Default value is true
     */
    declare public readonly remove: pulumi.Output<boolean | undefined>;
    /**
     * Reset description in cluster
     */
    declare public readonly resetDescriptionInNxCluster: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    declare public readonly softRemove: pulumi.Output<boolean | undefined>;
    /**
     * status of instance
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * tags
     */
    declare public readonly tags: pulumi.Output<outputs.NdbRegisterDatabaseTag[]>;
    /**
     * time machine id of instance
     */
    declare public /*out*/ readonly timeMachineId: pulumi.Output<string>;
    /**
     * Time Machine info
     */
    declare public readonly timeMachineInfo: pulumi.Output<outputs.NdbRegisterDatabaseTimeMachineInfo | undefined>;
    /**
     * Time Machine details of instance
     */
    declare public /*out*/ readonly timeMachines: pulumi.Output<outputs.NdbRegisterDatabaseTimeMachine[]>;
    /**
     * timezone on which instance is created xw
     */
    declare public /*out*/ readonly timeZone: pulumi.Output<string>;
    /**
     * type of database
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * description for VM
     */
    declare public readonly vmDescription: pulumi.Output<string | undefined>;
    /**
     * IP address of dbserver VM
     */
    declare public readonly vmIp: pulumi.Output<string>;
    /**
     * password of the NDB drive user account.
     */
    declare public readonly vmPassword: pulumi.Output<string | undefined>;
    /**
     * ssh key for vm
     */
    declare public readonly vmSshkey: pulumi.Output<string | undefined>;
    /**
     * username of the NDB drive user account that has sudo access.
     */
    declare public readonly vmUsername: pulumi.Output<string | undefined>;
    /**
     * working directory. Default is /tmp
     */
    declare public readonly workingDirectory: pulumi.Output<string | undefined>;

    /**
     * Create a NdbRegisterDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbRegisterDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbRegisterDatabaseArgs | NdbRegisterDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbRegisterDatabaseState | undefined;
            resourceInputs["actionarguments"] = state?.actionarguments;
            resourceInputs["autoTuneStagingDrive"] = state?.autoTuneStagingDrive;
            resourceInputs["category"] = state?.category;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["clustered"] = state?.clustered;
            resourceInputs["databaseClusterType"] = state?.databaseClusterType;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["databaseNodes"] = state?.databaseNodes;
            resourceInputs["databaseStatus"] = state?.databaseStatus;
            resourceInputs["databaseType"] = state?.databaseType;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateModified"] = state?.dateModified;
            resourceInputs["dbserverLogicalCluster"] = state?.dbserverLogicalCluster;
            resourceInputs["dbserverLogicalClusterId"] = state?.dbserverLogicalClusterId;
            resourceInputs["delete"] = state?.delete;
            resourceInputs["deleteLogicalCluster"] = state?.deleteLogicalCluster;
            resourceInputs["deleteTimeMachine"] = state?.deleteTimeMachine;
            resourceInputs["description"] = state?.description;
            resourceInputs["forced"] = state?.forced;
            resourceInputs["forcedInstall"] = state?.forcedInstall;
            resourceInputs["groupInfo"] = state?.groupInfo;
            resourceInputs["infos"] = state?.infos;
            resourceInputs["lcmConfigs"] = state?.lcmConfigs;
            resourceInputs["linkedDatabases"] = state?.linkedDatabases;
            resourceInputs["metric"] = state?.metric;
            resourceInputs["name"] = state?.name;
            resourceInputs["nxClusterId"] = state?.nxClusterId;
            resourceInputs["parentDatabaseId"] = state?.parentDatabaseId;
            resourceInputs["parentSourceDatabaseId"] = state?.parentSourceDatabaseId;
            resourceInputs["parentTimeMachineId"] = state?.parentTimeMachineId;
            resourceInputs["postgressInfos"] = state?.postgressInfos;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["remove"] = state?.remove;
            resourceInputs["resetDescriptionInNxCluster"] = state?.resetDescriptionInNxCluster;
            resourceInputs["softRemove"] = state?.softRemove;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeMachineId"] = state?.timeMachineId;
            resourceInputs["timeMachineInfo"] = state?.timeMachineInfo;
            resourceInputs["timeMachines"] = state?.timeMachines;
            resourceInputs["timeZone"] = state?.timeZone;
            resourceInputs["type"] = state?.type;
            resourceInputs["vmDescription"] = state?.vmDescription;
            resourceInputs["vmIp"] = state?.vmIp;
            resourceInputs["vmPassword"] = state?.vmPassword;
            resourceInputs["vmSshkey"] = state?.vmSshkey;
            resourceInputs["vmUsername"] = state?.vmUsername;
            resourceInputs["workingDirectory"] = state?.workingDirectory;
        } else {
            const args = argsOrState as NdbRegisterDatabaseArgs | undefined;
            if (args?.databaseName === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (args?.databaseType === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseType'");
            }
            if (args?.vmIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmIp'");
            }
            resourceInputs["actionarguments"] = args?.actionarguments;
            resourceInputs["autoTuneStagingDrive"] = args?.autoTuneStagingDrive;
            resourceInputs["category"] = args?.category;
            resourceInputs["clustered"] = args?.clustered;
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["databaseType"] = args?.databaseType;
            resourceInputs["delete"] = args?.delete;
            resourceInputs["deleteLogicalCluster"] = args?.deleteLogicalCluster;
            resourceInputs["deleteTimeMachine"] = args?.deleteTimeMachine;
            resourceInputs["description"] = args?.description;
            resourceInputs["forced"] = args?.forced;
            resourceInputs["forcedInstall"] = args?.forcedInstall;
            resourceInputs["nxClusterId"] = args?.nxClusterId;
            resourceInputs["postgressInfos"] = args?.postgressInfos;
            resourceInputs["remove"] = args?.remove;
            resourceInputs["resetDescriptionInNxCluster"] = args?.resetDescriptionInNxCluster;
            resourceInputs["softRemove"] = args?.softRemove;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeMachineInfo"] = args?.timeMachineInfo;
            resourceInputs["vmDescription"] = args?.vmDescription;
            resourceInputs["vmIp"] = args?.vmIp;
            resourceInputs["vmPassword"] = args?.vmPassword ? pulumi.secret(args.vmPassword) : undefined;
            resourceInputs["vmSshkey"] = args?.vmSshkey ? pulumi.secret(args.vmSshkey) : undefined;
            resourceInputs["vmUsername"] = args?.vmUsername;
            resourceInputs["workingDirectory"] = args?.workingDirectory;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["databaseClusterType"] = undefined /*out*/;
            resourceInputs["databaseNodes"] = undefined /*out*/;
            resourceInputs["databaseStatus"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverLogicalCluster"] = undefined /*out*/;
            resourceInputs["dbserverLogicalClusterId"] = undefined /*out*/;
            resourceInputs["groupInfo"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["lcmConfigs"] = undefined /*out*/;
            resourceInputs["linkedDatabases"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["parentSourceDatabaseId"] = undefined /*out*/;
            resourceInputs["parentTimeMachineId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeMachineId"] = undefined /*out*/;
            resourceInputs["timeMachines"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["vmPassword", "vmSshkey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NdbRegisterDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbRegisterDatabase resources.
 */
export interface NdbRegisterDatabaseState {
    /**
     * action arguments
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseActionargument>[]>;
    /**
     * auto tune staging drive. Default is true
     */
    autoTuneStagingDrive?: pulumi.Input<boolean>;
    /**
     * category of database. Default is "DEFAULT"
     */
    category?: pulumi.Input<string>;
    /**
     * whether instance is cloned or not
     */
    clone?: pulumi.Input<boolean>;
    /**
     * clustered or not. Default is false
     */
    clustered?: pulumi.Input<boolean>;
    /**
     * database cluster type
     */
    databaseClusterType?: pulumi.Input<string>;
    /**
     * name of database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * database nodes associated with database instance
     */
    databaseNodes?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNode>[]>;
    /**
     * status of database
     */
    databaseStatus?: pulumi.Input<string>;
    /**
     * type of database. Required value: postgres_database
     */
    databaseType?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * dbserver logical cluster
     */
    dbserverLogicalCluster?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * dbserver logical cluster id
     */
    dbserverLogicalClusterId?: pulumi.Input<string>;
    /**
     * - (Optional) Delete the database from the VM. Default value is false
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    deleteLogicalCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    forced?: pulumi.Input<boolean>;
    /**
     * forced install. Default:  true
     */
    forcedInstall?: pulumi.Input<boolean>;
    groupInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfo>[]>;
    /**
     * LCM config of instance
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfig>[]>;
    /**
     * linked databases within database instance
     */
    linkedDatabases?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLinkedDatabase>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * cluster on which NDB is present
     */
    nxClusterId?: pulumi.Input<string>;
    /**
     * parent database id
     */
    parentDatabaseId?: pulumi.Input<string>;
    /**
     * parent source database id
     */
    parentSourceDatabaseId?: pulumi.Input<string>;
    /**
     * parent time machine id
     */
    parentTimeMachineId?: pulumi.Input<string>;
    /**
     * Postgress_Info for registering.
     */
    postgressInfos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabasePostgressInfo>[]>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseProperty>[]>;
    /**
     * - (Optional) Unregister the database from NDB. Default value is true
     */
    remove?: pulumi.Input<boolean>;
    /**
     * Reset description in cluster
     */
    resetDescriptionInNxCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTag>[]>;
    /**
     * time machine id of instance
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * Time Machine info
     */
    timeMachineInfo?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfo>;
    /**
     * Time Machine details of instance
     */
    timeMachines?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachine>[]>;
    /**
     * timezone on which instance is created xw
     */
    timeZone?: pulumi.Input<string>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
    /**
     * description for VM
     */
    vmDescription?: pulumi.Input<string>;
    /**
     * IP address of dbserver VM
     */
    vmIp?: pulumi.Input<string>;
    /**
     * password of the NDB drive user account.
     */
    vmPassword?: pulumi.Input<string>;
    /**
     * ssh key for vm
     */
    vmSshkey?: pulumi.Input<string>;
    /**
     * username of the NDB drive user account that has sudo access.
     */
    vmUsername?: pulumi.Input<string>;
    /**
     * working directory. Default is /tmp
     */
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbRegisterDatabase resource.
 */
export interface NdbRegisterDatabaseArgs {
    /**
     * action arguments
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseActionargument>[]>;
    /**
     * auto tune staging drive. Default is true
     */
    autoTuneStagingDrive?: pulumi.Input<boolean>;
    /**
     * category of database. Default is "DEFAULT"
     */
    category?: pulumi.Input<string>;
    /**
     * clustered or not. Default is false
     */
    clustered?: pulumi.Input<boolean>;
    /**
     * name of database
     */
    databaseName: pulumi.Input<string>;
    /**
     * type of database. Required value: postgres_database
     */
    databaseType: pulumi.Input<string>;
    /**
     * - (Optional) Delete the database from the VM. Default value is false
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the logical cluster. Default is true
     */
    deleteLogicalCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) Force delete of instance. Default is false
     */
    forced?: pulumi.Input<boolean>;
    /**
     * forced install. Default:  true
     */
    forcedInstall?: pulumi.Input<boolean>;
    /**
     * cluster on which NDB is present
     */
    nxClusterId?: pulumi.Input<string>;
    /**
     * Postgress_Info for registering.
     */
    postgressInfos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabasePostgressInfo>[]>;
    /**
     * - (Optional) Unregister the database from NDB. Default value is true
     */
    remove?: pulumi.Input<boolean>;
    /**
     * Reset description in cluster
     */
    resetDescriptionInNxCluster?: pulumi.Input<boolean>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTag>[]>;
    /**
     * Time Machine info
     */
    timeMachineInfo?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfo>;
    /**
     * description for VM
     */
    vmDescription?: pulumi.Input<string>;
    /**
     * IP address of dbserver VM
     */
    vmIp: pulumi.Input<string>;
    /**
     * password of the NDB drive user account.
     */
    vmPassword?: pulumi.Input<string>;
    /**
     * ssh key for vm
     */
    vmSshkey?: pulumi.Input<string>;
    /**
     * username of the NDB drive user account that has sudo access.
     */
    vmUsername?: pulumi.Input<string>;
    /**
     * working directory. Default is /tmp
     */
    workingDirectory?: pulumi.Input<string>;
}
