// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to Creates a new Volume Disk.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // Associate categories to volume group
 * const example = new nutanix.AssociateCategoryToVolumeGroupV2("example", {
 *     categories: [
 *         {
 *             extId: "85e68112-5b2b-4220-bc8d-e529e4bf420e",
 *         },
 *         {
 *             extId: "45588de3-7c18-4230-a147-7e26ad92d8a6",
 *         },
 *         {
 *             extId: "1c6638f2-5215-4086-8f21-a30e75cb8068",
 *         },
 *     ],
 *     extId: "f0c0a4ac-c734-4770-b5d7-eca6793eeeb7",
 * });
 * // Volume Group extId
 * ```
 */
export class AssociateCategoryToVolumeGroupV2 extends pulumi.CustomResource {
    /**
     * Get an existing AssociateCategoryToVolumeGroupV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssociateCategoryToVolumeGroupV2State, opts?: pulumi.CustomResourceOptions): AssociateCategoryToVolumeGroupV2 {
        return new AssociateCategoryToVolumeGroupV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/associateCategoryToVolumeGroupV2:AssociateCategoryToVolumeGroupV2';

    /**
     * Returns true if the given object is an instance of AssociateCategoryToVolumeGroupV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssociateCategoryToVolumeGroupV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssociateCategoryToVolumeGroupV2.__pulumiType;
    }

    /**
     * -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
     */
    declare public readonly categories: pulumi.Output<outputs.AssociateCategoryToVolumeGroupV2Category[] | undefined>;
    declare public readonly extId: pulumi.Output<string>;

    /**
     * Create a AssociateCategoryToVolumeGroupV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssociateCategoryToVolumeGroupV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssociateCategoryToVolumeGroupV2Args | AssociateCategoryToVolumeGroupV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssociateCategoryToVolumeGroupV2State | undefined;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["extId"] = state?.extId;
        } else {
            const args = argsOrState as AssociateCategoryToVolumeGroupV2Args | undefined;
            if (args?.extId === undefined && !opts.urn) {
                throw new Error("Missing required property 'extId'");
            }
            resourceInputs["categories"] = args?.categories;
            resourceInputs["extId"] = args?.extId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssociateCategoryToVolumeGroupV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AssociateCategoryToVolumeGroupV2 resources.
 */
export interface AssociateCategoryToVolumeGroupV2State {
    /**
     * -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.AssociateCategoryToVolumeGroupV2Category>[]>;
    extId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AssociateCategoryToVolumeGroupV2 resource.
 */
export interface AssociateCategoryToVolumeGroupV2Args {
    /**
     * -(Required) The category to be associated/disassociated with the Volume Group. This is a mandatory field.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.AssociateCategoryToVolumeGroupV2Category>[]>;
    extId: pulumi.Input<string>;
}
