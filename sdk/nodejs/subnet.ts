// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.
 */
export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * The version of the API.
     */
    declare public /*out*/ readonly apiVersion: pulumi.Output<string>;
    /**
     * - (Optional) The reference to a availability_zone.
     */
    declare public readonly availabilityZoneReference: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) The categories of the resource.
     */
    declare public readonly categories: pulumi.Output<outputs.SubnetCategory[]>;
    declare public /*out*/ readonly clusterName: pulumi.Output<string>;
    /**
     * - (Required) The UUID of the cluster.
     */
    declare public readonly clusterUuid: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Default gateway IP address.
     */
    declare public readonly defaultGatewayIp: pulumi.Output<string>;
    /**
     * - (Optional) A description for subnet.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * - (Optional). List of Domain Name Server addresses .
     */
    declare public readonly dhcpDomainNameServerLists: pulumi.Output<string[]>;
    /**
     * - (Optional).The DNS domain search list .
     */
    declare public readonly dhcpDomainSearchLists: pulumi.Output<string[]>;
    /**
     * - (Optional) Spec for defining DHCP options.
     */
    declare public readonly dhcpOptions: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) Host address.
     */
    declare public readonly dhcpServerAddress: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) Port Number.
     */
    declare public readonly dhcpServerAddressPort: pulumi.Output<number>;
    /**
     * - (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.
     */
    declare public readonly enableNat: pulumi.Output<boolean>;
    /**
     * -(Optional) Range of IPs.
     */
    declare public readonly ipConfigPoolListRanges: pulumi.Output<string[]>;
    /**
     * - (Optional) Whether the subnet is external subnet or not.
     */
    declare public readonly isExternal: pulumi.Output<boolean>;
    /**
     * - (Required) The subnet kind metadata.
     */
    declare public /*out*/ readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) Subnet name (Readonly).
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * - (Optional) The reference to a network_function_chain.
     */
    declare public readonly networkFunctionChainReference: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) The reference to a user.
     */
    declare public readonly ownerReference: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional).
     */
    declare public readonly prefixLength: pulumi.Output<number>;
    /**
     * - (Optional) The reference to a project.
     */
    declare public readonly projectReference: pulumi.Output<{[key: string]: string}>;
    /**
     * - The state of the subnet.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * - (Optional) Subnet IP address.
     */
    declare public readonly subnetIp: pulumi.Output<string>;
    /**
     * - (Optional). Valid Types are ["VLAN", "OVERLAY"]
     */
    declare public readonly subnetType: pulumi.Output<string>;
    /**
     * - (Optional). For VLAN subnet.
     */
    declare public readonly vlanId: pulumi.Output<number>;
    /**
     * VPC reference uuid
     */
    declare public readonly vpcReferenceUuid: pulumi.Output<string>;
    /**
     * - (Optional).
     */
    declare public readonly vswitchName: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["apiVersion"] = state?.apiVersion;
            resourceInputs["availabilityZoneReference"] = state?.availabilityZoneReference;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["clusterUuid"] = state?.clusterUuid;
            resourceInputs["defaultGatewayIp"] = state?.defaultGatewayIp;
            resourceInputs["description"] = state?.description;
            resourceInputs["dhcpDomainNameServerLists"] = state?.dhcpDomainNameServerLists;
            resourceInputs["dhcpDomainSearchLists"] = state?.dhcpDomainSearchLists;
            resourceInputs["dhcpOptions"] = state?.dhcpOptions;
            resourceInputs["dhcpServerAddress"] = state?.dhcpServerAddress;
            resourceInputs["dhcpServerAddressPort"] = state?.dhcpServerAddressPort;
            resourceInputs["enableNat"] = state?.enableNat;
            resourceInputs["ipConfigPoolListRanges"] = state?.ipConfigPoolListRanges;
            resourceInputs["isExternal"] = state?.isExternal;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkFunctionChainReference"] = state?.networkFunctionChainReference;
            resourceInputs["ownerReference"] = state?.ownerReference;
            resourceInputs["prefixLength"] = state?.prefixLength;
            resourceInputs["projectReference"] = state?.projectReference;
            resourceInputs["state"] = state?.state;
            resourceInputs["subnetIp"] = state?.subnetIp;
            resourceInputs["subnetType"] = state?.subnetType;
            resourceInputs["vlanId"] = state?.vlanId;
            resourceInputs["vpcReferenceUuid"] = state?.vpcReferenceUuid;
            resourceInputs["vswitchName"] = state?.vswitchName;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if (args?.subnetType === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetType'");
            }
            resourceInputs["availabilityZoneReference"] = args?.availabilityZoneReference;
            resourceInputs["categories"] = args?.categories;
            resourceInputs["clusterUuid"] = args?.clusterUuid;
            resourceInputs["defaultGatewayIp"] = args?.defaultGatewayIp;
            resourceInputs["description"] = args?.description;
            resourceInputs["dhcpDomainNameServerLists"] = args?.dhcpDomainNameServerLists;
            resourceInputs["dhcpDomainSearchLists"] = args?.dhcpDomainSearchLists;
            resourceInputs["dhcpOptions"] = args?.dhcpOptions;
            resourceInputs["dhcpServerAddress"] = args?.dhcpServerAddress;
            resourceInputs["dhcpServerAddressPort"] = args?.dhcpServerAddressPort;
            resourceInputs["enableNat"] = args?.enableNat;
            resourceInputs["ipConfigPoolListRanges"] = args?.ipConfigPoolListRanges;
            resourceInputs["isExternal"] = args?.isExternal;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkFunctionChainReference"] = args?.networkFunctionChainReference;
            resourceInputs["ownerReference"] = args?.ownerReference;
            resourceInputs["prefixLength"] = args?.prefixLength;
            resourceInputs["projectReference"] = args?.projectReference;
            resourceInputs["subnetIp"] = args?.subnetIp;
            resourceInputs["subnetType"] = args?.subnetType;
            resourceInputs["vlanId"] = args?.vlanId;
            resourceInputs["vpcReferenceUuid"] = args?.vpcReferenceUuid;
            resourceInputs["vswitchName"] = args?.vswitchName;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * The version of the API.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a availability_zone.
     */
    availabilityZoneReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The categories of the resource.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.SubnetCategory>[]>;
    clusterName?: pulumi.Input<string>;
    /**
     * - (Required) The UUID of the cluster.
     */
    clusterUuid?: pulumi.Input<string>;
    /**
     * - (Optional) Default gateway IP address.
     */
    defaultGatewayIp?: pulumi.Input<string>;
    /**
     * - (Optional) A description for subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional). List of Domain Name Server addresses .
     */
    dhcpDomainNameServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Optional).The DNS domain search list .
     */
    dhcpDomainSearchLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Optional) Spec for defining DHCP options.
     */
    dhcpOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Host address.
     */
    dhcpServerAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Port Number.
     */
    dhcpServerAddressPort?: pulumi.Input<number>;
    /**
     * - (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.
     */
    enableNat?: pulumi.Input<boolean>;
    /**
     * -(Optional) Range of IPs.
     */
    ipConfigPoolListRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Optional) Whether the subnet is external subnet or not.
     */
    isExternal?: pulumi.Input<boolean>;
    /**
     * - (Required) The subnet kind metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Subnet name (Readonly).
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a network_function_chain.
     */
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional).
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - The state of the subnet.
     */
    state?: pulumi.Input<string>;
    /**
     * - (Optional) Subnet IP address.
     */
    subnetIp?: pulumi.Input<string>;
    /**
     * - (Optional). Valid Types are ["VLAN", "OVERLAY"]
     */
    subnetType?: pulumi.Input<string>;
    /**
     * - (Optional). For VLAN subnet.
     */
    vlanId?: pulumi.Input<number>;
    /**
     * VPC reference uuid
     */
    vpcReferenceUuid?: pulumi.Input<string>;
    /**
     * - (Optional).
     */
    vswitchName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * - (Optional) The reference to a availability_zone.
     */
    availabilityZoneReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The categories of the resource.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.SubnetCategory>[]>;
    /**
     * - (Required) The UUID of the cluster.
     */
    clusterUuid?: pulumi.Input<string>;
    /**
     * - (Optional) Default gateway IP address.
     */
    defaultGatewayIp?: pulumi.Input<string>;
    /**
     * - (Optional) A description for subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional). List of Domain Name Server addresses .
     */
    dhcpDomainNameServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Optional).The DNS domain search list .
     */
    dhcpDomainSearchLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Optional) Spec for defining DHCP options.
     */
    dhcpOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Host address.
     */
    dhcpServerAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Port Number.
     */
    dhcpServerAddressPort?: pulumi.Input<number>;
    /**
     * - (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.
     */
    enableNat?: pulumi.Input<boolean>;
    /**
     * -(Optional) Range of IPs.
     */
    ipConfigPoolListRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Optional) Whether the subnet is external subnet or not.
     */
    isExternal?: pulumi.Input<boolean>;
    /**
     * - (Optional) Subnet name (Readonly).
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a network_function_chain.
     */
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional).
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Subnet IP address.
     */
    subnetIp?: pulumi.Input<string>;
    /**
     * - (Optional). Valid Types are ["VLAN", "OVERLAY"]
     */
    subnetType: pulumi.Input<string>;
    /**
     * - (Optional). For VLAN subnet.
     */
    vlanId?: pulumi.Input<number>;
    /**
     * VPC reference uuid
     */
    vpcReferenceUuid?: pulumi.Input<string>;
    /**
     * - (Optional).
     */
    vswitchName?: pulumi.Input<string>;
}
