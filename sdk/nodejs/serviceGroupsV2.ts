// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Create an service Group
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // Add Service  group. with TCP and UDP
 * const tcp_udp_service = new nutanix.ServiceGroupsV2("tcp-udp-service", {
 *     description: "service group description",
 *     tcpServices: [{
 *         endPort: 232,
 *         startPort: 232,
 *     }],
 *     udpServices: [{
 *         endPort: 232,
 *         startPort: 232,
 *     }],
 * });
 * // service group with ICMP
 * const icmp_service = new nutanix.ServiceGroupsV2("icmp-service", {
 *     description: "service group description",
 *     icmpServices: [{
 *         code: 0,
 *         type: 8,
 *     }],
 * });
 * // service group with All TCP, UDP and ICMP
 * const all_service = new nutanix.ServiceGroupsV2("all-service", {
 *     description: "service group description",
 *     icmpServices: [{
 *         code: 0,
 *         type: 8,
 *     }],
 *     tcpServices: [{
 *         endPort: 232,
 *         startPort: 232,
 *     }],
 *     udpServices: [{
 *         endPort: 232,
 *         startPort: 232,
 *     }],
 * });
 * ```
 */
export class ServiceGroupsV2 extends pulumi.CustomResource {
    /**
     * Get an existing ServiceGroupsV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceGroupsV2State, opts?: pulumi.CustomResourceOptions): ServiceGroupsV2 {
        return new ServiceGroupsV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/serviceGroupsV2:ServiceGroupsV2';

    /**
     * Returns true if the given object is an instance of ServiceGroupsV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceGroupsV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceGroupsV2.__pulumiType;
    }

    /**
     * created by.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Description of the service group
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * address group uuid.
     */
    public /*out*/ readonly extId!: pulumi.Output<string>;
    /**
     * Icmp Type Code List.
     */
    public readonly icmpServices!: pulumi.Output<outputs.ServiceGroupsV2IcmpService[] | undefined>;
    /**
     * Service Group is system defined or not.
     */
    public /*out*/ readonly isSystemDefined!: pulumi.Output<boolean>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.ServiceGroupsV2Link[]>;
    /**
     * Name of the service group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Reference to policy associated with Address Group.
     */
    public /*out*/ readonly policyReferences!: pulumi.Output<string[]>;
    /**
     * List of TCP ports in the service.
     */
    public readonly tcpServices!: pulumi.Output<outputs.ServiceGroupsV2TcpService[] | undefined>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * List of UDP ports in the service.
     */
    public readonly udpServices!: pulumi.Output<outputs.ServiceGroupsV2UdpService[] | undefined>;

    /**
     * Create a ServiceGroupsV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceGroupsV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceGroupsV2Args | ServiceGroupsV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceGroupsV2State | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["icmpServices"] = state ? state.icmpServices : undefined;
            resourceInputs["isSystemDefined"] = state ? state.isSystemDefined : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyReferences"] = state ? state.policyReferences : undefined;
            resourceInputs["tcpServices"] = state ? state.tcpServices : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["udpServices"] = state ? state.udpServices : undefined;
        } else {
            const args = argsOrState as ServiceGroupsV2Args | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["icmpServices"] = args ? args.icmpServices : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tcpServices"] = args ? args.tcpServices : undefined;
            resourceInputs["udpServices"] = args ? args.udpServices : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["isSystemDefined"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["policyReferences"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceGroupsV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceGroupsV2 resources.
 */
export interface ServiceGroupsV2State {
    /**
     * created by.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Description of the service group
     */
    description?: pulumi.Input<string>;
    /**
     * address group uuid.
     */
    extId?: pulumi.Input<string>;
    /**
     * Icmp Type Code List.
     */
    icmpServices?: pulumi.Input<pulumi.Input<inputs.ServiceGroupsV2IcmpService>[]>;
    /**
     * Service Group is system defined or not.
     */
    isSystemDefined?: pulumi.Input<boolean>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.ServiceGroupsV2Link>[]>;
    /**
     * Name of the service group
     */
    name?: pulumi.Input<string>;
    /**
     * Reference to policy associated with Address Group.
     */
    policyReferences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of TCP ports in the service.
     */
    tcpServices?: pulumi.Input<pulumi.Input<inputs.ServiceGroupsV2TcpService>[]>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * List of UDP ports in the service.
     */
    udpServices?: pulumi.Input<pulumi.Input<inputs.ServiceGroupsV2UdpService>[]>;
}

/**
 * The set of arguments for constructing a ServiceGroupsV2 resource.
 */
export interface ServiceGroupsV2Args {
    /**
     * Description of the service group
     */
    description?: pulumi.Input<string>;
    /**
     * Icmp Type Code List.
     */
    icmpServices?: pulumi.Input<pulumi.Input<inputs.ServiceGroupsV2IcmpService>[]>;
    /**
     * Name of the service group
     */
    name?: pulumi.Input<string>;
    /**
     * List of TCP ports in the service.
     */
    tcpServices?: pulumi.Input<pulumi.Input<inputs.ServiceGroupsV2TcpService>[]>;
    /**
     * List of UDP ports in the service.
     */
    udpServices?: pulumi.Input<pulumi.Input<inputs.ServiceGroupsV2UdpService>[]>;
}
