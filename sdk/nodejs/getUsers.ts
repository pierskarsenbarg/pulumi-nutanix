// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a datasource to retrieve all the users.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const user = new nutanix.User("user", {
 *     directoryServiceUser: {
 *         directoryServiceReference: {
 *             uuid: "<directory-service-uuid>",
 *         },
 *         userPrincipalName: "test-user@ntnxlab.local",
 *     },
 * });
 * const users = pulumi.output(nutanix.getUser());
 * ```
 */
export function getUsers(args?: GetUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetUsersResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getUsers:getUsers", {
        "metadatas": args.metadatas,
    }, opts);
}

/**
 * A collection of arguments for invoking getUsers.
 */
export interface GetUsersArgs {
    metadatas?: inputs.GetUsersMetadata[];
}

/**
 * A collection of values returned by getUsers.
 */
export interface GetUsersResult {
    /**
     * The version of the API.
     * * `state`: - The state of the entity.
     * * `name`: - The name of the user.
     * * `userType`: - The name of the user.
     * * `displayName`: - The display name of the user (common name) provided by the directory service.
     * * `projectReferenceList`: - A list of projects the user is part of. See #reference for more details.
     * * `accessControlPolicyReferenceList`: - List of ACP references. See #reference for more details.
     * * `directoryServiceUser`: - (Optional) The directory service user configuration. See below for more information.
     * * `identityProviderUser`: - (Optional) (Optional) The identity provider user configuration. See below for more information.
     * * `categories`: - (Optional) Categories for the user.
     * * `projectReference`: - (Optional) The reference to a project.
     * * `ownerReference`: - (Optional) The reference to a user.
     */
    readonly apiVersion: string;
    readonly entities: outputs.GetUsersEntity[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly metadatas: outputs.GetUsersMetadata[];
}

export function getUsersOutput(args?: GetUsersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUsersResult> {
    return pulumi.output(args).apply(a => getUsers(a, opts))
}

/**
 * A collection of arguments for invoking getUsers.
 */
export interface GetUsersOutputArgs {
    metadatas?: pulumi.Input<pulumi.Input<inputs.GetUsersMetadataArgs>[]>;
}
