// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Collaborative reboot or shutdown of a Virtual Machine through the ACPI support in the operating system. Also, Collaborative reboot or shutdown of a Virtual Machine, requesting Nutanix Guest Tools to trigger a reboot or shutdown from within the VM.
 */
export class VmShutdownActionV2 extends pulumi.CustomResource {
    /**
     * Get an existing VmShutdownActionV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmShutdownActionV2State, opts?: pulumi.CustomResourceOptions): VmShutdownActionV2 {
        return new VmShutdownActionV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/vmShutdownActionV2:VmShutdownActionV2';

    /**
     * Returns true if the given object is an instance of VmShutdownActionV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmShutdownActionV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmShutdownActionV2.__pulumiType;
    }

    /**
     * It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The globally unique identifier of a VM. It should be of type UUID.
     */
    public readonly extId!: pulumi.Output<string>;
    /**
     * Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
     */
    public readonly guestPowerStateTransitionConfigs!: pulumi.Output<outputs.VmShutdownActionV2GuestPowerStateTransitionConfig[] | undefined>;

    /**
     * Create a VmShutdownActionV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmShutdownActionV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmShutdownActionV2Args | VmShutdownActionV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmShutdownActionV2State | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["guestPowerStateTransitionConfigs"] = state ? state.guestPowerStateTransitionConfigs : undefined;
        } else {
            const args = argsOrState as VmShutdownActionV2Args | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.extId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["guestPowerStateTransitionConfigs"] = args ? args.guestPowerStateTransitionConfigs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmShutdownActionV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmShutdownActionV2 resources.
 */
export interface VmShutdownActionV2State {
    /**
     * It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
     */
    action?: pulumi.Input<string>;
    /**
     * The globally unique identifier of a VM. It should be of type UUID.
     */
    extId?: pulumi.Input<string>;
    /**
     * Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
     */
    guestPowerStateTransitionConfigs?: pulumi.Input<pulumi.Input<inputs.VmShutdownActionV2GuestPowerStateTransitionConfig>[]>;
}

/**
 * The set of arguments for constructing a VmShutdownActionV2 resource.
 */
export interface VmShutdownActionV2Args {
    /**
     * It supports "shutdown", "guestShutdown", "reboot", "guestReboot".
     */
    action: pulumi.Input<string>;
    /**
     * The globally unique identifier of a VM. It should be of type UUID.
     */
    extId: pulumi.Input<string>;
    /**
     * Additional configuration for Nutanix Gust Tools power state transition. It should be only used with `guestShutdown` or `guestReboot`.
     */
    guestPowerStateTransitionConfigs?: pulumi.Input<pulumi.Input<inputs.VmShutdownActionV2GuestPowerStateTransitionConfig>[]>;
}
