// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Describes a Karbon Cluster
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const cluster = pulumi.output(nutanix.getKarbonCluster({
 *     karbonClusterId: "<YOUR-CLUSTER-ID>",
 * }));
 * ```
 */
export function getKarbonCluster(args?: GetKarbonClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetKarbonClusterResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getKarbonCluster:getKarbonCluster", {
        "karbonClusterId": args.karbonClusterId,
        "karbonClusterName": args.karbonClusterName,
    }, opts);
}

/**
 * A collection of arguments for invoking getKarbonCluster.
 */
export interface GetKarbonClusterArgs {
    karbonClusterId?: string;
    karbonClusterName?: string;
}

/**
 * A collection of values returned by getKarbonCluster.
 */
export interface GetKarbonClusterResult {
    readonly deploymentType: string;
    readonly etcdNodePools: outputs.GetKarbonClusterEtcdNodePool[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly karbonClusterId?: string;
    readonly karbonClusterName?: string;
    readonly kubeapiServerIpv4Address: string;
    readonly masterNodePools: outputs.GetKarbonClusterMasterNodePool[];
    readonly name: string;
    readonly status: string;
    readonly uuid: string;
    readonly version: string;
    readonly workerNodePools: outputs.GetKarbonClusterWorkerNodePool[];
}

export function getKarbonClusterOutput(args?: GetKarbonClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKarbonClusterResult> {
    return pulumi.output(args).apply(a => getKarbonCluster(a, opts))
}

/**
 * A collection of arguments for invoking getKarbonCluster.
 */
export interface GetKarbonClusterOutputArgs {
    karbonClusterId?: pulumi.Input<string>;
    karbonClusterName?: pulumi.Input<string>;
}
