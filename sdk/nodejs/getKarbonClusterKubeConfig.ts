// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Describes the SSH config from a Karbon Cluster
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * // Get kubeconfig by cluster UUID
 * const configbyid = pulumi.output(nutanix.getKarbonClusterKubeConfig({
 *     karbonClusterId: "<YOUR-CLUSTER-ID>",
 * }));
 * // Get Kubeconfig by cluster name
 * const configbyname = pulumi.output(nutanix.getKarbonClusterKubeConfig({
 *     karbonClusterName: "<YOUR-CLUSTER-NAME>",
 * }));
 * ```
 */
export function getKarbonClusterKubeConfig(args?: GetKarbonClusterKubeConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetKarbonClusterKubeConfigResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getKarbonClusterKubeConfig:getKarbonClusterKubeConfig", {
        "karbonClusterId": args.karbonClusterId,
        "karbonClusterName": args.karbonClusterName,
    }, opts);
}

/**
 * A collection of arguments for invoking getKarbonClusterKubeConfig.
 */
export interface GetKarbonClusterKubeConfigArgs {
    karbonClusterId?: string;
    karbonClusterName?: string;
}

/**
 * A collection of values returned by getKarbonClusterKubeConfig.
 */
export interface GetKarbonClusterKubeConfigResult {
    readonly accessToken: string;
    readonly clusterCaCertificate: string;
    readonly clusterUrl: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly karbonClusterId?: string;
    readonly karbonClusterName?: string;
    readonly name: string;
}

export function getKarbonClusterKubeConfigOutput(args?: GetKarbonClusterKubeConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKarbonClusterKubeConfigResult> {
    return pulumi.output(args).apply(a => getKarbonClusterKubeConfig(a, opts))
}

/**
 * A collection of arguments for invoking getKarbonClusterKubeConfig.
 */
export interface GetKarbonClusterKubeConfigOutputArgs {
    karbonClusterId?: pulumi.Input<string>;
    karbonClusterName?: pulumi.Input<string>;
}
