// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Fetches a role based on the provided external identifier.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const role = nutanix.getRoleV2({
 *     extId: "<role_uuid>",
 * });
 * ```
 */
export function getRoleV2(args: GetRoleV2Args, opts?: pulumi.InvokeOptions): Promise<GetRoleV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getRoleV2:getRoleV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRoleV2.
 */
export interface GetRoleV2Args {
    /**
     * - (Required) ExtId for the Role.
     */
    extId: string;
}

/**
 * A collection of values returned by getRoleV2.
 */
export interface GetRoleV2Result {
    /**
     * - List of Accessible Clients for the Role.
     */
    readonly accessibleClients: string[];
    /**
     * - List of Accessible Entity Types for the Role.
     */
    readonly accessibleEntityTypes: string[];
    /**
     * - Number of Users assigned to given Role.
     */
    readonly assignedUsersCount: number;
    /**
     * - Number of User Groups assigned to given Role.
     */
    readonly assignedUsersGroupsCount: number;
    /**
     * - Client that created the entity.
     */
    readonly clientName: string;
    /**
     * - User or Service Name that created the Role.
     */
    readonly createdBy: string;
    /**
     * - The creation time of the Role.
     */
    readonly createdTime: string;
    /**
     * - Description of the Role.
     */
    readonly description: string;
    /**
     * - The display name for the Role.
     */
    readonly displayName: string;
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * - Flag identifying if the Role is system defined or not.
     */
    readonly isSystemDefined: boolean;
    /**
     * - The time when the Role was last updated.
     */
    readonly lastUpdatedTime: string;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetRoleV2Link[];
    /**
     * - List of operations for the role.
     */
    readonly operations: string[];
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
}
/**
 * Fetches a role based on the provided external identifier.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const role = nutanix.getRoleV2({
 *     extId: "<role_uuid>",
 * });
 * ```
 */
export function getRoleV2Output(args: GetRoleV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRoleV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getRoleV2:getRoleV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRoleV2.
 */
export interface GetRoleV2OutputArgs {
    /**
     * - (Required) ExtId for the Role.
     */
    extId: pulumi.Input<string>;
}
