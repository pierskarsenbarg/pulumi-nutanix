// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get a single recovery point  corresponding to the extId.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_recovery_point = nutanix.getRecoveryPointV2({
 *     extId: "1cefd0f5-6d38-4c9b-a07c-bdd2db004224",
 * });
 * ```
 */
export function getRecoveryPointV2(args: GetRecoveryPointV2Args, opts?: pulumi.InvokeOptions): Promise<GetRecoveryPointV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getRecoveryPointV2:getRecoveryPointV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecoveryPointV2.
 */
export interface GetRecoveryPointV2Args {
    /**
     * recovery point UUID
     */
    extId: string;
}

/**
 * A collection of values returned by getRecoveryPointV2.
 */
export interface GetRecoveryPointV2Result {
    /**
     * The UTC date and time in ISO-8601 format when the Recovery point is created.
     */
    readonly creationTime: string;
    /**
     * The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
     */
    readonly expirationTime: string;
    /**
     * recovery point UUID
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetRecoveryPointV2Link[];
    /**
     * Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
     */
    readonly locationAgnosticId: string;
    /**
     * List of location references where the VM or volume group recovery point are a part of the specified recovery point.
     */
    readonly locationReferences: outputs.GetRecoveryPointV2LocationReference[];
    /**
     * The name of the Recovery point.
     */
    readonly name: string;
    /**
     * A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
     */
    readonly ownerExtId: string;
    /**
     * Type of the Recovery point.
     */
    readonly recoveryPointType: string;
    /**
     * The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
     * * supported values:
     * * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
     */
    readonly status: string;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    readonly tenantId: string;
    /**
     * List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    readonly vmRecoveryPoints: outputs.GetRecoveryPointV2VmRecoveryPoint[];
    /**
     * List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    readonly volumeGroupRecoveryPoints: outputs.GetRecoveryPointV2VolumeGroupRecoveryPoint[];
}
/**
 * Get a single recovery point  corresponding to the extId.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_recovery_point = nutanix.getRecoveryPointV2({
 *     extId: "1cefd0f5-6d38-4c9b-a07c-bdd2db004224",
 * });
 * ```
 */
export function getRecoveryPointV2Output(args: GetRecoveryPointV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRecoveryPointV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getRecoveryPointV2:getRecoveryPointV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecoveryPointV2.
 */
export interface GetRecoveryPointV2OutputArgs {
    /**
     * recovery point UUID
     */
    extId: pulumi.Input<string>;
}
