// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Describes the SSH config from a Karbon Cluster
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * // Get ssh credentials by cluster UUID
 * const sshbyid = pulumi.output(nutanix.getKarbonClusterSsh({
 *     karbonClusterId: "<YOUR-CLUSTER-ID>",
 * }));
 * // Get ssh credentials by cluster name
 * const sshbyname = pulumi.output(nutanix.getKarbonClusterSsh({
 *     karbonClusterName: "<YOUR-CLUSTER-NAME>",
 * }));
 * ```
 */
export function getKarbonClusterSsh(args?: GetKarbonClusterSshArgs, opts?: pulumi.InvokeOptions): Promise<GetKarbonClusterSshResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getKarbonClusterSsh:getKarbonClusterSsh", {
        "karbonClusterId": args.karbonClusterId,
        "karbonClusterName": args.karbonClusterName,
    }, opts);
}

/**
 * A collection of arguments for invoking getKarbonClusterSsh.
 */
export interface GetKarbonClusterSshArgs {
    karbonClusterId?: string;
    karbonClusterName?: string;
}

/**
 * A collection of values returned by getKarbonClusterSsh.
 */
export interface GetKarbonClusterSshResult {
    readonly certificate: string;
    readonly expiryTime: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly karbonClusterId?: string;
    readonly karbonClusterName?: string;
    readonly privateKey: string;
    readonly username: string;
}

export function getKarbonClusterSshOutput(args?: GetKarbonClusterSshOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKarbonClusterSshResult> {
    return pulumi.output(args).apply(a => getKarbonClusterSsh(a, opts))
}

/**
 * A collection of arguments for invoking getKarbonClusterSsh.
 */
export interface GetKarbonClusterSshOutputArgs {
    karbonClusterId?: pulumi.Input<string>;
    karbonClusterName?: pulumi.Input<string>;
}
