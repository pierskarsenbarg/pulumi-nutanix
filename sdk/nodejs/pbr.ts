// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix resource to create Policy Based Routing inside VPCs.
 *
 * ## Example Usage
 *
 * ### pbr creation with vpc name with any source or destination or protocol with permit action
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const pbr = new nutanix.Pbr("pbr", {
 *     action: "PERMIT",
 *     destination: {
 *         addressType: "ALL",
 *     },
 *     priority: 123,
 *     protocolType: "ALL",
 *     source: {
 *         addressType: "ALL",
 *     },
 *     vpcName: "test123",
 * });
 * ```
 */
export class Pbr extends pulumi.CustomResource {
    /**
     * Get an existing Pbr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PbrState, opts?: pulumi.CustomResourceOptions): Pbr {
        return new Pbr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/pbr:Pbr';

    /**
     * Returns true if the given object is an instance of Pbr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pbr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pbr.__pulumiType;
    }

    /**
     * Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * The version of the API.
     */
    declare public readonly apiVersion: pulumi.Output<string>;
    declare public readonly destination: pulumi.Output<outputs.PbrDestination>;
    /**
     * Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.
     */
    declare public readonly isBidirectional: pulumi.Output<boolean>;
    /**
     * The routing policies kind metadata.
     */
    declare public /*out*/ readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * name of policy
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * priority of policy
     */
    declare public readonly priority: pulumi.Output<number>;
    declare public readonly protocolParameters: pulumi.Output<outputs.PbrProtocolParameters | undefined>;
    /**
     * Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .
     */
    declare public readonly protocolType: pulumi.Output<string>;
    /**
     * IP addresses of network services. This field is valid only when action is REROUTE.
     */
    declare public readonly serviceIpLists: pulumi.Output<string[]>;
    declare public readonly source: pulumi.Output<outputs.PbrSource>;
    /**
     * The reference to a vpc. Should not be used with {vpc_reference_uuid}
     */
    declare public readonly vpcName: pulumi.Output<string>;
    /**
     * The reference to a vpc . Should not be used with {vpc_name} .
     */
    declare public readonly vpcReferenceUuid: pulumi.Output<string>;

    /**
     * Create a Pbr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PbrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PbrArgs | PbrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PbrState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["apiVersion"] = state?.apiVersion;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["isBidirectional"] = state?.isBidirectional;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["protocolParameters"] = state?.protocolParameters;
            resourceInputs["protocolType"] = state?.protocolType;
            resourceInputs["serviceIpLists"] = state?.serviceIpLists;
            resourceInputs["source"] = state?.source;
            resourceInputs["vpcName"] = state?.vpcName;
            resourceInputs["vpcReferenceUuid"] = state?.vpcReferenceUuid;
        } else {
            const args = argsOrState as PbrArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.destination === undefined && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if (args?.protocolType === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["apiVersion"] = args?.apiVersion;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["isBidirectional"] = args?.isBidirectional;
            resourceInputs["name"] = args?.name;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["protocolParameters"] = args?.protocolParameters;
            resourceInputs["protocolType"] = args?.protocolType;
            resourceInputs["serviceIpLists"] = args?.serviceIpLists;
            resourceInputs["source"] = args?.source;
            resourceInputs["vpcName"] = args?.vpcName;
            resourceInputs["vpcReferenceUuid"] = args?.vpcReferenceUuid;
            resourceInputs["metadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pbr.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pbr resources.
 */
export interface PbrState {
    /**
     * Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .
     */
    action?: pulumi.Input<string>;
    /**
     * The version of the API.
     */
    apiVersion?: pulumi.Input<string>;
    destination?: pulumi.Input<inputs.PbrDestination>;
    /**
     * Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.
     */
    isBidirectional?: pulumi.Input<boolean>;
    /**
     * The routing policies kind metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * name of policy
     */
    name?: pulumi.Input<string>;
    /**
     * priority of policy
     */
    priority?: pulumi.Input<number>;
    protocolParameters?: pulumi.Input<inputs.PbrProtocolParameters>;
    /**
     * Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .
     */
    protocolType?: pulumi.Input<string>;
    /**
     * IP addresses of network services. This field is valid only when action is REROUTE.
     */
    serviceIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    source?: pulumi.Input<inputs.PbrSource>;
    /**
     * The reference to a vpc. Should not be used with {vpc_reference_uuid}
     */
    vpcName?: pulumi.Input<string>;
    /**
     * The reference to a vpc . Should not be used with {vpc_name} .
     */
    vpcReferenceUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Pbr resource.
 */
export interface PbrArgs {
    /**
     * Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .
     */
    action: pulumi.Input<string>;
    /**
     * The version of the API.
     */
    apiVersion?: pulumi.Input<string>;
    destination: pulumi.Input<inputs.PbrDestination>;
    /**
     * Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.
     */
    isBidirectional?: pulumi.Input<boolean>;
    /**
     * name of policy
     */
    name?: pulumi.Input<string>;
    /**
     * priority of policy
     */
    priority: pulumi.Input<number>;
    protocolParameters?: pulumi.Input<inputs.PbrProtocolParameters>;
    /**
     * Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .
     */
    protocolType: pulumi.Input<string>;
    /**
     * IP addresses of network services. This field is valid only when action is REROUTE.
     */
    serviceIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    source: pulumi.Input<inputs.PbrSource>;
    /**
     * The reference to a vpc. Should not be used with {vpc_reference_uuid}
     */
    vpcName?: pulumi.Input<string>;
    /**
     * The reference to a vpc . Should not be used with {vpc_name} .
     */
    vpcReferenceUuid?: pulumi.Input<string>;
}
