// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create a address group based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const testAddress = new nutanix.AddressGroup("testAddress", {
 *     description: "test address groups resource",
 *     ipAddressBlockLists: [{
 *         ip: "10.0.0.0",
 *         prefixLength: 24,
 *     }],
 * });
 * ```
 */
export class AddressGroup extends pulumi.CustomResource {
    /**
     * Get an existing AddressGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AddressGroupState, opts?: pulumi.CustomResourceOptions): AddressGroup {
        return new AddressGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/addressGroup:AddressGroup';

    /**
     * Returns true if the given object is an instance of AddressGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AddressGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AddressGroup.__pulumiType;
    }

    /**
     * - (ReadOnly) Address Group string
     */
    declare public /*out*/ readonly addressGroupString: pulumi.Output<string>;
    /**
     * - (Optional) Description of the service group
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * - (Required) list of IP address blocks with their prefix length
     */
    declare public readonly ipAddressBlockLists: pulumi.Output<outputs.AddressGroupIpAddressBlockList[]>;
    /**
     * - (Required) Name of the service group
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a AddressGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddressGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AddressGroupArgs | AddressGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AddressGroupState | undefined;
            resourceInputs["addressGroupString"] = state?.addressGroupString;
            resourceInputs["description"] = state?.description;
            resourceInputs["ipAddressBlockLists"] = state?.ipAddressBlockLists;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as AddressGroupArgs | undefined;
            if (args?.ipAddressBlockLists === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipAddressBlockLists'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["ipAddressBlockLists"] = args?.ipAddressBlockLists;
            resourceInputs["name"] = args?.name;
            resourceInputs["addressGroupString"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AddressGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AddressGroup resources.
 */
export interface AddressGroupState {
    /**
     * - (ReadOnly) Address Group string
     */
    addressGroupString?: pulumi.Input<string>;
    /**
     * - (Optional) Description of the service group
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) list of IP address blocks with their prefix length
     */
    ipAddressBlockLists?: pulumi.Input<pulumi.Input<inputs.AddressGroupIpAddressBlockList>[]>;
    /**
     * - (Required) Name of the service group
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AddressGroup resource.
 */
export interface AddressGroupArgs {
    /**
     * - (Optional) Description of the service group
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) list of IP address blocks with their prefix length
     */
    ipAddressBlockLists: pulumi.Input<pulumi.Input<inputs.AddressGroupIpAddressBlockList>[]>;
    /**
     * - (Required) Name of the service group
     */
    name?: pulumi.Input<string>;
}
