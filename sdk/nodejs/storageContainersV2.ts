// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix resource to create VPC.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const storage_container = new nutanix.StorageContainersV2("storage-container", {
 *     cacheDeduplication: "OFF",
 *     erasureCode: "OFF",
 *     hasHigherEcFaultDomainPreference: false,
 *     isCompressionEnabled: true,
 *     isInlineEcEnabled: false,
 *     isInternal: false,
 *     isSoftwareEncryptionEnabled: false,
 *     logicalAdvertisedCapacityBytes: 1073741824000,
 *     logicalExplicitReservedCapacityBytes: 32,
 *     nfsWhitelistAddresses: [{
 *         ipv4s: [{
 *             prefixLength: 32,
 *             value: "192.168.15.0",
 *         }],
 *     }],
 *     onDiskDedup: "OFF",
 *     replicationFactor: 1,
 * });
 * ```
 */
export class StorageContainersV2 extends pulumi.CustomResource {
    /**
     * Get an existing StorageContainersV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageContainersV2State, opts?: pulumi.CustomResourceOptions): StorageContainersV2 {
        return new StorageContainersV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/storageContainersV2:StorageContainersV2';

    /**
     * Returns true if the given object is an instance of StorageContainersV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageContainersV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageContainersV2.__pulumiType;
    }

    /**
     * -(Optional) Affinity host extId for RF 1 Storage Container.
     */
    public readonly affinityHostExtId!: pulumi.Output<string>;
    /**
     * -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    public readonly cacheDeduplication!: pulumi.Output<string>;
    /**
     * - ext id for the cluster owning the storage container.
     */
    public readonly clusterExtId!: pulumi.Output<string>;
    /**
     * - Corresponding name of the Cluster owning the Storage Container instance.
     */
    public /*out*/ readonly clusterName!: pulumi.Output<string>;
    /**
     * -(Optional) The compression delay in seconds.
     */
    public readonly compressionDelaySecs!: pulumi.Output<number>;
    /**
     * - the storage container ext id
     */
    public readonly containerExtId!: pulumi.Output<string>;
    /**
     * -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    public readonly erasureCode!: pulumi.Output<string>;
    /**
     * -(Optional) Delay in performing ErasureCode for the current Container instance.
     */
    public readonly erasureCodeDelaySecs!: pulumi.Output<number>;
    /**
     * - the storage container uuid
     */
    public readonly extId!: pulumi.Output<string>;
    /**
     * -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
     */
    public readonly hasHigherEcFaultDomainPreference!: pulumi.Output<boolean>;
    public readonly ignoreSmallFiles!: pulumi.Output<boolean>;
    /**
     * -(Optional) Indicates whether the compression is enabled for the Container.
     */
    public readonly isCompressionEnabled!: pulumi.Output<boolean>;
    /**
     * - Indicates whether the Container is encrypted or not.
     */
    public /*out*/ readonly isEncrypted!: pulumi.Output<boolean>;
    /**
     * -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
     */
    public readonly isInlineEcEnabled!: pulumi.Output<boolean>;
    /**
     * - Indicates whether the Container is internal and is managed by Nutanix.
     */
    public readonly isInternal!: pulumi.Output<boolean>;
    /**
     * - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
     */
    public /*out*/ readonly isMarkedForRemoval!: pulumi.Output<boolean>;
    /**
     * -(Optional) Indicates whether the Container instance has software encryption enabled.
     */
    public readonly isSoftwareEncryptionEnabled!: pulumi.Output<boolean>;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.StorageContainersV2Link[]>;
    /**
     * -(Optional) Max capacity of the Container as defined by the user.
     */
    public readonly logicalAdvertisedCapacityBytes!: pulumi.Output<number>;
    /**
     * -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
     */
    public readonly logicalExplicitReservedCapacityBytes!: pulumi.Output<number>;
    /**
     * - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
     */
    public /*out*/ readonly logicalImplicitReservedCapacityBytes!: pulumi.Output<number>;
    /**
     * - Maximum physical capacity of the Storage Container in bytes.
     */
    public /*out*/ readonly maxCapacityBytes!: pulumi.Output<number>;
    /**
     * -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * -(Optional) List of NFS addresses which need to be whitelisted.
     */
    public readonly nfsWhitelistAddresses!: pulumi.Output<outputs.StorageContainersV2NfsWhitelistAddress[] | undefined>;
    /**
     * - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
     */
    public readonly onDiskDedup!: pulumi.Output<string>;
    /**
     * -(Optional) owner ext id
     */
    public readonly ownerExtId!: pulumi.Output<string>;
    /**
     * -(Optional) Replication factor of the Storage Container.
     */
    public readonly replicationFactor!: pulumi.Output<number>;
    /**
     * - extId of the Storage Pool owning the Storage Container instance.
     */
    public /*out*/ readonly storagePoolExtId!: pulumi.Output<string>;
    /**
     * - A globally unique identifier that represents the tenant that owns this entity.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a StorageContainersV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageContainersV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageContainersV2Args | StorageContainersV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageContainersV2State | undefined;
            resourceInputs["affinityHostExtId"] = state ? state.affinityHostExtId : undefined;
            resourceInputs["cacheDeduplication"] = state ? state.cacheDeduplication : undefined;
            resourceInputs["clusterExtId"] = state ? state.clusterExtId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["compressionDelaySecs"] = state ? state.compressionDelaySecs : undefined;
            resourceInputs["containerExtId"] = state ? state.containerExtId : undefined;
            resourceInputs["erasureCode"] = state ? state.erasureCode : undefined;
            resourceInputs["erasureCodeDelaySecs"] = state ? state.erasureCodeDelaySecs : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["hasHigherEcFaultDomainPreference"] = state ? state.hasHigherEcFaultDomainPreference : undefined;
            resourceInputs["ignoreSmallFiles"] = state ? state.ignoreSmallFiles : undefined;
            resourceInputs["isCompressionEnabled"] = state ? state.isCompressionEnabled : undefined;
            resourceInputs["isEncrypted"] = state ? state.isEncrypted : undefined;
            resourceInputs["isInlineEcEnabled"] = state ? state.isInlineEcEnabled : undefined;
            resourceInputs["isInternal"] = state ? state.isInternal : undefined;
            resourceInputs["isMarkedForRemoval"] = state ? state.isMarkedForRemoval : undefined;
            resourceInputs["isSoftwareEncryptionEnabled"] = state ? state.isSoftwareEncryptionEnabled : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["logicalAdvertisedCapacityBytes"] = state ? state.logicalAdvertisedCapacityBytes : undefined;
            resourceInputs["logicalExplicitReservedCapacityBytes"] = state ? state.logicalExplicitReservedCapacityBytes : undefined;
            resourceInputs["logicalImplicitReservedCapacityBytes"] = state ? state.logicalImplicitReservedCapacityBytes : undefined;
            resourceInputs["maxCapacityBytes"] = state ? state.maxCapacityBytes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nfsWhitelistAddresses"] = state ? state.nfsWhitelistAddresses : undefined;
            resourceInputs["onDiskDedup"] = state ? state.onDiskDedup : undefined;
            resourceInputs["ownerExtId"] = state ? state.ownerExtId : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["storagePoolExtId"] = state ? state.storagePoolExtId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as StorageContainersV2Args | undefined;
            if ((!args || args.clusterExtId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterExtId'");
            }
            resourceInputs["affinityHostExtId"] = args ? args.affinityHostExtId : undefined;
            resourceInputs["cacheDeduplication"] = args ? args.cacheDeduplication : undefined;
            resourceInputs["clusterExtId"] = args ? args.clusterExtId : undefined;
            resourceInputs["compressionDelaySecs"] = args ? args.compressionDelaySecs : undefined;
            resourceInputs["containerExtId"] = args ? args.containerExtId : undefined;
            resourceInputs["erasureCode"] = args ? args.erasureCode : undefined;
            resourceInputs["erasureCodeDelaySecs"] = args ? args.erasureCodeDelaySecs : undefined;
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["hasHigherEcFaultDomainPreference"] = args ? args.hasHigherEcFaultDomainPreference : undefined;
            resourceInputs["ignoreSmallFiles"] = args ? args.ignoreSmallFiles : undefined;
            resourceInputs["isCompressionEnabled"] = args ? args.isCompressionEnabled : undefined;
            resourceInputs["isInlineEcEnabled"] = args ? args.isInlineEcEnabled : undefined;
            resourceInputs["isInternal"] = args ? args.isInternal : undefined;
            resourceInputs["isSoftwareEncryptionEnabled"] = args ? args.isSoftwareEncryptionEnabled : undefined;
            resourceInputs["logicalAdvertisedCapacityBytes"] = args ? args.logicalAdvertisedCapacityBytes : undefined;
            resourceInputs["logicalExplicitReservedCapacityBytes"] = args ? args.logicalExplicitReservedCapacityBytes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nfsWhitelistAddresses"] = args ? args.nfsWhitelistAddresses : undefined;
            resourceInputs["onDiskDedup"] = args ? args.onDiskDedup : undefined;
            resourceInputs["ownerExtId"] = args ? args.ownerExtId : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["isEncrypted"] = undefined /*out*/;
            resourceInputs["isMarkedForRemoval"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["logicalImplicitReservedCapacityBytes"] = undefined /*out*/;
            resourceInputs["maxCapacityBytes"] = undefined /*out*/;
            resourceInputs["storagePoolExtId"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageContainersV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageContainersV2 resources.
 */
export interface StorageContainersV2State {
    /**
     * -(Optional) Affinity host extId for RF 1 Storage Container.
     */
    affinityHostExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    cacheDeduplication?: pulumi.Input<string>;
    /**
     * - ext id for the cluster owning the storage container.
     */
    clusterExtId?: pulumi.Input<string>;
    /**
     * - Corresponding name of the Cluster owning the Storage Container instance.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * -(Optional) The compression delay in seconds.
     */
    compressionDelaySecs?: pulumi.Input<number>;
    /**
     * - the storage container ext id
     */
    containerExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    erasureCode?: pulumi.Input<string>;
    /**
     * -(Optional) Delay in performing ErasureCode for the current Container instance.
     */
    erasureCodeDelaySecs?: pulumi.Input<number>;
    /**
     * - the storage container uuid
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
     */
    hasHigherEcFaultDomainPreference?: pulumi.Input<boolean>;
    ignoreSmallFiles?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates whether the compression is enabled for the Container.
     */
    isCompressionEnabled?: pulumi.Input<boolean>;
    /**
     * - Indicates whether the Container is encrypted or not.
     */
    isEncrypted?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
     */
    isInlineEcEnabled?: pulumi.Input<boolean>;
    /**
     * - Indicates whether the Container is internal and is managed by Nutanix.
     */
    isInternal?: pulumi.Input<boolean>;
    /**
     * - Indicates if the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
     */
    isMarkedForRemoval?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates whether the Container instance has software encryption enabled.
     */
    isSoftwareEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.StorageContainersV2Link>[]>;
    /**
     * -(Optional) Max capacity of the Container as defined by the user.
     */
    logicalAdvertisedCapacityBytes?: pulumi.Input<number>;
    /**
     * -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
     */
    logicalExplicitReservedCapacityBytes?: pulumi.Input<number>;
    /**
     * - This is the summation of reservations provisioned on all vdisks in the container. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity
     */
    logicalImplicitReservedCapacityBytes?: pulumi.Input<number>;
    /**
     * - Maximum physical capacity of the Storage Container in bytes.
     */
    maxCapacityBytes?: pulumi.Input<number>;
    /**
     * -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * -(Optional) List of NFS addresses which need to be whitelisted.
     */
    nfsWhitelistAddresses?: pulumi.Input<pulumi.Input<inputs.StorageContainersV2NfsWhitelistAddress>[]>;
    /**
     * - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
     */
    onDiskDedup?: pulumi.Input<string>;
    /**
     * -(Optional) owner ext id
     */
    ownerExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Replication factor of the Storage Container.
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * - extId of the Storage Pool owning the Storage Container instance.
     */
    storagePoolExtId?: pulumi.Input<string>;
    /**
     * - A globally unique identifier that represents the tenant that owns this entity.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageContainersV2 resource.
 */
export interface StorageContainersV2Args {
    /**
     * -(Optional) Affinity host extId for RF 1 Storage Container.
     */
    affinityHostExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates the current status of Cache Deduplication for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    cacheDeduplication?: pulumi.Input<string>;
    /**
     * - ext id for the cluster owning the storage container.
     */
    clusterExtId: pulumi.Input<string>;
    /**
     * -(Optional) The compression delay in seconds.
     */
    compressionDelaySecs?: pulumi.Input<number>;
    /**
     * - the storage container ext id
     */
    containerExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates the current status value for Erasure Coding for the Container. available values:  `NONE`,    `OFF`,    `ON`
     */
    erasureCode?: pulumi.Input<string>;
    /**
     * -(Optional) Delay in performing ErasureCode for the current Container instance.
     */
    erasureCodeDelaySecs?: pulumi.Input<number>;
    /**
     * - the storage container uuid
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Optional) Indicates whether to prefer a higher Erasure Code fault domain.
     */
    hasHigherEcFaultDomainPreference?: pulumi.Input<boolean>;
    ignoreSmallFiles?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates whether the compression is enabled for the Container.
     */
    isCompressionEnabled?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates whether data written to this container should be inline erasure coded or not. This field is only considered when ErasureCoding is enabled.
     */
    isInlineEcEnabled?: pulumi.Input<boolean>;
    /**
     * - Indicates whether the Container is internal and is managed by Nutanix.
     */
    isInternal?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates whether the Container instance has software encryption enabled.
     */
    isSoftwareEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * -(Optional) Max capacity of the Container as defined by the user.
     */
    logicalAdvertisedCapacityBytes?: pulumi.Input<number>;
    /**
     * -(Optional) Total reserved size (in bytes) of the container (set by Admin). This also accounts for the container's replication factor. The actual reserved capacity of the container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
     */
    logicalExplicitReservedCapacityBytes?: pulumi.Input<number>;
    /**
     * -(Required) Name of the storage container.  Note that the name of Storage Container should be unique per cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * -(Optional) List of NFS addresses which need to be whitelisted.
     */
    nfsWhitelistAddresses?: pulumi.Input<pulumi.Input<inputs.StorageContainersV2NfsWhitelistAddress>[]>;
    /**
     * - Indicates the current status of Disk Deduplication for the Container. available values:  `NONE`,    `OFF`,    `POST_PROCESS`
     */
    onDiskDedup?: pulumi.Input<string>;
    /**
     * -(Optional) owner ext id
     */
    ownerExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Replication factor of the Storage Container.
     */
    replicationFactor?: pulumi.Input<number>;
}
