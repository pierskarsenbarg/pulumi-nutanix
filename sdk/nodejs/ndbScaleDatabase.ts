// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NdbScaleDatabase extends pulumi.CustomResource {
    /**
     * Get an existing NdbScaleDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbScaleDatabaseState, opts?: pulumi.CustomResourceOptions): NdbScaleDatabase {
        return new NdbScaleDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbScaleDatabase:NdbScaleDatabase';

    /**
     * Returns true if the given object is an instance of NdbScaleDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbScaleDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbScaleDatabase.__pulumiType;
    }

    public readonly applicationType!: pulumi.Output<string>;
    public /*out*/ readonly clone!: pulumi.Output<boolean>;
    public readonly dataStorageSize!: pulumi.Output<number>;
    public /*out*/ readonly databaseClusterType!: pulumi.Output<string>;
    public /*out*/ readonly databaseInstanceId!: pulumi.Output<string>;
    public /*out*/ readonly databaseName!: pulumi.Output<string>;
    public /*out*/ readonly databaseNodes!: pulumi.Output<outputs.NdbScaleDatabaseDatabaseNode[]>;
    public readonly databaseUuid!: pulumi.Output<string>;
    public /*out*/ readonly databasetype!: pulumi.Output<string>;
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    public /*out*/ readonly dbserverLogicalCluster!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly dbserverLogicalClusterId!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly infos!: pulumi.Output<outputs.NdbScaleDatabaseInfo[]>;
    public /*out*/ readonly lcmConfigs!: pulumi.Output<outputs.NdbScaleDatabaseLcmConfig[]>;
    public /*out*/ readonly linkedDatabases!: pulumi.Output<outputs.NdbScaleDatabaseLinkedDatabase[]>;
    public /*out*/ readonly metric!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly parentDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly parentSourceDatabaseId!: pulumi.Output<string>;
    public readonly postScriptCmd!: pulumi.Output<string | undefined>;
    public readonly preScriptCmd!: pulumi.Output<string | undefined>;
    /**
     * List of all the properties
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbScaleDatabaseProperty[]>;
    public readonly scaleCount!: pulumi.Output<number | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.NdbScaleDatabaseTag[]>;
    public /*out*/ readonly timeMachineId!: pulumi.Output<string>;
    public /*out*/ readonly timeMachines!: pulumi.Output<outputs.NdbScaleDatabaseTimeMachine[]>;
    public /*out*/ readonly timeZone!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a NdbScaleDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbScaleDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbScaleDatabaseArgs | NdbScaleDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbScaleDatabaseState | undefined;
            resourceInputs["applicationType"] = state ? state.applicationType : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["dataStorageSize"] = state ? state.dataStorageSize : undefined;
            resourceInputs["databaseClusterType"] = state ? state.databaseClusterType : undefined;
            resourceInputs["databaseInstanceId"] = state ? state.databaseInstanceId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseNodes"] = state ? state.databaseNodes : undefined;
            resourceInputs["databaseUuid"] = state ? state.databaseUuid : undefined;
            resourceInputs["databasetype"] = state ? state.databasetype : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["dbserverLogicalCluster"] = state ? state.dbserverLogicalCluster : undefined;
            resourceInputs["dbserverLogicalClusterId"] = state ? state.dbserverLogicalClusterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["infos"] = state ? state.infos : undefined;
            resourceInputs["lcmConfigs"] = state ? state.lcmConfigs : undefined;
            resourceInputs["linkedDatabases"] = state ? state.linkedDatabases : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentDatabaseId"] = state ? state.parentDatabaseId : undefined;
            resourceInputs["parentSourceDatabaseId"] = state ? state.parentSourceDatabaseId : undefined;
            resourceInputs["postScriptCmd"] = state ? state.postScriptCmd : undefined;
            resourceInputs["preScriptCmd"] = state ? state.preScriptCmd : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["scaleCount"] = state ? state.scaleCount : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeMachineId"] = state ? state.timeMachineId : undefined;
            resourceInputs["timeMachines"] = state ? state.timeMachines : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NdbScaleDatabaseArgs | undefined;
            if ((!args || args.applicationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationType'");
            }
            if ((!args || args.dataStorageSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataStorageSize'");
            }
            if ((!args || args.databaseUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseUuid'");
            }
            resourceInputs["applicationType"] = args ? args.applicationType : undefined;
            resourceInputs["dataStorageSize"] = args ? args.dataStorageSize : undefined;
            resourceInputs["databaseUuid"] = args ? args.databaseUuid : undefined;
            resourceInputs["postScriptCmd"] = args ? args.postScriptCmd : undefined;
            resourceInputs["preScriptCmd"] = args ? args.preScriptCmd : undefined;
            resourceInputs["scaleCount"] = args ? args.scaleCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["databaseClusterType"] = undefined /*out*/;
            resourceInputs["databaseInstanceId"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseNodes"] = undefined /*out*/;
            resourceInputs["databasetype"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverLogicalCluster"] = undefined /*out*/;
            resourceInputs["dbserverLogicalClusterId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["lcmConfigs"] = undefined /*out*/;
            resourceInputs["linkedDatabases"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["parentSourceDatabaseId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeMachineId"] = undefined /*out*/;
            resourceInputs["timeMachines"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbScaleDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbScaleDatabase resources.
 */
export interface NdbScaleDatabaseState {
    applicationType?: pulumi.Input<string>;
    clone?: pulumi.Input<boolean>;
    dataStorageSize?: pulumi.Input<number>;
    databaseClusterType?: pulumi.Input<string>;
    databaseInstanceId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    databaseNodes?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNode>[]>;
    databaseUuid?: pulumi.Input<string>;
    databasetype?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    dbserverLogicalCluster?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverLogicalClusterId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    infos?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfo>[]>;
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfig>[]>;
    linkedDatabases?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLinkedDatabase>[]>;
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    parentDatabaseId?: pulumi.Input<string>;
    parentSourceDatabaseId?: pulumi.Input<string>;
    postScriptCmd?: pulumi.Input<string>;
    preScriptCmd?: pulumi.Input<string>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseProperty>[]>;
    scaleCount?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTag>[]>;
    timeMachineId?: pulumi.Input<string>;
    timeMachines?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachine>[]>;
    timeZone?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbScaleDatabase resource.
 */
export interface NdbScaleDatabaseArgs {
    applicationType: pulumi.Input<string>;
    dataStorageSize: pulumi.Input<number>;
    databaseUuid: pulumi.Input<string>;
    postScriptCmd?: pulumi.Input<string>;
    preScriptCmd?: pulumi.Input<string>;
    scaleCount?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTag>[]>;
}
