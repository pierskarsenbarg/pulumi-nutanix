// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieve the image details for the provided external identifier.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_image = nutanix.getImageV2({
 *     extId: "0005a7b1-0b3b-4b3b-8b3b-0b3b4b3b4b3b",
 * });
 * ```
 */
export function getImageV2(args: GetImageV2Args, opts?: pulumi.InvokeOptions): Promise<GetImageV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getImageV2:getImageV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getImageV2.
 */
export interface GetImageV2Args {
    /**
     * The external identifier of an image.
     */
    extId: string;
}

/**
 * A collection of values returned by getImageV2.
 */
export interface GetImageV2Result {
    /**
     * List of category external identifiers for an image.
     */
    readonly categoryExtIds: string[];
    /**
     * The checksum of an image.
     */
    readonly checksums: outputs.GetImageV2Checksum[];
    /**
     * List of cluster external identifiers where the image is located.
     */
    readonly clusterLocationExtIds: string[];
    /**
     * Create time of an image.
     */
    readonly createTime: string;
    /**
     * The user defined description of an image.
     */
    readonly description: string;
    /**
     * The external identifier of VM Disk.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Last update time of an image.
     */
    readonly lastUpdateTime: string;
    /**
     * The user defined name of an image.
     */
    readonly name: string;
    /**
     * External identifier of the owner of the image
     */
    readonly ownerExtId: string;
    /**
     * Status of an image placement policy.
     */
    readonly placementPolicyStatuses: outputs.GetImageV2PlacementPolicyStatus[];
    /**
     * The size in bytes of an image file.
     */
    readonly sizeBytes: number;
    /**
     * The source of an image. It can be a VM disk or a URL.
     */
    readonly sources: outputs.GetImageV2Source[];
    /**
     * The type of an image.
     */
    readonly type: string;
}
/**
 * Retrieve the image details for the provided external identifier.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_image = nutanix.getImageV2({
 *     extId: "0005a7b1-0b3b-4b3b-8b3b-0b3b4b3b4b3b",
 * });
 * ```
 */
export function getImageV2Output(args: GetImageV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetImageV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getImageV2:getImageV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getImageV2.
 */
export interface GetImageV2OutputArgs {
    /**
     * The external identifier of an image.
     */
    extId: pulumi.Input<string>;
}
