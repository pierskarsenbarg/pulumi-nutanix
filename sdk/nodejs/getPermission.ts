// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Describe a Nutanix Permission and its values (if it has them).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const byuuid = pulumi.output(nutanix.getPermission({
 *     permissionId: "26b81a55-2bca-48c6-9fab-4f82c6bb4284",
 * }));
 * const byname = pulumi.output(nutanix.getPermission({
 *     permissionName: "Access_Console_Virtual_Machine",
 * }));
 * ```
 */
export function getPermission(args?: GetPermissionArgs, opts?: pulumi.InvokeOptions): Promise<GetPermissionResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getPermission:getPermission", {
        "categories": args.categories,
        "permissionId": args.permissionId,
        "permissionName": args.permissionName,
    }, opts);
}

/**
 * A collection of arguments for invoking getPermission.
 */
export interface GetPermissionArgs {
    categories?: inputs.GetPermissionCategory[];
    permissionId?: string;
    permissionName?: string;
}

/**
 * A collection of values returned by getPermission.
 */
export interface GetPermissionResult {
    readonly apiVersion: string;
    readonly categories: outputs.GetPermissionCategory[];
    readonly description: string;
    readonly fields: outputs.GetPermissionField[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    readonly kind: string;
    readonly metadata: {[key: string]: string};
    /**
     * the name.
     */
    readonly name: string;
    readonly operation: string;
    readonly ownerReference: {[key: string]: string};
    readonly permissionId?: string;
    readonly permissionName?: string;
    readonly projectReference: {[key: string]: string};
    readonly state: string;
}

export function getPermissionOutput(args?: GetPermissionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPermissionResult> {
    return pulumi.output(args).apply(a => getPermission(a, opts))
}

/**
 * A collection of arguments for invoking getPermission.
 */
export interface GetPermissionOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetPermissionCategoryArgs>[]>;
    permissionId?: pulumi.Input<string>;
    permissionName?: pulumi.Input<string>;
}
