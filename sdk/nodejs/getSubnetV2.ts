// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get a subnet with the specified UUID.
 */
export function getSubnetV2(args: GetSubnetV2Args, opts?: pulumi.InvokeOptions): Promise<GetSubnetV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getSubnetV2:getSubnetV2", {
        "extId": args.extId,
        "reservedIpAddresses": args.reservedIpAddresses,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnetV2.
 */
export interface GetSubnetV2Args {
    /**
     * - (Required) The UUID of the subnet.
     */
    extId: string;
    /**
     * List of IPs that are excluded while allocating IP addresses to VM ports.
     */
    reservedIpAddresses?: inputs.GetSubnetV2ReservedIpAddress[];
}

/**
 * A collection of values returned by getSubnetV2.
 */
export interface GetSubnetV2Result {
    /**
     * Name of the bridge on the host for the subnet.
     */
    readonly bridgeName: string;
    /**
     * Cluster Name
     */
    readonly clusterName: string;
    /**
     * UUID of the cluster this subnet belongs to.
     */
    readonly clusterReference: string;
    /**
     * Description of the subnet.
     */
    readonly description: string;
    /**
     * List of DHCP options to be configured.
     */
    readonly dhcpOptions: outputs.GetSubnetV2DhcpOption[];
    /**
     * List of IPs, which are a subset from the reserved IP address list, that must be advertised to the SDN gateway.
     */
    readonly dynamicIpAddresses: outputs.GetSubnetV2DynamicIpAddress[];
    readonly extId: string;
    /**
     * Hypervisor Type
     */
    readonly hypervisorType: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * IP configuration for the subnet.
     */
    readonly ipConfigs: outputs.GetSubnetV2IpConfig[];
    /**
     * IP Prefix in CIDR format.
     */
    readonly ipPrefix: string;
    /**
     * IP usage statistics.
     */
    readonly ipUsages: outputs.GetSubnetV2IpUsage[];
    /**
     * Indicates whether the subnet is used for advanced networking.
     */
    readonly isAdvancedNetworking: boolean;
    /**
     * Indicates whether the subnet is used for external connectivity.
     */
    readonly isExternal: boolean;
    /**
     * Indicates whether NAT must be enabled for VPCs attached to the subnet. This is supported only for external subnets. NAT is enabled by default on external subnets.
     */
    readonly isNatEnabled: boolean;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetSubnetV2Link[];
    /**
     * Migration state of the subnet. This field is read-only.
     */
    readonly migrationState: string;
    /**
     * Name of the subnet.
     */
    readonly name: string;
    /**
     * UUID of the Network function chain entity that this subnet belongs to (type VLAN only).
     */
    readonly networkFunctionChainReference: string;
    /**
     * or VLAN subnet, this field represents VLAN Id, valid range is from 0 to 4095; For overlay subnet, this field represents 24-bit VNI, this field is read-only.
     */
    readonly networkId: number;
    /**
     * List of IPs that are excluded while allocating IP addresses to VM ports.
     */
    readonly reservedIpAddresses: outputs.GetSubnetV2ReservedIpAddress[];
    /**
     * Type of subnet.
     */
    readonly subnetType: string;
    /**
     * UUID of the virtual switch this subnet belongs to (type VLAN only).
     */
    readonly virtualSwitchReference: string;
    /**
     * Schema to configure a virtual switch
     */
    readonly virtualSwitches: outputs.GetSubnetV2VirtualSwitch[];
    /**
     * UUID of Virtual Private Cloud this subnet belongs to (type Overlay only).
     */
    readonly vpcReference: string;
    /**
     * Networking common base object
     */
    readonly vpcs: outputs.GetSubnetV2Vpc[];
}
/**
 * Get a subnet with the specified UUID.
 */
export function getSubnetV2Output(args: GetSubnetV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSubnetV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getSubnetV2:getSubnetV2", {
        "extId": args.extId,
        "reservedIpAddresses": args.reservedIpAddresses,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnetV2.
 */
export interface GetSubnetV2OutputArgs {
    /**
     * - (Required) The UUID of the subnet.
     */
    extId: pulumi.Input<string>;
    /**
     * List of IPs that are excluded while allocating IP addresses to VM ports.
     */
    reservedIpAddresses?: pulumi.Input<pulumi.Input<inputs.GetSubnetV2ReservedIpAddressArgs>[]>;
}
