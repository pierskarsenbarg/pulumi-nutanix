// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create a role based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const test = new nutanix.Role("test", {
 *     description: "DESCRIPTION",
 *     permissionReferenceLists: [
 *         {
 *             kind: "permission",
 *             uuid: "ID OF PERMISSION",
 *         },
 *         {
 *             kind: "permission",
 *             uuid: "ID OF PERMISSION",
 *         },
 *         {
 *             kind: "permission",
 *             uuid: "ID OF PERMISSION",
 *         },
 *     ],
 * });
 * ```
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * The version of the API.
     */
    declare public /*out*/ readonly apiVersion: pulumi.Output<string>;
    /**
     * - (Optional) Categories for the role.
     */
    declare public readonly categories: pulumi.Output<outputs.RoleCategory[]>;
    /**
     * - (Optional) The description of the role.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * - The role kind metadata.
     */
    declare public /*out*/ readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) Name of the role.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * - (Optional) The reference to a user.
     */
    declare public readonly ownerReference: pulumi.Output<outputs.RoleOwnerReference>;
    /**
     * - (Required) List of permission references.
     */
    declare public readonly permissionReferenceLists: pulumi.Output<outputs.RolePermissionReferenceList[]>;
    /**
     * - (Optional) The reference to a project.
     */
    declare public readonly projectReference: pulumi.Output<outputs.RoleProjectReference>;
    /**
     * - The state of the role.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["apiVersion"] = state?.apiVersion;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["description"] = state?.description;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["ownerReference"] = state?.ownerReference;
            resourceInputs["permissionReferenceLists"] = state?.permissionReferenceLists;
            resourceInputs["projectReference"] = state?.projectReference;
            resourceInputs["state"] = state?.state;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if (args?.permissionReferenceLists === undefined && !opts.urn) {
                throw new Error("Missing required property 'permissionReferenceLists'");
            }
            resourceInputs["categories"] = args?.categories;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["ownerReference"] = args?.ownerReference;
            resourceInputs["permissionReferenceLists"] = args?.permissionReferenceLists;
            resourceInputs["projectReference"] = args?.projectReference;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * The version of the API.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * - (Optional) Categories for the role.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.RoleCategory>[]>;
    /**
     * - (Optional) The description of the role.
     */
    description?: pulumi.Input<string>;
    /**
     * - The role kind metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<inputs.RoleOwnerReference>;
    /**
     * - (Required) List of permission references.
     */
    permissionReferenceLists?: pulumi.Input<pulumi.Input<inputs.RolePermissionReferenceList>[]>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<inputs.RoleProjectReference>;
    /**
     * - The state of the role.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * - (Optional) Categories for the role.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.RoleCategory>[]>;
    /**
     * - (Optional) The description of the role.
     */
    description?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<inputs.RoleOwnerReference>;
    /**
     * - (Required) List of permission references.
     */
    permissionReferenceLists: pulumi.Input<pulumi.Input<inputs.RolePermissionReferenceList>[]>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<inputs.RoleProjectReference>;
}
