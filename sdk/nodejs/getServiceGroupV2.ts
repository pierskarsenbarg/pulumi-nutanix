// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get an service Group by ExtID
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const serviceGroup = nutanix.getServiceGroupV2({
 *     extId: "07167778-266d-4052-9992-f30cbfd52e83",
 * });
 * ```
 */
export function getServiceGroupV2(args: GetServiceGroupV2Args, opts?: pulumi.InvokeOptions): Promise<GetServiceGroupV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getServiceGroupV2:getServiceGroupV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceGroupV2.
 */
export interface GetServiceGroupV2Args {
    /**
     * service group UUID.
     */
    extId: string;
}

/**
 * A collection of values returned by getServiceGroupV2.
 */
export interface GetServiceGroupV2Result {
    /**
     * created by.
     */
    readonly createdBy: string;
    /**
     * A user defined annotation for a Service Group.
     */
    readonly description: string;
    readonly extId: string;
    /**
     * Icmp Type Code List.
     */
    readonly icmpServices: outputs.GetServiceGroupV2IcmpService[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Service Group is system defined or not.
     */
    readonly isSystemDefined: boolean;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetServiceGroupV2Link[];
    /**
     * A short identifier for a Service Group.
     */
    readonly name: string;
    /**
     * Reference to policy associated with Service Group.
     */
    readonly policyReferences: string[];
    /**
     * List of TCP ports in the service.
     */
    readonly tcpServices: outputs.GetServiceGroupV2TcpService[];
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    readonly tenantId: string;
    /**
     * List of UDP ports in the service.
     */
    readonly udpServices: outputs.GetServiceGroupV2UdpService[];
}
/**
 * Get an service Group by ExtID
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const serviceGroup = nutanix.getServiceGroupV2({
 *     extId: "07167778-266d-4052-9992-f30cbfd52e83",
 * });
 * ```
 */
export function getServiceGroupV2Output(args: GetServiceGroupV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServiceGroupV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getServiceGroupV2:getServiceGroupV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceGroupV2.
 */
export interface GetServiceGroupV2OutputArgs {
    /**
     * service group UUID.
     */
    extId: pulumi.Input<string>;
}
