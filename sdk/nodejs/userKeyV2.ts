// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix resource to Create key of a requested type for a user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // Create key under service account, never expires
 * const createKey = new nutanix.UserKeyV2("createKey", {
 *     assignedTo: "developer_user_1",
 *     expiryTime: "2125-01-01T00:00:00Z",
 *     keyType: "API_KEY",
 *     userExtId: "<SERVICE_ACCOUNT_UUID>",
 * });
 * ```
 * ## Argument Reference
 *
 * The following arguments are supported:
 *
 * * `userExtId`: - ( Required ) External Identifier of the User.
 * * `name`: - ( Required ) Identifier for the key in the form of a name.
 * * `description`: - ( Optional ) Brief description of the key.
 * * `keyType`: - ( Required ) The type of key. Enum Values:
 *       * "API_KEY":	A key type that is used to identify a service.
 *       * "OBJECT_KEY":	A combination of access key and secret key to sign an API request.
 * * `creationType`: - ( Optional ) The creation mechanism of this entity. Enum Values:
 *       * "PREDEFINED":	Predefined creator workflow type is for entity created by the system.
 *       * "SERVICEDEFINED":	Servicedefined creator workflow type is for entity created by the service.
 *       * "USERDEFINED":	Userdefined creator workflow type is for entity created by the users.
 * * `expiryTime`: - ( Optional ) The time when the key will expire.
 * * `status`: - ( Optional ) The status of the key. Enum Values:
 *       * "REVOKED":	Key is revoked.
 *       * "VALID":	Key is valid.
 *       * "EXPIRED":	Key is expired.
 * * `assignedTo`: - ( Optional ) External client to whom the given key is allocated.
 */
export class UserKeyV2 extends pulumi.CustomResource {
    /**
     * Get an existing UserKeyV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserKeyV2State, opts?: pulumi.CustomResourceOptions): UserKeyV2 {
        return new UserKeyV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/userKeyV2:UserKeyV2';

    /**
     * Returns true if the given object is an instance of UserKeyV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserKeyV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserKeyV2.__pulumiType;
    }

    /**
     * - External client to whom the given key is allocated.
     */
    declare public readonly assignedTo: pulumi.Output<string>;
    /**
     * - User or service who created the key.
     */
    declare public readonly createdBy: pulumi.Output<string>;
    /**
     * - The creation time of the key.
     */
    declare public readonly createdTime: pulumi.Output<string>;
    /**
     * - The creation mechanism of this entity.
     */
    declare public readonly creationType: pulumi.Output<string>;
    /**
     * - Brief description of the key.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * - The time when the key will expire.
     */
    declare public readonly expiryTime: pulumi.Output<string>;
    /**
     * - The External Identifier of the User Group.
     */
    declare public /*out*/ readonly extId: pulumi.Output<string>;
    /**
     * - Details specific to type of the key.
     */
    declare public /*out*/ readonly keyDetails: pulumi.Output<outputs.UserKeyV2KeyDetail[]>;
    /**
     * - The type of key.
     */
    declare public readonly keyType: pulumi.Output<string>;
    /**
     * - User who updated the key.
     */
    declare public readonly lastUpdatedBy: pulumi.Output<string>;
    /**
     * - The time when the key was updated.
     */
    declare public readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * - The time when the key was last used.
     */
    declare public readonly lastUsedTime: pulumi.Output<string>;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    declare public /*out*/ readonly links: pulumi.Output<outputs.UserKeyV2Link[]>;
    /**
     * - Identifier for the key in the form of a name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * - The status of the key.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    declare public /*out*/ readonly tenantId: pulumi.Output<string>;
    declare public readonly userExtId: pulumi.Output<string>;

    /**
     * Create a UserKeyV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserKeyV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserKeyV2Args | UserKeyV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserKeyV2State | undefined;
            resourceInputs["assignedTo"] = state?.assignedTo;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["creationType"] = state?.creationType;
            resourceInputs["description"] = state?.description;
            resourceInputs["expiryTime"] = state?.expiryTime;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["keyDetails"] = state?.keyDetails;
            resourceInputs["keyType"] = state?.keyType;
            resourceInputs["lastUpdatedBy"] = state?.lastUpdatedBy;
            resourceInputs["lastUpdatedTime"] = state?.lastUpdatedTime;
            resourceInputs["lastUsedTime"] = state?.lastUsedTime;
            resourceInputs["links"] = state?.links;
            resourceInputs["name"] = state?.name;
            resourceInputs["status"] = state?.status;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["userExtId"] = state?.userExtId;
        } else {
            const args = argsOrState as UserKeyV2Args | undefined;
            if (args?.keyType === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyType'");
            }
            if (args?.userExtId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userExtId'");
            }
            resourceInputs["assignedTo"] = args?.assignedTo;
            resourceInputs["createdBy"] = args?.createdBy;
            resourceInputs["createdTime"] = args?.createdTime;
            resourceInputs["creationType"] = args?.creationType;
            resourceInputs["description"] = args?.description;
            resourceInputs["expiryTime"] = args?.expiryTime;
            resourceInputs["keyType"] = args?.keyType;
            resourceInputs["lastUpdatedBy"] = args?.lastUpdatedBy;
            resourceInputs["lastUpdatedTime"] = args?.lastUpdatedTime;
            resourceInputs["lastUsedTime"] = args?.lastUsedTime;
            resourceInputs["name"] = args?.name;
            resourceInputs["status"] = args?.status;
            resourceInputs["userExtId"] = args?.userExtId;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["keyDetails"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserKeyV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserKeyV2 resources.
 */
export interface UserKeyV2State {
    /**
     * - External client to whom the given key is allocated.
     */
    assignedTo?: pulumi.Input<string>;
    /**
     * - User or service who created the key.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * - The creation time of the key.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * - The creation mechanism of this entity.
     */
    creationType?: pulumi.Input<string>;
    /**
     * - Brief description of the key.
     */
    description?: pulumi.Input<string>;
    /**
     * - The time when the key will expire.
     */
    expiryTime?: pulumi.Input<string>;
    /**
     * - The External Identifier of the User Group.
     */
    extId?: pulumi.Input<string>;
    /**
     * - Details specific to type of the key.
     */
    keyDetails?: pulumi.Input<pulumi.Input<inputs.UserKeyV2KeyDetail>[]>;
    /**
     * - The type of key.
     */
    keyType?: pulumi.Input<string>;
    /**
     * - User who updated the key.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * - The time when the key was updated.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * - The time when the key was last used.
     */
    lastUsedTime?: pulumi.Input<string>;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.UserKeyV2Link>[]>;
    /**
     * - Identifier for the key in the form of a name.
     */
    name?: pulumi.Input<string>;
    /**
     * - The status of the key.
     */
    status?: pulumi.Input<string>;
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    tenantId?: pulumi.Input<string>;
    userExtId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserKeyV2 resource.
 */
export interface UserKeyV2Args {
    /**
     * - External client to whom the given key is allocated.
     */
    assignedTo?: pulumi.Input<string>;
    /**
     * - User or service who created the key.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * - The creation time of the key.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * - The creation mechanism of this entity.
     */
    creationType?: pulumi.Input<string>;
    /**
     * - Brief description of the key.
     */
    description?: pulumi.Input<string>;
    /**
     * - The time when the key will expire.
     */
    expiryTime?: pulumi.Input<string>;
    /**
     * - The type of key.
     */
    keyType: pulumi.Input<string>;
    /**
     * - User who updated the key.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * - The time when the key was updated.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * - The time when the key was last used.
     */
    lastUsedTime?: pulumi.Input<string>;
    /**
     * - Identifier for the key in the form of a name.
     */
    name?: pulumi.Input<string>;
    /**
     * - The status of the key.
     */
    status?: pulumi.Input<string>;
    userExtId: pulumi.Input<string>;
}
