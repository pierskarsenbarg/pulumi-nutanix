// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Nutanix Karbon Cluster resource to Create a k8s cluster.
 *
 * **Note:** Minimum tested version is Karbon 2.2
 *
 * **Note:** Kubernetes and Node OS upgrades are not supported using this provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const exampleCluster = new nutanix.KarbonCluster("exampleCluster", {
 *     cniConfig: {
 *         nodeCidrMaskSize: 24,
 *         podIpv4Cidr: "172.20.0.0/16",
 *         serviceIpv4Cidr: "172.19.0.0/16",
 *     },
 *     etcdNodePool: {
 *         ahvConfig: {
 *             networkUuid: "my_subnet_id",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *         },
 *         nodeOsVersion: "ntnx-1.0",
 *         numInstances: 1,
 *     },
 *     masterNodePool: {
 *         ahvConfig: {
 *             networkUuid: "my_subnet_id",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *         },
 *         nodeOsVersion: "ntnx-1.0",
 *         numInstances: 1,
 *     },
 *     storageClassConfig: {
 *         reclaimPolicy: "Delete",
 *         volumesConfig: {
 *             fileSystem: "ext4",
 *             flashMode: false,
 *             password: "my_pe_pw",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *             storageContainer: "my_storage_container_name",
 *             username: "my_pe_username",
 *         },
 *     },
 *     version: "1.18.15-1",
 *     workerNodePool: {
 *         ahvConfig: {
 *             networkUuid: "my_subnet_id",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *         },
 *         nodeOsVersion: "ntnx-1.0",
 *         numInstances: 1,
 *     },
 * });
 * ```
 *
 * ### resource to create karbon cluster with timeouts
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const exampleCluster = new nutanix.KarbonCluster("exampleCluster", {
 *     cniConfig: {
 *         nodeCidrMaskSize: 24,
 *         podIpv4Cidr: "172.20.0.0/16",
 *         serviceIpv4Cidr: "172.19.0.0/16",
 *     },
 *     etcdNodePool: {
 *         ahvConfig: {
 *             networkUuid: "my_subnet_id",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *         },
 *         nodeOsVersion: "ntnx-1.0",
 *         numInstances: 1,
 *     },
 *     masterNodePool: {
 *         ahvConfig: {
 *             networkUuid: "my_subnet_id",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *         },
 *         nodeOsVersion: "ntnx-1.0",
 *         numInstances: 1,
 *     },
 *     storageClassConfig: {
 *         reclaimPolicy: "Delete",
 *         volumesConfig: {
 *             fileSystem: "ext4",
 *             flashMode: false,
 *             password: "my_pe_pw",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *             storageContainer: "my_storage_container_name",
 *             username: "my_pe_username",
 *         },
 *     },
 *     version: "1.18.15-1",
 *     workerNodePool: {
 *         ahvConfig: {
 *             networkUuid: "my_subnet_id",
 *             prismElementClusterUuid: "my_pe_cluster_uuid",
 *         },
 *         nodeOsVersion: "ntnx-1.0",
 *         numInstances: 1,
 *     },
 * });
 * ```
 */
export class KarbonCluster extends pulumi.CustomResource {
    /**
     * Get an existing KarbonCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KarbonClusterState, opts?: pulumi.CustomResourceOptions): KarbonCluster {
        return new KarbonCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/karbonCluster:KarbonCluster';

    /**
     * Returns true if the given object is an instance of KarbonCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KarbonCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KarbonCluster.__pulumiType;
    }

    /**
     * - (Optional) The active passive mode uses the Virtual Router Redundancy Protocol (VRRP) protocol to provide high availability of the master. **Note:** Updates to this attribute forces new resource creation.
     */
    declare public readonly activePassiveConfig: pulumi.Output<outputs.KarbonClusterActivePassiveConfig | undefined>;
    /**
     * - (Required) K8s cluster networking configuration. The flannel or the calico configuration needs to be provided. **Note:** Updates to this attribute forces new resource creation.
     */
    declare public readonly cniConfig: pulumi.Output<outputs.KarbonClusterCniConfig>;
    declare public /*out*/ readonly deploymentType: pulumi.Output<string>;
    /**
     * - (Required) Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
     */
    declare public readonly etcdNodePool: pulumi.Output<outputs.KarbonClusterEtcdNodePool>;
    /**
     * - (Optional) The external load balancer configuration in the case of a multi-master-external-load-balancer type master deployment. **Note:** Updates to this attribute forces new resource creation.
     */
    declare public readonly externalLbConfig: pulumi.Output<outputs.KarbonClusterExternalLbConfig | undefined>;
    declare public /*out*/ readonly kubeapiServerIpv4Address: pulumi.Output<string>;
    /**
     * - (Required) Configuration of the master node pools.
     */
    declare public readonly masterNodePool: pulumi.Output<outputs.KarbonClusterMasterNodePool>;
    /**
     * - (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * - (Optional) Allows the Karbon cluster to pull images of a list of private registries.
     */
    declare public readonly privateRegistries: pulumi.Output<outputs.KarbonClusterPrivateRegistry[] | undefined>;
    /**
     * - (Optional) Configuration of a single master node. **Note:** Updates to this attribute forces new resource creation.
     */
    declare public readonly singleMasterConfig: pulumi.Output<outputs.KarbonClusterSingleMasterConfig | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * - (Required) Storage class configuration attribute for defining the persistent volume attributes. **Note:** Updates to this attribute forces new resource creation.
     */
    declare public readonly storageClassConfig: pulumi.Output<outputs.KarbonClusterStorageClassConfig>;
    /**
     * - (Required) K8s version of the cluster. **Note:** Updates to this attribute forces new resource creation.
     */
    declare public readonly version: pulumi.Output<string>;
    /**
     * - (Optional) Maximum wait time for the Karbon cluster to provision.
     *
     * @deprecated use timeouts instead
     */
    declare public readonly waitTimeoutMinutes: pulumi.Output<number | undefined>;
    declare public readonly workerNodePool: pulumi.Output<outputs.KarbonClusterWorkerNodePool>;

    /**
     * Create a KarbonCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KarbonClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KarbonClusterArgs | KarbonClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KarbonClusterState | undefined;
            resourceInputs["activePassiveConfig"] = state?.activePassiveConfig;
            resourceInputs["cniConfig"] = state?.cniConfig;
            resourceInputs["deploymentType"] = state?.deploymentType;
            resourceInputs["etcdNodePool"] = state?.etcdNodePool;
            resourceInputs["externalLbConfig"] = state?.externalLbConfig;
            resourceInputs["kubeapiServerIpv4Address"] = state?.kubeapiServerIpv4Address;
            resourceInputs["masterNodePool"] = state?.masterNodePool;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateRegistries"] = state?.privateRegistries;
            resourceInputs["singleMasterConfig"] = state?.singleMasterConfig;
            resourceInputs["status"] = state?.status;
            resourceInputs["storageClassConfig"] = state?.storageClassConfig;
            resourceInputs["version"] = state?.version;
            resourceInputs["waitTimeoutMinutes"] = state?.waitTimeoutMinutes;
            resourceInputs["workerNodePool"] = state?.workerNodePool;
        } else {
            const args = argsOrState as KarbonClusterArgs | undefined;
            if (args?.cniConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'cniConfig'");
            }
            if (args?.etcdNodePool === undefined && !opts.urn) {
                throw new Error("Missing required property 'etcdNodePool'");
            }
            if (args?.masterNodePool === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNodePool'");
            }
            if (args?.storageClassConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageClassConfig'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if (args?.workerNodePool === undefined && !opts.urn) {
                throw new Error("Missing required property 'workerNodePool'");
            }
            resourceInputs["activePassiveConfig"] = args?.activePassiveConfig;
            resourceInputs["cniConfig"] = args?.cniConfig;
            resourceInputs["etcdNodePool"] = args?.etcdNodePool;
            resourceInputs["externalLbConfig"] = args?.externalLbConfig;
            resourceInputs["masterNodePool"] = args?.masterNodePool;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateRegistries"] = args?.privateRegistries;
            resourceInputs["singleMasterConfig"] = args?.singleMasterConfig;
            resourceInputs["storageClassConfig"] = args?.storageClassConfig;
            resourceInputs["version"] = args?.version;
            resourceInputs["waitTimeoutMinutes"] = args?.waitTimeoutMinutes;
            resourceInputs["workerNodePool"] = args?.workerNodePool;
            resourceInputs["deploymentType"] = undefined /*out*/;
            resourceInputs["kubeapiServerIpv4Address"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KarbonCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KarbonCluster resources.
 */
export interface KarbonClusterState {
    /**
     * - (Optional) The active passive mode uses the Virtual Router Redundancy Protocol (VRRP) protocol to provide high availability of the master. **Note:** Updates to this attribute forces new resource creation.
     */
    activePassiveConfig?: pulumi.Input<inputs.KarbonClusterActivePassiveConfig>;
    /**
     * - (Required) K8s cluster networking configuration. The flannel or the calico configuration needs to be provided. **Note:** Updates to this attribute forces new resource creation.
     */
    cniConfig?: pulumi.Input<inputs.KarbonClusterCniConfig>;
    deploymentType?: pulumi.Input<string>;
    /**
     * - (Required) Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
     */
    etcdNodePool?: pulumi.Input<inputs.KarbonClusterEtcdNodePool>;
    /**
     * - (Optional) The external load balancer configuration in the case of a multi-master-external-load-balancer type master deployment. **Note:** Updates to this attribute forces new resource creation.
     */
    externalLbConfig?: pulumi.Input<inputs.KarbonClusterExternalLbConfig>;
    kubeapiServerIpv4Address?: pulumi.Input<string>;
    /**
     * - (Required) Configuration of the master node pools.
     */
    masterNodePool?: pulumi.Input<inputs.KarbonClusterMasterNodePool>;
    /**
     * - (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) Allows the Karbon cluster to pull images of a list of private registries.
     */
    privateRegistries?: pulumi.Input<pulumi.Input<inputs.KarbonClusterPrivateRegistry>[]>;
    /**
     * - (Optional) Configuration of a single master node. **Note:** Updates to this attribute forces new resource creation.
     */
    singleMasterConfig?: pulumi.Input<inputs.KarbonClusterSingleMasterConfig>;
    status?: pulumi.Input<string>;
    /**
     * - (Required) Storage class configuration attribute for defining the persistent volume attributes. **Note:** Updates to this attribute forces new resource creation.
     */
    storageClassConfig?: pulumi.Input<inputs.KarbonClusterStorageClassConfig>;
    /**
     * - (Required) K8s version of the cluster. **Note:** Updates to this attribute forces new resource creation.
     */
    version?: pulumi.Input<string>;
    /**
     * - (Optional) Maximum wait time for the Karbon cluster to provision.
     *
     * @deprecated use timeouts instead
     */
    waitTimeoutMinutes?: pulumi.Input<number>;
    workerNodePool?: pulumi.Input<inputs.KarbonClusterWorkerNodePool>;
}

/**
 * The set of arguments for constructing a KarbonCluster resource.
 */
export interface KarbonClusterArgs {
    /**
     * - (Optional) The active passive mode uses the Virtual Router Redundancy Protocol (VRRP) protocol to provide high availability of the master. **Note:** Updates to this attribute forces new resource creation.
     */
    activePassiveConfig?: pulumi.Input<inputs.KarbonClusterActivePassiveConfig>;
    /**
     * - (Required) K8s cluster networking configuration. The flannel or the calico configuration needs to be provided. **Note:** Updates to this attribute forces new resource creation.
     */
    cniConfig: pulumi.Input<inputs.KarbonClusterCniConfig>;
    /**
     * - (Required) Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
     */
    etcdNodePool: pulumi.Input<inputs.KarbonClusterEtcdNodePool>;
    /**
     * - (Optional) The external load balancer configuration in the case of a multi-master-external-load-balancer type master deployment. **Note:** Updates to this attribute forces new resource creation.
     */
    externalLbConfig?: pulumi.Input<inputs.KarbonClusterExternalLbConfig>;
    /**
     * - (Required) Configuration of the master node pools.
     */
    masterNodePool: pulumi.Input<inputs.KarbonClusterMasterNodePool>;
    /**
     * - (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) Allows the Karbon cluster to pull images of a list of private registries.
     */
    privateRegistries?: pulumi.Input<pulumi.Input<inputs.KarbonClusterPrivateRegistry>[]>;
    /**
     * - (Optional) Configuration of a single master node. **Note:** Updates to this attribute forces new resource creation.
     */
    singleMasterConfig?: pulumi.Input<inputs.KarbonClusterSingleMasterConfig>;
    /**
     * - (Required) Storage class configuration attribute for defining the persistent volume attributes. **Note:** Updates to this attribute forces new resource creation.
     */
    storageClassConfig: pulumi.Input<inputs.KarbonClusterStorageClassConfig>;
    /**
     * - (Required) K8s version of the cluster. **Note:** Updates to this attribute forces new resource creation.
     */
    version: pulumi.Input<string>;
    /**
     * - (Optional) Maximum wait time for the Karbon cluster to provision.
     *
     * @deprecated use timeouts instead
     */
    waitTimeoutMinutes?: pulumi.Input<number>;
    workerNodePool: pulumi.Input<inputs.KarbonClusterWorkerNodePool>;
}
