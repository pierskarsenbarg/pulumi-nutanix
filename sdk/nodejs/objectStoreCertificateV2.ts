// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This operation creates a new default certificate and keys. It also creates the alternate FQDNs and alternate IPs for the Object store. The certificate of an Object store can be created when it is in a OBJECT_STORE_AVAILABLE or OBJECT_STORE_CERT_CREATION_FAILED state. If the publicCert, privateKey, and ca values are provided in the request body, these values are used to create the new certificate. If these values are not provided, a new certificate will be generated if 'shouldGenerate' is set to true and if it is set to false, the existing certificate will be used as the new certificate. Optionally, a list of additional alternate FQDNs and alternate IPs can be provided. These alternateFqdns and alternateIps must be included in the CA certificate if it has been provided.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = nutanix.getCertificateV2({
 *     extId: "ef0a9a54-e7e1-42e2-a59f-de779ec1c9ea",
 *     objectStoreExtId: "ac91151a-28b4-4ffe-b150-6bcb2ec80cd4",
 * });
 * ```
 *
 * ## JSON Example
 *
 * See detailed information in [Nutanix Create a SSL certificate for an Object store V4 ](https://developers.nutanix.com/api-reference?namespace=objects&version=v4.0#tag/ObjectStores/operation/createCertificate).
 */
export class ObjectStoreCertificateV2 extends pulumi.CustomResource {
    /**
     * Get an existing ObjectStoreCertificateV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectStoreCertificateV2State, opts?: pulumi.CustomResourceOptions): ObjectStoreCertificateV2 {
        return new ObjectStoreCertificateV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/objectStoreCertificateV2:ObjectStoreCertificateV2';

    /**
     * Returns true if the given object is an instance of ObjectStoreCertificateV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectStoreCertificateV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectStoreCertificateV2.__pulumiType;
    }

    declare public /*out*/ readonly alternateFqdns: pulumi.Output<outputs.ObjectStoreCertificateV2AlternateFqdn[]>;
    declare public /*out*/ readonly alternateIps: pulumi.Output<outputs.ObjectStoreCertificateV2AlternateIp[]>;
    /**
     * -(Required) The UUID of the certificate of an Object store.
     */
    declare public /*out*/ readonly extId: pulumi.Output<string>;
    declare public /*out*/ readonly links: pulumi.Output<outputs.ObjectStoreCertificateV2Link[]>;
    declare public /*out*/ readonly metadatas: pulumi.Output<outputs.ObjectStoreCertificateV2Metadata[]>;
    /**
     * -(Required) The UUID of the Object store.
     */
    declare public readonly objectStoreExtId: pulumi.Output<string>;
    /**
     * -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
     */
    declare public readonly path: pulumi.Output<string>;
    declare public /*out*/ readonly tenantId: pulumi.Output<string>;

    /**
     * Create a ObjectStoreCertificateV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectStoreCertificateV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectStoreCertificateV2Args | ObjectStoreCertificateV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectStoreCertificateV2State | undefined;
            resourceInputs["alternateFqdns"] = state?.alternateFqdns;
            resourceInputs["alternateIps"] = state?.alternateIps;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["links"] = state?.links;
            resourceInputs["metadatas"] = state?.metadatas;
            resourceInputs["objectStoreExtId"] = state?.objectStoreExtId;
            resourceInputs["path"] = state?.path;
            resourceInputs["tenantId"] = state?.tenantId;
        } else {
            const args = argsOrState as ObjectStoreCertificateV2Args | undefined;
            if (args?.objectStoreExtId === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectStoreExtId'");
            }
            if (args?.path === undefined && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["objectStoreExtId"] = args?.objectStoreExtId;
            resourceInputs["path"] = args?.path;
            resourceInputs["alternateFqdns"] = undefined /*out*/;
            resourceInputs["alternateIps"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectStoreCertificateV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObjectStoreCertificateV2 resources.
 */
export interface ObjectStoreCertificateV2State {
    alternateFqdns?: pulumi.Input<pulumi.Input<inputs.ObjectStoreCertificateV2AlternateFqdn>[]>;
    alternateIps?: pulumi.Input<pulumi.Input<inputs.ObjectStoreCertificateV2AlternateIp>[]>;
    /**
     * -(Required) The UUID of the certificate of an Object store.
     */
    extId?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.ObjectStoreCertificateV2Link>[]>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.ObjectStoreCertificateV2Metadata>[]>;
    /**
     * -(Required) The UUID of the Object store.
     */
    objectStoreExtId?: pulumi.Input<string>;
    /**
     * -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
     */
    path?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectStoreCertificateV2 resource.
 */
export interface ObjectStoreCertificateV2Args {
    /**
     * -(Required) The UUID of the Object store.
     */
    objectStoreExtId: pulumi.Input<string>;
    /**
     * -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
     */
    path: pulumi.Input<string>;
}
