// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Create an image placement policy using the provided request body. Name, placement_type, imageEntityFilter and source are mandatory fields to create an policy.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = new nutanix.ImagePlacementPolicyV2("example", {
 *     clusterEntityFilters: [{
 *         categoryExtIds: ["ab520e1d-4950-1db1-917f-a9e2ea35b8e3"],
 *         type: "CATEGORIES_MATCH_ALL",
 *     }],
 *     description: "%[2]s",
 *     imageEntityFilters: [{
 *         categoryExtIds: ["ab520e1d-4950-1db1-917f-a9e2ea35b8e3"],
 *         type: "CATEGORIES_MATCH_ALL",
 *     }],
 *     placementType: "SOFT",
 * });
 * ```
 */
export class ImagePlacementPolicyV2 extends pulumi.CustomResource {
    /**
     * Get an existing ImagePlacementPolicyV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagePlacementPolicyV2State, opts?: pulumi.CustomResourceOptions): ImagePlacementPolicyV2 {
        return new ImagePlacementPolicyV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/imagePlacementPolicyV2:ImagePlacementPolicyV2';

    /**
     * Returns true if the given object is an instance of ImagePlacementPolicyV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagePlacementPolicyV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagePlacementPolicyV2.__pulumiType;
    }

    /**
     * Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
     */
    declare public readonly action: pulumi.Output<string | undefined>;
    /**
     * Category-based entity filter.
     */
    declare public readonly clusterEntityFilters: pulumi.Output<outputs.ImagePlacementPolicyV2ClusterEntityFilter[]>;
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Description of the image placement policy.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
     */
    declare public readonly enforcementState: pulumi.Output<string>;
    declare public readonly extId: pulumi.Output<string>;
    /**
     * Category-based entity filter.
     */
    declare public readonly imageEntityFilters: pulumi.Output<outputs.ImagePlacementPolicyV2ImageEntityFilter[]>;
    declare public /*out*/ readonly lastUpdateTime: pulumi.Output<string>;
    /**
     * Name of the image placement policy.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly ownerExtId: pulumi.Output<string>;
    /**
     * Type of the image placement policy. Valid values "HARD", "SOFT"
     */
    declare public readonly placementType: pulumi.Output<string>;
    declare public readonly shouldCancelRunningTasks: pulumi.Output<boolean | undefined>;

    /**
     * Create a ImagePlacementPolicyV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImagePlacementPolicyV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagePlacementPolicyV2Args | ImagePlacementPolicyV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagePlacementPolicyV2State | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["clusterEntityFilters"] = state?.clusterEntityFilters;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["enforcementState"] = state?.enforcementState;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["imageEntityFilters"] = state?.imageEntityFilters;
            resourceInputs["lastUpdateTime"] = state?.lastUpdateTime;
            resourceInputs["name"] = state?.name;
            resourceInputs["ownerExtId"] = state?.ownerExtId;
            resourceInputs["placementType"] = state?.placementType;
            resourceInputs["shouldCancelRunningTasks"] = state?.shouldCancelRunningTasks;
        } else {
            const args = argsOrState as ImagePlacementPolicyV2Args | undefined;
            if (args?.clusterEntityFilters === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterEntityFilters'");
            }
            if (args?.imageEntityFilters === undefined && !opts.urn) {
                throw new Error("Missing required property 'imageEntityFilters'");
            }
            if (args?.placementType === undefined && !opts.urn) {
                throw new Error("Missing required property 'placementType'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["clusterEntityFilters"] = args?.clusterEntityFilters;
            resourceInputs["description"] = args?.description;
            resourceInputs["enforcementState"] = args?.enforcementState;
            resourceInputs["extId"] = args?.extId;
            resourceInputs["imageEntityFilters"] = args?.imageEntityFilters;
            resourceInputs["name"] = args?.name;
            resourceInputs["placementType"] = args?.placementType;
            resourceInputs["shouldCancelRunningTasks"] = args?.shouldCancelRunningTasks;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lastUpdateTime"] = undefined /*out*/;
            resourceInputs["ownerExtId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagePlacementPolicyV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImagePlacementPolicyV2 resources.
 */
export interface ImagePlacementPolicyV2State {
    /**
     * Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
     */
    action?: pulumi.Input<string>;
    /**
     * Category-based entity filter.
     */
    clusterEntityFilters?: pulumi.Input<pulumi.Input<inputs.ImagePlacementPolicyV2ClusterEntityFilter>[]>;
    createTime?: pulumi.Input<string>;
    /**
     * Description of the image placement policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
     */
    enforcementState?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    /**
     * Category-based entity filter.
     */
    imageEntityFilters?: pulumi.Input<pulumi.Input<inputs.ImagePlacementPolicyV2ImageEntityFilter>[]>;
    lastUpdateTime?: pulumi.Input<string>;
    /**
     * Name of the image placement policy.
     */
    name?: pulumi.Input<string>;
    ownerExtId?: pulumi.Input<string>;
    /**
     * Type of the image placement policy. Valid values "HARD", "SOFT"
     */
    placementType?: pulumi.Input<string>;
    shouldCancelRunningTasks?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ImagePlacementPolicyV2 resource.
 */
export interface ImagePlacementPolicyV2Args {
    /**
     * Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
     */
    action?: pulumi.Input<string>;
    /**
     * Category-based entity filter.
     */
    clusterEntityFilters: pulumi.Input<pulumi.Input<inputs.ImagePlacementPolicyV2ClusterEntityFilter>[]>;
    /**
     * Description of the image placement policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
     */
    enforcementState?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    /**
     * Category-based entity filter.
     */
    imageEntityFilters: pulumi.Input<pulumi.Input<inputs.ImagePlacementPolicyV2ImageEntityFilter>[]>;
    /**
     * Name of the image placement policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of the image placement policy. Valid values "HARD", "SOFT"
     */
    placementType: pulumi.Input<string>;
    shouldCancelRunningTasks?: pulumi.Input<boolean>;
}
