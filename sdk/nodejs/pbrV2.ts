// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PbrV2 extends pulumi.CustomResource {
    /**
     * Get an existing PbrV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PbrV2State, opts?: pulumi.CustomResourceOptions): PbrV2 {
        return new PbrV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/pbrV2:PbrV2';

    /**
     * Returns true if the given object is an instance of PbrV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PbrV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PbrV2.__pulumiType;
    }

    declare public readonly description: pulumi.Output<string>;
    declare public readonly extId: pulumi.Output<string>;
    declare public /*out*/ readonly links: pulumi.Output<outputs.PbrV2Link[]>;
    declare public /*out*/ readonly metadatas: pulumi.Output<outputs.PbrV2Metadata[]>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly policies: pulumi.Output<outputs.PbrV2Policy[]>;
    declare public readonly priority: pulumi.Output<number>;
    declare public /*out*/ readonly tenantId: pulumi.Output<string>;
    declare public readonly vpcExtId: pulumi.Output<string>;
    declare public /*out*/ readonly vpcs: pulumi.Output<outputs.PbrV2Vpc[]>;

    /**
     * Create a PbrV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PbrV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PbrV2Args | PbrV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PbrV2State | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["links"] = state?.links;
            resourceInputs["metadatas"] = state?.metadatas;
            resourceInputs["name"] = state?.name;
            resourceInputs["policies"] = state?.policies;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["vpcExtId"] = state?.vpcExtId;
            resourceInputs["vpcs"] = state?.vpcs;
        } else {
            const args = argsOrState as PbrV2Args | undefined;
            if (args?.policies === undefined && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if (args?.vpcExtId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcExtId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["extId"] = args?.extId;
            resourceInputs["name"] = args?.name;
            resourceInputs["policies"] = args?.policies;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["vpcExtId"] = args?.vpcExtId;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["vpcs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PbrV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PbrV2 resources.
 */
export interface PbrV2State {
    description?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.PbrV2Link>[]>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.PbrV2Metadata>[]>;
    name?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.PbrV2Policy>[]>;
    priority?: pulumi.Input<number>;
    tenantId?: pulumi.Input<string>;
    vpcExtId?: pulumi.Input<string>;
    vpcs?: pulumi.Input<pulumi.Input<inputs.PbrV2Vpc>[]>;
}

/**
 * The set of arguments for constructing a PbrV2 resource.
 */
export interface PbrV2Args {
    description?: pulumi.Input<string>;
    extId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policies: pulumi.Input<pulumi.Input<inputs.PbrV2Policy>[]>;
    priority: pulumi.Input<number>;
    vpcExtId: pulumi.Input<string>;
}
