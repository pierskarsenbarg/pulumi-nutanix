// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieve the image placement policy details for the provided external identifier.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const ipp = nutanix.getImagePlacementPolicyV2({
 *     extId: "cf96e27a-4e52-4cec-b563-d0b25413cc4a",
 * });
 * ```
 */
export function getImagePlacementPolicyV2(args: GetImagePlacementPolicyV2Args, opts?: pulumi.InvokeOptions): Promise<GetImagePlacementPolicyV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getImagePlacementPolicyV2:getImagePlacementPolicyV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getImagePlacementPolicyV2.
 */
export interface GetImagePlacementPolicyV2Args {
    /**
     * The external identifier of an image placement policy.
     */
    extId: string;
}

/**
 * A collection of values returned by getImagePlacementPolicyV2.
 */
export interface GetImagePlacementPolicyV2Result {
    /**
     * (Required) Category-based entity filter.
     */
    readonly clusterEntityFilters: outputs.GetImagePlacementPolicyV2ClusterEntityFilter[];
    readonly createTime: string;
    /**
     * (Optional) Description of the image placement policy.
     */
    readonly description: string;
    /**
     * (Optional) Enforcement status of the image placement policy. Valid values:
     * - ACTIVE: The image placement policy is being actively enforced.
     * - SUSPENDED: The policy enforcement for image placement is suspended.
     */
    readonly enforcementState: string;
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Required) Category-based entity filter.
     */
    readonly imageEntityFilters: outputs.GetImagePlacementPolicyV2ImageEntityFilter[];
    readonly lastUpdateTime: string;
    /**
     * (Required) Name of the image placement policy.
     */
    readonly name: string;
    readonly ownerExtId: string;
    /**
     * (Required) Type of the image placement policy. Valid values:
     * - HARD: Hard placement policy. Images can only be placed on clusters enforced by the image placement policy.
     * - SOFT: Soft placement policy. Images can be placed on clusters apart from those enforced by the image placement policy.
     */
    readonly placementType: string;
}
/**
 * Retrieve the image placement policy details for the provided external identifier.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const ipp = nutanix.getImagePlacementPolicyV2({
 *     extId: "cf96e27a-4e52-4cec-b563-d0b25413cc4a",
 * });
 * ```
 */
export function getImagePlacementPolicyV2Output(args: GetImagePlacementPolicyV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetImagePlacementPolicyV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getImagePlacementPolicyV2:getImagePlacementPolicyV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getImagePlacementPolicyV2.
 */
export interface GetImagePlacementPolicyV2OutputArgs {
    /**
     * The external identifier of an image placement policy.
     */
    extId: pulumi.Input<string>;
}
