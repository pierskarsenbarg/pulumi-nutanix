// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FoundationImageNodes extends pulumi.CustomResource {
    /**
     * Get an existing FoundationImageNodes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FoundationImageNodesState, opts?: pulumi.CustomResourceOptions): FoundationImageNodes {
        return new FoundationImageNodes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/foundationImageNodes:FoundationImageNodes';

    /**
     * Returns true if the given object is an instance of FoundationImageNodes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FoundationImageNodes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FoundationImageNodes.__pulumiType;
    }

    declare public readonly blocks: pulumi.Output<outputs.FoundationImageNodesBlock[]>;
    /**
     * - list containing cluster name and cluster urls for created clusters in current session
     * * `cluster_urls.#.cluster_name` :- clusterName
     * * `cluster_urls.#.cluster_url` :- url to access the cluster login
     */
    declare public /*out*/ readonly clusterUrls: pulumi.Output<outputs.FoundationImageNodesClusterUrl[]>;
    declare public readonly clusters: pulumi.Output<outputs.FoundationImageNodesCluster[] | undefined>;
    /**
     * - (Required) CVM gateway.
     */
    declare public readonly cvmGateway: pulumi.Output<string>;
    /**
     * - (Required) CVM netmask.
     */
    declare public readonly cvmNetmask: pulumi.Output<string>;
    /**
     * - Contains user data from Eos portal.
     */
    declare public readonly eosMetadata: pulumi.Output<outputs.FoundationImageNodesEosMetadata | undefined>;
    /**
     * - Foundation Central specific settings.
     */
    declare public readonly fcSettings: pulumi.Output<outputs.FoundationImageNodesFcSettings | undefined>;
    /**
     * - Hyperv External virtual network adapter name.
     */
    declare public readonly hypervExternalVnic: pulumi.Output<string | undefined>;
    /**
     * - Hyperv External vswitch name.
     */
    declare public readonly hypervExternalVswitch: pulumi.Output<string | undefined>;
    /**
     * - Hyperv product key.
     */
    declare public readonly hypervProductKey: pulumi.Output<string | undefined>;
    /**
     * - Hyperv SKU.
     */
    declare public readonly hypervSku: pulumi.Output<boolean | undefined>;
    /**
     * - (Required) Hypervisor gateway.
     */
    declare public readonly hypervisorGateway: pulumi.Output<string>;
    /**
     * - Hypervisor ISO.
     */
    declare public readonly hypervisorIso: pulumi.Output<outputs.FoundationImageNodesHypervisorIso | undefined>;
    declare public readonly hypervisorNameserver: pulumi.Output<string | undefined>;
    /**
     * - (Required) Hypervisor netmask.
     */
    declare public readonly hypervisorNetmask: pulumi.Output<string>;
    /**
     * - Hypervisor password.
     */
    declare public readonly hypervisorPassword: pulumi.Output<string | undefined>;
    /**
     * - install script.
     */
    declare public readonly installScript: pulumi.Output<string | undefined>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) default IPMI gateway
     */
    declare public readonly ipmiGateway: pulumi.Output<string | undefined>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) default IPMI netmask
     */
    declare public readonly ipmiNetmask: pulumi.Output<string | undefined>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) IPMI password.
     */
    declare public readonly ipmiPassword: pulumi.Output<string | undefined>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) IPMI username.
     */
    declare public readonly ipmiUser: pulumi.Output<string | undefined>;
    /**
     * - Id of the custom layout which needs to be passed to imaging request.
     */
    declare public readonly layoutEggUuid: pulumi.Output<string | undefined>;
    /**
     * - (Required) NOS package.
     */
    declare public readonly nosPackage: pulumi.Output<string>;
    /**
     * - sessionId of the imaging session
     */
    declare public /*out*/ readonly sessionId: pulumi.Output<string>;
    /**
     * - If hypervisor installation should be skipped.
     */
    declare public readonly skipHypervisor: pulumi.Output<boolean | undefined>;
    /**
     * - Arguments to be passed to svmRescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.
     */
    declare public readonly svmRescueArgs: pulumi.Output<string[] | undefined>;
    /**
     * - Types of tests to be performed.
     */
    declare public readonly tests: pulumi.Output<outputs.FoundationImageNodesTests | undefined>;
    /**
     * - UCSM IP address.
     */
    declare public readonly ucsmIp: pulumi.Output<string | undefined>;
    /**
     * - UCSM password.
     */
    declare public readonly ucsmPassword: pulumi.Output<string | undefined>;
    /**
     * - UCSM username.
     */
    declare public readonly ucsmUser: pulumi.Output<string | undefined>;
    /**
     * - UNC password.
     */
    declare public readonly uncPassword: pulumi.Output<string | undefined>;
    /**
     * - UNC Path.
     */
    declare public readonly uncPath: pulumi.Output<string | undefined>;
    /**
     * - UNC username.
     */
    declare public readonly uncUsername: pulumi.Output<string | undefined>;
    /**
     * - xen config types.
     */
    declare public readonly xenConfigType: pulumi.Output<string | undefined>;
    /**
     * - xen server master IP address.
     */
    declare public readonly xsMasterIp: pulumi.Output<string | undefined>;
    /**
     * - xen server master label.
     */
    declare public readonly xsMasterLabel: pulumi.Output<string | undefined>;
    /**
     * - xen server master password.
     */
    declare public readonly xsMasterPassword: pulumi.Output<string | undefined>;
    /**
     * - xen server master username.
     */
    declare public readonly xsMasterUsername: pulumi.Output<string | undefined>;

    /**
     * Create a FoundationImageNodes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FoundationImageNodesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FoundationImageNodesArgs | FoundationImageNodesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FoundationImageNodesState | undefined;
            resourceInputs["blocks"] = state?.blocks;
            resourceInputs["clusterUrls"] = state?.clusterUrls;
            resourceInputs["clusters"] = state?.clusters;
            resourceInputs["cvmGateway"] = state?.cvmGateway;
            resourceInputs["cvmNetmask"] = state?.cvmNetmask;
            resourceInputs["eosMetadata"] = state?.eosMetadata;
            resourceInputs["fcSettings"] = state?.fcSettings;
            resourceInputs["hypervExternalVnic"] = state?.hypervExternalVnic;
            resourceInputs["hypervExternalVswitch"] = state?.hypervExternalVswitch;
            resourceInputs["hypervProductKey"] = state?.hypervProductKey;
            resourceInputs["hypervSku"] = state?.hypervSku;
            resourceInputs["hypervisorGateway"] = state?.hypervisorGateway;
            resourceInputs["hypervisorIso"] = state?.hypervisorIso;
            resourceInputs["hypervisorNameserver"] = state?.hypervisorNameserver;
            resourceInputs["hypervisorNetmask"] = state?.hypervisorNetmask;
            resourceInputs["hypervisorPassword"] = state?.hypervisorPassword;
            resourceInputs["installScript"] = state?.installScript;
            resourceInputs["ipmiGateway"] = state?.ipmiGateway;
            resourceInputs["ipmiNetmask"] = state?.ipmiNetmask;
            resourceInputs["ipmiPassword"] = state?.ipmiPassword;
            resourceInputs["ipmiUser"] = state?.ipmiUser;
            resourceInputs["layoutEggUuid"] = state?.layoutEggUuid;
            resourceInputs["nosPackage"] = state?.nosPackage;
            resourceInputs["sessionId"] = state?.sessionId;
            resourceInputs["skipHypervisor"] = state?.skipHypervisor;
            resourceInputs["svmRescueArgs"] = state?.svmRescueArgs;
            resourceInputs["tests"] = state?.tests;
            resourceInputs["ucsmIp"] = state?.ucsmIp;
            resourceInputs["ucsmPassword"] = state?.ucsmPassword;
            resourceInputs["ucsmUser"] = state?.ucsmUser;
            resourceInputs["uncPassword"] = state?.uncPassword;
            resourceInputs["uncPath"] = state?.uncPath;
            resourceInputs["uncUsername"] = state?.uncUsername;
            resourceInputs["xenConfigType"] = state?.xenConfigType;
            resourceInputs["xsMasterIp"] = state?.xsMasterIp;
            resourceInputs["xsMasterLabel"] = state?.xsMasterLabel;
            resourceInputs["xsMasterPassword"] = state?.xsMasterPassword;
            resourceInputs["xsMasterUsername"] = state?.xsMasterUsername;
        } else {
            const args = argsOrState as FoundationImageNodesArgs | undefined;
            if (args?.blocks === undefined && !opts.urn) {
                throw new Error("Missing required property 'blocks'");
            }
            if (args?.cvmGateway === undefined && !opts.urn) {
                throw new Error("Missing required property 'cvmGateway'");
            }
            if (args?.cvmNetmask === undefined && !opts.urn) {
                throw new Error("Missing required property 'cvmNetmask'");
            }
            if (args?.hypervisorGateway === undefined && !opts.urn) {
                throw new Error("Missing required property 'hypervisorGateway'");
            }
            if (args?.hypervisorNetmask === undefined && !opts.urn) {
                throw new Error("Missing required property 'hypervisorNetmask'");
            }
            if (args?.nosPackage === undefined && !opts.urn) {
                throw new Error("Missing required property 'nosPackage'");
            }
            resourceInputs["blocks"] = args?.blocks;
            resourceInputs["clusters"] = args?.clusters;
            resourceInputs["cvmGateway"] = args?.cvmGateway;
            resourceInputs["cvmNetmask"] = args?.cvmNetmask;
            resourceInputs["eosMetadata"] = args?.eosMetadata;
            resourceInputs["fcSettings"] = args?.fcSettings;
            resourceInputs["hypervExternalVnic"] = args?.hypervExternalVnic;
            resourceInputs["hypervExternalVswitch"] = args?.hypervExternalVswitch;
            resourceInputs["hypervProductKey"] = args?.hypervProductKey;
            resourceInputs["hypervSku"] = args?.hypervSku;
            resourceInputs["hypervisorGateway"] = args?.hypervisorGateway;
            resourceInputs["hypervisorIso"] = args?.hypervisorIso;
            resourceInputs["hypervisorNameserver"] = args?.hypervisorNameserver;
            resourceInputs["hypervisorNetmask"] = args?.hypervisorNetmask;
            resourceInputs["hypervisorPassword"] = args?.hypervisorPassword;
            resourceInputs["installScript"] = args?.installScript;
            resourceInputs["ipmiGateway"] = args?.ipmiGateway;
            resourceInputs["ipmiNetmask"] = args?.ipmiNetmask;
            resourceInputs["ipmiPassword"] = args?.ipmiPassword;
            resourceInputs["ipmiUser"] = args?.ipmiUser;
            resourceInputs["layoutEggUuid"] = args?.layoutEggUuid;
            resourceInputs["nosPackage"] = args?.nosPackage;
            resourceInputs["skipHypervisor"] = args?.skipHypervisor;
            resourceInputs["svmRescueArgs"] = args?.svmRescueArgs;
            resourceInputs["tests"] = args?.tests;
            resourceInputs["ucsmIp"] = args?.ucsmIp;
            resourceInputs["ucsmPassword"] = args?.ucsmPassword;
            resourceInputs["ucsmUser"] = args?.ucsmUser;
            resourceInputs["uncPassword"] = args?.uncPassword;
            resourceInputs["uncPath"] = args?.uncPath;
            resourceInputs["uncUsername"] = args?.uncUsername;
            resourceInputs["xenConfigType"] = args?.xenConfigType;
            resourceInputs["xsMasterIp"] = args?.xsMasterIp;
            resourceInputs["xsMasterLabel"] = args?.xsMasterLabel;
            resourceInputs["xsMasterPassword"] = args?.xsMasterPassword;
            resourceInputs["xsMasterUsername"] = args?.xsMasterUsername;
            resourceInputs["clusterUrls"] = undefined /*out*/;
            resourceInputs["sessionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FoundationImageNodes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FoundationImageNodes resources.
 */
export interface FoundationImageNodesState {
    blocks?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlock>[]>;
    /**
     * - list containing cluster name and cluster urls for created clusters in current session
     * * `cluster_urls.#.cluster_name` :- clusterName
     * * `cluster_urls.#.cluster_url` :- url to access the cluster login
     */
    clusterUrls?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesClusterUrl>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesCluster>[]>;
    /**
     * - (Required) CVM gateway.
     */
    cvmGateway?: pulumi.Input<string>;
    /**
     * - (Required) CVM netmask.
     */
    cvmNetmask?: pulumi.Input<string>;
    /**
     * - Contains user data from Eos portal.
     */
    eosMetadata?: pulumi.Input<inputs.FoundationImageNodesEosMetadata>;
    /**
     * - Foundation Central specific settings.
     */
    fcSettings?: pulumi.Input<inputs.FoundationImageNodesFcSettings>;
    /**
     * - Hyperv External virtual network adapter name.
     */
    hypervExternalVnic?: pulumi.Input<string>;
    /**
     * - Hyperv External vswitch name.
     */
    hypervExternalVswitch?: pulumi.Input<string>;
    /**
     * - Hyperv product key.
     */
    hypervProductKey?: pulumi.Input<string>;
    /**
     * - Hyperv SKU.
     */
    hypervSku?: pulumi.Input<boolean>;
    /**
     * - (Required) Hypervisor gateway.
     */
    hypervisorGateway?: pulumi.Input<string>;
    /**
     * - Hypervisor ISO.
     */
    hypervisorIso?: pulumi.Input<inputs.FoundationImageNodesHypervisorIso>;
    hypervisorNameserver?: pulumi.Input<string>;
    /**
     * - (Required) Hypervisor netmask.
     */
    hypervisorNetmask?: pulumi.Input<string>;
    /**
     * - Hypervisor password.
     */
    hypervisorPassword?: pulumi.Input<string>;
    /**
     * - install script.
     */
    installScript?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) default IPMI gateway
     */
    ipmiGateway?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) default IPMI netmask
     */
    ipmiNetmask?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) IPMI password.
     */
    ipmiPassword?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) IPMI username.
     */
    ipmiUser?: pulumi.Input<string>;
    /**
     * - Id of the custom layout which needs to be passed to imaging request.
     */
    layoutEggUuid?: pulumi.Input<string>;
    /**
     * - (Required) NOS package.
     */
    nosPackage?: pulumi.Input<string>;
    /**
     * - sessionId of the imaging session
     */
    sessionId?: pulumi.Input<string>;
    /**
     * - If hypervisor installation should be skipped.
     */
    skipHypervisor?: pulumi.Input<boolean>;
    /**
     * - Arguments to be passed to svmRescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.
     */
    svmRescueArgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - Types of tests to be performed.
     */
    tests?: pulumi.Input<inputs.FoundationImageNodesTests>;
    /**
     * - UCSM IP address.
     */
    ucsmIp?: pulumi.Input<string>;
    /**
     * - UCSM password.
     */
    ucsmPassword?: pulumi.Input<string>;
    /**
     * - UCSM username.
     */
    ucsmUser?: pulumi.Input<string>;
    /**
     * - UNC password.
     */
    uncPassword?: pulumi.Input<string>;
    /**
     * - UNC Path.
     */
    uncPath?: pulumi.Input<string>;
    /**
     * - UNC username.
     */
    uncUsername?: pulumi.Input<string>;
    /**
     * - xen config types.
     */
    xenConfigType?: pulumi.Input<string>;
    /**
     * - xen server master IP address.
     */
    xsMasterIp?: pulumi.Input<string>;
    /**
     * - xen server master label.
     */
    xsMasterLabel?: pulumi.Input<string>;
    /**
     * - xen server master password.
     */
    xsMasterPassword?: pulumi.Input<string>;
    /**
     * - xen server master username.
     */
    xsMasterUsername?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FoundationImageNodes resource.
 */
export interface FoundationImageNodesArgs {
    blocks: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlock>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesCluster>[]>;
    /**
     * - (Required) CVM gateway.
     */
    cvmGateway: pulumi.Input<string>;
    /**
     * - (Required) CVM netmask.
     */
    cvmNetmask: pulumi.Input<string>;
    /**
     * - Contains user data from Eos portal.
     */
    eosMetadata?: pulumi.Input<inputs.FoundationImageNodesEosMetadata>;
    /**
     * - Foundation Central specific settings.
     */
    fcSettings?: pulumi.Input<inputs.FoundationImageNodesFcSettings>;
    /**
     * - Hyperv External virtual network adapter name.
     */
    hypervExternalVnic?: pulumi.Input<string>;
    /**
     * - Hyperv External vswitch name.
     */
    hypervExternalVswitch?: pulumi.Input<string>;
    /**
     * - Hyperv product key.
     */
    hypervProductKey?: pulumi.Input<string>;
    /**
     * - Hyperv SKU.
     */
    hypervSku?: pulumi.Input<boolean>;
    /**
     * - (Required) Hypervisor gateway.
     */
    hypervisorGateway: pulumi.Input<string>;
    /**
     * - Hypervisor ISO.
     */
    hypervisorIso?: pulumi.Input<inputs.FoundationImageNodesHypervisorIso>;
    hypervisorNameserver?: pulumi.Input<string>;
    /**
     * - (Required) Hypervisor netmask.
     */
    hypervisorNetmask: pulumi.Input<string>;
    /**
     * - Hypervisor password.
     */
    hypervisorPassword?: pulumi.Input<string>;
    /**
     * - install script.
     */
    installScript?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) default IPMI gateway
     */
    ipmiGateway?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) default IPMI netmask
     */
    ipmiNetmask?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) IPMI password.
     */
    ipmiPassword?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or inside node spec) IPMI username.
     */
    ipmiUser?: pulumi.Input<string>;
    /**
     * - Id of the custom layout which needs to be passed to imaging request.
     */
    layoutEggUuid?: pulumi.Input<string>;
    /**
     * - (Required) NOS package.
     */
    nosPackage: pulumi.Input<string>;
    /**
     * - If hypervisor installation should be skipped.
     */
    skipHypervisor?: pulumi.Input<boolean>;
    /**
     * - Arguments to be passed to svmRescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.
     */
    svmRescueArgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - Types of tests to be performed.
     */
    tests?: pulumi.Input<inputs.FoundationImageNodesTests>;
    /**
     * - UCSM IP address.
     */
    ucsmIp?: pulumi.Input<string>;
    /**
     * - UCSM password.
     */
    ucsmPassword?: pulumi.Input<string>;
    /**
     * - UCSM username.
     */
    ucsmUser?: pulumi.Input<string>;
    /**
     * - UNC password.
     */
    uncPassword?: pulumi.Input<string>;
    /**
     * - UNC Path.
     */
    uncPath?: pulumi.Input<string>;
    /**
     * - UNC username.
     */
    uncUsername?: pulumi.Input<string>;
    /**
     * - xen config types.
     */
    xenConfigType?: pulumi.Input<string>;
    /**
     * - xen server master IP address.
     */
    xsMasterIp?: pulumi.Input<string>;
    /**
     * - xen server master label.
     */
    xsMasterLabel?: pulumi.Input<string>;
    /**
     * - xen server master password.
     */
    xsMasterPassword?: pulumi.Input<string>;
    /**
     * - xen server master username.
     */
    xsMasterUsername?: pulumi.Input<string>;
}
