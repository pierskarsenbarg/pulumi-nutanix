// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to Create a Directory Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = new nutanix.DirectoryServicesV2("example", {
 *     directoryType: "directory type",
 *     domainName: "domain name",
 *     serviceAccounts: [{
 *         password: "service account password",
 *         username: "service account username",
 *     }],
 *     url: "URL for the Directory Service",
 * });
 * ```
 */
export class DirectoryServicesV2 extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryServicesV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryServicesV2State, opts?: pulumi.CustomResourceOptions): DirectoryServicesV2 {
        return new DirectoryServicesV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/directoryServicesV2:DirectoryServicesV2';

    /**
     * Returns true if the given object is an instance of DirectoryServicesV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirectoryServicesV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryServicesV2.__pulumiType;
    }

    /**
     * - User or Service who created the Directory Service.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * - Creation time of the Directory Service.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * -(Required) Type of Directory Service, Supported values are: "ACTIVE_DIRECTORY" (Directory Service type is Active Directory.) and "OPEN_LDAP" (Directory Service type is Open LDAP.)
     */
    public readonly directoryType!: pulumi.Output<string>;
    /**
     * -(Required) Domain name for the Directory Service.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
     */
    public readonly extId!: pulumi.Output<string>;
    /**
     * -(Optional) Group membership search type for the Directory Service. Supported values are: "NON_RECURSIVE" (Doesn't search recursively within groups.) and "RECURSIVE" (Searches recursively within groups.)
     */
    public readonly groupSearchType!: pulumi.Output<string>;
    /**
     * - Last updated time of the Directory Service.
     */
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    /**
     * -(Required) Name for the Directory Service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * -(Optional) Configuration for OpenLDAP Directory Service.
     */
    public readonly openLdapConfigurations!: pulumi.Output<outputs.DirectoryServicesV2OpenLdapConfiguration[]>;
    /**
     * -(Optional) Secondary URL for the Directory Service.
     */
    public readonly secondaryUrls!: pulumi.Output<string[]>;
    /**
     * -(Required) Information of Service account to connect to the Directory Service.
     */
    public readonly serviceAccounts!: pulumi.Output<outputs.DirectoryServicesV2ServiceAccount[]>;
    /**
     * -(Required) URL for the Directory Service.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * -(Optional) List of allowed User Groups for the Directory Service.
     */
    public readonly whiteListedGroups!: pulumi.Output<string[]>;

    /**
     * Create a DirectoryServicesV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryServicesV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryServicesV2Args | DirectoryServicesV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryServicesV2State | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["directoryType"] = state ? state.directoryType : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["groupSearchType"] = state ? state.groupSearchType : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openLdapConfigurations"] = state ? state.openLdapConfigurations : undefined;
            resourceInputs["secondaryUrls"] = state ? state.secondaryUrls : undefined;
            resourceInputs["serviceAccounts"] = state ? state.serviceAccounts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["whiteListedGroups"] = state ? state.whiteListedGroups : undefined;
        } else {
            const args = argsOrState as DirectoryServicesV2Args | undefined;
            if ((!args || args.directoryType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryType'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.serviceAccounts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccounts'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["directoryType"] = args ? args.directoryType : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["groupSearchType"] = args ? args.groupSearchType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openLdapConfigurations"] = args ? args.openLdapConfigurations : undefined;
            resourceInputs["secondaryUrls"] = args ? args.secondaryUrls : undefined;
            resourceInputs["serviceAccounts"] = args ? args.serviceAccounts : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["whiteListedGroups"] = args ? args.whiteListedGroups : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirectoryServicesV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DirectoryServicesV2 resources.
 */
export interface DirectoryServicesV2State {
    /**
     * - User or Service who created the Directory Service.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * - Creation time of the Directory Service.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * -(Required) Type of Directory Service, Supported values are: "ACTIVE_DIRECTORY" (Directory Service type is Active Directory.) and "OPEN_LDAP" (Directory Service type is Open LDAP.)
     */
    directoryType?: pulumi.Input<string>;
    /**
     * -(Required) Domain name for the Directory Service.
     */
    domainName?: pulumi.Input<string>;
    /**
     * -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Optional) Group membership search type for the Directory Service. Supported values are: "NON_RECURSIVE" (Doesn't search recursively within groups.) and "RECURSIVE" (Searches recursively within groups.)
     */
    groupSearchType?: pulumi.Input<string>;
    /**
     * - Last updated time of the Directory Service.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * -(Required) Name for the Directory Service.
     */
    name?: pulumi.Input<string>;
    /**
     * -(Optional) Configuration for OpenLDAP Directory Service.
     */
    openLdapConfigurations?: pulumi.Input<pulumi.Input<inputs.DirectoryServicesV2OpenLdapConfiguration>[]>;
    /**
     * -(Optional) Secondary URL for the Directory Service.
     */
    secondaryUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * -(Required) Information of Service account to connect to the Directory Service.
     */
    serviceAccounts?: pulumi.Input<pulumi.Input<inputs.DirectoryServicesV2ServiceAccount>[]>;
    /**
     * -(Required) URL for the Directory Service.
     */
    url?: pulumi.Input<string>;
    /**
     * -(Optional) List of allowed User Groups for the Directory Service.
     */
    whiteListedGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DirectoryServicesV2 resource.
 */
export interface DirectoryServicesV2Args {
    /**
     * -(Required) Type of Directory Service, Supported values are: "ACTIVE_DIRECTORY" (Directory Service type is Active Directory.) and "OPEN_LDAP" (Directory Service type is Open LDAP.)
     */
    directoryType: pulumi.Input<string>;
    /**
     * -(Required) Domain name for the Directory Service.
     */
    domainName: pulumi.Input<string>;
    /**
     * -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Optional) Group membership search type for the Directory Service. Supported values are: "NON_RECURSIVE" (Doesn't search recursively within groups.) and "RECURSIVE" (Searches recursively within groups.)
     */
    groupSearchType?: pulumi.Input<string>;
    /**
     * -(Required) Name for the Directory Service.
     */
    name?: pulumi.Input<string>;
    /**
     * -(Optional) Configuration for OpenLDAP Directory Service.
     */
    openLdapConfigurations?: pulumi.Input<pulumi.Input<inputs.DirectoryServicesV2OpenLdapConfiguration>[]>;
    /**
     * -(Optional) Secondary URL for the Directory Service.
     */
    secondaryUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * -(Required) Information of Service account to connect to the Directory Service.
     */
    serviceAccounts: pulumi.Input<pulumi.Input<inputs.DirectoryServicesV2ServiceAccount>[]>;
    /**
     * -(Required) URL for the Directory Service.
     */
    url: pulumi.Input<string>;
    /**
     * -(Optional) List of allowed User Groups for the Directory Service.
     */
    whiteListedGroups?: pulumi.Input<pulumi.Input<string>[]>;
}
