// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to add a User group to the system..
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const userGrp = new nutanix.UserGroups("userGrp", {directoryServiceUserGroups: [{
 *     distinguishedName: "<distinguished name for the user group>",
 * }]});
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const userGrp = new nutanix.UserGroups("userGrp", {samlUserGroups: [{
 *     idpUuid: "<idp uuid of the group>",
 *     name: "<name of saml group>",
 * }]});
 * ```
 */
export class UserGroups extends pulumi.CustomResource {
    /**
     * Get an existing UserGroups resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGroupsState, opts?: pulumi.CustomResourceOptions): UserGroups {
        return new UserGroups(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/userGroups:UserGroups';

    /**
     * Returns true if the given object is an instance of UserGroups.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGroups {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroups.__pulumiType;
    }

    public readonly categories!: pulumi.Output<outputs.UserGroupsCategory[]>;
    /**
     * - (Optional) A Directory Service organizational unit.
     */
    public readonly directoryServiceOus!: pulumi.Output<outputs.UserGroupsDirectoryServiceOus[] | undefined>;
    /**
     * - (Optional) A Directory Service user group.
     */
    public readonly directoryServiceUserGroups!: pulumi.Output<outputs.UserGroupsDirectoryServiceUserGroup[] | undefined>;
    /**
     * The userGroup kind metadata.
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly ownerReference!: pulumi.Output<{[key: string]: string}>;
    public readonly projectReference!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * - (Optional) A SAML Service user group.
     */
    public readonly samlUserGroups!: pulumi.Output<outputs.UserGroupsSamlUserGroup[] | undefined>;

    /**
     * Create a UserGroups resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserGroupsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGroupsArgs | UserGroupsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGroupsState | undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["directoryServiceOus"] = state ? state.directoryServiceOus : undefined;
            resourceInputs["directoryServiceUserGroups"] = state ? state.directoryServiceUserGroups : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["ownerReference"] = state ? state.ownerReference : undefined;
            resourceInputs["projectReference"] = state ? state.projectReference : undefined;
            resourceInputs["samlUserGroups"] = state ? state.samlUserGroups : undefined;
        } else {
            const args = argsOrState as UserGroupsArgs | undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["directoryServiceOus"] = args ? args.directoryServiceOus : undefined;
            resourceInputs["directoryServiceUserGroups"] = args ? args.directoryServiceUserGroups : undefined;
            resourceInputs["ownerReference"] = args ? args.ownerReference : undefined;
            resourceInputs["projectReference"] = args ? args.projectReference : undefined;
            resourceInputs["samlUserGroups"] = args ? args.samlUserGroups : undefined;
            resourceInputs["metadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroups.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserGroups resources.
 */
export interface UserGroupsState {
    categories?: pulumi.Input<pulumi.Input<inputs.UserGroupsCategory>[]>;
    /**
     * - (Optional) A Directory Service organizational unit.
     */
    directoryServiceOus?: pulumi.Input<pulumi.Input<inputs.UserGroupsDirectoryServiceOus>[]>;
    /**
     * - (Optional) A Directory Service user group.
     */
    directoryServiceUserGroups?: pulumi.Input<pulumi.Input<inputs.UserGroupsDirectoryServiceUserGroup>[]>;
    /**
     * The userGroup kind metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) A SAML Service user group.
     */
    samlUserGroups?: pulumi.Input<pulumi.Input<inputs.UserGroupsSamlUserGroup>[]>;
}

/**
 * The set of arguments for constructing a UserGroups resource.
 */
export interface UserGroupsArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.UserGroupsCategory>[]>;
    /**
     * - (Optional) A Directory Service organizational unit.
     */
    directoryServiceOus?: pulumi.Input<pulumi.Input<inputs.UserGroupsDirectoryServiceOus>[]>;
    /**
     * - (Optional) A Directory Service user group.
     */
    directoryServiceUserGroups?: pulumi.Input<pulumi.Input<inputs.UserGroupsDirectoryServiceUserGroup>[]>;
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) A SAML Service user group.
     */
    samlUserGroups?: pulumi.Input<pulumi.Input<inputs.UserGroupsSamlUserGroup>[]>;
}
