// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves detailed information about a specific recovery point and provides essential domain manager information stored in the backup, which is required for the restoration process.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const pe = new nutanix.Provider("pe", {
 *     username: _var.nutanix_pe_username,
 *     password: _var.nutanix_pe_password,
 *     endpoint: _var.nutanix_pe_endpoint,
 *     port: "9440",
 *     insecure: true,
 * });
 * const getRestorePoint = nutanix.getPcRestorePointV2({
 *     restorableDomainManagerExtId: data.nutanix_restorable_pcs_v2.test.restorable_pcs[0].ext_id,
 *     restoreSourceExtId: nutanix_pc_restore_source_v2["cluster-location"].id,
 *     extId: data.nutanix_pc_restore_points_v2.test.restore_points[0].ext_id,
 * });
 * ```
 */
export function getPcRestorePointV2(args: GetPcRestorePointV2Args, opts?: pulumi.InvokeOptions): Promise<GetPcRestorePointV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getPcRestorePointV2:getPcRestorePointV2", {
        "extId": args.extId,
        "restorableDomainManagerExtId": args.restorableDomainManagerExtId,
        "restoreSourceExtId": args.restoreSourceExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPcRestorePointV2.
 */
export interface GetPcRestorePointV2Args {
    /**
     * Restore point ID for the backup created in cluster/object store.
     */
    extId: string;
    /**
     * A unique identifier for the domain manager.
     */
    restorableDomainManagerExtId: string;
    /**
     * A unique identifier obtained from the restore source API that corresponds to the details provided for the restore source.
     */
    restoreSourceExtId: string;
}

/**
 * A collection of values returned by getPcRestorePointV2.
 */
export interface GetPcRestorePointV2Result {
    /**
     * The UTC date and time in ISO-8601 format when the Restore point was created.
     */
    readonly creationTime: string;
    /**
     * Domain manager (Prism Central) details.
     */
    readonly domainManagers: outputs.GetPcRestorePointV2DomainManager[];
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetPcRestorePointV2Link[];
    readonly restorableDomainManagerExtId: string;
    readonly restoreSourceExtId: string;
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
}
/**
 * Retrieves detailed information about a specific recovery point and provides essential domain manager information stored in the backup, which is required for the restoration process.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const pe = new nutanix.Provider("pe", {
 *     username: _var.nutanix_pe_username,
 *     password: _var.nutanix_pe_password,
 *     endpoint: _var.nutanix_pe_endpoint,
 *     port: "9440",
 *     insecure: true,
 * });
 * const getRestorePoint = nutanix.getPcRestorePointV2({
 *     restorableDomainManagerExtId: data.nutanix_restorable_pcs_v2.test.restorable_pcs[0].ext_id,
 *     restoreSourceExtId: nutanix_pc_restore_source_v2["cluster-location"].id,
 *     extId: data.nutanix_pc_restore_points_v2.test.restore_points[0].ext_id,
 * });
 * ```
 */
export function getPcRestorePointV2Output(args: GetPcRestorePointV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPcRestorePointV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getPcRestorePointV2:getPcRestorePointV2", {
        "extId": args.extId,
        "restorableDomainManagerExtId": args.restorableDomainManagerExtId,
        "restoreSourceExtId": args.restoreSourceExtId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPcRestorePointV2.
 */
export interface GetPcRestorePointV2OutputArgs {
    /**
     * Restore point ID for the backup created in cluster/object store.
     */
    extId: pulumi.Input<string>;
    /**
     * A unique identifier for the domain manager.
     */
    restorableDomainManagerExtId: pulumi.Input<string>;
    /**
     * A unique identifier obtained from the restore source API that corresponds to the details provided for the restore source.
     */
    restoreSourceExtId: pulumi.Input<string>;
}
