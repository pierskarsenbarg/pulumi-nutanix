// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix resource to Create Route.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // create a route
 * const route = new nutanix.RoutesV2("route", {
 *     description: "terraform example route to example create route",
 *     destination: {
 *         ipv4: {
 *             ip: {
 *                 value: "10.0.0.2",
 *             },
 *             prefixLength: 32,
 *         },
 *     },
 *     metadata: {
 *         ownerReferenceId: "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
 *         projectReferenceId: "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
 *     },
 *     nextHop: {
 *         nextHopReference: "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
 *         nextHopType: "EXTERNAL_SUBNET",
 *     },
 *     routeTableExtId: "c2c249b0-98a0-43fa-9ff6-dcde578d3936",
 *     routeType: "STATIC",
 *     vpcReference: "8a938cc5-282b-48c4-81be-de22de145d07",
 * });
 * ```
 */
export class RoutesV2 extends pulumi.CustomResource {
    /**
     * Get an existing RoutesV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutesV2State, opts?: pulumi.CustomResourceOptions): RoutesV2 {
        return new RoutesV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/routesV2:RoutesV2';

    /**
     * Returns true if the given object is an instance of RoutesV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutesV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutesV2.__pulumiType;
    }

    /**
     * BGP session description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Destination IP Subnet Configuration.
     */
    declare public readonly destination: pulumi.Output<outputs.RoutesV2Destination>;
    /**
     * Route UUID
     */
    declare public /*out*/ readonly extId: pulumi.Output<string>;
    /**
     * External routing domain associated with this route table.
     */
    declare public readonly externalRoutingDomainReference: pulumi.Output<string>;
    /**
     * Indicates whether the route is active in the forwarding plane.
     */
    declare public /*out*/ readonly isActive: pulumi.Output<boolean>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    declare public /*out*/ readonly links: pulumi.Output<outputs.RoutesV2Link[]>;
    /**
     * Metadata associated with this resource.
     */
    declare public readonly metadata: pulumi.Output<outputs.RoutesV2Metadata>;
    /**
     * Route name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Route nexthop.
     */
    declare public readonly nextHop: pulumi.Output<outputs.RoutesV2NextHop>;
    /**
     * Route priority. A higher value implies greater preference is assigned to the route.
     */
    declare public /*out*/ readonly priority: pulumi.Output<number>;
    /**
     * Route table UUID
     */
    declare public readonly routeTableExtId: pulumi.Output<string>;
    /**
     * Route table reference.
     */
    declare public readonly routeTableReference: pulumi.Output<string>;
    /**
     * Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
     */
    declare public readonly routeType: pulumi.Output<string>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    declare public /*out*/ readonly tenantId: pulumi.Output<string>;
    /**
     * VPC reference.
     */
    declare public readonly vpcReference: pulumi.Output<string>;

    /**
     * Create a RoutesV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutesV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutesV2Args | RoutesV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutesV2State | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["externalRoutingDomainReference"] = state?.externalRoutingDomainReference;
            resourceInputs["isActive"] = state?.isActive;
            resourceInputs["links"] = state?.links;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["nextHop"] = state?.nextHop;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["routeTableExtId"] = state?.routeTableExtId;
            resourceInputs["routeTableReference"] = state?.routeTableReference;
            resourceInputs["routeType"] = state?.routeType;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["vpcReference"] = state?.vpcReference;
        } else {
            const args = argsOrState as RoutesV2Args | undefined;
            if (args?.routeTableExtId === undefined && !opts.urn) {
                throw new Error("Missing required property 'routeTableExtId'");
            }
            if (args?.routeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'routeType'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["externalRoutingDomainReference"] = args?.externalRoutingDomainReference;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["nextHop"] = args?.nextHop;
            resourceInputs["routeTableExtId"] = args?.routeTableExtId;
            resourceInputs["routeTableReference"] = args?.routeTableReference;
            resourceInputs["routeType"] = args?.routeType;
            resourceInputs["vpcReference"] = args?.vpcReference;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["isActive"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutesV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoutesV2 resources.
 */
export interface RoutesV2State {
    /**
     * BGP session description.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination IP Subnet Configuration.
     */
    destination?: pulumi.Input<inputs.RoutesV2Destination>;
    /**
     * Route UUID
     */
    extId?: pulumi.Input<string>;
    /**
     * External routing domain associated with this route table.
     */
    externalRoutingDomainReference?: pulumi.Input<string>;
    /**
     * Indicates whether the route is active in the forwarding plane.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.RoutesV2Link>[]>;
    /**
     * Metadata associated with this resource.
     */
    metadata?: pulumi.Input<inputs.RoutesV2Metadata>;
    /**
     * Route name.
     */
    name?: pulumi.Input<string>;
    /**
     * Route nexthop.
     */
    nextHop?: pulumi.Input<inputs.RoutesV2NextHop>;
    /**
     * Route priority. A higher value implies greater preference is assigned to the route.
     */
    priority?: pulumi.Input<number>;
    /**
     * Route table UUID
     */
    routeTableExtId?: pulumi.Input<string>;
    /**
     * Route table reference.
     */
    routeTableReference?: pulumi.Input<string>;
    /**
     * Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
     */
    routeType?: pulumi.Input<string>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    tenantId?: pulumi.Input<string>;
    /**
     * VPC reference.
     */
    vpcReference?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoutesV2 resource.
 */
export interface RoutesV2Args {
    /**
     * BGP session description.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination IP Subnet Configuration.
     */
    destination?: pulumi.Input<inputs.RoutesV2Destination>;
    /**
     * External routing domain associated with this route table.
     */
    externalRoutingDomainReference?: pulumi.Input<string>;
    /**
     * Metadata associated with this resource.
     */
    metadata?: pulumi.Input<inputs.RoutesV2Metadata>;
    /**
     * Route name.
     */
    name?: pulumi.Input<string>;
    /**
     * Route nexthop.
     */
    nextHop?: pulumi.Input<inputs.RoutesV2NextHop>;
    /**
     * Route table UUID
     */
    routeTableExtId: pulumi.Input<string>;
    /**
     * Route table reference.
     */
    routeTableReference?: pulumi.Input<string>;
    /**
     * Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
     */
    routeType: pulumi.Input<string>;
    /**
     * VPC reference.
     */
    vpcReference?: pulumi.Input<string>;
}
