// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * External identifier of the replicated recovery point can be found in the task completion details under the key
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // replicate RP
 * const rp_replicate = new nutanix.RecoveryPointReplicateV2("rp-replicate", {
 *     clusterExtId: "1cefd0f5-6d38-4c9b-a07c-bdd2db004224",
 *     extId: "150a7ed0-9d05-4f35-a060-16dac4c835d0",
 *     pcExtId: "8a938cc5-282b-48c4-81be-de22de145d07",
 * });
 * ```
 */
export class RecoveryPointReplicateV2 extends pulumi.CustomResource {
    /**
     * Get an existing RecoveryPointReplicateV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecoveryPointReplicateV2State, opts?: pulumi.CustomResourceOptions): RecoveryPointReplicateV2 {
        return new RecoveryPointReplicateV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/recoveryPointReplicateV2:RecoveryPointReplicateV2';

    /**
     * Returns true if the given object is an instance of RecoveryPointReplicateV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecoveryPointReplicateV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecoveryPointReplicateV2.__pulumiType;
    }

    /**
     * -(Required) External identifier of the cluster.
     */
    public readonly clusterExtId!: pulumi.Output<string | undefined>;
    /**
     * -(Required) The external identifier that can be used to retrieve the recovery point using its URL.
     */
    public readonly extId!: pulumi.Output<string>;
    /**
     * -(Required) External identifier of the Prism Central.
     */
    public readonly pcExtId!: pulumi.Output<string>;
    /**
     * - External identifier of replicated recovery point.
     */
    public /*out*/ readonly replicatedRpExtId!: pulumi.Output<string>;

    /**
     * Create a RecoveryPointReplicateV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecoveryPointReplicateV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecoveryPointReplicateV2Args | RecoveryPointReplicateV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecoveryPointReplicateV2State | undefined;
            resourceInputs["clusterExtId"] = state ? state.clusterExtId : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["pcExtId"] = state ? state.pcExtId : undefined;
            resourceInputs["replicatedRpExtId"] = state ? state.replicatedRpExtId : undefined;
        } else {
            const args = argsOrState as RecoveryPointReplicateV2Args | undefined;
            if ((!args || args.extId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extId'");
            }
            if ((!args || args.pcExtId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pcExtId'");
            }
            resourceInputs["clusterExtId"] = args ? args.clusterExtId : undefined;
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["pcExtId"] = args ? args.pcExtId : undefined;
            resourceInputs["replicatedRpExtId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecoveryPointReplicateV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RecoveryPointReplicateV2 resources.
 */
export interface RecoveryPointReplicateV2State {
    /**
     * -(Required) External identifier of the cluster.
     */
    clusterExtId?: pulumi.Input<string>;
    /**
     * -(Required) The external identifier that can be used to retrieve the recovery point using its URL.
     */
    extId?: pulumi.Input<string>;
    /**
     * -(Required) External identifier of the Prism Central.
     */
    pcExtId?: pulumi.Input<string>;
    /**
     * - External identifier of replicated recovery point.
     */
    replicatedRpExtId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecoveryPointReplicateV2 resource.
 */
export interface RecoveryPointReplicateV2Args {
    /**
     * -(Required) External identifier of the cluster.
     */
    clusterExtId?: pulumi.Input<string>;
    /**
     * -(Required) The external identifier that can be used to retrieve the recovery point using its URL.
     */
    extId: pulumi.Input<string>;
    /**
     * -(Required) External identifier of the Prism Central.
     */
    pcExtId: pulumi.Input<string>;
}
