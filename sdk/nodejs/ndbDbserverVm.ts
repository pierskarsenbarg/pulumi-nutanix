// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create database server VMs based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.
 *
 * ## Example Usage
 */
export class NdbDbserverVm extends pulumi.CustomResource {
    /**
     * Get an existing NdbDbserverVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbDbserverVmState, opts?: pulumi.CustomResourceOptions): NdbDbserverVm {
        return new NdbDbserverVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbDbserverVm:NdbDbserverVm';

    /**
     * Returns true if the given object is an instance of NdbDbserverVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbDbserverVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbDbserverVm.__pulumiType;
    }

    declare public /*out*/ readonly clientId: pulumi.Output<string>;
    /**
     * Compute profile id.
     */
    declare public readonly computeProfileId: pulumi.Output<string>;
    declare public readonly credentials: pulumi.Output<outputs.NdbDbserverVmCredential[] | undefined>;
    /**
     * database type. Valid values: postgres_database
     */
    declare public readonly databaseType: pulumi.Output<string>;
    declare public /*out*/ readonly dbserverClusterId: pulumi.Output<string>;
    /**
     * - (Optional) Delete the VM and associated storage. Default value is true
     */
    declare public readonly delete: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete volume grous. Default value is true
     */
    declare public readonly deleteVgs: pulumi.Output<boolean | undefined>;
    /**
     * - (Optional) Delete the vm snapshots. Default is true
     */
    declare public readonly deleteVmSnapshots: pulumi.Output<boolean | undefined>;
    /**
     * Type a description for the database server VM.
     */
    declare public readonly description: pulumi.Output<string>;
    declare public /*out*/ readonly eraDriveId: pulumi.Output<string>;
    declare public /*out*/ readonly eraVersion: pulumi.Output<string>;
    declare public /*out*/ readonly fqdns: pulumi.Output<string>;
    declare public /*out*/ readonly ipAddresses: pulumi.Output<string[]>;
    declare public readonly latestSnapshot: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly macAddresses: pulumi.Output<string[]>;
    /**
     * maintenance window configured to enable automated patching.
     */
    declare public readonly maintenanceTasks: pulumi.Output<outputs.NdbDbserverVmMaintenanceTasks | undefined>;
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Network profile id.
     */
    declare public readonly networkProfileId: pulumi.Output<string>;
    declare public readonly nxClusterId: pulumi.Output<string>;
    /**
     * Postgres database server vm
     */
    declare public readonly postgresDatabases: pulumi.Output<outputs.NdbDbserverVmPostgresDatabase[] | undefined>;
    /**
     * List of all the properties
     */
    declare public /*out*/ readonly properties: pulumi.Output<outputs.NdbDbserverVmProperty[]>;
    /**
     * - (Optional) Unregister the database from NDB. Default value is false
     */
    declare public readonly remove: pulumi.Output<boolean | undefined>;
    /**
     * Snapshot id. If not given, it will use latest snapshot to provision db server vm.
     */
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    declare public readonly softRemove: pulumi.Output<boolean | undefined>;
    /**
     * software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
     */
    declare public readonly softwareProfileId: pulumi.Output<string | undefined>;
    /**
     * SOftware Profile Version Id.
     */
    declare public readonly softwareProfileVersionId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<outputs.NdbDbserverVmTag[]>;
    /**
     * Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
     */
    declare public readonly timeMachineId: pulumi.Output<string | undefined>;
    declare public readonly timezone: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly vmClusterName: pulumi.Output<string>;
    declare public /*out*/ readonly vmClusterUuid: pulumi.Output<string>;
    /**
     * password of the NDB drive user account.
     */
    declare public readonly vmPassword: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly vmTimezone: pulumi.Output<string>;

    /**
     * Create a NdbDbserverVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbDbserverVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbDbserverVmArgs | NdbDbserverVmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbDbserverVmState | undefined;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["computeProfileId"] = state?.computeProfileId;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["databaseType"] = state?.databaseType;
            resourceInputs["dbserverClusterId"] = state?.dbserverClusterId;
            resourceInputs["delete"] = state?.delete;
            resourceInputs["deleteVgs"] = state?.deleteVgs;
            resourceInputs["deleteVmSnapshots"] = state?.deleteVmSnapshots;
            resourceInputs["description"] = state?.description;
            resourceInputs["eraDriveId"] = state?.eraDriveId;
            resourceInputs["eraVersion"] = state?.eraVersion;
            resourceInputs["fqdns"] = state?.fqdns;
            resourceInputs["ipAddresses"] = state?.ipAddresses;
            resourceInputs["latestSnapshot"] = state?.latestSnapshot;
            resourceInputs["macAddresses"] = state?.macAddresses;
            resourceInputs["maintenanceTasks"] = state?.maintenanceTasks;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkProfileId"] = state?.networkProfileId;
            resourceInputs["nxClusterId"] = state?.nxClusterId;
            resourceInputs["postgresDatabases"] = state?.postgresDatabases;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["remove"] = state?.remove;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["softRemove"] = state?.softRemove;
            resourceInputs["softwareProfileId"] = state?.softwareProfileId;
            resourceInputs["softwareProfileVersionId"] = state?.softwareProfileVersionId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeMachineId"] = state?.timeMachineId;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["type"] = state?.type;
            resourceInputs["vmClusterName"] = state?.vmClusterName;
            resourceInputs["vmClusterUuid"] = state?.vmClusterUuid;
            resourceInputs["vmPassword"] = state?.vmPassword;
            resourceInputs["vmTimezone"] = state?.vmTimezone;
        } else {
            const args = argsOrState as NdbDbserverVmArgs | undefined;
            if (args?.computeProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'computeProfileId'");
            }
            if (args?.databaseType === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseType'");
            }
            if (args?.networkProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkProfileId'");
            }
            if (args?.nxClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'nxClusterId'");
            }
            resourceInputs["computeProfileId"] = args?.computeProfileId;
            resourceInputs["credentials"] = args?.credentials;
            resourceInputs["databaseType"] = args?.databaseType;
            resourceInputs["delete"] = args?.delete;
            resourceInputs["deleteVgs"] = args?.deleteVgs;
            resourceInputs["deleteVmSnapshots"] = args?.deleteVmSnapshots;
            resourceInputs["description"] = args?.description;
            resourceInputs["latestSnapshot"] = args?.latestSnapshot;
            resourceInputs["maintenanceTasks"] = args?.maintenanceTasks;
            resourceInputs["networkProfileId"] = args?.networkProfileId;
            resourceInputs["nxClusterId"] = args?.nxClusterId;
            resourceInputs["postgresDatabases"] = args?.postgresDatabases;
            resourceInputs["remove"] = args?.remove;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["softRemove"] = args?.softRemove;
            resourceInputs["softwareProfileId"] = args?.softwareProfileId;
            resourceInputs["softwareProfileVersionId"] = args?.softwareProfileVersionId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeMachineId"] = args?.timeMachineId;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["vmPassword"] = args?.vmPassword ? pulumi.secret(args.vmPassword) : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["dbserverClusterId"] = undefined /*out*/;
            resourceInputs["eraDriveId"] = undefined /*out*/;
            resourceInputs["eraVersion"] = undefined /*out*/;
            resourceInputs["fqdns"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["macAddresses"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["vmClusterName"] = undefined /*out*/;
            resourceInputs["vmClusterUuid"] = undefined /*out*/;
            resourceInputs["vmTimezone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["vmPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NdbDbserverVm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbDbserverVm resources.
 */
export interface NdbDbserverVmState {
    clientId?: pulumi.Input<string>;
    /**
     * Compute profile id.
     */
    computeProfileId?: pulumi.Input<string>;
    credentials?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmCredential>[]>;
    /**
     * database type. Valid values: postgres_database
     */
    databaseType?: pulumi.Input<string>;
    dbserverClusterId?: pulumi.Input<string>;
    /**
     * - (Optional) Delete the VM and associated storage. Default value is true
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete volume grous. Default value is true
     */
    deleteVgs?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the vm snapshots. Default is true
     */
    deleteVmSnapshots?: pulumi.Input<boolean>;
    /**
     * Type a description for the database server VM.
     */
    description?: pulumi.Input<string>;
    eraDriveId?: pulumi.Input<string>;
    eraVersion?: pulumi.Input<string>;
    fqdns?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    latestSnapshot?: pulumi.Input<boolean>;
    macAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * maintenance window configured to enable automated patching.
     */
    maintenanceTasks?: pulumi.Input<inputs.NdbDbserverVmMaintenanceTasks>;
    name?: pulumi.Input<string>;
    /**
     * Network profile id.
     */
    networkProfileId?: pulumi.Input<string>;
    nxClusterId?: pulumi.Input<string>;
    /**
     * Postgres database server vm
     */
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmPostgresDatabase>[]>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmProperty>[]>;
    /**
     * - (Optional) Unregister the database from NDB. Default value is false
     */
    remove?: pulumi.Input<boolean>;
    /**
     * Snapshot id. If not given, it will use latest snapshot to provision db server vm.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
     */
    softwareProfileId?: pulumi.Input<string>;
    /**
     * SOftware Profile Version Id.
     */
    softwareProfileVersionId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmTag>[]>;
    /**
     * Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
     */
    timeMachineId?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vmClusterName?: pulumi.Input<string>;
    vmClusterUuid?: pulumi.Input<string>;
    /**
     * password of the NDB drive user account.
     */
    vmPassword?: pulumi.Input<string>;
    vmTimezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbDbserverVm resource.
 */
export interface NdbDbserverVmArgs {
    /**
     * Compute profile id.
     */
    computeProfileId: pulumi.Input<string>;
    credentials?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmCredential>[]>;
    /**
     * database type. Valid values: postgres_database
     */
    databaseType: pulumi.Input<string>;
    /**
     * - (Optional) Delete the VM and associated storage. Default value is true
     */
    delete?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete volume grous. Default value is true
     */
    deleteVgs?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the vm snapshots. Default is true
     */
    deleteVmSnapshots?: pulumi.Input<boolean>;
    /**
     * Type a description for the database server VM.
     */
    description?: pulumi.Input<string>;
    latestSnapshot?: pulumi.Input<boolean>;
    /**
     * maintenance window configured to enable automated patching.
     */
    maintenanceTasks?: pulumi.Input<inputs.NdbDbserverVmMaintenanceTasks>;
    /**
     * Network profile id.
     */
    networkProfileId: pulumi.Input<string>;
    nxClusterId: pulumi.Input<string>;
    /**
     * Postgres database server vm
     */
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmPostgresDatabase>[]>;
    /**
     * - (Optional) Unregister the database from NDB. Default value is false
     */
    remove?: pulumi.Input<boolean>;
    /**
     * Snapshot id. If not given, it will use latest snapshot to provision db server vm.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * - (Optional) Soft remove. Default will be false
     */
    softRemove?: pulumi.Input<boolean>;
    /**
     * software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with timeMachineId .
     */
    softwareProfileId?: pulumi.Input<string>;
    /**
     * SOftware Profile Version Id.
     */
    softwareProfileVersionId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmTag>[]>;
    /**
     * Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.
     */
    timeMachineId?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    /**
     * password of the NDB drive user account.
     */
    vmPassword?: pulumi.Input<string>;
}
