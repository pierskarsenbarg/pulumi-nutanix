// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmNetworkDeviceAssignIpV2 extends pulumi.CustomResource {
    /**
     * Get an existing VmNetworkDeviceAssignIpV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmNetworkDeviceAssignIpV2State, opts?: pulumi.CustomResourceOptions): VmNetworkDeviceAssignIpV2 {
        return new VmNetworkDeviceAssignIpV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/vmNetworkDeviceAssignIpV2:VmNetworkDeviceAssignIpV2';

    /**
     * Returns true if the given object is an instance of VmNetworkDeviceAssignIpV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmNetworkDeviceAssignIpV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmNetworkDeviceAssignIpV2.__pulumiType;
    }

    declare public readonly extId: pulumi.Output<string>;
    declare public readonly ipAddresses: pulumi.Output<outputs.VmNetworkDeviceAssignIpV2IpAddress[]>;
    declare public readonly vmExtId: pulumi.Output<string>;

    /**
     * Create a VmNetworkDeviceAssignIpV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmNetworkDeviceAssignIpV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmNetworkDeviceAssignIpV2Args | VmNetworkDeviceAssignIpV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmNetworkDeviceAssignIpV2State | undefined;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["ipAddresses"] = state?.ipAddresses;
            resourceInputs["vmExtId"] = state?.vmExtId;
        } else {
            const args = argsOrState as VmNetworkDeviceAssignIpV2Args | undefined;
            if (args?.extId === undefined && !opts.urn) {
                throw new Error("Missing required property 'extId'");
            }
            if (args?.vmExtId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmExtId'");
            }
            resourceInputs["extId"] = args?.extId;
            resourceInputs["ipAddresses"] = args?.ipAddresses;
            resourceInputs["vmExtId"] = args?.vmExtId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmNetworkDeviceAssignIpV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmNetworkDeviceAssignIpV2 resources.
 */
export interface VmNetworkDeviceAssignIpV2State {
    extId?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VmNetworkDeviceAssignIpV2IpAddress>[]>;
    vmExtId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmNetworkDeviceAssignIpV2 resource.
 */
export interface VmNetworkDeviceAssignIpV2Args {
    extId: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VmNetworkDeviceAssignIpV2IpAddress>[]>;
    vmExtId: pulumi.Input<string>;
}
