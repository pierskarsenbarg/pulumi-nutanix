// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves the restore source from the PE cache store and returns the restore source configuration and external identifier to the user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * //defining nutanix configuration for PE
 * const pe = new nutanix.Provider("pe", {
 *     username: _var.nutanix_pe_username,
 *     password: _var.nutanix_pe_password,
 *     endpoint: _var.nutanix_pe_endpoint,
 *     insecure: true,
 *     port: "9440",
 * });
 * const restore_source = nutanix.getPcRestoreSourceV2({
 *     extId: "323860ca-bd10-411e-9fe0-1430b62eaf45",
 * });
 * ```
 */
export function getPcRestoreSourceV2(args: GetPcRestoreSourceV2Args, opts?: pulumi.InvokeOptions): Promise<GetPcRestoreSourceV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getPcRestoreSourceV2:getPcRestoreSourceV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPcRestoreSourceV2.
 */
export interface GetPcRestoreSourceV2Args {
    /**
     * -(Required) A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId: string;
}

/**
 * A collection of values returned by getPcRestoreSourceV2.
 */
export interface GetPcRestoreSourceV2Result {
    /**
     * - Cluster UUID of a remote cluster.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetPcRestoreSourceV2Link[];
    /**
     * - Location of the backup target. For example, a cluster or an object store endpoint, such as AWS s3.
     */
    readonly locations: outputs.GetPcRestoreSourceV2Location[];
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
}
/**
 * Retrieves the restore source from the PE cache store and returns the restore source configuration and external identifier to the user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * //defining nutanix configuration for PE
 * const pe = new nutanix.Provider("pe", {
 *     username: _var.nutanix_pe_username,
 *     password: _var.nutanix_pe_password,
 *     endpoint: _var.nutanix_pe_endpoint,
 *     insecure: true,
 *     port: "9440",
 * });
 * const restore_source = nutanix.getPcRestoreSourceV2({
 *     extId: "323860ca-bd10-411e-9fe0-1430b62eaf45",
 * });
 * ```
 */
export function getPcRestoreSourceV2Output(args: GetPcRestoreSourceV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPcRestoreSourceV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getPcRestoreSourceV2:getPcRestoreSourceV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPcRestoreSourceV2.
 */
export interface GetPcRestoreSourceV2OutputArgs {
    /**
     * -(Required) A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId: pulumi.Input<string>;
}
