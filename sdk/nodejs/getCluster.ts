// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Describes Clusters
 */
export function getCluster(args?: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getCluster:getCluster", {
        "categories": args.categories,
        "clusterId": args.clusterId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    categories?: inputs.GetClusterCategory[];
    clusterId?: string;
    name?: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly analysisVmEfficiencyMap: {[key: string]: string};
    /**
     * The API version.
     * * `description`: - A description for image.
     * * `metadata`: - The image kind metadata.
     * * `state`: - The state of the cluster entity.
     * * `gpuDriverVersion`: - GPU driver version.
     * * `clientAuth`: - Client authentication config.
     * * `authorizedPiblicKeyList`: - List of valid ssh keys for the cluster.
     * * `softwareMapNcc`: - Map of software on the cluster with software type as the key.
     * * `softwareMapNos`: - Map of software on the cluster with software type as the key.
     * * `encryptionStatus`: - Cluster encryption status.
     * * `sslKeyType`: - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.
     * * `sslKeySigningInfo`: - Customer information used in Certificate Signing Request for creating digital certificates.
     * * `sslKeyExpireDatetime`: - UTC date and time in RFC-3339 format when the key expires
     * * `serviceList`: - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.
     * * `supportedInformationVerbosity`: - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)
     * * `certificationSigningInfo`: - Customer information used in Certificate Signing Request for creating digital certificates.
     * * `operationMode`: - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.
     * * `caCertificateList`: - Zone name used in value of TZ environment variable.
     * * `enabledFeatureList`: - Array of enabled features.
     * * `isAvailable`: - Indicates if cluster is available to contact. (Readonly)
     * * `build`: - Cluster build details.
     * * `timezone`: - Zone name used in value of TZ environment variable.
     * * `clusterArch`: - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)
     * * `managementServerList`: - List of cluster management servers. (Readonly)
     * * `masqueradingPort`: - Port used together with masqueradingIp to connect to the cluster.
     * * `masqueradingIp`: - The cluster NAT'd or proxy IP which maps to the cluster local IP.
     * * `externalIp`: - The local IP of cluster visible externally.
     * * `httpProxyList`: - List of proxies to connect to the service centers.
     * * `smtpServerType`: - SMTP Server type.
     * * `smtpServerEmailAddress`: - SMTP Server Email Address.
     * * `smtpServerCredentials`: - SMTP Server Credentials.
     * * `smtpServerProxyTypeList`: - SMTP Server Proxy Type List
     * * `smtpServerAddress`: - SMTP Server Address.
     * * `ntpServerIpList`: - The list of IP addresses or FQDNs of the NTP servers.
     * * `externalSubnet`: - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)
     * * `externalDataServicesIp`: - The cluster IP address that provides external entities access to various cluster data services.
     * * `internalSubnet`: - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
     * * `domainServerNameserver`: -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.
     * * `domainServerName`: - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.
     * * `domainServerCredentials`: - Cluster domain credentials.
     * * `nfsSubnetWhitelist`: - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
     * * `nameServerIpList`: - The list of IP addresses of the name servers.
     * * `httpProxyWhitelist`: - HTTP proxy whitelist.
     * * `analysisVmEfficiencyMap`: - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)
     */
    readonly apiVersion: string;
    readonly authorizedPublicKeyLists: outputs.GetClusterAuthorizedPublicKeyList[];
    readonly build: {[key: string]: string};
    readonly caCertificateLists: outputs.GetClusterCaCertificateList[];
    readonly categories: outputs.GetClusterCategory[];
    readonly certificationSigningInfo: {[key: string]: string};
    readonly clientAuth: {[key: string]: string};
    readonly clusterArch: string;
    readonly clusterId: string;
    readonly domainServerCredentials: {[key: string]: string};
    readonly domainServerName: string;
    readonly domainServerNameserver: string;
    readonly enabledFeatureLists: string[];
    readonly encryptionStatus: string;
    readonly externalDataServicesIp: string;
    readonly externalIp: string;
    readonly externalSubnet: string;
    readonly gpuDriverVersion: string;
    readonly httpProxyLists: outputs.GetClusterHttpProxyList[];
    readonly httpProxyWhitelists: outputs.GetClusterHttpProxyWhitelist[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly internalSubnet: string;
    readonly isAvailable: boolean;
    readonly managementServerLists: outputs.GetClusterManagementServerList[];
    readonly masqueradingIp: string;
    readonly masqueradingPort: number;
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly nameServerIpLists: string[];
    readonly nfsSubnetWhitelists: string[];
    readonly nodes: outputs.GetClusterNode[];
    readonly ntpServerIpLists: string[];
    readonly operationMode: string;
    readonly ownerReference: {[key: string]: string};
    readonly projectReference: {[key: string]: string};
    readonly serviceLists: string[];
    readonly smtpServerAddress: {[key: string]: string};
    readonly smtpServerCredentials: {[key: string]: string};
    readonly smtpServerEmailAddress: string;
    readonly smtpServerProxyTypeLists: string[];
    readonly smtpServerType: string;
    readonly softwareMapNcc: {[key: string]: any};
    readonly softwareMapNos: {[key: string]: any};
    readonly sslKeyExpireDatetime: string;
    readonly sslKeyName: string;
    readonly sslKeySigningInfo: {[key: string]: string};
    readonly sslKeyType: string;
    readonly state: string;
    readonly supportedInformationVerbosity: string;
    readonly timezone: string;
}

export function getClusterOutput(args?: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply(a => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetClusterCategoryArgs>[]>;
    clusterId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
