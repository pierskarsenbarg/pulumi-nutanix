// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Fetches the iSCSI client details identified by {extId}.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = nutanix.getVolumeIscsiClientV2({
 *     extId: "be0e4630-23da-4b9c-a76b-f24fd64b46b6",
 * });
 * ```
 *
 * ## Argument Reference
 *
 * The following arguments are supported:
 *
 * * `extId`: -(Required) A query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource.
 */
export function getVolumeIscsiClientV2(args: GetVolumeIscsiClientV2Args, opts?: pulumi.InvokeOptions): Promise<GetVolumeIscsiClientV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getVolumeIscsiClientV2:getVolumeIscsiClientV2", {
        "extId": args.extId,
        "iscsiInitiatorNetworkIds": args.iscsiInitiatorNetworkIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumeIscsiClientV2.
 */
export interface GetVolumeIscsiClientV2Args {
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId: string;
    /**
     * - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
     */
    iscsiInitiatorNetworkIds?: inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkId[];
}

/**
 * A collection of values returned by getVolumeIscsiClientV2.
 */
export interface GetVolumeIscsiClientV2Result {
    readonly attachedTargets: outputs.GetVolumeIscsiClientV2AttachedTarget[];
    /**
     * -(Optional) The site where the Volume Group attach operation should be processed. This is an optional field. This field may only be set if Metro DR has been configured for this Volume Group. Valid values are SECONDARY, PRIMARY.
     */
    readonly attachmentSite: string;
    readonly clusterReference: string;
    /**
     * -(Optional) (Optional) The authentication type enabled for the Volume Group. This is an optional field. If omitted, authentication is not configured for the Volume Group. If this is set to CHAP, the target/client secret must be provided. Valid values are CHAP, NONE
     */
    readonly enabledAuthentications: string;
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * -iSCSI initiator name. During the attach operation, exactly one of iscsiInitiatorName and iscsiInitiatorNetworkId must be specified. This field is immutable.
     */
    readonly iscsiInitiatorName: string;
    /**
     * - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
     */
    readonly iscsiInitiatorNetworkIds?: outputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkId[];
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetVolumeIscsiClientV2Link[];
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
}
/**
 * Fetches the iSCSI client details identified by {extId}.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const example = nutanix.getVolumeIscsiClientV2({
 *     extId: "be0e4630-23da-4b9c-a76b-f24fd64b46b6",
 * });
 * ```
 *
 * ## Argument Reference
 *
 * The following arguments are supported:
 *
 * * `extId`: -(Required) A query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource.
 */
export function getVolumeIscsiClientV2Output(args: GetVolumeIscsiClientV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVolumeIscsiClientV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getVolumeIscsiClientV2:getVolumeIscsiClientV2", {
        "extId": args.extId,
        "iscsiInitiatorNetworkIds": args.iscsiInitiatorNetworkIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumeIscsiClientV2.
 */
export interface GetVolumeIscsiClientV2OutputArgs {
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId: pulumi.Input<string>;
    /**
     * - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
     */
    iscsiInitiatorNetworkIds?: pulumi.Input<pulumi.Input<inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdArgs>[]>;
}
