// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to Creates a new Volume Disk.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const exampleVolumeGroupV2 = new nutanix.VolumeGroupV2("exampleVolumeGroupV2", {
 *     description: "Test Volume group with min spec and no Auth",
 *     shouldLoadBalanceVmAttachments: false,
 *     sharingStatus: "SHARED",
 *     targetName: "volumegroup-test-0",
 *     createdBy: "Test",
 *     clusterReference: "<Cluster uuid>",
 *     iscsiFeatures: [{
 *         enabledAuthentications: "CHAP",
 *         targetSecret: "1234567891011",
 *     }],
 *     storageFeatures: [{
 *         flashModes: [{
 *             isEnabled: true,
 *         }],
 *     }],
 *     usageType: "USER",
 *     isHidden: false,
 * });
 * // create new volume group disk  and attached it to the previous volume group
 * const exampleVolumeGroupDiskV2 = new nutanix.VolumeGroupDiskV2("exampleVolumeGroupDiskV2", {
 *     volumeGroupExtId: resource.nutanix_volume_group_v2.example.id,
 *     index: 1,
 *     description: "create volume disk test",
 *     diskSizeBytes: 5368709120,
 *     diskDataSourceReferences: [{
 *         name: "disk1",
 *         extId: _var.disk_data_source_ref_ext_id,
 *         entityType: "STORAGE_CONTAINER",
 *         uris: [
 *             "uri1",
 *             "uri2",
 *         ],
 *     }],
 *     diskStorageFeatures: [{
 *         flashModes: [{
 *             isEnabled: false,
 *         }],
 *     }],
 * });
 * ```
 */
export class VolumeGroupDiskV2 extends pulumi.CustomResource {
    /**
     * Get an existing VolumeGroupDiskV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeGroupDiskV2State, opts?: pulumi.CustomResourceOptions): VolumeGroupDiskV2 {
        return new VolumeGroupDiskV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/volumeGroupDiskV2:VolumeGroupDiskV2';

    /**
     * Returns true if the given object is an instance of VolumeGroupDiskV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeGroupDiskV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeGroupDiskV2.__pulumiType;
    }

    /**
     * - Volume Disk description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * -(Required) Disk Data Source Reference.
     */
    public readonly diskDataSourceReferences!: pulumi.Output<outputs.VolumeGroupDiskV2DiskDataSourceReference[]>;
    /**
     * - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
     */
    public readonly diskSizeBytes!: pulumi.Output<number>;
    /**
     * - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
     */
    public readonly diskStorageFeatures!: pulumi.Output<outputs.VolumeGroupDiskV2DiskStorageFeature[] | undefined>;
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    public /*out*/ readonly extId!: pulumi.Output<string>;
    /**
     * - Index of the disk in a Volume Group. This field is optional and immutable.
     */
    public readonly index!: pulumi.Output<number>;
    /**
     * The external identifier of the volume group.
     */
    public readonly volumeGroupExtId!: pulumi.Output<string>;

    /**
     * Create a VolumeGroupDiskV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeGroupDiskV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeGroupDiskV2Args | VolumeGroupDiskV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeGroupDiskV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskDataSourceReferences"] = state ? state.diskDataSourceReferences : undefined;
            resourceInputs["diskSizeBytes"] = state ? state.diskSizeBytes : undefined;
            resourceInputs["diskStorageFeatures"] = state ? state.diskStorageFeatures : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["volumeGroupExtId"] = state ? state.volumeGroupExtId : undefined;
        } else {
            const args = argsOrState as VolumeGroupDiskV2Args | undefined;
            if ((!args || args.diskDataSourceReferences === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskDataSourceReferences'");
            }
            if ((!args || args.diskSizeBytes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSizeBytes'");
            }
            if ((!args || args.volumeGroupExtId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeGroupExtId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskDataSourceReferences"] = args ? args.diskDataSourceReferences : undefined;
            resourceInputs["diskSizeBytes"] = args ? args.diskSizeBytes : undefined;
            resourceInputs["diskStorageFeatures"] = args ? args.diskStorageFeatures : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["volumeGroupExtId"] = args ? args.volumeGroupExtId : undefined;
            resourceInputs["extId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeGroupDiskV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeGroupDiskV2 resources.
 */
export interface VolumeGroupDiskV2State {
    /**
     * - Volume Disk description.
     */
    description?: pulumi.Input<string>;
    /**
     * -(Required) Disk Data Source Reference.
     */
    diskDataSourceReferences?: pulumi.Input<pulumi.Input<inputs.VolumeGroupDiskV2DiskDataSourceReference>[]>;
    /**
     * - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
     */
    diskSizeBytes?: pulumi.Input<number>;
    /**
     * - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
     */
    diskStorageFeatures?: pulumi.Input<pulumi.Input<inputs.VolumeGroupDiskV2DiskStorageFeature>[]>;
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId?: pulumi.Input<string>;
    /**
     * - Index of the disk in a Volume Group. This field is optional and immutable.
     */
    index?: pulumi.Input<number>;
    /**
     * The external identifier of the volume group.
     */
    volumeGroupExtId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeGroupDiskV2 resource.
 */
export interface VolumeGroupDiskV2Args {
    /**
     * - Volume Disk description.
     */
    description?: pulumi.Input<string>;
    /**
     * -(Required) Disk Data Source Reference.
     */
    diskDataSourceReferences: pulumi.Input<pulumi.Input<inputs.VolumeGroupDiskV2DiskDataSourceReference>[]>;
    /**
     * - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
     */
    diskSizeBytes: pulumi.Input<number>;
    /**
     * - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
     */
    diskStorageFeatures?: pulumi.Input<pulumi.Input<inputs.VolumeGroupDiskV2DiskStorageFeature>[]>;
    /**
     * - Index of the disk in a Volume Group. This field is optional and immutable.
     */
    index?: pulumi.Input<number>;
    /**
     * The external identifier of the volume group.
     */
    volumeGroupExtId: pulumi.Input<string>;
}
