// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NdbLinkedDatabases extends pulumi.CustomResource {
    /**
     * Get an existing NdbLinkedDatabases resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbLinkedDatabasesState, opts?: pulumi.CustomResourceOptions): NdbLinkedDatabases {
        return new NdbLinkedDatabases(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbLinkedDatabases:NdbLinkedDatabases';

    /**
     * Returns true if the given object is an instance of NdbLinkedDatabases.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbLinkedDatabases {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbLinkedDatabases.__pulumiType;
    }

    declare public readonly databaseId: pulumi.Output<string>;
    declare public readonly databaseName: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly databaseStatus: pulumi.Output<string>;
    declare public /*out*/ readonly dateCreated: pulumi.Output<string>;
    declare public /*out*/ readonly dateModified: pulumi.Output<string>;
    declare public /*out*/ readonly description: pulumi.Output<string>;
    declare public /*out*/ readonly infos: pulumi.Output<outputs.NdbLinkedDatabasesInfo[]>;
    declare public /*out*/ readonly metric: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly parentDatabaseId: pulumi.Output<string>;
    declare public /*out*/ readonly parentLinkedDatabaseId: pulumi.Output<string>;
    declare public /*out*/ readonly snapshotId: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public /*out*/ readonly timezone: pulumi.Output<string>;

    /**
     * Create a NdbLinkedDatabases resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbLinkedDatabasesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbLinkedDatabasesArgs | NdbLinkedDatabasesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbLinkedDatabasesState | undefined;
            resourceInputs["databaseId"] = state?.databaseId;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["databaseStatus"] = state?.databaseStatus;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateModified"] = state?.dateModified;
            resourceInputs["description"] = state?.description;
            resourceInputs["infos"] = state?.infos;
            resourceInputs["metric"] = state?.metric;
            resourceInputs["name"] = state?.name;
            resourceInputs["parentDatabaseId"] = state?.parentDatabaseId;
            resourceInputs["parentLinkedDatabaseId"] = state?.parentLinkedDatabaseId;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["status"] = state?.status;
            resourceInputs["timezone"] = state?.timezone;
        } else {
            const args = argsOrState as NdbLinkedDatabasesArgs | undefined;
            if (args?.databaseId === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            resourceInputs["databaseId"] = args?.databaseId;
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["databaseStatus"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["parentLinkedDatabaseId"] = undefined /*out*/;
            resourceInputs["snapshotId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timezone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbLinkedDatabases.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbLinkedDatabases resources.
 */
export interface NdbLinkedDatabasesState {
    databaseId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    infos?: pulumi.Input<pulumi.Input<inputs.NdbLinkedDatabasesInfo>[]>;
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    parentDatabaseId?: pulumi.Input<string>;
    parentLinkedDatabaseId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbLinkedDatabases resource.
 */
export interface NdbLinkedDatabasesArgs {
    databaseId: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
}
