// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Nutanix Project resource to Create a Project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const subnet = new nutanix.Subnet("subnet", {
 *     clusterUuid: "<YOUR_CLUSTER_ID>",
 *     description: "Description of my unit test VLAN",
 *     vlanId: 31,
 *     subnetType: "VLAN",
 *     subnetIp: "10.250.140.0",
 *     defaultGatewayIp: "10.250.140.1",
 *     prefixLength: 24,
 *     dhcpOptions: {
 *         boot_file_name: "bootfile",
 *         domain_name: "nutanix",
 *         tftp_server_name: "10.250.140.200",
 *     },
 *     dhcpDomainNameServerLists: [
 *         "8.8.8.8",
 *         "4.2.2.2",
 *     ],
 *     dhcpDomainSearchLists: [
 *         "terraform.nutanix.com",
 *         "terraform.unit.test.com",
 *     ],
 * });
 * const projectTestProject = new nutanix.Project("projectTestProject", {
 *     description: "This is my project",
 *     categories: [{
 *         name: "Environment",
 *         value: "Staging",
 *     }],
 *     resourceDomain: {
 *         resources: [{
 *             limit: 4,
 *             resourceType: "STORAGE",
 *         }],
 *     },
 *     defaultSubnetReference: {
 *         uuid: subnet.metadata.uuid,
 *     },
 *     apiVersion: "3.1",
 * });
 * // set use_project_internal flag to create project with acps
 * const projectTestIndex_projectProject = new nutanix.Project("projectTestIndex/projectProject", {
 *     description: "This is my project",
 *     clusterUuid: "<YOUR_CLUSTER_ID>",
 *     useProjectInternal: true,
 *     defaultSubnetReference: {
 *         uuid: subnet.metadata.uuid,
 *     },
 *     userReferenceLists: [{
 *         name: "{{user_name}}",
 *         kind: "user",
 *         uuid: "{{user_uuid}}",
 *     }],
 *     subnetReferenceLists: [{
 *         uuid: resource.nutanix_subnet.sub.id,
 *     }],
 *     acps: [{
 *         name: "{{acp_name}}",
 *         roleReference: {
 *             kind: "role",
 *             uuid: "{{role_uuid}}",
 *             name: "Developer",
 *         },
 *         userReferenceLists: [{
 *             name: "{{user_name}}",
 *             kind: "user",
 *             uuid: "{{user_uuid}}",
 *         }],
 *         description: "{{description}}",
 *     }],
 *     apiVersion: "3.1",
 * });
 * //# Create a project with user which not added in the PC
 * const projectTestNutanixIndex_projectProject = new nutanix.Project("projectTestNutanixIndex/projectProject", {
 *     description: "This is my project",
 *     clusterUuid: "<YOUR_CLUSTER_ID>",
 *     useProjectInternal: true,
 *     defaultSubnetReference: {
 *         uuid: subnet.metadata.uuid,
 *     },
 *     userReferenceLists: [{
 *         name: "{{user_name}}",
 *         kind: "user",
 *         uuid: "{{user_uuid}}",
 *     }],
 *     subnetReferenceLists: [{
 *         uuid: resource.nutanix_subnet.sub.id,
 *     }],
 *     acps: [{
 *         name: "{{acp_name}}",
 *         roleReference: {
 *             kind: "role",
 *             uuid: "{{role_uuid}}",
 *             name: "Developer",
 *         },
 *         userReferenceLists: [{
 *             name: "{{user_name}}",
 *             kind: "user",
 *             uuid: "{{user_uuid}}",
 *         }],
 *         description: "{{description}}",
 *     }],
 *     userLists: [{
 *         metadata: {
 *             kind: "user",
 *             uuid: "{{ UUID of the USER }}",
 *         },
 *         directoryServiceUser: {
 *             userPrincipalName: "{{ Name of user }}",
 *             directoryServiceReference: {
 *                 uuid: "{{ DIRECTORY SERVICE UUID }}",
 *                 kind: "directory_service",
 *             },
 *         },
 *     }],
 *     apiVersion: "3.1",
 * });
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    declare public readonly accountReferenceLists: pulumi.Output<outputs.ProjectAccountReferenceList[]>;
    declare public readonly acps: pulumi.Output<outputs.ProjectAcp[] | undefined>;
    declare public readonly apiVersion: pulumi.Output<string>;
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    declare public readonly categories: pulumi.Output<outputs.ProjectCategory[]>;
    declare public readonly clusterReferenceLists: pulumi.Output<outputs.ProjectClusterReferenceList[]>;
    /**
     * The UUID of cluster. (Required when using projectInternal flag).
     */
    declare public readonly clusterUuid: pulumi.Output<string | undefined>;
    declare public readonly defaultEnvironmentReference: pulumi.Output<outputs.ProjectDefaultEnvironmentReference>;
    declare public readonly defaultSubnetReference: pulumi.Output<outputs.ProjectDefaultSubnetReference>;
    /**
     * A description for project.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * flag to allow collaboration of projects. (Use with projectInternal flag)
     */
    declare public readonly enableCollab: pulumi.Output<boolean | undefined>;
    declare public readonly environmentReferenceLists: pulumi.Output<outputs.ProjectEnvironmentReferenceList[]>;
    declare public readonly externalNetworkLists: pulumi.Output<outputs.ProjectExternalNetworkList[]>;
    declare public readonly externalUserGroupReferenceLists: pulumi.Output<outputs.ProjectExternalUserGroupReferenceList[]>;
    declare public /*out*/ readonly isDefault: pulumi.Output<boolean>;
    declare public /*out*/ readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * The name for the project.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly ownerReference: pulumi.Output<{[key: string]: string}>;
    declare public readonly projectReference: pulumi.Output<{[key: string]: string}>;
    declare public readonly resourceDomain: pulumi.Output<outputs.ProjectResourceDomain | undefined>;
    declare public /*out*/ readonly state: pulumi.Output<string>;
    declare public readonly subnetReferenceLists: pulumi.Output<outputs.ProjectSubnetReferenceList[]>;
    declare public readonly tunnelReferenceLists: pulumi.Output<outputs.ProjectTunnelReferenceList[]>;
    /**
     * flag to use project internal for user role mapping
     */
    declare public readonly useProjectInternal: pulumi.Output<boolean | undefined>;
    declare public readonly userGroupLists: pulumi.Output<outputs.ProjectUserGroupList[] | undefined>;
    declare public readonly userLists: pulumi.Output<outputs.ProjectUserList[] | undefined>;
    /**
     * List of Reference of users.
     */
    declare public readonly userReferenceLists: pulumi.Output<outputs.ProjectUserReferenceList[]>;
    declare public readonly vpcReferenceLists: pulumi.Output<outputs.ProjectVpcReferenceList[]>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["accountReferenceLists"] = state?.accountReferenceLists;
            resourceInputs["acps"] = state?.acps;
            resourceInputs["apiVersion"] = state?.apiVersion;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["clusterReferenceLists"] = state?.clusterReferenceLists;
            resourceInputs["clusterUuid"] = state?.clusterUuid;
            resourceInputs["defaultEnvironmentReference"] = state?.defaultEnvironmentReference;
            resourceInputs["defaultSubnetReference"] = state?.defaultSubnetReference;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableCollab"] = state?.enableCollab;
            resourceInputs["environmentReferenceLists"] = state?.environmentReferenceLists;
            resourceInputs["externalNetworkLists"] = state?.externalNetworkLists;
            resourceInputs["externalUserGroupReferenceLists"] = state?.externalUserGroupReferenceLists;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["ownerReference"] = state?.ownerReference;
            resourceInputs["projectReference"] = state?.projectReference;
            resourceInputs["resourceDomain"] = state?.resourceDomain;
            resourceInputs["state"] = state?.state;
            resourceInputs["subnetReferenceLists"] = state?.subnetReferenceLists;
            resourceInputs["tunnelReferenceLists"] = state?.tunnelReferenceLists;
            resourceInputs["useProjectInternal"] = state?.useProjectInternal;
            resourceInputs["userGroupLists"] = state?.userGroupLists;
            resourceInputs["userLists"] = state?.userLists;
            resourceInputs["userReferenceLists"] = state?.userReferenceLists;
            resourceInputs["vpcReferenceLists"] = state?.vpcReferenceLists;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if (args?.defaultSubnetReference === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultSubnetReference'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["accountReferenceLists"] = args?.accountReferenceLists;
            resourceInputs["acps"] = args?.acps;
            resourceInputs["apiVersion"] = args?.apiVersion;
            resourceInputs["categories"] = args?.categories;
            resourceInputs["clusterReferenceLists"] = args?.clusterReferenceLists;
            resourceInputs["clusterUuid"] = args?.clusterUuid;
            resourceInputs["defaultEnvironmentReference"] = args?.defaultEnvironmentReference;
            resourceInputs["defaultSubnetReference"] = args?.defaultSubnetReference;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableCollab"] = args?.enableCollab;
            resourceInputs["environmentReferenceLists"] = args?.environmentReferenceLists;
            resourceInputs["externalNetworkLists"] = args?.externalNetworkLists;
            resourceInputs["externalUserGroupReferenceLists"] = args?.externalUserGroupReferenceLists;
            resourceInputs["name"] = args?.name;
            resourceInputs["ownerReference"] = args?.ownerReference;
            resourceInputs["projectReference"] = args?.projectReference;
            resourceInputs["resourceDomain"] = args?.resourceDomain;
            resourceInputs["subnetReferenceLists"] = args?.subnetReferenceLists;
            resourceInputs["tunnelReferenceLists"] = args?.tunnelReferenceLists;
            resourceInputs["useProjectInternal"] = args?.useProjectInternal;
            resourceInputs["userGroupLists"] = args?.userGroupLists;
            resourceInputs["userLists"] = args?.userLists;
            resourceInputs["userReferenceLists"] = args?.userReferenceLists;
            resourceInputs["vpcReferenceLists"] = args?.vpcReferenceLists;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    accountReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectAccountReferenceList>[]>;
    acps?: pulumi.Input<pulumi.Input<inputs.ProjectAcp>[]>;
    apiVersion?: pulumi.Input<string>;
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.ProjectCategory>[]>;
    clusterReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectClusterReferenceList>[]>;
    /**
     * The UUID of cluster. (Required when using projectInternal flag).
     */
    clusterUuid?: pulumi.Input<string>;
    defaultEnvironmentReference?: pulumi.Input<inputs.ProjectDefaultEnvironmentReference>;
    defaultSubnetReference?: pulumi.Input<inputs.ProjectDefaultSubnetReference>;
    /**
     * A description for project.
     */
    description?: pulumi.Input<string>;
    /**
     * flag to allow collaboration of projects. (Use with projectInternal flag)
     */
    enableCollab?: pulumi.Input<boolean>;
    environmentReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentReferenceList>[]>;
    externalNetworkLists?: pulumi.Input<pulumi.Input<inputs.ProjectExternalNetworkList>[]>;
    externalUserGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectExternalUserGroupReferenceList>[]>;
    isDefault?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceDomain?: pulumi.Input<inputs.ProjectResourceDomain>;
    state?: pulumi.Input<string>;
    subnetReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectSubnetReferenceList>[]>;
    tunnelReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectTunnelReferenceList>[]>;
    /**
     * flag to use project internal for user role mapping
     */
    useProjectInternal?: pulumi.Input<boolean>;
    userGroupLists?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupList>[]>;
    userLists?: pulumi.Input<pulumi.Input<inputs.ProjectUserList>[]>;
    /**
     * List of Reference of users.
     */
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectUserReferenceList>[]>;
    vpcReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectVpcReferenceList>[]>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    accountReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectAccountReferenceList>[]>;
    acps?: pulumi.Input<pulumi.Input<inputs.ProjectAcp>[]>;
    apiVersion?: pulumi.Input<string>;
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.ProjectCategory>[]>;
    clusterReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectClusterReferenceList>[]>;
    /**
     * The UUID of cluster. (Required when using projectInternal flag).
     */
    clusterUuid?: pulumi.Input<string>;
    defaultEnvironmentReference?: pulumi.Input<inputs.ProjectDefaultEnvironmentReference>;
    defaultSubnetReference: pulumi.Input<inputs.ProjectDefaultSubnetReference>;
    /**
     * A description for project.
     */
    description: pulumi.Input<string>;
    /**
     * flag to allow collaboration of projects. (Use with projectInternal flag)
     */
    enableCollab?: pulumi.Input<boolean>;
    environmentReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentReferenceList>[]>;
    externalNetworkLists?: pulumi.Input<pulumi.Input<inputs.ProjectExternalNetworkList>[]>;
    externalUserGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectExternalUserGroupReferenceList>[]>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceDomain?: pulumi.Input<inputs.ProjectResourceDomain>;
    subnetReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectSubnetReferenceList>[]>;
    tunnelReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectTunnelReferenceList>[]>;
    /**
     * flag to use project internal for user role mapping
     */
    useProjectInternal?: pulumi.Input<boolean>;
    userGroupLists?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupList>[]>;
    userLists?: pulumi.Input<pulumi.Input<inputs.ProjectUserList>[]>;
    /**
     * List of Reference of users.
     */
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectUserReferenceList>[]>;
    vpcReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectVpcReferenceList>[]>;
}
