// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Describes a cluster in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const c1 = nutanix.getNdbCluster({
 *     clusterName: "<era-cluster-name>",
 * });
 * export const cluster = c1;
 * ```
 */
export function getNdbCluster(args?: GetNdbClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetNdbClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getNdbCluster:getNdbCluster", {
        "clusterId": args.clusterId,
        "clusterName": args.clusterName,
    }, opts);
}

/**
 * A collection of arguments for invoking getNdbCluster.
 */
export interface GetNdbClusterArgs {
    /**
     * ID of cluster
     */
    clusterId?: string;
    /**
     * and `clusterId` are mutually exclusive.
     */
    clusterName?: string;
}

/**
 * A collection of values returned by getNdbCluster.
 */
export interface GetNdbClusterResult {
    /**
     * - cloud info
     */
    readonly cloudInfo: string;
    /**
     * - cloud type
     */
    readonly cloudType: string;
    readonly clusterId?: string;
    readonly clusterName?: string;
    /**
     * - creation date
     */
    readonly dateCreated: string;
    /**
     * - date modified
     */
    readonly dateModified: string;
    /**
     * - description
     */
    readonly description: string;
    /**
     * - no. of entities related
     */
    readonly entityCounts: outputs.GetNdbClusterEntityCount[];
    /**
     * - fqdn
     */
    readonly fqdns: string;
    /**
     * - if healthy status
     */
    readonly healthy: boolean;
    /**
     * - hypervisor type
     */
    readonly hypervisorType: string;
    /**
     * - hypervisor version
     */
    readonly hypervisorVersion: string;
    /**
     * - id of cluster
     */
    readonly id: string;
    /**
     * - IP address
     */
    readonly ipAddresses: string[];
    /**
     * - NA
     */
    readonly managementServerInfo: string;
    /**
     * - name of cluster
     */
    readonly name: string;
    /**
     * - nutanix cluster uuid
     */
    readonly nxClusterUuid: string;
    /**
     * - owner UUID
     */
    readonly ownerId: string;
    /**
     * - password
     */
    readonly password: string;
    /**
     * - list of properties
     */
    readonly properties: outputs.GetNdbClusterProperty[];
    /**
     * - NA
     */
    readonly referenceCount: number;
    /**
     * - resource related consumption info
     */
    readonly resourceConfigs: outputs.GetNdbClusterResourceConfig[];
    /**
     * - current status
     */
    readonly status: string;
    /**
     * - unique name of cluster
     */
    readonly uniqueName: string;
    /**
     * - username
     */
    readonly username: string;
    /**
     * - version
     */
    readonly version: string;
}
/**
 * Describes a cluster in Nutanix Database Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const c1 = nutanix.getNdbCluster({
 *     clusterName: "<era-cluster-name>",
 * });
 * export const cluster = c1;
 * ```
 */
export function getNdbClusterOutput(args?: GetNdbClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNdbClusterResult> {
    return pulumi.output(args).apply((a: any) => getNdbCluster(a, opts))
}

/**
 * A collection of arguments for invoking getNdbCluster.
 */
export interface GetNdbClusterOutputArgs {
    /**
     * ID of cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * and `clusterId` are mutually exclusive.
     */
    clusterName?: pulumi.Input<string>;
}
