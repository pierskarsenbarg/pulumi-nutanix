// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to authorize db server VMs for cloning of database instance based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbAuthorizeDbserver("name", {
 *     dbserversIds: ["{{ dbServer_IDs}}"],
 *     timeMachineName: "test-pg-inst",
 * });
 * ```
 */
export class NdbAuthorizeDbserver extends pulumi.CustomResource {
    /**
     * Get an existing NdbAuthorizeDbserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbAuthorizeDbserverState, opts?: pulumi.CustomResourceOptions): NdbAuthorizeDbserver {
        return new NdbAuthorizeDbserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver';

    /**
     * Returns true if the given object is an instance of NdbAuthorizeDbserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbAuthorizeDbserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbAuthorizeDbserver.__pulumiType;
    }

    declare public readonly dbserversIds: pulumi.Output<string[] | undefined>;
    declare public readonly timeMachineId: pulumi.Output<string | undefined>;
    /**
     * * `dbserversId `: (Required)
     */
    declare public readonly timeMachineName: pulumi.Output<string | undefined>;

    /**
     * Create a NdbAuthorizeDbserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NdbAuthorizeDbserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbAuthorizeDbserverArgs | NdbAuthorizeDbserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbAuthorizeDbserverState | undefined;
            resourceInputs["dbserversIds"] = state?.dbserversIds;
            resourceInputs["timeMachineId"] = state?.timeMachineId;
            resourceInputs["timeMachineName"] = state?.timeMachineName;
        } else {
            const args = argsOrState as NdbAuthorizeDbserverArgs | undefined;
            resourceInputs["dbserversIds"] = args?.dbserversIds;
            resourceInputs["timeMachineId"] = args?.timeMachineId;
            resourceInputs["timeMachineName"] = args?.timeMachineName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbAuthorizeDbserver.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbAuthorizeDbserver resources.
 */
export interface NdbAuthorizeDbserverState {
    dbserversIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeMachineId?: pulumi.Input<string>;
    /**
     * * `dbserversId `: (Required)
     */
    timeMachineName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbAuthorizeDbserver resource.
 */
export interface NdbAuthorizeDbserverArgs {
    dbserversIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeMachineId?: pulumi.Input<string>;
    /**
     * * `dbserversId `: (Required)
     */
    timeMachineName?: pulumi.Input<string>;
}
