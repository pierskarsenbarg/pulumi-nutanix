// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlPolicyCategory {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface AccessControlPolicyContextFilterList {
    entityFilterExpressionLists: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionList>[]>;
    scopeFilterExpressionLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionList>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the entity type.
     */
    leftHandSideEntityType?: pulumi.Input<string>;
    /**
     * - (Required) The operator in the filter expression.
     */
    operator: pulumi.Input<string>;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories>;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection?: pulumi.Input<string>;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the scope type.
     */
    leftHandSide: pulumi.Input<string>;
    /**
     * - (Required) The operator of the filter expression.
     */
    operator: pulumi.Input<string>;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories>;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection?: pulumi.Input<string>;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyOwnerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface AccessControlPolicyRoleReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyUserGroupReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyUserReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface AddressGroupIpAddressBlockList {
    ip: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface FoundationCentralImageClusterClusterStatus {
    aggregatePercentComplete?: pulumi.Input<number>;
    clusterCreationStarted?: pulumi.Input<boolean>;
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail>[]>;
    currentFoundationIp?: pulumi.Input<string>;
    foundationSessionId?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail>[]>;
}

export interface FoundationCentralImageClusterClusterStatusClusterProgressDetail {
    /**
     * Name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterCommonNetworkSettings {
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfig {
    blocks?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlock>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigCluster>[]>;
    cvmGateway?: pulumi.Input<string>;
    cvmNetmask?: pulumi.Input<string>;
    dnsServers?: pulumi.Input<string>;
    hypervProductKey?: pulumi.Input<string>;
    hypervSku?: pulumi.Input<string>;
    hypervisorGateway?: pulumi.Input<string>;
    hypervisorIsoUrl?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisorIsos?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso>[]>;
    hypervisorNetmask?: pulumi.Input<string>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    nosPackageUrls?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlock {
    blockId?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlockNode>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlockNode {
    cvmIp?: pulumi.Input<string>;
    cvmVlanId?: pulumi.Input<number>;
    fcImagedNodeUuid?: pulumi.Input<string>;
    hardwareAttributesOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisor?: pulumi.Input<string>;
    hypervisorHostname?: pulumi.Input<string>;
    hypervisorIp?: pulumi.Input<string>;
    imageNow?: pulumi.Input<boolean>;
    ipmiIp?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    nodePosition?: pulumi.Input<string>;
    nodeSerial?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigCluster {
    /**
     * External management ip of the cluster.
     */
    clusterExternalIp?: pulumi.Input<string>;
    clusterInitNow?: pulumi.Input<boolean>;
    clusterInitSuccessful?: pulumi.Input<boolean>;
    clusterMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    cvmDnsServers?: pulumi.Input<string>;
    cvmNtpServers?: pulumi.Input<string>;
    /**
     * Redundancy factor of the cluster.
     */
    redundancyFactor?: pulumi.Input<number>;
    /**
     * Timezone to be set on the cluster.
     */
    timezone?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigHypervisorIso {
    hypervisorType?: pulumi.Input<string>;
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigNosPackageUrl {
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterHypervisorIsoDetails {
    hypervProductKey?: pulumi.Input<string>;
    hypervSku?: pulumi.Input<string>;
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterNodeList {
    cvmGateway?: pulumi.Input<string>;
    cvmIp?: pulumi.Input<string>;
    cvmNetmask?: pulumi.Input<string>;
    cvmRamGb?: pulumi.Input<number>;
    cvmVlanId?: pulumi.Input<number>;
    hardwareAttributesOverride?: pulumi.Input<{[key: string]: any}>;
    hypervisorGateway?: pulumi.Input<string>;
    hypervisorHostname?: pulumi.Input<string>;
    hypervisorIp?: pulumi.Input<string>;
    hypervisorNetmask?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    imageNow?: pulumi.Input<boolean>;
    imagedNodeUuid?: pulumi.Input<string>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiIp?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    rdmaPassthrough?: pulumi.Input<boolean>;
    useExistingNetworkSettings?: pulumi.Input<boolean>;
}

export interface FoundationImageNodesBlock {
    /**
     * - Block ID.
     */
    blockId?: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNode>[]>;
}

export interface FoundationImageNodesBlockNode {
    /**
     * - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
     */
    bondLacpRate?: pulumi.Input<string>;
    /**
     * - (Required if node is capable) dynamic if using LACP, static for LAG
     */
    bondMode?: pulumi.Input<string>;
    /**
     * - MAC Addresses of NICs in a team/bond
     */
    bondUplinks?: pulumi.Input<string>;
    /**
     * - ID of cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * - Current CVM vlan tag. 0 Value with remove vlan tag.
     */
    currentCvmVlanTag?: pulumi.Input<number>;
    /**
     * - CVM current network interface.
     */
    currentNetworkInterface?: pulumi.Input<string>;
    /**
     * - RAM capacity of CVM in GB.
     */
    cvmGbRam?: pulumi.Input<number>;
    cvmIp?: pulumi.Input<string>;
    /**
     * - Number of CVM vcpus.
     */
    cvmNumVcpus?: pulumi.Input<number>;
    /**
     * - use "vmInstaller" to enable CVM imaging from standalone.
     */
    deviceHint?: pulumi.Input<string>;
    /**
     * - serial of boot device to be excluded (used by NX G6 platforms)
     */
    exludeBootSerial?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    /**
     * - (Required) Hypervisor Hostname.
     */
    hypervisorHostname: pulumi.Input<string>;
    /**
     * - (Required) Hypervisor IP address.
     */
    hypervisorIp: pulumi.Input<string>;
    /**
     * - Imaging delay.
     */
    imageDelay?: pulumi.Input<number>;
    /**
     * - (Optional, Default = true) If the node should be imaged now.
     */
    imageNow?: pulumi.Input<boolean>;
    imageSuccessful?: pulumi.Input<boolean>;
    /**
     * - Whether IPMI should be configured.
     */
    ipmiConfigureNow?: pulumi.Input<boolean>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
     */
    ipmiGateway?: pulumi.Input<string>;
    /**
     * - (Required) IPMI IP address.
     */
    ipmiIp?: pulumi.Input<string>;
    /**
     * - IPMI MAC address.
     */
    ipmiMac?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
     */
    ipmiNetmask?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
     */
    ipmiPassword?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
     */
    ipmiUser?: pulumi.Input<string>;
    /**
     * - (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) IPV6 address.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * - (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) ipv6 interface.
     */
    ipv6Interface?: pulumi.Input<string>;
    /**
     * - relocate bootbank files to make space for phoenix files.
     */
    mitigateLowBootSpace?: pulumi.Input<boolean>;
    /**
     * - (Required) Position of the node in the block.
     */
    nodePosition: pulumi.Input<string>;
    /**
     * - serial number of the node.
     */
    nodeSerial?: pulumi.Input<string>;
    /**
     * - mac address of nic to be used for rdma
     */
    rdmaMacAddr?: pulumi.Input<string>;
    /**
     * - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
     */
    rdmaPassthrough?: pulumi.Input<boolean>;
    /**
     * - UCSM Managed mode.
     */
    ucsmManagedMode?: pulumi.Input<string>;
    /**
     * - UCSM node serial.
     */
    ucsmNodeSerial?: pulumi.Input<string>;
    /**
     * - Object of UCSM parameters.
     * * `ucsm_params.native_vlan` :- If the vlan is native.
     * * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
     * * `ucsm_params.mac_pool` :- Mac address pool.
     * * `ucsm_params.vlan_name` :- Name of vlan.
     */
    ucsmParams?: pulumi.Input<inputs.FoundationImageNodesBlockNodeUcsmParams>;
    vswitches?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNodeVswitch>[]>;
}

export interface FoundationImageNodesBlockNodeUcsmParams {
    keepUcsmSettings?: pulumi.Input<boolean>;
    macPool?: pulumi.Input<string>;
    nativeVlan?: pulumi.Input<boolean>;
    vlanName?: pulumi.Input<string>;
}

export interface FoundationImageNodesBlockNodeVswitch {
    bondMode?: pulumi.Input<string>;
    lacp?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    otherConfigs?: pulumi.Input<pulumi.Input<string>[]>;
    uplinks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationImageNodesCluster {
    /**
     * - Backplane netmask.
     */
    backplaneNetmask?: pulumi.Input<string>;
    /**
     * - Backplane subnet address.
     */
    backplaneSubnet?: pulumi.Input<string>;
    /**
     * - Backplane vlan.
     */
    backplaneVlan?: pulumi.Input<string>;
    /**
     * - External IP of the cluster.
     */
    clusterExternalIp?: pulumi.Input<string>;
    /**
     * - (Optional, Default = true) If cluster should be created.
     */
    clusterInitNow?: pulumi.Input<boolean>;
    /**
     * - If cluster initialization was successful.
     */
    clusterInitSuccessful?: pulumi.Input<boolean>;
    /**
     * - (Required) Members in the cluster.
     */
    clusterMembers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Required) Name of the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * - DNS servers of CVM.
     */
    cvmDnsServers?: pulumi.Input<string>;
    /**
     * - NTP servers of CVM.
     */
    cvmNtpServers?: pulumi.Input<string>;
    /**
     * - If network segmentation should be enabled.
     */
    enableNs?: pulumi.Input<boolean>;
    /**
     * - NTP servers of hypervisor.
     */
    hypervisorNtpServers?: pulumi.Input<string>;
    /**
     * - (Required) Cluster Redundancy Factor.
     */
    redundancyFactor: pulumi.Input<number>;
    /**
     * - If it is a single node cluster.
     */
    singleNodeCluster?: pulumi.Input<boolean>;
}

export interface FoundationImageNodesClusterUrl {
    clusterName?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
}

export interface FoundationImageNodesEosMetadata {
    /**
     * - arrya of account names
     */
    accountNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - Id of the Eos config uploaded in foundation GUI.
     */
    configId?: pulumi.Input<string>;
    /**
     * - Email address of the user who downloaded Eos config.
     */
    email?: pulumi.Input<string>;
}

export interface FoundationImageNodesFcSettings {
    /**
     * - Foundation Central metadata which will be transferred to the newly imaged node.
     * * `fc_metadata.fc_ip` :- IP address of foundation central.
     * * `fc_metadata.api_key` :- apiKey which the node uses to register itself with foundation central.
     */
    fcMetadata: pulumi.Input<inputs.FoundationImageNodesFcSettingsFcMetadata>;
    /**
     * - If this attribute is set to True, FC workflow will be invoked.
     */
    foundationCentral: pulumi.Input<boolean>;
}

export interface FoundationImageNodesFcSettingsFcMetadata {
    apiKey: pulumi.Input<string>;
    fcIp: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIso {
    /**
     * - Details of hypervisor ISO of type esx.
     */
    esx?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoEsx>;
    /**
     * - Details of hypervisor ISO of type hyperv.
     */
    hyperv?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoHyperv>;
    /**
     * - Details of hypervisor ISO of type kvm.
     */
    kvm?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoKvm>;
    /**
     * - Details of hypervisor ISO of type xen.
     */
    xen?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoXen>;
}

export interface FoundationImageNodesHypervisorIsoEsx {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoHyperv {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoKvm {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoXen {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesTests {
    /**
     * - Whether NCC checks should run.
     */
    runNcc?: pulumi.Input<boolean>;
    /**
     * - Whether system checks should run.
     */
    runSyscheck?: pulumi.Input<boolean>;
}

export interface FoundationIpmiConfigBlock {
    /**
     * - (Optional) Block Id
     */
    blockId?: pulumi.Input<string>;
    /**
     * - (Required) array of nodes for ipmi config.
     */
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationIpmiConfigBlockNode>[]>;
}

export interface FoundationIpmiConfigBlockNode {
    /**
     * - (Required) Whether IPMI should be configured. Should be kept true to configure
     */
    ipmiConfigureNow: pulumi.Input<boolean>;
    /**
     * - Whether IPMI was successfully configured.
     */
    ipmiConfigureSuccessful?: pulumi.Input<boolean>;
    /**
     * - IPMI IP address.
     */
    ipmiIp: pulumi.Input<string>;
    /**
     * - (Required) IPMI mac address.
     */
    ipmiMac: pulumi.Input<string>;
    /**
     * - IPMI configuration status message if any.
     */
    ipmiMessage?: pulumi.Input<string>;
}

export interface GetAccessControlPoliciesMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetAccessControlPoliciesMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetAccessControlPolicyCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetAccessControlPolicyCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetAddressGroupsMetadata {
    /**
     * (Optional) Filter in FIQL Syntax
     */
    filter?: string;
    kind?: string;
    /**
     * (Optional) Integer
     */
    length?: number;
    /**
     * (Optional) Integer
     */
    offset?: number;
    /**
     * (Optional) attribute to sort
     */
    sortAttribute?: string;
    /**
     * (Optional) order of sorting
     */
    sortOrder?: string;
}

export interface GetAddressGroupsMetadataArgs {
    /**
     * (Optional) Filter in FIQL Syntax
     */
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    /**
     * (Optional) Integer
     */
    length?: pulumi.Input<number>;
    /**
     * (Optional) Integer
     */
    offset?: pulumi.Input<number>;
    /**
     * (Optional) attribute to sort
     */
    sortAttribute?: pulumi.Input<string>;
    /**
     * (Optional) order of sorting
     */
    sortOrder?: pulumi.Input<string>;
}

export interface GetAssertHelperCheck {
    condition: boolean;
    errorMessage: string;
}

export interface GetAssertHelperCheckArgs {
    condition: pulumi.Input<boolean>;
    errorMessage: pulumi.Input<string>;
}

export interface GetClusterCategory {
    /**
     * - the key name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetClusterCategoryArgs {
    /**
     * - the key name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetFloatingIpsMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetFloatingIpsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetFoundationCentralClusterDetailsClusterStatus {
    aggregatePercentComplete?: number;
    clusterCreationStarted?: boolean;
    clusterProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail[];
    currentFoundationIp?: string;
    foundationSessionId?: string;
    imagingStopped?: boolean;
    intentPickedUp?: boolean;
    nodeProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralClusterDetailsClusterStatusArgs {
    aggregatePercentComplete?: pulumi.Input<number>;
    clusterCreationStarted?: pulumi.Input<boolean>;
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs>[]>;
    currentFoundationIp?: pulumi.Input<string>;
    foundationSessionId?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs>[]>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail {
    clusterName?: string;
    messageLists?: string[];
    percentComplete?: number;
    status?: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs {
    clusterName?: pulumi.Input<string>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail {
    imagedNodeUuid?: string;
    imagingStopped?: boolean;
    intentPickedUp?: boolean;
    messageLists?: string[];
    percentComplete?: number;
    status?: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs {
    imagedNodeUuid?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettings {
    cvmDnsServers?: string[];
    cvmNtpServers?: string[];
    hypervisorDnsServers?: string[];
    hypervisorNtpServers?: string[];
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettingsArgs {
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFoundationCentralImagedClustersListFilters {
    archived?: boolean;
}

export interface GetFoundationCentralImagedClustersListFiltersArgs {
    archived?: pulumi.Input<boolean>;
}

export interface GetFoundationCentralImagedNodesListFilters {
    nodeState?: string;
}

export interface GetFoundationCentralImagedNodesListFiltersArgs {
    nodeState?: pulumi.Input<string>;
}

export interface GetFoundationCentralListApiKeysMetadata {
    length?: number;
    offset?: number;
    totalMatches?: number;
}

export interface GetFoundationCentralListApiKeysMetadataArgs {
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetHostCategory {
    /**
     * - the key name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetHostCategoryArgs {
    /**
     * - the key name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetImageCategory {
    /**
     * - the name.
     */
    name?: string;
    value?: string;
}

export interface GetImageCategoryArgs {
    /**
     * - the name.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNetworkSecurityRuleCategory {
    /**
     * - the name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetNetworkSecurityRuleCategoryArgs {
    /**
     * - the name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetPbrsMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetPbrsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetPermissionCategory {
    /**
     * the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetPermissionCategoryArgs {
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetPermissionsMetadata {
    filter?: string;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetPermissionsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetProjectCategory {
    /**
     * the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetProjectCategoryArgs {
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectExternalUserGroupReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectSubnetReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectUserReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProtectionRuleCategory {
    /**
     * (Optional) the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetProtectionRuleCategoryArgs {
    /**
     * (Optional) the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetRecoveryPlanCategory {
    /**
     * (Optional) the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetRecoveryPlanCategoryArgs {
    /**
     * (Optional) the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetRoleCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetRoleCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetRolesMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetRolesMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetServiceGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetServiceGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetSubnetAdditionalFilter {
    /**
     * - the name(Optional).
     */
    name: string;
    values: string[];
}

export interface GetSubnetAdditionalFilterArgs {
    /**
     * - the name(Optional).
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSubnetCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetSubnetCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetSubnetsMetadata {
    filter?: string;
    /**
     * The kind name (Default value: project.
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetSubnetsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * The kind name (Default value: project.
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetUserCategory {
    /**
     * - (Optional) The name for the user
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetUserCategoryArgs {
    /**
     * - (Optional) The name for the user
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetUserGroupCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetUserGroupCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetUserGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUserGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetUsersMetadata {
    filter?: string;
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUsersMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetVirtualMachineCategory {
    /**
     * - the name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetVirtualMachineCategoryArgs {
    /**
     * - the name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetVpcsMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetVpcsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface ImageCategory {
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImageClusterReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface ImageCurrentClusterReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface KarbonClusterActivePassiveConfig {
    externalIpv4Address: pulumi.Input<string>;
}

export interface KarbonClusterCniConfig {
    /**
     * - (Optional) Configuration of the calico CNI provider.
     * * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
     * * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
     *
     * **Note:** Updates to this attribute forces new resource creation.
     *
     * See detailed information in [Nutanix Karbon Cluster](https://www.nutanix.dev/reference/karbon/api-reference/cluster/).
     */
    calicoConfig?: pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfig>;
    /**
     * - (Optional) Configuration of the flannel container network interface (CNI) provider.
     */
    flannelConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigFlannelConfig>[]>;
    /**
     * - (Optional) The size of the subnet from the podIpv4Cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
     */
    nodeCidrMaskSize?: pulumi.Input<number>;
    /**
     * - (Optional) CIDR for pods in the cluster.
     */
    podIpv4Cidr?: pulumi.Input<string>;
    /**
     * - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
     */
    serviceIpv4Cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigCalicoConfig {
    ipPoolConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig>[]>;
}

export interface KarbonClusterCniConfigCalicoConfigIpPoolConfig {
    cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigFlannelConfig {
}

export interface KarbonClusterEtcdNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonClusterEtcdNodePoolAhvConfig>;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: pulumi.Input<string>;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterEtcdNodePoolNode>[]>;
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterEtcdNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterEtcdNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface KarbonClusterExternalLbConfig {
    externalIpv4Address: pulumi.Input<string>;
    masterNodesConfigs: pulumi.Input<pulumi.Input<inputs.KarbonClusterExternalLbConfigMasterNodesConfig>[]>;
}

export interface KarbonClusterExternalLbConfigMasterNodesConfig {
    ipv4Address: pulumi.Input<string>;
    nodePoolName?: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonClusterMasterNodePoolAhvConfig>;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: pulumi.Input<string>;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterMasterNodePoolNode>[]>;
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterMasterNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface KarbonClusterPrivateRegistry {
    registryName: pulumi.Input<string>;
}

export interface KarbonClusterSingleMasterConfig {
}

export interface KarbonClusterStorageClassConfig {
    /**
     * - (Required) The name of the storage class.
     */
    name?: pulumi.Input<string>;
    /**
     * Reclaim policy for persistent volumes provisioned using the specified storage class.
     * * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
     * * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
     * * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
     * * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
     * * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
     * * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.
     *
     * **Note:** Updates to this attribute forces new resource creation.
     */
    reclaimPolicy?: pulumi.Input<string>;
    volumesConfig: pulumi.Input<inputs.KarbonClusterStorageClassConfigVolumesConfig>;
}

export interface KarbonClusterStorageClassConfigVolumesConfig {
    fileSystem?: pulumi.Input<string>;
    flashMode?: pulumi.Input<boolean>;
    password: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
    storageContainer: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonClusterWorkerNodePoolAhvConfig>;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: pulumi.Input<string>;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterWorkerNodePoolNode>[]>;
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterWorkerNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleTargetGroupFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleTargetGroupFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleCategory {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PbrDestination {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface PbrProtocolParameters {
    icmp?: pulumi.Input<inputs.PbrProtocolParametersIcmp>;
    protocolNumber?: pulumi.Input<string>;
    tcp?: pulumi.Input<inputs.PbrProtocolParametersTcp>;
    udp?: pulumi.Input<inputs.PbrProtocolParametersUdp>;
}

export interface PbrProtocolParametersIcmp {
    icmpCode: pulumi.Input<number>;
    icmpType: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersTcpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersUdpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrSource {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface ProjectAccountReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectCategory {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface ProjectDefaultSubnetReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectEnvironmentReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalNetworkList {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectResourceDomain {
    resources: pulumi.Input<pulumi.Input<inputs.ProjectResourceDomainResource>[]>;
}

export interface ProjectResourceDomainResource {
    limit: pulumi.Input<number>;
    resourceType: pulumi.Input<string>;
    units?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<number>;
}

export interface ProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex?: pulumi.Input<number>;
    snapshotScheduleLists?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList>[]>;
    sourceAvailabilityZoneIndex?: pulumi.Input<number>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs?: pulumi.Input<number>;
    localSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy>;
    recoveryPointObjectiveSecs: pulumi.Input<number>;
    remoteSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy>;
    snapshotType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleCategory {
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilter {
    kindLists?: pulumi.Input<pulumi.Input<string>[]>;
    params?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleCategoryFilterParam>[]>;
    type?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilterParam {
    /**
     * The name for the protection rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterUuid?: pulumi.Input<string>;
}

export interface ProtectionRuleOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface ProtectionRuleProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanCategory {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParameters {
    floatingIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentList>[]>;
    networkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentList {
    availabilityZoneUrl: pulumi.Input<string>;
    vmIpAssignmentLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig>;
    testFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig>;
    vmNicInformation: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingList {
    areNetworksStretched?: pulumi.Input<boolean>;
    availabilityZoneNetworkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterReferenceLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList>[]>;
    recoveryIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList>[]>;
    recoveryNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork>;
    testIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList>[]>;
    testNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanStageList {
    delayTimeSecs?: pulumi.Input<number>;
    stageUuid?: pulumi.Input<string>;
    stageWork: pulumi.Input<inputs.RecoveryPlanStageListStageWork>;
}

export interface RecoveryPlanStageListStageWork {
    recoverEntities?: pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntities>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntities {
    entityInfoLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList {
    anyEntityReferenceKind?: pulumi.Input<string>;
    anyEntityReferenceName?: pulumi.Input<string>;
    anyEntityReferenceUuid?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory>[]>;
    scriptLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList {
    enableScriptExec: pulumi.Input<boolean>;
    timeout?: pulumi.Input<string>;
}

export interface RoleCategory {
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RoleOwnerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface RolePermissionReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface RoleProjectReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface ServiceGroupServiceList {
    /**
     * - (Optional) ICMP type code list
     */
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListIcmpTypeCodeList>[]>;
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    protocol?: pulumi.Input<string>;
    /**
     * - (Optional) TCP Port range list
     */
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListTcpPortRangeList>[]>;
    /**
     * - (Optional) UDP port range list
     */
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListUdpPortRangeList>[]>;
}

export interface ServiceGroupServiceListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ServiceGroupServiceListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface ServiceGroupServiceListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface StaticRoutesDefaultRouteNexthop {
    /**
     * Reference to a subnet.
     */
    externalSubnetReferenceUuid?: pulumi.Input<string>;
}

export interface StaticRoutesStaticRoutesList {
    /**
     * Destination ip with prefix.
     */
    destination: pulumi.Input<string>;
    /**
     * Reference to a subnet. Supported with 2022.x .
     */
    externalSubnetReferenceUuid?: pulumi.Input<string>;
    /**
     * Reference to a vpn connection.
     */
    vpnConnectionReferenceUuid?: pulumi.Input<string>;
}

export interface SubnetCategory {
    /**
     * - (Optional) Subnet name (Readonly).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface UserAccessControlPolicyReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface UserCategory {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUser {
    defaultUserPrincipalName?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
     */
    directoryServiceReference: pulumi.Input<inputs.UserDirectoryServiceUserDirectoryServiceReference>;
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    userPrincipalName?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUserDirectoryServiceReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface UserIdentityProviderUser {
    /**
     * - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
     */
    identityProviderReference: pulumi.Input<inputs.UserIdentityProviderUserIdentityProviderReference>;
    /**
     * - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
     */
    username?: pulumi.Input<string>;
}

export interface UserIdentityProviderUserIdentityProviderReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface UserProjectReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineCategory {
    /**
     * - (Required) The name for the vm.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface VirtualMachineDiskList {
    /**
     * Reference to a data source.
     */
    dataSourceReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Properties to a device.
     */
    deviceProperties?: pulumi.Input<inputs.VirtualMachineDiskListDeviceProperties>;
    /**
     * Size of the disk in Bytes.
     */
    diskSizeBytes?: pulumi.Input<number>;
    /**
     * Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
     */
    diskSizeMib?: pulumi.Input<number>;
    storageConfig?: pulumi.Input<inputs.VirtualMachineDiskListStorageConfig>;
    /**
     * - (Optional) The device ID which is used to uniquely identify this particular disk.
     */
    uuid?: pulumi.Input<string>;
    /**
     * Reference to a volume group.
     *
     * The diskSize (the disk sizeMib and the diskSizeBytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk sizeMib or diskSizeBytes when you set dataSourceReference but, you can update the diskSize after creation (second apply).
     */
    volumeGroupReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListDeviceProperties {
    /**
     * - A Disk type (default: DISK).
     */
    deviceType?: pulumi.Input<string>;
    /**
     * - Address of disk to boot from.
     */
    diskAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListStorageConfig {
    /**
     * - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
     */
    flashMode?: pulumi.Input<string>;
    /**
     * - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
     * * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
     * * `storage_container_reference.#.kind`: - kind of the container reference
     * * `storage_container_reference.#.name`: - name of the container reference
     * * `storage_container_reference.#.uuid`: - uiid of the container reference
     */
    storageContainerReferences?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDiskListStorageConfigStorageContainerReference>[]>;
}

export interface VirtualMachineDiskListStorageConfigStorageContainerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the vm.
     */
    name?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineGpuList {
    /**
     * - (Computed) The device ID of the GPU.
     */
    deviceId?: pulumi.Input<number>;
    /**
     * Fraction of the physical GPU assigned.
     */
    fraction?: pulumi.Input<number>;
    /**
     * - (ReadOnly) GPU frame buffer size in MiB.
     */
    frameBufferSizeMib?: pulumi.Input<number>;
    /**
     * - (ReadOnly) Last determined guest driver version.
     */
    guestDriverVersion?: pulumi.Input<string>;
    /**
     * - (Optional) The mode of this GPU.
     */
    mode?: pulumi.Input<string>;
    /**
     * - (ReadOnly) Name of the GPU resource.
     */
    name?: pulumi.Input<string>;
    /**
     * - (ReadOnly) Number of supported virtual display heads.
     */
    numVirtualDisplayHeads?: pulumi.Input<number>;
    /**
     * GPU {segment:bus:device:function} (sbdf) address if assigned.
     */
    pciAddress?: pulumi.Input<string>;
    /**
     * - (ReadOnly) UUID of the GPU.
     */
    uuid?: pulumi.Input<string>;
    /**
     * - (Optional) The vendor of the GPU.
     */
    vendor?: pulumi.Input<string>;
}

export interface VirtualMachineNicList {
    /**
     * - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
     */
    ipEndpointLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListIpEndpointList>[]>;
    isConnected?: pulumi.Input<string>;
    /**
     * - The MAC address for the adapter.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * - The model of this NIC. (Options : VIRTIO , E1000).
     */
    model?: pulumi.Input<string>;
    /**
     * - The reference to a network_function_chain.
     */
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
     */
    networkFunctionNicType?: pulumi.Input<string>;
    /**
     * - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
     */
    nicType?: pulumi.Input<string>;
    /**
     * - The number of tx/rx queue pairs for this NIC.
     */
    numQueues?: pulumi.Input<number>;
    /**
     * - The name of the subnet reference to.
     */
    subnetName?: pulumi.Input<string>;
    /**
     * - The reference to a subnet.
     */
    subnetUuid?: pulumi.Input<string>;
    /**
     * - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineNicListIpEndpointList {
    /**
     * - Address string.
     */
    ip?: pulumi.Input<string>;
    /**
     * - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
     */
    type?: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatus {
    floatingIp?: pulumi.Input<string>;
    ipEndpointLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListStatusIpEndpointList>[]>;
    isConnected?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkFunctionNicType?: pulumi.Input<string>;
    nicType?: pulumi.Input<string>;
    numQueues?: pulumi.Input<number>;
    subnetName?: pulumi.Input<string>;
    subnetUuid?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatusIpEndpointList {
    /**
     * - Address string.
     */
    ip?: pulumi.Input<string>;
    /**
     * - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
     */
    type?: pulumi.Input<string>;
}

export interface VirtualMachineSerialPortList {
    /**
     * - Index of the serial port (int).
     */
    index?: pulumi.Input<number>;
    /**
     * - Indicates whether the serial port connection is connected or not (`true` or `false`).
     */
    isConnected?: pulumi.Input<boolean>;
}

export interface VpcCommonDomainNameServerIpList {
    /**
     * ip address.
     */
    ip?: pulumi.Input<string>;
}

export interface VpcExternalSubnetListStatus {
    activeGatewayNode?: pulumi.Input<inputs.VpcExternalSubnetListStatusActiveGatewayNode>;
    externalIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    externalSubnetReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VpcExternalSubnetListStatusActiveGatewayNode {
    hostReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ipAddress?: pulumi.Input<string>;
}

export interface VpcExternallyRoutablePrefixList {
    /**
     * ip address.
     */
    ip: pulumi.Input<string>;
    /**
     * prefix length.
     */
    prefixLength: pulumi.Input<number>;
}
