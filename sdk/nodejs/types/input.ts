// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AccessControlPolicyCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AccessControlPolicyContextFilterList {
    /**
     * A list of Entity filter expressions.
     */
    entityFilterExpressionLists: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionList>[]>;
    scopeFilterExpressionLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionList>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories>;
    collection?: pulumi.Input<string>;
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories {
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionList {
    leftHandSide: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories>;
    collection?: pulumi.Input<string>;
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories {
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyOwnerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface AccessControlPolicyRoleReference {
    kind: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyUserGroupReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyUserReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface AddressGroupIpAddressBlockList {
    ip: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface FoundationCentralImageClusterClusterStatus {
    aggregatePercentComplete?: pulumi.Input<number>;
    clusterCreationStarted?: pulumi.Input<boolean>;
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail>[]>;
    currentFoundationIp?: pulumi.Input<string>;
    foundationSessionId?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail>[]>;
}

export interface FoundationCentralImageClusterClusterStatusClusterProgressDetail {
    clusterName?: pulumi.Input<string>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterCommonNetworkSettings {
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfig {
    blocks?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlock>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigCluster>[]>;
    cvmGateway?: pulumi.Input<string>;
    cvmNetmask?: pulumi.Input<string>;
    dnsServers?: pulumi.Input<string>;
    hypervProductKey?: pulumi.Input<string>;
    hypervSku?: pulumi.Input<string>;
    hypervisorGateway?: pulumi.Input<string>;
    hypervisorIsoUrl?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisorIsos?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso>[]>;
    hypervisorNetmask?: pulumi.Input<string>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    nosPackageUrls?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlock {
    blockId?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlockNode>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlockNode {
    cvmIp?: pulumi.Input<string>;
    cvmVlanId?: pulumi.Input<number>;
    fcImagedNodeUuid?: pulumi.Input<string>;
    hardwareAttributesOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisor?: pulumi.Input<string>;
    hypervisorHostname?: pulumi.Input<string>;
    hypervisorIp?: pulumi.Input<string>;
    imageNow?: pulumi.Input<boolean>;
    ipmiIp?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    nodePosition?: pulumi.Input<string>;
    nodeSerial?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigCluster {
    clusterExternalIp?: pulumi.Input<string>;
    clusterInitNow?: pulumi.Input<boolean>;
    clusterInitSuccessful?: pulumi.Input<boolean>;
    clusterMembers?: pulumi.Input<pulumi.Input<string>[]>;
    clusterName?: pulumi.Input<string>;
    cvmDnsServers?: pulumi.Input<string>;
    cvmNtpServers?: pulumi.Input<string>;
    redundancyFactor?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigHypervisorIso {
    hypervisorType?: pulumi.Input<string>;
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigNosPackageUrl {
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterHypervisorIsoDetails {
    hypervProductKey?: pulumi.Input<string>;
    hypervSku?: pulumi.Input<string>;
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterNodeList {
    cvmGateway?: pulumi.Input<string>;
    cvmIp?: pulumi.Input<string>;
    cvmNetmask?: pulumi.Input<string>;
    cvmRamGb?: pulumi.Input<number>;
    cvmVlanId?: pulumi.Input<number>;
    hardwareAttributesOverride?: pulumi.Input<{[key: string]: any}>;
    hypervisorGateway?: pulumi.Input<string>;
    hypervisorHostname?: pulumi.Input<string>;
    hypervisorIp?: pulumi.Input<string>;
    hypervisorNetmask?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    imageNow?: pulumi.Input<boolean>;
    imagedNodeUuid?: pulumi.Input<string>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiIp?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    rdmaPassthrough?: pulumi.Input<boolean>;
    useExistingNetworkSettings?: pulumi.Input<boolean>;
}

export interface FoundationImageNodesBlock {
    /**
     * : - Block ID.
     */
    blockId?: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNode>[]>;
}

export interface FoundationImageNodesBlockNode {
    /**
     * :- (Required if node is lacp configured) slow or fast if lacp if being used at the switch
     */
    bondLacpRate?: pulumi.Input<string>;
    /**
     * :- (Required if node is capable) dynamic if using LACP, static for LAG
     */
    bondMode?: pulumi.Input<string>;
    /**
     * :- MAC Addresses of NICs in a team/bond
     */
    bondUplinks?: pulumi.Input<string>;
    /**
     * :- ID of cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * :- Current CVM vlan tag. 0 Value with remove vlan tag.
     */
    currentCvmVlanTag?: pulumi.Input<number>;
    /**
     * :- CVM current network interface.
     */
    currentNetworkInterface?: pulumi.Input<string>;
    /**
     * :- RAM capacity of CVM in GB.
     */
    cvmGbRam?: pulumi.Input<number>;
    cvmIp?: pulumi.Input<string>;
    /**
     * :- Number of CVM vcpus.
     */
    cvmNumVcpus?: pulumi.Input<number>;
    /**
     * :- use "vmInstaller" to enable CVM imaging from standalone.
     */
    deviceHint?: pulumi.Input<string>;
    /**
     * :- serial of boot device to be excluded (used by NX G6 platforms)
     */
    exludeBootSerial?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    /**
     * :- (Required) Hypervisor Hostname.
     */
    hypervisorHostname: pulumi.Input<string>;
    /**
     * :- (Required) Hypervisor IP address.
     */
    hypervisorIp: pulumi.Input<string>;
    /**
     * :- Imaging delay.
     */
    imageDelay?: pulumi.Input<number>;
    /**
     * :- (Optional, Default = true) If the node should be imaged now.
     */
    imageNow?: pulumi.Input<boolean>;
    imageSuccessful?: pulumi.Input<boolean>;
    /**
     * :- Whether IPMI should be configured.
     */
    ipmiConfigureNow?: pulumi.Input<boolean>;
    /**
     * :- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
     */
    ipmiGateway?: pulumi.Input<string>;
    /**
     * :- (Required) IPMI IP address.
     */
    ipmiIp?: pulumi.Input<string>;
    /**
     * :- IPMI MAC address.
     */
    ipmiMac?: pulumi.Input<string>;
    /**
     * :- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
     */
    ipmiNetmask?: pulumi.Input<string>;
    /**
     * :- (Required incase using IPMI based imaging either here or outside blocks) IPMI username
     */
    ipmiPassword?: pulumi.Input<string>;
    /**
     * :- (Required incase using IPMI based imaging either here or outside blocks) IPMI password
     */
    ipmiUser?: pulumi.Input<string>;
    /**
     * :- (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) IPV6 address.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * :- (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) ipv6 interface.
     */
    ipv6Interface?: pulumi.Input<string>;
    /**
     * :- relocate bootbank files to make space for phoenix files.
     */
    mitigateLowBootSpace?: pulumi.Input<boolean>;
    /**
     * :- (Required) Position of the node in the block.
     */
    nodePosition: pulumi.Input<string>;
    /**
     * :- serial number of the node.
     */
    nodeSerial?: pulumi.Input<string>;
    /**
     * :- mac address of nic to be used for rdma
     */
    rdmaMacAddr?: pulumi.Input<string>;
    /**
     * :- (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
     */
    rdmaPassthrough?: pulumi.Input<boolean>;
    /**
     * :- UCSM Managed mode.
     */
    ucsmManagedMode?: pulumi.Input<string>;
    /**
     * :- UCSM node serial.
     */
    ucsmNodeSerial?: pulumi.Input<string>;
    /**
     * :- Object of UCSM parameters.
     * * `ucsm_params.native_vlan` :- If the vlan is native.
     * * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
     * * `ucsm_params.mac_pool` :- Mac address pool.
     * * `ucsm_params.vlan_name` :- Name of vlan.
     */
    ucsmParams?: pulumi.Input<inputs.FoundationImageNodesBlockNodeUcsmParams>;
    vswitches?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNodeVswitch>[]>;
}

export interface FoundationImageNodesBlockNodeUcsmParams {
    keepUcsmSettings?: pulumi.Input<boolean>;
    macPool?: pulumi.Input<string>;
    nativeVlan?: pulumi.Input<boolean>;
    vlanName?: pulumi.Input<string>;
}

export interface FoundationImageNodesBlockNodeVswitch {
    /**
     * :- (Required if node is capable) dynamic if using LACP, static for LAG
     */
    bondMode?: pulumi.Input<string>;
    lacp?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    otherConfigs?: pulumi.Input<pulumi.Input<string>[]>;
    uplinks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationImageNodesCluster {
    /**
     * : - Backplane netmask.
     */
    backplaneNetmask?: pulumi.Input<string>;
    /**
     * : - Backplane subnet address.
     */
    backplaneSubnet?: pulumi.Input<string>;
    /**
     * : - Backplane vlan.
     */
    backplaneVlan?: pulumi.Input<string>;
    /**
     * : - External IP of the cluster.
     */
    clusterExternalIp?: pulumi.Input<string>;
    /**
     * : - (Optional, Default = true) If cluster should be created.
     */
    clusterInitNow?: pulumi.Input<boolean>;
    /**
     * : - If cluster initialization was successful.
     */
    clusterInitSuccessful?: pulumi.Input<boolean>;
    /**
     * : - (Required) Members in the cluster.
     */
    clusterMembers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * : - (Required) Name of the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * : - DNS servers of CVM.
     */
    cvmDnsServers?: pulumi.Input<string>;
    /**
     * : - NTP servers of CVM.
     */
    cvmNtpServers?: pulumi.Input<string>;
    /**
     * : - If network segmentation should be enabled.
     */
    enableNs?: pulumi.Input<boolean>;
    /**
     * : - NTP servers of hypervisor.
     */
    hypervisorNtpServers?: pulumi.Input<string>;
    /**
     * : - (Required) Cluster Redundancy Factor.
     */
    redundancyFactor: pulumi.Input<number>;
    /**
     * : - If it is a single node cluster.
     */
    singleNodeCluster?: pulumi.Input<boolean>;
}

export interface FoundationImageNodesClusterUrl {
    /**
     * : - (Required) Name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
}

export interface FoundationImageNodesEosMetadata {
    /**
     * : - arrya of account names
     */
    accountNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * : - Id of the Eos config uploaded in foundation GUI.
     */
    configId?: pulumi.Input<string>;
    /**
     * : - Email address of the user who downloaded Eos config.
     */
    email?: pulumi.Input<string>;
}

export interface FoundationImageNodesFcSettings {
    /**
     * :- Foundation Central metadata which will be transferred to the newly imaged node.
     * * `fc_metadata.fc_ip` :- IP address of foundation central.
     * * `fc_metadata.api_key` :- apiKey which the node uses to register itself with foundation central.
     */
    fcMetadata: pulumi.Input<inputs.FoundationImageNodesFcSettingsFcMetadata>;
    /**
     * :- If this attribute is set to True, FC workflow will be invoked.
     */
    foundationCentral: pulumi.Input<boolean>;
}

export interface FoundationImageNodesFcSettingsFcMetadata {
    apiKey: pulumi.Input<string>;
    fcIp: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIso {
    /**
     * : - Details of hypervisor ISO of type esx.
     */
    esx?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoEsx>;
    /**
     * : - Details of hypervisor ISO of type hyperv.
     */
    hyperv?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoHyperv>;
    /**
     * : - Details of hypervisor ISO of type kvm.
     */
    kvm?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoKvm>;
    /**
     * : - Details of hypervisor ISO of type xen.
     */
    xen?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoXen>;
}

export interface FoundationImageNodesHypervisorIsoEsx {
    /**
     * :- (Required) Filename of hypervisor ISO.
     */
    checksum: pulumi.Input<string>;
    /**
     * :- (Required) Checksum for ISO file.
     */
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoHyperv {
    /**
     * :- (Required) Filename of hypervisor ISO.
     */
    checksum: pulumi.Input<string>;
    /**
     * :- (Required) Checksum for ISO file.
     */
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoKvm {
    /**
     * :- (Required) Filename of hypervisor ISO.
     */
    checksum: pulumi.Input<string>;
    /**
     * :- (Required) Checksum for ISO file.
     */
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoXen {
    /**
     * :- (Required) Filename of hypervisor ISO.
     */
    checksum: pulumi.Input<string>;
    /**
     * :- (Required) Checksum for ISO file.
     */
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesTests {
    /**
     * : - Whether NCC checks should run.
     */
    runNcc?: pulumi.Input<boolean>;
    /**
     * : - Whether system checks should run.
     */
    runSyscheck?: pulumi.Input<boolean>;
}

export interface FoundationIpmiConfigBlock {
    blockId?: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationIpmiConfigBlockNode>[]>;
}

export interface FoundationIpmiConfigBlockNode {
    ipmiConfigureNow: pulumi.Input<boolean>;
    ipmiConfigureSuccessful?: pulumi.Input<boolean>;
    ipmiIp: pulumi.Input<string>;
    ipmiMac: pulumi.Input<string>;
    ipmiMessage?: pulumi.Input<string>;
}

export interface GetAccessControlPoliciesMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetAccessControlPoliciesMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetAccessControlPolicyCategory {
    name?: string;
    value?: string;
}

export interface GetAccessControlPolicyCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetAddressGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetAddressGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetAssertHelperCheckArgs {
    condition: pulumi.Input<boolean>;
    errorMessage: pulumi.Input<string>;
}

export interface GetAssertHelperCheck {
    condition: boolean;
    errorMessage: string;
}

export interface GetClusterCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetClusterCategory {
    name?: string;
    value?: string;
}

export interface GetFloatingIpsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetFloatingIpsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusArgs {
    aggregatePercentComplete?: pulumi.Input<number>;
    clusterCreationStarted?: pulumi.Input<boolean>;
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs>[]>;
    currentFoundationIp?: pulumi.Input<string>;
    foundationSessionId?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs>[]>;
}

export interface GetFoundationCentralClusterDetailsClusterStatus {
    aggregatePercentComplete?: number;
    clusterCreationStarted?: boolean;
    clusterProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail[];
    currentFoundationIp?: string;
    foundationSessionId?: string;
    imagingStopped?: boolean;
    intentPickedUp?: boolean;
    nodeProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs {
    clusterName?: pulumi.Input<string>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail {
    clusterName?: string;
    messageLists?: string[];
    percentComplete?: number;
    status?: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs {
    imagedNodeUuid?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail {
    imagedNodeUuid?: string;
    imagingStopped?: boolean;
    intentPickedUp?: boolean;
    messageLists?: string[];
    percentComplete?: number;
    status?: string;
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettingsArgs {
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettings {
    cvmDnsServers?: string[];
    cvmNtpServers?: string[];
    hypervisorDnsServers?: string[];
    hypervisorNtpServers?: string[];
}

export interface GetFoundationCentralImagedClustersListFilters {
    archived?: boolean;
}

export interface GetFoundationCentralImagedClustersListFiltersArgs {
    archived?: pulumi.Input<boolean>;
}

export interface GetFoundationCentralImagedNodesListFiltersArgs {
    nodeState?: pulumi.Input<string>;
}

export interface GetFoundationCentralImagedNodesListFilters {
    nodeState?: string;
}

export interface GetFoundationCentralListApiKeysMetadata {
    length?: number;
    offset?: number;
    totalMatches?: number;
}

export interface GetFoundationCentralListApiKeysMetadataArgs {
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetHostCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetHostCategory {
    name?: string;
    value?: string;
}

export interface GetImageCategory {
    name?: string;
    value?: string;
}

export interface GetImageCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNetworkSecurityRuleCategory {
    name?: string;
    value?: string;
}

export interface GetNetworkSecurityRuleCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetPbrsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetPbrsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetPermissionCategory {
    /**
     * the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetPermissionCategoryArgs {
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetPermissionsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetPermissionsMetadata {
    filter?: string;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetProjectCategory {
    /**
     * the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetProjectCategoryArgs {
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetProjectExternalUserGroupReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectSubnetReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectUserReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProtectionRuleCategoryArgs {
    /**
     * (Optional) the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetProtectionRuleCategory {
    /**
     * (Optional) the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetRecoveryPlanCategoryArgs {
    /**
     * (Optional) the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetRecoveryPlanCategory {
    /**
     * (Optional) the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetRoleCategory {
    name?: string;
    value?: string;
}

export interface GetRoleCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetRolesMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetRolesMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetServiceGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetServiceGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetSubnetAdditionalFilterArgs {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSubnetAdditionalFilter {
    name: string;
    values: string[];
}

export interface GetSubnetCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetSubnetCategory {
    name?: string;
    value?: string;
}

export interface GetSubnetsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetSubnetsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUserCategory {
    name?: string;
    value?: string;
}

export interface GetUserCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetUserGroupCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetUserGroupCategory {
    name?: string;
    value?: string;
}

export interface GetUserGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUserGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetUsersMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUsersMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetVirtualMachineCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetVirtualMachineCategory {
    name?: string;
    value?: string;
}

export interface GetVpcsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetVpcsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface ImageCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImageClusterReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ImageCurrentClusterReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface KarbonClusterActivePassiveConfig {
    externalIpv4Address: pulumi.Input<string>;
}

export interface KarbonClusterCniConfig {
    calicoConfig?: pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfig>;
    flannelConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigFlannelConfig>[]>;
    nodeCidrMaskSize?: pulumi.Input<number>;
    podIpv4Cidr?: pulumi.Input<string>;
    serviceIpv4Cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigCalicoConfig {
    ipPoolConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig>[]>;
}

export interface KarbonClusterCniConfigCalicoConfigIpPoolConfig {
    cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigFlannelConfig {
}

export interface KarbonClusterEtcdNodePool {
    ahvConfig?: pulumi.Input<inputs.KarbonClusterEtcdNodePoolAhvConfig>;
    name?: pulumi.Input<string>;
    nodeOsVersion: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterEtcdNodePoolNode>[]>;
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterEtcdNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterEtcdNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface KarbonClusterExternalLbConfig {
    externalIpv4Address: pulumi.Input<string>;
    masterNodesConfigs: pulumi.Input<pulumi.Input<inputs.KarbonClusterExternalLbConfigMasterNodesConfig>[]>;
}

export interface KarbonClusterExternalLbConfigMasterNodesConfig {
    ipv4Address: pulumi.Input<string>;
    nodePoolName?: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePool {
    ahvConfig?: pulumi.Input<inputs.KarbonClusterMasterNodePoolAhvConfig>;
    name?: pulumi.Input<string>;
    nodeOsVersion: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterMasterNodePoolNode>[]>;
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterMasterNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface KarbonClusterPrivateRegistry {
    registryName: pulumi.Input<string>;
}

export interface KarbonClusterSingleMasterConfig {
}

export interface KarbonClusterStorageClassConfig {
    name?: pulumi.Input<string>;
    /**
     * Reclaim policy for persistent volumes provisioned using the specified storage class.
     * * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
     * * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
     * * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
     * * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
     * * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
     * * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.
     */
    reclaimPolicy?: pulumi.Input<string>;
    volumesConfig: pulumi.Input<inputs.KarbonClusterStorageClassConfigVolumesConfig>;
}

export interface KarbonClusterStorageClassConfigVolumesConfig {
    fileSystem?: pulumi.Input<string>;
    flashMode?: pulumi.Input<boolean>;
    password: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
    storageContainer: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePool {
    ahvConfig?: pulumi.Input<inputs.KarbonClusterWorkerNodePoolAhvConfig>;
    name?: pulumi.Input<string>;
    nodeOsVersion: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterWorkerNodePoolNode>[]>;
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterWorkerNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleTargetGroupFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleTargetGroupFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PbrDestination {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface PbrProtocolParameters {
    icmp?: pulumi.Input<inputs.PbrProtocolParametersIcmp>;
    protocolNumber?: pulumi.Input<string>;
    tcp?: pulumi.Input<inputs.PbrProtocolParametersTcp>;
    udp?: pulumi.Input<inputs.PbrProtocolParametersUdp>;
}

export interface PbrProtocolParametersIcmp {
    icmpCode: pulumi.Input<number>;
    icmpType: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersTcpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersUdpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrSource {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface ProjectAccountReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectCategory {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface ProjectDefaultSubnetReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectEnvironmentReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalNetworkList {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectResourceDomain {
    resources: pulumi.Input<pulumi.Input<inputs.ProjectResourceDomainResource>[]>;
}

export interface ProjectResourceDomainResource {
    limit: pulumi.Input<number>;
    resourceType: pulumi.Input<string>;
    units?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<number>;
}

export interface ProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex?: pulumi.Input<number>;
    snapshotScheduleLists?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList>[]>;
    sourceAvailabilityZoneIndex?: pulumi.Input<number>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs?: pulumi.Input<number>;
    localSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy>;
    recoveryPointObjectiveSecs: pulumi.Input<number>;
    remoteSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy>;
    snapshotType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleCategory {
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilter {
    kindLists?: pulumi.Input<pulumi.Input<string>[]>;
    params?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleCategoryFilterParam>[]>;
    type?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilterParam {
    /**
     * The name for the protection rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterUuid?: pulumi.Input<string>;
}

export interface ProtectionRuleOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface ProtectionRuleProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanCategory {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParameters {
    floatingIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentList>[]>;
    networkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentList {
    availabilityZoneUrl: pulumi.Input<string>;
    vmIpAssignmentLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig>;
    testFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig>;
    vmNicInformation: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingList {
    areNetworksStretched?: pulumi.Input<boolean>;
    availabilityZoneNetworkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterReferenceLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList>[]>;
    recoveryIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList>[]>;
    recoveryNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork>;
    testIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList>[]>;
    testNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanStageList {
    delayTimeSecs?: pulumi.Input<number>;
    stageUuid?: pulumi.Input<string>;
    stageWork: pulumi.Input<inputs.RecoveryPlanStageListStageWork>;
}

export interface RecoveryPlanStageListStageWork {
    recoverEntities?: pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntities>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntities {
    entityInfoLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList {
    anyEntityReferenceKind?: pulumi.Input<string>;
    anyEntityReferenceName?: pulumi.Input<string>;
    anyEntityReferenceUuid?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory>[]>;
    scriptLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList {
    enableScriptExec: pulumi.Input<boolean>;
    timeout?: pulumi.Input<string>;
}

export interface RoleCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RoleOwnerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RolePermissionReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface RoleProjectReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ServiceGroupServiceList {
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListIcmpTypeCodeList>[]>;
    protocol?: pulumi.Input<string>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListUdpPortRangeList>[]>;
}

export interface ServiceGroupServiceListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ServiceGroupServiceListTcpPortRangeList {
    /**
     * End Port (Int)
     */
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface ServiceGroupServiceListUdpPortRangeList {
    /**
     * End Port (Int)
     */
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface StaticRoutesDefaultRouteNexthop {
    /**
     * Reference to a subnet.
     */
    externalSubnetReferenceUuid?: pulumi.Input<string>;
}

export interface StaticRoutesStaticRoutesList {
    /**
     * Destination ip with prefix.
     */
    destination: pulumi.Input<string>;
    /**
     * Reference to a subnet.
     */
    externalSubnetReferenceUuid?: pulumi.Input<string>;
    /**
     * Reference to a vpn connection.
     */
    vpnConnectionReferenceUuid?: pulumi.Input<string>;
}

export interface SubnetCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface UserAccessControlPolicyReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface UserCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUser {
    defaultUserPrincipalName?: pulumi.Input<string>;
    directoryServiceReference: pulumi.Input<inputs.UserDirectoryServiceUserDirectoryServiceReference>;
    userPrincipalName?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUserDirectoryServiceReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface UserIdentityProviderUser {
    identityProviderReference: pulumi.Input<inputs.UserIdentityProviderUserIdentityProviderReference>;
    username?: pulumi.Input<string>;
}

export interface UserIdentityProviderUserIdentityProviderReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface UserProjectReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VirtualMachineDiskList {
    /**
     * Reference to a data source.
     */
    dataSourceReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Properties to a device.
     */
    deviceProperties?: pulumi.Input<inputs.VirtualMachineDiskListDeviceProperties>;
    /**
     * Size of the disk in Bytes.
     */
    diskSizeBytes?: pulumi.Input<number>;
    /**
     * Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
     */
    diskSizeMib?: pulumi.Input<number>;
    storageConfig?: pulumi.Input<inputs.VirtualMachineDiskListStorageConfig>;
    uuid?: pulumi.Input<string>;
    /**
     * Reference to a volume group.
     */
    volumeGroupReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListDeviceProperties {
    deviceType?: pulumi.Input<string>;
    diskAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListStorageConfig {
    flashMode?: pulumi.Input<string>;
    storageContainerReferences?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDiskListStorageConfigStorageContainerReference>[]>;
}

export interface VirtualMachineDiskListStorageConfigStorageContainerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineGpuList {
    deviceId?: pulumi.Input<number>;
    /**
     * Fraction of the physical GPU assigned.
     * * `mode`: - (Optional) The mode of this GPU.
     * * `numVirtualDisplayHeads`: - (ReadOnly) Number of supported virtual display heads.
     * * `guestDriverVersion`: - (ReadOnly) Last determined guest driver version.
     * * `deviceId`: - (Computed) The device ID of the GPU.
     */
    fraction?: pulumi.Input<number>;
    frameBufferSizeMib?: pulumi.Input<number>;
    guestDriverVersion?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numVirtualDisplayHeads?: pulumi.Input<number>;
    /**
     * GPU {segment:bus:device:function} (sbdf) address if assigned.
     */
    pciAddress?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
}

export interface VirtualMachineNicList {
    ipEndpointLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListIpEndpointList>[]>;
    isConnected?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkFunctionNicType?: pulumi.Input<string>;
    nicType?: pulumi.Input<string>;
    numQueues?: pulumi.Input<number>;
    subnetName?: pulumi.Input<string>;
    subnetUuid?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineNicListIpEndpointList {
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatus {
    floatingIp?: pulumi.Input<string>;
    ipEndpointLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListStatusIpEndpointList>[]>;
    isConnected?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkFunctionNicType?: pulumi.Input<string>;
    nicType?: pulumi.Input<string>;
    numQueues?: pulumi.Input<number>;
    subnetName?: pulumi.Input<string>;
    subnetUuid?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatusIpEndpointList {
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VirtualMachineSerialPortList {
    index?: pulumi.Input<number>;
    isConnected?: pulumi.Input<boolean>;
}

export interface VpcCommonDomainNameServerIpList {
    /**
     * ip address.
     */
    ip?: pulumi.Input<string>;
}

export interface VpcExternalSubnetListStatus {
    activeGatewayNode?: pulumi.Input<inputs.VpcExternalSubnetListStatusActiveGatewayNode>;
    externalIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    externalSubnetReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VpcExternalSubnetListStatusActiveGatewayNode {
    hostReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ipAddress?: pulumi.Input<string>;
}

export interface VpcExternallyRoutablePrefixList {
    /**
     * ip address.
     */
    ip: pulumi.Input<string>;
    /**
     * prefix length.
     */
    prefixLength: pulumi.Input<number>;
}

