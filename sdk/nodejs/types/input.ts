// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlPolicyCategory {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface AccessControlPolicyContextFilterList {
    entityFilterExpressionLists: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionList>[]>;
    scopeFilterExpressionLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionList>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the entity type.
     */
    leftHandSideEntityType?: pulumi.Input<string>;
    /**
     * - (Required) The operator in the filter expression.
     */
    operator: pulumi.Input<string>;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories>;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection?: pulumi.Input<string>;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the scope type.
     */
    leftHandSide: pulumi.Input<string>;
    /**
     * - (Required) The operator of the filter expression.
     */
    operator: pulumi.Input<string>;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories>;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection?: pulumi.Input<string>;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyOwnerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface AccessControlPolicyRoleReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyUserGroupReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyUserReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface AddressGroupIpAddressBlockList {
    ip: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface FoundationCentralImageClusterClusterStatus {
    aggregatePercentComplete?: pulumi.Input<number>;
    clusterCreationStarted?: pulumi.Input<boolean>;
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail>[]>;
    currentFoundationIp?: pulumi.Input<string>;
    foundationSessionId?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail>[]>;
}

export interface FoundationCentralImageClusterClusterStatusClusterProgressDetail {
    /**
     * Name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterCommonNetworkSettings {
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfig {
    blocks?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlock>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigCluster>[]>;
    cvmGateway?: pulumi.Input<string>;
    cvmNetmask?: pulumi.Input<string>;
    dnsServers?: pulumi.Input<string>;
    hypervProductKey?: pulumi.Input<string>;
    hypervSku?: pulumi.Input<string>;
    hypervisorGateway?: pulumi.Input<string>;
    hypervisorIsoUrl?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisorIsos?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso>[]>;
    hypervisorNetmask?: pulumi.Input<string>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    nosPackageUrls?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlock {
    blockId?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlockNode>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlockNode {
    cvmIp?: pulumi.Input<string>;
    cvmVlanId?: pulumi.Input<number>;
    fcImagedNodeUuid?: pulumi.Input<string>;
    hardwareAttributesOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisor?: pulumi.Input<string>;
    hypervisorHostname?: pulumi.Input<string>;
    hypervisorIp?: pulumi.Input<string>;
    imageNow?: pulumi.Input<boolean>;
    ipmiIp?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    nodePosition?: pulumi.Input<string>;
    nodeSerial?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigCluster {
    /**
     * External management ip of the cluster.
     */
    clusterExternalIp?: pulumi.Input<string>;
    clusterInitNow?: pulumi.Input<boolean>;
    clusterInitSuccessful?: pulumi.Input<boolean>;
    clusterMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    cvmDnsServers?: pulumi.Input<string>;
    cvmNtpServers?: pulumi.Input<string>;
    /**
     * Redundancy factor of the cluster.
     */
    redundancyFactor?: pulumi.Input<number>;
    /**
     * Timezone to be set on the cluster.
     */
    timezone?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigHypervisorIso {
    hypervisorType?: pulumi.Input<string>;
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigNosPackageUrl {
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterHypervisorIsoDetails {
    hypervProductKey?: pulumi.Input<string>;
    hypervSku?: pulumi.Input<string>;
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterNodeList {
    cvmGateway?: pulumi.Input<string>;
    cvmIp?: pulumi.Input<string>;
    cvmNetmask?: pulumi.Input<string>;
    cvmRamGb?: pulumi.Input<number>;
    cvmVlanId?: pulumi.Input<number>;
    hardwareAttributesOverride?: pulumi.Input<{[key: string]: any}>;
    hypervisorGateway?: pulumi.Input<string>;
    hypervisorHostname?: pulumi.Input<string>;
    hypervisorIp?: pulumi.Input<string>;
    hypervisorNetmask?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    imageNow?: pulumi.Input<boolean>;
    imagedNodeUuid?: pulumi.Input<string>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiIp?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    rdmaPassthrough?: pulumi.Input<boolean>;
    useExistingNetworkSettings?: pulumi.Input<boolean>;
}

export interface FoundationImageNodesBlock {
    /**
     * - Block ID.
     */
    blockId?: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNode>[]>;
}

export interface FoundationImageNodesBlockNode {
    /**
     * - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
     */
    bondLacpRate?: pulumi.Input<string>;
    /**
     * - (Required if node is capable) dynamic if using LACP, static for LAG
     */
    bondMode?: pulumi.Input<string>;
    /**
     * - MAC Addresses of NICs in a team/bond
     */
    bondUplinks?: pulumi.Input<string>;
    /**
     * - ID of cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * - Current CVM vlan tag. 0 Value with remove vlan tag.
     */
    currentCvmVlanTag?: pulumi.Input<number>;
    /**
     * - CVM current network interface.
     */
    currentNetworkInterface?: pulumi.Input<string>;
    /**
     * - RAM capacity of CVM in GB.
     */
    cvmGbRam?: pulumi.Input<number>;
    cvmIp?: pulumi.Input<string>;
    /**
     * - Number of CVM vcpus.
     */
    cvmNumVcpus?: pulumi.Input<number>;
    /**
     * - use "vmInstaller" to enable CVM imaging from standalone.
     */
    deviceHint?: pulumi.Input<string>;
    /**
     * - serial of boot device to be excluded (used by NX G6 platforms)
     */
    exludeBootSerial?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    /**
     * - (Required) Hypervisor Hostname.
     */
    hypervisorHostname: pulumi.Input<string>;
    /**
     * - (Required) Hypervisor IP address.
     */
    hypervisorIp: pulumi.Input<string>;
    /**
     * - Imaging delay.
     */
    imageDelay?: pulumi.Input<number>;
    /**
     * - (Optional, Default = true) If the node should be imaged now.
     */
    imageNow?: pulumi.Input<boolean>;
    imageSuccessful?: pulumi.Input<boolean>;
    /**
     * - Whether IPMI should be configured.
     */
    ipmiConfigureNow?: pulumi.Input<boolean>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
     */
    ipmiGateway?: pulumi.Input<string>;
    /**
     * - (Required) IPMI IP address.
     */
    ipmiIp?: pulumi.Input<string>;
    /**
     * - IPMI MAC address.
     */
    ipmiMac?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
     */
    ipmiNetmask?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
     */
    ipmiPassword?: pulumi.Input<string>;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
     */
    ipmiUser?: pulumi.Input<string>;
    /**
     * - (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) IPV6 address.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * - (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) ipv6 interface.
     */
    ipv6Interface?: pulumi.Input<string>;
    /**
     * - relocate bootbank files to make space for phoenix files.
     */
    mitigateLowBootSpace?: pulumi.Input<boolean>;
    /**
     * - (Required) Position of the node in the block.
     */
    nodePosition: pulumi.Input<string>;
    /**
     * - serial number of the node.
     */
    nodeSerial?: pulumi.Input<string>;
    /**
     * - mac address of nic to be used for rdma
     */
    rdmaMacAddr?: pulumi.Input<string>;
    /**
     * - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
     */
    rdmaPassthrough?: pulumi.Input<boolean>;
    /**
     * - UCSM Managed mode.
     */
    ucsmManagedMode?: pulumi.Input<string>;
    /**
     * - UCSM node serial.
     */
    ucsmNodeSerial?: pulumi.Input<string>;
    /**
     * - Object of UCSM parameters.
     * * `ucsm_params.native_vlan` :- If the vlan is native.
     * * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
     * * `ucsm_params.mac_pool` :- Mac address pool.
     * * `ucsm_params.vlan_name` :- Name of vlan.
     */
    ucsmParams?: pulumi.Input<inputs.FoundationImageNodesBlockNodeUcsmParams>;
    vswitches?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNodeVswitch>[]>;
}

export interface FoundationImageNodesBlockNodeUcsmParams {
    keepUcsmSettings?: pulumi.Input<boolean>;
    macPool?: pulumi.Input<string>;
    nativeVlan?: pulumi.Input<boolean>;
    vlanName?: pulumi.Input<string>;
}

export interface FoundationImageNodesBlockNodeVswitch {
    bondMode?: pulumi.Input<string>;
    lacp?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    otherConfigs?: pulumi.Input<pulumi.Input<string>[]>;
    uplinks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationImageNodesCluster {
    /**
     * - Backplane netmask.
     */
    backplaneNetmask?: pulumi.Input<string>;
    /**
     * - Backplane subnet address.
     */
    backplaneSubnet?: pulumi.Input<string>;
    /**
     * - Backplane vlan.
     */
    backplaneVlan?: pulumi.Input<string>;
    /**
     * - External IP of the cluster.
     */
    clusterExternalIp?: pulumi.Input<string>;
    /**
     * - (Optional, Default = true) If cluster should be created.
     */
    clusterInitNow?: pulumi.Input<boolean>;
    /**
     * - If cluster initialization was successful.
     */
    clusterInitSuccessful?: pulumi.Input<boolean>;
    /**
     * - (Required) Members in the cluster.
     */
    clusterMembers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - (Required) Name of the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * - DNS servers of CVM.
     */
    cvmDnsServers?: pulumi.Input<string>;
    /**
     * - NTP servers of CVM.
     */
    cvmNtpServers?: pulumi.Input<string>;
    /**
     * - If network segmentation should be enabled.
     */
    enableNs?: pulumi.Input<boolean>;
    /**
     * - NTP servers of hypervisor.
     */
    hypervisorNtpServers?: pulumi.Input<string>;
    /**
     * - (Required) Cluster Redundancy Factor.
     */
    redundancyFactor: pulumi.Input<number>;
    /**
     * - If it is a single node cluster.
     */
    singleNodeCluster?: pulumi.Input<boolean>;
    /**
     * - Set timezone for every CVM
     */
    timezone?: pulumi.Input<string>;
}

export interface FoundationImageNodesClusterUrl {
    clusterName?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
}

export interface FoundationImageNodesEosMetadata {
    /**
     * - arrya of account names
     */
    accountNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - Id of the Eos config uploaded in foundation GUI.
     */
    configId?: pulumi.Input<string>;
    /**
     * - Email address of the user who downloaded Eos config.
     */
    email?: pulumi.Input<string>;
}

export interface FoundationImageNodesFcSettings {
    /**
     * - Foundation Central metadata which will be transferred to the newly imaged node.
     * * `fc_metadata.fc_ip` :- IP address of foundation central.
     * * `fc_metadata.api_key` :- apiKey which the node uses to register itself with foundation central.
     */
    fcMetadata: pulumi.Input<inputs.FoundationImageNodesFcSettingsFcMetadata>;
    /**
     * - If this attribute is set to True, FC workflow will be invoked.
     */
    foundationCentral: pulumi.Input<boolean>;
}

export interface FoundationImageNodesFcSettingsFcMetadata {
    apiKey: pulumi.Input<string>;
    fcIp: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIso {
    /**
     * - Details of hypervisor ISO of type esx.
     */
    esx?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoEsx>;
    /**
     * - Details of hypervisor ISO of type hyperv.
     */
    hyperv?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoHyperv>;
    /**
     * - Details of hypervisor ISO of type kvm.
     */
    kvm?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoKvm>;
    /**
     * - Details of hypervisor ISO of type xen.
     */
    xen?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoXen>;
}

export interface FoundationImageNodesHypervisorIsoEsx {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoHyperv {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoKvm {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoXen {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesTests {
    /**
     * - Whether NCC checks should run.
     */
    runNcc?: pulumi.Input<boolean>;
    /**
     * - Whether system checks should run.
     */
    runSyscheck?: pulumi.Input<boolean>;
}

export interface FoundationIpmiConfigBlock {
    /**
     * - (Optional) Block Id
     */
    blockId?: pulumi.Input<string>;
    /**
     * - (Required) array of nodes for ipmi config.
     */
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationIpmiConfigBlockNode>[]>;
}

export interface FoundationIpmiConfigBlockNode {
    /**
     * - (Required) Whether IPMI should be configured. Should be kept true to configure
     */
    ipmiConfigureNow: pulumi.Input<boolean>;
    /**
     * - Whether IPMI was successfully configured.
     */
    ipmiConfigureSuccessful?: pulumi.Input<boolean>;
    /**
     * - IPMI IP address.
     */
    ipmiIp: pulumi.Input<string>;
    /**
     * - (Required) IPMI mac address.
     */
    ipmiMac: pulumi.Input<string>;
    /**
     * - IPMI configuration status message if any.
     */
    ipmiMessage?: pulumi.Input<string>;
}

export interface GetAccessControlPoliciesMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetAccessControlPoliciesMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetAccessControlPolicyCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetAccessControlPolicyCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetAddressGroupsMetadata {
    /**
     * (Optional) Filter in FIQL Syntax
     */
    filter?: string;
    kind?: string;
    /**
     * (Optional) Integer
     */
    length?: number;
    /**
     * (Optional) Integer
     */
    offset?: number;
    /**
     * (Optional) attribute to sort
     */
    sortAttribute?: string;
    /**
     * (Optional) order of sorting
     */
    sortOrder?: string;
}

export interface GetAddressGroupsMetadataArgs {
    /**
     * (Optional) Filter in FIQL Syntax
     */
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    /**
     * (Optional) Integer
     */
    length?: pulumi.Input<number>;
    /**
     * (Optional) Integer
     */
    offset?: pulumi.Input<number>;
    /**
     * (Optional) attribute to sort
     */
    sortAttribute?: pulumi.Input<string>;
    /**
     * (Optional) order of sorting
     */
    sortOrder?: pulumi.Input<string>;
}

export interface GetAssertHelperCheck {
    condition: boolean;
    errorMessage: string;
}

export interface GetAssertHelperCheckArgs {
    condition: pulumi.Input<boolean>;
    errorMessage: pulumi.Input<string>;
}

export interface GetClusterCategory {
    /**
     * - the key name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetClusterCategoryArgs {
    /**
     * - the key name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetFloatingIpsMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetFloatingIpsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetFoundationCentralClusterDetailsClusterStatus {
    /**
     * Overall progress percentage including imaging and cluster creation.
     */
    aggregatePercentComplete?: number;
    /**
     * Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
     */
    clusterCreationStarted?: boolean;
    /**
     * Denotes the progress status of cluster creation.
     */
    clusterProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail[];
    /**
     * Current IP address of the coordinating foundation node.
     */
    currentFoundationIp?: string;
    /**
     * Foundation session id for cluster creation.
     */
    foundationSessionId?: string;
    /**
     * Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
     */
    imagingStopped?: boolean;
    /**
     * Denotes whether the remote nodes has picked up the cluster creation intent.
     */
    intentPickedUp?: boolean;
    /**
     * List of progress details of each node.
     */
    nodeProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralClusterDetailsClusterStatusArgs {
    /**
     * Overall progress percentage including imaging and cluster creation.
     */
    aggregatePercentComplete?: pulumi.Input<number>;
    /**
     * Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
     */
    clusterCreationStarted?: pulumi.Input<boolean>;
    /**
     * Denotes the progress status of cluster creation.
     */
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs>[]>;
    /**
     * Current IP address of the coordinating foundation node.
     */
    currentFoundationIp?: pulumi.Input<string>;
    /**
     * Foundation session id for cluster creation.
     */
    foundationSessionId?: pulumi.Input<string>;
    /**
     * Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
     */
    imagingStopped?: pulumi.Input<boolean>;
    /**
     * Denotes whether the remote nodes has picked up the cluster creation intent.
     */
    intentPickedUp?: pulumi.Input<boolean>;
    /**
     * List of progress details of each node.
     */
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs>[]>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail {
    /**
     * Cluster name.
     */
    clusterName?: string;
    /**
     * List of messages for the client based on process state.
     */
    messageLists?: string[];
    /**
     * Percent completion of cluster creation process.
     */
    percentComplete?: number;
    /**
     * Current status of cluster creation process.
     */
    status?: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs {
    /**
     * Cluster name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * List of messages for the client based on process state.
     */
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Percent completion of cluster creation process.
     */
    percentComplete?: pulumi.Input<number>;
    /**
     * Current status of cluster creation process.
     */
    status?: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail {
    /**
     * UUID of the node.
     */
    imagedNodeUuid?: string;
    /**
     * Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
     */
    imagingStopped?: boolean;
    /**
     * Denotes whether the remote nodes has picked up the cluster creation intent.
     */
    intentPickedUp?: boolean;
    /**
     * List of messages for the client based on process state.
     */
    messageLists?: string[];
    /**
     * Percent completion of cluster creation process.
     */
    percentComplete?: number;
    /**
     * Current status of cluster creation process.
     */
    status?: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs {
    /**
     * UUID of the node.
     */
    imagedNodeUuid?: pulumi.Input<string>;
    /**
     * Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
     */
    imagingStopped?: pulumi.Input<boolean>;
    /**
     * Denotes whether the remote nodes has picked up the cluster creation intent.
     */
    intentPickedUp?: pulumi.Input<boolean>;
    /**
     * List of messages for the client based on process state.
     */
    messageLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Percent completion of cluster creation process.
     */
    percentComplete?: pulumi.Input<number>;
    /**
     * Current status of cluster creation process.
     */
    status?: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettings {
    /**
     * List of dns servers for the cvms in the cluster.
     */
    cvmDnsServers?: string[];
    /**
     * List of ntp servers for the cvms in the cluster.
     */
    cvmNtpServers?: string[];
    /**
     * List of dns servers for the hypervisors in the cluster.
     */
    hypervisorDnsServers?: string[];
    /**
     * List of ntp servers for the hypervisors in the cluster.
     */
    hypervisorNtpServers?: string[];
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettingsArgs {
    /**
     * List of dns servers for the cvms in the cluster.
     */
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of ntp servers for the cvms in the cluster.
     */
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of dns servers for the hypervisors in the cluster.
     */
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of ntp servers for the hypervisors in the cluster.
     */
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFoundationCentralImagedClustersListFilters {
    /**
     * True if the cluster creation request is archived, False otherwise
     */
    archived?: boolean;
}

export interface GetFoundationCentralImagedClustersListFiltersArgs {
    /**
     * True if the cluster creation request is archived, False otherwise
     */
    archived?: pulumi.Input<boolean>;
}

export interface GetFoundationCentralImagedNodesListFilters {
    /**
     * Specifies whether the node is discovering, available or unavailable for cluster creation.
     */
    nodeState?: string;
}

export interface GetFoundationCentralImagedNodesListFiltersArgs {
    /**
     * Specifies whether the node is discovering, available or unavailable for cluster creation.
     */
    nodeState?: pulumi.Input<string>;
}

export interface GetFoundationCentralListApiKeysMetadata {
    /**
     * The number of records retrieved.
     */
    length?: number;
    /**
     * Offset from the start of the object list.
     */
    offset?: number;
    /**
     * Total matches found.
     */
    totalMatches?: number;
}

export interface GetFoundationCentralListApiKeysMetadataArgs {
    /**
     * The number of records retrieved.
     */
    length?: pulumi.Input<number>;
    /**
     * Offset from the start of the object list.
     */
    offset?: pulumi.Input<number>;
    /**
     * Total matches found.
     */
    totalMatches?: pulumi.Input<number>;
}

export interface GetHostCategory {
    /**
     * - the key name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetHostCategoryArgs {
    /**
     * - the key name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetImageCategory {
    /**
     * - the name.
     */
    name?: string;
    value?: string;
}

export interface GetImageCategoryArgs {
    /**
     * - the name.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbCloneFilter {
    /**
     * Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
     */
    anyStatus?: string;
    /**
     * Load entities with complete details. Default is false
     */
    detailed?: string;
    /**
     * Load cluster info. Default is false
     */
    loadDbserverCluster?: string;
    /**
     * Default is UTC
     */
    timezone?: string;
}

export interface GetNdbCloneFilterArgs {
    /**
     * Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
     */
    anyStatus?: pulumi.Input<string>;
    /**
     * Load entities with complete details. Default is false
     */
    detailed?: pulumi.Input<string>;
    /**
     * Load cluster info. Default is false
     */
    loadDbserverCluster?: pulumi.Input<string>;
    /**
     * Default is UTC
     */
    timezone?: pulumi.Input<string>;
}

export interface GetNdbCloneTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbCloneTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbClonesFilter {
    /**
     * Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
     */
    anyStatus?: string;
    /**
     * Load entities with complete details. Default is false
     */
    detailed?: string;
    /**
     * Load cluster info. Default is false
     */
    loadDbserverCluster?: string;
    /**
     * Sorted by dbserver cluster. Default is false
     */
    orderByDbserverCluster?: string;
    /**
     * Sorted by dbserver logical cluster.  Default is false
     */
    orderByDbserverLogicalCluster?: string;
    /**
     * Default is UTC
     */
    timezone?: string;
}

export interface GetNdbClonesFilterArgs {
    /**
     * Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
     */
    anyStatus?: pulumi.Input<string>;
    /**
     * Load entities with complete details. Default is false
     */
    detailed?: pulumi.Input<string>;
    /**
     * Load cluster info. Default is false
     */
    loadDbserverCluster?: pulumi.Input<string>;
    /**
     * Sorted by dbserver cluster. Default is false
     */
    orderByDbserverCluster?: pulumi.Input<string>;
    /**
     * Sorted by dbserver logical cluster.  Default is false
     */
    orderByDbserverLogicalCluster?: pulumi.Input<string>;
    /**
     * Default is UTC
     */
    timezone?: pulumi.Input<string>;
}

export interface GetNdbDatabaseTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbDatabaseTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbDbserverTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbDbserverTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbMaintenanceWindowTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbMaintenanceWindowTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbSnapshotFilter {
    /**
     * load child snapshots. Default is false
     */
    loadReplicatedChildSnapshots?: string;
    /**
     * Default is UTC
     */
    timezone?: string;
}

export interface GetNdbSnapshotFilterArgs {
    /**
     * load child snapshots. Default is false
     */
    loadReplicatedChildSnapshots?: pulumi.Input<string>;
    /**
     * Default is UTC
     */
    timezone?: pulumi.Input<string>;
}

export interface GetNdbSnapshotTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbSnapshotTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbSnapshotsFilter {
    /**
     * Fetches all the snapshots for a given time machine
     */
    timeMachineId?: string;
}

export interface GetNdbSnapshotsFilterArgs {
    /**
     * Fetches all the snapshots for a given time machine
     */
    timeMachineId?: pulumi.Input<string>;
}

export interface GetNdbTimeMachineTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbTimeMachineTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNetworkSecurityRuleCategory {
    /**
     * - the name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetNetworkSecurityRuleCategoryArgs {
    /**
     * - the name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetPbrsMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetPbrsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetPermissionCategory {
    /**
     * the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetPermissionCategoryArgs {
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetPermissionsMetadata {
    filter?: string;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetPermissionsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetProjectCategory {
    /**
     * the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetProjectCategoryArgs {
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectExternalUserGroupReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectSubnetReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * the name.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface GetProjectUserReferenceListArgs {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * the name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface GetProtectionRuleCategory {
    /**
     * (Optional) the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetProtectionRuleCategoryArgs {
    /**
     * (Optional) the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetRecoveryPlanCategory {
    /**
     * (Optional) the name.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface GetRecoveryPlanCategoryArgs {
    /**
     * (Optional) the name.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetRoleCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetRoleCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetRolesMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetRolesMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetServiceGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetServiceGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetSubnetAdditionalFilter {
    /**
     * - the name(Optional).
     */
    name: string;
    values: string[];
}

export interface GetSubnetAdditionalFilterArgs {
    /**
     * - the name(Optional).
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSubnetCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetSubnetCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetSubnetsMetadata {
    filter?: string;
    /**
     * The kind name (Default value: project.
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetSubnetsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * The kind name (Default value: project.
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetUserCategory {
    /**
     * - (Optional) The name for the user
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetUserCategoryArgs {
    /**
     * - (Optional) The name for the user
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetUserGroupCategory {
    /**
     * - the name(Optional).
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetUserGroupCategoryArgs {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetUserGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUserGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetUsersMetadata {
    filter?: string;
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUsersMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetVirtualMachineCategory {
    /**
     * - the name.
     */
    name?: string;
    /**
     * - value of the key.
     */
    value?: string;
}

export interface GetVirtualMachineCategoryArgs {
    /**
     * - the name.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface GetVpcsMetadata {
    filter?: string;
    /**
     * - The kind name (Default value: project).
     */
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetVpcsMetadataArgs {
    filter?: pulumi.Input<string>;
    /**
     * - The kind name (Default value: project).
     */
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface ImageCategory {
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImageClusterReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface ImageCurrentClusterReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the image.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface KarbonClusterActivePassiveConfig {
    externalIpv4Address: pulumi.Input<string>;
}

export interface KarbonClusterCniConfig {
    /**
     * - (Optional) Configuration of the calico CNI provider.
     * * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
     * * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
     */
    calicoConfig?: pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfig>;
    /**
     * - (Optional) Configuration of the flannel container network interface (CNI) provider.
     */
    flannelConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigFlannelConfig>[]>;
    /**
     * - (Optional) The size of the subnet from the podIpv4Cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
     */
    nodeCidrMaskSize?: pulumi.Input<number>;
    /**
     * - (Optional) CIDR for pods in the cluster.
     */
    podIpv4Cidr?: pulumi.Input<string>;
    /**
     * - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
     */
    serviceIpv4Cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigCalicoConfig {
    ipPoolConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig>[]>;
}

export interface KarbonClusterCniConfigCalicoConfigIpPoolConfig {
    cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigFlannelConfig {
}

export interface KarbonClusterEtcdNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonClusterEtcdNodePoolAhvConfig>;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: pulumi.Input<string>;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterEtcdNodePoolNode>[]>;
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterEtcdNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterEtcdNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface KarbonClusterExternalLbConfig {
    externalIpv4Address: pulumi.Input<string>;
    masterNodesConfigs: pulumi.Input<pulumi.Input<inputs.KarbonClusterExternalLbConfigMasterNodesConfig>[]>;
}

export interface KarbonClusterExternalLbConfigMasterNodesConfig {
    ipv4Address: pulumi.Input<string>;
    nodePoolName?: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonClusterMasterNodePoolAhvConfig>;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: pulumi.Input<string>;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterMasterNodePoolNode>[]>;
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterMasterNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface KarbonClusterPrivateRegistry {
    registryName: pulumi.Input<string>;
}

export interface KarbonClusterSingleMasterConfig {
}

export interface KarbonClusterStorageClassConfig {
    /**
     * - (Required) The name of the storage class.
     */
    name?: pulumi.Input<string>;
    /**
     * Reclaim policy for persistent volumes provisioned using the specified storage class.
     * * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
     * * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
     * * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
     * * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
     * * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
     * * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.
     *
     * **Note:** Updates to this attribute forces new resource creation.
     */
    reclaimPolicy?: pulumi.Input<string>;
    volumesConfig: pulumi.Input<inputs.KarbonClusterStorageClassConfigVolumesConfig>;
}

export interface KarbonClusterStorageClassConfigVolumesConfig {
    fileSystem?: pulumi.Input<string>;
    flashMode?: pulumi.Input<boolean>;
    password: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
    storageContainer: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonClusterWorkerNodePoolAhvConfig>;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: pulumi.Input<string>;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: pulumi.Input<string>;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterWorkerNodePoolNode>[]>;
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterWorkerNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePoolNode {
    hostname?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
}

export interface KarbonWorkerNodepoolAhvConfig {
    /**
     * - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     */
    cpu?: pulumi.Input<number>;
    /**
     * - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     */
    diskMib?: pulumi.Input<number>;
    /**
     * VM network UUID for isolating iscsi data traffic.
     */
    iscsiNetworkUuid?: pulumi.Input<string>;
    /**
     * - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     */
    memoryMib?: pulumi.Input<number>;
    /**
     * - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     */
    networkUuid: pulumi.Input<string>;
    /**
     * - (Optional) The unique universal identifier (UUID) of the Prism Element
     */
    prismElementClusterUuid?: pulumi.Input<string>;
}

export interface KarbonWorkerNodepoolNode {
    /**
     * hostname of node
     */
    hostname?: pulumi.Input<string>;
    /**
     * ipv4 address of node
     */
    ipv4Address?: pulumi.Input<string>;
}

export interface NdbCloneActionargument {
    /**
     * - (Required) name of argument
     */
    name: pulumi.Input<string>;
    /**
     * - (Required) value for argument
     */
    value: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNode {
    accessLevel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    dbserver?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specify if you want to create a database server. This value can be set to true or false as required.
     */
    dbserverId?: pulumi.Input<string>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of clone
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeInfo>[]>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeProperty>[]>;
    protectionDomainId?: pulumi.Input<string>;
    protectionDomains?: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId?: pulumi.Input<string>;
    /**
     * status of clone
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeTag>[]>;
}

export interface NdbCloneDatabaseNodeInfo {
    /**
     * info of clone
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbCloneDatabaseNodeProperty {
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNodeProtectionDomain {
    assocEntities?: pulumi.Input<pulumi.Input<string>[]>;
    cloudId?: pulumi.Input<string>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    eraCreated?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    primaryHost?: pulumi.Input<string>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeProtectionDomainProperty>[]>;
    /**
     * status of clone
     */
    status?: pulumi.Input<string>;
    /**
     * type of clone
     */
    type?: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNodeProtectionDomainProperty {
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNodeTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbCloneInfo {
    bpgConfigs?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfig>[]>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbCloneInfoBpgConfig {
    bpgDbParams?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigBpgDbParam>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorage>[]>;
    vmProperties?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigVmProperty>[]>;
}

export interface NdbCloneInfoBpgConfigBpgDbParam {
    effectiveCacheSize?: pulumi.Input<string>;
    maintenanceWorkMem?: pulumi.Input<string>;
    maxParallelWorkersPerGather?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    sharedBuffers?: pulumi.Input<string>;
    workMem?: pulumi.Input<string>;
}

export interface NdbCloneInfoBpgConfigStorage {
    archiveStorages?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorageDataDisk>[]>;
    logDisks?: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbCloneInfoBpgConfigStorageArchiveStorage {
    size?: pulumi.Input<number>;
}

export interface NdbCloneInfoBpgConfigStorageDataDisk {
    count?: pulumi.Input<number>;
}

export interface NdbCloneInfoBpgConfigStorageLogDisk {
    count?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
}

export interface NdbCloneInfoBpgConfigVmProperty {
    dirtyBackgroundRatio?: pulumi.Input<number>;
    dirtyExpireCentisecs?: pulumi.Input<number>;
    dirtyRatio?: pulumi.Input<number>;
    dirtyWritebackCentisecs?: pulumi.Input<number>;
    nrHugepages?: pulumi.Input<number>;
    overcommitMemory?: pulumi.Input<number>;
    swappiness?: pulumi.Input<number>;
}

export interface NdbCloneLcmConfig {
    databaseLcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfigDatabaseLcmConfig>[]>;
}

export interface NdbCloneLcmConfigDatabaseLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    expireInDays?: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
}

export interface NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail {
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbCloneLinkedDatabase {
    /**
     * database name
     */
    databaseName?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of clone
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbCloneLinkedDatabaseInfo>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    parentDatabaseId?: pulumi.Input<string>;
    parentLinkedDatabaseId?: pulumi.Input<string>;
    /**
     * snapshot id from where clone is created
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * status of clone
     */
    status?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface NdbCloneLinkedDatabaseInfo {
    /**
     * info of clone
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbCloneNode {
    /**
     * specify compute profile id
     */
    computeProfileId?: pulumi.Input<string>;
    /**
     * dberver id
     */
    dbserverId?: pulumi.Input<string>;
    /**
     * specify network profile id
     */
    networkProfileId?: pulumi.Input<string>;
    /**
     * dbserver time zone
     */
    newDbServerTimeZone?: pulumi.Input<string>;
    /**
     * cluster id
     */
    nxClusterId?: pulumi.Input<string>;
    /**
     * properties of vm
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbCloneNodeProperty>[]>;
    /**
     * name for the database server VM.
     */
    vmName?: pulumi.Input<string>;
}

export interface NdbCloneNodeProperty {
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbClonePostgresqlInfo {
    /**
     * password of the postgres superuser.
     */
    dbPassword: pulumi.Input<string>;
    /**
     * description for the dbserver.
     */
    dbserverDescription?: pulumi.Input<string>;
    /**
     * OS command that you want to run after the instance is created.
     */
    postCloneCmd?: pulumi.Input<string>;
    /**
     * OS command that you want to run before the instance is created.
     */
    preCloneCmd?: pulumi.Input<string>;
    /**
     * name for the database server VM.
     */
    vmName: pulumi.Input<string>;
}

export interface NdbCloneProperty {
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbCloneTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbCloneTimeMachine {
    accessLevel?: pulumi.Input<string>;
    /**
     * cloned or not
     */
    clone?: pulumi.Input<boolean>;
    clones?: pulumi.Input<string>;
    /**
     * clone will be clustered or not
     */
    clustered?: pulumi.Input<boolean>;
    database?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    eaStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<string>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineProperty>[]>;
    scheduleId?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineSchedule>[]>;
    scope?: pulumi.Input<string>;
    slaId?: pulumi.Input<string>;
    slaUpdateInProgress?: pulumi.Input<boolean>;
    slaUpdateMetadata?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineSla>[]>;
    sourceNxClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * status of clone
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineTag>[]>;
    /**
     * type of clone
     */
    type?: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineProperty {
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineSchedule {
    continuousSchedules?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleDailySchedule>[]>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    globalPolicy?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    monthlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleMonthlySchedule>[]>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    quartelySchedules?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount?: pulumi.Input<number>;
    snapshotTimeOfDays?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime?: pulumi.Input<string>;
    systemPolicy?: pulumi.Input<boolean>;
    /**
     * timezone
     */
    timeZone?: pulumi.Input<string>;
    uniqueName?: pulumi.Input<string>;
    weeklySchedules?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbCloneTimeMachineScheduleContinuousSchedule {
    enabled?: pulumi.Input<boolean>;
    logBackupInterval?: pulumi.Input<number>;
    snapshotsPerDay?: pulumi.Input<number>;
}

export interface NdbCloneTimeMachineScheduleDailySchedule {
    enabled?: pulumi.Input<boolean>;
}

export interface NdbCloneTimeMachineScheduleMonthlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbCloneTimeMachineScheduleQuartelySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    startMonth?: pulumi.Input<string>;
    startMonthValue?: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineScheduleSnapshotTimeOfDay {
    extra?: pulumi.Input<boolean>;
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
    seconds?: pulumi.Input<number>;
}

export interface NdbCloneTimeMachineScheduleWeeklySchedule {
    dayOfWeek?: pulumi.Input<string>;
    dayOfWeekValue?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbCloneTimeMachineScheduleYearlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    month?: pulumi.Input<string>;
    monthValue?: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineSla {
    continuousRetention?: pulumi.Input<number>;
    currentActiveFrequency?: pulumi.Input<string>;
    dailyRetention?: pulumi.Input<number>;
    /**
     * date created for clone
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * last modified date for clone
     */
    dateModified?: pulumi.Input<string>;
    /**
     * database instance description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monthlyRetention?: pulumi.Input<number>;
    /**
     * database instance name
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    pitrEnabled?: pulumi.Input<boolean>;
    quarterlyRetention?: pulumi.Input<number>;
    referenceCount?: pulumi.Input<number>;
    systemSla?: pulumi.Input<boolean>;
    uniqueName?: pulumi.Input<string>;
    weeklyRetention?: pulumi.Input<number>;
    yearlyRetention?: pulumi.Input<number>;
}

export interface NdbCloneTimeMachineTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbClusterAgentNetworkInfo {
    /**
     * string of DNS servers(comma separted).
     */
    dns?: pulumi.Input<string>;
    /**
     * string of NTP servers(comma separted).
     */
    ntp?: pulumi.Input<string>;
}

export interface NdbClusterEntityCount {
    dbServers?: pulumi.Input<number>;
    engineCounts?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCount>[]>;
}

export interface NdbClusterEntityCountEngineCount {
    mariadbDatabases?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMariadbDatabase>[]>;
    mongodbDatabases?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMongodbDatabase>[]>;
    mysqlDatabases?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMysqlDatabase>[]>;
    oracleDatabases?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountOracleDatabase>[]>;
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountPostgresDatabase>[]>;
    saphanaDatabases?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSaphanaDatabase>[]>;
    sqlserverDatabases?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSqlserverDatabase>[]>;
}

export interface NdbClusterEntityCountEngineCountMariadbDatabase {
    profiles?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMariadbDatabaseProfile>[]>;
    timeMachines?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMariadbDatabaseProfile {
    compute?: pulumi.Input<number>;
    databaseParameter?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    software?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    windowsDomain?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMongodbDatabase {
    profiles?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMongodbDatabaseProfile>[]>;
    timeMachines?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMongodbDatabaseProfile {
    compute?: pulumi.Input<number>;
    databaseParameter?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    software?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    windowsDomain?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMysqlDatabase {
    profiles?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMysqlDatabaseProfile>[]>;
    timeMachines?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMysqlDatabaseProfile {
    compute?: pulumi.Input<number>;
    databaseParameter?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    software?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    windowsDomain?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountOracleDatabase {
    profiles?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountOracleDatabaseProfile>[]>;
    timeMachines?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountOracleDatabaseProfile {
    compute?: pulumi.Input<number>;
    databaseParameter?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    software?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    windowsDomain?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountPostgresDatabase {
    profiles?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountPostgresDatabaseProfile>[]>;
    timeMachines?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountPostgresDatabaseProfile {
    compute?: pulumi.Input<number>;
    databaseParameter?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    software?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    windowsDomain?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSaphanaDatabase {
    profiles?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSaphanaDatabaseProfile>[]>;
    timeMachines?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSaphanaDatabaseProfile {
    compute?: pulumi.Input<number>;
    databaseParameter?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    software?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    windowsDomain?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSqlserverDatabase {
    profiles?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSqlserverDatabaseProfile>[]>;
    timeMachines?: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSqlserverDatabaseProfile {
    compute?: pulumi.Input<number>;
    databaseParameter?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    software?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    windowsDomain?: pulumi.Input<number>;
}

export interface NdbClusterNetworksInfo {
    /**
     * VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ]. 
     * Prism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.
     * Prism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.
     * DBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.
     */
    accessTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * network segmentation to segment the network traffic
     */
    networkInfos?: pulumi.Input<pulumi.Input<inputs.NdbClusterNetworksInfoNetworkInfo>[]>;
    /**
     * type of vlan. Supported [DHCP, Static, IPAM]
     */
    type?: pulumi.Input<string>;
}

export interface NdbClusterNetworksInfoNetworkInfo {
    /**
     * gateway of agent network
     */
    gateway?: pulumi.Input<string>;
    /**
     * static ip of agent network
     */
    staticIp?: pulumi.Input<string>;
    /**
     * subnet mask of agent network
     */
    subnetMask?: pulumi.Input<string>;
    /**
     * vlan name
     */
    vlanName?: pulumi.Input<string>;
}

export interface NdbClusterProperty {
    /**
     * description of cluster
     */
    description?: pulumi.Input<string>;
    /**
     * name of the cluster to be registered
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbClusterResourceConfig {
    memoryThresholdPercentage?: pulumi.Input<number>;
    storageThresholdPercentage?: pulumi.Input<number>;
}

export interface NdbDatabaseActionargument {
    /**
     * - (Required) name of argument
     */
    name: pulumi.Input<string>;
    /**
     * - (Required) value for argument
     */
    value: pulumi.Input<string>;
}

export interface NdbDatabaseClusterInfo {
    clusterIpInfos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseClusterInfoClusterIpInfo>[]>;
}

export interface NdbDatabaseClusterInfoClusterIpInfo {
    ipInfos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseClusterInfoClusterIpInfoIpInfo>[]>;
    nxClusterId: pulumi.Input<string>;
}

export interface NdbDatabaseClusterInfoClusterIpInfoIpInfo {
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipType?: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNode {
    accessLevel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    dbserver?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId?: pulumi.Input<string>;
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeInfo>[]>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeProperty>[]>;
    protectionDomainId?: pulumi.Input<string>;
    protectionDomains?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeTag>[]>;
}

export interface NdbDatabaseDatabaseNodeInfo {
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseDatabaseNodeProperty {
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNodeProtectionDomain {
    assocEntities?: pulumi.Input<pulumi.Input<string>[]>;
    cloudId?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    eraCreated?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    primaryHost?: pulumi.Input<string>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeProtectionDomainProperty>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNodeProtectionDomainProperty {
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNodeTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseInfo {
    bpgConfigs?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfig>[]>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseInfoBpgConfig {
    bpgDbParams?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigBpgDbParam>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorage>[]>;
    vmProperties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigVmProperty>[]>;
}

export interface NdbDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize?: pulumi.Input<string>;
    maintenanceWorkMem?: pulumi.Input<string>;
    maxParallelWorkersPerGather?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    sharedBuffers?: pulumi.Input<string>;
    workMem?: pulumi.Input<string>;
}

export interface NdbDatabaseInfoBpgConfigStorage {
    archiveStorages?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorageDataDisk>[]>;
    logDisks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbDatabaseInfoBpgConfigStorageArchiveStorage {
    size?: pulumi.Input<number>;
}

export interface NdbDatabaseInfoBpgConfigStorageDataDisk {
    count?: pulumi.Input<number>;
}

export interface NdbDatabaseInfoBpgConfigStorageLogDisk {
    count?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
}

export interface NdbDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio?: pulumi.Input<number>;
    dirtyExpireCentisecs?: pulumi.Input<number>;
    dirtyRatio?: pulumi.Input<number>;
    dirtyWritebackCentisecs?: pulumi.Input<number>;
    nrHugepages?: pulumi.Input<number>;
    overcommitMemory?: pulumi.Input<number>;
    swappiness?: pulumi.Input<number>;
}

export interface NdbDatabaseLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigExpiryDetail>[]>;
    postDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigPreDeleteCommand>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    deleteVm?: pulumi.Input<boolean>;
    effectiveTimestamp?: pulumi.Input<string>;
    expireInDays?: pulumi.Input<number>;
    expiryDateTimezone?: pulumi.Input<string>;
    expiryTimestamp?: pulumi.Input<string>;
    remindBeforeInDays?: pulumi.Input<number>;
    userCreated?: pulumi.Input<boolean>;
}

export interface NdbDatabaseLcmConfigPostDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseLcmConfigPreDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseLcmConfigRefreshDetail {
    lastRefreshDate?: pulumi.Input<string>;
    nextRefreshDate?: pulumi.Input<string>;
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshInHours?: pulumi.Input<number>;
    refreshInMonths?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbDatabaseLinkedDatabase {
    databaseName?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLinkedDatabaseInfo>[]>;
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    parentDatabaseId?: pulumi.Input<string>;
    parentLinkedDatabaseId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface NdbDatabaseLinkedDatabaseInfo {
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseMaintenanceTasks {
    maintenanceWindowId?: pulumi.Input<string>;
    tasks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseMaintenanceTasksTask>[]>;
}

export interface NdbDatabaseMaintenanceTasksTask {
    postCommand?: pulumi.Input<string>;
    preCommand?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface NdbDatabaseNode {
    /**
     * - (Optional) compute profile id
     */
    computeprofileid?: pulumi.Input<string>;
    /**
     * - (Optional) Database server ID required for existing VM
     */
    dbserverid?: pulumi.Input<string>;
    /**
     * - (Optional) IP infos for custom network profile.
     */
    ipInfos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseNodeIpInfo>[]>;
    /**
     * - (Required) network profile ID
     */
    networkprofileid?: pulumi.Input<string>;
    /**
     * - (Optional) cluster id.
     */
    nxClusterId?: pulumi.Input<string>;
    /**
     * - (Optional) list of additional properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseNodeProperty>[]>;
    /**
     * - (Required) name of vm
     */
    vmname: pulumi.Input<string>;
}

export interface NdbDatabaseNodeIpInfo {
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipType?: pulumi.Input<string>;
}

export interface NdbDatabaseNodeProperty {
    /**
     * - (Required) Name of the instance.
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabasePostgresqlInfo {
    /**
     * - (Optional) allocate huge page. Default: false
     */
    allocatePgHugepage?: pulumi.Input<boolean>;
    /**
     * - (Optional) auth methods. Default: md5
     */
    authMethod?: pulumi.Input<string>;
    /**
     * - (Optional) enable auto tuning of staging drive. Default: false
     */
    autoTuneStagingDrive?: pulumi.Input<boolean>;
    /**
     * - (Optional) if clustered database. Default: false
     */
    clusterDatabase?: pulumi.Input<boolean>;
    /**
     * - (Required) name of initial database to be created
     */
    databaseNames: pulumi.Input<string>;
    /**
     * - (Required) initial database size
     */
    databaseSize: pulumi.Input<string>;
    /**
     * - (Required) database instance password
     */
    dbPassword: pulumi.Input<string>;
    /**
     * - (Optional) High Availability instance
     */
    haInstance?: pulumi.Input<inputs.NdbDatabasePostgresqlInfoHaInstance>;
    /**
     * - (Required) listener port for database instance
     */
    listenerPort: pulumi.Input<string>;
    /**
     * - (Optional) post instance create script
     */
    postCreateScript?: pulumi.Input<string>;
    /**
     * - (Optional) pre instance create script
     */
    preCreateScript?: pulumi.Input<string>;
}

export interface NdbDatabasePostgresqlInfoHaInstance {
    /**
     * - (Optional) archive wal expire days. Default is set to -1
     */
    archiveWalExpireDays?: pulumi.Input<number>;
    /**
     * - (Optional) backup policy for instance. Default is "primaryOnly"
     */
    backupPolicy?: pulumi.Input<string>;
    clusterDescription?: pulumi.Input<string>;
    /**
     * - (Required) cluster name
     */
    clusterName: pulumi.Input<string>;
    /**
     * - (Optional) HA proxy node. Default is set to false
     */
    deployHaproxy?: pulumi.Input<boolean>;
    /**
     * - (Optional) enable peer auth . Default is set to false.
     */
    enablePeerAuth?: pulumi.Input<boolean>;
    /**
     * - (Optional) enable synchronous mode. Default is set to true
     */
    enableSynchronousMode?: pulumi.Input<boolean>;
    /**
     * - (Optional) failover mode of nodes.
     */
    failoverMode?: pulumi.Input<string>;
    /**
     * - (Optional) node type of instance. Default is set to database
     */
    nodeType?: pulumi.Input<string>;
    /**
     * - (Required) patroni cluster name
     */
    patroniClusterName: pulumi.Input<string>;
    /**
     * - (Optional) provisional virtual ip. Default is set to true
     */
    provisionVirtualIp?: pulumi.Input<boolean>;
    /**
     * -  (Required) proxy read port
     */
    proxyReadPort: pulumi.Input<string>;
    /**
     * - (Required) proxy write port
     */
    proxyWritePort: pulumi.Input<string>;
}

export interface NdbDatabaseProperty {
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNode {
    accessLevel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * database id
     */
    databaseId?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    dbserver?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeInfo>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeProperty>[]>;
    protectionDomainId?: pulumi.Input<string>;
    protectionDomains?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeTag>[]>;
}

export interface NdbDatabaseRestoreDatabaseNodeInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseRestoreDatabaseNodeProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNodeProtectionDomain {
    assocEntities?: pulumi.Input<pulumi.Input<string>[]>;
    cloudId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    eraCreated?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    primaryHost?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNodeTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreInfo {
    bpgConfigs?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfig>[]>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseRestoreInfoBpgConfig {
    bpgDbParams?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigBpgDbParam>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorage>[]>;
    vmProperties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigVmProperty>[]>;
}

export interface NdbDatabaseRestoreInfoBpgConfigBpgDbParam {
    effectiveCacheSize?: pulumi.Input<string>;
    maintenanceWorkMem?: pulumi.Input<string>;
    maxParallelWorkersPerGather?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    sharedBuffers?: pulumi.Input<string>;
    workMem?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorage {
    archiveStorages?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorageDataDisk>[]>;
    logDisks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage {
    size?: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageDataDisk {
    count?: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageLogDisk {
    count?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreInfoBpgConfigVmProperty {
    dirtyBackgroundRatio?: pulumi.Input<number>;
    dirtyExpireCentisecs?: pulumi.Input<number>;
    dirtyRatio?: pulumi.Input<number>;
    dirtyWritebackCentisecs?: pulumi.Input<number>;
    nrHugepages?: pulumi.Input<number>;
    overcommitMemory?: pulumi.Input<number>;
    swappiness?: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigExpiryDetail>[]>;
    postDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigPreDeleteCommand>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseRestoreLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    deleteTimeMachine?: pulumi.Input<boolean>;
    deleteVm?: pulumi.Input<boolean>;
    effectiveTimestamp?: pulumi.Input<string>;
    expireInDays?: pulumi.Input<number>;
    expiryDateTimezone?: pulumi.Input<string>;
    expiryTimestamp?: pulumi.Input<string>;
    remindBeforeInDays?: pulumi.Input<number>;
    userCreated?: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreLcmConfigPostDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLcmConfigPreDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLcmConfigRefreshDetail {
    lastRefreshDate?: pulumi.Input<string>;
    nextRefreshDate?: pulumi.Input<string>;
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshInHours?: pulumi.Input<number>;
    refreshInMonths?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLinkedDatabase {
    /**
     * name of database
     */
    databaseName?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLinkedDatabaseInfo>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * parent database id
     */
    parentDatabaseId?: pulumi.Input<string>;
    parentLinkedDatabaseId?: pulumi.Input<string>;
    /**
     * snapshot id from you want to use for restoring the instance
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLinkedDatabaseInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseRestoreProperty {
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachine {
    accessLevel?: pulumi.Input<string>;
    /**
     * whether instance is cloned or not
     */
    clone?: pulumi.Input<boolean>;
    clones?: pulumi.Input<string>;
    clustered?: pulumi.Input<boolean>;
    database?: pulumi.Input<string>;
    /**
     * database id
     */
    databaseId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    eaStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineProperty>[]>;
    scheduleId?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineSchedule>[]>;
    scope?: pulumi.Input<string>;
    slaId?: pulumi.Input<string>;
    slaUpdateInProgress?: pulumi.Input<boolean>;
    slaUpdateMetadata?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineSla>[]>;
    sourceNxClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineTag>[]>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineSchedule {
    continuousSchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleDailySchedule>[]>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    globalPolicy?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    monthlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    quartelySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount?: pulumi.Input<number>;
    snapshotTimeOfDays?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime?: pulumi.Input<string>;
    systemPolicy?: pulumi.Input<boolean>;
    /**
     * timezone on which instance is created xw
     */
    timeZone?: pulumi.Input<string>;
    uniqueName?: pulumi.Input<string>;
    weeklySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule {
    enabled?: pulumi.Input<boolean>;
    logBackupInterval?: pulumi.Input<number>;
    snapshotsPerDay?: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleDailySchedule {
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    startMonth?: pulumi.Input<string>;
    startMonthValue?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay {
    extra?: pulumi.Input<boolean>;
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
    seconds?: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule {
    dayOfWeek?: pulumi.Input<string>;
    dayOfWeekValue?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleYearlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    month?: pulumi.Input<string>;
    monthValue?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineSla {
    continuousRetention?: pulumi.Input<number>;
    currentActiveFrequency?: pulumi.Input<string>;
    dailyRetention?: pulumi.Input<number>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monthlyRetention?: pulumi.Input<number>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    pitrEnabled?: pulumi.Input<boolean>;
    quarterlyRetention?: pulumi.Input<number>;
    referenceCount?: pulumi.Input<number>;
    systemSla?: pulumi.Input<boolean>;
    uniqueName?: pulumi.Input<string>;
    weeklyRetention?: pulumi.Input<number>;
    yearlyRetention?: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreTimeMachineTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNode {
    accessLevel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    dbserver?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeInfo>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeProperty>[]>;
    protectionDomainId?: pulumi.Input<string>;
    protectionDomains?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeTag>[]>;
}

export interface NdbDatabaseScaleDatabaseNodeInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseScaleDatabaseNodeProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNodeProtectionDomain {
    assocEntities?: pulumi.Input<pulumi.Input<string>[]>;
    cloudId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    eraCreated?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    primaryHost?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeProtectionDomainProperty>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNodeProtectionDomainProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNodeTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleInfo {
    bpgConfigs?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfig>[]>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseScaleInfoBpgConfig {
    bpgDbParams?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigBpgDbParam>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorage>[]>;
    vmProperties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigVmProperty>[]>;
}

export interface NdbDatabaseScaleInfoBpgConfigBpgDbParam {
    effectiveCacheSize?: pulumi.Input<string>;
    maintenanceWorkMem?: pulumi.Input<string>;
    maxParallelWorkersPerGather?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    sharedBuffers?: pulumi.Input<string>;
    workMem?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorage {
    archiveStorages?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorageDataDisk>[]>;
    logDisks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage {
    size?: pulumi.Input<number>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageDataDisk {
    count?: pulumi.Input<number>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageLogDisk {
    count?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
}

export interface NdbDatabaseScaleInfoBpgConfigVmProperty {
    dirtyBackgroundRatio?: pulumi.Input<number>;
    dirtyExpireCentisecs?: pulumi.Input<number>;
    dirtyRatio?: pulumi.Input<number>;
    dirtyWritebackCentisecs?: pulumi.Input<number>;
    nrHugepages?: pulumi.Input<number>;
    overcommitMemory?: pulumi.Input<number>;
    swappiness?: pulumi.Input<number>;
}

export interface NdbDatabaseScaleLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigExpiryDetail>[]>;
    postDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigPreDeleteCommand>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseScaleLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    deleteTimeMachine?: pulumi.Input<boolean>;
    deleteVm?: pulumi.Input<boolean>;
    effectiveTimestamp?: pulumi.Input<string>;
    expireInDays?: pulumi.Input<number>;
    expiryDateTimezone?: pulumi.Input<string>;
    expiryTimestamp?: pulumi.Input<string>;
    remindBeforeInDays?: pulumi.Input<number>;
    userCreated?: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleLcmConfigPostDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLcmConfigPreDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLcmConfigRefreshDetail {
    lastRefreshDate?: pulumi.Input<string>;
    nextRefreshDate?: pulumi.Input<string>;
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshInHours?: pulumi.Input<number>;
    refreshInMonths?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLinkedDatabase {
    /**
     * name of database
     */
    databaseName?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLinkedDatabaseInfo>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * parent database id
     */
    parentDatabaseId?: pulumi.Input<string>;
    parentLinkedDatabaseId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLinkedDatabaseInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseScaleProperty {
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachine {
    accessLevel?: pulumi.Input<string>;
    /**
     * whether instance is cloned or not
     */
    clone?: pulumi.Input<boolean>;
    clones?: pulumi.Input<string>;
    clustered?: pulumi.Input<boolean>;
    database?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    eaStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineProperty>[]>;
    scheduleId?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineSchedule>[]>;
    scope?: pulumi.Input<string>;
    slaId?: pulumi.Input<string>;
    slaUpdateInProgress?: pulumi.Input<boolean>;
    slaUpdateMetadata?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineSla>[]>;
    sourceNxClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineTag>[]>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineSchedule {
    continuousSchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleDailySchedule>[]>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    globalPolicy?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    monthlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleMonthlySchedule>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    quartelySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount?: pulumi.Input<number>;
    snapshotTimeOfDays?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime?: pulumi.Input<string>;
    systemPolicy?: pulumi.Input<boolean>;
    /**
     * timezone on which instance is created xw
     */
    timeZone?: pulumi.Input<string>;
    uniqueName?: pulumi.Input<string>;
    weeklySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbDatabaseScaleTimeMachineScheduleContinuousSchedule {
    enabled?: pulumi.Input<boolean>;
    logBackupInterval?: pulumi.Input<number>;
    snapshotsPerDay?: pulumi.Input<number>;
}

export interface NdbDatabaseScaleTimeMachineScheduleDailySchedule {
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleTimeMachineScheduleMonthlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleTimeMachineScheduleQuartelySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    startMonth?: pulumi.Input<string>;
    startMonthValue?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay {
    extra?: pulumi.Input<boolean>;
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
    seconds?: pulumi.Input<number>;
}

export interface NdbDatabaseScaleTimeMachineScheduleWeeklySchedule {
    dayOfWeek?: pulumi.Input<string>;
    dayOfWeekValue?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleTimeMachineScheduleYearlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    month?: pulumi.Input<string>;
    monthValue?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineSla {
    continuousRetention?: pulumi.Input<number>;
    currentActiveFrequency?: pulumi.Input<string>;
    dailyRetention?: pulumi.Input<number>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monthlyRetention?: pulumi.Input<number>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    pitrEnabled?: pulumi.Input<boolean>;
    quarterlyRetention?: pulumi.Input<number>;
    referenceCount?: pulumi.Input<number>;
    systemSla?: pulumi.Input<boolean>;
    uniqueName?: pulumi.Input<string>;
    weeklyRetention?: pulumi.Input<number>;
    yearlyRetention?: pulumi.Input<number>;
}

export interface NdbDatabaseScaleTimeMachineTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigExpiryDetail>[]>;
    postDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigPreDeleteCommand>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseSnapshotLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    deleteTimeMachine?: pulumi.Input<boolean>;
    deleteVm?: pulumi.Input<boolean>;
    effectiveTimestamp?: pulumi.Input<string>;
    expireInDays?: pulumi.Input<number>;
    /**
     * Default is set to Asia/Calcutta
     */
    expiryDateTimezone?: pulumi.Input<string>;
    expiryTimestamp?: pulumi.Input<string>;
    remindBeforeInDays?: pulumi.Input<number>;
    userCreated?: pulumi.Input<boolean>;
}

export interface NdbDatabaseSnapshotLcmConfigPostDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotLcmConfigPreDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotLcmConfigRefreshDetail {
    lastRefreshDate?: pulumi.Input<string>;
    nextRefreshDate?: pulumi.Input<string>;
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshInHours?: pulumi.Input<number>;
    refreshInMonths?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotProperty {
    /**
     * description of snapshot
     */
    description?: pulumi.Input<string>;
    /**
     * Snapshot name. Default value is era_manual_snapshot.
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachine {
    accessLevel?: pulumi.Input<string>;
    clone?: pulumi.Input<boolean>;
    clones?: pulumi.Input<string>;
    /**
     * - (Optional) If clustered database. Default: false
     */
    clustered?: pulumi.Input<boolean>;
    database?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    eaStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineProperty>[]>;
    scheduleId?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineSchedule>[]>;
    scope?: pulumi.Input<string>;
    slaId?: pulumi.Input<string>;
    slaUpdateInProgress?: pulumi.Input<boolean>;
    slaUpdateMetadata?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineSla>[]>;
    sourceNxClusters?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineTag>[]>;
    type?: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineProperty {
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineSchedule {
    continuousSchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleDailySchedule>[]>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    globalPolicy?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    monthlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleMonthlySchedule>[]>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    quartelySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount?: pulumi.Input<number>;
    snapshotTimeOfDays?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime?: pulumi.Input<string>;
    systemPolicy?: pulumi.Input<boolean>;
    timeZone?: pulumi.Input<string>;
    uniqueName?: pulumi.Input<string>;
    weeklySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbDatabaseTimeMachineScheduleContinuousSchedule {
    enabled?: pulumi.Input<boolean>;
    logBackupInterval?: pulumi.Input<number>;
    snapshotsPerDay?: pulumi.Input<number>;
}

export interface NdbDatabaseTimeMachineScheduleDailySchedule {
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    startMonth?: pulumi.Input<string>;
    startMonthValue?: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra?: pulumi.Input<boolean>;
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
    seconds?: pulumi.Input<number>;
}

export interface NdbDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek?: pulumi.Input<string>;
    dayOfWeekValue?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    month?: pulumi.Input<string>;
    monthValue?: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineSla {
    continuousRetention?: pulumi.Input<number>;
    currentActiveFrequency?: pulumi.Input<string>;
    dailyRetention?: pulumi.Input<number>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    /**
     * - (Optional) The description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monthlyRetention?: pulumi.Input<number>;
    /**
     * - (Required) Name of the instance.
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    pitrEnabled?: pulumi.Input<boolean>;
    quarterlyRetention?: pulumi.Input<number>;
    referenceCount?: pulumi.Input<number>;
    systemSla?: pulumi.Input<boolean>;
    uniqueName?: pulumi.Input<string>;
    weeklyRetention?: pulumi.Input<number>;
    yearlyRetention?: pulumi.Input<number>;
}

export interface NdbDatabaseTimeMachineTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfo {
    /**
     * - (Optional) enable auto tune log drive. Default: true
     */
    autotunelogdrive?: pulumi.Input<boolean>;
    /**
     * - (Optional) description of time machine
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) name of time machine
     */
    name: pulumi.Input<string>;
    /**
     * - (Optional) schedule for snapshots
     */
    schedule: pulumi.Input<inputs.NdbDatabaseTimemachineinfoSchedule>;
    /**
     * -  (optional) SLA details for HA instance
     */
    slaDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimemachineinfoSlaDetail>[]>;
    /**
     * - (Optional) SLA ID for single instance
     */
    slaid?: pulumi.Input<string>;
    /**
     * - (Optional) tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimemachineinfoTag>[]>;
}

export interface NdbDatabaseTimemachineinfoSchedule {
    /**
     * - (Optional) snapshot freq and log config
     */
    continuousschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleContinuousschedule>;
    /**
     * - (Optional) monthly snapshot config
     */
    monthlyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleMonthlyschedule>;
    /**
     * - (Optional) quaterly snapshot config
     */
    quartelyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleQuartelyschedule>;
    /**
     * - (Optional) daily snapshot config
     */
    snapshottimeofday?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofday>;
    /**
     * - (Optional) weekly snapshot config
     */
    weeklyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleWeeklyschedule>;
    /**
     * - (Optional) yearly snapshot config
     */
    yearlyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleYearlyschedule>;
}

export interface NdbDatabaseTimemachineinfoScheduleContinuousschedule {
    /**
     * - (Required) to enable
     */
    enabled: pulumi.Input<boolean>;
    /**
     * - (Required) log catchup interval for database
     */
    logbackupinterval: pulumi.Input<number>;
    /**
     * - (Required) num of snapshots per day
     */
    snapshotsperday: pulumi.Input<number>;
}

export interface NdbDatabaseTimemachineinfoScheduleMonthlyschedule {
    /**
     * - (Required) day of month to take snapshot
     */
    dayofmonth: pulumi.Input<number>;
    /**
     * - (Required) to enable
     */
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimemachineinfoScheduleQuartelyschedule {
    /**
     * - (Required) month's day for snapshot
     */
    dayofmonth: pulumi.Input<number>;
    /**
     * - (Required) to enable
     */
    enabled: pulumi.Input<boolean>;
    /**
     * - (Required) quarter start month
     */
    startmonth: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfoScheduleSnapshottimeofday {
    /**
     * - (Required) hours
     */
    hours: pulumi.Input<number>;
    /**
     * - (Required) minutes
     */
    minutes: pulumi.Input<number>;
    /**
     * - (Required) seconds
     */
    seconds: pulumi.Input<number>;
}

export interface NdbDatabaseTimemachineinfoScheduleWeeklyschedule {
    /**
     * - (Required) day of week to take snaphsot. Eg. "WEDNESDAY"
     */
    dayofweek: pulumi.Input<string>;
    /**
     * - (Required) to enable
     */
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimemachineinfoScheduleYearlyschedule {
    /**
     * - (Required) day of month to take snapshot
     */
    dayofmonth: pulumi.Input<number>;
    /**
     * - (Required) to enable
     */
    enabled: pulumi.Input<boolean>;
    /**
     * - (Required) month for snapshot
     */
    month: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfoSlaDetail {
    /**
     * - (Required) primary sla details
     * * `primary_sla.sla_id` :- (Required) sla id
     * * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
     */
    primarySlas?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimemachineinfoSlaDetailPrimarySla>[]>;
}

export interface NdbDatabaseTimemachineinfoSlaDetailPrimarySla {
    nxClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * description of SLA ID.
     */
    slaId: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfoTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDbserverVmCredential {
    label?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface NdbDbserverVmMaintenanceTasks {
    /**
     * Associate an existing maintenance window id. NDB starts OS patching or database patching as per the schedule defined in the maintenance window.
     */
    maintenanceWindowId?: pulumi.Input<string>;
    /**
     * Tasks for the maintenance.
     * * `tasks.task_type`: use this option if you want NDB to perform database patching or OS patching automatically. Supports [ OS_PATCHING, DB_PATCHING ].
     * * `tasks.pre_command`: add pre (operating system and database patching) commands.
     * * `tasks.post_command`:add post (operating system and database patching) commands.
     */
    tasks?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmMaintenanceTasksTask>[]>;
}

export interface NdbDbserverVmMaintenanceTasksTask {
    postCommand?: pulumi.Input<string>;
    preCommand?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface NdbDbserverVmPostgresDatabase {
    /**
     * use SSH public keys to access the database server VM.
     */
    clientPublicKey?: pulumi.Input<string>;
    /**
     * name for the database server VM.
     */
    vmName: pulumi.Input<string>;
}

export interface NdbDbserverVmProperty {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDbserverVmTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbLinkedDatabasesInfo {
    infos?: pulumi.Input<pulumi.Input<inputs.NdbLinkedDatabasesInfoInfo>[]>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbLinkedDatabasesInfoInfo {
    createdBy?: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociation {
    /**
     * access level of tasks
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * created date of task
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * modified date of task
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of maintenance window
     */
    description?: pulumi.Input<string>;
    entity?: pulumi.Input<string>;
    /**
     * entity id
     */
    entityId?: pulumi.Input<string>;
    /**
     * type of the entity. i.e. DBSERVER
     */
    entityType?: pulumi.Input<string>;
    /**
     * id of maintenance window
     */
    id?: pulumi.Input<string>;
    /**
     * maintenance window id which has to be associated
     */
    maintenanceWindowId?: pulumi.Input<string>;
    /**
     * maintenance window owner id
     */
    maintenanceWindowOwnerId?: pulumi.Input<string>;
    /**
     * name of of maintenance window
     */
    name?: pulumi.Input<string>;
    /**
     * owner id of task
     */
    ownerId?: pulumi.Input<string>;
    /**
     * list of pre post commands of OS or DB task
     */
    payloads?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationPayload>[]>;
    /**
     * properties of task
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationProperty>[]>;
    /**
     * status of task
     */
    status?: pulumi.Input<string>;
    /**
     * tags of task
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationTag>[]>;
    /**
     * type of the task. OS or DB
     */
    taskType?: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationPayload {
    /**
     * Pre Post command of Task
     */
    prePostCommands?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand>[]>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand {
    /**
     * post command of task
     */
    postCommand?: pulumi.Input<string>;
    /**
     * pre command of task
     */
    preCommand?: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationProperty {
    /**
     * name of of maintenance window
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationTag {
    /**
     * entity id
     */
    entityId?: pulumi.Input<string>;
    /**
     * type of the entity. i.e. DBSERVER
     */
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskTask {
    /**
     * command that you want to run after patching the OS/DB
     */
    postCommand?: pulumi.Input<string>;
    /**
     * command that you want to run before patching the OS/DB
     */
    preCommand?: pulumi.Input<string>;
    /**
     * type of task. Supports [ "OS_PATCHING", "DB_PATCHING" ]
     */
    taskType?: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssoc {
    /**
     * access level
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * created date of maintenance window
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * modified date of maintenance window
     */
    dateModified?: pulumi.Input<string>;
    /**
     * Description for maintenance window
     */
    description?: pulumi.Input<string>;
    entity?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    maintenanceWindowId?: pulumi.Input<string>;
    maintenanceWindowOwnerId?: pulumi.Input<string>;
    /**
     * Name for the maintenance window.
     */
    name?: pulumi.Input<string>;
    /**
     * owner id of maintenance window
     */
    ownerId?: pulumi.Input<string>;
    payloads?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocPayload>[]>;
    /**
     * properties of maintenance window
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocProperty>[]>;
    /**
     * status of maintennace window
     */
    status?: pulumi.Input<string>;
    /**
     * tags of maintenance window
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocTag>[]>;
    taskType?: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssocPayload {
    prePostCommands?: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand>[]>;
}

export interface NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand {
    postCommand?: pulumi.Input<string>;
    preCommand?: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssocProperty {
    /**
     * Name for the maintenance window.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssocTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowProperty {
    /**
     * Name for the maintenance window.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowSchedule {
    /**
     * Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
     */
    dayOfWeek?: pulumi.Input<string>;
    /**
     * duration in hours. Default is 2
     */
    duration?: pulumi.Input<number>;
    hour?: pulumi.Input<number>;
    minute?: pulumi.Input<number>;
    /**
     * Supported values [ MONTHLY, WEEKLY ]
     */
    recurrence?: pulumi.Input<string>;
    /**
     * start time for maintenance window to trigger
     */
    startTime?: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
    /**
     * timezone . Default is Asia/Calcutta .
     */
    timezone?: pulumi.Input<string>;
    /**
     * week of the month. Supports [1, 2, 3, 4] .
     */
    weekOfMonth?: pulumi.Input<number>;
}

export interface NdbMaintenanceWindowTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbNetworkIpPool {
    addresses?: pulumi.Input<pulumi.Input<inputs.NdbNetworkIpPoolAddress>[]>;
    /**
     * ending IP address range for new database servers
     */
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    /**
     * starting IP address range for new database servers
     */
    startIp?: pulumi.Input<string>;
}

export interface NdbNetworkIpPoolAddress {
    ip?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface NdbNetworkPropertiesMap {
    vlanGateway?: pulumi.Input<string>;
    vlanPrimaryDns?: pulumi.Input<string>;
    vlanSecondaryDns?: pulumi.Input<string>;
    vlanSubnetMask?: pulumi.Input<string>;
}

export interface NdbNetworkProperty {
    /**
     * Name of the vlan to be attached in NDB
     */
    name?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbProfileClusterAvailability {
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    /**
     * cluster on which profile created
     */
    nxClusterId?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    profileId?: pulumi.Input<string>;
    /**
     * status of profile
     */
    status?: pulumi.Input<string>;
}

export interface NdbProfileComputeProfile {
    /**
     * number of cores per vCPU for the database server VM.
     */
    corePerCpu?: pulumi.Input<string>;
    /**
     * number of vCPUs for the database server VM.
     */
    cpus?: pulumi.Input<string>;
    /**
     * amount of memory for the database server VM.
     */
    memorySize?: pulumi.Input<string>;
}

export interface NdbProfileDatabaseParameterProfile {
    /**
     * Database parameters suuported for postgress.
     * * `postgres_database.max_connections`: (Optional) Determines the maximum number of concurrent connections to the database server. The default is set to 100
     * * `postgres_database.max_replication_slots`: (Optional) Specifies the maximum number of replication slots that the server can support. The default is zero. walLevel must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting.
     * * `postgres_database.effective_io_concurrency`: (Optional) Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel.
     * * `postgres_database.timezone`: (Optional) Sets the time zone for displaying and interpreting time stamps. Defult is UTC .
     * * `postgres_database.max_prepared_transactions`: (Optional) Sets the maximum number of transactions that can be in the prepared state simultaneously. Setting this parameter to zero (which is the default) disables the prepared-transaction feature.
     * * `postgres_database.max_locks_per_transaction`: (Optional) This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. Default is 64.
     * * `postgres_database.max_wal_senders`: (Optional) Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is 10.
     * * `postgres_database.max_worker_processes`: (Optional) Sets the maximum number of background processes that the system can support. The default is 8.
     * * `postgres_database.min_wal_size`: (Optional) As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB.
     * * `postgres_database.max_wal_size`: (Optional) Maximum size to let the WAL grow to between automatic WAL checkpoints. The default is 1 GB
     * * `postgres_database.checkpoint_timeout`: (Optional) Sets the maximum time between automatic WAL checkpoints . High Value gives Good Performance, but takes More Recovery Time, Reboot time. can reduce the I/O load on your system, especially when using large values for shared_buffers. Default is 5min
     * * `postgres_database.autovacuum`: (Optional) Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, trackCounts must also be enabled for autovacuum to work.
     * * `postgres_database.checkpoint_completion_target`: (Optional)
     * Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval . Formula - (checkpoint_timeout - 2min) / checkpoint_timeout. The default is 0.5.
     * * `postgres_database.autovacuum_freeze_max_age`: (Optional) Age at which to autovacuum a table to prevent transaction ID wraparound. Default is 200000000
     * * `postgres_database.autovacuum_vacuum_threshold`: (Optional) Min number of row updates before vacuum. Minimum number of tuple updates or deletes prior to vacuum. Take value in KB. Default is 50 .
     * * `postgres_database.autovacuum_vacuum_scale_factor`: (Optional) Number of tuple updates or deletes prior to vacuum as a fraction of reltuples. Default is 0.2
     * * `postgres_database.autovacuum_work_mem`: (Optional) Sets the maximum memory to be used by each autovacuum worker process. Unit is in KB. Default is -1
     * * `postgres_database.autovacuum_max_workers`: (Optional) Sets the maximum number of simultaneously running autovacuum worker processes. Default is 3
     * * `postgres_database.autovacuum_vacuum_cost_delay`: (Optional) Vacuum cost delay in milliseconds, for autovacuum. Specifies the cost delay value that will be used in automatic VACUUM operation. Default is 2ms
     * * `postgres_database.wal_buffers`: (Optional)
     * Sets the number of disk-page buffers in shared memory for WAL. The amount of shared memory used for WAL data that has not yet been written to disk. The default is -1.
     * * `postgres_database.synchronous_commit`: (Optional) Sets the current transaction's synchronization level. Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a success indication to the client. Default is on.
     * * `postgres_database.random_page_cost`: (Optional) Sets the planner's estimate of the cost of a nonsequentially fetched disk page. Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0.
     * * `postgres_database.wal_keep_segments`: (Optional) Sets the number of WAL files held for standby servers, Specifies the minimum number of past log file segments kept in the pgWal directory. Default is 700 .
     */
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbProfileDatabaseParameterProfilePostgresDatabase>[]>;
}

export interface NdbProfileDatabaseParameterProfilePostgresDatabase {
    autovacuum?: pulumi.Input<string>;
    autovacuumFreezeMaxAge?: pulumi.Input<string>;
    autovacuumMaxWorkers?: pulumi.Input<string>;
    autovacuumVacuumCostDelay?: pulumi.Input<string>;
    autovacuumVacuumScaleFactor?: pulumi.Input<string>;
    autovacuumVacuumThreshold?: pulumi.Input<string>;
    autovacuumWorkMem?: pulumi.Input<string>;
    checkpointCompletionTarget?: pulumi.Input<string>;
    checkpointTimeout?: pulumi.Input<string>;
    effectiveIoConcurrency?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<string>;
    maxLocksPerTransaction?: pulumi.Input<string>;
    maxPreparedTransactions?: pulumi.Input<string>;
    maxReplicationSlots?: pulumi.Input<string>;
    maxWalSenders?: pulumi.Input<string>;
    maxWalSize?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    minWalSize?: pulumi.Input<string>;
    randomPageCost?: pulumi.Input<string>;
    synchronousCommit?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    walBuffers?: pulumi.Input<string>;
    walKeepSegments?: pulumi.Input<string>;
}

export interface NdbProfileNetworkProfile {
    /**
     * Postgres Info to create network profile
     *
     * * `postgres_database.single_instance`: (Optional) Info for postgres database to create single instance network profile.
     * * `postgres_database.single_instance.vlan_name`: (Required) specify the VLAN to provide the IP address used to connect the database from the public network.
     * * `postgres_database.single_instance.enable_ip_address_selection`: (Optional) If Advanced Network Segmentation is enabled, then this vLAN needs to be a static vLAN and needs to be true.
     *
     * * `postgres_database.ha_instance`: (Optional) Info for craeting Network profile for HA instance
     * * `postgres_database.ha_instance.vlan_name`: (Required) specify the VLANs for network
     * * `postgres_database.ha_instance.cluster_name`: (Required) specify the cluster name associated with given VLANs
     * * `postgres_database.ha_instance.cluster_id`: (Optional) specify the cluster ids associated with given VLANs
     * * `postgres_database.ha_instance.num_of_clusters`: (Required) number of cluster attached to network profile
     */
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfilePostgresDatabase>[]>;
    /**
     * Topology supported for network profile. Allowed values are "cluster" and "single"
     */
    topology: pulumi.Input<string>;
    /**
     * cluster associated with VLAN. this is used with Single instance for postgres database.
     * * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
     */
    versionClusterAssociations?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfileVersionClusterAssociation>[]>;
}

export interface NdbProfileNetworkProfilePostgresDatabase {
    haInstances?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfilePostgresDatabaseHaInstance>[]>;
    singleInstances?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfilePostgresDatabaseSingleInstance>[]>;
}

export interface NdbProfileNetworkProfilePostgresDatabaseHaInstance {
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    clusterNames?: pulumi.Input<pulumi.Input<string>[]>;
    numOfClusters?: pulumi.Input<string>;
    vlanNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NdbProfileNetworkProfilePostgresDatabaseSingleInstance {
    enableIpAddressSelection?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface NdbProfileNetworkProfileVersionClusterAssociation {
    /**
     * cluster on which profile created
     */
    nxClusterId: pulumi.Input<string>;
}

export interface NdbProfileSoftwareProfile {
    /**
     * specify Nutanix clusters where this profile is available.
     */
    availableClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Software profile info about postgres database.
     * * `postgres_database.source_dbserver_id`: source dbserver id where postgress software will be installed.
     * * `postgres_database.base_profile_version_name`: name for the software profile version.
     * * `postgres_database.base_profile_version_description`: description for the software profile version.
     * * `postgres_database.os_notes`: a note to provide additional information about the operating system
     * * `postgres_database.db_software_notes`: a note to provide additional information about the database software.
     */
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbProfileSoftwareProfilePostgresDatabase>[]>;
    /**
     * Topology of software profile. Allowed values are "cluster" and "single"
     */
    topology: pulumi.Input<string>;
}

export interface NdbProfileSoftwareProfilePostgresDatabase {
    baseProfileVersionDescription?: pulumi.Input<string>;
    baseProfileVersionName?: pulumi.Input<string>;
    dbSoftwareNotes?: pulumi.Input<string>;
    osNotes?: pulumi.Input<string>;
    sourceDbserverId?: pulumi.Input<string>;
}

export interface NdbProfileVersion {
    dbVersion?: pulumi.Input<string>;
    deprecated?: pulumi.Input<boolean>;
    /**
     * Description of profile
     */
    description?: pulumi.Input<string>;
    /**
     * Engine Type of database
     */
    engineType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Name of profile
     */
    name?: pulumi.Input<string>;
    /**
     * owner  of profile
     */
    owner?: pulumi.Input<string>;
    profileId?: pulumi.Input<string>;
    properties?: pulumi.Input<pulumi.Input<inputs.NdbProfileVersionProperty>[]>;
    propertiesMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Publish for all users
     */
    published?: pulumi.Input<boolean>;
    /**
     * status of profile
     */
    status?: pulumi.Input<string>;
    systemProfile?: pulumi.Input<boolean>;
    topology?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionClusterAssociations?: pulumi.Input<pulumi.Input<inputs.NdbProfileVersionVersionClusterAssociation>[]>;
}

export interface NdbProfileVersionProperty {
    /**
     * Name of profile
     */
    name?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbProfileVersionVersionClusterAssociation {
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    /**
     * cluster on which profile created
     */
    nxClusterId?: pulumi.Input<string>;
    optimizedForProvisioning?: pulumi.Input<boolean>;
    ownerId?: pulumi.Input<string>;
    profileVersionId?: pulumi.Input<string>;
    properties?: pulumi.Input<pulumi.Input<inputs.NdbProfileVersionVersionClusterAssociationProperty>[]>;
    /**
     * status of profile
     */
    status?: pulumi.Input<string>;
}

export interface NdbProfileVersionVersionClusterAssociationProperty {
    /**
     * Name of profile
     */
    name?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseActionargument {
    /**
     * - (Required) name of argument
     */
    name: pulumi.Input<string>;
    /**
     * - (Required) value for argument
     */
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNode {
    accessLevel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId?: pulumi.Input<string>;
    /**
     * status of database
     */
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    dbserver?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId?: pulumi.Input<string>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeInfo>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeProperty>[]>;
    protectionDomainId?: pulumi.Input<string>;
    protectionDomains?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeTag>[]>;
}

export interface NdbRegisterDatabaseDatabaseNodeInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbRegisterDatabaseDatabaseNodeProperty {
    /**
     * description
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNodeProtectionDomain {
    assocEntities?: pulumi.Input<pulumi.Input<string>[]>;
    cloudId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    eraCreated?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    primaryHost?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty {
    /**
     * description
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNodeTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseInfo {
    bpgConfigs?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfig>[]>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbRegisterDatabaseInfoBpgConfig {
    bpgDbParams?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigBpgDbParam>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorage>[]>;
    vmProperties?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigVmProperty>[]>;
}

export interface NdbRegisterDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize?: pulumi.Input<string>;
    maintenanceWorkMem?: pulumi.Input<string>;
    maxParallelWorkersPerGather?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    sharedBuffers?: pulumi.Input<string>;
    workMem?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorage {
    archiveStorages?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorageDataDisk>[]>;
    logDisks?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage {
    size?: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageDataDisk {
    count?: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageLogDisk {
    count?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio?: pulumi.Input<number>;
    dirtyExpireCentisecs?: pulumi.Input<number>;
    dirtyRatio?: pulumi.Input<number>;
    dirtyWritebackCentisecs?: pulumi.Input<number>;
    nrHugepages?: pulumi.Input<number>;
    overcommitMemory?: pulumi.Input<number>;
    swappiness?: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigExpiryDetail>[]>;
    postDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigPreDeleteCommand>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbRegisterDatabaseLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    /**
     * - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
     */
    deleteTimeMachine?: pulumi.Input<boolean>;
    deleteVm?: pulumi.Input<boolean>;
    effectiveTimestamp?: pulumi.Input<string>;
    expireInDays?: pulumi.Input<number>;
    expiryDateTimezone?: pulumi.Input<string>;
    expiryTimestamp?: pulumi.Input<string>;
    remindBeforeInDays?: pulumi.Input<number>;
    userCreated?: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseLcmConfigPostDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLcmConfigPreDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLcmConfigRefreshDetail {
    lastRefreshDate?: pulumi.Input<string>;
    nextRefreshDate?: pulumi.Input<string>;
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshInHours?: pulumi.Input<number>;
    refreshInMonths?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLinkedDatabase {
    /**
     * name of database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * status of database
     */
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLinkedDatabaseInfo>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * parent database id
     */
    parentDatabaseId?: pulumi.Input<string>;
    parentLinkedDatabaseId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLinkedDatabaseInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbRegisterDatabasePostgressInfo {
    /**
     * allow multiple databases. Default is true
     */
    allowMultipleDatabases?: pulumi.Input<boolean>;
    /**
     * backup policy of database. Default is prefer_secondary.
     */
    backupPolicy?: pulumi.Input<string>;
    /**
     * name of the database server VM on which the instance you want to register is running.
     */
    dbName: pulumi.Input<string>;
    /**
     * database password
     */
    dbPassword: pulumi.Input<string>;
    /**
     * username of the NDB drive user account that has sudo access.
     */
    dbUser?: pulumi.Input<string>;
    /**
     * listner port of database
     */
    listenerPort: pulumi.Input<string>;
    /**
     * path to the PostgreSQL home directory in which the PostgreSQL software is installed.
     */
    postgresSoftwareHome: pulumi.Input<string>;
    /**
     * path to the directory in which the PostgreSQL software is installed.
     */
    softwareHome?: pulumi.Input<string>;
    /**
     * switch log of database. Default is true
     */
    switchLog?: pulumi.Input<boolean>;
    /**
     * VM IP of the database server VM on which the instance you want to register is running.
     */
    vmIp?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseProperty {
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachine {
    accessLevel?: pulumi.Input<string>;
    /**
     * whether instance is cloned or not
     */
    clone?: pulumi.Input<boolean>;
    clones?: pulumi.Input<string>;
    /**
     * clustered or not. Default is false
     */
    clustered?: pulumi.Input<boolean>;
    database?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    eaStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineProperty>[]>;
    scheduleId?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineSchedule>[]>;
    scope?: pulumi.Input<string>;
    slaId?: pulumi.Input<string>;
    slaUpdateInProgress?: pulumi.Input<boolean>;
    slaUpdateMetadata?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineSla>[]>;
    sourceNxClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineTag>[]>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfo {
    /**
     * - (Optional) enable auto tune log drive. Default: true
     */
    autotunelogdrive?: pulumi.Input<boolean>;
    /**
     * - (Optional) description of time machine
     */
    description?: pulumi.Input<string>;
    /**
     * - (Required) name of time machine
     */
    name: pulumi.Input<string>;
    /**
     * - (Optional) schedule for snapshots
     */
    schedule: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoSchedule>;
    /**
     * -  (optional) SLA details for HA instance
     */
    slaDetails?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoSlaDetail>[]>;
    /**
     * - (Optional) SLA ID for single instance
     */
    slaid?: pulumi.Input<string>;
    /**
     * - (Optional) tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoTag>[]>;
}

export interface NdbRegisterDatabaseTimeMachineInfoSchedule {
    /**
     * - (Optional) snapshot freq and log config
     */
    continuousschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule>;
    /**
     * - (Optional) monthly snapshot config
     */
    monthlyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule>;
    /**
     * - (Optional) quaterly snapshot config
     */
    quartelyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule>;
    /**
     * - (Optional) daily snapshot config
     */
    snapshottimeofday?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday>;
    /**
     * - (Optional) weekly snapshot config
     */
    weeklyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule>;
    /**
     * - (Optional) yearly snapshot config
     */
    yearlyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule {
    enabled: pulumi.Input<boolean>;
    logbackupinterval: pulumi.Input<number>;
    snapshotsperday: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startmonth: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday {
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule {
    dayofweek: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfoSlaDetail {
    /**
     * - (Required) primary sla details
     * * `primary_sla.sla_id` :- (Required) sla id
     * * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
     */
    primarySlas?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla>[]>;
}

export interface NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla {
    nxClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * description of SLA ID.
     */
    slaId: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfoTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineProperty {
    /**
     * description
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineSchedule {
    continuousSchedules?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleDailySchedule>[]>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    globalPolicy?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    monthlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    quartelySchedules?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount?: pulumi.Input<number>;
    snapshotTimeOfDays?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime?: pulumi.Input<string>;
    systemPolicy?: pulumi.Input<boolean>;
    /**
     * timezone on which instance is created xw
     */
    timeZone?: pulumi.Input<string>;
    uniqueName?: pulumi.Input<string>;
    weeklySchedules?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule {
    enabled?: pulumi.Input<boolean>;
    logBackupInterval?: pulumi.Input<number>;
    snapshotsPerDay?: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleDailySchedule {
    enabled?: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    startMonth?: pulumi.Input<string>;
    startMonthValue?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra?: pulumi.Input<boolean>;
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
    seconds?: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek?: pulumi.Input<string>;
    dayOfWeekValue?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    month?: pulumi.Input<string>;
    monthValue?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineSla {
    continuousRetention?: pulumi.Input<number>;
    currentActiveFrequency?: pulumi.Input<string>;
    dailyRetention?: pulumi.Input<number>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monthlyRetention?: pulumi.Input<number>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    pitrEnabled?: pulumi.Input<boolean>;
    quarterlyRetention?: pulumi.Input<number>;
    referenceCount?: pulumi.Input<number>;
    systemSla?: pulumi.Input<boolean>;
    uniqueName?: pulumi.Input<string>;
    weeklyRetention?: pulumi.Input<number>;
    yearlyRetention?: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDbserverCredential {
    label?: pulumi.Input<string>;
    /**
     * password of the NDB drive user account. Conflicts with ssh_key.
     */
    password: pulumi.Input<string>;
    /**
     * username of the NDB drive user account that has sudo access
     */
    username: pulumi.Input<string>;
}

export interface NdbRegisterDbserverPostgresDatabase {
    /**
     * listener port of db server
     */
    listenerPort?: pulumi.Input<string>;
    /**
     * path to the PostgreSQL home directory in which the PostgreSQL software is installed
     */
    postgresSoftwareHome?: pulumi.Input<string>;
}

export interface NdbRegisterDbserverProperty {
    /**
     * Name of db server vm. Should be used in Update Method only.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDbserverTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNode {
    accessLevel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    dbserver?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeInfo>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeProperty>[]>;
    protectionDomainId?: pulumi.Input<string>;
    protectionDomains?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeTag>[]>;
}

export interface NdbScaleDatabaseDatabaseNodeInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbScaleDatabaseDatabaseNodeProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNodeProtectionDomain {
    assocEntities?: pulumi.Input<pulumi.Input<string>[]>;
    cloudId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    eraCreated?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    primaryHost?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeProtectionDomainProperty>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNodeProtectionDomainProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNodeTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseInfo {
    bpgConfigs?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfig>[]>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbScaleDatabaseInfoBpgConfig {
    bpgDbParams?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigBpgDbParam>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorage>[]>;
    vmProperties?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigVmProperty>[]>;
}

export interface NdbScaleDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize?: pulumi.Input<string>;
    maintenanceWorkMem?: pulumi.Input<string>;
    maxParallelWorkersPerGather?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    sharedBuffers?: pulumi.Input<string>;
    workMem?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorage {
    archiveStorages?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorageDataDisk>[]>;
    logDisks?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage {
    size?: pulumi.Input<number>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageDataDisk {
    count?: pulumi.Input<number>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageLogDisk {
    count?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
}

export interface NdbScaleDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio?: pulumi.Input<number>;
    dirtyExpireCentisecs?: pulumi.Input<number>;
    dirtyRatio?: pulumi.Input<number>;
    dirtyWritebackCentisecs?: pulumi.Input<number>;
    nrHugepages?: pulumi.Input<number>;
    overcommitMemory?: pulumi.Input<number>;
    swappiness?: pulumi.Input<number>;
}

export interface NdbScaleDatabaseLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigExpiryDetail>[]>;
    postDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigPreDeleteCommand>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbScaleDatabaseLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    deleteTimeMachine?: pulumi.Input<boolean>;
    deleteVm?: pulumi.Input<boolean>;
    effectiveTimestamp?: pulumi.Input<string>;
    expireInDays?: pulumi.Input<number>;
    expiryDateTimezone?: pulumi.Input<string>;
    expiryTimestamp?: pulumi.Input<string>;
    remindBeforeInDays?: pulumi.Input<number>;
    userCreated?: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseLcmConfigPostDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLcmConfigPreDeleteCommand {
    command?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLcmConfigRefreshDetail {
    lastRefreshDate?: pulumi.Input<string>;
    nextRefreshDate?: pulumi.Input<string>;
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshInHours?: pulumi.Input<number>;
    refreshInMonths?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLinkedDatabase {
    /**
     * name of database
     */
    databaseName?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLinkedDatabaseInfo>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * parent database id
     */
    parentDatabaseId?: pulumi.Input<string>;
    parentLinkedDatabaseId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLinkedDatabaseInfo {
    /**
     * info of instance
     */
    info?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbScaleDatabaseProperty {
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachine {
    accessLevel?: pulumi.Input<string>;
    /**
     * whether instance is cloned or not
     */
    clone?: pulumi.Input<boolean>;
    clones?: pulumi.Input<string>;
    clustered?: pulumi.Input<boolean>;
    database?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    eaStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineProperty>[]>;
    scheduleId?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineSchedule>[]>;
    scope?: pulumi.Input<string>;
    slaId?: pulumi.Input<string>;
    slaUpdateInProgress?: pulumi.Input<boolean>;
    slaUpdateMetadata?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineSla>[]>;
    sourceNxClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineTag>[]>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineProperty {
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineSchedule {
    continuousSchedules?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleDailySchedule>[]>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    globalPolicy?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    monthlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleMonthlySchedule>[]>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    quartelySchedules?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount?: pulumi.Input<number>;
    snapshotTimeOfDays?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime?: pulumi.Input<string>;
    systemPolicy?: pulumi.Input<boolean>;
    /**
     * timezone on which instance is created xw
     */
    timeZone?: pulumi.Input<string>;
    uniqueName?: pulumi.Input<string>;
    weeklySchedules?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules?: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbScaleDatabaseTimeMachineScheduleContinuousSchedule {
    enabled?: pulumi.Input<boolean>;
    logBackupInterval?: pulumi.Input<number>;
    snapshotsPerDay?: pulumi.Input<number>;
}

export interface NdbScaleDatabaseTimeMachineScheduleDailySchedule {
    enabled?: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    startMonth?: pulumi.Input<string>;
    startMonthValue?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra?: pulumi.Input<boolean>;
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
    seconds?: pulumi.Input<number>;
}

export interface NdbScaleDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek?: pulumi.Input<string>;
    dayOfWeekValue?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    month?: pulumi.Input<string>;
    monthValue?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineSla {
    continuousRetention?: pulumi.Input<number>;
    currentActiveFrequency?: pulumi.Input<string>;
    dailyRetention?: pulumi.Input<number>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monthlyRetention?: pulumi.Input<number>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    pitrEnabled?: pulumi.Input<boolean>;
    quarterlyRetention?: pulumi.Input<number>;
    referenceCount?: pulumi.Input<number>;
    systemSla?: pulumi.Input<boolean>;
    uniqueName?: pulumi.Input<string>;
    weeklyRetention?: pulumi.Input<number>;
    yearlyRetention?: pulumi.Input<number>;
}

export interface NdbScaleDatabaseTimeMachineTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfilePostgresDatabase {
    /**
     * db software notes
     */
    dbSoftwareNotes?: pulumi.Input<string>;
    /**
     * os notes for software profile
     */
    osNotes?: pulumi.Input<string>;
    /**
     * source dbserver id
     */
    sourceDbserverId?: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfileProperty {
    /**
     * Name of profile
     */
    name?: pulumi.Input<string>;
    /**
     * secure or not
     */
    secure?: pulumi.Input<boolean>;
    /**
     * value of property
     */
    value?: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfileVersionClusterAssociation {
    /**
     * date created of profile
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified of profile
     */
    dateModified?: pulumi.Input<string>;
    /**
     * nutanix cluster id
     */
    nxClusterId?: pulumi.Input<string>;
    /**
     * version optimized for provisioning
     */
    optimizedForProvisioning?: pulumi.Input<boolean>;
    /**
     * owner id
     */
    ownerId?: pulumi.Input<string>;
    /**
     * profile version id
     */
    profileVersionId?: pulumi.Input<string>;
    /**
     * properties of software profile
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbSoftwareVersionProfileVersionClusterAssociationProperty>[]>;
    /**
     * status of profile. Allowed Values are "deprecated", "published", "unpublished"
     */
    status?: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfileVersionClusterAssociationProperty {
    /**
     * Name of profile
     */
    name?: pulumi.Input<string>;
    /**
     * secure or not
     */
    secure?: pulumi.Input<boolean>;
    /**
     * value of property
     */
    value?: pulumi.Input<string>;
}

export interface NdbStretchedVlanMetadata {
    gateway?: pulumi.Input<string>;
    subnetMask?: pulumi.Input<string>;
}

export interface NdbStretchedVlanVlansList {
    /**
     * cluster id where network is present
     */
    clusterId?: pulumi.Input<string>;
    /**
     * network id
     */
    id?: pulumi.Input<string>;
    /**
     * network managed by NDB or not
     */
    managed?: pulumi.Input<boolean>;
    /**
     * name for the stretched VLAN
     */
    name?: pulumi.Input<string>;
    /**
     * properties of network
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbStretchedVlanVlansListProperty>[]>;
    /**
     * properties map of network
     */
    propertiesMaps?: pulumi.Input<pulumi.Input<inputs.NdbStretchedVlanVlansListPropertiesMap>[]>;
    /**
     * stretched vlan id
     */
    stretchedVlanId?: pulumi.Input<string>;
    /**
     * type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
     */
    type?: pulumi.Input<string>;
}

export interface NdbStretchedVlanVlansListPropertiesMap {
    /**
     * gateway of vlan
     */
    vlanGateway?: pulumi.Input<string>;
    /**
     * primary dns of vlan
     */
    vlanPrimaryDns?: pulumi.Input<string>;
    /**
     * secondary dns of vlan
     */
    vlanSecondaryDns?: pulumi.Input<string>;
    /**
     * subnet mask of vlan
     */
    vlanSubnetMask?: pulumi.Input<string>;
}

export interface NdbStretchedVlanVlansListProperty {
    /**
     * name for the stretched VLAN
     */
    name?: pulumi.Input<string>;
    secure?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleTargetGroupFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleTargetGroupFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleCategory {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PbrDestination {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface PbrProtocolParameters {
    icmp?: pulumi.Input<inputs.PbrProtocolParametersIcmp>;
    protocolNumber?: pulumi.Input<string>;
    tcp?: pulumi.Input<inputs.PbrProtocolParametersTcp>;
    udp?: pulumi.Input<inputs.PbrProtocolParametersUdp>;
}

export interface PbrProtocolParametersIcmp {
    icmpCode: pulumi.Input<number>;
    icmpType: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersTcpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersUdpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrSource {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface ProjectAccountReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectAcp {
    /**
     * The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
     */
    contextFilterLists?: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterList>[]>;
    /**
     * A description for project.
     */
    description?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * Reference to role.
     */
    roleReference: pulumi.Input<inputs.ProjectAcpRoleReference>;
    /**
     * List of Reference of users groups.
     */
    userGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectAcpUserGroupReferenceList>[]>;
    /**
     * List of Reference of users.
     */
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectAcpUserReferenceList>[]>;
}

export interface ProjectAcpContextFilterList {
    /**
     * (Required) A list of Entity filter expressions.
     */
    entityFilterExpressionLists: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListEntityFilterExpressionList>[]>;
    /**
     * - (Optional) Filter the scope of an Access Control Policy.
     */
    scopeFilterExpressionLists?: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListScopeFilterExpressionList>[]>;
}

export interface ProjectAcpContextFilterListEntityFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the entity type.
     */
    leftHandSideEntityType?: pulumi.Input<string>;
    /**
     * - (Required) The operator in the filter expression.
     */
    operator: pulumi.Input<string>;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: pulumi.Input<inputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide>;
}

export interface ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<inputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories>;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection?: pulumi.Input<string>;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpContextFilterListScopeFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the scope type.
     */
    leftHandSide: pulumi.Input<string>;
    /**
     * - (Required) The operator in the filter expression.
     */
    operator: pulumi.Input<string>;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: pulumi.Input<inputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide>;
}

export interface ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories?: pulumi.Input<inputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories>;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection?: pulumi.Input<string>;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpRoleReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectAcpUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectAcpUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectCategory {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface ProjectClusterReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectDefaultEnvironmentReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectDefaultSubnetReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectEnvironmentReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalNetworkList {
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectResourceDomain {
    resources: pulumi.Input<pulumi.Input<inputs.ProjectResourceDomainResource>[]>;
}

export interface ProjectResourceDomainResource {
    limit: pulumi.Input<number>;
    resourceType: pulumi.Input<string>;
    units?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<number>;
}

export interface ProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectTunnelReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectUserGroupList {
    directoryServiceOus?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupListDirectoryServiceOus>[]>;
    directoryServiceUserGroups?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupListDirectoryServiceUserGroup>[]>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    samlUserGroups?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupListSamlUserGroup>[]>;
}

export interface ProjectUserGroupListDirectoryServiceOus {
    distinguishedName: pulumi.Input<string>;
}

export interface ProjectUserGroupListDirectoryServiceUserGroup {
    distinguishedName: pulumi.Input<string>;
}

export interface ProjectUserGroupListSamlUserGroup {
    idpUuid: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name: pulumi.Input<string>;
}

export interface ProjectUserList {
    directoryServiceUser?: pulumi.Input<inputs.ProjectUserListDirectoryServiceUser>;
    identityProviderUser?: pulumi.Input<inputs.ProjectUserListIdentityProviderUser>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ProjectUserListDirectoryServiceUser {
    defaultUserPrincipalName?: pulumi.Input<string>;
    directoryServiceReference: pulumi.Input<inputs.ProjectUserListDirectoryServiceUserDirectoryServiceReference>;
    userPrincipalName?: pulumi.Input<string>;
}

export interface ProjectUserListDirectoryServiceUserDirectoryServiceReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectUserListIdentityProviderUser {
    identityProviderReference: pulumi.Input<inputs.ProjectUserListIdentityProviderUserIdentityProviderReference>;
    username?: pulumi.Input<string>;
}

export interface ProjectUserListIdentityProviderUserIdentityProviderReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProjectVpcReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex?: pulumi.Input<number>;
    snapshotScheduleLists?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList>[]>;
    sourceAvailabilityZoneIndex?: pulumi.Input<number>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs?: pulumi.Input<number>;
    localSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy>;
    recoveryPointObjectiveSecs: pulumi.Input<number>;
    remoteSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy>;
    snapshotType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleCategory {
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilter {
    kindLists?: pulumi.Input<pulumi.Input<string>[]>;
    params?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleCategoryFilterParam>[]>;
    type?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilterParam {
    /**
     * The name for the protection rule.
     */
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterUuid?: pulumi.Input<string>;
}

export interface ProtectionRuleOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface ProtectionRuleProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the protection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanCategory {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParameters {
    floatingIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentList>[]>;
    networkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentList {
    availabilityZoneUrl: pulumi.Input<string>;
    vmIpAssignmentLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig>;
    testFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig>;
    vmNicInformation: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingList {
    areNetworksStretched?: pulumi.Input<boolean>;
    availabilityZoneNetworkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterReferenceLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList>[]>;
    recoveryIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList>[]>;
    recoveryNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork>;
    testIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList>[]>;
    testNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) the UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanStageList {
    delayTimeSecs?: pulumi.Input<number>;
    stageUuid?: pulumi.Input<string>;
    stageWork: pulumi.Input<inputs.RecoveryPlanStageListStageWork>;
}

export interface RecoveryPlanStageListStageWork {
    recoverEntities?: pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntities>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntities {
    entityInfoLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList {
    anyEntityReferenceKind?: pulumi.Input<string>;
    anyEntityReferenceName?: pulumi.Input<string>;
    anyEntityReferenceUuid?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory>[]>;
    scriptLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory {
    /**
     * The name for the Recovery Plan.
     */
    name?: pulumi.Input<string>;
    /**
     * value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList {
    enableScriptExec: pulumi.Input<boolean>;
    timeout?: pulumi.Input<string>;
}

export interface RoleCategory {
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface RoleOwnerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface RolePermissionReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface RoleProjectReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Optional) Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface ServiceGroupServiceList {
    /**
     * - (Optional) ICMP type code list
     */
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListIcmpTypeCodeList>[]>;
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    protocol?: pulumi.Input<string>;
    /**
     * - (Optional) TCP Port range list
     */
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListTcpPortRangeList>[]>;
    /**
     * - (Optional) UDP port range list
     */
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListUdpPortRangeList>[]>;
}

export interface ServiceGroupServiceListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ServiceGroupServiceListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface ServiceGroupServiceListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface StaticRoutesDefaultRouteNexthop {
    /**
     * Reference to a subnet.
     */
    externalSubnetReferenceUuid?: pulumi.Input<string>;
}

export interface StaticRoutesStaticRoutesList {
    /**
     * Destination ip with prefix.
     */
    destination: pulumi.Input<string>;
    /**
     * Reference to a subnet. Supported with 2022.x .
     */
    externalSubnetReferenceUuid?: pulumi.Input<string>;
    /**
     * Reference to a vpn connection.
     */
    vpnConnectionReferenceUuid?: pulumi.Input<string>;
}

export interface SubnetCategory {
    /**
     * - (Optional) Subnet name (Readonly).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface UserAccessControlPolicyReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface UserCategory {
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUser {
    defaultUserPrincipalName?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
     */
    directoryServiceReference: pulumi.Input<inputs.UserDirectoryServiceUserDirectoryServiceReference>;
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    userPrincipalName?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUserDirectoryServiceReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface UserGroupsCategory {
    /**
     * - subnet name.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface UserGroupsDirectoryServiceOus {
    distinguishedName: pulumi.Input<string>;
}

export interface UserGroupsDirectoryServiceUserGroup {
    /**
     * - (Required) The Distinguished name for the user group.
     */
    distinguishedName: pulumi.Input<string>;
}

export interface UserGroupsSamlUserGroup {
    /**
     * - (Required) The UUID of the Identity Provider that the group belongs to.
     */
    idpUuid: pulumi.Input<string>;
    /**
     * - (Required) The name of the SAML group which the IDP provides.
     */
    name: pulumi.Input<string>;
}

export interface UserIdentityProviderUser {
    /**
     * - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
     */
    identityProviderReference: pulumi.Input<inputs.UserIdentityProviderUserIdentityProviderReference>;
    /**
     * - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
     */
    username?: pulumi.Input<string>;
}

export interface UserIdentityProviderUserIdentityProviderReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid: pulumi.Input<string>;
}

export interface UserProjectReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: pulumi.Input<string>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineCategory {
    /**
     * - (Required) The name for the vm.
     */
    name?: pulumi.Input<string>;
    /**
     * - value of the key.
     */
    value?: pulumi.Input<string>;
}

export interface VirtualMachineDiskList {
    /**
     * Reference to a data source.
     *
     * The diskSize (the disk sizeMib and the diskSizeBytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk sizeMib or diskSizeBytes when you set dataSourceReference but, you can update the diskSize after creation (second apply).
     */
    dataSourceReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Properties to a device.
     */
    deviceProperties?: pulumi.Input<inputs.VirtualMachineDiskListDeviceProperties>;
    /**
     * Size of the disk in Bytes.
     */
    diskSizeBytes?: pulumi.Input<number>;
    /**
     * Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
     */
    diskSizeMib?: pulumi.Input<number>;
    storageConfig?: pulumi.Input<inputs.VirtualMachineDiskListStorageConfig>;
    /**
     * - (Optional) The device ID which is used to uniquely identify this particular disk.
     */
    uuid?: pulumi.Input<string>;
    volumeGroupReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListDeviceProperties {
    /**
     * - A Disk type (default: DISK).
     */
    deviceType?: pulumi.Input<string>;
    /**
     * - Address of disk to boot from.
     */
    diskAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListStorageConfig {
    /**
     * - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
     */
    flashMode?: pulumi.Input<string>;
    /**
     * - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
     * * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
     * * `storage_container_reference.#.kind`: - kind of the container reference
     * * `storage_container_reference.#.name`: - name of the container reference
     * * `storage_container_reference.#.uuid`: - uiid of the container reference
     */
    storageContainerReferences?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDiskListStorageConfigStorageContainerReference>[]>;
}

export interface VirtualMachineDiskListStorageConfigStorageContainerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: pulumi.Input<string>;
    /**
     * - (Required) The name for the vm.
     */
    name?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineGpuList {
    /**
     * - (Computed) The device ID of the GPU.
     */
    deviceId?: pulumi.Input<number>;
    /**
     * Fraction of the physical GPU assigned.
     */
    fraction?: pulumi.Input<number>;
    /**
     * - (ReadOnly) GPU frame buffer size in MiB.
     */
    frameBufferSizeMib?: pulumi.Input<number>;
    /**
     * - (ReadOnly) Last determined guest driver version.
     */
    guestDriverVersion?: pulumi.Input<string>;
    /**
     * - (Optional) The mode of this GPU.
     */
    mode?: pulumi.Input<string>;
    /**
     * - (ReadOnly) Name of the GPU resource.
     */
    name?: pulumi.Input<string>;
    /**
     * - (ReadOnly) Number of supported virtual display heads.
     */
    numVirtualDisplayHeads?: pulumi.Input<number>;
    /**
     * GPU {segment:bus:device:function} (sbdf) address if assigned.
     */
    pciAddress?: pulumi.Input<string>;
    /**
     * - (ReadOnly) UUID of the GPU.
     */
    uuid?: pulumi.Input<string>;
    /**
     * - (Optional) The vendor of the GPU.
     */
    vendor?: pulumi.Input<string>;
}

export interface VirtualMachineNicList {
    /**
     * - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
     */
    ipEndpointLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListIpEndpointList>[]>;
    isConnected?: pulumi.Input<string>;
    /**
     * - The MAC address for the adapter.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * - The model of this NIC. (Options : VIRTIO , E1000).
     */
    model?: pulumi.Input<string>;
    /**
     * - The reference to a network_function_chain.
     */
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
     */
    networkFunctionNicType?: pulumi.Input<string>;
    /**
     * - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
     */
    nicType?: pulumi.Input<string>;
    /**
     * - The number of tx/rx queue pairs for this NIC.
     */
    numQueues?: pulumi.Input<number>;
    /**
     * - The name of the subnet reference to.
     */
    subnetName?: pulumi.Input<string>;
    /**
     * - The reference to a subnet.
     */
    subnetUuid?: pulumi.Input<string>;
    /**
     * - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineNicListIpEndpointList {
    /**
     * - Address string.
     */
    ip?: pulumi.Input<string>;
    /**
     * - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
     */
    type?: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatus {
    floatingIp?: pulumi.Input<string>;
    ipEndpointLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListStatusIpEndpointList>[]>;
    isConnected?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkFunctionNicType?: pulumi.Input<string>;
    nicType?: pulumi.Input<string>;
    numQueues?: pulumi.Input<number>;
    subnetName?: pulumi.Input<string>;
    subnetUuid?: pulumi.Input<string>;
    /**
     * - the UUID(Required).
     */
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatusIpEndpointList {
    /**
     * - Address string.
     */
    ip?: pulumi.Input<string>;
    /**
     * - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
     */
    type?: pulumi.Input<string>;
}

export interface VirtualMachineSerialPortList {
    /**
     * - Index of the serial port (int).
     */
    index?: pulumi.Input<number>;
    /**
     * - Indicates whether the serial port connection is connected or not (`true` or `false`).
     */
    isConnected?: pulumi.Input<boolean>;
}

export interface VpcCommonDomainNameServerIpList {
    /**
     * ip address.
     */
    ip?: pulumi.Input<string>;
}

export interface VpcExternalSubnetListStatus {
    activeGatewayNode?: pulumi.Input<inputs.VpcExternalSubnetListStatusActiveGatewayNode>;
    externalIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    externalSubnetReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VpcExternalSubnetListStatusActiveGatewayNode {
    hostReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ipAddress?: pulumi.Input<string>;
}

export interface VpcExternallyRoutablePrefixList {
    /**
     * ip address.
     */
    ip: pulumi.Input<string>;
    /**
     * prefix length.
     */
    prefixLength: pulumi.Input<number>;
}
