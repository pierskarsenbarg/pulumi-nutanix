// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlPolicyCategory {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface AccessControlPolicyContextFilterList {
    entityFilterExpressionLists: outputs.AccessControlPolicyContextFilterListEntityFilterExpressionList[];
    scopeFilterExpressionLists: outputs.AccessControlPolicyContextFilterListScopeFilterExpressionList[];
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the entity type.
     */
    leftHandSideEntityType: string;
    /**
     * - (Required) The operator in the filter expression.
     */
    operator: string;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories: outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection: string;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists: string[];
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name: string;
    /**
     * - value of the key.
     */
    values: string[];
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionList {
    /**
     * - (Optional)  The LHS of the filter expression - the scope type.
     */
    leftHandSide: string;
    /**
     * - (Required) The operator of the filter expression.
     */
    operator: string;
    /**
     * - (Required) The right hand side (RHS) of an scope expression.
     */
    rightHandSide: outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    /**
     * - (Optional) The category values represented as a dictionary of key > list of values.
     */
    categories: outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories;
    /**
     * - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection: string;
    /**
     * - (Optional) The explicit list of UUIDs for the given kind.
     */
    uuidLists: string[];
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories {
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name: string;
    /**
     * - value of the key.
     */
    values: string[];
}

export interface AccessControlPolicyOwnerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name?: string;
    /**
     * - the UUID(Required).
     */
    uuid?: string;
}

export interface AccessControlPolicyRoleReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface AccessControlPolicyUserGroupReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface AccessControlPolicyUserReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Optional) Name of the Access Control Policy.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface AddressGroupIpAddressBlockList {
    ip: string;
    prefixLength: number;
}

export interface FoundationCentralImageClusterClusterStatus {
    aggregatePercentComplete: number;
    clusterCreationStarted: boolean;
    clusterProgressDetails: outputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail[];
    currentFoundationIp: string;
    foundationSessionId: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    nodeProgressDetails: outputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail[];
}

export interface FoundationCentralImageClusterClusterStatusClusterProgressDetail {
    /**
     * Name of the cluster.
     */
    clusterName: string;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface FoundationCentralImageClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface FoundationCentralImageClusterCommonNetworkSettings {
    cvmDnsServers: string[];
    cvmNtpServers: string[];
    hypervisorDnsServers: string[];
    hypervisorNtpServers: string[];
}

export interface FoundationCentralImageClusterFoundationInitConfig {
    blocks: outputs.FoundationCentralImageClusterFoundationInitConfigBlock[];
    clusters: outputs.FoundationCentralImageClusterFoundationInitConfigCluster[];
    cvmGateway: string;
    cvmNetmask: string;
    dnsServers: string;
    hypervProductKey: string;
    hypervSku: string;
    hypervisorGateway: string;
    hypervisorIsoUrl: {[key: string]: string};
    hypervisorIsos: outputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso[];
    hypervisorNetmask: string;
    ipmiGateway: string;
    ipmiNetmask: string;
    nosPackageUrls: outputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl[];
}

export interface FoundationCentralImageClusterFoundationInitConfigBlock {
    blockId: string;
    nodes: outputs.FoundationCentralImageClusterFoundationInitConfigBlockNode[];
}

export interface FoundationCentralImageClusterFoundationInitConfigBlockNode {
    cvmIp: string;
    cvmVlanId: number;
    fcImagedNodeUuid: string;
    hardwareAttributesOverride: {[key: string]: string};
    hypervisor: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    imageNow: boolean;
    ipmiIp: string;
    ipv6Address: string;
    nodePosition: string;
    nodeSerial: string;
}

export interface FoundationCentralImageClusterFoundationInitConfigCluster {
    /**
     * External management ip of the cluster.
     */
    clusterExternalIp: string;
    clusterInitNow: boolean;
    clusterInitSuccessful: boolean;
    clusterMembers: string[];
    /**
     * Name of the cluster.
     */
    clusterName: string;
    cvmDnsServers: string;
    cvmNtpServers: string;
    /**
     * Redundancy factor of the cluster.
     */
    redundancyFactor: number;
    /**
     * Timezone to be set on the cluster.
     */
    timezone: string;
}

export interface FoundationCentralImageClusterFoundationInitConfigHypervisorIso {
    hypervisorType: string;
    sha256sum: string;
    url: string;
}

export interface FoundationCentralImageClusterFoundationInitConfigNosPackageUrl {
    sha256sum: string;
    url: string;
}

export interface FoundationCentralImageClusterHypervisorIsoDetails {
    hypervProductKey: string;
    hypervSku: string;
    sha256sum: string;
    url?: string;
}

export interface FoundationCentralImageClusterNodeList {
    cvmGateway: string;
    cvmIp: string;
    cvmNetmask?: string;
    cvmRamGb?: number;
    cvmVlanId: number;
    hardwareAttributesOverride: {[key: string]: any};
    hypervisorGateway: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    hypervisorNetmask: string;
    hypervisorType?: string;
    imageNow: boolean;
    imagedNodeUuid: string;
    ipmiGateway: string;
    ipmiIp: string;
    ipmiNetmask?: string;
    rdmaPassthrough?: boolean;
    useExistingNetworkSettings?: boolean;
}

export interface FoundationImageNodesBlock {
    /**
     * - Block ID.
     */
    blockId?: string;
    nodes: outputs.FoundationImageNodesBlockNode[];
}

export interface FoundationImageNodesBlockNode {
    /**
     * - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
     */
    bondLacpRate?: string;
    /**
     * - (Required if node is capable) dynamic if using LACP, static for LAG
     */
    bondMode?: string;
    /**
     * - MAC Addresses of NICs in a team/bond
     */
    bondUplinks?: string;
    /**
     * - ID of cluster.
     */
    clusterId?: string;
    /**
     * - Current CVM vlan tag. 0 Value with remove vlan tag.
     */
    currentCvmVlanTag?: number;
    /**
     * - CVM current network interface.
     */
    currentNetworkInterface?: string;
    /**
     * - RAM capacity of CVM in GB.
     */
    cvmGbRam?: number;
    cvmIp?: string;
    /**
     * - Number of CVM vcpus.
     */
    cvmNumVcpus?: number;
    /**
     * - use "vmInstaller" to enable CVM imaging from standalone.
     */
    deviceHint?: string;
    /**
     * - serial of boot device to be excluded (used by NX G6 platforms)
     */
    exludeBootSerial?: string;
    hypervisor?: string;
    /**
     * - (Required) Hypervisor Hostname.
     */
    hypervisorHostname: string;
    /**
     * - (Required) Hypervisor IP address.
     */
    hypervisorIp: string;
    /**
     * - Imaging delay.
     */
    imageDelay?: number;
    /**
     * - (Optional, Default = true) If the node should be imaged now.
     */
    imageNow?: boolean;
    imageSuccessful?: boolean;
    /**
     * - Whether IPMI should be configured.
     */
    ipmiConfigureNow?: boolean;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
     */
    ipmiGateway?: string;
    /**
     * - (Required) IPMI IP address.
     */
    ipmiIp?: string;
    /**
     * - IPMI MAC address.
     */
    ipmiMac?: string;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
     */
    ipmiNetmask?: string;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
     */
    ipmiPassword?: string;
    /**
     * - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
     */
    ipmiUser?: string;
    /**
     * - (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) IPV6 address.
     */
    ipv6Address?: string;
    /**
     * - (Required when deviceHint = "vmInstaller" for imaging using node's existing cvm for imaging) ipv6 interface.
     */
    ipv6Interface?: string;
    /**
     * - relocate bootbank files to make space for phoenix files.
     */
    mitigateLowBootSpace?: boolean;
    /**
     * - (Required) Position of the node in the block.
     */
    nodePosition: string;
    /**
     * - serial number of the node.
     */
    nodeSerial?: string;
    /**
     * - mac address of nic to be used for rdma
     */
    rdmaMacAddr?: string;
    /**
     * - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
     */
    rdmaPassthrough?: boolean;
    /**
     * - UCSM Managed mode.
     */
    ucsmManagedMode?: string;
    /**
     * - UCSM node serial.
     */
    ucsmNodeSerial?: string;
    /**
     * - Object of UCSM parameters.
     * * `ucsm_params.native_vlan` :- If the vlan is native.
     * * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
     * * `ucsm_params.mac_pool` :- Mac address pool.
     * * `ucsm_params.vlan_name` :- Name of vlan.
     */
    ucsmParams?: outputs.FoundationImageNodesBlockNodeUcsmParams;
    vswitches?: outputs.FoundationImageNodesBlockNodeVswitch[];
}

export interface FoundationImageNodesBlockNodeUcsmParams {
    keepUcsmSettings?: boolean;
    macPool?: string;
    nativeVlan?: boolean;
    vlanName?: string;
}

export interface FoundationImageNodesBlockNodeVswitch {
    bondMode?: string;
    lacp?: string;
    mtu?: number;
    name?: string;
    otherConfigs?: string[];
    uplinks?: string[];
}

export interface FoundationImageNodesCluster {
    /**
     * - Backplane netmask.
     */
    backplaneNetmask?: string;
    /**
     * - Backplane subnet address.
     */
    backplaneSubnet?: string;
    /**
     * - Backplane vlan.
     */
    backplaneVlan?: string;
    /**
     * - External IP of the cluster.
     */
    clusterExternalIp?: string;
    /**
     * - (Optional, Default = true) If cluster should be created.
     */
    clusterInitNow?: boolean;
    /**
     * - If cluster initialization was successful.
     */
    clusterInitSuccessful?: boolean;
    /**
     * - (Required) Members in the cluster.
     */
    clusterMembers: string[];
    /**
     * - (Required) Name of the cluster.
     */
    clusterName: string;
    /**
     * - DNS servers of CVM.
     */
    cvmDnsServers?: string;
    /**
     * - NTP servers of CVM.
     */
    cvmNtpServers?: string;
    /**
     * - If network segmentation should be enabled.
     */
    enableNs?: boolean;
    /**
     * - NTP servers of hypervisor.
     */
    hypervisorNtpServers?: string;
    /**
     * - (Required) Cluster Redundancy Factor.
     */
    redundancyFactor: number;
    /**
     * - If it is a single node cluster.
     */
    singleNodeCluster?: boolean;
}

export interface FoundationImageNodesClusterUrl {
    clusterName: string;
    clusterUrl: string;
}

export interface FoundationImageNodesEosMetadata {
    /**
     * - arrya of account names
     */
    accountNames?: string[];
    /**
     * - Id of the Eos config uploaded in foundation GUI.
     */
    configId?: string;
    /**
     * - Email address of the user who downloaded Eos config.
     */
    email?: string;
}

export interface FoundationImageNodesFcSettings {
    /**
     * - Foundation Central metadata which will be transferred to the newly imaged node.
     * * `fc_metadata.fc_ip` :- IP address of foundation central.
     * * `fc_metadata.api_key` :- apiKey which the node uses to register itself with foundation central.
     */
    fcMetadata: outputs.FoundationImageNodesFcSettingsFcMetadata;
    /**
     * - If this attribute is set to True, FC workflow will be invoked.
     */
    foundationCentral: boolean;
}

export interface FoundationImageNodesFcSettingsFcMetadata {
    apiKey: string;
    fcIp: string;
}

export interface FoundationImageNodesHypervisorIso {
    /**
     * - Details of hypervisor ISO of type esx.
     */
    esx?: outputs.FoundationImageNodesHypervisorIsoEsx;
    /**
     * - Details of hypervisor ISO of type hyperv.
     */
    hyperv?: outputs.FoundationImageNodesHypervisorIsoHyperv;
    /**
     * - Details of hypervisor ISO of type kvm.
     */
    kvm?: outputs.FoundationImageNodesHypervisorIsoKvm;
    /**
     * - Details of hypervisor ISO of type xen.
     */
    xen?: outputs.FoundationImageNodesHypervisorIsoXen;
}

export interface FoundationImageNodesHypervisorIsoEsx {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesHypervisorIsoHyperv {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesHypervisorIsoKvm {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesHypervisorIsoXen {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesTests {
    /**
     * - Whether NCC checks should run.
     */
    runNcc?: boolean;
    /**
     * - Whether system checks should run.
     */
    runSyscheck?: boolean;
}

export interface FoundationIpmiConfigBlock {
    /**
     * - (Optional) Block Id
     */
    blockId?: string;
    /**
     * - (Required) array of nodes for ipmi config.
     */
    nodes: outputs.FoundationIpmiConfigBlockNode[];
}

export interface FoundationIpmiConfigBlockNode {
    /**
     * - (Required) Whether IPMI should be configured. Should be kept true to configure
     */
    ipmiConfigureNow: boolean;
    /**
     * - Whether IPMI was successfully configured.
     */
    ipmiConfigureSuccessful: boolean;
    /**
     * - IPMI IP address.
     */
    ipmiIp: string;
    /**
     * - (Required) IPMI mac address.
     */
    ipmiMac: string;
    /**
     * - IPMI configuration status message if any.
     */
    ipmiMessage: string;
}

export interface GetAccessControlPoliciesEntity {
    accessControlPolicyId: string;
    /**
     * The version of the API.
     */
    apiVersion: string;
    /**
     * - The category values represented as a dictionary of key > list of values.
     */
    categories: outputs.GetAccessControlPoliciesEntityCategory[];
    contextFilterLists: outputs.GetAccessControlPoliciesEntityContextFilterList[];
    /**
     * - The description of the Access Control Policy.
     */
    description: string;
    /**
     * - The Access Control Policy kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * - The reference to a project.
     */
    projectReference: {[key: string]: string};
    /**
     * - The reference to a role.
     */
    roleReferences: outputs.GetAccessControlPoliciesEntityRoleReference[];
    /**
     * - The state of the Access Control Policy.
     */
    state: string;
    /**
     * - The User group(s) being assigned a given role.
     */
    userGroupReferenceLists: outputs.GetAccessControlPoliciesEntityUserGroupReferenceList[];
    /**
     * - The User(s) being assigned a given role.
     */
    userReferenceLists: outputs.GetAccessControlPoliciesEntityUserReferenceList[];
}

export interface GetAccessControlPoliciesEntityCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetAccessControlPoliciesEntityContextFilterList {
    /**
     * A list of Entity filter expressions.
     */
    entityFilterExpressionLists: outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList[];
    /**
     * - The device ID which is used to uniquely identify this particular disk.
     */
    scopeFilterExpressionLists: outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList[];
}

export interface GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList {
    /**
     * -  The LHS of the filter expression - the entity type.
     */
    leftHandSideEntityType: string;
    /**
     * - The operator in the filter expression.
     */
    operator: string;
    /**
     * - The right hand side (RHS) of an scope expression.
     */
    rightHandSides: outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide {
    /**
     * - The category values represented as a dictionary of key > list of values.
     */
    categories: outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory[];
    /**
     * -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection: string;
    /**
     * - The explicit list of UUIDs for the given kind.
     */
    uuidLists: string[];
}

export interface GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    values: string[];
}

export interface GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList {
    /**
     * -  The LHS of the filter expression - the scope type.
     */
    leftHandSide: string;
    /**
     * - The operator in the filter expression.
     */
    operator: string;
    /**
     * - The right hand side (RHS) of an scope expression.
     */
    rightHandSides: outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide {
    /**
     * - The category values represented as a dictionary of key > list of values.
     */
    categories: outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory[];
    /**
     * -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection: string;
    /**
     * - The explicit list of UUIDs for the given kind.
     */
    uuidLists: string[];
}

export interface GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    values: string[];
}

export interface GetAccessControlPoliciesEntityRoleReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetAccessControlPoliciesEntityUserGroupReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetAccessControlPoliciesEntityUserReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetAccessControlPoliciesMetadata {
    filter: string;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetAccessControlPolicyCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetAccessControlPolicyContextFilterList {
    /**
     * A list of Entity filter expressions.
     */
    entityFilterExpressionLists: outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionList[];
    /**
     * - The device ID which is used to uniquely identify this particular disk.
     */
    scopeFilterExpressionLists: outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionList[];
}

export interface GetAccessControlPolicyContextFilterListEntityFilterExpressionList {
    /**
     * -  The LHS of the filter expression - the entity type.
     */
    leftHandSideEntityType: string;
    /**
     * - The operator in the filter expression.
     */
    operator: string;
    /**
     * - The right hand side (RHS) of an scope expression.
     */
    rightHandSides: outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    /**
     * - The category values represented as a dictionary of key > list of values.
     */
    categories: outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory[];
    /**
     * -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection: string;
    /**
     * - The explicit list of UUIDs for the given kind.
     */
    uuidLists: string[];
}

export interface GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    values: string[];
}

export interface GetAccessControlPolicyContextFilterListScopeFilterExpressionList {
    /**
     * -  The LHS of the filter expression - the scope type.
     */
    leftHandSide: string;
    /**
     * - The operator in the filter expression.
     */
    operator: string;
    /**
     * - The right hand side (RHS) of an scope expression.
     */
    rightHandSides: outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    /**
     * - The category values represented as a dictionary of key > list of values.
     */
    categories: outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory[];
    /**
     * -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
     */
    collection: string;
    /**
     * - The explicit list of UUIDs for the given kind.
     */
    uuidLists: string[];
}

export interface GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    values: string[];
}

export interface GetAccessControlPolicyRoleReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetAccessControlPolicyUserGroupReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetAccessControlPolicyUserReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetAddressGroupIpAddressBlockList {
    /**
     * - (ReadOnly) IP of the address block
     */
    ip: string;
    /**
     * - (ReadOnly) Prefix length of address block in int
     */
    prefixLength: number;
}

export interface GetAddressGroupsEntity {
    /**
     * Information about address_group
     */
    addressGroups: outputs.GetAddressGroupsEntityAddressGroup[];
    /**
     * List of associated policies to address group
     */
    associatedPoliciesLists: outputs.GetAddressGroupsEntityAssociatedPoliciesList[];
}

export interface GetAddressGroupsEntityAddressGroup {
    /**
     * - (ReadOnly) Address Group string
     */
    addressGroupString: string;
    /**
     * - (ReadOnly) Description of the address group
     */
    description?: string;
    /**
     * - (ReadOnly) list of IP address blocks with their prefix length
     */
    ipAddressBlockLists: outputs.GetAddressGroupsEntityAddressGroupIpAddressBlockList[];
    /**
     * - (ReadOnly) Name of associated policy
     */
    name: string;
}

export interface GetAddressGroupsEntityAddressGroupIpAddressBlockList {
    /**
     * - (ReadOnly) IP of the address block
     */
    ip: string;
    /**
     * - (ReadOnly) Prefix length of address block in int
     */
    prefixLength: number;
}

export interface GetAddressGroupsEntityAssociatedPoliciesList {
    kind: string;
    /**
     * - (ReadOnly) Name of associated policy
     */
    name: string;
    /**
     * - (ReadOnly) UUID of associated policy
     */
    uuid: string;
}

export interface GetAddressGroupsMetadata {
    /**
     * (Optional) Filter in FIQL Syntax
     */
    filter: string;
    kind: string;
    /**
     * (Optional) Integer
     */
    length: number;
    /**
     * (Optional) Integer
     */
    offset: number;
    /**
     * (Optional) attribute to sort
     */
    sortAttribute: string;
    /**
     * (Optional) order of sorting
     */
    sortOrder: string;
}

export interface GetAssertHelperCheck {
    condition: boolean;
    errorMessage: string;
}

export interface GetClusterAuthorizedPublicKeyList {
    key: string;
    /**
     * Represents the name of cluster
     */
    name: string;
}

export interface GetClusterCaCertificateList {
    caName: string;
    certificate: string;
}

export interface GetClusterCategory {
    /**
     * - the key name.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetClusterHttpProxyList {
    address: {[key: string]: string};
    credentials: {[key: string]: string};
    proxyTypeLists: string[];
}

export interface GetClusterHttpProxyWhitelist {
    target: string;
    targetType: string;
}

export interface GetClusterManagementServerList {
    drsEnabled: boolean;
    ip: string;
    statusLists: string[];
    type: string;
}

export interface GetClusterNode {
    ip: string;
    type: string;
    version: string;
}

export interface GetClustersEntity {
    /**
     * - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)
     */
    analysisVmEfficiencyMap: {[key: string]: string};
    /**
     * The API version.
     */
    apiVersion: string;
    authorizedPublicKeyLists: outputs.GetClustersEntityAuthorizedPublicKeyList[];
    /**
     * - Cluster build details.
     */
    build: {[key: string]: string};
    /**
     * - Zone name used in value of TZ environment variable.
     */
    caCertificateLists: outputs.GetClustersEntityCaCertificateList[];
    /**
     * - Categories for the image.
     */
    categories: outputs.GetClustersEntityCategory[];
    /**
     * - Customer information used in Certificate Signing Request for creating digital certificates.
     */
    certificationSigningInfo: {[key: string]: string};
    /**
     * - Client authentication config.
     */
    clientAuth: {[key: string]: string};
    /**
     * - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)
     */
    clusterArch: string;
    /**
     * - Cluster domain credentials.
     */
    domainServerCredentials: {[key: string]: string};
    /**
     * - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.
     */
    domainServerName: string;
    /**
     * -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.
     */
    domainServerNameserver: string;
    /**
     * - Array of enabled features.
     */
    enabledFeatureLists: string[];
    /**
     * - Cluster encryption status.
     */
    encryptionStatus: string;
    /**
     * - The cluster IP address that provides external entities access to various cluster data services.
     */
    externalDataServicesIp: string;
    /**
     * - The local IP of cluster visible externally.
     */
    externalIp: string;
    /**
     * - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)
     */
    externalSubnet: string;
    /**
     * - GPU driver version.
     */
    gpuDriverVersion: string;
    /**
     * - List of proxies to connect to the service centers.
     */
    httpProxyLists: outputs.GetClustersEntityHttpProxyList[];
    /**
     * - HTTP proxy whitelist.
     */
    httpProxyWhitelists: outputs.GetClustersEntityHttpProxyWhitelist[];
    /**
     * - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
     */
    internalSubnet: string;
    /**
     * - Indicates if cluster is available to contact. (Readonly)
     */
    isAvailable: boolean;
    /**
     * - List of cluster management servers. (Readonly)
     */
    managementServerLists: outputs.GetClustersEntityManagementServerList[];
    /**
     * - The cluster NAT'd or proxy IP which maps to the cluster local IP.
     */
    masqueradingIp: string;
    /**
     * - Port used together with masqueradingIp to connect to the cluster.
     */
    masqueradingPort: number;
    /**
     * - The image kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * -  The name for the image.
     */
    name: string;
    /**
     * - The list of IP addresses of the name servers.
     */
    nameServerIpLists: string[];
    /**
     * - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
     */
    nfsSubnetWhitelists: string[];
    nodes: outputs.GetClustersEntityNode[];
    /**
     * - The list of IP addresses or FQDNs of the NTP servers.
     */
    ntpServerIpLists: string[];
    /**
     * - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.
     */
    operationMode: string;
    /**
     * - The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * - The reference to a project.
     */
    projectReference: {[key: string]: string};
    /**
     * - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.
     */
    serviceLists: string[];
    /**
     * - SMTP Server Address.
     */
    smtpServerAddress: {[key: string]: string};
    /**
     * - SMTP Server Credentials.
     */
    smtpServerCredentials: {[key: string]: string};
    /**
     * - SMTP Server Email Address.
     */
    smtpServerEmailAddress: string;
    /**
     * - SMTP Server Proxy Type List
     */
    smtpServerProxyTypeLists: string[];
    /**
     * - SMTP Server type.
     */
    smtpServerType: string;
    /**
     * - Map of software on the cluster with software type as the key.
     */
    softwareMapNcc: {[key: string]: any};
    /**
     * - Map of software on the cluster with software type as the key.
     */
    softwareMapNos: {[key: string]: any};
    /**
     * - UTC date and time in RFC-3339 format when the key expires
     */
    sslKeyExpireDatetime: string;
    sslKeyName: string;
    /**
     * - Customer information used in Certificate Signing Request for creating digital certificates.
     */
    sslKeySigningInfo: {[key: string]: string};
    /**
     * - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.
     */
    sslKeyType: string;
    /**
     * - The state of the cluster entity.
     */
    state: string;
    /**
     * - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)
     */
    supportedInformationVerbosity: string;
    /**
     * - Zone name used in value of TZ environment variable.
     */
    timezone: string;
}

export interface GetClustersEntityAuthorizedPublicKeyList {
    key: string;
    /**
     * -  The name for the image.
     */
    name: string;
}

export interface GetClustersEntityCaCertificateList {
    caName: string;
    certificate: string;
}

export interface GetClustersEntityCategory {
    /**
     * - the key name.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetClustersEntityHttpProxyList {
    address: {[key: string]: string};
    credentials: {[key: string]: string};
    proxyTypeLists: string[];
}

export interface GetClustersEntityHttpProxyWhitelist {
    target: string;
    targetType: string;
}

export interface GetClustersEntityManagementServerList {
    drsEnabled: boolean;
    ip: string;
    statusLists: string[];
    type: string;
}

export interface GetClustersEntityNode {
    ip: string;
    type: string;
    version: string;
}

export interface GetFloatingIpSpec {
    /**
     * Floating IP allocation status.
     */
    resources: outputs.GetFloatingIpSpecResource[];
}

export interface GetFloatingIpSpecResource {
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a vm_nic
     */
    vmNicReference: {[key: string]: string};
    /**
     * The reference to a vpc
     */
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpStatus {
    /**
     * Execution Context of Floating IP.
     */
    executionContexts: outputs.GetFloatingIpStatusExecutionContext[];
    /**
     * - the name.
     */
    name: string;
    /**
     * Floating IP allocation status.
     */
    resources: outputs.GetFloatingIpStatusResource[];
    /**
     * The state of the floating_ip.
     */
    state: string;
}

export interface GetFloatingIpStatusExecutionContext {
    taskUuids: string[];
}

export interface GetFloatingIpStatusResource {
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * Private IP with which the floating IP is associated.
     */
    floatingIp: string;
    /**
     * The reference to a vm_nic
     */
    vmNicReference: {[key: string]: string};
    /**
     * The reference to a vpc
     */
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpsEntity {
    /**
     * - The floatingIp kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * Floating IP spec
     */
    specs: outputs.GetFloatingIpsEntitySpec[];
    /**
     * Floating IP output status
     */
    statuses: outputs.GetFloatingIpsEntityStatus[];
}

export interface GetFloatingIpsEntitySpec {
    /**
     * Floating IP allocation status.
     */
    resources: outputs.GetFloatingIpsEntitySpecResource[];
}

export interface GetFloatingIpsEntitySpecResource {
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a vm_nic
     */
    vmNicReference: {[key: string]: string};
    /**
     * The reference to a vpc
     */
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpsEntityStatus {
    /**
     * Execution Context of Floating IP.
     */
    executionContexts: outputs.GetFloatingIpsEntityStatusExecutionContext[];
    /**
     * - the name.
     */
    name: string;
    /**
     * Floating IP allocation status.
     */
    resources: outputs.GetFloatingIpsEntityStatusResource[];
    /**
     * The state of the floating_ip.
     */
    state: string;
}

export interface GetFloatingIpsEntityStatusExecutionContext {
    taskUuids: string[];
}

export interface GetFloatingIpsEntityStatusResource {
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * Private IP with which the floating IP is associated.
     */
    floatingIp: string;
    /**
     * The reference to a vm_nic
     */
    vmNicReference: {[key: string]: string};
    /**
     * The reference to a vpc
     */
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpsMetadata {
    filter: string;
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
    totalMatches: number;
}

export interface GetFoundationCentralClusterDetailsClusterStatus {
    aggregatePercentComplete: number;
    clusterCreationStarted: boolean;
    clusterProgressDetails: outputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail[];
    currentFoundationIp: string;
    foundationSessionId: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    nodeProgressDetails: outputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail {
    clusterName: string;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail {
    imagedNodeUuid: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettings {
    cvmDnsServers: string[];
    cvmNtpServers: string[];
    hypervisorDnsServers: string[];
    hypervisorNtpServers: string[];
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfig {
    blocks: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlock[];
    clusters: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigCluster[];
    cvmGateway: string;
    cvmNetmask: string;
    dnsServers: string;
    hypervProductKey: string;
    hypervSku: string;
    hypervisorGateway: string;
    hypervisorIsoUrl: {[key: string]: string};
    hypervisorIsos: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso[];
    hypervisorNetmask: string;
    ipmiGateway: string;
    ipmiNetmask: string;
    nosPackageUrls: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl[];
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigBlock {
    blockId: string;
    nodes: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockNode[];
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigBlockNode {
    cvmIp: string;
    cvmVlanId: number;
    fcImagedNodeUuid: string;
    hardwareAttributesOverride: {[key: string]: string};
    hypervisor: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    imageNow: boolean;
    ipmiIp: string;
    ipv6Address: string;
    nodePosition: string;
    nodeSerial: string;
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigCluster {
    clusterExternalIp: string;
    clusterInitNow: boolean;
    clusterInitSuccessful: boolean;
    clusterMembers: string[];
    clusterName: string;
    cvmDnsServers: string;
    cvmNtpServers: string;
    redundancyFactor: number;
    timezone: string;
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso {
    hypervisorType: string;
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl {
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralImagedClustersListFilters {
    archived?: boolean;
}

export interface GetFoundationCentralImagedClustersListImagedCluster {
    archived: boolean;
    clusterExternalIp: string;
    clusterName: string;
    clusterSize: number;
    clusterStatus: outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatus;
    commonNetworkSettings: outputs.GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings;
    createdTimestamp: string;
    currentTime: string;
    destroyed: boolean;
    foundationInitConfigs: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfig[];
    foundationInitNodeUuid: string;
    imagedClusterUuid: string;
    imagedNodeUuidLists: string[];
    redundancyFactor?: number;
    storageNodeCount: number;
    workflowType: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterClusterStatus {
    aggregatePercentComplete: number;
    clusterCreationStarted: boolean;
    clusterProgressDetails: outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail[];
    currentFoundationIp: string;
    foundationSessionId: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    nodeProgressDetails: outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail {
    clusterName: string;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettings {
    cvmDnsServers: string[];
    cvmNtpServers: string[];
    hypervisorDnsServers: string[];
    hypervisorNtpServers: string[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfig {
    blocks: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock[];
    clusters: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster[];
    cvmGateway: string;
    cvmNetmask: string;
    dnsServers: string;
    hypervProductKey: string;
    hypervSku: string;
    hypervisorGateway: string;
    hypervisorIsoUrl: {[key: string]: string};
    hypervisorIsos: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso[];
    hypervisorNetmask: string;
    ipmiGateway: string;
    ipmiNetmask: string;
    nosPackageUrls: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock {
    blockId: string;
    nodes: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode {
    cvmIp: string;
    cvmVlanId: number;
    fcImagedNodeUuid: string;
    hardwareAttributesOverride: {[key: string]: string};
    hypervisor: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    imageNow: boolean;
    ipmiIp: string;
    ipv6Address: string;
    nodePosition: string;
    nodeSerial: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster {
    clusterExternalIp: string;
    clusterInitNow: boolean;
    clusterInitSuccessful: boolean;
    clusterMembers: string[];
    clusterName: string;
    cvmDnsServers: string;
    cvmNtpServers: string;
    redundancyFactor: number;
    timezone: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso {
    hypervisorType: string;
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl {
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralImagedClustersListMetadata {
    length: number;
    offset: number;
    totalMatches: number;
}

export interface GetFoundationCentralImagedNodesListFilters {
    nodeState?: string;
}

export interface GetFoundationCentralImagedNodesListImagedNode {
    aosVersion: string;
    apiKeyUuid: string;
    available: boolean;
    blockSerial: string;
    createdTimestamp: string;
    currentTime: string;
    cvmGateway: string;
    cvmIp: string;
    cvmIpv6: string;
    cvmNetmask: string;
    cvmUp: boolean;
    cvmUuid: string;
    cvmVlanId: number;
    foundationVersion: string;
    hardwareAttributes: {[key: string]: any};
    hypervisorGateway: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    hypervisorNetmask: string;
    hypervisorType: string;
    hypervisorVersion: string;
    imagedClusterUuid: string;
    imagedNodeUuid: string;
    ipmiGateway: string;
    ipmiIp: string;
    ipmiNetmask: string;
    ipv6Interface: string;
    latestHbTsLists: string[];
    model: string;
    nodePosition: string;
    nodeSerial: string;
    nodeState: string;
    nodeType: string;
    objectVersion: number;
    supportedFeatures: string[];
}

export interface GetFoundationCentralImagedNodesListMetadata {
    length: number;
    offset: number;
    totalMatches: number;
}

export interface GetFoundationCentralListApiKeysApiKey {
    alias: string;
    apiKey: string;
    createdTimestamp: string;
    currentTime: string;
    keyUuid: string;
}

export interface GetFoundationCentralListApiKeysMetadata {
    length: number;
    offset: number;
    totalMatches: number;
}

export interface GetFoundationDiscoverNodesEntity {
    /**
     * Chassis serial number.
     */
    blockId: string;
    /**
     * ID number of the block.
     */
    chassisN: number;
    /**
     * Model name of the node.
     */
    model: string;
    /**
     * Node level properties.
     */
    nodes: outputs.GetFoundationDiscoverNodesEntityNode[];
}

export interface GetFoundationDiscoverNodesEntityNode {
    /**
     * ID of the cluster the node is part of.
     */
    clusterId: string;
    /**
     * Whether the node is configured.
     */
    configured: boolean;
    /**
     * vlan tag of cvm.
     */
    currentCvmVlanTag: string;
    /**
     * Current network interface of the node.
     */
    currentNetworkInterface: string;
    /**
     * Version of foundation.
     */
    foundationVersion: string;
    /**
     * Type of hypervisor installed on the node.
     */
    hypervisor: string;
    /**
     * Version of hypervisor installed.
     */
    hypervisorVersion: string;
    /**
     * IPV6 address of the node.
     */
    ipv6Address: string;
    /**
     * Model name of the node.
     */
    model: string;
    /**
     * Position of the node in the block.
     */
    nodePosition: string;
    /**
     * Node serial of the node.
     */
    nodeSerial: string;
    /**
     * UUID of the node.
     */
    nodeUuid: string;
    /**
     * Version of NOS installed on the node.
     */
    nosVersion: string;
    /**
     * IP address of CVM.
     */
    svmIp: string;
}

export interface GetFoundationHypervisorIsosEsx {
    /**
     * Name of installer.
     */
    filename: string;
    /**
     * Whether front-end should treat hyp as supported.
     */
    supported: boolean;
}

export interface GetFoundationHypervisorIsosHyperv {
    /**
     * Name of installer.
     */
    filename: string;
    /**
     * Whether front-end should treat hyp as supported.
     */
    supported: boolean;
}

export interface GetFoundationHypervisorIsosKvm {
    /**
     * Name of installer.
     */
    filename: string;
    /**
     * Whether front-end should treat hyp as supported.
     */
    supported: boolean;
}

export interface GetFoundationHypervisorIsosLinux {
    /**
     * Name of installer.
     */
    filename: string;
    /**
     * Whether front-end should treat hyp as supported.
     */
    supported: boolean;
}

export interface GetFoundationHypervisorIsosXen {
    /**
     * Name of installer.
     */
    filename: string;
    /**
     * Whether front-end should treat hyp as supported.
     */
    supported: boolean;
}

export interface GetFoundationNodeNetworkDetailsNode {
    /**
     * Gateway of CVM.
     */
    cvmGateway: string;
    /**
     * CVM IP address.
     */
    cvmIp: string;
    /**
     * Netmask of CVM.
     */
    cvmNetmask: string;
    /**
     * CVM vlan tag.
     */
    cvmVlanId: string;
    /**
     * Only exists when failed to fetch node_info, with the reason of failure. all other fields will be empty.
     */
    error: string;
    /**
     * Gateway of the hypervisor.
     */
    hypervisorGateway: string;
    /**
     * Hypervisor hostname.
     */
    hypervisorHostname: string;
    /**
     * Hypervisor IP address.
     */
    hypervisorIp: string;
    /**
     * Netmask of the hypervisor.
     */
    hypervisorNetmask: string;
    /**
     * IPMI gateway.
     */
    ipmiGateway: string;
    /**
     * IPMI IP address.
     */
    ipmiIp: string;
    /**
     * IPMI netmask.
     */
    ipmiNetmask: string;
    /**
     * IPV6 address of the CVM.
     */
    ipv6Address: string;
    /**
     * Node serial.
     */
    nodeSerial: string;
}

export interface GetHostCategory {
    /**
     * - the key name.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetHostGpuList {
    assignable: boolean;
    consumerReference: {[key: string]: string};
    deviceId: number;
    fraction: number;
    frameBufferSizeMib: number;
    guestDriverVersion: string;
    index: number;
    licenseLists: string[];
    maxResolution: string;
    mode: string;
    /**
     * - the name.
     */
    name: string;
    numVgpusAllocated: number;
    numVirtualDisplayHeads: number;
    numaNode: number;
    pciAddress: string;
    status: string;
    /**
     * - the uuid.
     */
    uuid: string;
    vendor: string;
}

export interface GetHostHostDisksReferenceList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the uuid.
     */
    uuid: string;
}

export interface GetHostsEntity {
    /**
     * The API version.
     */
    apiVersion: string;
    /**
     * - Host block config info.
     */
    block: {[key: string]: string};
    /**
     * - Categories for the image.
     */
    categories: outputs.GetHostsEntityCategory[];
    /**
     * - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
     */
    clusterReference: {[key: string]: string};
    /**
     * - Host controller vm information.
     */
    controllerVm: {[key: string]: string};
    /**
     * - Host CPU capacity.
     */
    cpuCapacityHz: number;
    /**
     * - Host CPU model.
     */
    cpuModel: string;
    /**
     * - Hyper-V failover cluster.
     */
    failoverCluster: {[key: string]: string};
    /**
     * - Host GPU driver version.
     */
    gpuDriverVersion: string;
    /**
     * - List of GPUs on the host.
     */
    gpuLists: outputs.GetHostsEntityGpuList[];
    /**
     * - The reference to a disk.
     */
    hostDisksReferenceLists: outputs.GetHostsEntityHostDisksReferenceList[];
    /**
     * - Host NICs.
     */
    hostNicsIdLists: string[];
    /**
     * - Host type.
     */
    hostType: string;
    /**
     * - Host Hypervisor information.
     */
    hypervisor: {[key: string]: string};
    /**
     * - Host IPMI info.
     */
    ipmi: {[key: string]: string};
    /**
     * - Host memory capacity in MiB.
     */
    memoryCapacityMib: number;
    metadata: {[key: string]: string};
    /**
     * - Host monitoring status.
     */
    monitoringState: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - Number of CPU cores on Host.
     */
    numCpuCores: number;
    /**
     * - Number of CPU sockets.
     */
    numCpuSockets: number;
    /**
     * - The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * - The reference to a project.
     */
    projectReference: {[key: string]: string};
    /**
     * - The reference to a rackable_unit.
     */
    rackableUnitReference: {[key: string]: string};
    /**
     * - Node serial number.
     */
    serialNumber: string;
    /**
     * - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.
     */
    windowsDomain: {[key: string]: string};
}

export interface GetHostsEntityCategory {
    /**
     * - the name.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetHostsEntityGpuList {
    assignable: boolean;
    consumerReference: {[key: string]: string};
    deviceId: number;
    fraction: number;
    frameBufferSizeMib: number;
    guestDriverVersion: string;
    index: number;
    licenseLists: string[];
    maxResolution: string;
    mode: string;
    /**
     * - the name.
     */
    name: string;
    numVgpusAllocated: number;
    numVirtualDisplayHeads: number;
    numaNode: number;
    pciAddress: string;
    status: string;
    /**
     * - the uuid.
     */
    uuid: string;
    vendor: string;
}

export interface GetHostsEntityHostDisksReferenceList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the uuid.
     */
    uuid: string;
}

export interface GetImageCategory {
    /**
     * - the name.
     */
    name: string;
    value: string;
}

export interface GetImageClusterReference {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetImageCurrentClusterReferenceList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetKarbonClusterEtcdNodePool {
    /**
     * - VM configuration in AHV.
     */
    ahvConfigs: outputs.GetKarbonClusterEtcdNodePoolAhvConfig[];
    /**
     * - Unique name of the node pool.
     */
    name: string;
    /**
     * - The version of the node OS image.
     */
    nodeOsVersion: string;
    /**
     * - List of the deployed nodes in the node pool.
     */
    nodes: outputs.GetKarbonClusterEtcdNodePoolNode[];
    /**
     * - Number of nodes in the node pool.
     */
    numInstances: number;
}

export interface GetKarbonClusterEtcdNodePoolAhvConfig {
    /**
     * - The number of VCPUs allocated for each VM on the PE cluster.
     */
    cpu: number;
    /**
     * - Size of local storage for each VM on the PE cluster in MiB.
     */
    diskMib: number;
    /**
     * - Memory allocated for each VM on the PE cluster in MiB.
     */
    memoryMib: number;
    /**
     * - The UUID of the network for the VMs deployed with this resource configuration.
     */
    networkUuid: string;
    /**
     * - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    prismElementClusterUuid: string;
}

export interface GetKarbonClusterEtcdNodePoolNode {
    /**
     * - Hostname of the deployed node.
     */
    hostname: string;
    /**
     * - IP of the deployed node.
     */
    ipv4Address: string;
}

export interface GetKarbonClusterMasterNodePool {
    /**
     * - VM configuration in AHV.
     */
    ahvConfigs: outputs.GetKarbonClusterMasterNodePoolAhvConfig[];
    /**
     * - Unique name of the node pool.
     */
    name: string;
    /**
     * - The version of the node OS image.
     */
    nodeOsVersion: string;
    /**
     * - List of the deployed nodes in the node pool.
     */
    nodes: outputs.GetKarbonClusterMasterNodePoolNode[];
    /**
     * - Number of nodes in the node pool.
     */
    numInstances: number;
}

export interface GetKarbonClusterMasterNodePoolAhvConfig {
    /**
     * - The number of VCPUs allocated for each VM on the PE cluster.
     */
    cpu: number;
    /**
     * - Size of local storage for each VM on the PE cluster in MiB.
     */
    diskMib: number;
    /**
     * - Memory allocated for each VM on the PE cluster in MiB.
     */
    memoryMib: number;
    /**
     * - The UUID of the network for the VMs deployed with this resource configuration.
     */
    networkUuid: string;
    /**
     * - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    prismElementClusterUuid: string;
}

export interface GetKarbonClusterMasterNodePoolNode {
    /**
     * - Hostname of the deployed node.
     */
    hostname: string;
    /**
     * - IP of the deployed node.
     */
    ipv4Address: string;
}

export interface GetKarbonClusterWorkerNodePool {
    /**
     * - VM configuration in AHV.
     */
    ahvConfigs: outputs.GetKarbonClusterWorkerNodePoolAhvConfig[];
    /**
     * - Unique name of the node pool.
     */
    name: string;
    /**
     * - The version of the node OS image.
     */
    nodeOsVersion: string;
    /**
     * - List of the deployed nodes in the node pool.
     */
    nodes: outputs.GetKarbonClusterWorkerNodePoolNode[];
    /**
     * - Number of nodes in the node pool.
     */
    numInstances: number;
}

export interface GetKarbonClusterWorkerNodePoolAhvConfig {
    /**
     * - The number of VCPUs allocated for each VM on the PE cluster.
     */
    cpu: number;
    /**
     * - Size of local storage for each VM on the PE cluster in MiB.
     */
    diskMib: number;
    /**
     * - Memory allocated for each VM on the PE cluster in MiB.
     */
    memoryMib: number;
    /**
     * - The UUID of the network for the VMs deployed with this resource configuration.
     */
    networkUuid: string;
    /**
     * - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    prismElementClusterUuid: string;
}

export interface GetKarbonClusterWorkerNodePoolNode {
    /**
     * - Hostname of the deployed node.
     */
    hostname: string;
    /**
     * - IP of the deployed node.
     */
    ipv4Address: string;
}

export interface GetKarbonClustersCluster {
    deploymentType: string;
    /**
     * - Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
     */
    etcdNodePools: outputs.GetKarbonClustersClusterEtcdNodePool[];
    kubeapiServerIpv4Address: string;
    /**
     * - .
     */
    masterNodePools: outputs.GetKarbonClustersClusterMasterNodePool[];
    /**
     * - Unique name of the node pool.
     */
    name: string;
    status: string;
    uuid: string;
    /**
     * - K8s version of the cluster.
     */
    version: string;
    workerNodePools: outputs.GetKarbonClustersClusterWorkerNodePool[];
}

export interface GetKarbonClustersClusterEtcdNodePool {
    /**
     * - .
     */
    ahvConfigs: outputs.GetKarbonClustersClusterEtcdNodePoolAhvConfig[];
    /**
     * - Unique name of the node pool.
     */
    name: string;
    /**
     * - The version of the node OS image.
     */
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClustersClusterEtcdNodePoolNode[];
    /**
     * - Number of nodes in the node pool.
     */
    numInstances: number;
}

export interface GetKarbonClustersClusterEtcdNodePoolAhvConfig {
    /**
     * - The number of VCPUs allocated for each VM on the PE cluster.
     */
    cpu: number;
    /**
     * - Size of local storage for each VM on the PE cluster in MiB.
     */
    diskMib: number;
    /**
     * - Memory allocated for each VM on the PE cluster in MiB.
     */
    memoryMib: number;
    /**
     * - The UUID of the network for the VMs deployed with this resource configuration.
     */
    networkUuid: string;
    /**
     * - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    prismElementClusterUuid: string;
}

export interface GetKarbonClustersClusterEtcdNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonClustersClusterMasterNodePool {
    /**
     * - .
     */
    ahvConfigs: outputs.GetKarbonClustersClusterMasterNodePoolAhvConfig[];
    /**
     * - Unique name of the node pool.
     */
    name: string;
    /**
     * - The version of the node OS image.
     */
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClustersClusterMasterNodePoolNode[];
    /**
     * - Number of nodes in the node pool.
     */
    numInstances: number;
}

export interface GetKarbonClustersClusterMasterNodePoolAhvConfig {
    /**
     * - The number of VCPUs allocated for each VM on the PE cluster.
     */
    cpu: number;
    /**
     * - Size of local storage for each VM on the PE cluster in MiB.
     */
    diskMib: number;
    /**
     * - Memory allocated for each VM on the PE cluster in MiB.
     */
    memoryMib: number;
    /**
     * - The UUID of the network for the VMs deployed with this resource configuration.
     */
    networkUuid: string;
    /**
     * - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    prismElementClusterUuid: string;
}

export interface GetKarbonClustersClusterMasterNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonClustersClusterWorkerNodePool {
    /**
     * - .
     */
    ahvConfigs: outputs.GetKarbonClustersClusterWorkerNodePoolAhvConfig[];
    /**
     * - Unique name of the node pool.
     */
    name: string;
    /**
     * - The version of the node OS image.
     */
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClustersClusterWorkerNodePoolNode[];
    /**
     * - Number of nodes in the node pool.
     */
    numInstances: number;
}

export interface GetKarbonClustersClusterWorkerNodePoolAhvConfig {
    /**
     * - The number of VCPUs allocated for each VM on the PE cluster.
     */
    cpu: number;
    /**
     * - Size of local storage for each VM on the PE cluster in MiB.
     */
    diskMib: number;
    /**
     * - Memory allocated for each VM on the PE cluster in MiB.
     */
    memoryMib: number;
    /**
     * - The UUID of the network for the VMs deployed with this resource configuration.
     */
    networkUuid: string;
    /**
     * - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    prismElementClusterUuid: string;
}

export interface GetKarbonClustersClusterWorkerNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonPrivateRegistriesPrivateRegistry {
    /**
     * - Endpoint of the private in format `url:port`.
     */
    endpoint: string;
    /**
     * - Name of the private registry.
     */
    name: string;
    /**
     * - UUID of the private registry.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleTargetGroupFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowList {
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleTargetGroupFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleCategory {
    /**
     * - the name.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowList {
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - the UUID.
     */
    uuid: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam {
    /**
     * - the name.
     */
    name: string;
    values: string[];
}

export interface GetPbrSpec {
    /**
     * - the name.
     */
    name: string;
    /**
     * PBR resources status
     */
    resources: outputs.GetPbrSpecResource[];
}

export interface GetPbrSpecResource {
    /**
     * Routing policy action
     */
    actions: outputs.GetPbrSpecResourceAction[];
    /**
     * destination address of an IP.
     */
    destinations: outputs.GetPbrSpecResourceDestination[];
    /**
     * Policy in reverse direction.
     */
    isBidirectional: boolean;
    /**
     * priority of routing policy
     */
    priority: number;
    /**
     * Routing policy IP protocol parameters
     */
    protocolParameters: outputs.GetPbrSpecResourceProtocolParameter[];
    /**
     * Protocol type of routing policy
     */
    protocolType: string;
    /**
     * source address of an IP.
     */
    sources: outputs.GetPbrSpecResourceSource[];
    /**
     * Reference to VPC
     */
    vpcReference: {[key: string]: string};
}

export interface GetPbrSpecResourceAction {
    /**
     * Routing policy action
     */
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrSpecResourceDestination {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrSpecResourceProtocolParameter {
    /**
     * ICMP parameters in routing policy.
     */
    icmps: outputs.GetPbrSpecResourceProtocolParameterIcmp[];
    /**
     * Protocol number in routing policy
     */
    protocolNumber: number;
    /**
     * TCP parameters in routing policy
     */
    tcps: outputs.GetPbrSpecResourceProtocolParameterTcp[];
    /**
     * UDP parameters in routing policy
     */
    udps: outputs.GetPbrSpecResourceProtocolParameterUdp[];
}

export interface GetPbrSpecResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrSpecResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrSpecResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrSpecResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceSource {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrStatus {
    /**
     * Execution Context of PBR.
     */
    executionContexts: outputs.GetPbrStatusExecutionContext[];
    /**
     * - the name.
     */
    name: string;
    /**
     * PBR resources status
     */
    resources: outputs.GetPbrStatusResource[];
    /**
     * The state of the PBR
     */
    state: string;
}

export interface GetPbrStatusExecutionContext {
    taskUuids: string[];
}

export interface GetPbrStatusResource {
    /**
     * Routing policy action
     */
    actions: outputs.GetPbrStatusResourceAction[];
    /**
     * destination address of an IP.
     */
    destinations: outputs.GetPbrStatusResourceDestination[];
    /**
     * Policy in reverse direction.
     */
    isBidirectional: boolean;
    /**
     * priority of routing policy
     */
    priority: number;
    /**
     * Routing policy IP protocol parameters
     */
    protocolParameters: outputs.GetPbrStatusResourceProtocolParameter[];
    /**
     * Protocol type of routing policy
     */
    protocolType: string;
    routingPolicyCounters: outputs.GetPbrStatusResourceRoutingPolicyCounter[];
    /**
     * source address of an IP.
     */
    sources: outputs.GetPbrStatusResourceSource[];
    /**
     * Reference to VPC
     */
    vpcReference: {[key: string]: string};
}

export interface GetPbrStatusResourceAction {
    /**
     * Routing policy action
     */
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrStatusResourceDestination {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrStatusResourceProtocolParameter {
    /**
     * ICMP parameters in routing policy.
     */
    icmps: outputs.GetPbrStatusResourceProtocolParameterIcmp[];
    /**
     * Protocol number in routing policy
     */
    protocolNumber: number;
    /**
     * TCP parameters in routing policy
     */
    tcps: outputs.GetPbrStatusResourceProtocolParameterTcp[];
    /**
     * UDP parameters in routing policy
     */
    udps: outputs.GetPbrStatusResourceProtocolParameterUdp[];
}

export interface GetPbrStatusResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrStatusResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrStatusResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrStatusResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceRoutingPolicyCounter {
    byteCount: number;
    packetCount: number;
}

export interface GetPbrStatusResourceSource {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrsEntity {
    /**
     * - The routing policies kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * PBR spec
     */
    specs: outputs.GetPbrsEntitySpec[];
    /**
     * PBR output status
     */
    statuses: outputs.GetPbrsEntityStatus[];
}

export interface GetPbrsEntitySpec {
    /**
     * - the name.
     */
    name: string;
    /**
     * PBR resources status
     */
    resources: outputs.GetPbrsEntitySpecResource[];
}

export interface GetPbrsEntitySpecResource {
    /**
     * Routing policy action
     */
    actions: outputs.GetPbrsEntitySpecResourceAction[];
    /**
     * destination address of an IP.
     */
    destinations: outputs.GetPbrsEntitySpecResourceDestination[];
    /**
     * Policy in reverse direction.
     */
    isBidirectional: boolean;
    /**
     * priority of routing policy
     */
    priority: number;
    /**
     * Routing policy IP protocol parameters
     */
    protocolParameters: outputs.GetPbrsEntitySpecResourceProtocolParameter[];
    /**
     * Protocol type of routing policy
     */
    protocolType: string;
    /**
     * source address of an IP.
     */
    sources: outputs.GetPbrsEntitySpecResourceSource[];
    /**
     * Reference to VPC
     */
    vpcReference: {[key: string]: string};
}

export interface GetPbrsEntitySpecResourceAction {
    /**
     * Routing policy action
     */
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrsEntitySpecResourceDestination {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrsEntitySpecResourceProtocolParameter {
    /**
     * ICMP parameters in routing policy.
     */
    icmps: outputs.GetPbrsEntitySpecResourceProtocolParameterIcmp[];
    /**
     * Protocol number in routing policy
     */
    protocolNumber: number;
    /**
     * TCP parameters in routing policy
     */
    tcps: outputs.GetPbrsEntitySpecResourceProtocolParameterTcp[];
    /**
     * UDP parameters in routing policy
     */
    udps: outputs.GetPbrsEntitySpecResourceProtocolParameterUdp[];
}

export interface GetPbrsEntitySpecResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceSource {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrsEntityStatus {
    /**
     * Execution Context of PBR.
     */
    executionContexts: outputs.GetPbrsEntityStatusExecutionContext[];
    /**
     * - the name.
     */
    name: string;
    /**
     * PBR resources status
     */
    resources: outputs.GetPbrsEntityStatusResource[];
    /**
     * The state of the PBR
     */
    state: string;
}

export interface GetPbrsEntityStatusExecutionContext {
    taskUuids: string[];
}

export interface GetPbrsEntityStatusResource {
    /**
     * Routing policy action
     */
    actions: outputs.GetPbrsEntityStatusResourceAction[];
    /**
     * destination address of an IP.
     */
    destinations: outputs.GetPbrsEntityStatusResourceDestination[];
    /**
     * Policy in reverse direction.
     */
    isBidirectional: boolean;
    /**
     * priority of routing policy
     */
    priority: number;
    /**
     * Routing policy IP protocol parameters
     */
    protocolParameters: outputs.GetPbrsEntityStatusResourceProtocolParameter[];
    /**
     * Protocol type of routing policy
     */
    protocolType: string;
    routingPolicyCounters: outputs.GetPbrsEntityStatusResourceRoutingPolicyCounter[];
    /**
     * source address of an IP.
     */
    sources: outputs.GetPbrsEntityStatusResourceSource[];
    /**
     * Reference to VPC
     */
    vpcReference: {[key: string]: string};
}

export interface GetPbrsEntityStatusResourceAction {
    /**
     * Routing policy action
     */
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrsEntityStatusResourceDestination {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrsEntityStatusResourceProtocolParameter {
    /**
     * ICMP parameters in routing policy.
     */
    icmps: outputs.GetPbrsEntityStatusResourceProtocolParameterIcmp[];
    /**
     * Protocol number in routing policy
     */
    protocolNumber: number;
    /**
     * TCP parameters in routing policy
     */
    tcps: outputs.GetPbrsEntityStatusResourceProtocolParameterTcp[];
    /**
     * UDP parameters in routing policy
     */
    udps: outputs.GetPbrsEntityStatusResourceProtocolParameterUdp[];
}

export interface GetPbrsEntityStatusResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceRoutingPolicyCounter {
    byteCount: number;
    packetCount: number;
}

export interface GetPbrsEntityStatusResourceSource {
    addressType: string;
    /**
     * prefix length of provided subnet.
     */
    prefixLength?: number;
    /**
     * IP subnet provided as an address.
     */
    subnetIp?: string;
}

export interface GetPbrsMetadata {
    filter: string;
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
    totalMatches: number;
}

export interface GetPermissionCategory {
    /**
     * the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetPermissionField {
    /**
     * Allow or disallow the fields mentioned.
     */
    fieldMode: string;
    /**
     * The list of fields.
     */
    fieldNameLists: string[];
}

export interface GetPermissionsEntity {
    /**
     * version of the API
     */
    apiVersion: string;
    /**
     * The categories for this resource.
     */
    categories: outputs.GetPermissionsEntityCategory[];
    /**
     * A description for the permission.
     */
    description: string;
    /**
     * . The fields that can/cannot be accessed during the specified operation. fieldNameList will be a list of fields. e.g. if fieldMode = disallowed, fieldNameList = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.
     */
    fields: outputs.GetPermissionsEntityField[];
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The permission kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * the name.
     */
    name: string;
    /**
     * The operation that is being performed on a given kind.
     */
    operation: string;
    /**
     * The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * The reference to a project.
     */
    projectReference: {[key: string]: string};
    /**
     * The state of the permission.
     */
    state: string;
}

export interface GetPermissionsEntityCategory {
    /**
     * the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetPermissionsEntityField {
    /**
     * Allow or disallow the fields mentioned.
     */
    fieldMode: string;
    /**
     * The list of fields.
     */
    fieldNameLists: string[];
}

export interface GetPermissionsMetadata {
    filter: string;
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetProjectAccountReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectCategory {
    /**
     * the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetProjectEnvironmentReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectExternalNetworkList {
    /**
     * the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectResourceDomain {
    /**
     * Array of the utilization/limit for resource types
     * * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
     * * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
     * * `resource_domain.resources.#.units` - The units of the resource type
     * * `resource_domain.resources.#.value` - The amount of resource consumed
     */
    resources: outputs.GetProjectResourceDomainResource[];
}

export interface GetProjectResourceDomainResource {
    limit: number;
    resourceType: string;
    units: string;
    /**
     * value of the key.
     */
    value: number;
}

export interface GetProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectsEntity {
    /**
     * List of accounts associated with the project.
     * * `account_reference_list.#.kind` - The kind name. Default value is `account`
     * * `account_reference_list.#.uuid` - The UUID of an account.
     * * `account_reference_list.#.name` - The name of an account.
     */
    accountReferenceLists: outputs.GetProjectsEntityAccountReferenceList[];
    /**
     * version of the API
     */
    apiVersion: string;
    categories: outputs.GetProjectsEntityCategory[];
    /**
     * Reference to a subnet.
     */
    defaultSubnetReference: {[key: string]: string};
    /**
     * A description for project.
     */
    description: string;
    /**
     * List of environments associated with the project.
     * * `environment_reference_list.#.kind` - The kind name. Default value is `environment`
     * * `environment_reference_list.#.uuid` - The UUID of an environment.
     * * `environment_reference_list.#.name` - The name of an environment.
     */
    environmentReferenceLists: outputs.GetProjectsEntityEnvironmentReferenceList[];
    /**
     * List of external networks associated with the project.
     * * `external_network_list.#.uuid` - The UUID of a network.
     * * `external_network_list.#.name` - The name of a network.
     */
    externalNetworkLists: outputs.GetProjectsEntityExternalNetworkList[];
    /**
     * List of directory service user groups. These groups are not managed by Nutanix.
     * * `external_user_group_reference_list.#.kind` - The kind name. Default value is `userGroup`
     * * `external_user_group_reference_list.#.uuid` - The UUID of a userGroup
     * * `external_user_group_reference_list.#.name` - The name of a user_group
     */
    externalUserGroupReferenceLists: outputs.GetProjectsEntityExternalUserGroupReferenceList[];
    isDefault: boolean;
    metadata: {[key: string]: string};
    /**
     * (Optional) the name.
     */
    name: string;
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    /**
     * The status for a resource domain (limits and values)
     */
    resourceDomains: outputs.GetProjectsEntityResourceDomain[];
    state: string;
    /**
     * List of subnets for the project.
     * * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
     * * `subnet_reference_list.#.uuid` - The UUID of a subnet
     * * `subnet_reference_list.#.name` - The name of a subnet.
     */
    subnetReferenceLists: outputs.GetProjectsEntitySubnetReferenceList[];
    /**
     * List of users in the project.
     * * `user_reference_list.#.kind` - The kind name. Default value is `user`
     * * `user_reference_list.#.uuid` - The UUID of a user
     * * `user_reference_list.#.name` - The name of a user.
     */
    userReferenceLists: outputs.GetProjectsEntityUserReferenceList[];
}

export interface GetProjectsEntityAccountReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectsEntityCategory {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetProjectsEntityEnvironmentReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectsEntityExternalNetworkList {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectsEntityExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectsEntityResourceDomain {
    /**
     * Array of the utilization/limit for resource types
     * * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
     * * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
     * * `resource_domain.resources.#.units` - The units of the resource type
     * * `resource_domain.resources.#.value` - The amount of resource consumed
     */
    resources: outputs.GetProjectsEntityResourceDomainResource[];
}

export interface GetProjectsEntityResourceDomainResource {
    limit: number;
    resourceType: string;
    units: string;
    /**
     * value of the key.
     */
    value: number;
}

export interface GetProjectsEntitySubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProjectsEntityUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityList {
    /**
     * (Optional/Computed) Index of the availability zone.
     */
    destinationAvailabilityZoneIndex: number;
    /**
     * (Optional/Computed) Snapshot schedules for the pair of the availability zones.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
     */
    snapshotScheduleLists: outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList[];
    /**
     * (Optional/Computed) Index of the availability zone.
     */
    sourceAvailabilityZoneIndex: number;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs: number;
    localSnapshotRetentionPolicies: outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy[];
    recoveryPointObjectiveSecs: number;
    remoteSnapshotRetentionPolicies: outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy[];
    snapshotType: string;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRuleCategory {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetProtectionRuleCategoryFilter {
    /**
     * (Optional/Computed) List of kinds associated with this filter.
     */
    kindLists: string[];
    /**
     * (Optional/Computed) A list of category key and list of values.
     */
    params: outputs.GetProtectionRuleCategoryFilterParam[];
    /**
     * (Optional/Computed) The type of the filter being used.
     */
    type: string;
}

export interface GetProtectionRuleCategoryFilterParam {
    /**
     * (Optional) the name.
     */
    name: string;
    values: string[];
}

export interface GetProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl: string;
    clusterUuid: string;
}

export interface GetProtectionRuleOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProtectionRuleProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProtectionRulesEntity {
    /**
     * version of the API
     */
    apiVersion: string;
    /**
     * (Required) This encodes the datapipes between various availability zones and\nthe backup policy of the pipes.
     */
    availabilityZoneConnectivityLists: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityList[];
    categories: outputs.GetProtectionRulesEntityCategory[];
    /**
     * (Optional/Computed)
     */
    categoryFilters: outputs.GetProtectionRulesEntityCategoryFilter[];
    /**
     * A description for protection rule.
     */
    description: string;
    metadata: {[key: string]: string};
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) A list of availability zones, each of which, receives a replica\nof the data for the entities protected by this protection rule.
     * * `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.
     * * `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.
     */
    orderedAvailabilityZoneLists: outputs.GetProtectionRulesEntityOrderedAvailabilityZoneList[];
    ownerReferences: outputs.GetProtectionRulesEntityOwnerReference[];
    projectReferences: outputs.GetProtectionRulesEntityProjectReference[];
    startTime: string;
    state: string;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityList {
    /**
     * (Optional/Computed) Index of the availability zone.
     */
    destinationAvailabilityZoneIndex: number;
    /**
     * (Optional/Computed) Snapshot schedules for the pair of the availability zones.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
     * * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
     */
    snapshotScheduleLists: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList[];
    /**
     * (Optional/Computed) Index of the availability zone.
     */
    sourceAvailabilityZoneIndex: number;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs: number;
    localSnapshotRetentionPolicies: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy[];
    recoveryPointObjectiveSecs: number;
    remoteSnapshotRetentionPolicies: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy[];
    snapshotType: string;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRulesEntityCategory {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetProtectionRulesEntityCategoryFilter {
    /**
     * (Optional/Computed) List of kinds associated with this filter.
     */
    kindLists: string[];
    /**
     * (Optional/Computed) A list of category key and list of values.
     */
    params: outputs.GetProtectionRulesEntityCategoryFilterParam[];
    /**
     * (Optional/Computed) The type of the filter being used.
     */
    type: string;
}

export interface GetProtectionRulesEntityCategoryFilterParam {
    /**
     * (Optional) the name.
     */
    name: string;
    values: string[];
}

export interface GetProtectionRulesEntityOrderedAvailabilityZoneList {
    availabilityZoneUrl: string;
    clusterUuid: string;
}

export interface GetProtectionRulesEntityOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetProtectionRulesEntityProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanCategory {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetRecoveryPlanOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameter {
    /**
     * (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
     * * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
     */
    floatingIpAssignmentLists: outputs.GetRecoveryPlanParameterFloatingIpAssignmentList[];
    /**
     * (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
     */
    networkMappingLists: outputs.GetRecoveryPlanParameterNetworkMappingList[];
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentList {
    availabilityZoneUrl: string;
    vmIpAssignmentLists: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList[];
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfigs: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig[];
    testFloatingIpConfigs: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig[];
    vmNicInformations: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation[];
    vmReferences: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference[];
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingList {
    areNetworksStretched: boolean;
    availabilityZoneNetworkMappingLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl: string;
    clusterReferenceLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList[];
    recoveryIpAssignmentLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList[];
    recoveryNetworks: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork[];
    testIpAssignmentLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList[];
    testNetworks: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList[];
    vmReference: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    /**
     * (Optional) the name.
     */
    name: string;
    subnetLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList[];
    vmReference: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    /**
     * (Optional) the name.
     */
    name: string;
    subnetLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlanStageList {
    /**
     * (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
     */
    delayTimeSecs: number;
    /**
     * (Optional/Computed) UUID of stage.
     */
    stageUuid: string;
    /**
     * (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
     */
    stageWorks: outputs.GetRecoveryPlanStageListStageWork[];
}

export interface GetRecoveryPlanStageListStageWork {
    /**
     * (Optional/Computed) Information about entities to be recovered.
     */
    recoverEntities: outputs.GetRecoveryPlanStageListStageWorkRecoverEntity[];
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntity {
    /**
     * (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or anyEntityReference has to be provided.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
     */
    entityInfoLists: outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList[];
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList {
    anyEntityReferenceKind: string;
    anyEntityReferenceName: string;
    anyEntityReferenceUuid: string;
    categories: outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory[];
    scriptLists: outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList[];
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList {
    enableScriptExec: boolean;
    timeout: string;
}

export interface GetRecoveryPlansEntity {
    /**
     * version of the API
     */
    apiVersion: string;
    categories: outputs.GetRecoveryPlansEntityCategory[];
    /**
     * A description for recovery plan.
     */
    description: string;
    metadata: {[key: string]: string};
    /**
     * (Optional) the name.
     */
    name: string;
    ownerReferences: outputs.GetRecoveryPlansEntityOwnerReference[];
    /**
     * (Required) Parameters for the Recovery Plan.
     */
    parameters: outputs.GetRecoveryPlansEntityParameter[];
    projectReferences: outputs.GetRecoveryPlansEntityProjectReference[];
    /**
     * (Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.
     */
    stageLists: outputs.GetRecoveryPlansEntityStageList[];
    state: string;
}

export interface GetRecoveryPlansEntityCategory {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetRecoveryPlansEntityOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameter {
    /**
     * (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
     * * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
     * * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
     */
    floatingIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentList[];
    /**
     * (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
     * * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
     */
    networkMappingLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingList[];
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentList {
    availabilityZoneUrl: string;
    vmIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList[];
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfigs: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig[];
    testFloatingIpConfigs: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig[];
    vmNicInformations: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation[];
    vmReferences: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference[];
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingList {
    areNetworksStretched: boolean;
    availabilityZoneNetworkMappingLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl: string;
    clusterReferenceLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList[];
    recoveryIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList[];
    recoveryNetworks: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork[];
    testIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList[];
    testNetworks: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList[];
    vmReference: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    /**
     * (Optional) the name.
     */
    name: string;
    subnetLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList[];
    vmReference: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    /**
     * (Optional) the name.
     */
    name: string;
    subnetLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface GetRecoveryPlansEntityStageList {
    /**
     * (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
     */
    delayTimeSecs: number;
    /**
     * (Optional/Computed) UUID of stage.
     */
    stageUuid: string;
    /**
     * (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
     */
    stageWorks: outputs.GetRecoveryPlansEntityStageListStageWork[];
}

export interface GetRecoveryPlansEntityStageListStageWork {
    /**
     * (Optional/Computed) Information about entities to be recovered.
     */
    recoverEntities: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntity[];
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntity {
    /**
     * (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or anyEntityReference has to be provided.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
     * * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
     */
    entityInfoLists: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList[];
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList {
    anyEntityReferenceKind: string;
    anyEntityReferenceName: string;
    anyEntityReferenceUuid: string;
    categories: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory[];
    scriptLists: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList[];
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory {
    /**
     * (Optional) the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList {
    enableScriptExec: boolean;
    timeout: string;
}

export interface GetRoleCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetRolePermissionReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetRolesEntity {
    /**
     * The version of the API.
     */
    apiVersion: string;
    /**
     * - Categories for the role.
     */
    categories: outputs.GetRolesEntityCategory[];
    /**
     * - The description of the role.
     */
    description: string;
    /**
     * - The role kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * - (Required) List of permission references.
     */
    permissionReferenceLists: outputs.GetRolesEntityPermissionReferenceList[];
    /**
     * - The reference to a project.
     */
    projectReference: {[key: string]: string};
    roleId: string;
    /**
     * - The state of the role.
     */
    state: string;
}

export interface GetRolesEntityCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetRolesEntityPermissionReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetRolesMetadata {
    filter: string;
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetServiceGroupServiceList {
    icmpTypeCodeLists: outputs.GetServiceGroupServiceListIcmpTypeCodeList[];
    protocol: string;
    tcpPortRangeLists: outputs.GetServiceGroupServiceListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetServiceGroupServiceListUdpPortRangeList[];
}

export interface GetServiceGroupServiceListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetServiceGroupServiceListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupServiceListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupsEntity {
    associatedPoliciesLists: outputs.GetServiceGroupsEntityAssociatedPoliciesList[];
    serviceGroups: outputs.GetServiceGroupsEntityServiceGroup[];
    uuid: string;
}

export interface GetServiceGroupsEntityAssociatedPoliciesList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetServiceGroupsEntityServiceGroup {
    description: string;
    /**
     * specifying whether it is a system defined service group
     */
    isSystemDefined: boolean;
    name: string;
    serviceLists: outputs.GetServiceGroupsEntityServiceGroupServiceList[];
}

export interface GetServiceGroupsEntityServiceGroupServiceList {
    icmpTypeCodeLists: outputs.GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList[];
    protocol: string;
    tcpPortRangeLists: outputs.GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeList[];
}

export interface GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetStaticRoutesSpec {
    /**
     * - the name.
     */
    name: string;
    /**
     * VPC route table resources status
     */
    resources: outputs.GetStaticRoutesSpecResource[];
}

export interface GetStaticRoutesSpecResource {
    /**
     * default routes (present in spec resource)
     */
    defaultRouteNexthops: outputs.GetStaticRoutesSpecResourceDefaultRouteNexthop[];
    /**
     * list of static routes
     */
    staticRoutesLists: outputs.GetStaticRoutesSpecResourceStaticRoutesList[];
}

export interface GetStaticRoutesSpecResourceDefaultRouteNexthop {
    /**
     * The reference to a direct_connect_virtual_interface
     */
    directConnectVirtualInterfaceReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    localSubnetReference: {[key: string]: string};
    /**
     * The reference to a vpn_connection
     */
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesSpecResourceStaticRoutesList {
    /**
     * destination ip address with prefix.
     */
    destination: string;
    /**
     * Targeted link to use as the nexthop in a route.
     */
    nexthops: outputs.GetStaticRoutesSpecResourceStaticRoutesListNexthop[];
}

export interface GetStaticRoutesSpecResourceStaticRoutesListNexthop {
    /**
     * The reference to a direct_connect_virtual_interface
     */
    directConnectVirtualInterfaceReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    localSubnetReference: {[key: string]: string};
    /**
     * The reference to a vpn_connection
     */
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatus {
    /**
     * Execution Context of VPC.
     */
    executionContexts: outputs.GetStaticRoutesStatusExecutionContext[];
    /**
     * VPC route table resources status
     */
    resources: outputs.GetStaticRoutesStatusResource[];
    /**
     * The state of the vpc_route_table.
     */
    state: string;
}

export interface GetStaticRoutesStatusExecutionContext {
    taskUuids: string[];
}

export interface GetStaticRoutesStatusResource {
    /**
     * default route. (present in status resource only )
     */
    defaultRoutes: outputs.GetStaticRoutesStatusResourceDefaultRoute[];
    /**
     * list of dynamic routes (present in status resource only)
     */
    dynamicRoutesLists: outputs.GetStaticRoutesStatusResourceDynamicRoutesList[];
    /**
     * list of local routes (present in status resource only )
     */
    localRoutesLists: outputs.GetStaticRoutesStatusResourceLocalRoutesList[];
    /**
     * list of static routes
     */
    staticRoutesLists: outputs.GetStaticRoutesStatusResourceStaticRoutesList[];
}

export interface GetStaticRoutesStatusResourceDefaultRoute {
    /**
     * destination ip address with prefix.
     */
    destination: string;
    /**
     * Whether this route is currently active. Present in Status Resources.
     */
    isActive: boolean;
    /**
     * Targeted link to use as the nexthop in a route.
     */
    nexthops: outputs.GetStaticRoutesStatusResourceDefaultRouteNexthop[];
    /**
     * The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
     */
    priority: number;
}

export interface GetStaticRoutesStatusResourceDefaultRouteNexthop {
    /**
     * The reference to a direct_connect_virtual_interface
     */
    directConnectVirtualInterfaceReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    /**
     * The reference to a vpn_connection
     */
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatusResourceDynamicRoutesList {
    /**
     * destination ip address with prefix.
     */
    destination: string;
    /**
     * Whether this route is currently active. Present in Status Resources.
     */
    isActive: boolean;
    /**
     * Targeted link to use as the nexthop in a route.
     */
    nexthops: outputs.GetStaticRoutesStatusResourceDynamicRoutesListNexthop[];
    /**
     * The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
     */
    priority: number;
}

export interface GetStaticRoutesStatusResourceDynamicRoutesListNexthop {
    /**
     * The reference to a direct_connect_virtual_interface
     */
    directConnectVirtualInterfaceReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    /**
     * The reference to a vpn_connection
     */
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatusResourceLocalRoutesList {
    /**
     * destination ip address with prefix.
     */
    destination: string;
    /**
     * Whether this route is currently active. Present in Status Resources.
     */
    isActive: boolean;
    /**
     * Targeted link to use as the nexthop in a route.
     */
    nexthops: outputs.GetStaticRoutesStatusResourceLocalRoutesListNexthop[];
    /**
     * The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
     */
    priority: number;
}

export interface GetStaticRoutesStatusResourceLocalRoutesListNexthop {
    /**
     * The reference to a direct_connect_virtual_interface
     */
    directConnectVirtualInterfaceReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    /**
     * The reference to a vpn_connection
     */
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatusResourceStaticRoutesList {
    /**
     * destination ip address with prefix.
     */
    destination: string;
    /**
     * Whether this route is currently active. Present in Status Resources.
     */
    isActive: boolean;
    /**
     * Targeted link to use as the nexthop in a route.
     */
    nexthops: outputs.GetStaticRoutesStatusResourceStaticRoutesListNexthop[];
    /**
     * The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
     */
    priority: number;
}

export interface GetStaticRoutesStatusResourceStaticRoutesListNexthop {
    /**
     * The reference to a direct_connect_virtual_interface
     */
    directConnectVirtualInterfaceReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    externalSubnetReference: {[key: string]: string};
    /**
     * The reference to a subnet
     */
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    /**
     * The reference to a vpn_connection
     */
    vpnConnectionReference: {[key: string]: string};
}

export interface GetSubnetAdditionalFilter {
    /**
     * - the name(Optional).
     */
    name: string;
    values: string[];
}

export interface GetSubnetCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetSubnetMessageList {
    details: {[key: string]: any};
    message: string;
    reason: string;
}

export interface GetSubnetsEntity {
    /**
     * version of the API
     */
    apiVersion: string;
    /**
     * The reference to a availability_zone.
     */
    availabilityZoneReference: {[key: string]: string};
    /**
     * The API Version.
     */
    categories: outputs.GetSubnetsEntityCategory[];
    /**
     * The name of a cluster.
     */
    clusterName: string;
    /**
     * The reference to a cluster.
     */
    clusterReference: {[key: string]: string};
    clusterUuid: string;
    /**
     * Default gateway IP address.
     */
    defaultGatewayIp: string;
    /**
     * A description for subnet.
     */
    description: string;
    dhcpDomainNameServerLists: string[];
    /**
     * DHCP domain search list for a subnet.
     */
    dhcpDomainSearchLists: string[];
    /**
     * Spec for defining DHCP options.
     */
    dhcpOptions: {[key: string]: string};
    /**
     * Host address.
     */
    dhcpServerAddress: {[key: string]: string};
    /**
     * Port Number.
     */
    dhcpServerAddressPort: number;
    enableNat: boolean;
    ipConfigPoolListRanges: string[];
    isExternal: boolean;
    messageLists: outputs.GetSubnetsEntityMessageList[];
    /**
     * The subnet kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * the name.
     */
    name: string;
    /**
     * The reference to a network_function_chain.
     */
    networkFunctionChainReference: {[key: string]: string};
    /**
     * The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * -. IP prefix length of the Subnet.
     */
    prefixLength: number;
    /**
     * The reference to a project.
     */
    projectReference: {[key: string]: string};
    /**
     * The state of the subnet.
     */
    state: string;
    subnetId: string;
    /**
     * Subnet IP address.
     */
    subnetIp: string;
    subnetName: string;
    /**
     * The type of the subnet.
     */
    subnetType: string;
    /**
     * VLAN assigned to the subnet.
     */
    vlanId: number;
    vpcReference: {[key: string]: string};
    /**
     * The name of the vswitch.
     */
    vswitchName: string;
}

export interface GetSubnetsEntityCategory {
    /**
     * the name.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface GetSubnetsEntityMessageList {
    details: {[key: string]: any};
    message: string;
    reason: string;
}

export interface GetSubnetsMetadata {
    filter: string;
    /**
     * The kind name (Default value: project.
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetUserAccessControlPolicyReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - (Optional) The name for the user
     */
    name: string;
    /**
     * - (Optional) The UUID for the user.
     */
    uuid: string;
}

export interface GetUserCategory {
    /**
     * - (Optional) The name for the user
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetUserDirectoryServiceUser {
    defaultUserPrincipalName: string;
    /**
     * - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
     */
    directoryServiceReferences: outputs.GetUserDirectoryServiceUserDirectoryServiceReference[];
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    userPrincipalName: string;
}

export interface GetUserDirectoryServiceUserDirectoryServiceReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - (Optional) The name for the user
     */
    name: string;
    /**
     * - (Optional) The UUID for the user.
     */
    uuid: string;
}

export interface GetUserGroupAccessControlPolicyReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetUserGroupCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetUserGroupDirectoryServiceUserGroup {
    defaultUserPrincipalName: string;
    /**
     * - The reference to a directory service. See #reference for to look the supported attributes.
     */
    directoryServiceReferences: outputs.GetUserGroupDirectoryServiceUserGroupDirectoryServiceReference[];
    /**
     * - The Distinguished name for the user group
     */
    distinguishedName: string;
}

export interface GetUserGroupDirectoryServiceUserGroupDirectoryServiceReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetUserGroupProjectReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetUserGroupsEntity {
    /**
     * - List of ACP references. See #reference for more details.
     */
    accessControlPolicyReferenceLists: outputs.GetUserGroupsEntityAccessControlPolicyReferenceList[];
    /**
     * The version of the API.
     */
    apiVersion: string;
    /**
     * - The Categories for the user group.
     */
    categories: outputs.GetUserGroupsEntityCategory[];
    /**
     * - A Directory Service User Group.
     */
    directoryServiceUserGroups: outputs.GetUserGroupsEntityDirectoryServiceUserGroup[];
    /**
     * - The display name of the user group.
     */
    displayName: string;
    /**
     * - The user group kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * - The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * - The reference to a project.
     */
    projectReference?: {[key: string]: string};
    /**
     * - A list of projects the user is part of. See #reference for more details.
     */
    projectReferenceLists: outputs.GetUserGroupsEntityProjectReferenceList[];
    /**
     * - The state of the entity.
     */
    state: string;
    /**
     * - The type of the user group.
     */
    userGroupType: string;
}

export interface GetUserGroupsEntityAccessControlPolicyReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupsEntityCategory {
    /**
     * - the key name.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetUserGroupsEntityDirectoryServiceUserGroup {
    defaultUserPrincipalName: string;
    /**
     * - The reference to a directory service. See #reference for to look the supported attributes.
     */
    directoryServiceReferences: outputs.GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference[];
    /**
     * - The Distinguished name for the user group
     */
    distinguishedName: string;
}

export interface GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     *
     * For `accessControlPolicyReferenceList` and `projectReferenceList` are the same as reference but used as list.
     *
     * See detailed information in [Nutanix Users](https://www.nutanix.dev/reference/prism_central/v3/api/user-groups/).
     */
    uuid: string;
}

export interface GetUserGroupsEntityProjectReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetUserIdentityProviderUser {
    /**
     * - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
     */
    identityProviderReferences: outputs.GetUserIdentityProviderUserIdentityProviderReference[];
    /**
     * - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
     */
    username: string;
}

export interface GetUserIdentityProviderUserIdentityProviderReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - (Optional) The name for the user
     */
    name: string;
    /**
     * - (Optional) The UUID for the user.
     */
    uuid: string;
}

export interface GetUserProjectReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - (Optional) The name for the user
     */
    name: string;
    /**
     * - (Optional) The UUID for the user.
     */
    uuid: string;
}

export interface GetUsersEntity {
    /**
     * - List of ACP references. See #reference for more details.
     */
    accessControlPolicyReferenceLists: outputs.GetUsersEntityAccessControlPolicyReferenceList[];
    /**
     * The version of the API.
     */
    apiVersion: string;
    /**
     * - (Optional) Categories for the user.
     */
    categories: outputs.GetUsersEntityCategory[];
    /**
     * - (Optional) The directory service user configuration. See below for more information.
     */
    directoryServiceUsers: outputs.GetUsersEntityDirectoryServiceUser[];
    /**
     * - The display name of the user (common name) provided by the directory service.
     */
    displayName: string;
    /**
     * - (Optional) (Optional) The identity provider user configuration. See below for more information.
     */
    identityProviderUsers: outputs.GetUsersEntityIdentityProviderUser[];
    /**
     * - The user kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference: {[key: string]: string};
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: {[key: string]: string};
    /**
     * - A list of projects the user is part of. See #reference for more details.
     */
    projectReferenceLists: outputs.GetUsersEntityProjectReferenceList[];
    /**
     * - The state of the entity.
     */
    state: string;
    /**
     * - The name of the user.
     */
    userType: string;
}

export interface GetUsersEntityAccessControlPolicyReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetUsersEntityCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetUsersEntityDirectoryServiceUser {
    defaultUserPrincipalName: string;
    /**
     * - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
     */
    directoryServiceReferences: outputs.GetUsersEntityDirectoryServiceUserDirectoryServiceReference[];
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    userPrincipalName: string;
}

export interface GetUsersEntityDirectoryServiceUserDirectoryServiceReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetUsersEntityIdentityProviderUser {
    /**
     * - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
     */
    identityProviderReferences: outputs.GetUsersEntityIdentityProviderUserIdentityProviderReference[];
    /**
     * - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
     */
    username: string;
}

export interface GetUsersEntityIdentityProviderUserIdentityProviderReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetUsersEntityProjectReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface GetUsersMetadata {
    filter: string;
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetVirtualMachineCategory {
    /**
     * - the name.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface GetVirtualMachineDiskList {
    /**
     * Reference to a data source.
     */
    dataSourceReference: {[key: string]: string};
    /**
     * Properties to a device.
     */
    deviceProperties: outputs.GetVirtualMachineDiskListDeviceProperty[];
    /**
     * Size of the disk in Bytes.
     */
    diskSizeBytes: number;
    /**
     * Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
     */
    diskSizeMib: number;
    storageConfigs: outputs.GetVirtualMachineDiskListStorageConfig[];
    /**
     * - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
     */
    uuid: string;
    /**
     * Reference to a volume group.
     */
    volumeGroupReference: {[key: string]: string};
}

export interface GetVirtualMachineDiskListDeviceProperty {
    /**
     * - A Disk type (default: DISK).
     */
    deviceType: string;
    /**
     * - Address of disk to boot from.
     */
    diskAddress: {[key: string]: string};
}

export interface GetVirtualMachineDiskListStorageConfig {
    /**
     * - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
     */
    flashMode: string;
    /**
     * - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
     * * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
     * * `storage_container_reference.#.kind`: - kind of the container reference
     * * `storage_container_reference.#.name`: - name of the container reference
     * * `storage_container_reference.#.uuid`: - uiid of the container reference
     */
    storageContainerReferences: outputs.GetVirtualMachineDiskListStorageConfigStorageContainerReference[];
}

export interface GetVirtualMachineDiskListStorageConfigStorageContainerReference {
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    /**
     * - the name.
     */
    name: string;
    url: string;
    /**
     * - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
     */
    uuid: string;
}

export interface GetVirtualMachineGpuList {
    /**
     * - (Computed) The device ID of the GPU.
     */
    deviceId: number;
    /**
     * Fraction of the physical GPU assigned.
     */
    fraction: number;
    /**
     * - GPU frame buffer size in MiB.
     */
    frameBufferSizeMib: number;
    /**
     * - Last determined guest driver version.
     */
    guestDriverVersion: string;
    /**
     * - The mode of this GPU.
     */
    mode: string;
    /**
     * - the name.
     */
    name: string;
    /**
     * - Number of supported virtual display heads.
     */
    numVirtualDisplayHeads: number;
    /**
     * GPU {segment:bus:device:function} (sbdf) address if assigned.
     */
    pciAddress: string;
    /**
     * - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
     */
    uuid: string;
    /**
     * - The vendor of the GPU.
     * * `UUID`: - UUID of the GPU.
     */
    vendor: string;
}

export interface GetVirtualMachineMessageList {
    details: {[key: string]: any};
    message: string;
    reason: string;
}

export interface GetVirtualMachineNicList {
    /**
     * -  The Floating IP associated with the vnic.
     */
    floatingIp: string;
    /**
     * - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
     */
    ipEndpointLists: outputs.GetVirtualMachineNicListIpEndpointList[];
    /**
     * - Indicates whether the serial port connection is connected or not (`true` or `false`).
     */
    isConnected: string;
    /**
     * - The MAC address for the adapter.
     */
    macAddress: string;
    /**
     * - The model of this NIC. (Options : VIRTIO , E1000).
     */
    model: string;
    /**
     * - The reference to a network_function_chain.
     */
    networkFunctionChainReference: {[key: string]: string};
    /**
     * - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
     */
    networkFunctionNicType: string;
    /**
     * - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
     */
    nicType: string;
    /**
     * - The number of tx/rx queue pairs for this NIC.
     */
    numQueues: number;
    /**
     * - The name of the subnet reference to.
     */
    subnetName: string;
    /**
     * - The reference to a subnet.
     */
    subnetUuid: string;
    /**
     * - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
     */
    uuid: string;
}

export interface GetVirtualMachineNicListIpEndpointList {
    /**
     * - Address string.
     */
    ip: string;
    /**
     * - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
     */
    type: string;
}

export interface GetVirtualMachineSerialPortList {
    /**
     * - Index of the serial port (int).
     */
    index: number;
    /**
     * - Indicates whether the serial port connection is connected or not (`true` or `false`).
     */
    isConnected: boolean;
}

export interface GetVpcSpec {
    /**
     * - the name.
     */
    name: string;
    /**
     * VPC resources status
     */
    resources: outputs.GetVpcSpecResource[];
}

export interface GetVpcSpecResource {
    /**
     * List of domain name server IPs.
     */
    commonDomainNameServerIpLists: outputs.GetVpcSpecResourceCommonDomainNameServerIpList[];
    /**
     * List of external subnets attached to this VPC.
     */
    externalSubnetLists: outputs.GetVpcSpecResourceExternalSubnetList[];
    /**
     * List of external routable ip and prefix .
     */
    externallyRoutablePrefixLists: outputs.GetVpcSpecResourceExternallyRoutablePrefixList[];
}

export interface GetVpcSpecResourceCommonDomainNameServerIpList {
    /**
     * ip address of domain name server.
     */
    ip: string;
}

export interface GetVpcSpecResourceExternalSubnetList {
    /**
     * Reference to a subnet.
     */
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcSpecResourceExternallyRoutablePrefixList {
    /**
     * ip address of domain name server.
     */
    ip: string;
    /**
     * prefix length of routable ip .
     */
    prefixLength: number;
}

export interface GetVpcStatus {
    /**
     * Execution Context of VPC.
     */
    executionContexts: outputs.GetVpcStatusExecutionContext[];
    /**
     * - the name.
     */
    name: string;
    /**
     * VPC resources status
     */
    resources: outputs.GetVpcStatusResource[];
    /**
     * The state of the VPC
     */
    state: string;
}

export interface GetVpcStatusExecutionContext {
    taskUuids: string[];
}

export interface GetVpcStatusResource {
    /**
     * List of domain name server IPs.
     */
    commonDomainNameServerIpLists: outputs.GetVpcStatusResourceCommonDomainNameServerIpList[];
    /**
     * List of external subnets attached to this VPC.
     */
    externalSubnetLists: outputs.GetVpcStatusResourceExternalSubnetList[];
    /**
     * List of external routable ip and prefix .
     */
    externallyRoutablePrefixLists: outputs.GetVpcStatusResourceExternallyRoutablePrefixList[];
}

export interface GetVpcStatusResourceCommonDomainNameServerIpList {
    /**
     * ip address of domain name server.
     */
    ip: string;
}

export interface GetVpcStatusResourceExternalSubnetList {
    /**
     * Active Gateway Node. Only present in VPC Status Resources.
     */
    activeGatewayNodes: outputs.GetVpcStatusResourceExternalSubnetListActiveGatewayNode[];
    /**
     * List of external subnets attached to this VPC. Only present in VPC Status Resources .
     */
    externalIpLists: string[];
    /**
     * Reference to a subnet.
     */
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcStatusResourceExternalSubnetListActiveGatewayNode {
    /**
     * Reference to host.
     */
    hostReference: {[key: string]: string};
    /**
     * ip address.
     */
    ipAddress: string;
}

export interface GetVpcStatusResourceExternallyRoutablePrefixList {
    /**
     * ip address of domain name server.
     */
    ip: string;
    /**
     * prefix length of routable ip .
     */
    prefixLength: number;
}

export interface GetVpcsEntity {
    /**
     * - The vpc kind metadata.
     */
    metadata: {[key: string]: string};
    /**
     * VPC input spec
     */
    specs: outputs.GetVpcsEntitySpec[];
    /**
     * VPC output status
     */
    statuses: outputs.GetVpcsEntityStatus[];
}

export interface GetVpcsEntitySpec {
    /**
     * - the name.
     */
    name: string;
    /**
     * VPC resources status
     */
    resources: outputs.GetVpcsEntitySpecResource[];
}

export interface GetVpcsEntitySpecResource {
    /**
     * List of domain name server IPs.
     */
    commonDomainNameServerIpLists: outputs.GetVpcsEntitySpecResourceCommonDomainNameServerIpList[];
    /**
     * List of external subnets attached to this VPC.
     */
    externalSubnetLists: outputs.GetVpcsEntitySpecResourceExternalSubnetList[];
    /**
     * List of external routable ip and prefix .
     */
    externallyRoutablePrefixLists: outputs.GetVpcsEntitySpecResourceExternallyRoutablePrefixList[];
}

export interface GetVpcsEntitySpecResourceCommonDomainNameServerIpList {
    /**
     * ip address of domain name server.
     */
    ip: string;
}

export interface GetVpcsEntitySpecResourceExternalSubnetList {
    /**
     * Reference to a subnet.
     */
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcsEntitySpecResourceExternallyRoutablePrefixList {
    /**
     * ip address of domain name server.
     */
    ip: string;
    /**
     * prefix length of routable ip .
     */
    prefixLength: number;
}

export interface GetVpcsEntityStatus {
    /**
     * Execution Context of VPC.
     */
    executionContexts: outputs.GetVpcsEntityStatusExecutionContext[];
    /**
     * - the name.
     */
    name: string;
    /**
     * VPC resources status
     */
    resources: outputs.GetVpcsEntityStatusResource[];
    /**
     * The state of the VPC
     */
    state: string;
}

export interface GetVpcsEntityStatusExecutionContext {
    taskUuids: string[];
}

export interface GetVpcsEntityStatusResource {
    /**
     * List of domain name server IPs.
     */
    commonDomainNameServerIpLists: outputs.GetVpcsEntityStatusResourceCommonDomainNameServerIpList[];
    /**
     * List of external subnets attached to this VPC.
     */
    externalSubnetLists: outputs.GetVpcsEntityStatusResourceExternalSubnetList[];
    /**
     * List of external routable ip and prefix .
     */
    externallyRoutablePrefixLists: outputs.GetVpcsEntityStatusResourceExternallyRoutablePrefixList[];
}

export interface GetVpcsEntityStatusResourceCommonDomainNameServerIpList {
    /**
     * ip address of domain name server.
     */
    ip: string;
}

export interface GetVpcsEntityStatusResourceExternalSubnetList {
    /**
     * Active Gateway Node. Only present in VPC Status Resources.
     */
    activeGatewayNodes: outputs.GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode[];
    /**
     * List of external subnets attached to this VPC. Only present in VPC Status Resources .
     */
    externalIpLists: string[];
    /**
     * Reference to a subnet.
     */
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode {
    /**
     * Reference to host.
     */
    hostReference: {[key: string]: string};
    /**
     * ip address.
     */
    ipAddress: string;
}

export interface GetVpcsEntityStatusResourceExternallyRoutablePrefixList {
    /**
     * ip address of domain name server.
     */
    ip: string;
    /**
     * prefix length of routable ip .
     */
    prefixLength: number;
}

export interface GetVpcsMetadata {
    filter: string;
    /**
     * - The kind name (Default value: project).
     */
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
    totalMatches: number;
}

export interface ImageCategory {
    /**
     * - (Required) The name for the image.
     */
    name: string;
    value: string;
}

export interface ImageClusterReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the image.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface ImageCurrentClusterReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the image.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface KarbonClusterActivePassiveConfig {
    externalIpv4Address: string;
}

export interface KarbonClusterCniConfig {
    /**
     * - (Optional) Configuration of the calico CNI provider.
     * * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
     * * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
     *
     * **Note:** Updates to this attribute forces new resource creation.
     *
     * See detailed information in [Nutanix Karbon Cluster](https://www.nutanix.dev/reference/karbon/api-reference/cluster/).
     */
    calicoConfig?: outputs.KarbonClusterCniConfigCalicoConfig;
    /**
     * - (Optional) Configuration of the flannel container network interface (CNI) provider.
     */
    flannelConfigs?: outputs.KarbonClusterCniConfigFlannelConfig[];
    /**
     * - (Optional) The size of the subnet from the podIpv4Cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
     */
    nodeCidrMaskSize?: number;
    /**
     * - (Optional) CIDR for pods in the cluster.
     */
    podIpv4Cidr?: string;
    /**
     * - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
     */
    serviceIpv4Cidr?: string;
}

export interface KarbonClusterCniConfigCalicoConfig {
    ipPoolConfigs?: outputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig[];
}

export interface KarbonClusterCniConfigCalicoConfigIpPoolConfig {
    cidr?: string;
}

export interface KarbonClusterCniConfigFlannelConfig {
}

export interface KarbonClusterEtcdNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: outputs.KarbonClusterEtcdNodePoolAhvConfig;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: string;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: string;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes: outputs.KarbonClusterEtcdNodePoolNode[];
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: number;
}

export interface KarbonClusterEtcdNodePoolAhvConfig {
    cpu?: number;
    diskMib?: number;
    memoryMib?: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface KarbonClusterEtcdNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface KarbonClusterExternalLbConfig {
    externalIpv4Address: string;
    masterNodesConfigs: outputs.KarbonClusterExternalLbConfigMasterNodesConfig[];
}

export interface KarbonClusterExternalLbConfigMasterNodesConfig {
    ipv4Address: string;
    nodePoolName?: string;
}

export interface KarbonClusterMasterNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: outputs.KarbonClusterMasterNodePoolAhvConfig;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: string;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: string;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes: outputs.KarbonClusterMasterNodePoolNode[];
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: number;
}

export interface KarbonClusterMasterNodePoolAhvConfig {
    cpu?: number;
    diskMib?: number;
    memoryMib?: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface KarbonClusterMasterNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface KarbonClusterPrivateRegistry {
    registryName: string;
}

export interface KarbonClusterSingleMasterConfig {
}

export interface KarbonClusterStorageClassConfig {
    /**
     * - (Required) The name of the storage class.
     */
    name?: string;
    /**
     * Reclaim policy for persistent volumes provisioned using the specified storage class.
     * * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
     * * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
     * * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
     * * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
     * * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
     * * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.
     *
     * **Note:** Updates to this attribute forces new resource creation.
     */
    reclaimPolicy?: string;
    volumesConfig: outputs.KarbonClusterStorageClassConfigVolumesConfig;
}

export interface KarbonClusterStorageClassConfigVolumesConfig {
    fileSystem?: string;
    flashMode?: boolean;
    password: string;
    prismElementClusterUuid: string;
    storageContainer: string;
    username: string;
}

export interface KarbonClusterWorkerNodePool {
    /**
     * - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
     * * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
     * * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
     * * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
     * * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
     * * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
     */
    ahvConfig?: outputs.KarbonClusterWorkerNodePoolAhvConfig;
    /**
     * - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
     */
    name?: string;
    /**
     * - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
     */
    nodeOsVersion: string;
    /**
     * - List of the deployed nodes in the node pool.
     * * `nodes.hostname`: - Hostname of the deployed node.
     * * `nodes.ipv4_address`: - IP of the deployed node.
     */
    nodes: outputs.KarbonClusterWorkerNodePoolNode[];
    /**
     * - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
     */
    numInstances: number;
}

export interface KarbonClusterWorkerNodePoolAhvConfig {
    cpu?: number;
    diskMib?: number;
    memoryMib?: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface KarbonClusterWorkerNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists: outputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists: outputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleTargetGroupFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists: outputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowList {
    addressGroupInclusionLists: outputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind: string;
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleTargetGroupFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleCategory {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    value: string;
}

export interface NetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    /**
     * - (Required) The name for the network_security_rule.
     */
    name: string;
    values: string[];
}

export interface PbrDestination {
    addressType?: string;
    prefixLength?: number;
    subnetIp?: string;
}

export interface PbrProtocolParameters {
    icmp?: outputs.PbrProtocolParametersIcmp;
    protocolNumber?: string;
    tcp?: outputs.PbrProtocolParametersTcp;
    udp?: outputs.PbrProtocolParametersUdp;
}

export interface PbrProtocolParametersIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface PbrProtocolParametersTcp {
    destinationPortRangeLists: outputs.PbrProtocolParametersTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.PbrProtocolParametersTcpSourcePortRangeList[];
}

export interface PbrProtocolParametersTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrProtocolParametersTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrProtocolParametersUdp {
    destinationPortRangeLists: outputs.PbrProtocolParametersUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.PbrProtocolParametersUdpSourcePortRangeList[];
}

export interface PbrProtocolParametersUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrProtocolParametersUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrSource {
    addressType?: string;
    prefixLength?: number;
    subnetIp?: string;
}

export interface ProjectAccountReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the project.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface ProjectCategory {
    /**
     * The name for the project.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface ProjectDefaultSubnetReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the project.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface ProjectEnvironmentReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the project.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface ProjectExternalNetworkList {
    /**
     * The name for the project.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface ProjectExternalUserGroupReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the project.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface ProjectResourceDomain {
    resources: outputs.ProjectResourceDomainResource[];
}

export interface ProjectResourceDomainResource {
    limit: number;
    resourceType: string;
    units: string;
    /**
     * value of the key.
     */
    value: number;
}

export interface ProjectSubnetReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the project.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface ProjectUserReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the project.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface ProtectionRuleAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex: number;
    snapshotScheduleLists: outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList[];
    sourceAvailabilityZoneIndex: number;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs: number;
    localSnapshotRetentionPolicy: outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy;
    recoveryPointObjectiveSecs: number;
    remoteSnapshotRetentionPolicy: outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy;
    snapshotType: string;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface ProtectionRuleCategory {
    /**
     * The name for the protection rule.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface ProtectionRuleCategoryFilter {
    kindLists: string[];
    params: outputs.ProtectionRuleCategoryFilterParam[];
    type: string;
}

export interface ProtectionRuleCategoryFilterParam {
    /**
     * The name for the protection rule.
     */
    name: string;
    values: string[];
}

export interface ProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl: string;
    clusterUuid: string;
}

export interface ProtectionRuleOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the protection rule.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface ProtectionRuleProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the protection rule.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface RecoveryPlanCategory {
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * value of the key.
     */
    value: string;
}

export interface RecoveryPlanOwnerReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the Recovery Plan.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface RecoveryPlanParameters {
    floatingIpAssignmentLists: outputs.RecoveryPlanParametersFloatingIpAssignmentList[];
    networkMappingLists: outputs.RecoveryPlanParametersNetworkMappingList[];
}

export interface RecoveryPlanParametersFloatingIpAssignmentList {
    availabilityZoneUrl: string;
    vmIpAssignmentLists: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList[];
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfig: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig;
    testFloatingIpConfig: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig;
    vmNicInformation: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation;
    vmReference: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingList {
    areNetworksStretched: boolean;
    availabilityZoneNetworkMappingLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList[];
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl: string;
    clusterReferenceLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList[];
    recoveryIpAssignmentLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList[];
    recoveryNetwork: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork;
    testIpAssignmentLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList[];
    testNetwork: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList[];
    vmReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    subnetLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference;
    vpcReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList[];
    vmReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    subnetLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference;
    vpcReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind: string;
    /**
     * The name for the Recovery Plan.
     */
    name: string;
    /**
     * (Required) the UUID.
     */
    uuid: string;
}

export interface RecoveryPlanProjectReference {
    /**
     * (Required) The kind name (Default value: `project`).
     */
    kind?: string;
    /**
     * The name for the Recovery Plan.
     */
    name?: string;
    /**
     * (Required) the UUID.
     */
    uuid?: string;
}

export interface RecoveryPlanStageList {
    delayTimeSecs: number;
    stageUuid: string;
    stageWork: outputs.RecoveryPlanStageListStageWork;
}

export interface RecoveryPlanStageListStageWork {
    recoverEntities: outputs.RecoveryPlanStageListStageWorkRecoverEntities;
}

export interface RecoveryPlanStageListStageWorkRecoverEntities {
    entityInfoLists: outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList[];
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList {
    anyEntityReferenceKind?: string;
    anyEntityReferenceName?: string;
    anyEntityReferenceUuid?: string;
    categories?: outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory[];
    scriptLists: outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList[];
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory {
    /**
     * The name for the Recovery Plan.
     */
    name?: string;
    /**
     * value of the key.
     */
    value?: string;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList {
    enableScriptExec: boolean;
    timeout: string;
}

export interface RoleCategory {
    /**
     * - (Optional) Name of the role.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface RoleOwnerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    /**
     * - (Optional) Name of the role.
     */
    name?: string;
    /**
     * - the UUID(Required).
     */
    uuid?: string;
}

export interface RolePermissionReferenceList {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    /**
     * - (Optional) Name of the role.
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface RoleProjectReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    /**
     * - (Optional) Name of the role.
     */
    name?: string;
    /**
     * - the UUID(Required).
     */
    uuid?: string;
}

export interface ServiceGroupServiceList {
    /**
     * - (Optional) ICMP type code list
     */
    icmpTypeCodeLists?: outputs.ServiceGroupServiceListIcmpTypeCodeList[];
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    protocol?: string;
    /**
     * - (Optional) TCP Port range list
     */
    tcpPortRangeLists?: outputs.ServiceGroupServiceListTcpPortRangeList[];
    /**
     * - (Optional) UDP port range list
     */
    udpPortRangeLists?: outputs.ServiceGroupServiceListUdpPortRangeList[];
}

export interface ServiceGroupServiceListIcmpTypeCodeList {
    code?: string;
    type?: string;
}

export interface ServiceGroupServiceListTcpPortRangeList {
    endPort?: number;
    startPort?: number;
}

export interface ServiceGroupServiceListUdpPortRangeList {
    endPort?: number;
    startPort?: number;
}

export interface StaticRoutesDefaultRouteNexthop {
    /**
     * Reference to a subnet.
     */
    externalSubnetReferenceUuid?: string;
}

export interface StaticRoutesStaticRoutesList {
    /**
     * Destination ip with prefix.
     */
    destination: string;
    /**
     * Reference to a subnet. Supported with 2022.x .
     */
    externalSubnetReferenceUuid?: string;
    /**
     * Reference to a vpn connection.
     */
    vpnConnectionReferenceUuid?: string;
}

export interface SubnetCategory {
    /**
     * - (Optional) Subnet name (Readonly).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface UserAccessControlPolicyReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface UserCategory {
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface UserDirectoryServiceUser {
    defaultUserPrincipalName: string;
    /**
     * - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
     */
    directoryServiceReference: outputs.UserDirectoryServiceUserDirectoryServiceReference;
    /**
     * - (Optional) The UserPrincipalName of the user from the directory service.
     */
    userPrincipalName: string;
}

export interface UserDirectoryServiceUserDirectoryServiceReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface UserIdentityProviderUser {
    /**
     * - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
     */
    identityProviderReference: outputs.UserIdentityProviderUserIdentityProviderReference;
    /**
     * - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
     */
    username: string;
}

export interface UserIdentityProviderUserIdentityProviderReference {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind?: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface UserProjectReferenceList {
    /**
     * - The kind name. (Default depends on the resource you are referencing)
     */
    kind: string;
    /**
     * - the name(Optional).
     */
    name: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface VirtualMachineCategory {
    /**
     * - (Required) The name for the vm.
     */
    name: string;
    /**
     * - value of the key.
     */
    value: string;
}

export interface VirtualMachineDiskList {
    /**
     * Reference to a data source.
     */
    dataSourceReference: {[key: string]: string};
    /**
     * Properties to a device.
     */
    deviceProperties: outputs.VirtualMachineDiskListDeviceProperties;
    /**
     * Size of the disk in Bytes.
     */
    diskSizeBytes: number;
    /**
     * Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
     */
    diskSizeMib: number;
    storageConfig: outputs.VirtualMachineDiskListStorageConfig;
    /**
     * - (Optional) The device ID which is used to uniquely identify this particular disk.
     */
    uuid: string;
    /**
     * Reference to a volume group.
     *
     * The diskSize (the disk sizeMib and the diskSizeBytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk sizeMib or diskSizeBytes when you set dataSourceReference but, you can update the diskSize after creation (second apply).
     */
    volumeGroupReference: {[key: string]: string};
}

export interface VirtualMachineDiskListDeviceProperties {
    /**
     * - A Disk type (default: DISK).
     */
    deviceType?: string;
    /**
     * - Address of disk to boot from.
     */
    diskAddress: {[key: string]: string};
}

export interface VirtualMachineDiskListStorageConfig {
    /**
     * - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
     */
    flashMode?: string;
    /**
     * - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
     * * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
     * * `storage_container_reference.#.kind`: - kind of the container reference
     * * `storage_container_reference.#.name`: - name of the container reference
     * * `storage_container_reference.#.uuid`: - uiid of the container reference
     */
    storageContainerReferences: outputs.VirtualMachineDiskListStorageConfigStorageContainerReference[];
}

export interface VirtualMachineDiskListStorageConfigStorageContainerReference {
    /**
     * - The kind name (Default value: project)(Required).
     */
    kind?: string;
    /**
     * - (Required) The name for the vm.
     */
    name: string;
    url: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface VirtualMachineGpuList {
    /**
     * - (Computed) The device ID of the GPU.
     */
    deviceId: number;
    /**
     * Fraction of the physical GPU assigned.
     */
    fraction: number;
    /**
     * - (ReadOnly) GPU frame buffer size in MiB.
     */
    frameBufferSizeMib: number;
    /**
     * - (ReadOnly) Last determined guest driver version.
     */
    guestDriverVersion: string;
    /**
     * - (Optional) The mode of this GPU.
     */
    mode: string;
    /**
     * - (ReadOnly) Name of the GPU resource.
     */
    name: string;
    /**
     * - (ReadOnly) Number of supported virtual display heads.
     */
    numVirtualDisplayHeads: number;
    /**
     * GPU {segment:bus:device:function} (sbdf) address if assigned.
     */
    pciAddress: string;
    /**
     * - (ReadOnly) UUID of the GPU.
     */
    uuid: string;
    /**
     * - (Optional) The vendor of the GPU.
     */
    vendor: string;
}

export interface VirtualMachineNicList {
    /**
     * - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
     */
    ipEndpointLists: outputs.VirtualMachineNicListIpEndpointList[];
    isConnected?: string;
    /**
     * - The MAC address for the adapter.
     */
    macAddress: string;
    /**
     * - The model of this NIC. (Options : VIRTIO , E1000).
     */
    model: string;
    /**
     * - The reference to a network_function_chain.
     */
    networkFunctionChainReference: {[key: string]: string};
    /**
     * - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
     */
    networkFunctionNicType: string;
    /**
     * - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
     */
    nicType: string;
    /**
     * - The number of tx/rx queue pairs for this NIC.
     */
    numQueues: number;
    /**
     * - The name of the subnet reference to.
     */
    subnetName: string;
    /**
     * - The reference to a subnet.
     */
    subnetUuid?: string;
    /**
     * - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
     */
    uuid: string;
}

export interface VirtualMachineNicListIpEndpointList {
    /**
     * - Address string.
     */
    ip: string;
    /**
     * - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
     */
    type: string;
}

export interface VirtualMachineNicListStatus {
    floatingIp: string;
    ipEndpointLists: outputs.VirtualMachineNicListStatusIpEndpointList[];
    isConnected: string;
    macAddress: string;
    model: string;
    networkFunctionChainReference: {[key: string]: string};
    networkFunctionNicType: string;
    nicType: string;
    numQueues: number;
    subnetName: string;
    subnetUuid: string;
    /**
     * - the UUID(Required).
     */
    uuid: string;
}

export interface VirtualMachineNicListStatusIpEndpointList {
    /**
     * - Address string.
     */
    ip: string;
    /**
     * - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
     */
    type: string;
}

export interface VirtualMachineSerialPortList {
    /**
     * - Index of the serial port (int).
     */
    index: number;
    /**
     * - Indicates whether the serial port connection is connected or not (`true` or `false`).
     */
    isConnected: boolean;
}

export interface VpcCommonDomainNameServerIpList {
    /**
     * ip address.
     */
    ip: string;
}

export interface VpcExternalSubnetListStatus {
    activeGatewayNode: outputs.VpcExternalSubnetListStatusActiveGatewayNode;
    externalIpLists: string[];
    externalSubnetReference: {[key: string]: string};
}

export interface VpcExternalSubnetListStatusActiveGatewayNode {
    hostReference: {[key: string]: string};
    ipAddress: string;
}

export interface VpcExternallyRoutablePrefixList {
    /**
     * ip address.
     */
    ip: string;
    /**
     * prefix length.
     */
    prefixLength: number;
}

