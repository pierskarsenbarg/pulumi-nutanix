// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SubnetV2 extends pulumi.CustomResource {
    /**
     * Get an existing SubnetV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetV2State, opts?: pulumi.CustomResourceOptions): SubnetV2 {
        return new SubnetV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/subnetV2:SubnetV2';

    /**
     * Returns true if the given object is an instance of SubnetV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubnetV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubnetV2.__pulumiType;
    }

    public readonly bridgeName!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly clusterReference!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dhcpOptions!: pulumi.Output<outputs.SubnetV2DhcpOption[]>;
    public readonly dynamicIpAddresses!: pulumi.Output<outputs.SubnetV2DynamicIpAddress[]>;
    public readonly extId!: pulumi.Output<string>;
    public readonly hypervisorType!: pulumi.Output<string>;
    public readonly ipConfigs!: pulumi.Output<outputs.SubnetV2IpConfig[]>;
    public readonly ipPrefix!: pulumi.Output<string>;
    public readonly ipUsages!: pulumi.Output<outputs.SubnetV2IpUsage[]>;
    public readonly isAdvancedNetworking!: pulumi.Output<boolean>;
    public readonly isExternal!: pulumi.Output<boolean>;
    public readonly isNatEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly links!: pulumi.Output<outputs.SubnetV2Link[]>;
    public /*out*/ readonly migrationState!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkFunctionChainReference!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<number | undefined>;
    public readonly reservedIpAddresses!: pulumi.Output<outputs.SubnetV2ReservedIpAddress[]>;
    public readonly subnetType!: pulumi.Output<string>;
    public readonly virtualSwitchReference!: pulumi.Output<string>;
    public readonly virtualSwitches!: pulumi.Output<outputs.SubnetV2VirtualSwitch[]>;
    public readonly vpcReference!: pulumi.Output<string>;
    public readonly vpcs!: pulumi.Output<outputs.SubnetV2Vpc[]>;

    /**
     * Create a SubnetV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetV2Args | SubnetV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetV2State | undefined;
            resourceInputs["bridgeName"] = state ? state.bridgeName : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterReference"] = state ? state.clusterReference : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpOptions"] = state ? state.dhcpOptions : undefined;
            resourceInputs["dynamicIpAddresses"] = state ? state.dynamicIpAddresses : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["hypervisorType"] = state ? state.hypervisorType : undefined;
            resourceInputs["ipConfigs"] = state ? state.ipConfigs : undefined;
            resourceInputs["ipPrefix"] = state ? state.ipPrefix : undefined;
            resourceInputs["ipUsages"] = state ? state.ipUsages : undefined;
            resourceInputs["isAdvancedNetworking"] = state ? state.isAdvancedNetworking : undefined;
            resourceInputs["isExternal"] = state ? state.isExternal : undefined;
            resourceInputs["isNatEnabled"] = state ? state.isNatEnabled : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["migrationState"] = state ? state.migrationState : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkFunctionChainReference"] = state ? state.networkFunctionChainReference : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["reservedIpAddresses"] = state ? state.reservedIpAddresses : undefined;
            resourceInputs["subnetType"] = state ? state.subnetType : undefined;
            resourceInputs["virtualSwitchReference"] = state ? state.virtualSwitchReference : undefined;
            resourceInputs["virtualSwitches"] = state ? state.virtualSwitches : undefined;
            resourceInputs["vpcReference"] = state ? state.vpcReference : undefined;
            resourceInputs["vpcs"] = state ? state.vpcs : undefined;
        } else {
            const args = argsOrState as SubnetV2Args | undefined;
            if ((!args || args.subnetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetType'");
            }
            resourceInputs["bridgeName"] = args ? args.bridgeName : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterReference"] = args ? args.clusterReference : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpOptions"] = args ? args.dhcpOptions : undefined;
            resourceInputs["dynamicIpAddresses"] = args ? args.dynamicIpAddresses : undefined;
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["hypervisorType"] = args ? args.hypervisorType : undefined;
            resourceInputs["ipConfigs"] = args ? args.ipConfigs : undefined;
            resourceInputs["ipPrefix"] = args ? args.ipPrefix : undefined;
            resourceInputs["ipUsages"] = args ? args.ipUsages : undefined;
            resourceInputs["isAdvancedNetworking"] = args ? args.isAdvancedNetworking : undefined;
            resourceInputs["isExternal"] = args ? args.isExternal : undefined;
            resourceInputs["isNatEnabled"] = args ? args.isNatEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkFunctionChainReference"] = args ? args.networkFunctionChainReference : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["reservedIpAddresses"] = args ? args.reservedIpAddresses : undefined;
            resourceInputs["subnetType"] = args ? args.subnetType : undefined;
            resourceInputs["virtualSwitchReference"] = args ? args.virtualSwitchReference : undefined;
            resourceInputs["virtualSwitches"] = args ? args.virtualSwitches : undefined;
            resourceInputs["vpcReference"] = args ? args.vpcReference : undefined;
            resourceInputs["vpcs"] = args ? args.vpcs : undefined;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["migrationState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubnetV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubnetV2 resources.
 */
export interface SubnetV2State {
    bridgeName?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterReference?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.SubnetV2DhcpOption>[]>;
    dynamicIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2DynamicIpAddress>[]>;
    extId?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    ipConfigs?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpConfig>[]>;
    ipPrefix?: pulumi.Input<string>;
    ipUsages?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpUsage>[]>;
    isAdvancedNetworking?: pulumi.Input<boolean>;
    isExternal?: pulumi.Input<boolean>;
    isNatEnabled?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.SubnetV2Link>[]>;
    migrationState?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<string>;
    networkId?: pulumi.Input<number>;
    reservedIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2ReservedIpAddress>[]>;
    subnetType?: pulumi.Input<string>;
    virtualSwitchReference?: pulumi.Input<string>;
    virtualSwitches?: pulumi.Input<pulumi.Input<inputs.SubnetV2VirtualSwitch>[]>;
    vpcReference?: pulumi.Input<string>;
    vpcs?: pulumi.Input<pulumi.Input<inputs.SubnetV2Vpc>[]>;
}

/**
 * The set of arguments for constructing a SubnetV2 resource.
 */
export interface SubnetV2Args {
    bridgeName?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterReference?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.SubnetV2DhcpOption>[]>;
    dynamicIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2DynamicIpAddress>[]>;
    extId?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    ipConfigs?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpConfig>[]>;
    ipPrefix?: pulumi.Input<string>;
    ipUsages?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpUsage>[]>;
    isAdvancedNetworking?: pulumi.Input<boolean>;
    isExternal?: pulumi.Input<boolean>;
    isNatEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<string>;
    networkId?: pulumi.Input<number>;
    reservedIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2ReservedIpAddress>[]>;
    subnetType: pulumi.Input<string>;
    virtualSwitchReference?: pulumi.Input<string>;
    virtualSwitches?: pulumi.Input<pulumi.Input<inputs.SubnetV2VirtualSwitch>[]>;
    vpcReference?: pulumi.Input<string>;
    vpcs?: pulumi.Input<pulumi.Input<inputs.SubnetV2Vpc>[]>;
}
