// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SubnetV2 extends pulumi.CustomResource {
    /**
     * Get an existing SubnetV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetV2State, opts?: pulumi.CustomResourceOptions): SubnetV2 {
        return new SubnetV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/subnetV2:SubnetV2';

    /**
     * Returns true if the given object is an instance of SubnetV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubnetV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubnetV2.__pulumiType;
    }

    declare public readonly bridgeName: pulumi.Output<string>;
    declare public readonly clusterName: pulumi.Output<string>;
    declare public readonly clusterReference: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly dhcpOptions: pulumi.Output<outputs.SubnetV2DhcpOption[]>;
    declare public readonly dynamicIpAddresses: pulumi.Output<outputs.SubnetV2DynamicIpAddress[]>;
    declare public readonly extId: pulumi.Output<string>;
    declare public readonly hypervisorType: pulumi.Output<string>;
    declare public readonly ipConfigs: pulumi.Output<outputs.SubnetV2IpConfig[]>;
    declare public readonly ipPrefix: pulumi.Output<string>;
    declare public readonly ipUsages: pulumi.Output<outputs.SubnetV2IpUsage[]>;
    declare public readonly isAdvancedNetworking: pulumi.Output<boolean>;
    declare public readonly isExternal: pulumi.Output<boolean>;
    declare public readonly isNatEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly links: pulumi.Output<outputs.SubnetV2Link[]>;
    declare public /*out*/ readonly migrationState: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkFunctionChainReference: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<number | undefined>;
    declare public readonly reservedIpAddresses: pulumi.Output<outputs.SubnetV2ReservedIpAddress[]>;
    declare public readonly subnetType: pulumi.Output<string>;
    declare public readonly virtualSwitchReference: pulumi.Output<string>;
    declare public readonly virtualSwitches: pulumi.Output<outputs.SubnetV2VirtualSwitch[]>;
    declare public readonly vpcReference: pulumi.Output<string>;
    declare public readonly vpcs: pulumi.Output<outputs.SubnetV2Vpc[]>;

    /**
     * Create a SubnetV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetV2Args | SubnetV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetV2State | undefined;
            resourceInputs["bridgeName"] = state?.bridgeName;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["clusterReference"] = state?.clusterReference;
            resourceInputs["description"] = state?.description;
            resourceInputs["dhcpOptions"] = state?.dhcpOptions;
            resourceInputs["dynamicIpAddresses"] = state?.dynamicIpAddresses;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["hypervisorType"] = state?.hypervisorType;
            resourceInputs["ipConfigs"] = state?.ipConfigs;
            resourceInputs["ipPrefix"] = state?.ipPrefix;
            resourceInputs["ipUsages"] = state?.ipUsages;
            resourceInputs["isAdvancedNetworking"] = state?.isAdvancedNetworking;
            resourceInputs["isExternal"] = state?.isExternal;
            resourceInputs["isNatEnabled"] = state?.isNatEnabled;
            resourceInputs["links"] = state?.links;
            resourceInputs["migrationState"] = state?.migrationState;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkFunctionChainReference"] = state?.networkFunctionChainReference;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["reservedIpAddresses"] = state?.reservedIpAddresses;
            resourceInputs["subnetType"] = state?.subnetType;
            resourceInputs["virtualSwitchReference"] = state?.virtualSwitchReference;
            resourceInputs["virtualSwitches"] = state?.virtualSwitches;
            resourceInputs["vpcReference"] = state?.vpcReference;
            resourceInputs["vpcs"] = state?.vpcs;
        } else {
            const args = argsOrState as SubnetV2Args | undefined;
            if (args?.subnetType === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetType'");
            }
            resourceInputs["bridgeName"] = args?.bridgeName;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["clusterReference"] = args?.clusterReference;
            resourceInputs["description"] = args?.description;
            resourceInputs["dhcpOptions"] = args?.dhcpOptions;
            resourceInputs["dynamicIpAddresses"] = args?.dynamicIpAddresses;
            resourceInputs["extId"] = args?.extId;
            resourceInputs["hypervisorType"] = args?.hypervisorType;
            resourceInputs["ipConfigs"] = args?.ipConfigs;
            resourceInputs["ipPrefix"] = args?.ipPrefix;
            resourceInputs["ipUsages"] = args?.ipUsages;
            resourceInputs["isAdvancedNetworking"] = args?.isAdvancedNetworking;
            resourceInputs["isExternal"] = args?.isExternal;
            resourceInputs["isNatEnabled"] = args?.isNatEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkFunctionChainReference"] = args?.networkFunctionChainReference;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["reservedIpAddresses"] = args?.reservedIpAddresses;
            resourceInputs["subnetType"] = args?.subnetType;
            resourceInputs["virtualSwitchReference"] = args?.virtualSwitchReference;
            resourceInputs["virtualSwitches"] = args?.virtualSwitches;
            resourceInputs["vpcReference"] = args?.vpcReference;
            resourceInputs["vpcs"] = args?.vpcs;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["migrationState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubnetV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubnetV2 resources.
 */
export interface SubnetV2State {
    bridgeName?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterReference?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.SubnetV2DhcpOption>[]>;
    dynamicIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2DynamicIpAddress>[]>;
    extId?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    ipConfigs?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpConfig>[]>;
    ipPrefix?: pulumi.Input<string>;
    ipUsages?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpUsage>[]>;
    isAdvancedNetworking?: pulumi.Input<boolean>;
    isExternal?: pulumi.Input<boolean>;
    isNatEnabled?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.SubnetV2Link>[]>;
    migrationState?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<string>;
    networkId?: pulumi.Input<number>;
    reservedIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2ReservedIpAddress>[]>;
    subnetType?: pulumi.Input<string>;
    virtualSwitchReference?: pulumi.Input<string>;
    virtualSwitches?: pulumi.Input<pulumi.Input<inputs.SubnetV2VirtualSwitch>[]>;
    vpcReference?: pulumi.Input<string>;
    vpcs?: pulumi.Input<pulumi.Input<inputs.SubnetV2Vpc>[]>;
}

/**
 * The set of arguments for constructing a SubnetV2 resource.
 */
export interface SubnetV2Args {
    bridgeName?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterReference?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.SubnetV2DhcpOption>[]>;
    dynamicIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2DynamicIpAddress>[]>;
    extId?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    ipConfigs?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpConfig>[]>;
    ipPrefix?: pulumi.Input<string>;
    ipUsages?: pulumi.Input<pulumi.Input<inputs.SubnetV2IpUsage>[]>;
    isAdvancedNetworking?: pulumi.Input<boolean>;
    isExternal?: pulumi.Input<boolean>;
    isNatEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<string>;
    networkId?: pulumi.Input<number>;
    reservedIpAddresses?: pulumi.Input<pulumi.Input<inputs.SubnetV2ReservedIpAddress>[]>;
    subnetType: pulumi.Input<string>;
    virtualSwitchReference?: pulumi.Input<string>;
    virtualSwitches?: pulumi.Input<pulumi.Input<inputs.SubnetV2VirtualSwitch>[]>;
    vpcReference?: pulumi.Input<string>;
    vpcs?: pulumi.Input<pulumi.Input<inputs.SubnetV2Vpc>[]>;
}
