// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to restore the database instance based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const name = new nutanix.NdbDatabaseRestore("name", {
 *     databaseId: "{{ database_id }}",
 *     snapshotId: "{{ snapshot id }}",
 * });
 * ```
 */
export class NdbDatabaseRestore extends pulumi.CustomResource {
    /**
     * Get an existing NdbDatabaseRestore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbDatabaseRestoreState, opts?: pulumi.CustomResourceOptions): NdbDatabaseRestore {
        return new NdbDatabaseRestore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbDatabaseRestore:NdbDatabaseRestore';

    /**
     * Returns true if the given object is an instance of NdbDatabaseRestore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbDatabaseRestore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbDatabaseRestore.__pulumiType;
    }

    /**
     * whether instance is cloned or not
     */
    public /*out*/ readonly clone!: pulumi.Output<boolean>;
    /**
     * database cluster type
     */
    public /*out*/ readonly databaseClusterType!: pulumi.Output<string>;
    /**
     * database id
     */
    public readonly databaseId!: pulumi.Output<string>;
    public /*out*/ readonly databaseInstanceId!: pulumi.Output<string>;
    /**
     * name of database
     */
    public /*out*/ readonly databaseName!: pulumi.Output<string>;
    /**
     * database nodes associated with database instance
     */
    public /*out*/ readonly databaseNodes!: pulumi.Output<outputs.NdbDatabaseRestoreDatabaseNode[]>;
    /**
     * date created for db instance
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * date modified for instance
     */
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    /**
     * dbserver logical cluster
     */
    public /*out*/ readonly dbserverLogicalCluster!: pulumi.Output<{[key: string]: string}>;
    /**
     * dbserver logical cluster id
     */
    public /*out*/ readonly dbserverLogicalClusterId!: pulumi.Output<string>;
    /**
     * description of database instance
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * info of instance
     */
    public /*out*/ readonly infos!: pulumi.Output<outputs.NdbDatabaseRestoreInfo[]>;
    /**
     * latest snapshot id
     */
    public readonly latestSnapshot!: pulumi.Output<string | undefined>;
    /**
     * LCM config of instance
     */
    public /*out*/ readonly lcmConfigs!: pulumi.Output<outputs.NdbDatabaseRestoreLcmConfig[]>;
    /**
     * linked databases within database instance
     */
    public /*out*/ readonly linkedDatabases!: pulumi.Output<outputs.NdbDatabaseRestoreLinkedDatabase[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    public /*out*/ readonly metric!: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of database instance
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * parent database id
     */
    public /*out*/ readonly parentDatabaseId!: pulumi.Output<string>;
    /**
     * properties of database created
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbDatabaseRestoreProperty[]>;
    /**
     * helps to restore the database with same config.
     */
    public readonly restoreVersion!: pulumi.Output<number | undefined>;
    /**
     * snapshot id from you want to use for restoring the instance
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * status of instance
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    public readonly tags!: pulumi.Output<outputs.NdbDatabaseRestoreTag[]>;
    /**
     * time machine id of instance
     */
    public /*out*/ readonly timeMachineId!: pulumi.Output<string>;
    /**
     * Time Machine details of instance
     */
    public /*out*/ readonly timeMachines!: pulumi.Output<outputs.NdbDatabaseRestoreTimeMachine[]>;
    /**
     * timezone on which instance is created xw
     */
    public /*out*/ readonly timeZone!: pulumi.Output<string>;
    /**
     * timezone . Should be used with  `userPitrTimestamp`
     */
    public readonly timeZonePitr!: pulumi.Output<string | undefined>;
    /**
     * type of database
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * the time to which you want to restore your instance.
     */
    public readonly userPitrTimestamp!: pulumi.Output<string | undefined>;

    /**
     * Create a NdbDatabaseRestore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbDatabaseRestoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbDatabaseRestoreArgs | NdbDatabaseRestoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbDatabaseRestoreState | undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["databaseClusterType"] = state ? state.databaseClusterType : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["databaseInstanceId"] = state ? state.databaseInstanceId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseNodes"] = state ? state.databaseNodes : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["dbserverLogicalCluster"] = state ? state.dbserverLogicalCluster : undefined;
            resourceInputs["dbserverLogicalClusterId"] = state ? state.dbserverLogicalClusterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["infos"] = state ? state.infos : undefined;
            resourceInputs["latestSnapshot"] = state ? state.latestSnapshot : undefined;
            resourceInputs["lcmConfigs"] = state ? state.lcmConfigs : undefined;
            resourceInputs["linkedDatabases"] = state ? state.linkedDatabases : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentDatabaseId"] = state ? state.parentDatabaseId : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["restoreVersion"] = state ? state.restoreVersion : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeMachineId"] = state ? state.timeMachineId : undefined;
            resourceInputs["timeMachines"] = state ? state.timeMachines : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeZonePitr"] = state ? state.timeZonePitr : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userPitrTimestamp"] = state ? state.userPitrTimestamp : undefined;
        } else {
            const args = argsOrState as NdbDatabaseRestoreArgs | undefined;
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["latestSnapshot"] = args ? args.latestSnapshot : undefined;
            resourceInputs["restoreVersion"] = args ? args.restoreVersion : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZonePitr"] = args ? args.timeZonePitr : undefined;
            resourceInputs["userPitrTimestamp"] = args ? args.userPitrTimestamp : undefined;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["databaseClusterType"] = undefined /*out*/;
            resourceInputs["databaseInstanceId"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseNodes"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverLogicalCluster"] = undefined /*out*/;
            resourceInputs["dbserverLogicalClusterId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["lcmConfigs"] = undefined /*out*/;
            resourceInputs["linkedDatabases"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeMachineId"] = undefined /*out*/;
            resourceInputs["timeMachines"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbDatabaseRestore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbDatabaseRestore resources.
 */
export interface NdbDatabaseRestoreState {
    /**
     * whether instance is cloned or not
     */
    clone?: pulumi.Input<boolean>;
    /**
     * database cluster type
     */
    databaseClusterType?: pulumi.Input<string>;
    /**
     * database id
     */
    databaseId?: pulumi.Input<string>;
    databaseInstanceId?: pulumi.Input<string>;
    /**
     * name of database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * database nodes associated with database instance
     */
    databaseNodes?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNode>[]>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * dbserver logical cluster
     */
    dbserverLogicalCluster?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * dbserver logical cluster id
     */
    dbserverLogicalClusterId?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfo>[]>;
    /**
     * latest snapshot id
     */
    latestSnapshot?: pulumi.Input<string>;
    /**
     * LCM config of instance
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfig>[]>;
    /**
     * linked databases within database instance
     */
    linkedDatabases?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLinkedDatabase>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * parent database id
     */
    parentDatabaseId?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreProperty>[]>;
    /**
     * helps to restore the database with same config.
     */
    restoreVersion?: pulumi.Input<number>;
    /**
     * snapshot id from you want to use for restoring the instance
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTag>[]>;
    /**
     * time machine id of instance
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * Time Machine details of instance
     */
    timeMachines?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachine>[]>;
    /**
     * timezone on which instance is created xw
     */
    timeZone?: pulumi.Input<string>;
    /**
     * timezone . Should be used with  `userPitrTimestamp`
     */
    timeZonePitr?: pulumi.Input<string>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
    /**
     * the time to which you want to restore your instance.
     */
    userPitrTimestamp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbDatabaseRestore resource.
 */
export interface NdbDatabaseRestoreArgs {
    /**
     * database id
     */
    databaseId: pulumi.Input<string>;
    /**
     * latest snapshot id
     */
    latestSnapshot?: pulumi.Input<string>;
    /**
     * helps to restore the database with same config.
     */
    restoreVersion?: pulumi.Input<number>;
    /**
     * snapshot id from you want to use for restoring the instance
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTag>[]>;
    /**
     * timezone . Should be used with  `userPitrTimestamp`
     */
    timeZonePitr?: pulumi.Input<string>;
    /**
     * the time to which you want to restore your instance.
     */
    userPitrTimestamp?: pulumi.Input<string>;
}
