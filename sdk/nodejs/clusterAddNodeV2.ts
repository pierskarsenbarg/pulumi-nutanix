// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Add node on a cluster identified by {extId}.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // cluster of 3 node uuid that we want to add node
 * const clustersExtId = "00057b8b-0b3b-4b3b-0000-000000000000";
 * // for example
 * const cvmIp = "10.xx.xx.xx";
 * //# check if the node to add is un configured or not
 * const cluster_node = new nutanix.ClustersDiscoverUnconfiguredNodesV2("cluster-node", {
 *     extId: clustersExtId,
 *     addressType: "IPV4",
 *     ipFilterLists: [{
 *         ipv4s: [{
 *             value: cvmIp,
 *         }],
 *     }],
 * });
 * //# fetch Network info for unconfigured node
 * const node_network_info = new nutanix.ClustersUnconfiguredNodeNetworksV2("node-network-info", {
 *     extId: clustersExtId,
 *     requestType: "expand_cluster",
 *     nodeLists: [{
 *         cvmIps: [{
 *             ipv4s: [{
 *                 value: cvmIp,
 *             }],
 *         }],
 *         hypervisorIps: [{
 *             ipv4s: [{
 *                 value: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].hypervisorIps?.[0]?.ipv4s?.[0]?.value),
 *             }],
 *         }],
 *     }],
 * }, {
 *     dependsOn: [cluster_node],
 * });
 * //# add node to the cluster
 * const add_node = new nutanix.ClusterAddNodeV2("add-node", {
 *     clusterExtId: clustersExtId,
 *     shouldSkipAddNode: false,
 *     shouldSkipPreExpandChecks: false,
 *     nodeParams: [{
 *         shouldSkipHostNetworking: false,
 *         hypervisorIsos: [{
 *             type: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].hypervisorType),
 *         }],
 *         nodeLists: [{
 *             nodeUuid: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].nodeUuid),
 *             model: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].rackableUnitModel),
 *             blockId: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].rackableUnitSerial),
 *             hypervisorType: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].hypervisorType),
 *             hypervisorVersion: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].hypervisorVersion),
 *             nodePosition: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].nodePosition),
 *             nosVersion: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].nosVersion),
 *             hypervisorHostname: "example",
 *             currentNetworkInterface: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].uplinks?.[0]?.uplinkLists?.[0]?.name),
 *             hypervisorIps: [{
 *                 ipv4s: [{
 *                     value: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].hypervisorIps?.[0]?.ipv4s?.[0]?.value),
 *                 }],
 *             }],
 *             cvmIps: [{
 *                 ipv4s: [{
 *                     value: cvmIp,
 *                 }],
 *             }],
 *             ipmiIps: [{
 *                 ipv4s: [{
 *                     value: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].ipmiIps?.[0]?.ipv4s?.[0]?.value),
 *                 }],
 *             }],
 *             isRoboMixedHypervisor: true,
 *             networks: [{
 *                 name: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].networkInfos?.[0]?.hcis?.[0]?.name),
 *                 networks: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].networkInfos?.[0]?.hcis?.[0]?.networks),
 *                 uplinks: [{
 *                     actives: [{
 *                         name: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].uplinks?.[0]?.uplinkLists?.[0]?.name),
 *                         mac: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].uplinks?.[0]?.uplinkLists?.[0]?.mac),
 *                         value: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].uplinks?.[0]?.uplinkLists?.[0]?.name),
 *                     }],
 *                     standbies: [{
 *                         name: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].uplinks?.[0]?.uplinkLists?.[1]?.name),
 *                         mac: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].uplinks?.[0]?.uplinkLists?.[1]?.mac),
 *                         value: node_network_info.nodesNetworkingDetails.apply(nodesNetworkingDetails => nodesNetworkingDetails[0].uplinks?.[0]?.uplinkLists?.[1]?.name),
 *                     }],
 *                 }],
 *             }],
 *         }],
 *     }],
 *     configParams: [{
 *         shouldSkipImaging: true,
 *         targetHypervisor: cluster_node.unconfiguredNodes.apply(unconfiguredNodes => unconfiguredNodes[0].hypervisorType),
 *     }],
 *     removeNodeParams: [{
 *         extraParams: [{
 *             shouldSkipUpgradeCheck: false,
 *             skipSpaceCheck: false,
 *             shouldSkipAddCheck: false,
 *         }],
 *         shouldSkipRemove: false,
 *         shouldSkipPrechecks: false,
 *     }],
 * }, {
 *     dependsOn: [node_network_info],
 * });
 * ```
 */
export class ClusterAddNodeV2 extends pulumi.CustomResource {
    /**
     * Get an existing ClusterAddNodeV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterAddNodeV2State, opts?: pulumi.CustomResourceOptions): ClusterAddNodeV2 {
        return new ClusterAddNodeV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/clusterAddNodeV2:ClusterAddNodeV2';

    /**
     * Returns true if the given object is an instance of ClusterAddNodeV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterAddNodeV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterAddNodeV2.__pulumiType;
    }

    /**
     * -(Required) Cluster UUID.
     */
    public readonly clusterExtId!: pulumi.Output<string>;
    /**
     * -(Optional) Config parameters.
     */
    public readonly configParams!: pulumi.Output<outputs.ClusterAddNodeV2ConfigParam[]>;
    /**
     * -(Required) Parameters of the node to be added.
     */
    public readonly nodeParams!: pulumi.Output<outputs.ClusterAddNodeV2NodeParam[]>;
    /**
     * -(Optional) configuration for node removal.
     */
    public readonly removeNodeParams!: pulumi.Output<outputs.ClusterAddNodeV2RemoveNodeParam[] | undefined>;
    /**
     * -(Optional) Indicates if node addition can be skipped.
     */
    public readonly shouldSkipAddNode!: pulumi.Output<boolean>;
    /**
     * -(Optional) Indicates if pre-expand checks can be skipped for node addition.
     */
    public readonly shouldSkipPreExpandChecks!: pulumi.Output<boolean>;

    /**
     * Create a ClusterAddNodeV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterAddNodeV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterAddNodeV2Args | ClusterAddNodeV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterAddNodeV2State | undefined;
            resourceInputs["clusterExtId"] = state ? state.clusterExtId : undefined;
            resourceInputs["configParams"] = state ? state.configParams : undefined;
            resourceInputs["nodeParams"] = state ? state.nodeParams : undefined;
            resourceInputs["removeNodeParams"] = state ? state.removeNodeParams : undefined;
            resourceInputs["shouldSkipAddNode"] = state ? state.shouldSkipAddNode : undefined;
            resourceInputs["shouldSkipPreExpandChecks"] = state ? state.shouldSkipPreExpandChecks : undefined;
        } else {
            const args = argsOrState as ClusterAddNodeV2Args | undefined;
            if ((!args || args.clusterExtId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterExtId'");
            }
            if ((!args || args.nodeParams === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeParams'");
            }
            resourceInputs["clusterExtId"] = args ? args.clusterExtId : undefined;
            resourceInputs["configParams"] = args ? args.configParams : undefined;
            resourceInputs["nodeParams"] = args ? args.nodeParams : undefined;
            resourceInputs["removeNodeParams"] = args ? args.removeNodeParams : undefined;
            resourceInputs["shouldSkipAddNode"] = args ? args.shouldSkipAddNode : undefined;
            resourceInputs["shouldSkipPreExpandChecks"] = args ? args.shouldSkipPreExpandChecks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterAddNodeV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterAddNodeV2 resources.
 */
export interface ClusterAddNodeV2State {
    /**
     * -(Required) Cluster UUID.
     */
    clusterExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Config parameters.
     */
    configParams?: pulumi.Input<pulumi.Input<inputs.ClusterAddNodeV2ConfigParam>[]>;
    /**
     * -(Required) Parameters of the node to be added.
     */
    nodeParams?: pulumi.Input<pulumi.Input<inputs.ClusterAddNodeV2NodeParam>[]>;
    /**
     * -(Optional) configuration for node removal.
     */
    removeNodeParams?: pulumi.Input<pulumi.Input<inputs.ClusterAddNodeV2RemoveNodeParam>[]>;
    /**
     * -(Optional) Indicates if node addition can be skipped.
     */
    shouldSkipAddNode?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates if pre-expand checks can be skipped for node addition.
     */
    shouldSkipPreExpandChecks?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ClusterAddNodeV2 resource.
 */
export interface ClusterAddNodeV2Args {
    /**
     * -(Required) Cluster UUID.
     */
    clusterExtId: pulumi.Input<string>;
    /**
     * -(Optional) Config parameters.
     */
    configParams?: pulumi.Input<pulumi.Input<inputs.ClusterAddNodeV2ConfigParam>[]>;
    /**
     * -(Required) Parameters of the node to be added.
     */
    nodeParams: pulumi.Input<pulumi.Input<inputs.ClusterAddNodeV2NodeParam>[]>;
    /**
     * -(Optional) configuration for node removal.
     */
    removeNodeParams?: pulumi.Input<pulumi.Input<inputs.ClusterAddNodeV2RemoveNodeParam>[]>;
    /**
     * -(Optional) Indicates if node addition can be skipped.
     */
    shouldSkipAddNode?: pulumi.Input<boolean>;
    /**
     * -(Optional) Indicates if pre-expand checks can be skipped for node addition.
     */
    shouldSkipPreExpandChecks?: pulumi.Input<boolean>;
}
