// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get details about an LCM entity.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const entity_before_upgrade = nutanix.getLcmEntityV2({
 *     extId: "613no9d0-7caf-49y7-k582-1db5a5df580c",
 * });
 * ```
 */
export function getLcmEntityV2(args: GetLcmEntityV2Args, opts?: pulumi.InvokeOptions): Promise<GetLcmEntityV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getLcmEntityV2:getLcmEntityV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getLcmEntityV2.
 */
export interface GetLcmEntityV2Args {
    /**
     * ExtId of the LCM entity.
     */
    extId: string;
}

/**
 * A collection of values returned by getLcmEntityV2.
 */
export interface GetLcmEntityV2Result {
    /**
     * List of available versions for an LCM entity to update.
     */
    readonly availableVersions: outputs.GetLcmEntityV2AvailableVersion[];
    /**
     * Component information for the payload based entity.
     */
    readonly childEntities: string[];
    /**
     * Cluster uuid on which the resource is present or operation is being performed.
     */
    readonly clusterExtId: string;
    /**
     * Unique identifier of an LCM entity e.g. "HDD serial number".
     */
    readonly deviceId: string;
    /**
     * LCM entity class.
     */
    readonly entityClass: string;
    /**
     * Description of an LCM entity.
     */
    readonly entityDescription: string;
    /**
     * Detailed information for the LCM entity. For example, firmware entities contain additional information about NIC and so on.
     */
    readonly entityDetails: outputs.GetLcmEntityV2EntityDetail[];
    /**
     * LCM entity model.
     */
    readonly entityModel: string;
    /**
     * Type of an LCM entity.  Enum Values:
     * * `FIRMWARE`: LCM entity type firmware.
     * * `SOFTWARE`: LCM entity type software.
     */
    readonly entityType: string;
    /**
     * Current version of an LCM entity.
     */
    readonly entityVersion: string;
    /**
     * A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * UUID of the group that this LCM entity is part of.
     */
    readonly groupUuid: string;
    /**
     * A hardware family for a LCM entity.
     */
    readonly hardwareFamily: string;
    /**
     * Hardware vendor information.
     */
    readonly hardwareVendor: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * UTC date and time in RFC-3339 format when the task was last updated.
     */
    readonly lastUpdatedTime: string;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetLcmEntityV2Link[];
    /**
     * Location info corresponds to a tuple of location type (either node/cluster) and ExtID
     */
    readonly locationInfos: outputs.GetLcmEntityV2LocationInfo[];
    /**
     * A list of sub-entities applicable to the entity.
     */
    readonly subEntities: outputs.GetLcmEntityV2SubEntity[];
    /**
     * The requested update version of an LCM entity.
     */
    readonly targetVersion: string;
    /**
     * A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
}
/**
 * Get details about an LCM entity.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const entity_before_upgrade = nutanix.getLcmEntityV2({
 *     extId: "613no9d0-7caf-49y7-k582-1db5a5df580c",
 * });
 * ```
 */
export function getLcmEntityV2Output(args: GetLcmEntityV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLcmEntityV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getLcmEntityV2:getLcmEntityV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getLcmEntityV2.
 */
export interface GetLcmEntityV2OutputArgs {
    /**
     * ExtId of the LCM entity.
     */
    extId: pulumi.Input<string>;
}
