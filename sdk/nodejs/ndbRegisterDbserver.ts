// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NdbRegisterDbserver extends pulumi.CustomResource {
    /**
     * Get an existing NdbRegisterDbserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbRegisterDbserverState, opts?: pulumi.CustomResourceOptions): NdbRegisterDbserver {
        return new NdbRegisterDbserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver';

    /**
     * Returns true if the given object is an instance of NdbRegisterDbserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbRegisterDbserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbRegisterDbserver.__pulumiType;
    }

    public /*out*/ readonly clientId!: pulumi.Output<string>;
    public readonly credentials!: pulumi.Output<outputs.NdbRegisterDbserverCredential[] | undefined>;
    public readonly databaseType!: pulumi.Output<string>;
    public /*out*/ readonly dbserverClusterId!: pulumi.Output<string>;
    public readonly delete!: pulumi.Output<boolean | undefined>;
    public readonly deleteVgs!: pulumi.Output<boolean | undefined>;
    public readonly deleteVmSnapshots!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly eraCreated!: pulumi.Output<boolean>;
    public /*out*/ readonly eraDriveId!: pulumi.Output<string>;
    public /*out*/ readonly eraVersion!: pulumi.Output<string>;
    public readonly forcedInstall!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly fqdns!: pulumi.Output<string>;
    public /*out*/ readonly internal!: pulumi.Output<boolean>;
    public /*out*/ readonly ipAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly macAddresses!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly nxclusterId!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly postgresDatabases!: pulumi.Output<outputs.NdbRegisterDbserverPostgresDatabase[] | undefined>;
    /**
     * List of all the properties
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbRegisterDbserverProperty[]>;
    public readonly remove!: pulumi.Output<boolean | undefined>;
    public readonly softRemove!: pulumi.Output<boolean | undefined>;
    public readonly sshKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.NdbRegisterDbserverTag[]>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly updateNameDescriptionInCluster!: pulumi.Output<boolean | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;
    public /*out*/ readonly vmClusterName!: pulumi.Output<string>;
    public /*out*/ readonly vmClusterUuid!: pulumi.Output<string>;
    public readonly vmIp!: pulumi.Output<string>;
    public /*out*/ readonly vmTimezone!: pulumi.Output<string>;
    public readonly workingDirectory!: pulumi.Output<string | undefined>;

    /**
     * Create a NdbRegisterDbserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbRegisterDbserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbRegisterDbserverArgs | NdbRegisterDbserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbRegisterDbserverState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["dbserverClusterId"] = state ? state.dbserverClusterId : undefined;
            resourceInputs["delete"] = state ? state.delete : undefined;
            resourceInputs["deleteVgs"] = state ? state.deleteVgs : undefined;
            resourceInputs["deleteVmSnapshots"] = state ? state.deleteVmSnapshots : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eraCreated"] = state ? state.eraCreated : undefined;
            resourceInputs["eraDriveId"] = state ? state.eraDriveId : undefined;
            resourceInputs["eraVersion"] = state ? state.eraVersion : undefined;
            resourceInputs["forcedInstall"] = state ? state.forcedInstall : undefined;
            resourceInputs["fqdns"] = state ? state.fqdns : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["macAddresses"] = state ? state.macAddresses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nxclusterId"] = state ? state.nxclusterId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["postgresDatabases"] = state ? state.postgresDatabases : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["remove"] = state ? state.remove : undefined;
            resourceInputs["softRemove"] = state ? state.softRemove : undefined;
            resourceInputs["sshKey"] = state ? state.sshKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateNameDescriptionInCluster"] = state ? state.updateNameDescriptionInCluster : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vmClusterName"] = state ? state.vmClusterName : undefined;
            resourceInputs["vmClusterUuid"] = state ? state.vmClusterUuid : undefined;
            resourceInputs["vmIp"] = state ? state.vmIp : undefined;
            resourceInputs["vmTimezone"] = state ? state.vmTimezone : undefined;
            resourceInputs["workingDirectory"] = state ? state.workingDirectory : undefined;
        } else {
            const args = argsOrState as NdbRegisterDbserverArgs | undefined;
            if ((!args || args.databaseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseType'");
            }
            if ((!args || args.vmIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmIp'");
            }
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["databaseType"] = args ? args.databaseType : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["deleteVgs"] = args ? args.deleteVgs : undefined;
            resourceInputs["deleteVmSnapshots"] = args ? args.deleteVmSnapshots : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forcedInstall"] = args ? args.forcedInstall : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nxclusterId"] = args ? args.nxclusterId : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["postgresDatabases"] = args ? args.postgresDatabases : undefined;
            resourceInputs["remove"] = args ? args.remove : undefined;
            resourceInputs["softRemove"] = args ? args.softRemove : undefined;
            resourceInputs["sshKey"] = args?.sshKey ? pulumi.secret(args.sshKey) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["updateNameDescriptionInCluster"] = args ? args.updateNameDescriptionInCluster : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vmIp"] = args ? args.vmIp : undefined;
            resourceInputs["workingDirectory"] = args ? args.workingDirectory : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["dbserverClusterId"] = undefined /*out*/;
            resourceInputs["eraCreated"] = undefined /*out*/;
            resourceInputs["eraDriveId"] = undefined /*out*/;
            resourceInputs["eraVersion"] = undefined /*out*/;
            resourceInputs["fqdns"] = undefined /*out*/;
            resourceInputs["internal"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["macAddresses"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["vmClusterName"] = undefined /*out*/;
            resourceInputs["vmClusterUuid"] = undefined /*out*/;
            resourceInputs["vmTimezone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "sshKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NdbRegisterDbserver.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbRegisterDbserver resources.
 */
export interface NdbRegisterDbserverState {
    clientId?: pulumi.Input<string>;
    credentials?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDbserverCredential>[]>;
    databaseType?: pulumi.Input<string>;
    dbserverClusterId?: pulumi.Input<string>;
    delete?: pulumi.Input<boolean>;
    deleteVgs?: pulumi.Input<boolean>;
    deleteVmSnapshots?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    eraCreated?: pulumi.Input<boolean>;
    eraDriveId?: pulumi.Input<string>;
    eraVersion?: pulumi.Input<string>;
    forcedInstall?: pulumi.Input<boolean>;
    fqdns?: pulumi.Input<string>;
    internal?: pulumi.Input<boolean>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    macAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    nxclusterId?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDbserverPostgresDatabase>[]>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDbserverProperty>[]>;
    remove?: pulumi.Input<boolean>;
    softRemove?: pulumi.Input<boolean>;
    sshKey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDbserverTag>[]>;
    type?: pulumi.Input<string>;
    updateNameDescriptionInCluster?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
    vmClusterName?: pulumi.Input<string>;
    vmClusterUuid?: pulumi.Input<string>;
    vmIp?: pulumi.Input<string>;
    vmTimezone?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbRegisterDbserver resource.
 */
export interface NdbRegisterDbserverArgs {
    credentials?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDbserverCredential>[]>;
    databaseType: pulumi.Input<string>;
    delete?: pulumi.Input<boolean>;
    deleteVgs?: pulumi.Input<boolean>;
    deleteVmSnapshots?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    forcedInstall?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nxclusterId?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDbserverPostgresDatabase>[]>;
    remove?: pulumi.Input<boolean>;
    softRemove?: pulumi.Input<boolean>;
    sshKey?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDbserverTag>[]>;
    updateNameDescriptionInCluster?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
    vmIp: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}
