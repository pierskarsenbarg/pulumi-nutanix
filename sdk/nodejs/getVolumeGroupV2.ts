// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Query the Volume Group identified by {extId}.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const volumeGroup = nutanix.getVolumeGroupV2({
 *     extId: "d09aeec9-5bb7-4bfd-9717-a051178f6e7c",
 * });
 * ```
 */
export function getVolumeGroupV2(args: GetVolumeGroupV2Args, opts?: pulumi.InvokeOptions): Promise<GetVolumeGroupV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getVolumeGroupV2:getVolumeGroupV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumeGroupV2.
 */
export interface GetVolumeGroupV2Args {
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId: string;
}

/**
 * A collection of values returned by getVolumeGroupV2.
 */
export interface GetVolumeGroupV2Result {
    /**
     * - The UUID of the cluster that will host the Volume Group.
     */
    readonly clusterReference: string;
    /**
     * - Service/user who created this Volume Group.
     */
    readonly createdBy: string;
    /**
     * - Volume Group description. This is an optional field.
     */
    readonly description: string;
    /**
     * - The authentication type enabled for the Volume Group.
     */
    readonly enabledAuthentications: string;
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * - Indicates whether the Volume Group is meant to be hidden or not.
     */
    readonly isHidden: boolean;
    /**
     * - iSCSI specific settings for the Volume Group.
     */
    readonly iscsiFeatures: outputs.GetVolumeGroupV2IscsiFeature[];
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetVolumeGroupV2Link[];
    /**
     * -(Required) Volume Group name. This is an optional field.
     */
    readonly name: string;
    /**
     * - Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
     */
    readonly sharingStatus: string;
    /**
     * - Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
     */
    readonly shouldLoadBalanceVmAttachments: boolean;
    /**
     * - Storage optimization features which must be enabled on the Volume Group.
     */
    readonly storageFeatures: outputs.GetVolumeGroupV2StorageFeature[];
    /**
     * - Name of the external client target that will be visible and accessible to the client.
     */
    readonly targetName: string;
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
    /**
     * - Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
     */
    readonly usageType: string;
}
/**
 * Query the Volume Group identified by {extId}.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const volumeGroup = nutanix.getVolumeGroupV2({
 *     extId: "d09aeec9-5bb7-4bfd-9717-a051178f6e7c",
 * });
 * ```
 */
export function getVolumeGroupV2Output(args: GetVolumeGroupV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVolumeGroupV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getVolumeGroupV2:getVolumeGroupV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumeGroupV2.
 */
export interface GetVolumeGroupV2OutputArgs {
    /**
     * - A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId: pulumi.Input<string>;
}
