// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Describe a Nutanix Project and its values (if it has them).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 * import * as pulumi_nutanix from "@pierskarsenbarg/pulumi-nutanix";
 *
 * const subnet = new nutanix.Subnet("subnet", {
 *     clusterUuid: "<YOUR_CLUSTER_ID>",
 *     description: "Description of my unit test VLAN",
 *     vlanId: 31,
 *     subnetType: "VLAN",
 *     subnetIp: "10.250.140.0",
 *     defaultGatewayIp: "10.250.140.1",
 *     prefixLength: 24,
 *     dhcpOptions: {
 *         boot_file_name: "bootfile",
 *         domain_name: "nutanix",
 *         tftp_server_name: "10.250.140.200",
 *     },
 *     dhcpDomainNameServerLists: [
 *         "8.8.8.8",
 *         "4.2.2.2",
 *     ],
 *     dhcpDomainSearchLists: [
 *         "terraform.nutanix.com",
 *         "terraform.unit.test.com",
 *     ],
 * });
 * const projectTest = new nutanix.Project("projectTest", {
 *     description: "This is my project",
 *     categories: [{
 *         name: "Environment",
 *         value: "Staging",
 *     }],
 *     resourceDomain: {
 *         resources: [{
 *             limit: 4,
 *             resourceType: "STORAGE",
 *         }],
 *     },
 *     defaultSubnetReference: {
 *         uuid: subnet.metadata.uuid,
 *     },
 *     apiVersion: "3.1",
 * });
 * const test = nutanix.getProjectOutput({
 *     projectId: projectTest.id,
 * });
 * ```
 */
export function getProject(args?: GetProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getProject:getProject", {
        "categories": args.categories,
        "externalUserGroupReferenceLists": args.externalUserGroupReferenceLists,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "subnetReferenceLists": args.subnetReferenceLists,
        "userReferenceLists": args.userReferenceLists,
    }, opts);
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectArgs {
    categories?: inputs.GetProjectCategory[];
    /**
     * List of directory service user groups. These groups are not managed by Nutanix.
     * * `external_user_group_reference_list.#.kind` - The kind name. Default value is `userGroup`
     * * `external_user_group_reference_list.#.uuid` - The UUID of a userGroup
     * * `external_user_group_reference_list.#.name` - The name of a user_group
     */
    externalUserGroupReferenceLists?: inputs.GetProjectExternalUserGroupReferenceList[];
    projectId?: string;
    projectName?: string;
    /**
     * List of subnets for the project.
     * * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
     * * `subnet_reference_list.#.uuid` - The UUID of a subnet
     * * `subnet_reference_list.#.name` - The name of a subnet.
     */
    subnetReferenceLists?: inputs.GetProjectSubnetReferenceList[];
    /**
     * List of users in the project.
     * * `user_reference_list.#.kind` - The kind name. Default value is `user`
     * * `user_reference_list.#.uuid` - The UUID of a user
     * * `user_reference_list.#.name` - The name of a user.
     */
    userReferenceLists?: inputs.GetProjectUserReferenceList[];
}

/**
 * A collection of values returned by getProject.
 */
export interface GetProjectResult {
    /**
     * List of accounts associated with the project.
     * * `account_reference_list.#.kind` - The kind name. Default value is `account`
     * * `account_reference_list.#.uuid` - The UUID of an account.
     * * `account_reference_list.#.name` - The name of an account.
     */
    readonly accountReferenceLists: outputs.GetProjectAccountReferenceList[];
    readonly apiVersion: string;
    readonly categories: outputs.GetProjectCategory[];
    /**
     * Reference to a subnet.
     * * `default_subnet_reference.kind` - The kind name. Default value is `subnet`
     * * `default_subnet_reference.uuid` - The UUID of a subnet.
     * * `default_subnet_reference.name` - The name of a subnet.
     */
    readonly defaultSubnetReference: {[key: string]: string};
    readonly description: string;
    /**
     * List of environments associated with the project.
     * * `environment_reference_list.#.kind` - The kind name. Default value is `environment`
     * * `environment_reference_list.#.uuid` - The UUID of an environment.
     * * `environment_reference_list.#.name` - The name of an environment.
     */
    readonly environmentReferenceLists: outputs.GetProjectEnvironmentReferenceList[];
    /**
     * List of external networks associated with the project.
     * * `external_network_list.#.uuid` - The UUID of a network.
     * * `external_network_list.#.name` - The name of a network.
     */
    readonly externalNetworkLists: outputs.GetProjectExternalNetworkList[];
    /**
     * List of directory service user groups. These groups are not managed by Nutanix.
     * * `external_user_group_reference_list.#.kind` - The kind name. Default value is `userGroup`
     * * `external_user_group_reference_list.#.uuid` - The UUID of a userGroup
     * * `external_user_group_reference_list.#.name` - The name of a user_group
     */
    readonly externalUserGroupReferenceLists: outputs.GetProjectExternalUserGroupReferenceList[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isDefault: boolean;
    readonly metadata: {[key: string]: string};
    /**
     * the name.
     */
    readonly name: string;
    readonly ownerReference: {[key: string]: string};
    readonly projectId?: string;
    readonly projectName?: string;
    readonly projectReference: {[key: string]: string};
    readonly resourceDomains: outputs.GetProjectResourceDomain[];
    readonly state: string;
    /**
     * List of subnets for the project.
     * * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
     * * `subnet_reference_list.#.uuid` - The UUID of a subnet
     * * `subnet_reference_list.#.name` - The name of a subnet.
     */
    readonly subnetReferenceLists: outputs.GetProjectSubnetReferenceList[];
    /**
     * List of users in the project.
     * * `user_reference_list.#.kind` - The kind name. Default value is `user`
     * * `user_reference_list.#.uuid` - The UUID of a user
     * * `user_reference_list.#.name` - The name of a user.
     */
    readonly userReferenceLists: outputs.GetProjectUserReferenceList[];
}

export function getProjectOutput(args?: GetProjectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectResult> {
    return pulumi.output(args).apply(a => getProject(a, opts))
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetProjectCategoryArgs>[]>;
    /**
     * List of directory service user groups. These groups are not managed by Nutanix.
     * * `external_user_group_reference_list.#.kind` - The kind name. Default value is `userGroup`
     * * `external_user_group_reference_list.#.uuid` - The UUID of a userGroup
     * * `external_user_group_reference_list.#.name` - The name of a user_group
     */
    externalUserGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.GetProjectExternalUserGroupReferenceListArgs>[]>;
    projectId?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    /**
     * List of subnets for the project.
     * * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
     * * `subnet_reference_list.#.uuid` - The UUID of a subnet
     * * `subnet_reference_list.#.name` - The name of a subnet.
     */
    subnetReferenceLists?: pulumi.Input<pulumi.Input<inputs.GetProjectSubnetReferenceListArgs>[]>;
    /**
     * List of users in the project.
     * * `user_reference_list.#.kind` - The kind name. Default value is `user`
     * * `user_reference_list.#.uuid` - The UUID of a user
     * * `user_reference_list.#.name` - The name of a user.
     */
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.GetProjectUserReferenceListArgs>[]>;
}
