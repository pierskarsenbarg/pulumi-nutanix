// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a datasource to retrieve VPC with vpcUuid .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const get_vpc = nutanix.getVpcV2({
 *     extId: "8a938cc5-282b-48c4-81be-de22de145d07",
 * });
 * ```
 */
export function getVpcV2(args: GetVpcV2Args, opts?: pulumi.InvokeOptions): Promise<GetVpcV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getVpcV2:getVpcV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpcV2.
 */
export interface GetVpcV2Args {
    /**
     * vpc UUID
     */
    extId: string;
}

/**
 * A collection of values returned by getVpcV2.
 */
export interface GetVpcV2Result {
    /**
     * List of DHCP options to be configured.
     */
    readonly commonDhcpOptions: outputs.GetVpcV2CommonDhcpOption[];
    /**
     * Description of the VPC.
     */
    readonly description: string;
    readonly extId: string;
    /**
     * External routing domain associated with this route table
     */
    readonly externalRoutingDomainReference: string;
    /**
     * List of external subnets that the VPC is attached to.
     */
    readonly externalSubnets: outputs.GetVpcV2ExternalSubnet[];
    /**
     * CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
     */
    readonly externallyRoutablePrefixes: outputs.GetVpcV2ExternallyRoutablePrefix[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetVpcV2Link[];
    /**
     * Metadata associated with this resource.
     */
    readonly metadatas: outputs.GetVpcV2Metadata[];
    /**
     * Name of the VPC.
     */
    readonly name: string;
    /**
     * List of IP Addresses used for SNAT.
     */
    readonly snatIps: outputs.GetVpcV2SnatIp[];
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    readonly tenantId: string;
    /**
     * Type of VPC.
     */
    readonly vpcType: string;
}
/**
 * Provides a datasource to retrieve VPC with vpcUuid .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const get_vpc = nutanix.getVpcV2({
 *     extId: "8a938cc5-282b-48c4-81be-de22de145d07",
 * });
 * ```
 */
export function getVpcV2Output(args: GetVpcV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVpcV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getVpcV2:getVpcV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpcV2.
 */
export interface GetVpcV2OutputArgs {
    /**
     * vpc UUID
     */
    extId: pulumi.Input<string>;
}
