// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmNetworkDeviceMigrateV2 extends pulumi.CustomResource {
    /**
     * Get an existing VmNetworkDeviceMigrateV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmNetworkDeviceMigrateV2State, opts?: pulumi.CustomResourceOptions): VmNetworkDeviceMigrateV2 {
        return new VmNetworkDeviceMigrateV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/vmNetworkDeviceMigrateV2:VmNetworkDeviceMigrateV2';

    /**
     * Returns true if the given object is an instance of VmNetworkDeviceMigrateV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmNetworkDeviceMigrateV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmNetworkDeviceMigrateV2.__pulumiType;
    }

    public readonly extId!: pulumi.Output<string>;
    public readonly ipAddresses!: pulumi.Output<outputs.VmNetworkDeviceMigrateV2IpAddress[]>;
    public readonly migrateType!: pulumi.Output<string>;
    public readonly subnets!: pulumi.Output<outputs.VmNetworkDeviceMigrateV2Subnet[]>;
    public readonly vmExtId!: pulumi.Output<string>;

    /**
     * Create a VmNetworkDeviceMigrateV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmNetworkDeviceMigrateV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmNetworkDeviceMigrateV2Args | VmNetworkDeviceMigrateV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmNetworkDeviceMigrateV2State | undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["migrateType"] = state ? state.migrateType : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["vmExtId"] = state ? state.vmExtId : undefined;
        } else {
            const args = argsOrState as VmNetworkDeviceMigrateV2Args | undefined;
            if ((!args || args.extId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extId'");
            }
            if ((!args || args.migrateType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'migrateType'");
            }
            if ((!args || args.subnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnets'");
            }
            if ((!args || args.vmExtId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmExtId'");
            }
            resourceInputs["extId"] = args ? args.extId : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["migrateType"] = args ? args.migrateType : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["vmExtId"] = args ? args.vmExtId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmNetworkDeviceMigrateV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmNetworkDeviceMigrateV2 resources.
 */
export interface VmNetworkDeviceMigrateV2State {
    extId?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VmNetworkDeviceMigrateV2IpAddress>[]>;
    migrateType?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VmNetworkDeviceMigrateV2Subnet>[]>;
    vmExtId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmNetworkDeviceMigrateV2 resource.
 */
export interface VmNetworkDeviceMigrateV2Args {
    extId: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VmNetworkDeviceMigrateV2IpAddress>[]>;
    migrateType: pulumi.Input<string>;
    subnets: pulumi.Input<pulumi.Input<inputs.VmNetworkDeviceMigrateV2Subnet>[]>;
    vmExtId: pulumi.Input<string>;
}
