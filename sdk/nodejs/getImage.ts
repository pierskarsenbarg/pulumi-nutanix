// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Describes a Image
 */
export function getImage(args?: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("nutanix:index/getImage:getImage", {
        "categories": args.categories,
        "imageId": args.imageId,
        "imageName": args.imageName,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    categories?: inputs.GetImageCategory[];
    imageId?: string;
    imageName?: string;
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    readonly apiVersion: string;
    readonly architecture: string;
    readonly availabilityZoneReference: {[key: string]: string};
    readonly categories: outputs.GetImageCategory[];
    readonly checksum: {[key: string]: string};
    readonly clusterName: string;
    readonly clusterReferences: outputs.GetImageClusterReference[];
    readonly clusterUuid: string;
    readonly currentClusterReferenceLists: outputs.GetImageCurrentClusterReferenceList[];
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly imageId?: string;
    readonly imageName?: string;
    readonly imageType: string;
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly ownerReference: {[key: string]: string};
    readonly projectReference: {[key: string]: string};
    readonly retrievalUriLists: string[];
    readonly sizeBytes: number;
    readonly sourceUri: string;
    readonly state: string;
    readonly version: {[key: string]: string};
}

export function getImageOutput(args?: GetImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImageResult> {
    return pulumi.output(args).apply(a => getImage(a, opts))
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetImageCategoryArgs>[]>;
    imageId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
}
