// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a datasource to retrieve the floating IP for this extId.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_floating_ip = nutanix.getFloatingIpV2({
 *     extId: "cf1a7643-605e-4622-9f2a-b3fdccdbd072",
 * });
 * ```
 */
export function getFloatingIpV2(args: GetFloatingIpV2Args, opts?: pulumi.InvokeOptions): Promise<GetFloatingIpV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getFloatingIpV2:getFloatingIpV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFloatingIpV2.
 */
export interface GetFloatingIpV2Args {
    /**
     * Floating IP UUID
     */
    extId: string;
}

/**
 * A collection of values returned by getFloatingIpV2.
 */
export interface GetFloatingIpV2Result {
    /**
     * Association status of floating IP.
     */
    readonly associationStatus: string;
    /**
     * Association of the Floating IP with either NIC or Private IP
     */
    readonly associations: outputs.GetFloatingIpV2Association[];
    /**
     * Description for the Floating IP.
     */
    readonly description: string;
    readonly extId: string;
    /**
     * External subnet reference for the Floating IP to be allocated in on-prem only.
     */
    readonly externalSubnetReference: string;
    /**
     * Networking common base object
     */
    readonly externalSubnets: outputs.GetFloatingIpV2ExternalSubnet[];
    /**
     * Floating IP value in string
     */
    readonly floatingIpValue: string;
    /**
     * Floating IP address.
     */
    readonly floatingIps: outputs.GetFloatingIpV2FloatingIp[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetFloatingIpV2Link[];
    /**
     * Metadata associated with this resource.
     */
    readonly metadatas: outputs.GetFloatingIpV2Metadata[];
    /**
     * Name of the floating IP.
     */
    readonly name: string;
    /**
     * Private IP value in string
     */
    readonly privateIp: string;
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    readonly tenantId: string;
    /**
     * VM NIC reference.
     */
    readonly vmNicReference: string;
    /**
     * Virtual NIC for projections
     */
    readonly vmNics: outputs.GetFloatingIpV2VmNic[];
    /**
     * VPC reference UUID
     */
    readonly vpcReference: string;
    /**
     * Networking common base object
     */
    readonly vpcs: outputs.GetFloatingIpV2Vpc[];
}
/**
 * Provides a datasource to retrieve the floating IP for this extId.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const get_floating_ip = nutanix.getFloatingIpV2({
 *     extId: "cf1a7643-605e-4622-9f2a-b3fdccdbd072",
 * });
 * ```
 */
export function getFloatingIpV2Output(args: GetFloatingIpV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFloatingIpV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getFloatingIpV2:getFloatingIpV2", {
        "extId": args.extId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFloatingIpV2.
 */
export interface GetFloatingIpV2OutputArgs {
    /**
     * Floating IP UUID
     */
    extId: pulumi.Input<string>;
}
