// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides Nutanix resource to create VPC.
 */
export class VpcV2 extends pulumi.CustomResource {
    /**
     * Get an existing VpcV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcV2State, opts?: pulumi.CustomResourceOptions): VpcV2 {
        return new VpcV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/vpcV2:VpcV2';

    /**
     * Returns true if the given object is an instance of VpcV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcV2.__pulumiType;
    }

    /**
     * List of DHCP options to be configured.
     */
    declare public readonly commonDhcpOptions: pulumi.Output<outputs.VpcV2CommonDhcpOption[]>;
    /**
     * Description of the VPC.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * the vpc uuid.
     */
    declare public /*out*/ readonly extId: pulumi.Output<string>;
    /**
     * External routing domain associated with this route table
     */
    declare public readonly externalRoutingDomainReference: pulumi.Output<string>;
    /**
     * List of external subnets that the VPC is attached to.
     */
    declare public readonly externalSubnets: pulumi.Output<outputs.VpcV2ExternalSubnet[]>;
    /**
     * CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
     */
    declare public readonly externallyRoutablePrefixes: pulumi.Output<outputs.VpcV2ExternallyRoutablePrefix[]>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    declare public /*out*/ readonly links: pulumi.Output<outputs.VpcV2Link[]>;
    /**
     * The vpc kind metadata.
     */
    declare public /*out*/ readonly metadatas: pulumi.Output<outputs.VpcV2Metadata[]>;
    /**
     * Name of the VPC.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly snatIps: pulumi.Output<outputs.VpcV2SnatIp[]>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    declare public /*out*/ readonly tenantId: pulumi.Output<string>;
    /**
     * Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
     */
    declare public readonly vpcType: pulumi.Output<string | undefined>;

    /**
     * Create a VpcV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpcV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcV2Args | VpcV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcV2State | undefined;
            resourceInputs["commonDhcpOptions"] = state?.commonDhcpOptions;
            resourceInputs["description"] = state?.description;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["externalRoutingDomainReference"] = state?.externalRoutingDomainReference;
            resourceInputs["externalSubnets"] = state?.externalSubnets;
            resourceInputs["externallyRoutablePrefixes"] = state?.externallyRoutablePrefixes;
            resourceInputs["links"] = state?.links;
            resourceInputs["metadatas"] = state?.metadatas;
            resourceInputs["name"] = state?.name;
            resourceInputs["snatIps"] = state?.snatIps;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["vpcType"] = state?.vpcType;
        } else {
            const args = argsOrState as VpcV2Args | undefined;
            resourceInputs["commonDhcpOptions"] = args?.commonDhcpOptions;
            resourceInputs["description"] = args?.description;
            resourceInputs["externalRoutingDomainReference"] = args?.externalRoutingDomainReference;
            resourceInputs["externalSubnets"] = args?.externalSubnets;
            resourceInputs["externallyRoutablePrefixes"] = args?.externallyRoutablePrefixes;
            resourceInputs["name"] = args?.name;
            resourceInputs["vpcType"] = args?.vpcType;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["snatIps"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcV2 resources.
 */
export interface VpcV2State {
    /**
     * List of DHCP options to be configured.
     */
    commonDhcpOptions?: pulumi.Input<pulumi.Input<inputs.VpcV2CommonDhcpOption>[]>;
    /**
     * Description of the VPC.
     */
    description?: pulumi.Input<string>;
    /**
     * the vpc uuid.
     */
    extId?: pulumi.Input<string>;
    /**
     * External routing domain associated with this route table
     */
    externalRoutingDomainReference?: pulumi.Input<string>;
    /**
     * List of external subnets that the VPC is attached to.
     */
    externalSubnets?: pulumi.Input<pulumi.Input<inputs.VpcV2ExternalSubnet>[]>;
    /**
     * CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
     */
    externallyRoutablePrefixes?: pulumi.Input<pulumi.Input<inputs.VpcV2ExternallyRoutablePrefix>[]>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.VpcV2Link>[]>;
    /**
     * The vpc kind metadata.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.VpcV2Metadata>[]>;
    /**
     * Name of the VPC.
     */
    name?: pulumi.Input<string>;
    snatIps?: pulumi.Input<pulumi.Input<inputs.VpcV2SnatIp>[]>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
     */
    vpcType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcV2 resource.
 */
export interface VpcV2Args {
    /**
     * List of DHCP options to be configured.
     */
    commonDhcpOptions?: pulumi.Input<pulumi.Input<inputs.VpcV2CommonDhcpOption>[]>;
    /**
     * Description of the VPC.
     */
    description?: pulumi.Input<string>;
    /**
     * External routing domain associated with this route table
     */
    externalRoutingDomainReference?: pulumi.Input<string>;
    /**
     * List of external subnets that the VPC is attached to.
     */
    externalSubnets?: pulumi.Input<pulumi.Input<inputs.VpcV2ExternalSubnet>[]>;
    /**
     * CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
     */
    externallyRoutablePrefixes?: pulumi.Input<pulumi.Input<inputs.VpcV2ExternallyRoutablePrefix>[]>;
    /**
     * Name of the VPC.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
     */
    vpcType?: pulumi.Input<string>;
}
