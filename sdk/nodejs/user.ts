// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to create a user based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const user = new nutanix.User("user", {directoryServiceUser: {
 *     directoryServiceReference: {
 *         uuid: "<directory-service-uuid>",
 *     },
 *     userPrincipalName: "test-user@ntnxlab.local",
 * }});
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const user = new nutanix.User("user", {identityProviderUser: {
 *     identityProviderReference: {
 *         uuid: "<identity-provider-uuid>",
 *     },
 *     username: "username",
 * }});
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * - List of ACP references. See #reference for more details.
     */
    public /*out*/ readonly accessControlPolicyReferenceLists!: pulumi.Output<outputs.UserAccessControlPolicyReferenceList[]>;
    /**
     * The version of the API.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * - (Optional) Categories for the Access Control Policy.
     */
    public readonly categories!: pulumi.Output<outputs.UserCategory[]>;
    /**
     * - (Optional) The directory service user configuration. See below for more information.
     */
    public readonly directoryServiceUser!: pulumi.Output<outputs.UserDirectoryServiceUser>;
    /**
     * - The display name of the user (common name) provided by the directory service.
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * - (Optional) (Optional) The identity provider user configuration. See below for more information.
     */
    public readonly identityProviderUser!: pulumi.Output<outputs.UserIdentityProviderUser>;
    /**
     * - The vm kind metadata.
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * - the name(Optional).
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * - (Optional) The reference to a user.
     */
    public readonly ownerReference!: pulumi.Output<{[key: string]: string}>;
    /**
     * - (Optional) The reference to a project.
     */
    public readonly projectReference!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * - A list of projects the user is part of. See #reference for more details.
     */
    public /*out*/ readonly projectReferenceLists!: pulumi.Output<outputs.UserProjectReferenceList[]>;
    /**
     * - The state of the entity.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * - The name of the user.
     */
    public /*out*/ readonly userType!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["accessControlPolicyReferenceLists"] = state ? state.accessControlPolicyReferenceLists : undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["directoryServiceUser"] = state ? state.directoryServiceUser : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["identityProviderUser"] = state ? state.identityProviderUser : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerReference"] = state ? state.ownerReference : undefined;
            resourceInputs["projectReference"] = state ? state.projectReference : undefined;
            resourceInputs["projectReferenceLists"] = state ? state.projectReferenceLists : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["directoryServiceUser"] = args ? args.directoryServiceUser : undefined;
            resourceInputs["identityProviderUser"] = args ? args.identityProviderUser : undefined;
            resourceInputs["ownerReference"] = args ? args.ownerReference : undefined;
            resourceInputs["projectReference"] = args ? args.projectReference : undefined;
            resourceInputs["accessControlPolicyReferenceLists"] = undefined /*out*/;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["projectReferenceLists"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["userType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * - List of ACP references. See #reference for more details.
     */
    accessControlPolicyReferenceLists?: pulumi.Input<pulumi.Input<inputs.UserAccessControlPolicyReferenceList>[]>;
    /**
     * The version of the API.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * - (Optional) Categories for the Access Control Policy.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.UserCategory>[]>;
    /**
     * - (Optional) The directory service user configuration. See below for more information.
     */
    directoryServiceUser?: pulumi.Input<inputs.UserDirectoryServiceUser>;
    /**
     * - The display name of the user (common name) provided by the directory service.
     */
    displayName?: pulumi.Input<string>;
    /**
     * - (Optional) (Optional) The identity provider user configuration. See below for more information.
     */
    identityProviderUser?: pulumi.Input<inputs.UserIdentityProviderUser>;
    /**
     * - The vm kind metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - the name(Optional).
     */
    name?: pulumi.Input<string>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - A list of projects the user is part of. See #reference for more details.
     */
    projectReferenceLists?: pulumi.Input<pulumi.Input<inputs.UserProjectReferenceList>[]>;
    /**
     * - The state of the entity.
     */
    state?: pulumi.Input<string>;
    /**
     * - The name of the user.
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * - (Optional) Categories for the Access Control Policy.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.UserCategory>[]>;
    /**
     * - (Optional) The directory service user configuration. See below for more information.
     */
    directoryServiceUser?: pulumi.Input<inputs.UserDirectoryServiceUser>;
    /**
     * - (Optional) (Optional) The identity provider user configuration. See below for more information.
     */
    identityProviderUser?: pulumi.Input<inputs.UserIdentityProviderUser>;
    /**
     * - (Optional) The reference to a user.
     */
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - (Optional) The reference to a project.
     */
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
