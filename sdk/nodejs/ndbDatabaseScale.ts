// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to scale the database instance based on the input parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const scale = new nutanix.NdbDatabaseScale("scale", {
 *     applicationType: "{{ Application Type }}",
 *     dataStorageSize: 1,
 *     databaseUuid: "{{ database_id }}",
 * });
 * ```
 */
export class NdbDatabaseScale extends pulumi.CustomResource {
    /**
     * Get an existing NdbDatabaseScale resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbDatabaseScaleState, opts?: pulumi.CustomResourceOptions): NdbDatabaseScale {
        return new NdbDatabaseScale(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbDatabaseScale:NdbDatabaseScale';

    /**
     * Returns true if the given object is an instance of NdbDatabaseScale.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbDatabaseScale {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbDatabaseScale.__pulumiType;
    }

    /**
     * type of instance. eg: postgres_database
     */
    declare public readonly applicationType: pulumi.Output<string>;
    /**
     * whether instance is cloned or not
     */
    declare public /*out*/ readonly clone: pulumi.Output<boolean>;
    /**
     * data area (in GiB) to be added to the existing database.
     */
    declare public readonly dataStorageSize: pulumi.Output<number>;
    /**
     * database cluster type
     */
    declare public /*out*/ readonly databaseClusterType: pulumi.Output<string>;
    declare public /*out*/ readonly databaseInstanceId: pulumi.Output<string>;
    /**
     * name of database
     */
    declare public /*out*/ readonly databaseName: pulumi.Output<string>;
    /**
     * database nodes associated with database instance
     */
    declare public /*out*/ readonly databaseNodes: pulumi.Output<outputs.NdbDatabaseScaleDatabaseNode[]>;
    /**
     * Database id
     */
    declare public readonly databaseUuid: pulumi.Output<string>;
    /**
     * type of database
     */
    declare public /*out*/ readonly databasetype: pulumi.Output<string>;
    /**
     * date created for db instance
     */
    declare public /*out*/ readonly dateCreated: pulumi.Output<string>;
    /**
     * date modified for instance
     */
    declare public /*out*/ readonly dateModified: pulumi.Output<string>;
    /**
     * dbserver logical cluster
     */
    declare public /*out*/ readonly dbserverLogicalCluster: pulumi.Output<{[key: string]: string}>;
    /**
     * dbserver logical cluster id
     */
    declare public /*out*/ readonly dbserverLogicalClusterId: pulumi.Output<string>;
    /**
     * description of database instance
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * info of instance
     */
    declare public /*out*/ readonly infos: pulumi.Output<outputs.NdbDatabaseScaleInfo[]>;
    /**
     * LCM config of instance
     */
    declare public /*out*/ readonly lcmConfigs: pulumi.Output<outputs.NdbDatabaseScaleLcmConfig[]>;
    /**
     * linked databases within database instance
     */
    declare public /*out*/ readonly linkedDatabases: pulumi.Output<outputs.NdbDatabaseScaleLinkedDatabase[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    declare public /*out*/ readonly metric: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of database instance
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * parent database id
     */
    declare public /*out*/ readonly parentDatabaseId: pulumi.Output<string>;
    declare public /*out*/ readonly parentSourceDatabaseId: pulumi.Output<string>;
    /**
     * post script command
     */
    declare public readonly postScriptCmd: pulumi.Output<string | undefined>;
    /**
     * pre script command
     */
    declare public readonly preScriptCmd: pulumi.Output<string | undefined>;
    /**
     * properties of database created
     */
    declare public /*out*/ readonly properties: pulumi.Output<outputs.NdbDatabaseScaleProperty[]>;
    /**
     * scale count helps to scale the same instance with same config
     */
    declare public readonly scaleCount: pulumi.Output<number | undefined>;
    /**
     * status of instance
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    declare public readonly tags: pulumi.Output<outputs.NdbDatabaseScaleTag[]>;
    /**
     * time machine id of instance
     */
    declare public /*out*/ readonly timeMachineId: pulumi.Output<string>;
    /**
     * Time Machine details of instance
     */
    declare public /*out*/ readonly timeMachines: pulumi.Output<outputs.NdbDatabaseScaleTimeMachine[]>;
    /**
     * timezone on which instance is created xw
     */
    declare public /*out*/ readonly timeZone: pulumi.Output<string>;
    /**
     * type of database
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a NdbDatabaseScale resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbDatabaseScaleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbDatabaseScaleArgs | NdbDatabaseScaleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbDatabaseScaleState | undefined;
            resourceInputs["applicationType"] = state?.applicationType;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["dataStorageSize"] = state?.dataStorageSize;
            resourceInputs["databaseClusterType"] = state?.databaseClusterType;
            resourceInputs["databaseInstanceId"] = state?.databaseInstanceId;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["databaseNodes"] = state?.databaseNodes;
            resourceInputs["databaseUuid"] = state?.databaseUuid;
            resourceInputs["databasetype"] = state?.databasetype;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateModified"] = state?.dateModified;
            resourceInputs["dbserverLogicalCluster"] = state?.dbserverLogicalCluster;
            resourceInputs["dbserverLogicalClusterId"] = state?.dbserverLogicalClusterId;
            resourceInputs["description"] = state?.description;
            resourceInputs["infos"] = state?.infos;
            resourceInputs["lcmConfigs"] = state?.lcmConfigs;
            resourceInputs["linkedDatabases"] = state?.linkedDatabases;
            resourceInputs["metric"] = state?.metric;
            resourceInputs["name"] = state?.name;
            resourceInputs["parentDatabaseId"] = state?.parentDatabaseId;
            resourceInputs["parentSourceDatabaseId"] = state?.parentSourceDatabaseId;
            resourceInputs["postScriptCmd"] = state?.postScriptCmd;
            resourceInputs["preScriptCmd"] = state?.preScriptCmd;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["scaleCount"] = state?.scaleCount;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeMachineId"] = state?.timeMachineId;
            resourceInputs["timeMachines"] = state?.timeMachines;
            resourceInputs["timeZone"] = state?.timeZone;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as NdbDatabaseScaleArgs | undefined;
            if (args?.applicationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationType'");
            }
            if (args?.dataStorageSize === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataStorageSize'");
            }
            if (args?.databaseUuid === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseUuid'");
            }
            resourceInputs["applicationType"] = args?.applicationType;
            resourceInputs["dataStorageSize"] = args?.dataStorageSize;
            resourceInputs["databaseUuid"] = args?.databaseUuid;
            resourceInputs["postScriptCmd"] = args?.postScriptCmd;
            resourceInputs["preScriptCmd"] = args?.preScriptCmd;
            resourceInputs["scaleCount"] = args?.scaleCount;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["databaseClusterType"] = undefined /*out*/;
            resourceInputs["databaseInstanceId"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseNodes"] = undefined /*out*/;
            resourceInputs["databasetype"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverLogicalCluster"] = undefined /*out*/;
            resourceInputs["dbserverLogicalClusterId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["lcmConfigs"] = undefined /*out*/;
            resourceInputs["linkedDatabases"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["parentSourceDatabaseId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeMachineId"] = undefined /*out*/;
            resourceInputs["timeMachines"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NdbDatabaseScale.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NdbDatabaseScale resources.
 */
export interface NdbDatabaseScaleState {
    /**
     * type of instance. eg: postgres_database
     */
    applicationType?: pulumi.Input<string>;
    /**
     * whether instance is cloned or not
     */
    clone?: pulumi.Input<boolean>;
    /**
     * data area (in GiB) to be added to the existing database.
     */
    dataStorageSize?: pulumi.Input<number>;
    /**
     * database cluster type
     */
    databaseClusterType?: pulumi.Input<string>;
    databaseInstanceId?: pulumi.Input<string>;
    /**
     * name of database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * database nodes associated with database instance
     */
    databaseNodes?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNode>[]>;
    /**
     * Database id
     */
    databaseUuid?: pulumi.Input<string>;
    /**
     * type of database
     */
    databasetype?: pulumi.Input<string>;
    /**
     * date created for db instance
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * date modified for instance
     */
    dateModified?: pulumi.Input<string>;
    /**
     * dbserver logical cluster
     */
    dbserverLogicalCluster?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * dbserver logical cluster id
     */
    dbserverLogicalClusterId?: pulumi.Input<string>;
    /**
     * description of database instance
     */
    description?: pulumi.Input<string>;
    /**
     * info of instance
     */
    infos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfo>[]>;
    /**
     * LCM config of instance
     */
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfig>[]>;
    /**
     * linked databases within database instance
     */
    linkedDatabases?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLinkedDatabase>[]>;
    /**
     * Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
     */
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of database instance
     */
    name?: pulumi.Input<string>;
    /**
     * parent database id
     */
    parentDatabaseId?: pulumi.Input<string>;
    parentSourceDatabaseId?: pulumi.Input<string>;
    /**
     * post script command
     */
    postScriptCmd?: pulumi.Input<string>;
    /**
     * pre script command
     */
    preScriptCmd?: pulumi.Input<string>;
    /**
     * properties of database created
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleProperty>[]>;
    /**
     * scale count helps to scale the same instance with same config
     */
    scaleCount?: pulumi.Input<number>;
    /**
     * status of instance
     */
    status?: pulumi.Input<string>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTag>[]>;
    /**
     * time machine id of instance
     */
    timeMachineId?: pulumi.Input<string>;
    /**
     * Time Machine details of instance
     */
    timeMachines?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachine>[]>;
    /**
     * timezone on which instance is created xw
     */
    timeZone?: pulumi.Input<string>;
    /**
     * type of database
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbDatabaseScale resource.
 */
export interface NdbDatabaseScaleArgs {
    /**
     * type of instance. eg: postgres_database
     */
    applicationType: pulumi.Input<string>;
    /**
     * data area (in GiB) to be added to the existing database.
     */
    dataStorageSize: pulumi.Input<number>;
    /**
     * Database id
     */
    databaseUuid: pulumi.Input<string>;
    /**
     * post script command
     */
    postScriptCmd?: pulumi.Input<string>;
    /**
     * pre script command
     */
    preScriptCmd?: pulumi.Input<string>;
    /**
     * scale count helps to scale the same instance with same config
     */
    scaleCount?: pulumi.Input<number>;
    /**
     * allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTag>[]>;
}
