// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Create a new recovery point.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * // create RP with Vm Rp
 * const rp_example = new nutanix.RecoveryPointsV2("rp-example", {
 *     expirationTime: "2024-09-17T09:20:42Z",
 *     recoveryPointType: "APPLICATION_CONSISTENT",
 *     status: "COMPLETE",
 *     vmRecoveryPoints: [{
 *         vmExtId: "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
 *     }],
 * });
 * ```
 */
export class RecoveryPointsV2 extends pulumi.CustomResource {
    /**
     * Get an existing RecoveryPointsV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecoveryPointsV2State, opts?: pulumi.CustomResourceOptions): RecoveryPointsV2 {
        return new RecoveryPointsV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/recoveryPointsV2:RecoveryPointsV2';

    /**
     * Returns true if the given object is an instance of RecoveryPointsV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecoveryPointsV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecoveryPointsV2.__pulumiType;
    }

    /**
     * The UTC date and time in ISO-8601 format when the Recovery point is created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
     */
    public readonly expirationTime!: pulumi.Output<string>;
    /**
     * recovery point UUID
     */
    public /*out*/ readonly extId!: pulumi.Output<string>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.RecoveryPointsV2Link[]>;
    /**
     * Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
     */
    public /*out*/ readonly locationAgnosticId!: pulumi.Output<string>;
    /**
     * List of location references where the VM or volume group recovery point are a part of the specified recovery point.
     */
    public /*out*/ readonly locationReferences!: pulumi.Output<outputs.RecoveryPointsV2LocationReference[]>;
    /**
     * -(Optional) The name of the Recovery point.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
     */
    public /*out*/ readonly ownerExtId!: pulumi.Output<string>;
    /**
     * -(Optional) Type of the Recovery point.
     * * supported values:
     * * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
     * * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
     */
    public readonly recoveryPointType!: pulumi.Output<string>;
    /**
     * -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
     * * supported values:
     * * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    public readonly vmRecoveryPoints!: pulumi.Output<outputs.RecoveryPointsV2VmRecoveryPoint[] | undefined>;
    /**
     * -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    public readonly volumeGroupRecoveryPoints!: pulumi.Output<outputs.RecoveryPointsV2VolumeGroupRecoveryPoint[]>;

    /**
     * Create a RecoveryPointsV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RecoveryPointsV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecoveryPointsV2Args | RecoveryPointsV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecoveryPointsV2State | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["extId"] = state ? state.extId : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["locationAgnosticId"] = state ? state.locationAgnosticId : undefined;
            resourceInputs["locationReferences"] = state ? state.locationReferences : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerExtId"] = state ? state.ownerExtId : undefined;
            resourceInputs["recoveryPointType"] = state ? state.recoveryPointType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vmRecoveryPoints"] = state ? state.vmRecoveryPoints : undefined;
            resourceInputs["volumeGroupRecoveryPoints"] = state ? state.volumeGroupRecoveryPoints : undefined;
        } else {
            const args = argsOrState as RecoveryPointsV2Args | undefined;
            resourceInputs["expirationTime"] = args ? args.expirationTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryPointType"] = args ? args.recoveryPointType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vmRecoveryPoints"] = args ? args.vmRecoveryPoints : undefined;
            resourceInputs["volumeGroupRecoveryPoints"] = args ? args.volumeGroupRecoveryPoints : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["locationAgnosticId"] = undefined /*out*/;
            resourceInputs["locationReferences"] = undefined /*out*/;
            resourceInputs["ownerExtId"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecoveryPointsV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RecoveryPointsV2 resources.
 */
export interface RecoveryPointsV2State {
    /**
     * The UTC date and time in ISO-8601 format when the Recovery point is created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * recovery point UUID
     */
    extId?: pulumi.Input<string>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.RecoveryPointsV2Link>[]>;
    /**
     * Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
     */
    locationAgnosticId?: pulumi.Input<string>;
    /**
     * List of location references where the VM or volume group recovery point are a part of the specified recovery point.
     */
    locationReferences?: pulumi.Input<pulumi.Input<inputs.RecoveryPointsV2LocationReference>[]>;
    /**
     * -(Optional) The name of the Recovery point.
     */
    name?: pulumi.Input<string>;
    /**
     * A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
     */
    ownerExtId?: pulumi.Input<string>;
    /**
     * -(Optional) Type of the Recovery point.
     * * supported values:
     * * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
     * * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
     */
    recoveryPointType?: pulumi.Input<string>;
    /**
     * -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
     * * supported values:
     * * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
     */
    status?: pulumi.Input<string>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    tenantId?: pulumi.Input<string>;
    /**
     * -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    vmRecoveryPoints?: pulumi.Input<pulumi.Input<inputs.RecoveryPointsV2VmRecoveryPoint>[]>;
    /**
     * -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    volumeGroupRecoveryPoints?: pulumi.Input<pulumi.Input<inputs.RecoveryPointsV2VolumeGroupRecoveryPoint>[]>;
}

/**
 * The set of arguments for constructing a RecoveryPointsV2 resource.
 */
export interface RecoveryPointsV2Args {
    /**
     * -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * -(Optional) The name of the Recovery point.
     */
    name?: pulumi.Input<string>;
    /**
     * -(Optional) Type of the Recovery point.
     * * supported values:
     * * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
     * * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
     */
    recoveryPointType?: pulumi.Input<string>;
    /**
     * -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
     * * supported values:
     * * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
     */
    status?: pulumi.Input<string>;
    /**
     * -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    vmRecoveryPoints?: pulumi.Input<pulumi.Input<inputs.RecoveryPointsV2VmRecoveryPoint>[]>;
    /**
     * -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
     */
    volumeGroupRecoveryPoints?: pulumi.Input<pulumi.Input<inputs.RecoveryPointsV2VolumeGroupRecoveryPoint>[]>;
}
