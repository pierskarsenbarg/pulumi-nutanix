// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Create a Network Security Policy
 *
 * ## Example
 */
export class NetworkSecurityPolicyV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSecurityPolicyV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSecurityPolicyV2State, opts?: pulumi.CustomResourceOptions): NetworkSecurityPolicyV2 {
        return new NetworkSecurityPolicyV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/networkSecurityPolicyV2:NetworkSecurityPolicyV2';

    /**
     * Returns true if the given object is an instance of NetworkSecurityPolicyV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkSecurityPolicyV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSecurityPolicyV2.__pulumiType;
    }

    /**
     * created by.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * creation time of NSP
     */
    declare public /*out*/ readonly creationTime: pulumi.Output<string>;
    /**
     * A user defined annotation for a policy.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A globally unique identifier of an instance that is suitable for external consumption.
     */
    declare public /*out*/ readonly extId: pulumi.Output<string>;
    /**
     * If Hitlog is enabled.
     */
    declare public readonly isHitlogEnabled: pulumi.Output<boolean | undefined>;
    /**
     * If Ipv6 Traffic is allowed.
     */
    declare public readonly isIpv6TrafficAllowed: pulumi.Output<boolean | undefined>;
    /**
     * Is system defined NSP
     */
    declare public /*out*/ readonly isSystemDefined: pulumi.Output<boolean>;
    /**
     * last updated time
     */
    declare public /*out*/ readonly lastUpdateTime: pulumi.Output<string>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    declare public /*out*/ readonly links: pulumi.Output<outputs.NetworkSecurityPolicyV2Link[]>;
    /**
     * Name of the Flow Network Security Policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
     */
    declare public readonly rules: pulumi.Output<outputs.NetworkSecurityPolicyV2Rule[] | undefined>;
    /**
     * Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * Uuids of the secured groups in the NSP.
     */
    declare public /*out*/ readonly securedGroups: pulumi.Output<string[]>;
    /**
     * Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
     */
    declare public readonly state: pulumi.Output<string | undefined>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    declare public /*out*/ readonly tenantId: pulumi.Output<string>;
    /**
     * Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
     */
    declare public readonly vpcReferences: pulumi.Output<string[] | undefined>;

    /**
     * Create a NetworkSecurityPolicyV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkSecurityPolicyV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkSecurityPolicyV2Args | NetworkSecurityPolicyV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkSecurityPolicyV2State | undefined;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["creationTime"] = state?.creationTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["extId"] = state?.extId;
            resourceInputs["isHitlogEnabled"] = state?.isHitlogEnabled;
            resourceInputs["isIpv6TrafficAllowed"] = state?.isIpv6TrafficAllowed;
            resourceInputs["isSystemDefined"] = state?.isSystemDefined;
            resourceInputs["lastUpdateTime"] = state?.lastUpdateTime;
            resourceInputs["links"] = state?.links;
            resourceInputs["name"] = state?.name;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["securedGroups"] = state?.securedGroups;
            resourceInputs["state"] = state?.state;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["type"] = state?.type;
            resourceInputs["vpcReferences"] = state?.vpcReferences;
        } else {
            const args = argsOrState as NetworkSecurityPolicyV2Args | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["isHitlogEnabled"] = args?.isHitlogEnabled;
            resourceInputs["isIpv6TrafficAllowed"] = args?.isIpv6TrafficAllowed;
            resourceInputs["name"] = args?.name;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["state"] = args?.state;
            resourceInputs["type"] = args?.type;
            resourceInputs["vpcReferences"] = args?.vpcReferences;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["extId"] = undefined /*out*/;
            resourceInputs["isSystemDefined"] = undefined /*out*/;
            resourceInputs["lastUpdateTime"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["securedGroups"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSecurityPolicyV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkSecurityPolicyV2 resources.
 */
export interface NetworkSecurityPolicyV2State {
    /**
     * created by.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * creation time of NSP
     */
    creationTime?: pulumi.Input<string>;
    /**
     * A user defined annotation for a policy.
     */
    description?: pulumi.Input<string>;
    /**
     * A globally unique identifier of an instance that is suitable for external consumption.
     */
    extId?: pulumi.Input<string>;
    /**
     * If Hitlog is enabled.
     */
    isHitlogEnabled?: pulumi.Input<boolean>;
    /**
     * If Ipv6 Traffic is allowed.
     */
    isIpv6TrafficAllowed?: pulumi.Input<boolean>;
    /**
     * Is system defined NSP
     */
    isSystemDefined?: pulumi.Input<boolean>;
    /**
     * last updated time
     */
    lastUpdateTime?: pulumi.Input<string>;
    /**
     * A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityPolicyV2Link>[]>;
    /**
     * Name of the Flow Network Security Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityPolicyV2Rule>[]>;
    /**
     * Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
     */
    scope?: pulumi.Input<string>;
    /**
     * Uuids of the secured groups in the NSP.
     */
    securedGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
     */
    state?: pulumi.Input<string>;
    /**
     * A globally unique identifier that represents the tenant that owns this entity
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
     */
    type?: pulumi.Input<string>;
    /**
     * A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
     */
    vpcReferences?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NetworkSecurityPolicyV2 resource.
 */
export interface NetworkSecurityPolicyV2Args {
    /**
     * A user defined annotation for a policy.
     */
    description?: pulumi.Input<string>;
    /**
     * If Hitlog is enabled.
     */
    isHitlogEnabled?: pulumi.Input<boolean>;
    /**
     * If Ipv6 Traffic is allowed.
     */
    isIpv6TrafficAllowed?: pulumi.Input<boolean>;
    /**
     * Name of the Flow Network Security Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityPolicyV2Rule>[]>;
    /**
     * Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
     */
    scope?: pulumi.Input<string>;
    /**
     * Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it. Acceptable values are "SAVE", "MONITOR", "ENFORCE".
     */
    state?: pulumi.Input<string>;
    /**
     * Defines the type of rules that can be used in a policy. Acceptable values are "QUARANTINE", "ISOLATION", "APPLICATION".
     */
    type: pulumi.Input<string>;
    /**
     * A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
     */
    vpcReferences?: pulumi.Input<pulumi.Input<string>[]>;
}
