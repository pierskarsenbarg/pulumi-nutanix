// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get LCM configuration.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const lcm_configuration = nutanix.getLcmConfigV2({});
 * const lcm_configuration_cluster = nutanix.getLcmConfigV2({
 *     xClusterId: "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
 * });
 * ```
 */
export function getLcmConfigV2(args?: GetLcmConfigV2Args, opts?: pulumi.InvokeOptions): Promise<GetLcmConfigV2Result> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getLcmConfigV2:getLcmConfigV2", {
        "xClusterId": args.xClusterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getLcmConfigV2.
 */
export interface GetLcmConfigV2Args {
    /**
     * Cluster uuid on which the resource is present or operation is being performed.
     */
    xClusterId?: string;
}

/**
 * A collection of values returned by getLcmConfigV2.
 */
export interface GetLcmConfigV2Result {
    /**
     * The scheduled time in "%H:%M" 24-hour format of the next inventory execution. Used when autoInventoryEnabled is set to True. The default schedule time is 03:00(AM).
     */
    readonly autoInventorySchedule: string;
    /**
     * This field indicates whether LCM framework on the cluster is running in connected-site mode or darksite mode. Values are :
     * - `CONNECTED_SITE`: In connected-site, LCM on the cluster has internet connectivity to reach configured portal for downloading LCM modules/bundles etc.
     * - `DARKSITE_DIRECT_UPLOAD`: LCM on the cluster does not have external connectivity and will have a facility to upload darksite bundles through LCM.
     * - `DARKSITE_WEB_SERVER`: LCM on the cluster does not have external connectivity and will have a connection to darksite webserver maintained by the customer.
     */
    readonly connectivityType: string;
    /**
     * List of entities for which One-Click upgrades are not available.
     */
    readonly deprecatedSoftwareEntities: string[];
    /**
     * User friendly display version of LCM installed on the cluster.
     */
    readonly displayVersion: string;
    /**
     * A globally unique identifier of an instance that is suitable for external consumption.
     */
    readonly extId: string;
    /**
     * Indicates if LCM is enabled to auto-upgrade products. The default value is False.
     */
    readonly hasModuleAutoUpgradeEnabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates if the auto inventory operation is enabled. The default value is set to False.
     */
    readonly isAutoInventoryEnabled: boolean;
    /**
     * Indicates if the bundle is uploaded or not.
     */
    readonly isFrameworkBundleUploaded: boolean;
    /**
     * Indicates if the LCM URL has HTTPS enabled. The default value is True.
     */
    readonly isHttpsEnabled: boolean;
    /**
     * - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
     */
    readonly links: outputs.GetLcmConfigV2Link[];
    /**
     * List of entities for which One-Click upgrades are supported.
     */
    readonly supportedSoftwareEntities: string[];
    /**
     * - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
     */
    readonly tenantId: string;
    /**
     * URL of the LCM repository.
     */
    readonly url: string;
    /**
     * LCM version installed on the cluster.
     */
    readonly version: string;
    readonly xClusterId?: string;
}
/**
 * Get LCM configuration.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pulumi/nutanix";
 *
 * const lcm_configuration = nutanix.getLcmConfigV2({});
 * const lcm_configuration_cluster = nutanix.getLcmConfigV2({
 *     xClusterId: "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
 * });
 * ```
 */
export function getLcmConfigV2Output(args?: GetLcmConfigV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLcmConfigV2Result> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nutanix:index/getLcmConfigV2:getLcmConfigV2", {
        "xClusterId": args.xClusterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getLcmConfigV2.
 */
export interface GetLcmConfigV2OutputArgs {
    /**
     * Cluster uuid on which the resource is present or operation is being performed.
     */
    xClusterId?: pulumi.Input<string>;
}
