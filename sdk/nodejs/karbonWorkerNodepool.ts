// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource to add/remove worker nodepool in an existing Nutanix Kubernetes Engine (NKE).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const kworkerNp = new nutanix.KarbonWorkerNodepool("kworkerNp", {
 *     ahvConfig: {
 *         cpu: 4,
 *         diskMib: 122880,
 *         memoryMib: 8192,
 *         networkUuid: "61213511-6383-4a38-9ac8-4a552c0e5865",
 *     },
 *     clusterName: "karbon",
 *     numInstances: 1,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nutanix from "@pierskarsenbarg/nutanix";
 *
 * const kworkerNp = new nutanix.KarbonWorkerNodepool("kworkerNp", {
 *     ahvConfig: {
 *         cpu: 4,
 *         diskMib: 122880,
 *         memoryMib: 8192,
 *         networkUuid: "61213511-6383-4a38-9ac8-4a552c0e5865",
 *     },
 *     clusterName: "karbon",
 *     labels: {
 *         k1: "v1",
 *         k2: "v2",
 *     },
 *     numInstances: 1,
 * });
 * ```
 */
export class KarbonWorkerNodepool extends pulumi.CustomResource {
    /**
     * Get an existing KarbonWorkerNodepool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KarbonWorkerNodepoolState, opts?: pulumi.CustomResourceOptions): KarbonWorkerNodepool {
        return new KarbonWorkerNodepool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool';

    /**
     * Returns true if the given object is an instance of KarbonWorkerNodepool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KarbonWorkerNodepool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KarbonWorkerNodepool.__pulumiType;
    }

    /**
     * VM configuration in AHV.
     */
    declare public readonly ahvConfig: pulumi.Output<outputs.KarbonWorkerNodepoolAhvConfig>;
    /**
     * Kubernetes cluster name
     */
    declare public readonly clusterName: pulumi.Output<string>;
    /**
     * labels of node
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * unique worker nodepool name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The version of the node OS image
     */
    declare public readonly nodeOsVersion: pulumi.Output<string>;
    /**
     * List of node details of pool.
     */
    declare public /*out*/ readonly nodes: pulumi.Output<outputs.KarbonWorkerNodepoolNode[]>;
    /**
     * number of node instances
     */
    declare public readonly numInstances: pulumi.Output<number>;

    /**
     * Create a KarbonWorkerNodepool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KarbonWorkerNodepoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KarbonWorkerNodepoolArgs | KarbonWorkerNodepoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KarbonWorkerNodepoolState | undefined;
            resourceInputs["ahvConfig"] = state?.ahvConfig;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeOsVersion"] = state?.nodeOsVersion;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["numInstances"] = state?.numInstances;
        } else {
            const args = argsOrState as KarbonWorkerNodepoolArgs | undefined;
            if (args?.clusterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (args?.numInstances === undefined && !opts.urn) {
                throw new Error("Missing required property 'numInstances'");
            }
            resourceInputs["ahvConfig"] = args?.ahvConfig;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeOsVersion"] = args?.nodeOsVersion;
            resourceInputs["numInstances"] = args?.numInstances;
            resourceInputs["nodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KarbonWorkerNodepool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KarbonWorkerNodepool resources.
 */
export interface KarbonWorkerNodepoolState {
    /**
     * VM configuration in AHV.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonWorkerNodepoolAhvConfig>;
    /**
     * Kubernetes cluster name
     */
    clusterName?: pulumi.Input<string>;
    /**
     * labels of node
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * unique worker nodepool name
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the node OS image
     */
    nodeOsVersion?: pulumi.Input<string>;
    /**
     * List of node details of pool.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonWorkerNodepoolNode>[]>;
    /**
     * number of node instances
     */
    numInstances?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KarbonWorkerNodepool resource.
 */
export interface KarbonWorkerNodepoolArgs {
    /**
     * VM configuration in AHV.
     */
    ahvConfig?: pulumi.Input<inputs.KarbonWorkerNodepoolAhvConfig>;
    /**
     * Kubernetes cluster name
     */
    clusterName: pulumi.Input<string>;
    /**
     * labels of node
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * unique worker nodepool name
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the node OS image
     */
    nodeOsVersion?: pulumi.Input<string>;
    /**
     * number of node instances
     */
    numInstances: pulumi.Input<number>;
}
