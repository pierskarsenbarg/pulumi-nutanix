// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KarbonWorkerNodepool extends pulumi.CustomResource {
    /**
     * Get an existing KarbonWorkerNodepool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KarbonWorkerNodepoolState, opts?: pulumi.CustomResourceOptions): KarbonWorkerNodepool {
        return new KarbonWorkerNodepool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool';

    /**
     * Returns true if the given object is an instance of KarbonWorkerNodepool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KarbonWorkerNodepool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KarbonWorkerNodepool.__pulumiType;
    }

    public readonly ahvConfig!: pulumi.Output<outputs.KarbonWorkerNodepoolAhvConfig>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeOsVersion!: pulumi.Output<string>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.KarbonWorkerNodepoolNode[]>;
    public readonly numInstances!: pulumi.Output<number>;

    /**
     * Create a KarbonWorkerNodepool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KarbonWorkerNodepoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KarbonWorkerNodepoolArgs | KarbonWorkerNodepoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KarbonWorkerNodepoolState | undefined;
            resourceInputs["ahvConfig"] = state ? state.ahvConfig : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeOsVersion"] = state ? state.nodeOsVersion : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["numInstances"] = state ? state.numInstances : undefined;
        } else {
            const args = argsOrState as KarbonWorkerNodepoolArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.numInstances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numInstances'");
            }
            resourceInputs["ahvConfig"] = args ? args.ahvConfig : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeOsVersion"] = args ? args.nodeOsVersion : undefined;
            resourceInputs["numInstances"] = args ? args.numInstances : undefined;
            resourceInputs["nodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KarbonWorkerNodepool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KarbonWorkerNodepool resources.
 */
export interface KarbonWorkerNodepoolState {
    ahvConfig?: pulumi.Input<inputs.KarbonWorkerNodepoolAhvConfig>;
    clusterName?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<string>;
    nodeOsVersion?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonWorkerNodepoolNode>[]>;
    numInstances?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KarbonWorkerNodepool resource.
 */
export interface KarbonWorkerNodepoolArgs {
    ahvConfig?: pulumi.Input<inputs.KarbonWorkerNodepoolAhvConfig>;
    clusterName: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<string>;
    nodeOsVersion?: pulumi.Input<string>;
    numInstances: pulumi.Input<number>;
}
