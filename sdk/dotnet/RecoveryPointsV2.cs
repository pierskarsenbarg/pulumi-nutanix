// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Create a new recovery point.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // create RP with Vm Rp
    ///     var rp_example = new Nutanix.RecoveryPointsV2("rp-example", new()
    ///     {
    ///         ExpirationTime = "2024-09-17T09:20:42Z",
    ///         RecoveryPointType = "APPLICATION_CONSISTENT",
    ///         Status = "COMPLETE",
    ///         VmRecoveryPoints = new[]
    ///         {
    ///             new Nutanix.Inputs.RecoveryPointsV2VmRecoveryPointArgs
    ///             {
    ///                 VmExtId = "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/recoveryPointsV2:RecoveryPointsV2")]
    public partial class RecoveryPointsV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The UTC date and time in ISO-8601 format when the Recovery point is created.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
        /// </summary>
        [Output("expirationTime")]
        public Output<string> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// recovery point UUID
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.RecoveryPointsV2Link>> Links { get; private set; } = null!;

        /// <summary>
        /// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
        /// </summary>
        [Output("locationAgnosticId")]
        public Output<string> LocationAgnosticId { get; private set; } = null!;

        /// <summary>
        /// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
        /// </summary>
        [Output("locationReferences")]
        public Output<ImmutableArray<Outputs.RecoveryPointsV2LocationReference>> LocationReferences { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The name of the Recovery point.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
        /// </summary>
        [Output("ownerExtId")]
        public Output<string> OwnerExtId { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Type of the Recovery point.
        /// * supported values:
        /// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
        /// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
        /// </summary>
        [Output("recoveryPointType")]
        public Output<string> RecoveryPointType { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
        /// * supported values:
        /// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
        /// </summary>
        [Output("vmRecoveryPoints")]
        public Output<ImmutableArray<Outputs.RecoveryPointsV2VmRecoveryPoint>> VmRecoveryPoints { get; private set; } = null!;

        /// <summary>
        /// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
        /// </summary>
        [Output("volumeGroupRecoveryPoints")]
        public Output<ImmutableArray<Outputs.RecoveryPointsV2VolumeGroupRecoveryPoint>> VolumeGroupRecoveryPoints { get; private set; } = null!;


        /// <summary>
        /// Create a RecoveryPointsV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecoveryPointsV2(string name, RecoveryPointsV2Args? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/recoveryPointsV2:RecoveryPointsV2", name, args ?? new RecoveryPointsV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private RecoveryPointsV2(string name, Input<string> id, RecoveryPointsV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/recoveryPointsV2:RecoveryPointsV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecoveryPointsV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecoveryPointsV2 Get(string name, Input<string> id, RecoveryPointsV2State? state = null, CustomResourceOptions? options = null)
        {
            return new RecoveryPointsV2(name, id, state, options);
        }
    }

    public sealed class RecoveryPointsV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// -(Optional) The name of the Recovery point.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -(Optional) Type of the Recovery point.
        /// * supported values:
        /// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
        /// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
        /// </summary>
        [Input("recoveryPointType")]
        public Input<string>? RecoveryPointType { get; set; }

        /// <summary>
        /// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
        /// * supported values:
        /// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("vmRecoveryPoints")]
        private InputList<Inputs.RecoveryPointsV2VmRecoveryPointArgs>? _vmRecoveryPoints;

        /// <summary>
        /// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2VmRecoveryPointArgs> VmRecoveryPoints
        {
            get => _vmRecoveryPoints ?? (_vmRecoveryPoints = new InputList<Inputs.RecoveryPointsV2VmRecoveryPointArgs>());
            set => _vmRecoveryPoints = value;
        }

        [Input("volumeGroupRecoveryPoints")]
        private InputList<Inputs.RecoveryPointsV2VolumeGroupRecoveryPointArgs>? _volumeGroupRecoveryPoints;

        /// <summary>
        /// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2VolumeGroupRecoveryPointArgs> VolumeGroupRecoveryPoints
        {
            get => _volumeGroupRecoveryPoints ?? (_volumeGroupRecoveryPoints = new InputList<Inputs.RecoveryPointsV2VolumeGroupRecoveryPointArgs>());
            set => _volumeGroupRecoveryPoints = value;
        }

        public RecoveryPointsV2Args()
        {
        }
        public static new RecoveryPointsV2Args Empty => new RecoveryPointsV2Args();
    }

    public sealed class RecoveryPointsV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UTC date and time in ISO-8601 format when the Recovery point is created.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// -(Optional) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// recovery point UUID
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("links")]
        private InputList<Inputs.RecoveryPointsV2LinkGetArgs>? _links;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.RecoveryPointsV2LinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
        /// </summary>
        [Input("locationAgnosticId")]
        public Input<string>? LocationAgnosticId { get; set; }

        [Input("locationReferences")]
        private InputList<Inputs.RecoveryPointsV2LocationReferenceGetArgs>? _locationReferences;

        /// <summary>
        /// List of location references where the VM or volume group recovery point are a part of the specified recovery point.
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2LocationReferenceGetArgs> LocationReferences
        {
            get => _locationReferences ?? (_locationReferences = new InputList<Inputs.RecoveryPointsV2LocationReferenceGetArgs>());
            set => _locationReferences = value;
        }

        /// <summary>
        /// -(Optional) The name of the Recovery point.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A read only field inserted into recovery point at the time of recovery point creation, indicating the external identifier of the user who created this recovery point.
        /// </summary>
        [Input("ownerExtId")]
        public Input<string>? OwnerExtId { get; set; }

        /// <summary>
        /// -(Optional) Type of the Recovery point.
        /// * supported values:
        /// * `CRASH_CONSISTENT`: -  capture all the VM and application level details.
        /// * `APPLICATION_CONSISTENT`: -  stored in the memory and also the in-progress transaction details.
        /// </summary>
        [Input("recoveryPointType")]
        public Input<string>? RecoveryPointType { get; set; }

        /// <summary>
        /// -(Optional) The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
        /// * supported values:
        /// * `COMPLETE`: -  The Recovery point is in a complete state and ready to be consumed.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("vmRecoveryPoints")]
        private InputList<Inputs.RecoveryPointsV2VmRecoveryPointGetArgs>? _vmRecoveryPoints;

        /// <summary>
        /// -(Optional) List of VM recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2VmRecoveryPointGetArgs> VmRecoveryPoints
        {
            get => _vmRecoveryPoints ?? (_vmRecoveryPoints = new InputList<Inputs.RecoveryPointsV2VmRecoveryPointGetArgs>());
            set => _vmRecoveryPoints = value;
        }

        [Input("volumeGroupRecoveryPoints")]
        private InputList<Inputs.RecoveryPointsV2VolumeGroupRecoveryPointGetArgs>? _volumeGroupRecoveryPoints;

        /// <summary>
        /// -(Optional) List of volume group recovery point that are a part of the specified top-level recovery point. Note that a recovery point can contain a maximum number of 30 entities. These entities can be a combination of VM(s) and volume group(s).
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2VolumeGroupRecoveryPointGetArgs> VolumeGroupRecoveryPoints
        {
            get => _volumeGroupRecoveryPoints ?? (_volumeGroupRecoveryPoints = new InputList<Inputs.RecoveryPointsV2VolumeGroupRecoveryPointGetArgs>());
            set => _volumeGroupRecoveryPoints = value;
        }

        public RecoveryPointsV2State()
        {
        }
        public static new RecoveryPointsV2State Empty => new RecoveryPointsV2State();
    }
}
