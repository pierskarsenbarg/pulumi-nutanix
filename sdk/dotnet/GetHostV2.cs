// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetHostV2
    {
        /// <summary>
        /// Describes the statistics data of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var host = Nutanix.GetHostV2.Invoke(new()
        ///     {
        ///         ClusterExtId = "&lt;cluster uuid&gt;",
        ///         ExtId = "&lt;host uuid&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHostV2Result> InvokeAsync(GetHostV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHostV2Result>("nutanix:index/getHostV2:getHostV2", args ?? new GetHostV2Args(), options.WithDefaults());

        /// <summary>
        /// Describes the statistics data of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var host = Nutanix.GetHostV2.Invoke(new()
        ///     {
        ///         ClusterExtId = "&lt;cluster uuid&gt;",
        ///         ExtId = "&lt;host uuid&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHostV2Result> Invoke(GetHostV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHostV2Result>("nutanix:index/getHostV2:getHostV2", args ?? new GetHostV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes the statistics data of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var host = Nutanix.GetHostV2.Invoke(new()
        ///     {
        ///         ClusterExtId = "&lt;cluster uuid&gt;",
        ///         ExtId = "&lt;host uuid&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHostV2Result> Invoke(GetHostV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHostV2Result>("nutanix:index/getHostV2:getHostV2", args ?? new GetHostV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHostV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) cluster uuid
        /// </summary>
        [Input("clusterExtId", required: true)]
        public string ClusterExtId { get; set; } = null!;

        /// <summary>
        /// - (Required) host uuid
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetHostV2Args()
        {
        }
        public static new GetHostV2Args Empty => new GetHostV2Args();
    }

    public sealed class GetHostV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) cluster uuid
        /// </summary>
        [Input("clusterExtId", required: true)]
        public Input<string> ClusterExtId { get; set; } = null!;

        /// <summary>
        /// - (Required) host uuid
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetHostV2InvokeArgs()
        {
        }
        public static new GetHostV2InvokeArgs Empty => new GetHostV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetHostV2Result
    {
        /// <summary>
        /// - Rackable unit model name.
        /// </summary>
        public readonly string BlockModel;
        /// <summary>
        /// - Rackable unit serial name.
        /// </summary>
        public readonly string BlockSerial;
        /// <summary>
        /// - Boot time in secs.
        /// </summary>
        public readonly int BootTimeUsecs;
        public readonly string ClusterExtId;
        /// <summary>
        /// - Cluster reference for an entity.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostV2ClusterResult> Clusters;
        /// <summary>
        /// - Host entity with its attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostV2ControllerVmResult> ControllerVms;
        /// <summary>
        /// - CPU capacity in Hz.
        /// </summary>
        public readonly int CpuCapacityHz;
        /// <summary>
        /// - CPU frequency in Hz.
        /// </summary>
        public readonly int CpuFrequencyHz;
        /// <summary>
        /// - CPU model name.
        /// </summary>
        public readonly string CpuModel;
        /// <summary>
        /// - Default VHD container UUID.
        /// </summary>
        public readonly string DefaultVhdContainerUuid;
        /// <summary>
        /// - Default VHD location.
        /// </summary>
        public readonly string DefaultVhdLocation;
        /// <summary>
        /// - Default VM container UUID.
        /// </summary>
        public readonly string DefaultVmContainerUuid;
        /// <summary>
        /// - Default VM location.
        /// </summary>
        public readonly string DefaultVmLocation;
        /// <summary>
        /// - Disks attached to host.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostV2DiskResult> Disks;
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// - Failover cluster FQDN.
        /// </summary>
        public readonly string FailoverClusterFqdn;
        /// <summary>
        /// - Failover cluster node status.
        /// </summary>
        public readonly string FailoverClusterNodeStatus;
        /// <summary>
        /// - GPU driver version.
        /// </summary>
        public readonly string GpuDriverVersion;
        /// <summary>
        /// - GPU attached list.
        /// </summary>
        public readonly ImmutableArray<string> GpuLists;
        /// <summary>
        /// - Certificate signing request status.
        /// </summary>
        public readonly bool HasCsr;
        /// <summary>
        /// - Name of the host.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// - Type of the host.
        /// * `HYPER_CONVERGED`: Hyper-converged node.
        /// * `COMPUTE_ONLY`: Compute only node.
        /// * `STORAGE_ONLY`: Storage only node.
        /// </summary>
        public readonly string HostType;
        /// <summary>
        /// - Hypervisor details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostV2HypervisorResult> Hypervisors;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - IPMI reference.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostV2IpmiResult> Ipmis;
        /// <summary>
        /// - Node degraded status.
        /// </summary>
        public readonly bool IsDegraded;
        /// <summary>
        /// - Indicates whether the hardware is virtualized or not.
        /// </summary>
        public readonly bool IsHardwareVirtualized;
        public readonly bool IsRebootPending;
        /// <summary>
        /// - Secure boot status.
        /// </summary>
        public readonly bool IsSecureBooted;
        /// <summary>
        /// - Mapping of key management device to certificate status list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostV2KeyManagementDeviceToCertStatusResult> KeyManagementDeviceToCertStatuses;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostV2LinkResult> Links;
        /// <summary>
        /// - Host Maintenance State.
        /// </summary>
        public readonly string MaintenanceState;
        /// <summary>
        /// - Memory size in bytes.
        /// </summary>
        public readonly int MemorySizeBytes;
        /// <summary>
        /// - Node status.
        /// * `TO_BE_PREPROTECTED`: Node to be preprotected.
        /// * `TO_BE_REMOVED`: Node to be removed.
        /// * `PREPROTECTED`: Node is preprotected.
        /// * `OK_TO_BE_REMOVED`: Indicates whether removing the node from the cluster is adequate.
        /// * `NORMAL`: Normal node.
        /// * `NEW_NODE`: New node.
        /// </summary>
        public readonly string NodeStatus;
        /// <summary>
        /// - Number of CPU cores.
        /// </summary>
        public readonly int NumberOfCpuCores;
        /// <summary>
        /// - Number of CPU sockets.
        /// </summary>
        public readonly int NumberOfCpuSockets;
        /// <summary>
        /// - Number of CPU threads.
        /// </summary>
        public readonly int NumberOfCpuThreads;
        /// <summary>
        /// - Rackable unit UUID.
        /// </summary>
        public readonly string RackableUnitUuid;
        /// <summary>
        /// - image uuid.
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetHostV2Result(
            string blockModel,

            string blockSerial,

            int bootTimeUsecs,

            string clusterExtId,

            ImmutableArray<Outputs.GetHostV2ClusterResult> clusters,

            ImmutableArray<Outputs.GetHostV2ControllerVmResult> controllerVms,

            int cpuCapacityHz,

            int cpuFrequencyHz,

            string cpuModel,

            string defaultVhdContainerUuid,

            string defaultVhdLocation,

            string defaultVmContainerUuid,

            string defaultVmLocation,

            ImmutableArray<Outputs.GetHostV2DiskResult> disks,

            string extId,

            string failoverClusterFqdn,

            string failoverClusterNodeStatus,

            string gpuDriverVersion,

            ImmutableArray<string> gpuLists,

            bool hasCsr,

            string hostName,

            string hostType,

            ImmutableArray<Outputs.GetHostV2HypervisorResult> hypervisors,

            string id,

            ImmutableArray<Outputs.GetHostV2IpmiResult> ipmis,

            bool isDegraded,

            bool isHardwareVirtualized,

            bool isRebootPending,

            bool isSecureBooted,

            ImmutableArray<Outputs.GetHostV2KeyManagementDeviceToCertStatusResult> keyManagementDeviceToCertStatuses,

            ImmutableArray<Outputs.GetHostV2LinkResult> links,

            string maintenanceState,

            int memorySizeBytes,

            string nodeStatus,

            int numberOfCpuCores,

            int numberOfCpuSockets,

            int numberOfCpuThreads,

            string rackableUnitUuid,

            string tenantId)
        {
            BlockModel = blockModel;
            BlockSerial = blockSerial;
            BootTimeUsecs = bootTimeUsecs;
            ClusterExtId = clusterExtId;
            Clusters = clusters;
            ControllerVms = controllerVms;
            CpuCapacityHz = cpuCapacityHz;
            CpuFrequencyHz = cpuFrequencyHz;
            CpuModel = cpuModel;
            DefaultVhdContainerUuid = defaultVhdContainerUuid;
            DefaultVhdLocation = defaultVhdLocation;
            DefaultVmContainerUuid = defaultVmContainerUuid;
            DefaultVmLocation = defaultVmLocation;
            Disks = disks;
            ExtId = extId;
            FailoverClusterFqdn = failoverClusterFqdn;
            FailoverClusterNodeStatus = failoverClusterNodeStatus;
            GpuDriverVersion = gpuDriverVersion;
            GpuLists = gpuLists;
            HasCsr = hasCsr;
            HostName = hostName;
            HostType = hostType;
            Hypervisors = hypervisors;
            Id = id;
            Ipmis = ipmis;
            IsDegraded = isDegraded;
            IsHardwareVirtualized = isHardwareVirtualized;
            IsRebootPending = isRebootPending;
            IsSecureBooted = isSecureBooted;
            KeyManagementDeviceToCertStatuses = keyManagementDeviceToCertStatuses;
            Links = links;
            MaintenanceState = maintenanceState;
            MemorySizeBytes = memorySizeBytes;
            NodeStatus = nodeStatus;
            NumberOfCpuCores = numberOfCpuCores;
            NumberOfCpuSockets = numberOfCpuSockets;
            NumberOfCpuThreads = numberOfCpuThreads;
            RackableUnitUuid = rackableUnitUuid;
            TenantId = tenantId;
        }
    }
}
