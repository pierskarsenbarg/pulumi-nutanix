// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to Create a new Volume Group.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vgVmExample = new Nutanix.VolumeGroupVmV2("vgVmExample", new()
    ///     {
    ///         VolumeGroupExtId = "&lt;vg uuid&gt;",
    ///         VmExtId = @var.Vg_vm_ext_id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/volumeGroupVmV2:VolumeGroupVmV2")]
    public partial class VolumeGroupVmV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A globally unique identifier of a task.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group. 
        /// 
        /// 
        /// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&amp;version=v4.0).
        /// </summary>
        [Output("index")]
        public Output<int?> Index { get; private set; } = null!;

        /// <summary>
        /// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Output("vmExtId")]
        public Output<string> VmExtId { get; private set; } = null!;

        /// <summary>
        /// -(Required) The external identifier of the volume group.
        /// </summary>
        [Output("volumeGroupExtId")]
        public Output<string> VolumeGroupExtId { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeGroupVmV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeGroupVmV2(string name, VolumeGroupVmV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/volumeGroupVmV2:VolumeGroupVmV2", name, args ?? new VolumeGroupVmV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeGroupVmV2(string name, Input<string> id, VolumeGroupVmV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/volumeGroupVmV2:VolumeGroupVmV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeGroupVmV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeGroupVmV2 Get(string name, Input<string> id, VolumeGroupVmV2State? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeGroupVmV2(name, id, state, options);
        }
    }

    public sealed class VolumeGroupVmV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group. 
        /// 
        /// 
        /// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&amp;version=v4.0).
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("vmExtId", required: true)]
        public Input<string> VmExtId { get; set; } = null!;

        /// <summary>
        /// -(Required) The external identifier of the volume group.
        /// </summary>
        [Input("volumeGroupExtId", required: true)]
        public Input<string> VolumeGroupExtId { get; set; } = null!;

        public VolumeGroupVmV2Args()
        {
        }
        public static new VolumeGroupVmV2Args Empty => new VolumeGroupVmV2Args();
    }

    public sealed class VolumeGroupVmV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A globally unique identifier of a task.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// -(Optional) The index on the SCSI bus to attach the VM to the Volume Group. 
        /// 
        /// 
        /// See detailed information in [Nutanix Volumes V4](https://developers.nutanix.com/api-reference?namespace=volumes&amp;version=v4.0).
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("vmExtId")]
        public Input<string>? VmExtId { get; set; }

        /// <summary>
        /// -(Required) The external identifier of the volume group.
        /// </summary>
        [Input("volumeGroupExtId")]
        public Input<string>? VolumeGroupExtId { get; set; }

        public VolumeGroupVmV2State()
        {
        }
        public static new VolumeGroupVmV2State Empty => new VolumeGroupVmV2State();
    }
}
