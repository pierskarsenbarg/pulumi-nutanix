// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    [NutanixResourceType("nutanix:index/ndbScaleDatabase:NdbScaleDatabase")]
    public partial class NdbScaleDatabase : global::Pulumi.CustomResource
    {
        [Output("applicationType")]
        public Output<string> ApplicationType { get; private set; } = null!;

        [Output("clone")]
        public Output<bool> Clone { get; private set; } = null!;

        [Output("dataStorageSize")]
        public Output<int> DataStorageSize { get; private set; } = null!;

        [Output("databaseClusterType")]
        public Output<string> DatabaseClusterType { get; private set; } = null!;

        [Output("databaseInstanceId")]
        public Output<string> DatabaseInstanceId { get; private set; } = null!;

        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        [Output("databaseNodes")]
        public Output<ImmutableArray<Outputs.NdbScaleDatabaseDatabaseNode>> DatabaseNodes { get; private set; } = null!;

        [Output("databaseUuid")]
        public Output<string> DatabaseUuid { get; private set; } = null!;

        [Output("databasetype")]
        public Output<string> Databasetype { get; private set; } = null!;

        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        [Output("dbserverLogicalCluster")]
        public Output<ImmutableDictionary<string, string>> DbserverLogicalCluster { get; private set; } = null!;

        [Output("dbserverLogicalClusterId")]
        public Output<string> DbserverLogicalClusterId { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("infos")]
        public Output<ImmutableArray<Outputs.NdbScaleDatabaseInfo>> Infos { get; private set; } = null!;

        [Output("lcmConfigs")]
        public Output<ImmutableArray<Outputs.NdbScaleDatabaseLcmConfig>> LcmConfigs { get; private set; } = null!;

        [Output("linkedDatabases")]
        public Output<ImmutableArray<Outputs.NdbScaleDatabaseLinkedDatabase>> LinkedDatabases { get; private set; } = null!;

        [Output("metric")]
        public Output<ImmutableDictionary<string, string>> Metric { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("parentDatabaseId")]
        public Output<string> ParentDatabaseId { get; private set; } = null!;

        [Output("parentSourceDatabaseId")]
        public Output<string> ParentSourceDatabaseId { get; private set; } = null!;

        [Output("postScriptCmd")]
        public Output<string?> PostScriptCmd { get; private set; } = null!;

        [Output("preScriptCmd")]
        public Output<string?> PreScriptCmd { get; private set; } = null!;

        /// <summary>
        /// List of all the properties
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbScaleDatabaseProperty>> Properties { get; private set; } = null!;

        [Output("scaleCount")]
        public Output<int?> ScaleCount { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbScaleDatabaseTag>> Tags { get; private set; } = null!;

        [Output("timeMachineId")]
        public Output<string> TimeMachineId { get; private set; } = null!;

        [Output("timeMachines")]
        public Output<ImmutableArray<Outputs.NdbScaleDatabaseTimeMachine>> TimeMachines { get; private set; } = null!;

        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NdbScaleDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbScaleDatabase(string name, NdbScaleDatabaseArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbScaleDatabase:NdbScaleDatabase", name, args ?? new NdbScaleDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbScaleDatabase(string name, Input<string> id, NdbScaleDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbScaleDatabase:NdbScaleDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbScaleDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbScaleDatabase Get(string name, Input<string> id, NdbScaleDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbScaleDatabase(name, id, state, options);
        }
    }

    public sealed class NdbScaleDatabaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationType", required: true)]
        public Input<string> ApplicationType { get; set; } = null!;

        [Input("dataStorageSize", required: true)]
        public Input<int> DataStorageSize { get; set; } = null!;

        [Input("databaseUuid", required: true)]
        public Input<string> DatabaseUuid { get; set; } = null!;

        [Input("postScriptCmd")]
        public Input<string>? PostScriptCmd { get; set; }

        [Input("preScriptCmd")]
        public Input<string>? PreScriptCmd { get; set; }

        [Input("scaleCount")]
        public Input<int>? ScaleCount { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbScaleDatabaseTagArgs>? _tags;
        public InputList<Inputs.NdbScaleDatabaseTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbScaleDatabaseTagArgs>());
            set => _tags = value;
        }

        public NdbScaleDatabaseArgs()
        {
        }
        public static new NdbScaleDatabaseArgs Empty => new NdbScaleDatabaseArgs();
    }

    public sealed class NdbScaleDatabaseState : global::Pulumi.ResourceArgs
    {
        [Input("applicationType")]
        public Input<string>? ApplicationType { get; set; }

        [Input("clone")]
        public Input<bool>? Clone { get; set; }

        [Input("dataStorageSize")]
        public Input<int>? DataStorageSize { get; set; }

        [Input("databaseClusterType")]
        public Input<string>? DatabaseClusterType { get; set; }

        [Input("databaseInstanceId")]
        public Input<string>? DatabaseInstanceId { get; set; }

        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("databaseNodes")]
        private InputList<Inputs.NdbScaleDatabaseDatabaseNodeGetArgs>? _databaseNodes;
        public InputList<Inputs.NdbScaleDatabaseDatabaseNodeGetArgs> DatabaseNodes
        {
            get => _databaseNodes ?? (_databaseNodes = new InputList<Inputs.NdbScaleDatabaseDatabaseNodeGetArgs>());
            set => _databaseNodes = value;
        }

        [Input("databaseUuid")]
        public Input<string>? DatabaseUuid { get; set; }

        [Input("databasetype")]
        public Input<string>? Databasetype { get; set; }

        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        [Input("dbserverLogicalCluster")]
        private InputMap<string>? _dbserverLogicalCluster;
        public InputMap<string> DbserverLogicalCluster
        {
            get => _dbserverLogicalCluster ?? (_dbserverLogicalCluster = new InputMap<string>());
            set => _dbserverLogicalCluster = value;
        }

        [Input("dbserverLogicalClusterId")]
        public Input<string>? DbserverLogicalClusterId { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("infos")]
        private InputList<Inputs.NdbScaleDatabaseInfoGetArgs>? _infos;
        public InputList<Inputs.NdbScaleDatabaseInfoGetArgs> Infos
        {
            get => _infos ?? (_infos = new InputList<Inputs.NdbScaleDatabaseInfoGetArgs>());
            set => _infos = value;
        }

        [Input("lcmConfigs")]
        private InputList<Inputs.NdbScaleDatabaseLcmConfigGetArgs>? _lcmConfigs;
        public InputList<Inputs.NdbScaleDatabaseLcmConfigGetArgs> LcmConfigs
        {
            get => _lcmConfigs ?? (_lcmConfigs = new InputList<Inputs.NdbScaleDatabaseLcmConfigGetArgs>());
            set => _lcmConfigs = value;
        }

        [Input("linkedDatabases")]
        private InputList<Inputs.NdbScaleDatabaseLinkedDatabaseGetArgs>? _linkedDatabases;
        public InputList<Inputs.NdbScaleDatabaseLinkedDatabaseGetArgs> LinkedDatabases
        {
            get => _linkedDatabases ?? (_linkedDatabases = new InputList<Inputs.NdbScaleDatabaseLinkedDatabaseGetArgs>());
            set => _linkedDatabases = value;
        }

        [Input("metric")]
        private InputMap<string>? _metric;
        public InputMap<string> Metric
        {
            get => _metric ?? (_metric = new InputMap<string>());
            set => _metric = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parentDatabaseId")]
        public Input<string>? ParentDatabaseId { get; set; }

        [Input("parentSourceDatabaseId")]
        public Input<string>? ParentSourceDatabaseId { get; set; }

        [Input("postScriptCmd")]
        public Input<string>? PostScriptCmd { get; set; }

        [Input("preScriptCmd")]
        public Input<string>? PreScriptCmd { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbScaleDatabasePropertyGetArgs>? _properties;

        /// <summary>
        /// List of all the properties
        /// </summary>
        public InputList<Inputs.NdbScaleDatabasePropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbScaleDatabasePropertyGetArgs>());
            set => _properties = value;
        }

        [Input("scaleCount")]
        public Input<int>? ScaleCount { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbScaleDatabaseTagGetArgs>? _tags;
        public InputList<Inputs.NdbScaleDatabaseTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbScaleDatabaseTagGetArgs>());
            set => _tags = value;
        }

        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        [Input("timeMachines")]
        private InputList<Inputs.NdbScaleDatabaseTimeMachineGetArgs>? _timeMachines;
        public InputList<Inputs.NdbScaleDatabaseTimeMachineGetArgs> TimeMachines
        {
            get => _timeMachines ?? (_timeMachines = new InputList<Inputs.NdbScaleDatabaseTimeMachineGetArgs>());
            set => _timeMachines = value;
        }

        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public NdbScaleDatabaseState()
        {
        }
        public static new NdbScaleDatabaseState Empty => new NdbScaleDatabaseState();
    }
}
