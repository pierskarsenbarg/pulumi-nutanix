// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetRouteV2
    {
        /// <summary>
        /// Provides Nutanix datasource Get Route for the specified {extId}.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var route_by_id = Nutanix.GetRouteV2.Invoke(new()
        ///     {
        ///         ExtId = "7f66e20f-67f4-473f-96bb-c4fcfd487f16",
        ///         RouteTableExtId = "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteV2Result> InvokeAsync(GetRouteV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteV2Result>("nutanix:index/getRouteV2:getRouteV2", args ?? new GetRouteV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides Nutanix datasource Get Route for the specified {extId}.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var route_by_id = Nutanix.GetRouteV2.Invoke(new()
        ///     {
        ///         ExtId = "7f66e20f-67f4-473f-96bb-c4fcfd487f16",
        ///         RouteTableExtId = "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteV2Result> Invoke(GetRouteV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteV2Result>("nutanix:index/getRouteV2:getRouteV2", args ?? new GetRouteV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides Nutanix datasource Get Route for the specified {extId}.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var route_by_id = Nutanix.GetRouteV2.Invoke(new()
        ///     {
        ///         ExtId = "7f66e20f-67f4-473f-96bb-c4fcfd487f16",
        ///         RouteTableExtId = "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteV2Result> Invoke(GetRouteV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteV2Result>("nutanix:index/getRouteV2:getRouteV2", args ?? new GetRouteV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Route UUID.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        /// <summary>
        /// Route table UUID
        /// </summary>
        [Input("routeTableExtId", required: true)]
        public string RouteTableExtId { get; set; } = null!;

        public GetRouteV2Args()
        {
        }
        public static new GetRouteV2Args Empty => new GetRouteV2Args();
    }

    public sealed class GetRouteV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Route UUID.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        /// <summary>
        /// Route table UUID
        /// </summary>
        [Input("routeTableExtId", required: true)]
        public Input<string> RouteTableExtId { get; set; } = null!;

        public GetRouteV2InvokeArgs()
        {
        }
        public static new GetRouteV2InvokeArgs Empty => new GetRouteV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteV2Result
    {
        /// <summary>
        /// BGP session description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Destination IP Subnet Configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteV2DestinationResult> Destinations;
        /// <summary>
        /// Route UUID
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// External routing domain associated with this route table.
        /// </summary>
        public readonly string ExternalRoutingDomainReference;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the route is active in the forwarding plane.
        /// </summary>
        public readonly bool IsActive;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteV2LinkResult> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteV2MetadataResult> Metadatas;
        /// <summary>
        /// Route name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Route nexthop.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteV2NextHopResult> NextHops;
        /// <summary>
        /// Route priority. A higher value implies greater preference is assigned to the route.
        /// </summary>
        public readonly int Priority;
        public readonly string RouteTableExtId;
        /// <summary>
        /// Route table reference.
        /// </summary>
        public readonly string RouteTableReference;
        /// <summary>
        /// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
        /// </summary>
        public readonly string RouteType;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// VPC reference.
        /// </summary>
        public readonly string VpcReference;

        [OutputConstructor]
        private GetRouteV2Result(
            string description,

            ImmutableArray<Outputs.GetRouteV2DestinationResult> destinations,

            string extId,

            string externalRoutingDomainReference,

            string id,

            bool isActive,

            ImmutableArray<Outputs.GetRouteV2LinkResult> links,

            ImmutableArray<Outputs.GetRouteV2MetadataResult> metadatas,

            string name,

            ImmutableArray<Outputs.GetRouteV2NextHopResult> nextHops,

            int priority,

            string routeTableExtId,

            string routeTableReference,

            string routeType,

            string tenantId,

            string vpcReference)
        {
            Description = description;
            Destinations = destinations;
            ExtId = extId;
            ExternalRoutingDomainReference = externalRoutingDomainReference;
            Id = id;
            IsActive = isActive;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            NextHops = nextHops;
            Priority = priority;
            RouteTableExtId = routeTableExtId;
            RouteTableReference = routeTableReference;
            RouteType = routeType;
            TenantId = tenantId;
            VpcReference = vpcReference;
        }
    }
}
