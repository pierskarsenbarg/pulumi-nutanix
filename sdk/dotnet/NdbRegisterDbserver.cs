// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to register database server VMs based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver")]
    public partial class NdbRegisterDbserver : global::Pulumi.CustomResource
    {
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        [Output("credentials")]
        public Output<ImmutableArray<Outputs.NdbRegisterDbserverCredential>> Credentials { get; private set; } = null!;

        /// <summary>
        /// database type i.e. postgres_database
        /// </summary>
        [Output("databaseType")]
        public Output<string> DatabaseType { get; private set; } = null!;

        [Output("dbserverClusterId")]
        public Output<string> DbserverClusterId { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the VM and associated storage. Default value is false
        /// </summary>
        [Output("delete")]
        public Output<bool?> Delete { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete volume grous. Default value is true
        /// </summary>
        [Output("deleteVgs")]
        public Output<bool?> DeleteVgs { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the vm snapshots. Default is true
        /// </summary>
        [Output("deleteVmSnapshots")]
        public Output<bool?> DeleteVmSnapshots { get; private set; } = null!;

        /// <summary>
        /// description of db server vm. Should be used in update Method only .
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("eraCreated")]
        public Output<bool> EraCreated { get; private set; } = null!;

        [Output("eraDriveId")]
        public Output<string> EraDriveId { get; private set; } = null!;

        [Output("eraVersion")]
        public Output<string> EraVersion { get; private set; } = null!;

        /// <summary>
        /// forced install the packages. Default is true
        /// </summary>
        [Output("forcedInstall")]
        public Output<bool?> ForcedInstall { get; private set; } = null!;

        [Output("fqdns")]
        public Output<string> Fqdns { get; private set; } = null!;

        [Output("internal")]
        public Output<bool> Internal { get; private set; } = null!;

        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        [Output("macAddresses")]
        public Output<ImmutableArray<string>> MacAddresses { get; private set; } = null!;

        /// <summary>
        /// Name of db server vm. Should be used in Update Method only.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// cluster on which you want to register the database server VM.
        /// </summary>
        [Output("nxclusterId")]
        public Output<string?> NxclusterId { get; private set; } = null!;

        /// <summary>
        /// password of the NDB drive user account. Conflicts with ssh_key.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// postgres info for dbserver
        /// </summary>
        [Output("postgresDatabases")]
        public Output<ImmutableArray<Outputs.NdbRegisterDbserverPostgresDatabase>> PostgresDatabases { get; private set; } = null!;

        /// <summary>
        /// List of all the properties
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbRegisterDbserverProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Output("remove")]
        public Output<bool?> Remove { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Output("softRemove")]
        public Output<bool?> SoftRemove { get; private set; } = null!;

        /// <summary>
        /// the private key. Conflicts with password.
        /// </summary>
        [Output("sshKey")]
        public Output<string?> SshKey { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbRegisterDbserverTag>> Tags { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Updates the name and description in cluster. Should be used in Update Method only.
        /// </summary>
        [Output("updateNameDescriptionInCluster")]
        public Output<bool?> UpdateNameDescriptionInCluster { get; private set; } = null!;

        /// <summary>
        /// username of the NDB drive user account that has sudo access
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        [Output("vmClusterName")]
        public Output<string> VmClusterName { get; private set; } = null!;

        [Output("vmClusterUuid")]
        public Output<string> VmClusterUuid { get; private set; } = null!;

        /// <summary>
        /// IP address of the database server VM
        /// </summary>
        [Output("vmIp")]
        public Output<string> VmIp { get; private set; } = null!;

        [Output("vmTimezone")]
        public Output<string> VmTimezone { get; private set; } = null!;

        /// <summary>
        /// working directory of postgres. Default is "/tmp"
        /// </summary>
        [Output("workingDirectory")]
        public Output<string?> WorkingDirectory { get; private set; } = null!;


        /// <summary>
        /// Create a NdbRegisterDbserver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbRegisterDbserver(string name, NdbRegisterDbserverArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver", name, args ?? new NdbRegisterDbserverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbRegisterDbserver(string name, Input<string> id, NdbRegisterDbserverState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbRegisterDbserver:NdbRegisterDbserver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
                AdditionalSecretOutputs =
                {
                    "password",
                    "sshKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbRegisterDbserver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbRegisterDbserver Get(string name, Input<string> id, NdbRegisterDbserverState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbRegisterDbserver(name, id, state, options);
        }
    }

    public sealed class NdbRegisterDbserverArgs : global::Pulumi.ResourceArgs
    {
        [Input("credentials")]
        private InputList<Inputs.NdbRegisterDbserverCredentialArgs>? _credentials;
        public InputList<Inputs.NdbRegisterDbserverCredentialArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.NdbRegisterDbserverCredentialArgs>());
            set => _credentials = value;
        }

        /// <summary>
        /// database type i.e. postgres_database
        /// </summary>
        [Input("databaseType", required: true)]
        public Input<string> DatabaseType { get; set; } = null!;

        /// <summary>
        /// - (Optional) Delete the VM and associated storage. Default value is false
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// - (Optional) Delete volume grous. Default value is true
        /// </summary>
        [Input("deleteVgs")]
        public Input<bool>? DeleteVgs { get; set; }

        /// <summary>
        /// - (Optional) Delete the vm snapshots. Default is true
        /// </summary>
        [Input("deleteVmSnapshots")]
        public Input<bool>? DeleteVmSnapshots { get; set; }

        /// <summary>
        /// description of db server vm. Should be used in update Method only .
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// forced install the packages. Default is true
        /// </summary>
        [Input("forcedInstall")]
        public Input<bool>? ForcedInstall { get; set; }

        /// <summary>
        /// Name of db server vm. Should be used in Update Method only.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// cluster on which you want to register the database server VM.
        /// </summary>
        [Input("nxclusterId")]
        public Input<string>? NxclusterId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// password of the NDB drive user account. Conflicts with ssh_key.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("postgresDatabases")]
        private InputList<Inputs.NdbRegisterDbserverPostgresDatabaseArgs>? _postgresDatabases;

        /// <summary>
        /// postgres info for dbserver
        /// </summary>
        public InputList<Inputs.NdbRegisterDbserverPostgresDatabaseArgs> PostgresDatabases
        {
            get => _postgresDatabases ?? (_postgresDatabases = new InputList<Inputs.NdbRegisterDbserverPostgresDatabaseArgs>());
            set => _postgresDatabases = value;
        }

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        [Input("sshKey")]
        private Input<string>? _sshKey;

        /// <summary>
        /// the private key. Conflicts with password.
        /// </summary>
        public Input<string>? SshKey
        {
            get => _sshKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputList<Inputs.NdbRegisterDbserverTagArgs>? _tags;
        public InputList<Inputs.NdbRegisterDbserverTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbRegisterDbserverTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Updates the name and description in cluster. Should be used in Update Method only.
        /// </summary>
        [Input("updateNameDescriptionInCluster")]
        public Input<bool>? UpdateNameDescriptionInCluster { get; set; }

        /// <summary>
        /// username of the NDB drive user account that has sudo access
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// IP address of the database server VM
        /// </summary>
        [Input("vmIp", required: true)]
        public Input<string> VmIp { get; set; } = null!;

        /// <summary>
        /// working directory of postgres. Default is "/tmp"
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public NdbRegisterDbserverArgs()
        {
        }
        public static new NdbRegisterDbserverArgs Empty => new NdbRegisterDbserverArgs();
    }

    public sealed class NdbRegisterDbserverState : global::Pulumi.ResourceArgs
    {
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("credentials")]
        private InputList<Inputs.NdbRegisterDbserverCredentialGetArgs>? _credentials;
        public InputList<Inputs.NdbRegisterDbserverCredentialGetArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.NdbRegisterDbserverCredentialGetArgs>());
            set => _credentials = value;
        }

        /// <summary>
        /// database type i.e. postgres_database
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        [Input("dbserverClusterId")]
        public Input<string>? DbserverClusterId { get; set; }

        /// <summary>
        /// - (Optional) Delete the VM and associated storage. Default value is false
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// - (Optional) Delete volume grous. Default value is true
        /// </summary>
        [Input("deleteVgs")]
        public Input<bool>? DeleteVgs { get; set; }

        /// <summary>
        /// - (Optional) Delete the vm snapshots. Default is true
        /// </summary>
        [Input("deleteVmSnapshots")]
        public Input<bool>? DeleteVmSnapshots { get; set; }

        /// <summary>
        /// description of db server vm. Should be used in update Method only .
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eraCreated")]
        public Input<bool>? EraCreated { get; set; }

        [Input("eraDriveId")]
        public Input<string>? EraDriveId { get; set; }

        [Input("eraVersion")]
        public Input<string>? EraVersion { get; set; }

        /// <summary>
        /// forced install the packages. Default is true
        /// </summary>
        [Input("forcedInstall")]
        public Input<bool>? ForcedInstall { get; set; }

        [Input("fqdns")]
        public Input<string>? Fqdns { get; set; }

        [Input("internal")]
        public Input<bool>? Internal { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("macAddresses")]
        private InputList<string>? _macAddresses;
        public InputList<string> MacAddresses
        {
            get => _macAddresses ?? (_macAddresses = new InputList<string>());
            set => _macAddresses = value;
        }

        /// <summary>
        /// Name of db server vm. Should be used in Update Method only.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// cluster on which you want to register the database server VM.
        /// </summary>
        [Input("nxclusterId")]
        public Input<string>? NxclusterId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// password of the NDB drive user account. Conflicts with ssh_key.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("postgresDatabases")]
        private InputList<Inputs.NdbRegisterDbserverPostgresDatabaseGetArgs>? _postgresDatabases;

        /// <summary>
        /// postgres info for dbserver
        /// </summary>
        public InputList<Inputs.NdbRegisterDbserverPostgresDatabaseGetArgs> PostgresDatabases
        {
            get => _postgresDatabases ?? (_postgresDatabases = new InputList<Inputs.NdbRegisterDbserverPostgresDatabaseGetArgs>());
            set => _postgresDatabases = value;
        }

        [Input("properties")]
        private InputList<Inputs.NdbRegisterDbserverPropertyGetArgs>? _properties;

        /// <summary>
        /// List of all the properties
        /// </summary>
        public InputList<Inputs.NdbRegisterDbserverPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbRegisterDbserverPropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        [Input("sshKey")]
        private Input<string>? _sshKey;

        /// <summary>
        /// the private key. Conflicts with password.
        /// </summary>
        public Input<string>? SshKey
        {
            get => _sshKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbRegisterDbserverTagGetArgs>? _tags;
        public InputList<Inputs.NdbRegisterDbserverTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbRegisterDbserverTagGetArgs>());
            set => _tags = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Updates the name and description in cluster. Should be used in Update Method only.
        /// </summary>
        [Input("updateNameDescriptionInCluster")]
        public Input<bool>? UpdateNameDescriptionInCluster { get; set; }

        /// <summary>
        /// username of the NDB drive user account that has sudo access
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        [Input("vmClusterName")]
        public Input<string>? VmClusterName { get; set; }

        [Input("vmClusterUuid")]
        public Input<string>? VmClusterUuid { get; set; }

        /// <summary>
        /// IP address of the database server VM
        /// </summary>
        [Input("vmIp")]
        public Input<string>? VmIp { get; set; }

        [Input("vmTimezone")]
        public Input<string>? VmTimezone { get; set; }

        /// <summary>
        /// working directory of postgres. Default is "/tmp"
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public NdbRegisterDbserverState()
        {
        }
        public static new NdbRegisterDbserverState Empty => new NdbRegisterDbserverState();
    }
}
