// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetPbrV2
    {
        /// <summary>
        /// Get a single Routing Policy corresponding to the extId.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_pbr = Nutanix.GetPbrV2.Invoke(new()
        ///     {
        ///         ExtId = "96a22c81-ed58-4bed-96bc-46b488626612",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPbrV2Result> InvokeAsync(GetPbrV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPbrV2Result>("nutanix:index/getPbrV2:getPbrV2", args ?? new GetPbrV2Args(), options.WithDefaults());

        /// <summary>
        /// Get a single Routing Policy corresponding to the extId.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_pbr = Nutanix.GetPbrV2.Invoke(new()
        ///     {
        ///         ExtId = "96a22c81-ed58-4bed-96bc-46b488626612",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPbrV2Result> Invoke(GetPbrV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPbrV2Result>("nutanix:index/getPbrV2:getPbrV2", args ?? new GetPbrV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a single Routing Policy corresponding to the extId.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_pbr = Nutanix.GetPbrV2.Invoke(new()
        ///     {
        ///         ExtId = "96a22c81-ed58-4bed-96bc-46b488626612",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPbrV2Result> Invoke(GetPbrV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPbrV2Result>("nutanix:index/getPbrV2:getPbrV2", args ?? new GetPbrV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPbrV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// pbr UUID
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetPbrV2Args()
        {
        }
        public static new GetPbrV2Args Empty => new GetPbrV2Args();
    }

    public sealed class GetPbrV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// pbr UUID
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetPbrV2InvokeArgs()
        {
        }
        public static new GetPbrV2InvokeArgs Empty => new GetPbrV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetPbrV2Result
    {
        /// <summary>
        /// A description of the routing policy.
        /// </summary>
        public readonly string Description;
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPbrV2LinkResult> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPbrV2MetadataResult> Metadatas;
        /// <summary>
        /// Name of the routing policy.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Routing Policies
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPbrV2PolicyResult> Policies;
        /// <summary>
        /// Priority of the routing policy.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// ExtId of the VPC extId to which the routing policy belongs.
        /// </summary>
        public readonly string VpcExtId;
        /// <summary>
        /// VPC name for projections
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPbrV2VpcResult> Vpcs;

        [OutputConstructor]
        private GetPbrV2Result(
            string description,

            string extId,

            string id,

            ImmutableArray<Outputs.GetPbrV2LinkResult> links,

            ImmutableArray<Outputs.GetPbrV2MetadataResult> metadatas,

            string name,

            ImmutableArray<Outputs.GetPbrV2PolicyResult> policies,

            int priority,

            string tenantId,

            string vpcExtId,

            ImmutableArray<Outputs.GetPbrV2VpcResult> vpcs)
        {
            Description = description;
            ExtId = extId;
            Id = id;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            Policies = policies;
            Priority = priority;
            TenantId = tenantId;
            VpcExtId = vpcExtId;
            Vpcs = vpcs;
        }
    }
}
