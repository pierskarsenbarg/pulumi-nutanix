// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetVolumeGroupDiskV2
    {
        /// <summary>
        /// Describes a Query the Volume Disk identified by {extId} in the Volume Group identified by {volumeGroupExtId}.
        /// </summary>
        public static Task<GetVolumeGroupDiskV2Result> InvokeAsync(GetVolumeGroupDiskV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeGroupDiskV2Result>("nutanix:index/getVolumeGroupDiskV2:getVolumeGroupDiskV2", args ?? new GetVolumeGroupDiskV2Args(), options.WithDefaults());

        /// <summary>
        /// Describes a Query the Volume Disk identified by {extId} in the Volume Group identified by {volumeGroupExtId}.
        /// </summary>
        public static Output<GetVolumeGroupDiskV2Result> Invoke(GetVolumeGroupDiskV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeGroupDiskV2Result>("nutanix:index/getVolumeGroupDiskV2:getVolumeGroupDiskV2", args ?? new GetVolumeGroupDiskV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Query the Volume Disk identified by {extId} in the Volume Group identified by {volumeGroupExtId}.
        /// </summary>
        public static Output<GetVolumeGroupDiskV2Result> Invoke(GetVolumeGroupDiskV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeGroupDiskV2Result>("nutanix:index/getVolumeGroupDiskV2:getVolumeGroupDiskV2", args ?? new GetVolumeGroupDiskV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeGroupDiskV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - The external identifier of the Data Source Reference.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        [Input("volumeGroupExtId", required: true)]
        public string VolumeGroupExtId { get; set; } = null!;

        public GetVolumeGroupDiskV2Args()
        {
        }
        public static new GetVolumeGroupDiskV2Args Empty => new GetVolumeGroupDiskV2Args();
    }

    public sealed class GetVolumeGroupDiskV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - The external identifier of the Data Source Reference.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        [Input("volumeGroupExtId", required: true)]
        public Input<string> VolumeGroupExtId { get; set; } = null!;

        public GetVolumeGroupDiskV2InvokeArgs()
        {
        }
        public static new GetVolumeGroupDiskV2InvokeArgs Empty => new GetVolumeGroupDiskV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeGroupDiskV2Result
    {
        /// <summary>
        /// - Volume Disk description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// - Disk Data Source Reference.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupDiskV2DiskDataSourceReferenceResult> DiskDataSourceReferences;
        /// <summary>
        /// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
        /// </summary>
        public readonly int DiskSizeBytes;
        /// <summary>
        /// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupDiskV2DiskStorageFeatureResult> DiskStorageFeatures;
        /// <summary>
        /// - The external identifier of the Data Source Reference.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - Index of the disk in a Volume Group. This field is optional and immutable.
        /// </summary>
        public readonly int Index;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupDiskV2LinkResult> Links;
        /// <summary>
        /// - Storage container on which the disk must be created. This is a read-only field.
        /// </summary>
        public readonly string StorageContainerId;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;
        public readonly string VolumeGroupExtId;

        [OutputConstructor]
        private GetVolumeGroupDiskV2Result(
            string description,

            ImmutableArray<Outputs.GetVolumeGroupDiskV2DiskDataSourceReferenceResult> diskDataSourceReferences,

            int diskSizeBytes,

            ImmutableArray<Outputs.GetVolumeGroupDiskV2DiskStorageFeatureResult> diskStorageFeatures,

            string extId,

            string id,

            int index,

            ImmutableArray<Outputs.GetVolumeGroupDiskV2LinkResult> links,

            string storageContainerId,

            string tenantId,

            string volumeGroupExtId)
        {
            Description = description;
            DiskDataSourceReferences = diskDataSourceReferences;
            DiskSizeBytes = diskSizeBytes;
            DiskStorageFeatures = diskStorageFeatures;
            ExtId = extId;
            Id = id;
            Index = index;
            Links = links;
            StorageContainerId = storageContainerId;
            TenantId = tenantId;
            VolumeGroupExtId = volumeGroupExtId;
        }
    }
}
