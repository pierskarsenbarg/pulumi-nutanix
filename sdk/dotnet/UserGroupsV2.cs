// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to add a User group to the system..
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var usrGroup = new Nutanix.UserGroupsV2("usrGroup", new()
    ///     {
    ///         DistinguishedName = "&lt;distinguished name of the user group&gt;",
    ///         GroupType = "&lt;group Type&gt;",
    ///         IdpId = "&lt;idp uuid of user group&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/userGroupsV2:UserGroupsV2")]
    public partial class UserGroupsV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - User or Service who created the User Group.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// - Creation time of the User Group.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Identifier for the User Group in the form of a distinguished name.
        /// </summary>
        [Output("distinguishedName")]
        public Output<string?> DistinguishedName { get; private set; } = null!;

        /// <summary>
        /// The External Identifier of the User Group.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
        /// </summary>
        [Output("groupType")]
        public Output<string> GroupType { get; private set; } = null!;

        /// <summary>
        /// -(Required) Identifier of the IDP for the User Group.
        /// </summary>
        [Output("idpId")]
        public Output<string> IdpId { get; private set; } = null!;

        /// <summary>
        /// - Last updated time of the User Group.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Common Name of the User Group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a UserGroupsV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserGroupsV2(string name, UserGroupsV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/userGroupsV2:UserGroupsV2", name, args ?? new UserGroupsV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private UserGroupsV2(string name, Input<string> id, UserGroupsV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/userGroupsV2:UserGroupsV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserGroupsV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserGroupsV2 Get(string name, Input<string> id, UserGroupsV2State? state = null, CustomResourceOptions? options = null)
        {
            return new UserGroupsV2(name, id, state, options);
        }
    }

    public sealed class UserGroupsV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Optional) Identifier for the User Group in the form of a distinguished name.
        /// </summary>
        [Input("distinguishedName")]
        public Input<string>? DistinguishedName { get; set; }

        /// <summary>
        /// The External Identifier of the User Group.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
        /// </summary>
        [Input("groupType", required: true)]
        public Input<string> GroupType { get; set; } = null!;

        /// <summary>
        /// -(Required) Identifier of the IDP for the User Group.
        /// </summary>
        [Input("idpId", required: true)]
        public Input<string> IdpId { get; set; } = null!;

        /// <summary>
        /// -(Optional) Common Name of the User Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public UserGroupsV2Args()
        {
        }
        public static new UserGroupsV2Args Empty => new UserGroupsV2Args();
    }

    public sealed class UserGroupsV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - User or Service who created the User Group.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// - Creation time of the User Group.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// -(Optional) Identifier for the User Group in the form of a distinguished name.
        /// </summary>
        [Input("distinguishedName")]
        public Input<string>? DistinguishedName { get; set; }

        /// <summary>
        /// The External Identifier of the User Group.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// -(Required) Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
        /// </summary>
        [Input("groupType")]
        public Input<string>? GroupType { get; set; }

        /// <summary>
        /// -(Required) Identifier of the IDP for the User Group.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// - Last updated time of the User Group.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        /// <summary>
        /// -(Optional) Common Name of the User Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public UserGroupsV2State()
        {
        }
        public static new UserGroupsV2State Empty => new UserGroupsV2State();
    }
}
