// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetUserGroup
    {
        /// <summary>
        /// Provides a datasource to retrieve a user group based on the input parameters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var usergroup = Nutanix.GetUserGroup.Invoke(new()
        ///     {
        ///         UserGroupId = "dd30a856-8e72-4158-b716-98455ceda220",
        ///     });
        /// 
        ///     var usergroupbyname = Nutanix.GetUserGroup.Invoke(new()
        ///     {
        ///         UserGroupName = "example-group-1",
        ///     });
        /// 
        ///     var test = Nutanix.GetUserGroup.Invoke(new()
        ///     {
        ///         UserGroupDistinguishedName = "cn=example-group-1,cn=users,dc=ntnxlab,dc=local",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserGroupResult> InvokeAsync(GetUserGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserGroupResult>("nutanix:index/getUserGroup:getUserGroup", args ?? new GetUserGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve a user group based on the input parameters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var usergroup = Nutanix.GetUserGroup.Invoke(new()
        ///     {
        ///         UserGroupId = "dd30a856-8e72-4158-b716-98455ceda220",
        ///     });
        /// 
        ///     var usergroupbyname = Nutanix.GetUserGroup.Invoke(new()
        ///     {
        ///         UserGroupName = "example-group-1",
        ///     });
        /// 
        ///     var test = Nutanix.GetUserGroup.Invoke(new()
        ///     {
        ///         UserGroupDistinguishedName = "cn=example-group-1,cn=users,dc=ntnxlab,dc=local",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserGroupResult> Invoke(GetUserGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserGroupResult>("nutanix:index/getUserGroup:getUserGroup", args ?? new GetUserGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<Inputs.GetUserGroupCategoryArgs>? _categories;

        /// <summary>
        /// - The Distinguished Categories for the user group.
        /// </summary>
        public List<Inputs.GetUserGroupCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetUserGroupCategoryArgs>());
            set => _categories = value;
        }

        [Input("ownerReference")]
        private Dictionary<string, string>? _ownerReference;

        /// <summary>
        /// - The reference to a user.
        /// </summary>
        public Dictionary<string, string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new Dictionary<string, string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private Dictionary<string, string>? _projectReference;

        /// <summary>
        /// - The Distinguished The reference to a project.
        /// </summary>
        public Dictionary<string, string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new Dictionary<string, string>());
            set => _projectReference = value;
        }

        /// <summary>
        /// The distinguished name for the user group
        /// </summary>
        [Input("userGroupDistinguishedName")]
        public string? UserGroupDistinguishedName { get; set; }

        /// <summary>
        /// - (Optional) The UUID for the user group
        /// </summary>
        [Input("userGroupId")]
        public string? UserGroupId { get; set; }

        /// <summary>
        /// - (Optional) The name for the user group
        /// </summary>
        [Input("userGroupName")]
        public string? UserGroupName { get; set; }

        public GetUserGroupArgs()
        {
        }
        public static new GetUserGroupArgs Empty => new GetUserGroupArgs();
    }

    public sealed class GetUserGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private InputList<Inputs.GetUserGroupCategoryInputArgs>? _categories;

        /// <summary>
        /// - The Distinguished Categories for the user group.
        /// </summary>
        public InputList<Inputs.GetUserGroupCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetUserGroupCategoryInputArgs>());
            set => _categories = value;
        }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;

        /// <summary>
        /// - The reference to a user.
        /// </summary>
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;

        /// <summary>
        /// - The Distinguished The reference to a project.
        /// </summary>
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        /// <summary>
        /// The distinguished name for the user group
        /// </summary>
        [Input("userGroupDistinguishedName")]
        public Input<string>? UserGroupDistinguishedName { get; set; }

        /// <summary>
        /// - (Optional) The UUID for the user group
        /// </summary>
        [Input("userGroupId")]
        public Input<string>? UserGroupId { get; set; }

        /// <summary>
        /// - (Optional) The name for the user group
        /// </summary>
        [Input("userGroupName")]
        public Input<string>? UserGroupName { get; set; }

        public GetUserGroupInvokeArgs()
        {
        }
        public static new GetUserGroupInvokeArgs Empty => new GetUserGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserGroupResult
    {
        /// <summary>
        /// - List of ACP references. See #reference for more details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserGroupAccessControlPolicyReferenceListResult> AccessControlPolicyReferenceLists;
        /// <summary>
        /// The version of the API.
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// - The Distinguished Categories for the user group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserGroupCategoryResult> Categories;
        /// <summary>
        /// - A Directory Service User Group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserGroupDirectoryServiceUserGroupResult> DirectoryServiceUserGroups;
        /// <summary>
        /// - The display name of the user group.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - The user group kind metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// - The reference to a user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> OwnerReference;
        /// <summary>
        /// - The Distinguished The reference to a project.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ProjectReference;
        /// <summary>
        /// - A list of projects the user is part of. See #reference for more details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserGroupProjectReferenceListResult> ProjectReferenceLists;
        /// <summary>
        /// - The state of the entity.
        /// </summary>
        public readonly string State;
        public readonly string? UserGroupDistinguishedName;
        public readonly string? UserGroupId;
        public readonly string? UserGroupName;
        /// <summary>
        /// - The type of the user group.
        /// </summary>
        public readonly string UserGroupType;

        [OutputConstructor]
        private GetUserGroupResult(
            ImmutableArray<Outputs.GetUserGroupAccessControlPolicyReferenceListResult> accessControlPolicyReferenceLists,

            string apiVersion,

            ImmutableArray<Outputs.GetUserGroupCategoryResult> categories,

            ImmutableArray<Outputs.GetUserGroupDirectoryServiceUserGroupResult> directoryServiceUserGroups,

            string displayName,

            string id,

            ImmutableDictionary<string, string> metadata,

            ImmutableDictionary<string, string> ownerReference,

            ImmutableDictionary<string, string>? projectReference,

            ImmutableArray<Outputs.GetUserGroupProjectReferenceListResult> projectReferenceLists,

            string state,

            string? userGroupDistinguishedName,

            string? userGroupId,

            string? userGroupName,

            string userGroupType)
        {
            AccessControlPolicyReferenceLists = accessControlPolicyReferenceLists;
            ApiVersion = apiVersion;
            Categories = categories;
            DirectoryServiceUserGroups = directoryServiceUserGroups;
            DisplayName = displayName;
            Id = id;
            Metadata = metadata;
            OwnerReference = ownerReference;
            ProjectReference = projectReference;
            ProjectReferenceLists = projectReferenceLists;
            State = state;
            UserGroupDistinguishedName = userGroupDistinguishedName;
            UserGroupId = userGroupId;
            UserGroupName = userGroupName;
            UserGroupType = userGroupType;
        }
    }
}
