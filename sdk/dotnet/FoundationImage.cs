// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Uploads hypervisor or AOS image to foundation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var nos_image = new Nutanix.FoundationImage("nos-image", new()
    ///     {
    ///         Filename = "nos_image.tar",
    ///         InstallerType = "nos",
    ///         Source = "../../../files/nutanix_installer_x86_64.tar",
    ///     });
    /// 
    ///     var hypervisor_image = new Nutanix.FoundationImage("hypervisor-image", new()
    ///     {
    ///         Filename = "esx_image.iso",
    ///         InstallerType = "esx",
    ///         Source = "../../../files/VMware-Installer.x86_64.iso",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## lifecycle
    /// 
    /// * `Update` : - Resource will trigger new resource create call for any kind of update in resource config and delete existing image from foundation vm.
    /// 
    /// See detailed information in [Nutanix Foundation Image](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjM0MDQ-upload-hypervisor-or-aos-image-to-foundation).
    /// </summary>
    [NutanixResourceType("nutanix:index/foundationImage:FoundationImage")]
    public partial class FoundationImage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - (Required) Name of installer file to be kept in foundation vm.
        /// </summary>
        [Output("filename")]
        public Output<string> Filename { get; private set; } = null!;

        /// <summary>
        /// - If hypervisor ISO is in whitelist.
        /// </summary>
        [Output("inWhitelist")]
        public Output<bool> InWhitelist { get; private set; } = null!;

        /// <summary>
        /// - (Required) One of "kvm", "esx", "hyperv", "xen", or "nos".
        /// </summary>
        [Output("installerType")]
        public Output<string> InstallerType { get; private set; } = null!;

        /// <summary>
        /// - md5sum of the ISO.
        /// </summary>
        [Output("md5sum")]
        public Output<string> Md5sum { get; private set; } = null!;

        /// <summary>
        /// - file location in foundation vm
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// - (Required) Complete path to the file in machine where the .tf  files runs.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;


        /// <summary>
        /// Create a FoundationImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FoundationImage(string name, FoundationImageArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/foundationImage:FoundationImage", name, args ?? new FoundationImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FoundationImage(string name, Input<string> id, FoundationImageState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/foundationImage:FoundationImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FoundationImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FoundationImage Get(string name, Input<string> id, FoundationImageState? state = null, CustomResourceOptions? options = null)
        {
            return new FoundationImage(name, id, state, options);
        }
    }

    public sealed class FoundationImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Required) Name of installer file to be kept in foundation vm.
        /// </summary>
        [Input("filename", required: true)]
        public Input<string> Filename { get; set; } = null!;

        /// <summary>
        /// - (Required) One of "kvm", "esx", "hyperv", "xen", or "nos".
        /// </summary>
        [Input("installerType", required: true)]
        public Input<string> InstallerType { get; set; } = null!;

        /// <summary>
        /// - (Required) Complete path to the file in machine where the .tf  files runs.
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        public FoundationImageArgs()
        {
        }
        public static new FoundationImageArgs Empty => new FoundationImageArgs();
    }

    public sealed class FoundationImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Required) Name of installer file to be kept in foundation vm.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// - If hypervisor ISO is in whitelist.
        /// </summary>
        [Input("inWhitelist")]
        public Input<bool>? InWhitelist { get; set; }

        /// <summary>
        /// - (Required) One of "kvm", "esx", "hyperv", "xen", or "nos".
        /// </summary>
        [Input("installerType")]
        public Input<string>? InstallerType { get; set; }

        /// <summary>
        /// - md5sum of the ISO.
        /// </summary>
        [Input("md5sum")]
        public Input<string>? Md5sum { get; set; }

        /// <summary>
        /// - file location in foundation vm
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// - (Required) Complete path to the file in machine where the .tf  files runs.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public FoundationImageState()
        {
        }
        public static new FoundationImageState Empty => new FoundationImageState();
    }
}
