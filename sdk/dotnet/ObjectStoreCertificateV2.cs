// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// This operation creates a new default certificate and keys. It also creates the alternate FQDNs and alternate IPs for the Object store. The certificate of an Object store can be created when it is in a OBJECT_STORE_AVAILABLE or OBJECT_STORE_CERT_CREATION_FAILED state. If the publicCert, privateKey, and ca values are provided in the request body, these values are used to create the new certificate. If these values are not provided, a new certificate will be generated if 'shouldGenerate' is set to true and if it is set to false, the existing certificate will be used as the new certificate. Optionally, a list of additional alternate FQDNs and alternate IPs can be provided. These alternateFqdns and alternateIps must be included in the CA certificate if it has been provided.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = Pulumi.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Nutanix.GetCertificateV2.Invoke(new()
    ///     {
    ///         ExtId = "ef0a9a54-e7e1-42e2-a59f-de779ec1c9ea",
    ///         ObjectStoreExtId = "ac91151a-28b4-4ffe-b150-6bcb2ec80cd4",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## JSON Example
    /// 
    /// See detailed information in [Nutanix Create a SSL certificate for an Object store V4 ](https://developers.nutanix.com/api-reference?namespace=objects&amp;version=v4.0#tag/ObjectStores/operation/createCertificate).
    /// </summary>
    [NutanixResourceType("nutanix:index/objectStoreCertificateV2:ObjectStoreCertificateV2")]
    public partial class ObjectStoreCertificateV2 : global::Pulumi.CustomResource
    {
        [Output("alternateFqdns")]
        public Output<ImmutableArray<Outputs.ObjectStoreCertificateV2AlternateFqdn>> AlternateFqdns { get; private set; } = null!;

        [Output("alternateIps")]
        public Output<ImmutableArray<Outputs.ObjectStoreCertificateV2AlternateIp>> AlternateIps { get; private set; } = null!;

        /// <summary>
        /// -(Required) The UUID of the certificate of an Object store.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        [Output("links")]
        public Output<ImmutableArray<Outputs.ObjectStoreCertificateV2Link>> Links { get; private set; } = null!;

        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.ObjectStoreCertificateV2Metadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// -(Required) The UUID of the Object store.
        /// </summary>
        [Output("objectStoreExtId")]
        public Output<string> ObjectStoreExtId { get; private set; } = null!;

        /// <summary>
        /// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a ObjectStoreCertificateV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObjectStoreCertificateV2(string name, ObjectStoreCertificateV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/objectStoreCertificateV2:ObjectStoreCertificateV2", name, args ?? new ObjectStoreCertificateV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ObjectStoreCertificateV2(string name, Input<string> id, ObjectStoreCertificateV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/objectStoreCertificateV2:ObjectStoreCertificateV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObjectStoreCertificateV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObjectStoreCertificateV2 Get(string name, Input<string> id, ObjectStoreCertificateV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ObjectStoreCertificateV2(name, id, state, options);
        }
    }

    public sealed class ObjectStoreCertificateV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Required) The UUID of the Object store.
        /// </summary>
        [Input("objectStoreExtId", required: true)]
        public Input<string> ObjectStoreExtId { get; set; } = null!;

        /// <summary>
        /// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public ObjectStoreCertificateV2Args()
        {
        }
        public static new ObjectStoreCertificateV2Args Empty => new ObjectStoreCertificateV2Args();
    }

    public sealed class ObjectStoreCertificateV2State : global::Pulumi.ResourceArgs
    {
        [Input("alternateFqdns")]
        private InputList<Inputs.ObjectStoreCertificateV2AlternateFqdnGetArgs>? _alternateFqdns;
        public InputList<Inputs.ObjectStoreCertificateV2AlternateFqdnGetArgs> AlternateFqdns
        {
            get => _alternateFqdns ?? (_alternateFqdns = new InputList<Inputs.ObjectStoreCertificateV2AlternateFqdnGetArgs>());
            set => _alternateFqdns = value;
        }

        [Input("alternateIps")]
        private InputList<Inputs.ObjectStoreCertificateV2AlternateIpGetArgs>? _alternateIps;
        public InputList<Inputs.ObjectStoreCertificateV2AlternateIpGetArgs> AlternateIps
        {
            get => _alternateIps ?? (_alternateIps = new InputList<Inputs.ObjectStoreCertificateV2AlternateIpGetArgs>());
            set => _alternateIps = value;
        }

        /// <summary>
        /// -(Required) The UUID of the certificate of an Object store.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("links")]
        private InputList<Inputs.ObjectStoreCertificateV2LinkGetArgs>? _links;
        public InputList<Inputs.ObjectStoreCertificateV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ObjectStoreCertificateV2LinkGetArgs>());
            set => _links = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.ObjectStoreCertificateV2MetadataGetArgs>? _metadatas;
        public InputList<Inputs.ObjectStoreCertificateV2MetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.ObjectStoreCertificateV2MetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// -(Required) The UUID of the Object store.
        /// </summary>
        [Input("objectStoreExtId")]
        public Input<string>? ObjectStoreExtId { get; set; }

        /// <summary>
        /// -(Required) Path to a JSON file which contains the public certificates, private key, and CA certificate or chain, along with a list of alternate FQDNs and alternate IPs to create a certificate for the Object store.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public ObjectStoreCertificateV2State()
        {
        }
        public static new ObjectStoreCertificateV2State Empty => new ObjectStoreCertificateV2State();
    }
}
