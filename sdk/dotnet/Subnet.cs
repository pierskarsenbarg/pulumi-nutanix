// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.
    /// </summary>
    [NutanixResourceType("nutanix:index/subnet:Subnet")]
    public partial class Subnet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The version of the API.
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a availability_zone.
        /// </summary>
        [Output("availabilityZoneReference")]
        public Output<ImmutableDictionary<string, string>> AvailabilityZoneReference { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The categories of the resource.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<Outputs.SubnetCategory>> Categories { get; private set; } = null!;

        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// - (Required) The UUID of the cluster.
        /// </summary>
        [Output("clusterUuid")]
        public Output<string?> ClusterUuid { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Default gateway IP address.
        /// </summary>
        [Output("defaultGatewayIp")]
        public Output<string> DefaultGatewayIp { get; private set; } = null!;

        /// <summary>
        /// - (Optional) A description for subnet.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// - (Optional). List of Domain Name Server addresses .
        /// </summary>
        [Output("dhcpDomainNameServerLists")]
        public Output<ImmutableArray<string>> DhcpDomainNameServerLists { get; private set; } = null!;

        /// <summary>
        /// - (Optional).The DNS domain search list .
        /// </summary>
        [Output("dhcpDomainSearchLists")]
        public Output<ImmutableArray<string>> DhcpDomainSearchLists { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Spec for defining DHCP options.
        /// </summary>
        [Output("dhcpOptions")]
        public Output<ImmutableDictionary<string, string>> DhcpOptions { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Host address.
        /// </summary>
        [Output("dhcpServerAddress")]
        public Output<ImmutableDictionary<string, string>> DhcpServerAddress { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Port Number.
        /// </summary>
        [Output("dhcpServerAddressPort")]
        public Output<int> DhcpServerAddressPort { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.
        /// </summary>
        [Output("enableNat")]
        public Output<bool> EnableNat { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Range of IPs.
        /// </summary>
        [Output("ipConfigPoolListRanges")]
        public Output<ImmutableArray<string>> IpConfigPoolListRanges { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Whether the subnet is external subnet or not.
        /// </summary>
        [Output("isExternal")]
        public Output<bool> IsExternal { get; private set; } = null!;

        /// <summary>
        /// - (Required) The subnet kind metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Subnet name (Readonly).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a network_function_chain.
        /// </summary>
        [Output("networkFunctionChainReference")]
        public Output<ImmutableDictionary<string, string>> NetworkFunctionChainReference { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a user.
        /// </summary>
        [Output("ownerReference")]
        public Output<ImmutableDictionary<string, string>> OwnerReference { get; private set; } = null!;

        /// <summary>
        /// - (Optional).
        /// </summary>
        [Output("prefixLength")]
        public Output<int> PrefixLength { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        [Output("projectReference")]
        public Output<ImmutableDictionary<string, string>> ProjectReference { get; private set; } = null!;

        /// <summary>
        /// - The state of the subnet.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Subnet IP address.
        /// </summary>
        [Output("subnetIp")]
        public Output<string> SubnetIp { get; private set; } = null!;

        /// <summary>
        /// - (Optional). Valid Types are ["VLAN", "OVERLAY"]
        /// </summary>
        [Output("subnetType")]
        public Output<string> SubnetType { get; private set; } = null!;

        /// <summary>
        /// - (Optional). For VLAN subnet.
        /// </summary>
        [Output("vlanId")]
        public Output<int> VlanId { get; private set; } = null!;

        /// <summary>
        /// VPC reference uuid
        /// </summary>
        [Output("vpcReferenceUuid")]
        public Output<string> VpcReferenceUuid { get; private set; } = null!;

        /// <summary>
        /// - (Optional).
        /// </summary>
        [Output("vswitchName")]
        public Output<string> VswitchName { get; private set; } = null!;


        /// <summary>
        /// Create a Subnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subnet(string name, SubnetArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/subnet:Subnet", name, args ?? new SubnetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subnet(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/subnet:Subnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subnet Get(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
        {
            return new Subnet(name, id, state, options);
        }
    }

    public sealed class SubnetArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZoneReference")]
        private InputMap<string>? _availabilityZoneReference;

        /// <summary>
        /// - (Optional) The reference to a availability_zone.
        /// </summary>
        public InputMap<string> AvailabilityZoneReference
        {
            get => _availabilityZoneReference ?? (_availabilityZoneReference = new InputMap<string>());
            set => _availabilityZoneReference = value;
        }

        [Input("categories")]
        private InputList<Inputs.SubnetCategoryArgs>? _categories;

        /// <summary>
        /// - (Optional) The categories of the resource.
        /// </summary>
        public InputList<Inputs.SubnetCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.SubnetCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// - (Required) The UUID of the cluster.
        /// </summary>
        [Input("clusterUuid")]
        public Input<string>? ClusterUuid { get; set; }

        /// <summary>
        /// - (Optional) Default gateway IP address.
        /// </summary>
        [Input("defaultGatewayIp")]
        public Input<string>? DefaultGatewayIp { get; set; }

        /// <summary>
        /// - (Optional) A description for subnet.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpDomainNameServerLists")]
        private InputList<string>? _dhcpDomainNameServerLists;

        /// <summary>
        /// - (Optional). List of Domain Name Server addresses .
        /// </summary>
        public InputList<string> DhcpDomainNameServerLists
        {
            get => _dhcpDomainNameServerLists ?? (_dhcpDomainNameServerLists = new InputList<string>());
            set => _dhcpDomainNameServerLists = value;
        }

        [Input("dhcpDomainSearchLists")]
        private InputList<string>? _dhcpDomainSearchLists;

        /// <summary>
        /// - (Optional).The DNS domain search list .
        /// </summary>
        public InputList<string> DhcpDomainSearchLists
        {
            get => _dhcpDomainSearchLists ?? (_dhcpDomainSearchLists = new InputList<string>());
            set => _dhcpDomainSearchLists = value;
        }

        [Input("dhcpOptions")]
        private InputMap<string>? _dhcpOptions;

        /// <summary>
        /// - (Optional) Spec for defining DHCP options.
        /// </summary>
        public InputMap<string> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputMap<string>());
            set => _dhcpOptions = value;
        }

        [Input("dhcpServerAddress")]
        private InputMap<string>? _dhcpServerAddress;

        /// <summary>
        /// - (Optional) Host address.
        /// </summary>
        public InputMap<string> DhcpServerAddress
        {
            get => _dhcpServerAddress ?? (_dhcpServerAddress = new InputMap<string>());
            set => _dhcpServerAddress = value;
        }

        /// <summary>
        /// - (Optional) Port Number.
        /// </summary>
        [Input("dhcpServerAddressPort")]
        public Input<int>? DhcpServerAddressPort { get; set; }

        /// <summary>
        /// - (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.
        /// </summary>
        [Input("enableNat")]
        public Input<bool>? EnableNat { get; set; }

        [Input("ipConfigPoolListRanges")]
        private InputList<string>? _ipConfigPoolListRanges;

        /// <summary>
        /// -(Optional) Range of IPs.
        /// </summary>
        public InputList<string> IpConfigPoolListRanges
        {
            get => _ipConfigPoolListRanges ?? (_ipConfigPoolListRanges = new InputList<string>());
            set => _ipConfigPoolListRanges = value;
        }

        /// <summary>
        /// - (Optional) Whether the subnet is external subnet or not.
        /// </summary>
        [Input("isExternal")]
        public Input<bool>? IsExternal { get; set; }

        /// <summary>
        /// - (Optional) Subnet name (Readonly).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkFunctionChainReference")]
        private InputMap<string>? _networkFunctionChainReference;

        /// <summary>
        /// - (Optional) The reference to a network_function_chain.
        /// </summary>
        public InputMap<string> NetworkFunctionChainReference
        {
            get => _networkFunctionChainReference ?? (_networkFunctionChainReference = new InputMap<string>());
            set => _networkFunctionChainReference = value;
        }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;

        /// <summary>
        /// - (Optional) The reference to a user.
        /// </summary>
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        /// <summary>
        /// - (Optional).
        /// </summary>
        [Input("prefixLength")]
        public Input<int>? PrefixLength { get; set; }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        /// <summary>
        /// - (Optional) Subnet IP address.
        /// </summary>
        [Input("subnetIp")]
        public Input<string>? SubnetIp { get; set; }

        /// <summary>
        /// - (Optional). Valid Types are ["VLAN", "OVERLAY"]
        /// </summary>
        [Input("subnetType", required: true)]
        public Input<string> SubnetType { get; set; } = null!;

        /// <summary>
        /// - (Optional). For VLAN subnet.
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// VPC reference uuid
        /// </summary>
        [Input("vpcReferenceUuid")]
        public Input<string>? VpcReferenceUuid { get; set; }

        /// <summary>
        /// - (Optional).
        /// </summary>
        [Input("vswitchName")]
        public Input<string>? VswitchName { get; set; }

        public SubnetArgs()
        {
        }
        public static new SubnetArgs Empty => new SubnetArgs();
    }

    public sealed class SubnetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The version of the API.
        /// </summary>
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("availabilityZoneReference")]
        private InputMap<string>? _availabilityZoneReference;

        /// <summary>
        /// - (Optional) The reference to a availability_zone.
        /// </summary>
        public InputMap<string> AvailabilityZoneReference
        {
            get => _availabilityZoneReference ?? (_availabilityZoneReference = new InputMap<string>());
            set => _availabilityZoneReference = value;
        }

        [Input("categories")]
        private InputList<Inputs.SubnetCategoryGetArgs>? _categories;

        /// <summary>
        /// - (Optional) The categories of the resource.
        /// </summary>
        public InputList<Inputs.SubnetCategoryGetArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.SubnetCategoryGetArgs>());
            set => _categories = value;
        }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// - (Required) The UUID of the cluster.
        /// </summary>
        [Input("clusterUuid")]
        public Input<string>? ClusterUuid { get; set; }

        /// <summary>
        /// - (Optional) Default gateway IP address.
        /// </summary>
        [Input("defaultGatewayIp")]
        public Input<string>? DefaultGatewayIp { get; set; }

        /// <summary>
        /// - (Optional) A description for subnet.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpDomainNameServerLists")]
        private InputList<string>? _dhcpDomainNameServerLists;

        /// <summary>
        /// - (Optional). List of Domain Name Server addresses .
        /// </summary>
        public InputList<string> DhcpDomainNameServerLists
        {
            get => _dhcpDomainNameServerLists ?? (_dhcpDomainNameServerLists = new InputList<string>());
            set => _dhcpDomainNameServerLists = value;
        }

        [Input("dhcpDomainSearchLists")]
        private InputList<string>? _dhcpDomainSearchLists;

        /// <summary>
        /// - (Optional).The DNS domain search list .
        /// </summary>
        public InputList<string> DhcpDomainSearchLists
        {
            get => _dhcpDomainSearchLists ?? (_dhcpDomainSearchLists = new InputList<string>());
            set => _dhcpDomainSearchLists = value;
        }

        [Input("dhcpOptions")]
        private InputMap<string>? _dhcpOptions;

        /// <summary>
        /// - (Optional) Spec for defining DHCP options.
        /// </summary>
        public InputMap<string> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputMap<string>());
            set => _dhcpOptions = value;
        }

        [Input("dhcpServerAddress")]
        private InputMap<string>? _dhcpServerAddress;

        /// <summary>
        /// - (Optional) Host address.
        /// </summary>
        public InputMap<string> DhcpServerAddress
        {
            get => _dhcpServerAddress ?? (_dhcpServerAddress = new InputMap<string>());
            set => _dhcpServerAddress = value;
        }

        /// <summary>
        /// - (Optional) Port Number.
        /// </summary>
        [Input("dhcpServerAddressPort")]
        public Input<int>? DhcpServerAddressPort { get; set; }

        /// <summary>
        /// - (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.
        /// </summary>
        [Input("enableNat")]
        public Input<bool>? EnableNat { get; set; }

        [Input("ipConfigPoolListRanges")]
        private InputList<string>? _ipConfigPoolListRanges;

        /// <summary>
        /// -(Optional) Range of IPs.
        /// </summary>
        public InputList<string> IpConfigPoolListRanges
        {
            get => _ipConfigPoolListRanges ?? (_ipConfigPoolListRanges = new InputList<string>());
            set => _ipConfigPoolListRanges = value;
        }

        /// <summary>
        /// - (Optional) Whether the subnet is external subnet or not.
        /// </summary>
        [Input("isExternal")]
        public Input<bool>? IsExternal { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// - (Required) The subnet kind metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// - (Optional) Subnet name (Readonly).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkFunctionChainReference")]
        private InputMap<string>? _networkFunctionChainReference;

        /// <summary>
        /// - (Optional) The reference to a network_function_chain.
        /// </summary>
        public InputMap<string> NetworkFunctionChainReference
        {
            get => _networkFunctionChainReference ?? (_networkFunctionChainReference = new InputMap<string>());
            set => _networkFunctionChainReference = value;
        }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;

        /// <summary>
        /// - (Optional) The reference to a user.
        /// </summary>
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        /// <summary>
        /// - (Optional).
        /// </summary>
        [Input("prefixLength")]
        public Input<int>? PrefixLength { get; set; }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        /// <summary>
        /// - The state of the subnet.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// - (Optional) Subnet IP address.
        /// </summary>
        [Input("subnetIp")]
        public Input<string>? SubnetIp { get; set; }

        /// <summary>
        /// - (Optional). Valid Types are ["VLAN", "OVERLAY"]
        /// </summary>
        [Input("subnetType")]
        public Input<string>? SubnetType { get; set; }

        /// <summary>
        /// - (Optional). For VLAN subnet.
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// VPC reference uuid
        /// </summary>
        [Input("vpcReferenceUuid")]
        public Input<string>? VpcReferenceUuid { get; set; }

        /// <summary>
        /// - (Optional).
        /// </summary>
        [Input("vswitchName")]
        public Input<string>? VswitchName { get; set; }

        public SubnetState()
        {
        }
        public static new SubnetState Empty => new SubnetState();
    }
}
