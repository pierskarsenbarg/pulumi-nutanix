// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Perform LCM prechecks for the intended update operation.
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pre_checks = new Nutanix.LcmPrechecksV2("pre-checks", new()
    ///     {
    ///         EntityUpdateSpecs = new[]
    ///         {
    ///             new Nutanix.Inputs.LcmPrechecksV2EntityUpdateSpecArgs
    ///             {
    ///                 EntityUuid = "0c5c9e53-3551-4c5d-b13c-e41c04cbfaf7",
    ///                 ToVersion = "4.0.0",
    ///             },
    ///         },
    ///         XClusterId = "0005a104-0b0b-4b0-8005-0b0b0b0b0b0b",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/lcmPrechecksV2:LcmPrechecksV2")]
    public partial class LcmPrechecksV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of entity update objects for getting recommendations.
        /// </summary>
        [Output("entityUpdateSpecs")]
        public Output<ImmutableArray<Outputs.LcmPrechecksV2EntityUpdateSpec>> EntityUpdateSpecs { get; private set; } = null!;

        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
        /// </summary>
        [Output("managementServer")]
        public Output<Outputs.LcmPrechecksV2ManagementServer?> ManagementServer { get; private set; } = null!;

        /// <summary>
        /// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        [Output("skippedPrecheckFlags")]
        public Output<ImmutableArray<string>> SkippedPrecheckFlags { get; private set; } = null!;

        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Output("xClusterId")]
        public Output<string?> XClusterId { get; private set; } = null!;


        /// <summary>
        /// Create a LcmPrechecksV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LcmPrechecksV2(string name, LcmPrechecksV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/lcmPrechecksV2:LcmPrechecksV2", name, args ?? new LcmPrechecksV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private LcmPrechecksV2(string name, Input<string> id, LcmPrechecksV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/lcmPrechecksV2:LcmPrechecksV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LcmPrechecksV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LcmPrechecksV2 Get(string name, Input<string> id, LcmPrechecksV2State? state = null, CustomResourceOptions? options = null)
        {
            return new LcmPrechecksV2(name, id, state, options);
        }
    }

    public sealed class LcmPrechecksV2Args : global::Pulumi.ResourceArgs
    {
        [Input("entityUpdateSpecs", required: true)]
        private InputList<Inputs.LcmPrechecksV2EntityUpdateSpecArgs>? _entityUpdateSpecs;

        /// <summary>
        /// List of entity update objects for getting recommendations.
        /// </summary>
        public InputList<Inputs.LcmPrechecksV2EntityUpdateSpecArgs> EntityUpdateSpecs
        {
            get => _entityUpdateSpecs ?? (_entityUpdateSpecs = new InputList<Inputs.LcmPrechecksV2EntityUpdateSpecArgs>());
            set => _entityUpdateSpecs = value;
        }

        /// <summary>
        /// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
        /// </summary>
        [Input("managementServer")]
        public Input<Inputs.LcmPrechecksV2ManagementServerArgs>? ManagementServer { get; set; }

        [Input("skippedPrecheckFlags")]
        private InputList<string>? _skippedPrecheckFlags;

        /// <summary>
        /// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        public InputList<string> SkippedPrecheckFlags
        {
            get => _skippedPrecheckFlags ?? (_skippedPrecheckFlags = new InputList<string>());
            set => _skippedPrecheckFlags = value;
        }

        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public Input<string>? XClusterId { get; set; }

        public LcmPrechecksV2Args()
        {
        }
        public static new LcmPrechecksV2Args Empty => new LcmPrechecksV2Args();
    }

    public sealed class LcmPrechecksV2State : global::Pulumi.ResourceArgs
    {
        [Input("entityUpdateSpecs")]
        private InputList<Inputs.LcmPrechecksV2EntityUpdateSpecGetArgs>? _entityUpdateSpecs;

        /// <summary>
        /// List of entity update objects for getting recommendations.
        /// </summary>
        public InputList<Inputs.LcmPrechecksV2EntityUpdateSpecGetArgs> EntityUpdateSpecs
        {
            get => _entityUpdateSpecs ?? (_entityUpdateSpecs = new InputList<Inputs.LcmPrechecksV2EntityUpdateSpecGetArgs>());
            set => _entityUpdateSpecs = value;
        }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
        /// </summary>
        [Input("managementServer")]
        public Input<Inputs.LcmPrechecksV2ManagementServerGetArgs>? ManagementServer { get; set; }

        [Input("skippedPrecheckFlags")]
        private InputList<string>? _skippedPrecheckFlags;

        /// <summary>
        /// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        public InputList<string> SkippedPrecheckFlags
        {
            get => _skippedPrecheckFlags ?? (_skippedPrecheckFlags = new InputList<string>());
            set => _skippedPrecheckFlags = value;
        }

        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public Input<string>? XClusterId { get; set; }

        public LcmPrechecksV2State()
        {
        }
        public static new LcmPrechecksV2State Empty => new LcmPrechecksV2State();
    }
}
