// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a Nutanix Image resource to Create a image.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Nutanix.Image("test", new()
    ///     {
    ///         Description = "Ubuntu",
    ///         SourceUri = "http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The version of the API.
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The supported CPU architecture for a disk image.
        /// </summary>
        [Output("architecture")]
        public Output<string> Architecture { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a availability_zone.
        /// </summary>
        [Output("availabilityZoneReference")]
        public Output<ImmutableDictionary<string, string>> AvailabilityZoneReference { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Categories for the image.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<Outputs.ImageCategory>> Categories { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
        /// </summary>
        [Output("checksum")]
        public Output<ImmutableDictionary<string, string>> Checksum { get; private set; } = null!;

        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        [Output("clusterReferences")]
        public Output<ImmutableArray<Outputs.ImageClusterReference>> ClusterReferences { get; private set; } = null!;

        [Output("clusterUuid")]
        public Output<string> ClusterUuid { get; private set; } = null!;

        [Output("currentClusterReferenceLists")]
        public Output<ImmutableArray<Outputs.ImageCurrentClusterReferenceList>> CurrentClusterReferenceLists { get; private set; } = null!;

        /// <summary>
        /// - (Optional) A description for image.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The type of image.
        /// </summary>
        [Output("imageType")]
        public Output<string> ImageType { get; private set; } = null!;

        /// <summary>
        /// - The image kind metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// - (Required) The name for the image.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a user.
        /// </summary>
        [Output("ownerReference")]
        public Output<ImmutableDictionary<string, string>> OwnerReference { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        [Output("projectReference")]
        public Output<ImmutableDictionary<string, string>?> ProjectReference { get; private set; } = null!;

        /// <summary>
        /// - List of URIs where the raw image data can be accessed.
        /// </summary>
        [Output("retrievalUriLists")]
        public Output<ImmutableArray<string>> RetrievalUriLists { get; private set; } = null!;

        /// <summary>
        /// - The size of the image in bytes.
        /// </summary>
        [Output("sizeBytes")]
        public Output<int> SizeBytes { get; private set; } = null!;

        /// <summary>
        /// - (Optional) A local path to upload an image.
        /// </summary>
        [Output("sourcePath")]
        public Output<string> SourcePath { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The source URI points at the location of the source image which is used to create/update image.
        /// </summary>
        [Output("sourceUri")]
        public Output<string> SourceUri { get; private set; } = null!;

        /// <summary>
        /// - The state of the image.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The image version.
        /// </summary>
        [Output("version")]
        public Output<ImmutableDictionary<string, string>> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/image:Image", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
        {
            return new Image(name, id, state, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Optional) The supported CPU architecture for a disk image.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("availabilityZoneReference")]
        private InputMap<string>? _availabilityZoneReference;

        /// <summary>
        /// - (Optional) The reference to a availability_zone.
        /// </summary>
        public InputMap<string> AvailabilityZoneReference
        {
            get => _availabilityZoneReference ?? (_availabilityZoneReference = new InputMap<string>());
            set => _availabilityZoneReference = value;
        }

        [Input("categories")]
        private InputList<Inputs.ImageCategoryArgs>? _categories;

        /// <summary>
        /// - (Optional) Categories for the image.
        /// </summary>
        public InputList<Inputs.ImageCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.ImageCategoryArgs>());
            set => _categories = value;
        }

        [Input("checksum")]
        private InputMap<string>? _checksum;

        /// <summary>
        /// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
        /// </summary>
        public InputMap<string> Checksum
        {
            get => _checksum ?? (_checksum = new InputMap<string>());
            set => _checksum = value;
        }

        [Input("clusterReferences")]
        private InputList<Inputs.ImageClusterReferenceArgs>? _clusterReferences;
        public InputList<Inputs.ImageClusterReferenceArgs> ClusterReferences
        {
            get => _clusterReferences ?? (_clusterReferences = new InputList<Inputs.ImageClusterReferenceArgs>());
            set => _clusterReferences = value;
        }

        /// <summary>
        /// - (Optional) A description for image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// - (Optional) The type of image.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// - (Required) The name for the image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;

        /// <summary>
        /// - (Optional) The reference to a user.
        /// </summary>
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        /// <summary>
        /// - (Optional) A local path to upload an image.
        /// </summary>
        [Input("sourcePath")]
        public Input<string>? SourcePath { get; set; }

        /// <summary>
        /// - (Optional) The source URI points at the location of the source image which is used to create/update image.
        /// </summary>
        [Input("sourceUri")]
        public Input<string>? SourceUri { get; set; }

        [Input("version")]
        private InputMap<string>? _version;

        /// <summary>
        /// - (Optional) The image version.
        /// </summary>
        public InputMap<string> Version
        {
            get => _version ?? (_version = new InputMap<string>());
            set => _version = value;
        }

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }

    public sealed class ImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The version of the API.
        /// </summary>
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        /// <summary>
        /// - (Optional) The supported CPU architecture for a disk image.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("availabilityZoneReference")]
        private InputMap<string>? _availabilityZoneReference;

        /// <summary>
        /// - (Optional) The reference to a availability_zone.
        /// </summary>
        public InputMap<string> AvailabilityZoneReference
        {
            get => _availabilityZoneReference ?? (_availabilityZoneReference = new InputMap<string>());
            set => _availabilityZoneReference = value;
        }

        [Input("categories")]
        private InputList<Inputs.ImageCategoryGetArgs>? _categories;

        /// <summary>
        /// - (Optional) Categories for the image.
        /// </summary>
        public InputList<Inputs.ImageCategoryGetArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.ImageCategoryGetArgs>());
            set => _categories = value;
        }

        [Input("checksum")]
        private InputMap<string>? _checksum;

        /// <summary>
        /// - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
        /// </summary>
        public InputMap<string> Checksum
        {
            get => _checksum ?? (_checksum = new InputMap<string>());
            set => _checksum = value;
        }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("clusterReferences")]
        private InputList<Inputs.ImageClusterReferenceGetArgs>? _clusterReferences;
        public InputList<Inputs.ImageClusterReferenceGetArgs> ClusterReferences
        {
            get => _clusterReferences ?? (_clusterReferences = new InputList<Inputs.ImageClusterReferenceGetArgs>());
            set => _clusterReferences = value;
        }

        [Input("clusterUuid")]
        public Input<string>? ClusterUuid { get; set; }

        [Input("currentClusterReferenceLists")]
        private InputList<Inputs.ImageCurrentClusterReferenceListGetArgs>? _currentClusterReferenceLists;
        public InputList<Inputs.ImageCurrentClusterReferenceListGetArgs> CurrentClusterReferenceLists
        {
            get => _currentClusterReferenceLists ?? (_currentClusterReferenceLists = new InputList<Inputs.ImageCurrentClusterReferenceListGetArgs>());
            set => _currentClusterReferenceLists = value;
        }

        /// <summary>
        /// - (Optional) A description for image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// - (Optional) The type of image.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// - The image kind metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// - (Required) The name for the image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;

        /// <summary>
        /// - (Optional) The reference to a user.
        /// </summary>
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        [Input("retrievalUriLists")]
        private InputList<string>? _retrievalUriLists;

        /// <summary>
        /// - List of URIs where the raw image data can be accessed.
        /// </summary>
        public InputList<string> RetrievalUriLists
        {
            get => _retrievalUriLists ?? (_retrievalUriLists = new InputList<string>());
            set => _retrievalUriLists = value;
        }

        /// <summary>
        /// - The size of the image in bytes.
        /// </summary>
        [Input("sizeBytes")]
        public Input<int>? SizeBytes { get; set; }

        /// <summary>
        /// - (Optional) A local path to upload an image.
        /// </summary>
        [Input("sourcePath")]
        public Input<string>? SourcePath { get; set; }

        /// <summary>
        /// - (Optional) The source URI points at the location of the source image which is used to create/update image.
        /// </summary>
        [Input("sourceUri")]
        public Input<string>? SourceUri { get; set; }

        /// <summary>
        /// - The state of the image.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("version")]
        private InputMap<string>? _version;

        /// <summary>
        /// - (Optional) The image version.
        /// </summary>
        public InputMap<string> Version
        {
            get => _version ?? (_version = new InputMap<string>());
            set => _version = value;
        }

        public ImageState()
        {
        }
        public static new ImageState Empty => new ImageState();
    }
}
