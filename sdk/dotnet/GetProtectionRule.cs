// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetProtectionRule
    {
        /// <summary>
        /// Describe a Nutanix Protection Rule and its values (if it has them).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = PiersKarsenbarg.Nutanix;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var protectionRuleTest = new Nutanix.ProtectionRule("protectionRuleTest", new()
        ///     {
        ///         Description = "test",
        ///         OrderedAvailabilityZoneLists = new[]
        ///         {
        ///             new Nutanix.Inputs.ProtectionRuleOrderedAvailabilityZoneListArgs
        ///             {
        ///                 AvailabilityZoneUrl = "ab788130-0820-4d07-a1b5-b0ba4d3a42asd",
        ///             },
        ///         },
        ///         AvailabilityZoneConnectivityLists = new[]
        ///         {
        ///             new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs
        ///             {
        ///                 SnapshotScheduleLists = new[]
        ///                 {
        ///                     new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs
        ///                     {
        ///                         RecoveryPointObjectiveSecs = 3600,
        ///                         SnapshotType = "CRASH_CONSISTENT",
        ///                         LocalSnapshotRetentionPolicy = new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs
        ///                         {
        ///                             NumSnapshots = 1,
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///         CategoryFilter = new Nutanix.Inputs.ProtectionRuleCategoryFilterArgs
        ///         {
        ///             Params = new[]
        ///             {
        ///                 new Nutanix.Inputs.ProtectionRuleCategoryFilterParamArgs
        ///                 {
        ///                     Name = "Environment",
        ///                     Values = new[]
        ///                     {
        ///                         "Dev",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var test = Nutanix.GetProtectionRule.Invoke(new()
        ///     {
        ///         ProtectionRuleId = protectionRuleTest.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProtectionRuleResult> InvokeAsync(GetProtectionRuleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProtectionRuleResult>("nutanix:index/getProtectionRule:getProtectionRule", args ?? new GetProtectionRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Describe a Nutanix Protection Rule and its values (if it has them).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = PiersKarsenbarg.Nutanix;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var protectionRuleTest = new Nutanix.ProtectionRule("protectionRuleTest", new()
        ///     {
        ///         Description = "test",
        ///         OrderedAvailabilityZoneLists = new[]
        ///         {
        ///             new Nutanix.Inputs.ProtectionRuleOrderedAvailabilityZoneListArgs
        ///             {
        ///                 AvailabilityZoneUrl = "ab788130-0820-4d07-a1b5-b0ba4d3a42asd",
        ///             },
        ///         },
        ///         AvailabilityZoneConnectivityLists = new[]
        ///         {
        ///             new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListArgs
        ///             {
        ///                 SnapshotScheduleLists = new[]
        ///                 {
        ///                     new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs
        ///                     {
        ///                         RecoveryPointObjectiveSecs = 3600,
        ///                         SnapshotType = "CRASH_CONSISTENT",
        ///                         LocalSnapshotRetentionPolicy = new Nutanix.Inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs
        ///                         {
        ///                             NumSnapshots = 1,
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///         CategoryFilter = new Nutanix.Inputs.ProtectionRuleCategoryFilterArgs
        ///         {
        ///             Params = new[]
        ///             {
        ///                 new Nutanix.Inputs.ProtectionRuleCategoryFilterParamArgs
        ///                 {
        ///                     Name = "Environment",
        ///                     Values = new[]
        ///                     {
        ///                         "Dev",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var test = Nutanix.GetProtectionRule.Invoke(new()
        ///     {
        ///         ProtectionRuleId = protectionRuleTest.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProtectionRuleResult> Invoke(GetProtectionRuleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProtectionRuleResult>("nutanix:index/getProtectionRule:getProtectionRule", args ?? new GetProtectionRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProtectionRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<Inputs.GetProtectionRuleCategoryArgs>? _categories;
        public List<Inputs.GetProtectionRuleCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetProtectionRuleCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// - (Required) The `id` of the protection rule.
        /// </summary>
        [Input("protectionRuleId")]
        public string? ProtectionRuleId { get; set; }

        [Input("protectionRuleName")]
        public string? ProtectionRuleName { get; set; }

        public GetProtectionRuleArgs()
        {
        }
        public static new GetProtectionRuleArgs Empty => new GetProtectionRuleArgs();
    }

    public sealed class GetProtectionRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private InputList<Inputs.GetProtectionRuleCategoryInputArgs>? _categories;
        public InputList<Inputs.GetProtectionRuleCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetProtectionRuleCategoryInputArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// - (Required) The `id` of the protection rule.
        /// </summary>
        [Input("protectionRuleId")]
        public Input<string>? ProtectionRuleId { get; set; }

        [Input("protectionRuleName")]
        public Input<string>? ProtectionRuleName { get; set; }

        public GetProtectionRuleInvokeArgs()
        {
        }
        public static new GetProtectionRuleInvokeArgs Empty => new GetProtectionRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetProtectionRuleResult
    {
        public readonly string ApiVersion;
        /// <summary>
        /// (Required) This encodes the datapipes between various availability zones and\nthe backup policy of the pipes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProtectionRuleAvailabilityZoneConnectivityListResult> AvailabilityZoneConnectivityLists;
        public readonly ImmutableArray<Outputs.GetProtectionRuleCategoryResult> Categories;
        /// <summary>
        /// (Optional/Computed)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProtectionRuleCategoryFilterResult> CategoryFilters;
        /// <summary>
        /// A description for protection rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// (Optional) the name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Required) A list of availability zones, each of which, receives a replica\nof the data for the entities protected by this protection rule.
        /// * `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.
        /// * `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProtectionRuleOrderedAvailabilityZoneListResult> OrderedAvailabilityZoneLists;
        public readonly ImmutableArray<Outputs.GetProtectionRuleOwnerReferenceResult> OwnerReferences;
        public readonly ImmutableArray<Outputs.GetProtectionRuleProjectReferenceResult> ProjectReferences;
        public readonly string? ProtectionRuleId;
        public readonly string? ProtectionRuleName;
        public readonly string StartTime;
        public readonly string State;

        [OutputConstructor]
        private GetProtectionRuleResult(
            string apiVersion,

            ImmutableArray<Outputs.GetProtectionRuleAvailabilityZoneConnectivityListResult> availabilityZoneConnectivityLists,

            ImmutableArray<Outputs.GetProtectionRuleCategoryResult> categories,

            ImmutableArray<Outputs.GetProtectionRuleCategoryFilterResult> categoryFilters,

            string description,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            ImmutableArray<Outputs.GetProtectionRuleOrderedAvailabilityZoneListResult> orderedAvailabilityZoneLists,

            ImmutableArray<Outputs.GetProtectionRuleOwnerReferenceResult> ownerReferences,

            ImmutableArray<Outputs.GetProtectionRuleProjectReferenceResult> projectReferences,

            string? protectionRuleId,

            string? protectionRuleName,

            string startTime,

            string state)
        {
            ApiVersion = apiVersion;
            AvailabilityZoneConnectivityLists = availabilityZoneConnectivityLists;
            Categories = categories;
            CategoryFilters = categoryFilters;
            Description = description;
            Id = id;
            Metadata = metadata;
            Name = name;
            OrderedAvailabilityZoneLists = orderedAvailabilityZoneLists;
            OwnerReferences = ownerReferences;
            ProjectReferences = projectReferences;
            ProtectionRuleId = protectionRuleId;
            ProtectionRuleName = protectionRuleName;
            StartTime = startTime;
            State = state;
        }
    }
}
