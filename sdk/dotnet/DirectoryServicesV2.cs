// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to Create a Directory Service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Add Directory Service .
    ///     var active_directory = new Nutanix.DirectoryServicesV2("active-directory", new()
    ///     {
    ///         Url = "ldap://10.xx.xx.xx:xxxx",
    ///         DirectoryType = "ACTIVE_DIRECTORY",
    ///         DomainName = "nutanix.com",
    ///         ServiceAccounts = new[]
    ///         {
    ///             new Nutanix.Inputs.DirectoryServicesV2ServiceAccountArgs
    ///             {
    ///                 Username = "username",
    ///                 Password = "password",
    ///             },
    ///         },
    ///         WhiteListedGroups = new[]
    ///         {
    ///             "example",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/directoryServicesV2:DirectoryServicesV2")]
    public partial class DirectoryServicesV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - User or Service who created the Directory Service.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// - Creation time of the Directory Service.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// -(Required) Type of Directory Service, Supported values are: "ACTIVE_DIRECTORY" (Directory Service type is Active Directory.) and "OPEN_LDAP" (Directory Service type is Open LDAP.)
        /// </summary>
        [Output("directoryType")]
        public Output<string> DirectoryType { get; private set; } = null!;

        /// <summary>
        /// -(Required) Domain name for the Directory Service.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Group membership search type for the Directory Service. Supported values are: "NON_RECURSIVE" (Doesn't search recursively within groups.) and "RECURSIVE" (Searches recursively within groups.)
        /// </summary>
        [Output("groupSearchType")]
        public Output<string> GroupSearchType { get; private set; } = null!;

        /// <summary>
        /// - Last updated time of the Directory Service.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// -(Required) Name for the Directory Service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Configuration for OpenLDAP Directory Service.
        /// </summary>
        [Output("openLdapConfigurations")]
        public Output<ImmutableArray<Outputs.DirectoryServicesV2OpenLdapConfiguration>> OpenLdapConfigurations { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Secondary URL for the Directory Service.
        /// </summary>
        [Output("secondaryUrls")]
        public Output<ImmutableArray<string>> SecondaryUrls { get; private set; } = null!;

        /// <summary>
        /// -(Required) Information of Service account to connect to the Directory Service.
        /// </summary>
        [Output("serviceAccounts")]
        public Output<ImmutableArray<Outputs.DirectoryServicesV2ServiceAccount>> ServiceAccounts { get; private set; } = null!;

        /// <summary>
        /// -(Required) URL for the Directory Service.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// -(Optional) List of allowed User Groups for the Directory Service.
        /// </summary>
        [Output("whiteListedGroups")]
        public Output<ImmutableArray<string>> WhiteListedGroups { get; private set; } = null!;


        /// <summary>
        /// Create a DirectoryServicesV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DirectoryServicesV2(string name, DirectoryServicesV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/directoryServicesV2:DirectoryServicesV2", name, args ?? new DirectoryServicesV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private DirectoryServicesV2(string name, Input<string> id, DirectoryServicesV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/directoryServicesV2:DirectoryServicesV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DirectoryServicesV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DirectoryServicesV2 Get(string name, Input<string> id, DirectoryServicesV2State? state = null, CustomResourceOptions? options = null)
        {
            return new DirectoryServicesV2(name, id, state, options);
        }
    }

    public sealed class DirectoryServicesV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Required) Type of Directory Service, Supported values are: "ACTIVE_DIRECTORY" (Directory Service type is Active Directory.) and "OPEN_LDAP" (Directory Service type is Open LDAP.)
        /// </summary>
        [Input("directoryType", required: true)]
        public Input<string> DirectoryType { get; set; } = null!;

        /// <summary>
        /// -(Required) Domain name for the Directory Service.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// -(Optional) Group membership search type for the Directory Service. Supported values are: "NON_RECURSIVE" (Doesn't search recursively within groups.) and "RECURSIVE" (Searches recursively within groups.)
        /// </summary>
        [Input("groupSearchType")]
        public Input<string>? GroupSearchType { get; set; }

        /// <summary>
        /// -(Required) Name for the Directory Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("openLdapConfigurations")]
        private InputList<Inputs.DirectoryServicesV2OpenLdapConfigurationArgs>? _openLdapConfigurations;

        /// <summary>
        /// -(Optional) Configuration for OpenLDAP Directory Service.
        /// </summary>
        public InputList<Inputs.DirectoryServicesV2OpenLdapConfigurationArgs> OpenLdapConfigurations
        {
            get => _openLdapConfigurations ?? (_openLdapConfigurations = new InputList<Inputs.DirectoryServicesV2OpenLdapConfigurationArgs>());
            set => _openLdapConfigurations = value;
        }

        [Input("secondaryUrls")]
        private InputList<string>? _secondaryUrls;

        /// <summary>
        /// -(Optional) Secondary URL for the Directory Service.
        /// </summary>
        public InputList<string> SecondaryUrls
        {
            get => _secondaryUrls ?? (_secondaryUrls = new InputList<string>());
            set => _secondaryUrls = value;
        }

        [Input("serviceAccounts", required: true)]
        private InputList<Inputs.DirectoryServicesV2ServiceAccountArgs>? _serviceAccounts;

        /// <summary>
        /// -(Required) Information of Service account to connect to the Directory Service.
        /// </summary>
        public InputList<Inputs.DirectoryServicesV2ServiceAccountArgs> ServiceAccounts
        {
            get => _serviceAccounts ?? (_serviceAccounts = new InputList<Inputs.DirectoryServicesV2ServiceAccountArgs>());
            set => _serviceAccounts = value;
        }

        /// <summary>
        /// -(Required) URL for the Directory Service.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        [Input("whiteListedGroups")]
        private InputList<string>? _whiteListedGroups;

        /// <summary>
        /// -(Optional) List of allowed User Groups for the Directory Service.
        /// </summary>
        public InputList<string> WhiteListedGroups
        {
            get => _whiteListedGroups ?? (_whiteListedGroups = new InputList<string>());
            set => _whiteListedGroups = value;
        }

        public DirectoryServicesV2Args()
        {
        }
        public static new DirectoryServicesV2Args Empty => new DirectoryServicesV2Args();
    }

    public sealed class DirectoryServicesV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - User or Service who created the Directory Service.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// - Creation time of the Directory Service.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// -(Required) Type of Directory Service, Supported values are: "ACTIVE_DIRECTORY" (Directory Service type is Active Directory.) and "OPEN_LDAP" (Directory Service type is Open LDAP.)
        /// </summary>
        [Input("directoryType")]
        public Input<string>? DirectoryType { get; set; }

        /// <summary>
        /// -(Required) Domain name for the Directory Service.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// -(Optional) Group membership search type for the Directory Service. Supported values are: "NON_RECURSIVE" (Doesn't search recursively within groups.) and "RECURSIVE" (Searches recursively within groups.)
        /// </summary>
        [Input("groupSearchType")]
        public Input<string>? GroupSearchType { get; set; }

        /// <summary>
        /// - Last updated time of the Directory Service.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        /// <summary>
        /// -(Required) Name for the Directory Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("openLdapConfigurations")]
        private InputList<Inputs.DirectoryServicesV2OpenLdapConfigurationGetArgs>? _openLdapConfigurations;

        /// <summary>
        /// -(Optional) Configuration for OpenLDAP Directory Service.
        /// </summary>
        public InputList<Inputs.DirectoryServicesV2OpenLdapConfigurationGetArgs> OpenLdapConfigurations
        {
            get => _openLdapConfigurations ?? (_openLdapConfigurations = new InputList<Inputs.DirectoryServicesV2OpenLdapConfigurationGetArgs>());
            set => _openLdapConfigurations = value;
        }

        [Input("secondaryUrls")]
        private InputList<string>? _secondaryUrls;

        /// <summary>
        /// -(Optional) Secondary URL for the Directory Service.
        /// </summary>
        public InputList<string> SecondaryUrls
        {
            get => _secondaryUrls ?? (_secondaryUrls = new InputList<string>());
            set => _secondaryUrls = value;
        }

        [Input("serviceAccounts")]
        private InputList<Inputs.DirectoryServicesV2ServiceAccountGetArgs>? _serviceAccounts;

        /// <summary>
        /// -(Required) Information of Service account to connect to the Directory Service.
        /// </summary>
        public InputList<Inputs.DirectoryServicesV2ServiceAccountGetArgs> ServiceAccounts
        {
            get => _serviceAccounts ?? (_serviceAccounts = new InputList<Inputs.DirectoryServicesV2ServiceAccountGetArgs>());
            set => _serviceAccounts = value;
        }

        /// <summary>
        /// -(Required) URL for the Directory Service.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("whiteListedGroups")]
        private InputList<string>? _whiteListedGroups;

        /// <summary>
        /// -(Optional) List of allowed User Groups for the Directory Service.
        /// </summary>
        public InputList<string> WhiteListedGroups
        {
            get => _whiteListedGroups ?? (_whiteListedGroups = new InputList<string>());
            set => _whiteListedGroups = value;
        }

        public DirectoryServicesV2State()
        {
        }
        public static new DirectoryServicesV2State Empty => new DirectoryServicesV2State();
    }
}
