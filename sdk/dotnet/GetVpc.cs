// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetVpc
    {
        /// <summary>
        /// Provides a datasource to retrieve VPC with VpcUuid or VpcName .
        /// </summary>
        public static Task<GetVpcResult> InvokeAsync(GetVpcArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcResult>("nutanix:index/getVpc:getVpc", args ?? new GetVpcArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve VPC with VpcUuid or VpcName .
        /// </summary>
        public static Output<GetVpcResult> Invoke(GetVpcInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcResult>("nutanix:index/getVpc:getVpc", args ?? new GetVpcInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve VPC with VpcUuid or VpcName .
        /// </summary>
        public static Output<GetVpcResult> Invoke(GetVpcInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcResult>("nutanix:index/getVpc:getVpc", args ?? new GetVpcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// vpc Name
        /// </summary>
        [Input("vpcName")]
        public string? VpcName { get; set; }

        /// <summary>
        /// vpc UUID
        /// </summary>
        [Input("vpcUuid")]
        public string? VpcUuid { get; set; }

        public GetVpcArgs()
        {
        }
        public static new GetVpcArgs Empty => new GetVpcArgs();
    }

    public sealed class GetVpcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// vpc Name
        /// </summary>
        [Input("vpcName")]
        public Input<string>? VpcName { get; set; }

        /// <summary>
        /// vpc UUID
        /// </summary>
        [Input("vpcUuid")]
        public Input<string>? VpcUuid { get; set; }

        public GetVpcInvokeArgs()
        {
        }
        public static new GetVpcInvokeArgs Empty => new GetVpcInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcResult
    {
        /// <summary>
        /// The version of the API.
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - The vpc kind metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// VPC input spec
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcSpecResult> Specs;
        /// <summary>
        /// VPC output status
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcStatusResult> Statuses;
        public readonly string? VpcName;
        public readonly string? VpcUuid;

        [OutputConstructor]
        private GetVpcResult(
            string apiVersion,

            string id,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetVpcSpecResult> specs,

            ImmutableArray<Outputs.GetVpcStatusResult> statuses,

            string? vpcName,

            string? vpcUuid)
        {
            ApiVersion = apiVersion;
            Id = id;
            Metadata = metadata;
            Specs = specs;
            Statuses = statuses;
            VpcName = vpcName;
            VpcUuid = vpcUuid;
        }
    }
}
