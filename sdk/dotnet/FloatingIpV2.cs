// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides Nutanix resource to create Floating IPs.
    /// 
    /// ## Example1 :  create Floating IP with External Subnet
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // create Floating IP with External Subnet UUID
    ///     var fip_ext_subnet = new Nutanix.FloatingIpV2("fip-ext-subnet", new()
    ///     {
    ///         Description = "example fip  description",
    ///         ExternalSubnetReference = "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example2 :  create Floating IP with External Subnet with vm association
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fip_ext_subnet_vm = new Nutanix.FloatingIpV2("fip-ext-subnet-vm", new()
    ///     {
    ///         Associations = new[]
    ///         {
    ///             new Nutanix.Inputs.FloatingIpV2AssociationArgs
    ///             {
    ///                 VmNicAssociations = new[]
    ///                 {
    ///                     new Nutanix.Inputs.FloatingIpV2AssociationVmNicAssociationArgs
    ///                     {
    ///                         VmNicReference = "31e4b3b1-4b3b-4b3b-4b3b-4b3b4b3b4b3b",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Description = "example fip  description",
    ///         ExternalSubnetReference = "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/floatingIpV2:FloatingIpV2")]
    public partial class FloatingIpV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Association status of floating IP.
        /// </summary>
        [Output("associationStatus")]
        public Output<string> AssociationStatus { get; private set; } = null!;

        /// <summary>
        /// Association of the Floating IP with either NIC or Private IP
        /// </summary>
        [Output("associations")]
        public Output<ImmutableArray<Outputs.FloatingIpV2Association>> Associations { get; private set; } = null!;

        /// <summary>
        /// Description for the Floating IP.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// External subnet reference for the Floating IP to be allocated in on-prem only.
        /// </summary>
        [Output("externalSubnetReference")]
        public Output<string?> ExternalSubnetReference { get; private set; } = null!;

        /// <summary>
        /// Networking common base object
        /// </summary>
        [Output("externalSubnets")]
        public Output<ImmutableArray<Outputs.FloatingIpV2ExternalSubnet>> ExternalSubnets { get; private set; } = null!;

        [Output("floatingIpValue")]
        public Output<string> FloatingIpValue { get; private set; } = null!;

        /// <summary>
        /// Floating IP address.
        /// </summary>
        [Output("floatingIps")]
        public Output<ImmutableArray<Outputs.FloatingIpV2FloatingIp>> FloatingIps { get; private set; } = null!;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.FloatingIpV2Link>> Links { get; private set; } = null!;

        [Output("loadBalancerSessionReference")]
        public Output<string?> LoadBalancerSessionReference { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.FloatingIpV2Metadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// Name of the floating IP.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// VM NIC reference.
        /// </summary>
        [Output("vmNicReference")]
        public Output<string> VmNicReference { get; private set; } = null!;

        /// <summary>
        /// Virtual NIC for projections
        /// </summary>
        [Output("vmNics")]
        public Output<ImmutableArray<Outputs.FloatingIpV2VmNic>> VmNics { get; private set; } = null!;

        /// <summary>
        /// VPC reference UUID
        /// </summary>
        [Output("vpcReference")]
        public Output<string> VpcReference { get; private set; } = null!;

        /// <summary>
        /// Networking common base object
        /// </summary>
        [Output("vpcs")]
        public Output<ImmutableArray<Outputs.FloatingIpV2Vpc>> Vpcs { get; private set; } = null!;


        /// <summary>
        /// Create a FloatingIpV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FloatingIpV2(string name, FloatingIpV2Args? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/floatingIpV2:FloatingIpV2", name, args ?? new FloatingIpV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private FloatingIpV2(string name, Input<string> id, FloatingIpV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/floatingIpV2:FloatingIpV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FloatingIpV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FloatingIpV2 Get(string name, Input<string> id, FloatingIpV2State? state = null, CustomResourceOptions? options = null)
        {
            return new FloatingIpV2(name, id, state, options);
        }
    }

    public sealed class FloatingIpV2Args : global::Pulumi.ResourceArgs
    {
        [Input("associations")]
        private InputList<Inputs.FloatingIpV2AssociationArgs>? _associations;

        /// <summary>
        /// Association of the Floating IP with either NIC or Private IP
        /// </summary>
        public InputList<Inputs.FloatingIpV2AssociationArgs> Associations
        {
            get => _associations ?? (_associations = new InputList<Inputs.FloatingIpV2AssociationArgs>());
            set => _associations = value;
        }

        /// <summary>
        /// Description for the Floating IP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// External subnet reference for the Floating IP to be allocated in on-prem only.
        /// </summary>
        [Input("externalSubnetReference")]
        public Input<string>? ExternalSubnetReference { get; set; }

        [Input("externalSubnets")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetArgs>? _externalSubnets;

        /// <summary>
        /// Networking common base object
        /// </summary>
        public InputList<Inputs.FloatingIpV2ExternalSubnetArgs> ExternalSubnets
        {
            get => _externalSubnets ?? (_externalSubnets = new InputList<Inputs.FloatingIpV2ExternalSubnetArgs>());
            set => _externalSubnets = value;
        }

        [Input("floatingIps")]
        private InputList<Inputs.FloatingIpV2FloatingIpArgs>? _floatingIps;

        /// <summary>
        /// Floating IP address.
        /// </summary>
        public InputList<Inputs.FloatingIpV2FloatingIpArgs> FloatingIps
        {
            get => _floatingIps ?? (_floatingIps = new InputList<Inputs.FloatingIpV2FloatingIpArgs>());
            set => _floatingIps = value;
        }

        [Input("loadBalancerSessionReference")]
        public Input<string>? LoadBalancerSessionReference { get; set; }

        /// <summary>
        /// Name of the floating IP.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// VM NIC reference.
        /// </summary>
        [Input("vmNicReference")]
        public Input<string>? VmNicReference { get; set; }

        [Input("vmNics")]
        private InputList<Inputs.FloatingIpV2VmNicArgs>? _vmNics;

        /// <summary>
        /// Virtual NIC for projections
        /// </summary>
        public InputList<Inputs.FloatingIpV2VmNicArgs> VmNics
        {
            get => _vmNics ?? (_vmNics = new InputList<Inputs.FloatingIpV2VmNicArgs>());
            set => _vmNics = value;
        }

        /// <summary>
        /// VPC reference UUID
        /// </summary>
        [Input("vpcReference")]
        public Input<string>? VpcReference { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.FloatingIpV2VpcArgs>? _vpcs;

        /// <summary>
        /// Networking common base object
        /// </summary>
        public InputList<Inputs.FloatingIpV2VpcArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.FloatingIpV2VpcArgs>());
            set => _vpcs = value;
        }

        public FloatingIpV2Args()
        {
        }
        public static new FloatingIpV2Args Empty => new FloatingIpV2Args();
    }

    public sealed class FloatingIpV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Association status of floating IP.
        /// </summary>
        [Input("associationStatus")]
        public Input<string>? AssociationStatus { get; set; }

        [Input("associations")]
        private InputList<Inputs.FloatingIpV2AssociationGetArgs>? _associations;

        /// <summary>
        /// Association of the Floating IP with either NIC or Private IP
        /// </summary>
        public InputList<Inputs.FloatingIpV2AssociationGetArgs> Associations
        {
            get => _associations ?? (_associations = new InputList<Inputs.FloatingIpV2AssociationGetArgs>());
            set => _associations = value;
        }

        /// <summary>
        /// Description for the Floating IP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// External subnet reference for the Floating IP to be allocated in on-prem only.
        /// </summary>
        [Input("externalSubnetReference")]
        public Input<string>? ExternalSubnetReference { get; set; }

        [Input("externalSubnets")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetGetArgs>? _externalSubnets;

        /// <summary>
        /// Networking common base object
        /// </summary>
        public InputList<Inputs.FloatingIpV2ExternalSubnetGetArgs> ExternalSubnets
        {
            get => _externalSubnets ?? (_externalSubnets = new InputList<Inputs.FloatingIpV2ExternalSubnetGetArgs>());
            set => _externalSubnets = value;
        }

        [Input("floatingIpValue")]
        public Input<string>? FloatingIpValue { get; set; }

        [Input("floatingIps")]
        private InputList<Inputs.FloatingIpV2FloatingIpGetArgs>? _floatingIps;

        /// <summary>
        /// Floating IP address.
        /// </summary>
        public InputList<Inputs.FloatingIpV2FloatingIpGetArgs> FloatingIps
        {
            get => _floatingIps ?? (_floatingIps = new InputList<Inputs.FloatingIpV2FloatingIpGetArgs>());
            set => _floatingIps = value;
        }

        [Input("links")]
        private InputList<Inputs.FloatingIpV2LinkGetArgs>? _links;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public InputList<Inputs.FloatingIpV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.FloatingIpV2LinkGetArgs>());
            set => _links = value;
        }

        [Input("loadBalancerSessionReference")]
        public Input<string>? LoadBalancerSessionReference { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.FloatingIpV2MetadataGetArgs>? _metadatas;

        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public InputList<Inputs.FloatingIpV2MetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.FloatingIpV2MetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the floating IP.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// VM NIC reference.
        /// </summary>
        [Input("vmNicReference")]
        public Input<string>? VmNicReference { get; set; }

        [Input("vmNics")]
        private InputList<Inputs.FloatingIpV2VmNicGetArgs>? _vmNics;

        /// <summary>
        /// Virtual NIC for projections
        /// </summary>
        public InputList<Inputs.FloatingIpV2VmNicGetArgs> VmNics
        {
            get => _vmNics ?? (_vmNics = new InputList<Inputs.FloatingIpV2VmNicGetArgs>());
            set => _vmNics = value;
        }

        /// <summary>
        /// VPC reference UUID
        /// </summary>
        [Input("vpcReference")]
        public Input<string>? VpcReference { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.FloatingIpV2VpcGetArgs>? _vpcs;

        /// <summary>
        /// Networking common base object
        /// </summary>
        public InputList<Inputs.FloatingIpV2VpcGetArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.FloatingIpV2VpcGetArgs>());
            set => _vpcs = value;
        }

        public FloatingIpV2State()
        {
        }
        public static new FloatingIpV2State Empty => new FloatingIpV2State();
    }
}
