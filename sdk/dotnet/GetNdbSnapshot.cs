// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbSnapshot
    {
        /// <summary>
        /// Describes the snapshot present in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var snaps = Nutanix.GetNdbSnapshot.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Nutanix.Inputs.GetNdbSnapshotFilterInputArgs
        ///             {
        ///                 LoadReplicatedChildSnapshots = "true",
        ///             },
        ///         },
        ///         SnapshotId = "{{ snapshot_id }}",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNdbSnapshotResult> InvokeAsync(GetNdbSnapshotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbSnapshotResult>("nutanix:index/getNdbSnapshot:getNdbSnapshot", args ?? new GetNdbSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Describes the snapshot present in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var snaps = Nutanix.GetNdbSnapshot.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Nutanix.Inputs.GetNdbSnapshotFilterInputArgs
        ///             {
        ///                 LoadReplicatedChildSnapshots = "true",
        ///             },
        ///         },
        ///         SnapshotId = "{{ snapshot_id }}",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbSnapshotResult> Invoke(GetNdbSnapshotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbSnapshotResult>("nutanix:index/getNdbSnapshot:getNdbSnapshot", args ?? new GetNdbSnapshotInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes the snapshot present in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var snaps = Nutanix.GetNdbSnapshot.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Nutanix.Inputs.GetNdbSnapshotFilterInputArgs
        ///             {
        ///                 LoadReplicatedChildSnapshots = "true",
        ///             },
        ///         },
        ///         SnapshotId = "{{ snapshot_id }}",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbSnapshotResult> Invoke(GetNdbSnapshotInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbSnapshotResult>("nutanix:index/getNdbSnapshot:getNdbSnapshot", args ?? new GetNdbSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbSnapshotArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNdbSnapshotFilterArgs>? _filters;

        /// <summary>
        /// Filters will fetch the snapshot details as per input
        /// </summary>
        public List<Inputs.GetNdbSnapshotFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNdbSnapshotFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Snapshot ID to be given
        /// </summary>
        [Input("snapshotId", required: true)]
        public string SnapshotId { get; set; } = null!;

        [Input("tags")]
        private List<Inputs.GetNdbSnapshotTagArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public List<Inputs.GetNdbSnapshotTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetNdbSnapshotTagArgs>());
            set => _tags = value;
        }

        public GetNdbSnapshotArgs()
        {
        }
        public static new GetNdbSnapshotArgs Empty => new GetNdbSnapshotArgs();
    }

    public sealed class GetNdbSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNdbSnapshotFilterInputArgs>? _filters;

        /// <summary>
        /// Filters will fetch the snapshot details as per input
        /// </summary>
        public InputList<Inputs.GetNdbSnapshotFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNdbSnapshotFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Snapshot ID to be given
        /// </summary>
        [Input("snapshotId", required: true)]
        public Input<string> SnapshotId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.GetNdbSnapshotTagInputArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public InputList<Inputs.GetNdbSnapshotTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetNdbSnapshotTagInputArgs>());
            set => _tags = value;
        }

        public GetNdbSnapshotInvokeArgs()
        {
        }
        public static new GetNdbSnapshotInvokeArgs Empty => new GetNdbSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbSnapshotResult
    {
        /// <summary>
        /// App info version
        /// </summary>
        public readonly string AppInfoVersion;
        /// <summary>
        /// Applicable types
        /// </summary>
        public readonly ImmutableArray<string> ApplicableTypes;
        /// <summary>
        /// database node id
        /// </summary>
        public readonly string DatabaseNodeId;
        /// <summary>
        /// database snapshot
        /// </summary>
        public readonly bool DatabaseSnapshot;
        /// <summary>
        /// created date
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// modified date
        /// </summary>
        public readonly string DateModified;
        /// <summary>
        /// dbserver id
        /// </summary>
        public readonly string DbserverId;
        /// <summary>
        /// dbserver ip
        /// </summary>
        public readonly string DbserverIp;
        /// <summary>
        /// dbserver name
        /// </summary>
        public readonly string DbserverName;
        /// <summary>
        /// dbserver storage metadata version
        /// </summary>
        public readonly int DbserverStorageMetadataVersion;
        /// <summary>
        /// description of snapshot
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetNdbSnapshotFilterResult> Filters;
        /// <summary>
        /// from timestamp
        /// </summary>
        public readonly string FromTimestamp;
        /// <summary>
        /// name of snapshot
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// LCM config
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbSnapshotLcmConfigResult> LcmConfigs;
        public readonly string Name;
        /// <summary>
        /// nx cluster id
        /// </summary>
        public readonly string NxClusterId;
        /// <summary>
        /// parent snapshot
        /// </summary>
        public readonly bool ParentSnapshot;
        /// <summary>
        /// parent snapshot id
        /// </summary>
        public readonly string ParentSnapshotId;
        /// <summary>
        /// processed
        /// </summary>
        public readonly bool Processed;
        /// <summary>
        /// properties
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbSnapshotPropertyResult> Properties;
        /// <summary>
        /// protection domain
        /// </summary>
        public readonly string ProtectionDomainId;
        /// <summary>
        /// replicated snapshots
        /// </summary>
        public readonly ImmutableArray<string> ReplicatedSnapshots;
        public readonly bool Santized;
        public readonly string SantizedFromSnapshotId;
        public readonly string SantizedSnapshots;
        /// <summary>
        /// snapshot family
        /// </summary>
        public readonly string SnapshotFamily;
        public readonly string SnapshotId;
        /// <summary>
        /// snapshot size
        /// </summary>
        public readonly double SnapshotSize;
        /// <summary>
        /// snapshot timeStamp
        /// </summary>
        public readonly string SnapshotTimestamp;
        /// <summary>
        /// snapshot timestamp date
        /// </summary>
        public readonly int SnapshotTimestampDate;
        /// <summary>
        /// snapshot uuid
        /// </summary>
        public readonly string SnapshotUuid;
        /// <summary>
        /// software database snapshot
        /// </summary>
        public readonly bool SoftwareDatabaseSnapshot;
        /// <summary>
        /// software snapshot
        /// </summary>
        public readonly string SoftwareSnapshot;
        /// <summary>
        /// software snapshot id
        /// </summary>
        public readonly string SoftwareSnapshotId;
        /// <summary>
        /// status
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// tags
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbSnapshotTagResult> Tags;
        public readonly string TimeMachineId;
        /// <summary>
        /// timezone
        /// </summary>
        public readonly string Timezone;
        /// <summary>
        /// to timestamp
        /// </summary>
        public readonly string ToTimestamp;
        /// <summary>
        /// type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNdbSnapshotResult(
            string appInfoVersion,

            ImmutableArray<string> applicableTypes,

            string databaseNodeId,

            bool databaseSnapshot,

            string dateCreated,

            string dateModified,

            string dbserverId,

            string dbserverIp,

            string dbserverName,

            int dbserverStorageMetadataVersion,

            string description,

            ImmutableArray<Outputs.GetNdbSnapshotFilterResult> filters,

            string fromTimestamp,

            string id,

            ImmutableArray<Outputs.GetNdbSnapshotLcmConfigResult> lcmConfigs,

            string name,

            string nxClusterId,

            bool parentSnapshot,

            string parentSnapshotId,

            bool processed,

            ImmutableArray<Outputs.GetNdbSnapshotPropertyResult> properties,

            string protectionDomainId,

            ImmutableArray<string> replicatedSnapshots,

            bool santized,

            string santizedFromSnapshotId,

            string santizedSnapshots,

            string snapshotFamily,

            string snapshotId,

            double snapshotSize,

            string snapshotTimestamp,

            int snapshotTimestampDate,

            string snapshotUuid,

            bool softwareDatabaseSnapshot,

            string softwareSnapshot,

            string softwareSnapshotId,

            string status,

            ImmutableArray<Outputs.GetNdbSnapshotTagResult> tags,

            string timeMachineId,

            string timezone,

            string toTimestamp,

            string type)
        {
            AppInfoVersion = appInfoVersion;
            ApplicableTypes = applicableTypes;
            DatabaseNodeId = databaseNodeId;
            DatabaseSnapshot = databaseSnapshot;
            DateCreated = dateCreated;
            DateModified = dateModified;
            DbserverId = dbserverId;
            DbserverIp = dbserverIp;
            DbserverName = dbserverName;
            DbserverStorageMetadataVersion = dbserverStorageMetadataVersion;
            Description = description;
            Filters = filters;
            FromTimestamp = fromTimestamp;
            Id = id;
            LcmConfigs = lcmConfigs;
            Name = name;
            NxClusterId = nxClusterId;
            ParentSnapshot = parentSnapshot;
            ParentSnapshotId = parentSnapshotId;
            Processed = processed;
            Properties = properties;
            ProtectionDomainId = protectionDomainId;
            ReplicatedSnapshots = replicatedSnapshots;
            Santized = santized;
            SantizedFromSnapshotId = santizedFromSnapshotId;
            SantizedSnapshots = santizedSnapshots;
            SnapshotFamily = snapshotFamily;
            SnapshotId = snapshotId;
            SnapshotSize = snapshotSize;
            SnapshotTimestamp = snapshotTimestamp;
            SnapshotTimestampDate = snapshotTimestampDate;
            SnapshotUuid = snapshotUuid;
            SoftwareDatabaseSnapshot = softwareDatabaseSnapshot;
            SoftwareSnapshot = softwareSnapshot;
            SoftwareSnapshotId = softwareSnapshotId;
            Status = status;
            Tags = tags;
            TimeMachineId = timeMachineId;
            Timezone = timezone;
            ToTimestamp = toTimestamp;
            Type = type;
        }
    }
}
