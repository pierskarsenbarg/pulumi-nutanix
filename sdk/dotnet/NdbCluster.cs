// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to add a Nutanix cluster based on the input parameters.
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbCluster:NdbCluster")]
    public partial class NdbCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// agent network info to register cluster
        /// </summary>
        [Output("agentNetworkInfos")]
        public Output<ImmutableArray<Outputs.NdbClusterAgentNetworkInfo>> AgentNetworkInfos { get; private set; } = null!;

        [Output("agentVmPrefix")]
        public Output<string?> AgentVmPrefix { get; private set; } = null!;

        /// <summary>
        /// - cloud info
        /// </summary>
        [Output("cloudInfo")]
        public Output<string> CloudInfo { get; private set; } = null!;

        /// <summary>
        /// - cloud type
        /// </summary>
        [Output("cloudType")]
        public Output<string> CloudType { get; private set; } = null!;

        /// <summary>
        /// Prism Element IP address
        /// </summary>
        [Output("clusterIp")]
        public Output<string> ClusterIp { get; private set; } = null!;

        [Output("clusterType")]
        public Output<string?> ClusterType { get; private set; } = null!;

        /// <summary>
        /// - creation date
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// - date modified
        /// </summary>
        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        /// <summary>
        /// description of cluster
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// - no. of entities related
        /// </summary>
        [Output("entityCounts")]
        public Output<ImmutableArray<Outputs.NdbClusterEntityCount>> EntityCounts { get; private set; } = null!;

        /// <summary>
        /// - fqdn
        /// </summary>
        [Output("fqdns")]
        public Output<string> Fqdns { get; private set; } = null!;

        /// <summary>
        /// - if healthy status
        /// </summary>
        [Output("healthy")]
        public Output<bool> Healthy { get; private set; } = null!;

        /// <summary>
        /// - hypervisor type
        /// </summary>
        [Output("hypervisorType")]
        public Output<string> HypervisorType { get; private set; } = null!;

        /// <summary>
        /// - hypervisor version
        /// </summary>
        [Output("hypervisorVersion")]
        public Output<string> HypervisorVersion { get; private set; } = null!;

        /// <summary>
        /// - IP address
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// - NA
        /// </summary>
        [Output("managementServerInfo")]
        public Output<string> ManagementServerInfo { get; private set; } = null!;

        /// <summary>
        /// name of the cluster to be registered
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// network segmentation to segment the network traffic of the agent VM.
        /// </summary>
        [Output("networksInfos")]
        public Output<ImmutableArray<Outputs.NdbClusterNetworksInfo>> NetworksInfos { get; private set; } = null!;

        /// <summary>
        /// - nutanix cluster uuid
        /// </summary>
        [Output("nxClusterUuid")]
        public Output<string> NxClusterUuid { get; private set; } = null!;

        /// <summary>
        /// - owner UUID
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// Prism Element password
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// - list of properties
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbClusterProperty>> Properties { get; private set; } = null!;

        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// - NA
        /// </summary>
        [Output("referenceCount")]
        public Output<int> ReferenceCount { get; private set; } = null!;

        /// <summary>
        /// - resource related consumption info
        /// </summary>
        [Output("resourceConfigs")]
        public Output<ImmutableArray<Outputs.NdbClusterResourceConfig>> ResourceConfigs { get; private set; } = null!;

        /// <summary>
        /// - current status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// select a storage container which is used for performing database operations in the cluster
        /// </summary>
        [Output("storageContainer")]
        public Output<string> StorageContainer { get; private set; } = null!;

        /// <summary>
        /// - unique name of cluster
        /// </summary>
        [Output("uniqueName")]
        public Output<string> UniqueName { get; private set; } = null!;

        /// <summary>
        /// username of the Prism Element administrator
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// - version
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a NdbCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbCluster(string name, NdbClusterArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbCluster:NdbCluster", name, args ?? new NdbClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbCluster(string name, Input<string> id, NdbClusterState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbCluster:NdbCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbCluster Get(string name, Input<string> id, NdbClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbCluster(name, id, state, options);
        }
    }

    public sealed class NdbClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentNetworkInfos", required: true)]
        private InputList<Inputs.NdbClusterAgentNetworkInfoArgs>? _agentNetworkInfos;

        /// <summary>
        /// agent network info to register cluster
        /// </summary>
        public InputList<Inputs.NdbClusterAgentNetworkInfoArgs> AgentNetworkInfos
        {
            get => _agentNetworkInfos ?? (_agentNetworkInfos = new InputList<Inputs.NdbClusterAgentNetworkInfoArgs>());
            set => _agentNetworkInfos = value;
        }

        [Input("agentVmPrefix")]
        public Input<string>? AgentVmPrefix { get; set; }

        /// <summary>
        /// Prism Element IP address
        /// </summary>
        [Input("clusterIp", required: true)]
        public Input<string> ClusterIp { get; set; } = null!;

        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// description of cluster
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// name of the cluster to be registered
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networksInfos", required: true)]
        private InputList<Inputs.NdbClusterNetworksInfoArgs>? _networksInfos;

        /// <summary>
        /// network segmentation to segment the network traffic of the agent VM.
        /// </summary>
        public InputList<Inputs.NdbClusterNetworksInfoArgs> NetworksInfos
        {
            get => _networksInfos ?? (_networksInfos = new InputList<Inputs.NdbClusterNetworksInfoArgs>());
            set => _networksInfos = value;
        }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Prism Element password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// select a storage container which is used for performing database operations in the cluster
        /// </summary>
        [Input("storageContainer", required: true)]
        public Input<string> StorageContainer { get; set; } = null!;

        /// <summary>
        /// username of the Prism Element administrator
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        /// <summary>
        /// - version
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public NdbClusterArgs()
        {
        }
        public static new NdbClusterArgs Empty => new NdbClusterArgs();
    }

    public sealed class NdbClusterState : global::Pulumi.ResourceArgs
    {
        [Input("agentNetworkInfos")]
        private InputList<Inputs.NdbClusterAgentNetworkInfoGetArgs>? _agentNetworkInfos;

        /// <summary>
        /// agent network info to register cluster
        /// </summary>
        public InputList<Inputs.NdbClusterAgentNetworkInfoGetArgs> AgentNetworkInfos
        {
            get => _agentNetworkInfos ?? (_agentNetworkInfos = new InputList<Inputs.NdbClusterAgentNetworkInfoGetArgs>());
            set => _agentNetworkInfos = value;
        }

        [Input("agentVmPrefix")]
        public Input<string>? AgentVmPrefix { get; set; }

        /// <summary>
        /// - cloud info
        /// </summary>
        [Input("cloudInfo")]
        public Input<string>? CloudInfo { get; set; }

        /// <summary>
        /// - cloud type
        /// </summary>
        [Input("cloudType")]
        public Input<string>? CloudType { get; set; }

        /// <summary>
        /// Prism Element IP address
        /// </summary>
        [Input("clusterIp")]
        public Input<string>? ClusterIp { get; set; }

        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// - creation date
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// - date modified
        /// </summary>
        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        /// <summary>
        /// description of cluster
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entityCounts")]
        private InputList<Inputs.NdbClusterEntityCountGetArgs>? _entityCounts;

        /// <summary>
        /// - no. of entities related
        /// </summary>
        public InputList<Inputs.NdbClusterEntityCountGetArgs> EntityCounts
        {
            get => _entityCounts ?? (_entityCounts = new InputList<Inputs.NdbClusterEntityCountGetArgs>());
            set => _entityCounts = value;
        }

        /// <summary>
        /// - fqdn
        /// </summary>
        [Input("fqdns")]
        public Input<string>? Fqdns { get; set; }

        /// <summary>
        /// - if healthy status
        /// </summary>
        [Input("healthy")]
        public Input<bool>? Healthy { get; set; }

        /// <summary>
        /// - hypervisor type
        /// </summary>
        [Input("hypervisorType")]
        public Input<string>? HypervisorType { get; set; }

        /// <summary>
        /// - hypervisor version
        /// </summary>
        [Input("hypervisorVersion")]
        public Input<string>? HypervisorVersion { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// - IP address
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// - NA
        /// </summary>
        [Input("managementServerInfo")]
        public Input<string>? ManagementServerInfo { get; set; }

        /// <summary>
        /// name of the cluster to be registered
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networksInfos")]
        private InputList<Inputs.NdbClusterNetworksInfoGetArgs>? _networksInfos;

        /// <summary>
        /// network segmentation to segment the network traffic of the agent VM.
        /// </summary>
        public InputList<Inputs.NdbClusterNetworksInfoGetArgs> NetworksInfos
        {
            get => _networksInfos ?? (_networksInfos = new InputList<Inputs.NdbClusterNetworksInfoGetArgs>());
            set => _networksInfos = value;
        }

        /// <summary>
        /// - nutanix cluster uuid
        /// </summary>
        [Input("nxClusterUuid")]
        public Input<string>? NxClusterUuid { get; set; }

        /// <summary>
        /// - owner UUID
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Prism Element password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbClusterPropertyGetArgs>? _properties;

        /// <summary>
        /// - list of properties
        /// </summary>
        public InputList<Inputs.NdbClusterPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbClusterPropertyGetArgs>());
            set => _properties = value;
        }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// - NA
        /// </summary>
        [Input("referenceCount")]
        public Input<int>? ReferenceCount { get; set; }

        [Input("resourceConfigs")]
        private InputList<Inputs.NdbClusterResourceConfigGetArgs>? _resourceConfigs;

        /// <summary>
        /// - resource related consumption info
        /// </summary>
        public InputList<Inputs.NdbClusterResourceConfigGetArgs> ResourceConfigs
        {
            get => _resourceConfigs ?? (_resourceConfigs = new InputList<Inputs.NdbClusterResourceConfigGetArgs>());
            set => _resourceConfigs = value;
        }

        /// <summary>
        /// - current status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// select a storage container which is used for performing database operations in the cluster
        /// </summary>
        [Input("storageContainer")]
        public Input<string>? StorageContainer { get; set; }

        /// <summary>
        /// - unique name of cluster
        /// </summary>
        [Input("uniqueName")]
        public Input<string>? UniqueName { get; set; }

        /// <summary>
        /// username of the Prism Element administrator
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// - version
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public NdbClusterState()
        {
        }
        public static new NdbClusterState Empty => new NdbClusterState();
    }
}
