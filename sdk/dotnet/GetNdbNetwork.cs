// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbNetwork
    {
        /// <summary>
        /// Describes a network in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nw = Nutanix.GetNdbNetwork.Invoke(new()
        ///     {
        ///         Id = "{{ id of network }}",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNdbNetworkResult> InvokeAsync(GetNdbNetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbNetworkResult>("nutanix:index/getNdbNetwork:getNdbNetwork", args ?? new GetNdbNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a network in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nw = Nutanix.GetNdbNetwork.Invoke(new()
        ///     {
        ///         Id = "{{ id of network }}",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbNetworkResult> Invoke(GetNdbNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbNetworkResult>("nutanix:index/getNdbNetwork:getNdbNetwork", args ?? new GetNdbNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// id of network
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// name of network
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetNdbNetworkArgs()
        {
        }
        public static new GetNdbNetworkArgs Empty => new GetNdbNetworkArgs();
    }

    public sealed class GetNdbNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// id of network
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// name of network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetNdbNetworkInvokeArgs()
        {
        }
        public static new GetNdbNetworkInvokeArgs Empty => new GetNdbNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbNetworkResult
    {
        /// <summary>
        /// cluster id where network is present
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// network id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP addresses of network
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbNetworkIpAddressResult> IpAddresses;
        /// <summary>
        /// IP Pools of network
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbNetworkIpPoolResult> IpPools;
        /// <summary>
        /// network managed by NDB or not
        /// </summary>
        public readonly bool Managed;
        /// <summary>
        /// network name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// properties of network
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbNetworkPropertyResult> Properties;
        /// <summary>
        /// properties map of network
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbNetworkPropertiesMapResult> PropertiesMaps;
        /// <summary>
        /// stretched vlan id
        /// </summary>
        public readonly string StretchedVlanId;
        /// <summary>
        /// type of network
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNdbNetworkResult(
            string clusterId,

            string id,

            ImmutableArray<Outputs.GetNdbNetworkIpAddressResult> ipAddresses,

            ImmutableArray<Outputs.GetNdbNetworkIpPoolResult> ipPools,

            bool managed,

            string name,

            ImmutableArray<Outputs.GetNdbNetworkPropertyResult> properties,

            ImmutableArray<Outputs.GetNdbNetworkPropertiesMapResult> propertiesMaps,

            string stretchedVlanId,

            string type)
        {
            ClusterId = clusterId;
            Id = id;
            IpAddresses = ipAddresses;
            IpPools = ipPools;
            Managed = managed;
            Name = name;
            Properties = properties;
            PropertiesMaps = propertiesMaps;
            StretchedVlanId = stretchedVlanId;
            Type = type;
        }
    }
}
