// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetFoundationNodeNetworkDetails
    {
        /// <summary>
        /// Gets hypervisor, CVM &amp; IPMI info of the discovered nodes using their ipv6 address.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var networkDetails = Output.Create(Nutanix.GetFoundationNodeNetworkDetails.InvokeAsync(new Nutanix.GetFoundationNodeNetworkDetailsArgs
        ///         {
        ///             Ipv6Addresses = 
        ///             {
        ///                 "&lt;ipv6-address-1&gt;",
        ///                 "&lt;ipv6-address-2&gt;",
        ///             },
        ///             Timeout = "30",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFoundationNodeNetworkDetailsResult> InvokeAsync(GetFoundationNodeNetworkDetailsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFoundationNodeNetworkDetailsResult>("nutanix:index/getFoundationNodeNetworkDetails:getFoundationNodeNetworkDetails", args ?? new GetFoundationNodeNetworkDetailsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets hypervisor, CVM &amp; IPMI info of the discovered nodes using their ipv6 address.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var networkDetails = Output.Create(Nutanix.GetFoundationNodeNetworkDetails.InvokeAsync(new Nutanix.GetFoundationNodeNetworkDetailsArgs
        ///         {
        ///             Ipv6Addresses = 
        ///             {
        ///                 "&lt;ipv6-address-1&gt;",
        ///                 "&lt;ipv6-address-2&gt;",
        ///             },
        ///             Timeout = "30",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFoundationNodeNetworkDetailsResult> Invoke(GetFoundationNodeNetworkDetailsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFoundationNodeNetworkDetailsResult>("nutanix:index/getFoundationNodeNetworkDetails:getFoundationNodeNetworkDetails", args ?? new GetFoundationNodeNetworkDetailsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFoundationNodeNetworkDetailsArgs : Pulumi.InvokeArgs
    {
        [Input("ipv6Addresses", required: true)]
        private List<string>? _ipv6Addresses;
        public List<string> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new List<string>());
            set => _ipv6Addresses = value;
        }

        [Input("timeout")]
        public string? Timeout { get; set; }

        public GetFoundationNodeNetworkDetailsArgs()
        {
        }
    }

    public sealed class GetFoundationNodeNetworkDetailsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("ipv6Addresses", required: true)]
        private InputList<string>? _ipv6Addresses;
        public InputList<string> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<string>());
            set => _ipv6Addresses = value;
        }

        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public GetFoundationNodeNetworkDetailsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFoundationNodeNetworkDetailsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ipv6Addresses;
        public readonly ImmutableArray<Outputs.GetFoundationNodeNetworkDetailsNodeResult> Nodes;
        public readonly string? Timeout;

        [OutputConstructor]
        private GetFoundationNodeNetworkDetailsResult(
            string id,

            ImmutableArray<string> ipv6Addresses,

            ImmutableArray<Outputs.GetFoundationNodeNetworkDetailsNodeResult> nodes,

            string? timeout)
        {
            Id = id;
            Ipv6Addresses = ipv6Addresses;
            Nodes = nodes;
            Timeout = timeout;
        }
    }
}
