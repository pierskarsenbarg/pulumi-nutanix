// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Fetch a category
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Nutanix.CategoryV2("example", new()
    ///     {
    ///         Description = "category example description",
    ///         Key = "category_example_key",
    ///         Value = "category_example_value",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/categoryV2:CategoryV2")]
    public partial class CategoryV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This field gives basic information about resources that are associated with the category.
        /// The results present under this field summarize the counts of various kinds of resources associated with the category.
        /// For more detailed information about the UUIDs of the resources, please look into the field detailedAssociations.
        /// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
        /// This field will not be present by default in listCategories API, unless the parameter $expand=associations is present in the URL.
        /// </summary>
        [Output("associations")]
        public Output<ImmutableArray<Outputs.CategoryV2Association>> Associations { get; private set; } = null!;

        /// <summary>
        /// -(Optional) A string consisting of the description of the category as defined by the user.
        /// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
        /// Description field can be updated through updateCategoryById API.
        /// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
        /// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// This field gives detailed information about the resources which are associated with the category.
        /// The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.
        /// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
        /// This field will not be present by default in listCategories or getCategoryById APIs, unless the parameter $expand=detailedAssociations is present in the URL.
        /// </summary>
        [Output("detailedAssociations")]
        public Output<ImmutableArray<Outputs.CategoryV2DetailedAssociation>> DetailedAssociations { get; private set; } = null!;

        /// <summary>
        /// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
        /// 
        /// - A string of maxlength of 64
        /// - Character at the start cannot be `$`
        /// - Character `/` is not allowed anywhere.
        /// 
        /// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
        /// This field can't be updated through `updateCategoryById` API.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// -(Optional) This field contains the UUID of a user who owns the category.
        /// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
        /// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
        /// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
        /// It is used for enabling RBAC access to self-owned categories.
        /// </summary>
        [Output("ownerUuid")]
        public Output<string> OwnerUuid { get; private set; } = null!;

        /// <summary>
        /// -(Required) Denotes the type of a category.
        /// Valid values are:
        /// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
        /// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
        /// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
        /// 
        /// - A string of maxlength of 64
        /// - Character at the start cannot be `$`
        /// - Character `/` is not allowed anywhere.
        /// 
        /// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
        /// This field can't be updated through `updateCategoryById` API.
        /// Updating the value will not change the extId of the category.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a CategoryV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CategoryV2(string name, CategoryV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/categoryV2:CategoryV2", name, args ?? new CategoryV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private CategoryV2(string name, Input<string> id, CategoryV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/categoryV2:CategoryV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CategoryV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CategoryV2 Get(string name, Input<string> id, CategoryV2State? state = null, CustomResourceOptions? options = null)
        {
            return new CategoryV2(name, id, state, options);
        }
    }

    public sealed class CategoryV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Optional) A string consisting of the description of the category as defined by the user.
        /// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
        /// Description field can be updated through updateCategoryById API.
        /// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
        /// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
        /// 
        /// - A string of maxlength of 64
        /// - Character at the start cannot be `$`
        /// - Character `/` is not allowed anywhere.
        /// 
        /// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
        /// This field can't be updated through `updateCategoryById` API.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// -(Optional) This field contains the UUID of a user who owns the category.
        /// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
        /// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
        /// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
        /// It is used for enabling RBAC access to self-owned categories.
        /// </summary>
        [Input("ownerUuid")]
        public Input<string>? OwnerUuid { get; set; }

        /// <summary>
        /// -(Required) Denotes the type of a category.
        /// Valid values are:
        /// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
        /// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
        /// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
        /// 
        /// - A string of maxlength of 64
        /// - Character at the start cannot be `$`
        /// - Character `/` is not allowed anywhere.
        /// 
        /// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
        /// This field can't be updated through `updateCategoryById` API.
        /// Updating the value will not change the extId of the category.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public CategoryV2Args()
        {
        }
        public static new CategoryV2Args Empty => new CategoryV2Args();
    }

    public sealed class CategoryV2State : global::Pulumi.ResourceArgs
    {
        [Input("associations")]
        private InputList<Inputs.CategoryV2AssociationGetArgs>? _associations;

        /// <summary>
        /// This field gives basic information about resources that are associated with the category.
        /// The results present under this field summarize the counts of various kinds of resources associated with the category.
        /// For more detailed information about the UUIDs of the resources, please look into the field detailedAssociations.
        /// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
        /// This field will not be present by default in listCategories API, unless the parameter $expand=associations is present in the URL.
        /// </summary>
        public InputList<Inputs.CategoryV2AssociationGetArgs> Associations
        {
            get => _associations ?? (_associations = new InputList<Inputs.CategoryV2AssociationGetArgs>());
            set => _associations = value;
        }

        /// <summary>
        /// -(Optional) A string consisting of the description of the category as defined by the user.
        /// Description can be optionally provided in the payload of createCategory and updateCategoryById APIs.
        /// Description field can be updated through updateCategoryById API.
        /// The server does not validate this value nor does it enforce the uniqueness or any other constraints.
        /// It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("detailedAssociations")]
        private InputList<Inputs.CategoryV2DetailedAssociationGetArgs>? _detailedAssociations;

        /// <summary>
        /// This field gives detailed information about the resources which are associated with the category.
        /// The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.
        /// This field will be ignored, if given in the payload of updateCategoryById or createCategory APIs.
        /// This field will not be present by default in listCategories or getCategoryById APIs, unless the parameter $expand=detailedAssociations is present in the URL.
        /// </summary>
        public InputList<Inputs.CategoryV2DetailedAssociationGetArgs> DetailedAssociations
        {
            get => _detailedAssociations ?? (_detailedAssociations = new InputList<Inputs.CategoryV2DetailedAssociationGetArgs>());
            set => _detailedAssociations = value;
        }

        /// <summary>
        /// -(Required) The key of a category when it is represented in key:value format. Constraints applicable when field is given in the payload during create and update:
        /// 
        /// - A string of maxlength of 64
        /// - Character at the start cannot be `$`
        /// - Character `/` is not allowed anywhere.
        /// 
        /// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
        /// This field can't be updated through `updateCategoryById` API.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// -(Optional) This field contains the UUID of a user who owns the category.
        /// This field will be ignored if given in the payload of createCategory API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.
        /// This field can be updated through updateCategoryById API, in which case, should be provided, UUID of a valid user is present in the system.
        /// Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.
        /// It is used for enabling RBAC access to self-owned categories.
        /// </summary>
        [Input("ownerUuid")]
        public Input<string>? OwnerUuid { get; set; }

        /// <summary>
        /// -(Required) Denotes the type of a category.
        /// Valid values are:
        /// - `SYSTEM` Predefined categories contained in the system to be used by workflows visible in the UI that involve categories. System-defined categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. System-defined categories can't be updated or deleted.
        /// - `INTERNAL` Predefined categories contained in the system to be used by internal services, APIs and workflows that involve categories. These categories will not be visible in the UI. However, these categories will be returned in the response of `listCategories` and `getCategoryById` APIs, and are available for filtering as well. Internal categories can't be created through the Categories API. They are predefined in a configuration file and are created at PC boot-up time. Internal categories can't be updated or deleted.
        /// - `USER` These categories get created by users through the invocation of `createCategory` API. User-defined categories can be updated or deleted after creation.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// -(Required) The value of a category when it is represented in key:value format.  Constraints applicable when field is given in the payload during create and update:
        /// 
        /// - A string of maxlength of 64
        /// - Character at the start cannot be `$`
        /// - Character `/` is not allowed anywhere.
        /// 
        /// It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.
        /// This field can't be updated through `updateCategoryById` API.
        /// Updating the value will not change the extId of the category.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public CategoryV2State()
        {
        }
        public static new CategoryV2State Empty => new CategoryV2State();
    }
}
