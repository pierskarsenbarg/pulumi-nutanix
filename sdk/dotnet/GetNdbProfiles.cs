// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbProfiles
    {
        /// <summary>
        /// List profiles in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var profiles = Nutanix.GetNdbProfiles.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["profilesList"] = profiles,
        ///     };
        /// });
        /// ```
        /// 
        /// ## profiles
        /// 
        /// The following attributes are exported for each profile:
        /// 
        /// * `id`: - id of profile
        /// * `name`: - profile name
        /// * `description`: - description of profile
        /// * `status`: - status of profile
        /// * `owner`: - owner name
        /// * `engine_type`: - database engine type
        /// * `db_version`: - database version
        /// * `topology`: - topology
        /// * `system_profile`: - if system profile or not
        /// * `assoc_db_servers`: - associated DB servers
        /// * `assoc_databases`: - associated databases
        /// * `latest_version`: - latest version for engine software
        /// * `latest_version_id`: - ID of latest version for engine software
        /// * `versions`: - profile's different version config
        /// * `cluster_availability`: - list of clusters availability
        /// * `nx_cluster_id`: - era cluster ID
        /// 
        /// See detailed information in [Nutanix Database Service Profiles](https://www.nutanix.dev/api_references/ndb/#/74ae456d63b24-get-all-profiles).
        /// </summary>
        public static Task<GetNdbProfilesResult> InvokeAsync(GetNdbProfilesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbProfilesResult>("nutanix:index/getNdbProfiles:getNdbProfiles", args ?? new GetNdbProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// List profiles in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var profiles = Nutanix.GetNdbProfiles.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["profilesList"] = profiles,
        ///     };
        /// });
        /// ```
        /// 
        /// ## profiles
        /// 
        /// The following attributes are exported for each profile:
        /// 
        /// * `id`: - id of profile
        /// * `name`: - profile name
        /// * `description`: - description of profile
        /// * `status`: - status of profile
        /// * `owner`: - owner name
        /// * `engine_type`: - database engine type
        /// * `db_version`: - database version
        /// * `topology`: - topology
        /// * `system_profile`: - if system profile or not
        /// * `assoc_db_servers`: - associated DB servers
        /// * `assoc_databases`: - associated databases
        /// * `latest_version`: - latest version for engine software
        /// * `latest_version_id`: - ID of latest version for engine software
        /// * `versions`: - profile's different version config
        /// * `cluster_availability`: - list of clusters availability
        /// * `nx_cluster_id`: - era cluster ID
        /// 
        /// See detailed information in [Nutanix Database Service Profiles](https://www.nutanix.dev/api_references/ndb/#/74ae456d63b24-get-all-profiles).
        /// </summary>
        public static Output<GetNdbProfilesResult> Invoke(GetNdbProfilesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbProfilesResult>("nutanix:index/getNdbProfiles:getNdbProfiles", args ?? new GetNdbProfilesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// List profiles in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var profiles = Nutanix.GetNdbProfiles.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["profilesList"] = profiles,
        ///     };
        /// });
        /// ```
        /// 
        /// ## profiles
        /// 
        /// The following attributes are exported for each profile:
        /// 
        /// * `id`: - id of profile
        /// * `name`: - profile name
        /// * `description`: - description of profile
        /// * `status`: - status of profile
        /// * `owner`: - owner name
        /// * `engine_type`: - database engine type
        /// * `db_version`: - database version
        /// * `topology`: - topology
        /// * `system_profile`: - if system profile or not
        /// * `assoc_db_servers`: - associated DB servers
        /// * `assoc_databases`: - associated databases
        /// * `latest_version`: - latest version for engine software
        /// * `latest_version_id`: - ID of latest version for engine software
        /// * `versions`: - profile's different version config
        /// * `cluster_availability`: - list of clusters availability
        /// * `nx_cluster_id`: - era cluster ID
        /// 
        /// See detailed information in [Nutanix Database Service Profiles](https://www.nutanix.dev/api_references/ndb/#/74ae456d63b24-get-all-profiles).
        /// </summary>
        public static Output<GetNdbProfilesResult> Invoke(GetNdbProfilesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbProfilesResult>("nutanix:index/getNdbProfiles:getNdbProfiles", args ?? new GetNdbProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbProfilesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Database engine. For eg. postgres_database
        /// </summary>
        [Input("engine")]
        public string? Engine { get; set; }

        /// <summary>
        /// profile type. Types: Software, Compute, Network and Database_Parameter
        /// </summary>
        [Input("profileType")]
        public string? ProfileType { get; set; }

        public GetNdbProfilesArgs()
        {
        }
        public static new GetNdbProfilesArgs Empty => new GetNdbProfilesArgs();
    }

    public sealed class GetNdbProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Database engine. For eg. postgres_database
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// profile type. Types: Software, Compute, Network and Database_Parameter
        /// </summary>
        [Input("profileType")]
        public Input<string>? ProfileType { get; set; }

        public GetNdbProfilesInvokeArgs()
        {
        }
        public static new GetNdbProfilesInvokeArgs Empty => new GetNdbProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbProfilesResult
    {
        public readonly string? Engine;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ProfileType;
        /// <summary>
        /// List of profiles
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbProfilesProfileResult> Profiles;

        [OutputConstructor]
        private GetNdbProfilesResult(
            string? engine,

            string id,

            string? profileType,

            ImmutableArray<Outputs.GetNdbProfilesProfileResult> profiles)
        {
            Engine = engine;
            Id = id;
            ProfileType = profileType;
            Profiles = profiles;
        }
    }
}
