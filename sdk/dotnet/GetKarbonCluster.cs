// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetKarbonCluster
    {
        /// <summary>
        /// Describes a Karbon Cluster
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var cluster = Output.Create(Nutanix.GetKarbonCluster.InvokeAsync(new Nutanix.GetKarbonClusterArgs
        ///         {
        ///             KarbonClusterId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKarbonClusterResult> InvokeAsync(GetKarbonClusterArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKarbonClusterResult>("nutanix:index/getKarbonCluster:getKarbonCluster", args ?? new GetKarbonClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Karbon Cluster
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var cluster = Output.Create(Nutanix.GetKarbonCluster.InvokeAsync(new Nutanix.GetKarbonClusterArgs
        ///         {
        ///             KarbonClusterId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKarbonClusterResult> Invoke(GetKarbonClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKarbonClusterResult>("nutanix:index/getKarbonCluster:getKarbonCluster", args ?? new GetKarbonClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKarbonClusterArgs : Pulumi.InvokeArgs
    {
        [Input("karbonClusterId")]
        public string? KarbonClusterId { get; set; }

        [Input("karbonClusterName")]
        public string? KarbonClusterName { get; set; }

        public GetKarbonClusterArgs()
        {
        }
    }

    public sealed class GetKarbonClusterInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("karbonClusterId")]
        public Input<string>? KarbonClusterId { get; set; }

        [Input("karbonClusterName")]
        public Input<string>? KarbonClusterName { get; set; }

        public GetKarbonClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKarbonClusterResult
    {
        public readonly string DeploymentType;
        public readonly ImmutableArray<Outputs.GetKarbonClusterEtcdNodePoolResult> EtcdNodePools;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? KarbonClusterId;
        public readonly string? KarbonClusterName;
        public readonly string KubeapiServerIpv4Address;
        public readonly ImmutableArray<Outputs.GetKarbonClusterMasterNodePoolResult> MasterNodePools;
        public readonly string Name;
        public readonly string Status;
        public readonly string Uuid;
        public readonly string Version;
        public readonly ImmutableArray<Outputs.GetKarbonClusterWorkerNodePoolResult> WorkerNodePools;

        [OutputConstructor]
        private GetKarbonClusterResult(
            string deploymentType,

            ImmutableArray<Outputs.GetKarbonClusterEtcdNodePoolResult> etcdNodePools,

            string id,

            string? karbonClusterId,

            string? karbonClusterName,

            string kubeapiServerIpv4Address,

            ImmutableArray<Outputs.GetKarbonClusterMasterNodePoolResult> masterNodePools,

            string name,

            string status,

            string uuid,

            string version,

            ImmutableArray<Outputs.GetKarbonClusterWorkerNodePoolResult> workerNodePools)
        {
            DeploymentType = deploymentType;
            EtcdNodePools = etcdNodePools;
            Id = id;
            KarbonClusterId = karbonClusterId;
            KarbonClusterName = karbonClusterName;
            KubeapiServerIpv4Address = kubeapiServerIpv4Address;
            MasterNodePools = masterNodePools;
            Name = name;
            Status = status;
            Uuid = uuid;
            Version = version;
            WorkerNodePools = workerNodePools;
        }
    }
}
