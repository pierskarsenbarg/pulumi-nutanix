// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetKarbonCluster
    {
        /// <summary>
        /// Describes a Karbon Cluster
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cluster = Nutanix.GetKarbonCluster.Invoke(new()
        ///     {
        ///         KarbonClusterId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetKarbonClusterResult> InvokeAsync(GetKarbonClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKarbonClusterResult>("nutanix:index/getKarbonCluster:getKarbonCluster", args ?? new GetKarbonClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Karbon Cluster
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cluster = Nutanix.GetKarbonCluster.Invoke(new()
        ///     {
        ///         KarbonClusterId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKarbonClusterResult> Invoke(GetKarbonClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKarbonClusterResult>("nutanix:index/getKarbonCluster:getKarbonCluster", args ?? new GetKarbonClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKarbonClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Represents karbon cluster uuid
        /// </summary>
        [Input("karbonClusterId")]
        public string? KarbonClusterId { get; set; }

        /// <summary>
        /// Represents the name of karbon cluster
        /// </summary>
        [Input("karbonClusterName")]
        public string? KarbonClusterName { get; set; }

        public GetKarbonClusterArgs()
        {
        }
        public static new GetKarbonClusterArgs Empty => new GetKarbonClusterArgs();
    }

    public sealed class GetKarbonClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Represents karbon cluster uuid
        /// </summary>
        [Input("karbonClusterId")]
        public Input<string>? KarbonClusterId { get; set; }

        /// <summary>
        /// Represents the name of karbon cluster
        /// </summary>
        [Input("karbonClusterName")]
        public Input<string>? KarbonClusterName { get; set; }

        public GetKarbonClusterInvokeArgs()
        {
        }
        public static new GetKarbonClusterInvokeArgs Empty => new GetKarbonClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetKarbonClusterResult
    {
        public readonly string DeploymentType;
        /// <summary>
        /// - Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKarbonClusterEtcdNodePoolResult> EtcdNodePools;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? KarbonClusterId;
        public readonly string? KarbonClusterName;
        public readonly string KubeapiServerIpv4Address;
        /// <summary>
        /// - Configuration of the master node pools.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKarbonClusterMasterNodePoolResult> MasterNodePools;
        /// <summary>
        /// - Unique name of the node pool.
        /// </summary>
        public readonly string Name;
        public readonly string Status;
        public readonly string Uuid;
        /// <summary>
        /// - K8s version of the cluster.
        /// </summary>
        public readonly string Version;
        public readonly ImmutableArray<Outputs.GetKarbonClusterWorkerNodePoolResult> WorkerNodePools;

        [OutputConstructor]
        private GetKarbonClusterResult(
            string deploymentType,

            ImmutableArray<Outputs.GetKarbonClusterEtcdNodePoolResult> etcdNodePools,

            string id,

            string? karbonClusterId,

            string? karbonClusterName,

            string kubeapiServerIpv4Address,

            ImmutableArray<Outputs.GetKarbonClusterMasterNodePoolResult> masterNodePools,

            string name,

            string status,

            string uuid,

            string version,

            ImmutableArray<Outputs.GetKarbonClusterWorkerNodePoolResult> workerNodePools)
        {
            DeploymentType = deploymentType;
            EtcdNodePools = etcdNodePools;
            Id = id;
            KarbonClusterId = karbonClusterId;
            KarbonClusterName = karbonClusterName;
            KubeapiServerIpv4Address = kubeapiServerIpv4Address;
            MasterNodePools = masterNodePools;
            Name = name;
            Status = status;
            Uuid = uuid;
            Version = version;
            WorkerNodePools = workerNodePools;
        }
    }
}
