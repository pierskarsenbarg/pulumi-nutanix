// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbTmsCapability
    {
        public static Task<GetNdbTmsCapabilityResult> InvokeAsync(GetNdbTmsCapabilityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbTmsCapabilityResult>("nutanix:index/getNdbTmsCapability:getNdbTmsCapability", args ?? new GetNdbTmsCapabilityArgs(), options.WithDefaults());

        public static Output<GetNdbTmsCapabilityResult> Invoke(GetNdbTmsCapabilityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbTmsCapabilityResult>("nutanix:index/getNdbTmsCapability:getNdbTmsCapability", args ?? new GetNdbTmsCapabilityInvokeArgs(), options.WithDefaults());

        public static Output<GetNdbTmsCapabilityResult> Invoke(GetNdbTmsCapabilityInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbTmsCapabilityResult>("nutanix:index/getNdbTmsCapability:getNdbTmsCapability", args ?? new GetNdbTmsCapabilityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbTmsCapabilityArgs : global::Pulumi.InvokeArgs
    {
        [Input("timeMachineId", required: true)]
        public string TimeMachineId { get; set; } = null!;

        public GetNdbTmsCapabilityArgs()
        {
        }
        public static new GetNdbTmsCapabilityArgs Empty => new GetNdbTmsCapabilityArgs();
    }

    public sealed class GetNdbTmsCapabilityInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("timeMachineId", required: true)]
        public Input<string> TimeMachineId { get; set; } = null!;

        public GetNdbTmsCapabilityInvokeArgs()
        {
        }
        public static new GetNdbTmsCapabilityInvokeArgs Empty => new GetNdbTmsCapabilityInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbTmsCapabilityResult
    {
        public readonly ImmutableArray<Outputs.GetNdbTmsCapabilityCapabilityResult> Capabilities;
        public readonly string CapabilityResetTime;
        public readonly ImmutableArray<string> DatabaseIds;
        public readonly bool HealWithResetCapability;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LastContinuousSnapshotTime;
        public readonly ImmutableArray<Outputs.GetNdbTmsCapabilityLastContinuousSnapshotResult> LastContinuousSnapshots;
        public readonly ImmutableArray<Outputs.GetNdbTmsCapabilityLastDbLogResult> LastDbLogs;
        public readonly string LogCatchupStartTime;
        public readonly ImmutableDictionary<string, string> LogTimeInfo;
        public readonly string NxClusterAssociationType;
        public readonly string NxClusterId;
        public readonly string OutputTimeZone;
        public readonly string OverallContinuousRangeEndTime;
        public readonly string SlaId;
        public readonly bool Source;
        public readonly string TimeMachineId;
        public readonly string Type;

        [OutputConstructor]
        private GetNdbTmsCapabilityResult(
            ImmutableArray<Outputs.GetNdbTmsCapabilityCapabilityResult> capabilities,

            string capabilityResetTime,

            ImmutableArray<string> databaseIds,

            bool healWithResetCapability,

            string id,

            string lastContinuousSnapshotTime,

            ImmutableArray<Outputs.GetNdbTmsCapabilityLastContinuousSnapshotResult> lastContinuousSnapshots,

            ImmutableArray<Outputs.GetNdbTmsCapabilityLastDbLogResult> lastDbLogs,

            string logCatchupStartTime,

            ImmutableDictionary<string, string> logTimeInfo,

            string nxClusterAssociationType,

            string nxClusterId,

            string outputTimeZone,

            string overallContinuousRangeEndTime,

            string slaId,

            bool source,

            string timeMachineId,

            string type)
        {
            Capabilities = capabilities;
            CapabilityResetTime = capabilityResetTime;
            DatabaseIds = databaseIds;
            HealWithResetCapability = healWithResetCapability;
            Id = id;
            LastContinuousSnapshotTime = lastContinuousSnapshotTime;
            LastContinuousSnapshots = lastContinuousSnapshots;
            LastDbLogs = lastDbLogs;
            LogCatchupStartTime = logCatchupStartTime;
            LogTimeInfo = logTimeInfo;
            NxClusterAssociationType = nxClusterAssociationType;
            NxClusterId = nxClusterId;
            OutputTimeZone = outputTimeZone;
            OverallContinuousRangeEndTime = overallContinuousRangeEndTime;
            SlaId = slaId;
            Source = source;
            TimeMachineId = timeMachineId;
            Type = type;
        }
    }
}
