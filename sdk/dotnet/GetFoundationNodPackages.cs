// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetFoundationNodPackages
    {
        /// <summary>
        /// Describes a list of nos (aos) packages present in foundation vm
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var nosPackages = Output.Create(Nutanix.GetFoundationNodPackages.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Note
        /// 
        /// * This data source only lists .tar file names.
        /// 
        /// See detailed information in [Nutanix Foundation Nos Packages](https://www.nutanix.dev/api_references/foundation/#/b3A6MjIyMjMzODg-get-list-of-aos-packages-available-in-foundation).
        /// </summary>
        public static Task<GetFoundationNodPackagesResult> InvokeAsync(InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFoundationNodPackagesResult>("nutanix:index/getFoundationNodPackages:getFoundationNodPackages", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetFoundationNodPackagesResult
    {
        public readonly ImmutableArray<string> Entities;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetFoundationNodPackagesResult(
            ImmutableArray<string> entities,

            string id)
        {
            Entities = entities;
            Id = id;
        }
    }
}
