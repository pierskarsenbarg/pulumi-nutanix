// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetSubnetV2
    {
        /// <summary>
        /// Get a subnet with the specified UUID.
        /// </summary>
        public static Task<GetSubnetV2Result> InvokeAsync(GetSubnetV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetV2Result>("nutanix:index/getSubnetV2:getSubnetV2", args ?? new GetSubnetV2Args(), options.WithDefaults());

        /// <summary>
        /// Get a subnet with the specified UUID.
        /// </summary>
        public static Output<GetSubnetV2Result> Invoke(GetSubnetV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetV2Result>("nutanix:index/getSubnetV2:getSubnetV2", args ?? new GetSubnetV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a subnet with the specified UUID.
        /// </summary>
        public static Output<GetSubnetV2Result> Invoke(GetSubnetV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetV2Result>("nutanix:index/getSubnetV2:getSubnetV2", args ?? new GetSubnetV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) The UUID of the subnet.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        [Input("reservedIpAddresses")]
        private List<Inputs.GetSubnetV2ReservedIpAddressArgs>? _reservedIpAddresses;

        /// <summary>
        /// List of IPs that are excluded while allocating IP addresses to VM ports.
        /// </summary>
        public List<Inputs.GetSubnetV2ReservedIpAddressArgs> ReservedIpAddresses
        {
            get => _reservedIpAddresses ?? (_reservedIpAddresses = new List<Inputs.GetSubnetV2ReservedIpAddressArgs>());
            set => _reservedIpAddresses = value;
        }

        public GetSubnetV2Args()
        {
        }
        public static new GetSubnetV2Args Empty => new GetSubnetV2Args();
    }

    public sealed class GetSubnetV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) The UUID of the subnet.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        [Input("reservedIpAddresses")]
        private InputList<Inputs.GetSubnetV2ReservedIpAddressInputArgs>? _reservedIpAddresses;

        /// <summary>
        /// List of IPs that are excluded while allocating IP addresses to VM ports.
        /// </summary>
        public InputList<Inputs.GetSubnetV2ReservedIpAddressInputArgs> ReservedIpAddresses
        {
            get => _reservedIpAddresses ?? (_reservedIpAddresses = new InputList<Inputs.GetSubnetV2ReservedIpAddressInputArgs>());
            set => _reservedIpAddresses = value;
        }

        public GetSubnetV2InvokeArgs()
        {
        }
        public static new GetSubnetV2InvokeArgs Empty => new GetSubnetV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetV2Result
    {
        /// <summary>
        /// Name of the bridge on the host for the subnet.
        /// </summary>
        public readonly string BridgeName;
        /// <summary>
        /// Cluster Name
        /// </summary>
        public readonly string ClusterName;
        /// <summary>
        /// UUID of the cluster this subnet belongs to.
        /// </summary>
        public readonly string ClusterReference;
        /// <summary>
        /// Description of the subnet.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of DHCP options to be configured.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2DhcpOptionResult> DhcpOptions;
        /// <summary>
        /// List of IPs, which are a subset from the reserved IP address list, that must be advertised to the SDN gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2DynamicIpAddressResult> DynamicIpAddresses;
        public readonly string ExtId;
        /// <summary>
        /// Hypervisor Type
        /// </summary>
        public readonly string HypervisorType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP configuration for the subnet.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2IpConfigResult> IpConfigs;
        /// <summary>
        /// IP Prefix in CIDR format.
        /// </summary>
        public readonly string IpPrefix;
        /// <summary>
        /// IP usage statistics.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2IpUsageResult> IpUsages;
        /// <summary>
        /// Indicates whether the subnet is used for advanced networking.
        /// </summary>
        public readonly bool IsAdvancedNetworking;
        /// <summary>
        /// Indicates whether the subnet is used for external connectivity.
        /// </summary>
        public readonly bool IsExternal;
        /// <summary>
        /// Indicates whether NAT must be enabled for VPCs attached to the subnet. This is supported only for external subnets. NAT is enabled by default on external subnets.
        /// </summary>
        public readonly bool IsNatEnabled;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2LinkResult> Links;
        /// <summary>
        /// Migration state of the subnet. This field is read-only.
        /// </summary>
        public readonly string MigrationState;
        /// <summary>
        /// Name of the subnet.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// UUID of the Network function chain entity that this subnet belongs to (type VLAN only).
        /// </summary>
        public readonly string NetworkFunctionChainReference;
        /// <summary>
        /// or VLAN subnet, this field represents VLAN Id, valid range is from 0 to 4095; For overlay subnet, this field represents 24-bit VNI, this field is read-only.
        /// </summary>
        public readonly int NetworkId;
        /// <summary>
        /// List of IPs that are excluded while allocating IP addresses to VM ports.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2ReservedIpAddressResult> ReservedIpAddresses;
        /// <summary>
        /// Type of subnet.
        /// </summary>
        public readonly string SubnetType;
        /// <summary>
        /// UUID of the virtual switch this subnet belongs to (type VLAN only).
        /// </summary>
        public readonly string VirtualSwitchReference;
        /// <summary>
        /// Schema to configure a virtual switch
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2VirtualSwitchResult> VirtualSwitches;
        /// <summary>
        /// UUID of Virtual Private Cloud this subnet belongs to (type Overlay only).
        /// </summary>
        public readonly string VpcReference;
        /// <summary>
        /// Networking common base object
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetV2VpcResult> Vpcs;

        [OutputConstructor]
        private GetSubnetV2Result(
            string bridgeName,

            string clusterName,

            string clusterReference,

            string description,

            ImmutableArray<Outputs.GetSubnetV2DhcpOptionResult> dhcpOptions,

            ImmutableArray<Outputs.GetSubnetV2DynamicIpAddressResult> dynamicIpAddresses,

            string extId,

            string hypervisorType,

            string id,

            ImmutableArray<Outputs.GetSubnetV2IpConfigResult> ipConfigs,

            string ipPrefix,

            ImmutableArray<Outputs.GetSubnetV2IpUsageResult> ipUsages,

            bool isAdvancedNetworking,

            bool isExternal,

            bool isNatEnabled,

            ImmutableArray<Outputs.GetSubnetV2LinkResult> links,

            string migrationState,

            string name,

            string networkFunctionChainReference,

            int networkId,

            ImmutableArray<Outputs.GetSubnetV2ReservedIpAddressResult> reservedIpAddresses,

            string subnetType,

            string virtualSwitchReference,

            ImmutableArray<Outputs.GetSubnetV2VirtualSwitchResult> virtualSwitches,

            string vpcReference,

            ImmutableArray<Outputs.GetSubnetV2VpcResult> vpcs)
        {
            BridgeName = bridgeName;
            ClusterName = clusterName;
            ClusterReference = clusterReference;
            Description = description;
            DhcpOptions = dhcpOptions;
            DynamicIpAddresses = dynamicIpAddresses;
            ExtId = extId;
            HypervisorType = hypervisorType;
            Id = id;
            IpConfigs = ipConfigs;
            IpPrefix = ipPrefix;
            IpUsages = ipUsages;
            IsAdvancedNetworking = isAdvancedNetworking;
            IsExternal = isExternal;
            IsNatEnabled = isNatEnabled;
            Links = links;
            MigrationState = migrationState;
            Name = name;
            NetworkFunctionChainReference = networkFunctionChainReference;
            NetworkId = networkId;
            ReservedIpAddresses = reservedIpAddresses;
            SubnetType = subnetType;
            VirtualSwitchReference = virtualSwitchReference;
            VirtualSwitches = virtualSwitches;
            VpcReference = vpcReference;
            Vpcs = vpcs;
        }
    }
}
