// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to create maintenance window based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ### resource to create weekly maintenance window
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var acctest_managed = new Nutanix.NdbMaintenanceWindow("acctest-managed", new()
    ///     {
    ///         DayOfWeek = "TUESDAY",
    ///         Description = "desc",
    ///         Duration = 3,
    ///         Recurrence = "WEEKLY",
    ///         StartTime = "17:04:47",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### resource to create monthly maintenance window
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var acctest_managed = new Nutanix.NdbMaintenanceWindow("acctest-managed", new()
    ///     {
    ///         DayOfWeek = "TUESDAY",
    ///         Description = "description",
    ///         Duration = 2,
    ///         Recurrence = "MONTHLY",
    ///         StartTime = "17:04:47",
    ///         WeekOfMonth = 4,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbMaintenanceWindow:NdbMaintenanceWindow")]
    public partial class NdbMaintenanceWindow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// access level
        /// </summary>
        [Output("accessLevel")]
        public Output<string> AccessLevel { get; private set; } = null!;

        /// <summary>
        /// created date of maintenance window
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// modified date of maintenance window
        /// </summary>
        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        /// <summary>
        /// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        /// </summary>
        [Output("dayOfWeek")]
        public Output<string?> DayOfWeek { get; private set; } = null!;

        /// <summary>
        /// Description for maintenance window
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// duration in hours. Default is 2
        /// </summary>
        [Output("duration")]
        public Output<int?> Duration { get; private set; } = null!;

        /// <summary>
        /// entity task association for maintenance window
        /// </summary>
        [Output("entityTaskAssocs")]
        public Output<ImmutableArray<Outputs.NdbMaintenanceWindowEntityTaskAssoc>> EntityTaskAssocs { get; private set; } = null!;

        /// <summary>
        /// Name for the maintenance window.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// next run time for maintenance window to trigger
        /// </summary>
        [Output("nextRunTime")]
        public Output<string> NextRunTime { get; private set; } = null!;

        /// <summary>
        /// owner id of maintenance window
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// properties of maintenance window
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbMaintenanceWindowProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// Supported values [ MONTHLY, WEEKLY ]
        /// </summary>
        [Output("recurrence")]
        public Output<string> Recurrence { get; private set; } = null!;

        /// <summary>
        /// schedule of maintenance window
        /// </summary>
        [Output("schedules")]
        public Output<ImmutableArray<Outputs.NdbMaintenanceWindowSchedule>> Schedules { get; private set; } = null!;

        /// <summary>
        /// start time for maintenance window to trigger
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// status of maintennace window
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// tags of maintenance window
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbMaintenanceWindowTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// timezone . Default is Asia/Calcutta .
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// week of the month. Supports [1, 2, 3, 4] .
        /// </summary>
        [Output("weekOfMonth")]
        public Output<int?> WeekOfMonth { get; private set; } = null!;


        /// <summary>
        /// Create a NdbMaintenanceWindow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbMaintenanceWindow(string name, NdbMaintenanceWindowArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbMaintenanceWindow:NdbMaintenanceWindow", name, args ?? new NdbMaintenanceWindowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbMaintenanceWindow(string name, Input<string> id, NdbMaintenanceWindowState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbMaintenanceWindow:NdbMaintenanceWindow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbMaintenanceWindow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbMaintenanceWindow Get(string name, Input<string> id, NdbMaintenanceWindowState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbMaintenanceWindow(name, id, state, options);
        }
    }

    public sealed class NdbMaintenanceWindowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        /// </summary>
        [Input("dayOfWeek")]
        public Input<string>? DayOfWeek { get; set; }

        /// <summary>
        /// Description for maintenance window
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// duration in hours. Default is 2
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Name for the maintenance window.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Supported values [ MONTHLY, WEEKLY ]
        /// </summary>
        [Input("recurrence", required: true)]
        public Input<string> Recurrence { get; set; } = null!;

        /// <summary>
        /// start time for maintenance window to trigger
        /// </summary>
        [Input("startTime", required: true)]
        public Input<string> StartTime { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.NdbMaintenanceWindowTagArgs>? _tags;

        /// <summary>
        /// tags of maintenance window
        /// </summary>
        public InputList<Inputs.NdbMaintenanceWindowTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbMaintenanceWindowTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// timezone . Default is Asia/Calcutta .
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// week of the month. Supports [1, 2, 3, 4] .
        /// </summary>
        [Input("weekOfMonth")]
        public Input<int>? WeekOfMonth { get; set; }

        public NdbMaintenanceWindowArgs()
        {
        }
        public static new NdbMaintenanceWindowArgs Empty => new NdbMaintenanceWindowArgs();
    }

    public sealed class NdbMaintenanceWindowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// access level
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// created date of maintenance window
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// modified date of maintenance window
        /// </summary>
        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        /// <summary>
        /// Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        /// </summary>
        [Input("dayOfWeek")]
        public Input<string>? DayOfWeek { get; set; }

        /// <summary>
        /// Description for maintenance window
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// duration in hours. Default is 2
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        [Input("entityTaskAssocs")]
        private InputList<Inputs.NdbMaintenanceWindowEntityTaskAssocGetArgs>? _entityTaskAssocs;

        /// <summary>
        /// entity task association for maintenance window
        /// </summary>
        public InputList<Inputs.NdbMaintenanceWindowEntityTaskAssocGetArgs> EntityTaskAssocs
        {
            get => _entityTaskAssocs ?? (_entityTaskAssocs = new InputList<Inputs.NdbMaintenanceWindowEntityTaskAssocGetArgs>());
            set => _entityTaskAssocs = value;
        }

        /// <summary>
        /// Name for the maintenance window.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// next run time for maintenance window to trigger
        /// </summary>
        [Input("nextRunTime")]
        public Input<string>? NextRunTime { get; set; }

        /// <summary>
        /// owner id of maintenance window
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbMaintenanceWindowPropertyGetArgs>? _properties;

        /// <summary>
        /// properties of maintenance window
        /// </summary>
        public InputList<Inputs.NdbMaintenanceWindowPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbMaintenanceWindowPropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// Supported values [ MONTHLY, WEEKLY ]
        /// </summary>
        [Input("recurrence")]
        public Input<string>? Recurrence { get; set; }

        [Input("schedules")]
        private InputList<Inputs.NdbMaintenanceWindowScheduleGetArgs>? _schedules;

        /// <summary>
        /// schedule of maintenance window
        /// </summary>
        public InputList<Inputs.NdbMaintenanceWindowScheduleGetArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.NdbMaintenanceWindowScheduleGetArgs>());
            set => _schedules = value;
        }

        /// <summary>
        /// start time for maintenance window to trigger
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// status of maintennace window
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbMaintenanceWindowTagGetArgs>? _tags;

        /// <summary>
        /// tags of maintenance window
        /// </summary>
        public InputList<Inputs.NdbMaintenanceWindowTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbMaintenanceWindowTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// timezone . Default is Asia/Calcutta .
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// week of the month. Supports [1, 2, 3, 4] .
        /// </summary>
        [Input("weekOfMonth")]
        public Input<int>? WeekOfMonth { get; set; }

        public NdbMaintenanceWindowState()
        {
        }
        public static new NdbMaintenanceWindowState Empty => new NdbMaintenanceWindowState();
    }
}
