// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetLcmStatusV2
    {
        /// <summary>
        /// Get the LCM framework status. Represents the Status of LCM. Status represents details about a pending or ongoing action in LCM.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var lcmFrameworkStatus = Nutanix.GetLcmStatusV2.Invoke(new()
        ///     {
        ///         XClusterId = "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLcmStatusV2Result> InvokeAsync(GetLcmStatusV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLcmStatusV2Result>("nutanix:index/getLcmStatusV2:getLcmStatusV2", args ?? new GetLcmStatusV2Args(), options.WithDefaults());

        /// <summary>
        /// Get the LCM framework status. Represents the Status of LCM. Status represents details about a pending or ongoing action in LCM.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var lcmFrameworkStatus = Nutanix.GetLcmStatusV2.Invoke(new()
        ///     {
        ///         XClusterId = "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLcmStatusV2Result> Invoke(GetLcmStatusV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLcmStatusV2Result>("nutanix:index/getLcmStatusV2:getLcmStatusV2", args ?? new GetLcmStatusV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the LCM framework status. Represents the Status of LCM. Status represents details about a pending or ongoing action in LCM.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var lcmFrameworkStatus = Nutanix.GetLcmStatusV2.Invoke(new()
        ///     {
        ///         XClusterId = "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLcmStatusV2Result> Invoke(GetLcmStatusV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLcmStatusV2Result>("nutanix:index/getLcmStatusV2:getLcmStatusV2", args ?? new GetLcmStatusV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLcmStatusV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public string? XClusterId { get; set; }

        public GetLcmStatusV2Args()
        {
        }
        public static new GetLcmStatusV2Args Empty => new GetLcmStatusV2Args();
    }

    public sealed class GetLcmStatusV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public Input<string>? XClusterId { get; set; }

        public GetLcmStatusV2InvokeArgs()
        {
        }
        public static new GetLcmStatusV2InvokeArgs Empty => new GetLcmStatusV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetLcmStatusV2Result
    {
        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// LCM framework version information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmStatusV2FrameworkVersionResult> FrameworkVersions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Operation type and UUID of an ongoing operation in LCM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmStatusV2InProgressOperationResult> InProgressOperations;
        /// <summary>
        /// Boolean that indicates if cancel intent for LCM update is set or not.
        /// </summary>
        public readonly bool IsCancelIntentSet;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmStatusV2LinkResult> Links;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Upload task UUID.
        /// </summary>
        public readonly string UploadTaskUuid;
        public readonly string? XClusterId;

        [OutputConstructor]
        private GetLcmStatusV2Result(
            string extId,

            ImmutableArray<Outputs.GetLcmStatusV2FrameworkVersionResult> frameworkVersions,

            string id,

            ImmutableArray<Outputs.GetLcmStatusV2InProgressOperationResult> inProgressOperations,

            bool isCancelIntentSet,

            ImmutableArray<Outputs.GetLcmStatusV2LinkResult> links,

            string tenantId,

            string uploadTaskUuid,

            string? xClusterId)
        {
            ExtId = extId;
            FrameworkVersions = frameworkVersions;
            Id = id;
            InProgressOperations = inProgressOperations;
            IsCancelIntentSet = isCancelIntentSet;
            Links = links;
            TenantId = tenantId;
            UploadTaskUuid = uploadTaskUuid;
            XClusterId = xClusterId;
        }
    }
}
