// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a Nutanix Project resource to Create a Project.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var subnet = new Nutanix.Subnet("subnet", new()
    ///     {
    ///         ClusterUuid = "&lt;YOUR_CLUSTER_ID&gt;",
    ///         Description = "Description of my unit test VLAN",
    ///         VlanId = 31,
    ///         SubnetType = "VLAN",
    ///         SubnetIp = "10.250.140.0",
    ///         DefaultGatewayIp = "10.250.140.1",
    ///         PrefixLength = 24,
    ///         DhcpOptions = 
    ///         {
    ///             { "boot_file_name", "bootfile" },
    ///             { "domain_name", "nutanix" },
    ///             { "tftp_server_name", "10.250.140.200" },
    ///         },
    ///         DhcpDomainNameServerLists = new[]
    ///         {
    ///             "8.8.8.8",
    ///             "4.2.2.2",
    ///         },
    ///         DhcpDomainSearchLists = new[]
    ///         {
    ///             "terraform.nutanix.com",
    ///             "terraform.unit.test.com",
    ///         },
    ///     });
    /// 
    ///     var projectTestProject = new Nutanix.Project("projectTestProject", new()
    ///     {
    ///         Description = "This is my project",
    ///         Categories = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectCategoryArgs
    ///             {
    ///                 Name = "Environment",
    ///                 Value = "Staging",
    ///             },
    ///         },
    ///         ResourceDomain = new Nutanix.Inputs.ProjectResourceDomainArgs
    ///         {
    ///             Resources = new[]
    ///             {
    ///                 new Nutanix.Inputs.ProjectResourceDomainResourceArgs
    ///                 {
    ///                     Limit = 4,
    ///                     ResourceType = "STORAGE",
    ///                 },
    ///             },
    ///         },
    ///         DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs
    ///         {
    ///             Uuid = subnet.Metadata.Apply(metadata =&gt; metadata.Uuid),
    ///         },
    ///         ApiVersion = "3.1",
    ///     });
    /// 
    ///     // set use_project_internal flag to create project with acps
    ///     var projectTestIndex_projectProject = new Nutanix.Project("projectTestIndex/projectProject", new()
    ///     {
    ///         Description = "This is my project",
    ///         ClusterUuid = "&lt;YOUR_CLUSTER_ID&gt;",
    ///         UseProjectInternal = true,
    ///         DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs
    ///         {
    ///             Uuid = subnet.Metadata.Apply(metadata =&gt; metadata.Uuid),
    ///         },
    ///         UserReferenceLists = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectUserReferenceListArgs
    ///             {
    ///                 Name = "{{user_name}}",
    ///                 Kind = "user",
    ///                 Uuid = "{{user_uuid}}",
    ///             },
    ///         },
    ///         SubnetReferenceLists = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectSubnetReferenceListArgs
    ///             {
    ///                 Uuid = resource.Nutanix_subnet.Sub.Id,
    ///             },
    ///         },
    ///         Acps = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectAcpArgs
    ///             {
    ///                 Name = "{{acp_name}}",
    ///                 RoleReference = new Nutanix.Inputs.ProjectAcpRoleReferenceArgs
    ///                 {
    ///                     Kind = "role",
    ///                     Uuid = "{{role_uuid}}",
    ///                     Name = "Developer",
    ///                 },
    ///                 UserReferenceLists = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ProjectAcpUserReferenceListArgs
    ///                     {
    ///                         Name = "{{user_name}}",
    ///                         Kind = "user",
    ///                         Uuid = "{{user_uuid}}",
    ///                     },
    ///                 },
    ///                 Description = "{{description}}",
    ///             },
    ///         },
    ///         ApiVersion = "3.1",
    ///     });
    /// 
    ///     //# Create a project with user which not added in the PC
    ///     var projectTestNutanixIndex_projectProject = new Nutanix.Project("projectTestNutanixIndex/projectProject", new()
    ///     {
    ///         Description = "This is my project",
    ///         ClusterUuid = "&lt;YOUR_CLUSTER_ID&gt;",
    ///         UseProjectInternal = true,
    ///         DefaultSubnetReference = new Nutanix.Inputs.ProjectDefaultSubnetReferenceArgs
    ///         {
    ///             Uuid = subnet.Metadata.Apply(metadata =&gt; metadata.Uuid),
    ///         },
    ///         UserReferenceLists = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectUserReferenceListArgs
    ///             {
    ///                 Name = "{{user_name}}",
    ///                 Kind = "user",
    ///                 Uuid = "{{user_uuid}}",
    ///             },
    ///         },
    ///         SubnetReferenceLists = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectSubnetReferenceListArgs
    ///             {
    ///                 Uuid = resource.Nutanix_subnet.Sub.Id,
    ///             },
    ///         },
    ///         Acps = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectAcpArgs
    ///             {
    ///                 Name = "{{acp_name}}",
    ///                 RoleReference = new Nutanix.Inputs.ProjectAcpRoleReferenceArgs
    ///                 {
    ///                     Kind = "role",
    ///                     Uuid = "{{role_uuid}}",
    ///                     Name = "Developer",
    ///                 },
    ///                 UserReferenceLists = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ProjectAcpUserReferenceListArgs
    ///                     {
    ///                         Name = "{{user_name}}",
    ///                         Kind = "user",
    ///                         Uuid = "{{user_uuid}}",
    ///                     },
    ///                 },
    ///                 Description = "{{description}}",
    ///             },
    ///         },
    ///         UserLists = new[]
    ///         {
    ///             new Nutanix.Inputs.ProjectUserListArgs
    ///             {
    ///                 Metadata = 
    ///                 {
    ///                     { "kind", "user" },
    ///                     { "uuid", "{{ UUID of the USER }}" },
    ///                 },
    ///                 DirectoryServiceUser = new Nutanix.Inputs.ProjectUserListDirectoryServiceUserArgs
    ///                 {
    ///                     UserPrincipalName = "{{ Name of user }}",
    ///                     DirectoryServiceReference = new Nutanix.Inputs.ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs
    ///                     {
    ///                         Uuid = "{{ DIRECTORY SERVICE UUID }}",
    ///                         Kind = "directory_service",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ApiVersion = "3.1",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        [Output("accountReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectAccountReferenceList>> AccountReferenceLists { get; private set; } = null!;

        [Output("acps")]
        public Output<ImmutableArray<Outputs.ProjectAcp>> Acps { get; private set; } = null!;

        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The category values represented as a dictionary of key &gt; list of values.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<Outputs.ProjectCategory>> Categories { get; private set; } = null!;

        [Output("clusterReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectClusterReferenceList>> ClusterReferenceLists { get; private set; } = null!;

        /// <summary>
        /// The UUID of cluster. (Required when using project_internal flag).
        /// </summary>
        [Output("clusterUuid")]
        public Output<string?> ClusterUuid { get; private set; } = null!;

        [Output("defaultEnvironmentReference")]
        public Output<Outputs.ProjectDefaultEnvironmentReference> DefaultEnvironmentReference { get; private set; } = null!;

        [Output("defaultSubnetReference")]
        public Output<Outputs.ProjectDefaultSubnetReference> DefaultSubnetReference { get; private set; } = null!;

        /// <summary>
        /// A description for project.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// flag to allow collaboration of projects. (Use with project_internal flag)
        /// </summary>
        [Output("enableCollab")]
        public Output<bool?> EnableCollab { get; private set; } = null!;

        [Output("environmentReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectEnvironmentReferenceList>> EnvironmentReferenceLists { get; private set; } = null!;

        [Output("externalNetworkLists")]
        public Output<ImmutableArray<Outputs.ProjectExternalNetworkList>> ExternalNetworkLists { get; private set; } = null!;

        [Output("externalUserGroupReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectExternalUserGroupReferenceList>> ExternalUserGroupReferenceLists { get; private set; } = null!;

        [Output("isDefault")]
        public Output<bool> IsDefault { get; private set; } = null!;

        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name for the project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("ownerReference")]
        public Output<ImmutableDictionary<string, string>> OwnerReference { get; private set; } = null!;

        [Output("projectReference")]
        public Output<ImmutableDictionary<string, string>> ProjectReference { get; private set; } = null!;

        [Output("resourceDomain")]
        public Output<Outputs.ProjectResourceDomain?> ResourceDomain { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("subnetReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectSubnetReferenceList>> SubnetReferenceLists { get; private set; } = null!;

        [Output("tunnelReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectTunnelReferenceList>> TunnelReferenceLists { get; private set; } = null!;

        /// <summary>
        /// flag to use project internal for user role mapping
        /// </summary>
        [Output("useProjectInternal")]
        public Output<bool?> UseProjectInternal { get; private set; } = null!;

        [Output("userGroupLists")]
        public Output<ImmutableArray<Outputs.ProjectUserGroupList>> UserGroupLists { get; private set; } = null!;

        [Output("userLists")]
        public Output<ImmutableArray<Outputs.ProjectUserList>> UserLists { get; private set; } = null!;

        /// <summary>
        /// List of Reference of users.
        /// </summary>
        [Output("userReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectUserReferenceList>> UserReferenceLists { get; private set; } = null!;

        [Output("vpcReferenceLists")]
        public Output<ImmutableArray<Outputs.ProjectVpcReferenceList>> VpcReferenceLists { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountReferenceLists")]
        private InputList<Inputs.ProjectAccountReferenceListArgs>? _accountReferenceLists;
        public InputList<Inputs.ProjectAccountReferenceListArgs> AccountReferenceLists
        {
            get => _accountReferenceLists ?? (_accountReferenceLists = new InputList<Inputs.ProjectAccountReferenceListArgs>());
            set => _accountReferenceLists = value;
        }

        [Input("acps")]
        private InputList<Inputs.ProjectAcpArgs>? _acps;
        public InputList<Inputs.ProjectAcpArgs> Acps
        {
            get => _acps ?? (_acps = new InputList<Inputs.ProjectAcpArgs>());
            set => _acps = value;
        }

        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("categories")]
        private InputList<Inputs.ProjectCategoryArgs>? _categories;

        /// <summary>
        /// - (Optional) The category values represented as a dictionary of key &gt; list of values.
        /// </summary>
        public InputList<Inputs.ProjectCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.ProjectCategoryArgs>());
            set => _categories = value;
        }

        [Input("clusterReferenceLists")]
        private InputList<Inputs.ProjectClusterReferenceListArgs>? _clusterReferenceLists;
        public InputList<Inputs.ProjectClusterReferenceListArgs> ClusterReferenceLists
        {
            get => _clusterReferenceLists ?? (_clusterReferenceLists = new InputList<Inputs.ProjectClusterReferenceListArgs>());
            set => _clusterReferenceLists = value;
        }

        /// <summary>
        /// The UUID of cluster. (Required when using project_internal flag).
        /// </summary>
        [Input("clusterUuid")]
        public Input<string>? ClusterUuid { get; set; }

        [Input("defaultEnvironmentReference")]
        public Input<Inputs.ProjectDefaultEnvironmentReferenceArgs>? DefaultEnvironmentReference { get; set; }

        [Input("defaultSubnetReference", required: true)]
        public Input<Inputs.ProjectDefaultSubnetReferenceArgs> DefaultSubnetReference { get; set; } = null!;

        /// <summary>
        /// A description for project.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// flag to allow collaboration of projects. (Use with project_internal flag)
        /// </summary>
        [Input("enableCollab")]
        public Input<bool>? EnableCollab { get; set; }

        [Input("environmentReferenceLists")]
        private InputList<Inputs.ProjectEnvironmentReferenceListArgs>? _environmentReferenceLists;
        public InputList<Inputs.ProjectEnvironmentReferenceListArgs> EnvironmentReferenceLists
        {
            get => _environmentReferenceLists ?? (_environmentReferenceLists = new InputList<Inputs.ProjectEnvironmentReferenceListArgs>());
            set => _environmentReferenceLists = value;
        }

        [Input("externalNetworkLists")]
        private InputList<Inputs.ProjectExternalNetworkListArgs>? _externalNetworkLists;
        public InputList<Inputs.ProjectExternalNetworkListArgs> ExternalNetworkLists
        {
            get => _externalNetworkLists ?? (_externalNetworkLists = new InputList<Inputs.ProjectExternalNetworkListArgs>());
            set => _externalNetworkLists = value;
        }

        [Input("externalUserGroupReferenceLists")]
        private InputList<Inputs.ProjectExternalUserGroupReferenceListArgs>? _externalUserGroupReferenceLists;
        public InputList<Inputs.ProjectExternalUserGroupReferenceListArgs> ExternalUserGroupReferenceLists
        {
            get => _externalUserGroupReferenceLists ?? (_externalUserGroupReferenceLists = new InputList<Inputs.ProjectExternalUserGroupReferenceListArgs>());
            set => _externalUserGroupReferenceLists = value;
        }

        /// <summary>
        /// The name for the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        [Input("resourceDomain")]
        public Input<Inputs.ProjectResourceDomainArgs>? ResourceDomain { get; set; }

        [Input("subnetReferenceLists")]
        private InputList<Inputs.ProjectSubnetReferenceListArgs>? _subnetReferenceLists;
        public InputList<Inputs.ProjectSubnetReferenceListArgs> SubnetReferenceLists
        {
            get => _subnetReferenceLists ?? (_subnetReferenceLists = new InputList<Inputs.ProjectSubnetReferenceListArgs>());
            set => _subnetReferenceLists = value;
        }

        [Input("tunnelReferenceLists")]
        private InputList<Inputs.ProjectTunnelReferenceListArgs>? _tunnelReferenceLists;
        public InputList<Inputs.ProjectTunnelReferenceListArgs> TunnelReferenceLists
        {
            get => _tunnelReferenceLists ?? (_tunnelReferenceLists = new InputList<Inputs.ProjectTunnelReferenceListArgs>());
            set => _tunnelReferenceLists = value;
        }

        /// <summary>
        /// flag to use project internal for user role mapping
        /// </summary>
        [Input("useProjectInternal")]
        public Input<bool>? UseProjectInternal { get; set; }

        [Input("userGroupLists")]
        private InputList<Inputs.ProjectUserGroupListArgs>? _userGroupLists;
        public InputList<Inputs.ProjectUserGroupListArgs> UserGroupLists
        {
            get => _userGroupLists ?? (_userGroupLists = new InputList<Inputs.ProjectUserGroupListArgs>());
            set => _userGroupLists = value;
        }

        [Input("userLists")]
        private InputList<Inputs.ProjectUserListArgs>? _userLists;
        public InputList<Inputs.ProjectUserListArgs> UserLists
        {
            get => _userLists ?? (_userLists = new InputList<Inputs.ProjectUserListArgs>());
            set => _userLists = value;
        }

        [Input("userReferenceLists")]
        private InputList<Inputs.ProjectUserReferenceListArgs>? _userReferenceLists;

        /// <summary>
        /// List of Reference of users.
        /// </summary>
        public InputList<Inputs.ProjectUserReferenceListArgs> UserReferenceLists
        {
            get => _userReferenceLists ?? (_userReferenceLists = new InputList<Inputs.ProjectUserReferenceListArgs>());
            set => _userReferenceLists = value;
        }

        [Input("vpcReferenceLists")]
        private InputList<Inputs.ProjectVpcReferenceListArgs>? _vpcReferenceLists;
        public InputList<Inputs.ProjectVpcReferenceListArgs> VpcReferenceLists
        {
            get => _vpcReferenceLists ?? (_vpcReferenceLists = new InputList<Inputs.ProjectVpcReferenceListArgs>());
            set => _vpcReferenceLists = value;
        }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        [Input("accountReferenceLists")]
        private InputList<Inputs.ProjectAccountReferenceListGetArgs>? _accountReferenceLists;
        public InputList<Inputs.ProjectAccountReferenceListGetArgs> AccountReferenceLists
        {
            get => _accountReferenceLists ?? (_accountReferenceLists = new InputList<Inputs.ProjectAccountReferenceListGetArgs>());
            set => _accountReferenceLists = value;
        }

        [Input("acps")]
        private InputList<Inputs.ProjectAcpGetArgs>? _acps;
        public InputList<Inputs.ProjectAcpGetArgs> Acps
        {
            get => _acps ?? (_acps = new InputList<Inputs.ProjectAcpGetArgs>());
            set => _acps = value;
        }

        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("categories")]
        private InputList<Inputs.ProjectCategoryGetArgs>? _categories;

        /// <summary>
        /// - (Optional) The category values represented as a dictionary of key &gt; list of values.
        /// </summary>
        public InputList<Inputs.ProjectCategoryGetArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.ProjectCategoryGetArgs>());
            set => _categories = value;
        }

        [Input("clusterReferenceLists")]
        private InputList<Inputs.ProjectClusterReferenceListGetArgs>? _clusterReferenceLists;
        public InputList<Inputs.ProjectClusterReferenceListGetArgs> ClusterReferenceLists
        {
            get => _clusterReferenceLists ?? (_clusterReferenceLists = new InputList<Inputs.ProjectClusterReferenceListGetArgs>());
            set => _clusterReferenceLists = value;
        }

        /// <summary>
        /// The UUID of cluster. (Required when using project_internal flag).
        /// </summary>
        [Input("clusterUuid")]
        public Input<string>? ClusterUuid { get; set; }

        [Input("defaultEnvironmentReference")]
        public Input<Inputs.ProjectDefaultEnvironmentReferenceGetArgs>? DefaultEnvironmentReference { get; set; }

        [Input("defaultSubnetReference")]
        public Input<Inputs.ProjectDefaultSubnetReferenceGetArgs>? DefaultSubnetReference { get; set; }

        /// <summary>
        /// A description for project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// flag to allow collaboration of projects. (Use with project_internal flag)
        /// </summary>
        [Input("enableCollab")]
        public Input<bool>? EnableCollab { get; set; }

        [Input("environmentReferenceLists")]
        private InputList<Inputs.ProjectEnvironmentReferenceListGetArgs>? _environmentReferenceLists;
        public InputList<Inputs.ProjectEnvironmentReferenceListGetArgs> EnvironmentReferenceLists
        {
            get => _environmentReferenceLists ?? (_environmentReferenceLists = new InputList<Inputs.ProjectEnvironmentReferenceListGetArgs>());
            set => _environmentReferenceLists = value;
        }

        [Input("externalNetworkLists")]
        private InputList<Inputs.ProjectExternalNetworkListGetArgs>? _externalNetworkLists;
        public InputList<Inputs.ProjectExternalNetworkListGetArgs> ExternalNetworkLists
        {
            get => _externalNetworkLists ?? (_externalNetworkLists = new InputList<Inputs.ProjectExternalNetworkListGetArgs>());
            set => _externalNetworkLists = value;
        }

        [Input("externalUserGroupReferenceLists")]
        private InputList<Inputs.ProjectExternalUserGroupReferenceListGetArgs>? _externalUserGroupReferenceLists;
        public InputList<Inputs.ProjectExternalUserGroupReferenceListGetArgs> ExternalUserGroupReferenceLists
        {
            get => _externalUserGroupReferenceLists ?? (_externalUserGroupReferenceLists = new InputList<Inputs.ProjectExternalUserGroupReferenceListGetArgs>());
            set => _externalUserGroupReferenceLists = value;
        }

        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name for the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        [Input("resourceDomain")]
        public Input<Inputs.ProjectResourceDomainGetArgs>? ResourceDomain { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("subnetReferenceLists")]
        private InputList<Inputs.ProjectSubnetReferenceListGetArgs>? _subnetReferenceLists;
        public InputList<Inputs.ProjectSubnetReferenceListGetArgs> SubnetReferenceLists
        {
            get => _subnetReferenceLists ?? (_subnetReferenceLists = new InputList<Inputs.ProjectSubnetReferenceListGetArgs>());
            set => _subnetReferenceLists = value;
        }

        [Input("tunnelReferenceLists")]
        private InputList<Inputs.ProjectTunnelReferenceListGetArgs>? _tunnelReferenceLists;
        public InputList<Inputs.ProjectTunnelReferenceListGetArgs> TunnelReferenceLists
        {
            get => _tunnelReferenceLists ?? (_tunnelReferenceLists = new InputList<Inputs.ProjectTunnelReferenceListGetArgs>());
            set => _tunnelReferenceLists = value;
        }

        /// <summary>
        /// flag to use project internal for user role mapping
        /// </summary>
        [Input("useProjectInternal")]
        public Input<bool>? UseProjectInternal { get; set; }

        [Input("userGroupLists")]
        private InputList<Inputs.ProjectUserGroupListGetArgs>? _userGroupLists;
        public InputList<Inputs.ProjectUserGroupListGetArgs> UserGroupLists
        {
            get => _userGroupLists ?? (_userGroupLists = new InputList<Inputs.ProjectUserGroupListGetArgs>());
            set => _userGroupLists = value;
        }

        [Input("userLists")]
        private InputList<Inputs.ProjectUserListGetArgs>? _userLists;
        public InputList<Inputs.ProjectUserListGetArgs> UserLists
        {
            get => _userLists ?? (_userLists = new InputList<Inputs.ProjectUserListGetArgs>());
            set => _userLists = value;
        }

        [Input("userReferenceLists")]
        private InputList<Inputs.ProjectUserReferenceListGetArgs>? _userReferenceLists;

        /// <summary>
        /// List of Reference of users.
        /// </summary>
        public InputList<Inputs.ProjectUserReferenceListGetArgs> UserReferenceLists
        {
            get => _userReferenceLists ?? (_userReferenceLists = new InputList<Inputs.ProjectUserReferenceListGetArgs>());
            set => _userReferenceLists = value;
        }

        [Input("vpcReferenceLists")]
        private InputList<Inputs.ProjectVpcReferenceListGetArgs>? _vpcReferenceLists;
        public InputList<Inputs.ProjectVpcReferenceListGetArgs> VpcReferenceLists
        {
            get => _vpcReferenceLists ?? (_vpcReferenceLists = new InputList<Inputs.ProjectVpcReferenceListGetArgs>());
            set => _vpcReferenceLists = value;
        }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
