// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [NutanixResourceType("nutanix:index/objectStoreV2:ObjectStoreV2")]
    public partial class ObjectStoreV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - A list of the UUIDs of the certificates of an Object store.
        /// </summary>
        [Output("certificateExtIds")]
        public Output<ImmutableArray<string>> CertificateExtIds { get; private set; } = null!;

        /// <summary>
        /// -(Optional) UUID of the AHV or ESXi cluster.
        /// </summary>
        [Output("clusterExtId")]
        public Output<string> ClusterExtId { get; private set; } = null!;

        /// <summary>
        /// - The time when the Object store was created.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The deployment version of the Object store.
        /// </summary>
        [Output("deploymentVersion")]
        public Output<string> DeploymentVersion { get; private set; } = null!;

        /// <summary>
        /// -(Optional) A brief description of the Object store.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// - The time when the Object store was last updated.
        /// </summary>
        [Output("lastUpdateTime")]
        public Output<string> LastUpdateTime { get; private set; } = null!;

        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.ObjectStoreV2Link>> Links { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Metadata associated with this resource.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.ObjectStoreV2Metadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// -(Required) The name of the Object store.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
        /// </summary>
        [Output("numWorkerNodes")]
        public Output<int> NumWorkerNodes { get; private set; } = null!;

        /// <summary>
        /// -(Optional) A list of static IP addresses used as public IPs to access the Object store.
        /// </summary>
        [Output("publicNetworkIps")]
        public Output<ImmutableArray<Outputs.ObjectStoreV2PublicNetworkIp>> PublicNetworkIps { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Public network reference of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        [Output("publicNetworkReference")]
        public Output<string> PublicNetworkReference { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The region in which the Object store is deployed.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Enum for the state of the Object store.
        /// | Enum                                   | Description                                                     |
        /// |----------------------------------------|-----------------------------------------------------------------|
        /// | `DEPLOYING_OBJECT_STORE`             | The Object store is being deployed.                             |
        /// | `OBJECT_STORE_DEPLOYMENT_FAILED`     | The Object store deployment has failed.                         |
        /// | `DELETING_OBJECT_STORE`              | A deployed Object store is being deleted.                       |
        /// | `OBJECT_STORE_OPERATION_FAILED`      | There was an error while performing an operation on the Object store. |
        /// | `UNDEPLOYED_OBJECT_STORE`            | The Object store is not deployed.                               |
        /// | `OBJECT_STORE_OPERATION_PENDING`     | There is an ongoing operation on the Object store.              |
        /// | `OBJECT_STORE_AVAILABLE`            | There are no ongoing operations on the deployed Object store.   |
        /// | `OBJECT_STORE_CERT_CREATION_FAILED`  | Creating the Object store certificate has failed.               |
        /// | `CREATING_OBJECT_STORE_CERT`         | A certificate is being created for the Object store.            |
        /// | `OBJECT_STORE_DELETION_FAILED`       | There was an error deleting the Object store.                   |
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// -(Optional) An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        [Output("storageNetworkDnsIp")]
        public Output<Outputs.ObjectStoreV2StorageNetworkDnsIp> StorageNetworkDnsIp { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Reference to the Storage Network of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        [Output("storageNetworkReference")]
        public Output<string> StorageNetworkReference { get; private set; } = null!;

        /// <summary>
        /// -(Optional) An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        [Output("storageNetworkVip")]
        public Output<Outputs.ObjectStoreV2StorageNetworkVip> StorageNetworkVip { get; private set; } = null!;

        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Size of the Object store in GiB.
        /// </summary>
        [Output("totalCapacityGib")]
        public Output<int> TotalCapacityGib { get; private set; } = null!;


        /// <summary>
        /// Create a ObjectStoreV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObjectStoreV2(string name, ObjectStoreV2Args? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/objectStoreV2:ObjectStoreV2", name, args ?? new ObjectStoreV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ObjectStoreV2(string name, Input<string> id, ObjectStoreV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/objectStoreV2:ObjectStoreV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObjectStoreV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObjectStoreV2 Get(string name, Input<string> id, ObjectStoreV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ObjectStoreV2(name, id, state, options);
        }
    }

    public sealed class ObjectStoreV2Args : global::Pulumi.ResourceArgs
    {
        [Input("certificateExtIds")]
        private InputList<string>? _certificateExtIds;

        /// <summary>
        /// - A list of the UUIDs of the certificates of an Object store.
        /// </summary>
        public InputList<string> CertificateExtIds
        {
            get => _certificateExtIds ?? (_certificateExtIds = new InputList<string>());
            set => _certificateExtIds = value;
        }

        /// <summary>
        /// -(Optional) UUID of the AHV or ESXi cluster.
        /// </summary>
        [Input("clusterExtId")]
        public Input<string>? ClusterExtId { get; set; }

        /// <summary>
        /// -(Optional) The deployment version of the Object store.
        /// </summary>
        [Input("deploymentVersion")]
        public Input<string>? DeploymentVersion { get; set; }

        /// <summary>
        /// -(Optional) A brief description of the Object store.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -(Optional) The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.ObjectStoreV2MetadataArgs>? _metadatas;

        /// <summary>
        /// -(Optional) Metadata associated with this resource.
        /// </summary>
        public InputList<Inputs.ObjectStoreV2MetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.ObjectStoreV2MetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// -(Required) The name of the Object store.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -(Optional) The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
        /// </summary>
        [Input("numWorkerNodes")]
        public Input<int>? NumWorkerNodes { get; set; }

        [Input("publicNetworkIps")]
        private InputList<Inputs.ObjectStoreV2PublicNetworkIpArgs>? _publicNetworkIps;

        /// <summary>
        /// -(Optional) A list of static IP addresses used as public IPs to access the Object store.
        /// </summary>
        public InputList<Inputs.ObjectStoreV2PublicNetworkIpArgs> PublicNetworkIps
        {
            get => _publicNetworkIps ?? (_publicNetworkIps = new InputList<Inputs.ObjectStoreV2PublicNetworkIpArgs>());
            set => _publicNetworkIps = value;
        }

        /// <summary>
        /// -(Optional) Public network reference of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        [Input("publicNetworkReference")]
        public Input<string>? PublicNetworkReference { get; set; }

        /// <summary>
        /// -(Optional) The region in which the Object store is deployed.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// -(Optional) Enum for the state of the Object store.
        /// | Enum                                   | Description                                                     |
        /// |----------------------------------------|-----------------------------------------------------------------|
        /// | `DEPLOYING_OBJECT_STORE`             | The Object store is being deployed.                             |
        /// | `OBJECT_STORE_DEPLOYMENT_FAILED`     | The Object store deployment has failed.                         |
        /// | `DELETING_OBJECT_STORE`              | A deployed Object store is being deleted.                       |
        /// | `OBJECT_STORE_OPERATION_FAILED`      | There was an error while performing an operation on the Object store. |
        /// | `UNDEPLOYED_OBJECT_STORE`            | The Object store is not deployed.                               |
        /// | `OBJECT_STORE_OPERATION_PENDING`     | There is an ongoing operation on the Object store.              |
        /// | `OBJECT_STORE_AVAILABLE`            | There are no ongoing operations on the deployed Object store.   |
        /// | `OBJECT_STORE_CERT_CREATION_FAILED`  | Creating the Object store certificate has failed.               |
        /// | `CREATING_OBJECT_STORE_CERT`         | A certificate is being created for the Object store.            |
        /// | `OBJECT_STORE_DELETION_FAILED`       | There was an error deleting the Object store.                   |
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// -(Optional) An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        [Input("storageNetworkDnsIp")]
        public Input<Inputs.ObjectStoreV2StorageNetworkDnsIpArgs>? StorageNetworkDnsIp { get; set; }

        /// <summary>
        /// -(Optional) Reference to the Storage Network of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        [Input("storageNetworkReference")]
        public Input<string>? StorageNetworkReference { get; set; }

        /// <summary>
        /// -(Optional) An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        [Input("storageNetworkVip")]
        public Input<Inputs.ObjectStoreV2StorageNetworkVipArgs>? StorageNetworkVip { get; set; }

        /// <summary>
        /// -(Optional) Size of the Object store in GiB.
        /// </summary>
        [Input("totalCapacityGib")]
        public Input<int>? TotalCapacityGib { get; set; }

        public ObjectStoreV2Args()
        {
        }
        public static new ObjectStoreV2Args Empty => new ObjectStoreV2Args();
    }

    public sealed class ObjectStoreV2State : global::Pulumi.ResourceArgs
    {
        [Input("certificateExtIds")]
        private InputList<string>? _certificateExtIds;

        /// <summary>
        /// - A list of the UUIDs of the certificates of an Object store.
        /// </summary>
        public InputList<string> CertificateExtIds
        {
            get => _certificateExtIds ?? (_certificateExtIds = new InputList<string>());
            set => _certificateExtIds = value;
        }

        /// <summary>
        /// -(Optional) UUID of the AHV or ESXi cluster.
        /// </summary>
        [Input("clusterExtId")]
        public Input<string>? ClusterExtId { get; set; }

        /// <summary>
        /// - The time when the Object store was created.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// -(Optional) The deployment version of the Object store.
        /// </summary>
        [Input("deploymentVersion")]
        public Input<string>? DeploymentVersion { get; set; }

        /// <summary>
        /// -(Optional) A brief description of the Object store.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -(Optional) The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// - The time when the Object store was last updated.
        /// </summary>
        [Input("lastUpdateTime")]
        public Input<string>? LastUpdateTime { get; set; }

        [Input("links")]
        private InputList<Inputs.ObjectStoreV2LinkGetArgs>? _links;

        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public InputList<Inputs.ObjectStoreV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ObjectStoreV2LinkGetArgs>());
            set => _links = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.ObjectStoreV2MetadataGetArgs>? _metadatas;

        /// <summary>
        /// -(Optional) Metadata associated with this resource.
        /// </summary>
        public InputList<Inputs.ObjectStoreV2MetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.ObjectStoreV2MetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// -(Required) The name of the Object store.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -(Optional) The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
        /// </summary>
        [Input("numWorkerNodes")]
        public Input<int>? NumWorkerNodes { get; set; }

        [Input("publicNetworkIps")]
        private InputList<Inputs.ObjectStoreV2PublicNetworkIpGetArgs>? _publicNetworkIps;

        /// <summary>
        /// -(Optional) A list of static IP addresses used as public IPs to access the Object store.
        /// </summary>
        public InputList<Inputs.ObjectStoreV2PublicNetworkIpGetArgs> PublicNetworkIps
        {
            get => _publicNetworkIps ?? (_publicNetworkIps = new InputList<Inputs.ObjectStoreV2PublicNetworkIpGetArgs>());
            set => _publicNetworkIps = value;
        }

        /// <summary>
        /// -(Optional) Public network reference of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        [Input("publicNetworkReference")]
        public Input<string>? PublicNetworkReference { get; set; }

        /// <summary>
        /// -(Optional) The region in which the Object store is deployed.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// -(Optional) Enum for the state of the Object store.
        /// | Enum                                   | Description                                                     |
        /// |----------------------------------------|-----------------------------------------------------------------|
        /// | `DEPLOYING_OBJECT_STORE`             | The Object store is being deployed.                             |
        /// | `OBJECT_STORE_DEPLOYMENT_FAILED`     | The Object store deployment has failed.                         |
        /// | `DELETING_OBJECT_STORE`              | A deployed Object store is being deleted.                       |
        /// | `OBJECT_STORE_OPERATION_FAILED`      | There was an error while performing an operation on the Object store. |
        /// | `UNDEPLOYED_OBJECT_STORE`            | The Object store is not deployed.                               |
        /// | `OBJECT_STORE_OPERATION_PENDING`     | There is an ongoing operation on the Object store.              |
        /// | `OBJECT_STORE_AVAILABLE`            | There are no ongoing operations on the deployed Object store.   |
        /// | `OBJECT_STORE_CERT_CREATION_FAILED`  | Creating the Object store certificate has failed.               |
        /// | `CREATING_OBJECT_STORE_CERT`         | A certificate is being created for the Object store.            |
        /// | `OBJECT_STORE_DELETION_FAILED`       | There was an error deleting the Object store.                   |
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// -(Optional) An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        [Input("storageNetworkDnsIp")]
        public Input<Inputs.ObjectStoreV2StorageNetworkDnsIpGetArgs>? StorageNetworkDnsIp { get; set; }

        /// <summary>
        /// -(Optional) Reference to the Storage Network of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        [Input("storageNetworkReference")]
        public Input<string>? StorageNetworkReference { get; set; }

        /// <summary>
        /// -(Optional) An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        [Input("storageNetworkVip")]
        public Input<Inputs.ObjectStoreV2StorageNetworkVipGetArgs>? StorageNetworkVip { get; set; }

        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// -(Optional) Size of the Object store in GiB.
        /// </summary>
        [Input("totalCapacityGib")]
        public Input<int>? TotalCapacityGib { get; set; }

        public ObjectStoreV2State()
        {
        }
        public static new ObjectStoreV2State Empty => new ObjectStoreV2State();
    }
}
