// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetFoundationCentralImagedClustersList
    {
        /// <summary>
        /// List all the clusters created using Foundation Central.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var imagedClustersList = Nutanix.GetFoundationCentralImagedClustersList.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFoundationCentralImagedClustersListResult> InvokeAsync(GetFoundationCentralImagedClustersListArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFoundationCentralImagedClustersListResult>("nutanix:index/getFoundationCentralImagedClustersList:getFoundationCentralImagedClustersList", args ?? new GetFoundationCentralImagedClustersListArgs(), options.WithDefaults());

        /// <summary>
        /// List all the clusters created using Foundation Central.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var imagedClustersList = Nutanix.GetFoundationCentralImagedClustersList.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFoundationCentralImagedClustersListResult> Invoke(GetFoundationCentralImagedClustersListInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFoundationCentralImagedClustersListResult>("nutanix:index/getFoundationCentralImagedClustersList:getFoundationCentralImagedClustersList", args ?? new GetFoundationCentralImagedClustersListInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// List all the clusters created using Foundation Central.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var imagedClustersList = Nutanix.GetFoundationCentralImagedClustersList.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFoundationCentralImagedClustersListResult> Invoke(GetFoundationCentralImagedClustersListInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFoundationCentralImagedClustersListResult>("nutanix:index/getFoundationCentralImagedClustersList:getFoundationCentralImagedClustersList", args ?? new GetFoundationCentralImagedClustersListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFoundationCentralImagedClustersListArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        public Inputs.GetFoundationCentralImagedClustersListFiltersArgs? Filters { get; set; }

        /// <summary>
        /// The number of records retrieved.
        /// </summary>
        [Input("length")]
        public int? Length { get; set; }

        /// <summary>
        /// Offset from the start of the object list.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        public GetFoundationCentralImagedClustersListArgs()
        {
        }
        public static new GetFoundationCentralImagedClustersListArgs Empty => new GetFoundationCentralImagedClustersListArgs();
    }

    public sealed class GetFoundationCentralImagedClustersListInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        public Input<Inputs.GetFoundationCentralImagedClustersListFiltersInputArgs>? Filters { get; set; }

        /// <summary>
        /// The number of records retrieved.
        /// </summary>
        [Input("length")]
        public Input<int>? Length { get; set; }

        /// <summary>
        /// Offset from the start of the object list.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        public GetFoundationCentralImagedClustersListInvokeArgs()
        {
        }
        public static new GetFoundationCentralImagedClustersListInvokeArgs Empty => new GetFoundationCentralImagedClustersListInvokeArgs();
    }


    [OutputType]
    public sealed class GetFoundationCentralImagedClustersListResult
    {
        public readonly Outputs.GetFoundationCentralImagedClustersListFiltersResult? Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetFoundationCentralImagedClustersListImagedClusterResult> ImagedClusters;
        /// <summary>
        /// The number of records retrieved.
        /// </summary>
        public readonly int? Length;
        public readonly ImmutableArray<Outputs.GetFoundationCentralImagedClustersListMetadataResult> Metadatas;
        /// <summary>
        /// Offset from the start of the object list.
        /// </summary>
        public readonly int? Offset;

        [OutputConstructor]
        private GetFoundationCentralImagedClustersListResult(
            Outputs.GetFoundationCentralImagedClustersListFiltersResult? filters,

            string id,

            ImmutableArray<Outputs.GetFoundationCentralImagedClustersListImagedClusterResult> imagedClusters,

            int? length,

            ImmutableArray<Outputs.GetFoundationCentralImagedClustersListMetadataResult> metadatas,

            int? offset)
        {
            Filters = filters;
            Id = id;
            ImagedClusters = imagedClusters;
            Length = length;
            Metadatas = metadatas;
            Offset = offset;
        }
    }
}
