// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to authorize db server VMs for cloning of database instance based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbAuthorizeDbserver("name", new()
    ///     {
    ///         DbserversIds = new[]
    ///         {
    ///             "{{ dbServer_IDs}}",
    ///         },
    ///         TimeMachineName = "test-pg-inst",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver")]
    public partial class NdbAuthorizeDbserver : global::Pulumi.CustomResource
    {
        [Output("dbserversIds")]
        public Output<ImmutableArray<string>> DbserversIds { get; private set; } = null!;

        [Output("timeMachineId")]
        public Output<string?> TimeMachineId { get; private set; } = null!;

        /// <summary>
        /// * `DbserversId `: (Required)
        /// </summary>
        [Output("timeMachineName")]
        public Output<string?> TimeMachineName { get; private set; } = null!;


        /// <summary>
        /// Create a NdbAuthorizeDbserver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbAuthorizeDbserver(string name, NdbAuthorizeDbserverArgs? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver", name, args ?? new NdbAuthorizeDbserverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbAuthorizeDbserver(string name, Input<string> id, NdbAuthorizeDbserverState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbAuthorizeDbserver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbAuthorizeDbserver Get(string name, Input<string> id, NdbAuthorizeDbserverState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbAuthorizeDbserver(name, id, state, options);
        }
    }

    public sealed class NdbAuthorizeDbserverArgs : global::Pulumi.ResourceArgs
    {
        [Input("dbserversIds")]
        private InputList<string>? _dbserversIds;
        public InputList<string> DbserversIds
        {
            get => _dbserversIds ?? (_dbserversIds = new InputList<string>());
            set => _dbserversIds = value;
        }

        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        /// <summary>
        /// * `DbserversId `: (Required)
        /// </summary>
        [Input("timeMachineName")]
        public Input<string>? TimeMachineName { get; set; }

        public NdbAuthorizeDbserverArgs()
        {
        }
        public static new NdbAuthorizeDbserverArgs Empty => new NdbAuthorizeDbserverArgs();
    }

    public sealed class NdbAuthorizeDbserverState : global::Pulumi.ResourceArgs
    {
        [Input("dbserversIds")]
        private InputList<string>? _dbserversIds;
        public InputList<string> DbserversIds
        {
            get => _dbserversIds ?? (_dbserversIds = new InputList<string>());
            set => _dbserversIds = value;
        }

        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        /// <summary>
        /// * `DbserversId `: (Required)
        /// </summary>
        [Input("timeMachineName")]
        public Input<string>? TimeMachineName { get; set; }

        public NdbAuthorizeDbserverState()
        {
        }
        public static new NdbAuthorizeDbserverState Empty => new NdbAuthorizeDbserverState();
    }
}
