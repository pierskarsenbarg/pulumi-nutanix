// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNetworkSecurityRule
    {
        /// <summary>
        /// Describes a Network security rule
        /// 
        /// &gt; NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Isolate Development VMs From Production VMs And Get Its Information)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = PiersKarsenbarg.Nutanix;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var isolation = new Nutanix.NetworkSecurityRule("isolation", new()
        ///     {
        ///         Description = "Isolation Rule Example",
        ///         IsolationRuleAction = "APPLY",
        ///         IsolationRuleFirstEntityFilterKindLists = new[]
        ///         {
        ///             "vm",
        ///         },
        ///         IsolationRuleFirstEntityFilterParams = new[]
        ///         {
        ///             new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs
        ///             {
        ///                 Name = "Environment",
        ///                 Values = new[]
        ///                 {
        ///                     "Dev",
        ///                 },
        ///             },
        ///         },
        ///         IsolationRuleFirstEntityFilterType = "CATEGORIES_MATCH_ALL",
        ///         IsolationRuleSecondEntityFilterKindLists = new[]
        ///         {
        ///             "vm",
        ///         },
        ///         IsolationRuleSecondEntityFilterParams = new[]
        ///         {
        ///             new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs
        ///             {
        ///                 Name = "Environment",
        ///                 Values = new[]
        ///                 {
        ///                     "Production",
        ///                 },
        ///             },
        ///         },
        ///         IsolationRuleSecondEntityFilterType = "CATEGORIES_MATCH_ALL",
        ///     });
        /// 
        ///     var test = Nutanix.GetNetworkSecurityRule.Invoke(new()
        ///     {
        ///         NetworkSecurityRuleId = isolation.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkSecurityRuleResult> InvokeAsync(GetNetworkSecurityRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkSecurityRuleResult>("nutanix:index/getNetworkSecurityRule:getNetworkSecurityRule", args ?? new GetNetworkSecurityRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Network security rule
        /// 
        /// &gt; NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Isolate Development VMs From Production VMs And Get Its Information)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = PiersKarsenbarg.Nutanix;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var isolation = new Nutanix.NetworkSecurityRule("isolation", new()
        ///     {
        ///         Description = "Isolation Rule Example",
        ///         IsolationRuleAction = "APPLY",
        ///         IsolationRuleFirstEntityFilterKindLists = new[]
        ///         {
        ///             "vm",
        ///         },
        ///         IsolationRuleFirstEntityFilterParams = new[]
        ///         {
        ///             new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs
        ///             {
        ///                 Name = "Environment",
        ///                 Values = new[]
        ///                 {
        ///                     "Dev",
        ///                 },
        ///             },
        ///         },
        ///         IsolationRuleFirstEntityFilterType = "CATEGORIES_MATCH_ALL",
        ///         IsolationRuleSecondEntityFilterKindLists = new[]
        ///         {
        ///             "vm",
        ///         },
        ///         IsolationRuleSecondEntityFilterParams = new[]
        ///         {
        ///             new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs
        ///             {
        ///                 Name = "Environment",
        ///                 Values = new[]
        ///                 {
        ///                     "Production",
        ///                 },
        ///             },
        ///         },
        ///         IsolationRuleSecondEntityFilterType = "CATEGORIES_MATCH_ALL",
        ///     });
        /// 
        ///     var test = Nutanix.GetNetworkSecurityRule.Invoke(new()
        ///     {
        ///         NetworkSecurityRuleId = isolation.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetworkSecurityRuleResult> Invoke(GetNetworkSecurityRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkSecurityRuleResult>("nutanix:index/getNetworkSecurityRule:getNetworkSecurityRule", args ?? new GetNetworkSecurityRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkSecurityRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<Inputs.GetNetworkSecurityRuleCategoryArgs>? _categories;

        /// <summary>
        /// Categories for the network_security_rule.
        /// </summary>
        public List<Inputs.GetNetworkSecurityRuleCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetNetworkSecurityRuleCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Represents network security rule UUID
        /// </summary>
        [Input("networkSecurityRuleId", required: true)]
        public string NetworkSecurityRuleId { get; set; } = null!;

        public GetNetworkSecurityRuleArgs()
        {
        }
        public static new GetNetworkSecurityRuleArgs Empty => new GetNetworkSecurityRuleArgs();
    }

    public sealed class GetNetworkSecurityRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private InputList<Inputs.GetNetworkSecurityRuleCategoryInputArgs>? _categories;

        /// <summary>
        /// Categories for the network_security_rule.
        /// </summary>
        public InputList<Inputs.GetNetworkSecurityRuleCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetNetworkSecurityRuleCategoryInputArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Represents network security rule UUID
        /// </summary>
        [Input("networkSecurityRuleId", required: true)]
        public Input<string> NetworkSecurityRuleId { get; set; } = null!;

        public GetNetworkSecurityRuleInvokeArgs()
        {
        }
        public static new GetNetworkSecurityRuleInvokeArgs Empty => new GetNetworkSecurityRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkSecurityRuleResult
    {
        /// <summary>
        /// - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        /// </summary>
        public readonly string AdRuleAction;
        /// <summary>
        /// The set of categories that matching VMs need to have.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleAdRuleInboundAllowListResult> AdRuleInboundAllowLists;
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListResult> AdRuleOutboundAllowLists;
        /// <summary>
        /// - Default policy for communication within target group.
        /// </summary>
        public readonly string AdRuleTargetGroupDefaultInternalPolicy;
        /// <summary>
        /// - List of kinds associated with this filter.
        /// </summary>
        public readonly ImmutableArray<string> AdRuleTargetGroupFilterKindLists;
        /// <summary>
        /// - A list of category key and list of values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleAdRuleTargetGroupFilterParamResult> AdRuleTargetGroupFilterParams;
        /// <summary>
        /// - The type of the filter being used.
        /// </summary>
        public readonly string AdRuleTargetGroupFilterType;
        /// <summary>
        /// - Way to identify the object for which rule is applied.
        /// </summary>
        public readonly string AdRuleTargetGroupPeerSpecificationType;
        public readonly bool AllowIpv6Traffic;
        public readonly string ApiVersion;
        /// <summary>
        /// - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        /// </summary>
        public readonly string AppRuleAction;
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleAppRuleInboundAllowListResult> AppRuleInboundAllowLists;
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListResult> AppRuleOutboundAllowLists;
        /// <summary>
        /// - Default policy for communication within target group.
        /// </summary>
        public readonly string AppRuleTargetGroupDefaultInternalPolicy;
        /// <summary>
        /// - List of kinds associated with this filter.
        /// </summary>
        public readonly ImmutableArray<string> AppRuleTargetGroupFilterKindLists;
        /// <summary>
        /// - A list of category key and list of values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleAppRuleTargetGroupFilterParamResult> AppRuleTargetGroupFilterParams;
        /// <summary>
        /// - The type of the filter being used.
        /// </summary>
        public readonly string AppRuleTargetGroupFilterType;
        /// <summary>
        /// - Way to identify the object for which rule is applied.
        /// </summary>
        public readonly string AppRuleTargetGroupPeerSpecificationType;
        /// <summary>
        /// Categories for the network_security_rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleCategoryResult> Categories;
        /// <summary>
        /// A description for network_security_rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsPolicyHitlogEnabled;
        /// <summary>
        /// - These rules are used for environmental isolation.
        /// </summary>
        public readonly string IsolationRuleAction;
        /// <summary>
        /// - List of kinds associated with this filter.
        /// </summary>
        public readonly ImmutableArray<string> IsolationRuleFirstEntityFilterKindLists;
        /// <summary>
        /// - A list of category key and list of values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParamResult> IsolationRuleFirstEntityFilterParams;
        /// <summary>
        /// - The type of the filter being used.
        /// </summary>
        public readonly string IsolationRuleFirstEntityFilterType;
        /// <summary>
        /// - List of kinds associated with this filter.
        /// </summary>
        public readonly ImmutableArray<string> IsolationRuleSecondEntityFilterKindLists;
        /// <summary>
        /// - A list of category key and list of values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParamResult> IsolationRuleSecondEntityFilterParams;
        /// <summary>
        /// - The type of the filter being used.
        /// </summary>
        public readonly string IsolationRuleSecondEntityFilterType;
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// - the name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Required) The ID for the rule you want to retrieve.
        /// </summary>
        public readonly string NetworkSecurityRuleId;
        /// <summary>
        /// The reference to a user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> OwnerReference;
        /// <summary>
        /// The reference to a project.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ProjectReference;
        /// <summary>
        /// These rules are used for quarantining suspected VMs. Target group is a required attribute. Empty inbound_allow_list will not allow anything into target group. Empty outbound_allow_list will allow everything from target group.
        /// </summary>
        public readonly string QuarantineRuleAction;
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListResult> QuarantineRuleInboundAllowLists;
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListResult> QuarantineRuleOutboundAllowLists;
        /// <summary>
        /// - Default policy for communication within target group.
        /// </summary>
        public readonly string QuarantineRuleTargetGroupDefaultInternalPolicy;
        /// <summary>
        /// - List of kinds associated with this filter.
        /// </summary>
        public readonly ImmutableArray<string> QuarantineRuleTargetGroupFilterKindLists;
        /// <summary>
        /// - A list of category key and list of values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParamResult> QuarantineRuleTargetGroupFilterParams;
        /// <summary>
        /// - The type of the filter being used.
        /// </summary>
        public readonly string QuarantineRuleTargetGroupFilterType;
        /// <summary>
        /// - Way to identify the object for which rule is applied.
        /// </summary>
        public readonly string QuarantineRuleTargetGroupPeerSpecificationType;

        [OutputConstructor]
        private GetNetworkSecurityRuleResult(
            string adRuleAction,

            ImmutableArray<Outputs.GetNetworkSecurityRuleAdRuleInboundAllowListResult> adRuleInboundAllowLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListResult> adRuleOutboundAllowLists,

            string adRuleTargetGroupDefaultInternalPolicy,

            ImmutableArray<string> adRuleTargetGroupFilterKindLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleAdRuleTargetGroupFilterParamResult> adRuleTargetGroupFilterParams,

            string adRuleTargetGroupFilterType,

            string adRuleTargetGroupPeerSpecificationType,

            bool allowIpv6Traffic,

            string apiVersion,

            string appRuleAction,

            ImmutableArray<Outputs.GetNetworkSecurityRuleAppRuleInboundAllowListResult> appRuleInboundAllowLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListResult> appRuleOutboundAllowLists,

            string appRuleTargetGroupDefaultInternalPolicy,

            ImmutableArray<string> appRuleTargetGroupFilterKindLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleAppRuleTargetGroupFilterParamResult> appRuleTargetGroupFilterParams,

            string appRuleTargetGroupFilterType,

            string appRuleTargetGroupPeerSpecificationType,

            ImmutableArray<Outputs.GetNetworkSecurityRuleCategoryResult> categories,

            string description,

            string id,

            bool isPolicyHitlogEnabled,

            string isolationRuleAction,

            ImmutableArray<string> isolationRuleFirstEntityFilterKindLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParamResult> isolationRuleFirstEntityFilterParams,

            string isolationRuleFirstEntityFilterType,

            ImmutableArray<string> isolationRuleSecondEntityFilterKindLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParamResult> isolationRuleSecondEntityFilterParams,

            string isolationRuleSecondEntityFilterType,

            ImmutableDictionary<string, string> metadata,

            string name,

            string networkSecurityRuleId,

            ImmutableDictionary<string, string> ownerReference,

            ImmutableDictionary<string, string> projectReference,

            string quarantineRuleAction,

            ImmutableArray<Outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListResult> quarantineRuleInboundAllowLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListResult> quarantineRuleOutboundAllowLists,

            string quarantineRuleTargetGroupDefaultInternalPolicy,

            ImmutableArray<string> quarantineRuleTargetGroupFilterKindLists,

            ImmutableArray<Outputs.GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParamResult> quarantineRuleTargetGroupFilterParams,

            string quarantineRuleTargetGroupFilterType,

            string quarantineRuleTargetGroupPeerSpecificationType)
        {
            AdRuleAction = adRuleAction;
            AdRuleInboundAllowLists = adRuleInboundAllowLists;
            AdRuleOutboundAllowLists = adRuleOutboundAllowLists;
            AdRuleTargetGroupDefaultInternalPolicy = adRuleTargetGroupDefaultInternalPolicy;
            AdRuleTargetGroupFilterKindLists = adRuleTargetGroupFilterKindLists;
            AdRuleTargetGroupFilterParams = adRuleTargetGroupFilterParams;
            AdRuleTargetGroupFilterType = adRuleTargetGroupFilterType;
            AdRuleTargetGroupPeerSpecificationType = adRuleTargetGroupPeerSpecificationType;
            AllowIpv6Traffic = allowIpv6Traffic;
            ApiVersion = apiVersion;
            AppRuleAction = appRuleAction;
            AppRuleInboundAllowLists = appRuleInboundAllowLists;
            AppRuleOutboundAllowLists = appRuleOutboundAllowLists;
            AppRuleTargetGroupDefaultInternalPolicy = appRuleTargetGroupDefaultInternalPolicy;
            AppRuleTargetGroupFilterKindLists = appRuleTargetGroupFilterKindLists;
            AppRuleTargetGroupFilterParams = appRuleTargetGroupFilterParams;
            AppRuleTargetGroupFilterType = appRuleTargetGroupFilterType;
            AppRuleTargetGroupPeerSpecificationType = appRuleTargetGroupPeerSpecificationType;
            Categories = categories;
            Description = description;
            Id = id;
            IsPolicyHitlogEnabled = isPolicyHitlogEnabled;
            IsolationRuleAction = isolationRuleAction;
            IsolationRuleFirstEntityFilterKindLists = isolationRuleFirstEntityFilterKindLists;
            IsolationRuleFirstEntityFilterParams = isolationRuleFirstEntityFilterParams;
            IsolationRuleFirstEntityFilterType = isolationRuleFirstEntityFilterType;
            IsolationRuleSecondEntityFilterKindLists = isolationRuleSecondEntityFilterKindLists;
            IsolationRuleSecondEntityFilterParams = isolationRuleSecondEntityFilterParams;
            IsolationRuleSecondEntityFilterType = isolationRuleSecondEntityFilterType;
            Metadata = metadata;
            Name = name;
            NetworkSecurityRuleId = networkSecurityRuleId;
            OwnerReference = ownerReference;
            ProjectReference = projectReference;
            QuarantineRuleAction = quarantineRuleAction;
            QuarantineRuleInboundAllowLists = quarantineRuleInboundAllowLists;
            QuarantineRuleOutboundAllowLists = quarantineRuleOutboundAllowLists;
            QuarantineRuleTargetGroupDefaultInternalPolicy = quarantineRuleTargetGroupDefaultInternalPolicy;
            QuarantineRuleTargetGroupFilterKindLists = quarantineRuleTargetGroupFilterKindLists;
            QuarantineRuleTargetGroupFilterParams = quarantineRuleTargetGroupFilterParams;
            QuarantineRuleTargetGroupFilterType = quarantineRuleTargetGroupFilterType;
            QuarantineRuleTargetGroupPeerSpecificationType = quarantineRuleTargetGroupPeerSpecificationType;
        }
    }
}
