// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetFoundationCentralImagedNodesList
    {
        public static Task<GetFoundationCentralImagedNodesListResult> InvokeAsync(GetFoundationCentralImagedNodesListArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFoundationCentralImagedNodesListResult>("nutanix:index/getFoundationCentralImagedNodesList:getFoundationCentralImagedNodesList", args ?? new GetFoundationCentralImagedNodesListArgs(), options.WithDefaults());

        public static Output<GetFoundationCentralImagedNodesListResult> Invoke(GetFoundationCentralImagedNodesListInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFoundationCentralImagedNodesListResult>("nutanix:index/getFoundationCentralImagedNodesList:getFoundationCentralImagedNodesList", args ?? new GetFoundationCentralImagedNodesListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFoundationCentralImagedNodesListArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        public Inputs.GetFoundationCentralImagedNodesListFiltersArgs? Filters { get; set; }

        [Input("length")]
        public int? Length { get; set; }

        [Input("offset")]
        public int? Offset { get; set; }

        public GetFoundationCentralImagedNodesListArgs()
        {
        }
        public static new GetFoundationCentralImagedNodesListArgs Empty => new GetFoundationCentralImagedNodesListArgs();
    }

    public sealed class GetFoundationCentralImagedNodesListInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        public Input<Inputs.GetFoundationCentralImagedNodesListFiltersInputArgs>? Filters { get; set; }

        [Input("length")]
        public Input<int>? Length { get; set; }

        [Input("offset")]
        public Input<int>? Offset { get; set; }

        public GetFoundationCentralImagedNodesListInvokeArgs()
        {
        }
        public static new GetFoundationCentralImagedNodesListInvokeArgs Empty => new GetFoundationCentralImagedNodesListInvokeArgs();
    }


    [OutputType]
    public sealed class GetFoundationCentralImagedNodesListResult
    {
        public readonly Outputs.GetFoundationCentralImagedNodesListFiltersResult? Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetFoundationCentralImagedNodesListImagedNodeResult> ImagedNodes;
        public readonly int? Length;
        public readonly ImmutableArray<Outputs.GetFoundationCentralImagedNodesListMetadataResult> Metadatas;
        public readonly int? Offset;

        [OutputConstructor]
        private GetFoundationCentralImagedNodesListResult(
            Outputs.GetFoundationCentralImagedNodesListFiltersResult? filters,

            string id,

            ImmutableArray<Outputs.GetFoundationCentralImagedNodesListImagedNodeResult> imagedNodes,

            int? length,

            ImmutableArray<Outputs.GetFoundationCentralImagedNodesListMetadataResult> metadatas,

            int? offset)
        {
            Filters = filters;
            Id = id;
            ImagedNodes = imagedNodes;
            Length = length;
            Metadatas = metadatas;
            Offset = offset;
        }
    }
}
