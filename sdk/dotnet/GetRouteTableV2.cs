// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetRouteTableV2
    {
        /// <summary>
        /// Provides Nutanix datasource Get the route table for the specified extId.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_route_table = Nutanix.GetRouteTableV2.Invoke(new()
        ///     {
        ///         ExtId = "ad7692ff-50f8-4a47-b3c9-fd5a3462d455",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteTableV2Result> InvokeAsync(GetRouteTableV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteTableV2Result>("nutanix:index/getRouteTableV2:getRouteTableV2", args ?? new GetRouteTableV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides Nutanix datasource Get the route table for the specified extId.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_route_table = Nutanix.GetRouteTableV2.Invoke(new()
        ///     {
        ///         ExtId = "ad7692ff-50f8-4a47-b3c9-fd5a3462d455",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteTableV2Result> Invoke(GetRouteTableV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableV2Result>("nutanix:index/getRouteTableV2:getRouteTableV2", args ?? new GetRouteTableV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides Nutanix datasource Get the route table for the specified extId.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_route_table = Nutanix.GetRouteTableV2.Invoke(new()
        ///     {
        ///         ExtId = "ad7692ff-50f8-4a47-b3c9-fd5a3462d455",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteTableV2Result> Invoke(GetRouteTableV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableV2Result>("nutanix:index/getRouteTableV2:getRouteTableV2", args ?? new GetRouteTableV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteTableV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Route UUID
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetRouteTableV2Args()
        {
        }
        public static new GetRouteTableV2Args Empty => new GetRouteTableV2Args();
    }

    public sealed class GetRouteTableV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Route UUID
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetRouteTableV2InvokeArgs()
        {
        }
        public static new GetRouteTableV2InvokeArgs Empty => new GetRouteTableV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteTableV2Result
    {
        /// <summary>
        /// Route UUID
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// External routing domain associated with this route table.
        /// </summary>
        public readonly string ExternalRoutingDomainReference;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableV2LinkResult> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableV2MetadataResult> Metadatas;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// VPC reference.
        /// </summary>
        public readonly string VpcReference;

        [OutputConstructor]
        private GetRouteTableV2Result(
            string extId,

            string externalRoutingDomainReference,

            string id,

            ImmutableArray<Outputs.GetRouteTableV2LinkResult> links,

            ImmutableArray<Outputs.GetRouteTableV2MetadataResult> metadatas,

            string tenantId,

            string vpcReference)
        {
            ExtId = extId;
            ExternalRoutingDomainReference = externalRoutingDomainReference;
            Id = id;
            Links = links;
            Metadatas = metadatas;
            TenantId = tenantId;
            VpcReference = vpcReference;
        }
    }
}
