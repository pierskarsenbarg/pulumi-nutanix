// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Add node on a cluster identified by {extId}.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // cluster of 3 node uuid that we want to add node
    ///     var clustersExtId = "00057b8b-0b3b-4b3b-0000-000000000000";
    /// 
    ///     // for example
    ///     var cvmIp = "10.xx.xx.xx";
    /// 
    ///     //# check if the node to add is un configured or not
    ///     var cluster_node = new Nutanix.ClustersDiscoverUnconfiguredNodesV2("cluster-node", new()
    ///     {
    ///         ExtId = clustersExtId,
    ///         AddressType = "IPV4",
    ///         IpFilterLists = new[]
    ///         {
    ///             new Nutanix.Inputs.ClustersDiscoverUnconfiguredNodesV2IpFilterListArgs
    ///             {
    ///                 Ipv4s = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ClustersDiscoverUnconfiguredNodesV2IpFilterListIpv4Args
    ///                     {
    ///                         Value = cvmIp,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     //# fetch Network info for unconfigured node
    ///     var node_network_info = new Nutanix.ClustersUnconfiguredNodeNetworksV2("node-network-info", new()
    ///     {
    ///         ExtId = clustersExtId,
    ///         RequestType = "expand_cluster",
    ///         NodeLists = new[]
    ///         {
    ///             new Nutanix.Inputs.ClustersUnconfiguredNodeNetworksV2NodeListArgs
    ///             {
    ///                 CvmIps = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ClustersUnconfiguredNodeNetworksV2NodeListCvmIpArgs
    ///                     {
    ///                         Ipv4s = new[]
    ///                         {
    ///                             new Nutanix.Inputs.ClustersUnconfiguredNodeNetworksV2NodeListCvmIpIpv4Args
    ///                             {
    ///                                 Value = cvmIp,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 HypervisorIps = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIpArgs
    ///                     {
    ///                         Ipv4s = new[]
    ///                         {
    ///                             new Nutanix.Inputs.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIpIpv4Args
    ///                             {
    ///                                 Value = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].HypervisorIps[0]?.Ipv4s[0]?.Value),
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             cluster_node,
    ///         },
    ///     });
    /// 
    ///     //# add node to the cluster
    ///     var add_node = new Nutanix.ClusterAddNodeV2("add-node", new()
    ///     {
    ///         ClusterExtId = clustersExtId,
    ///         ShouldSkipAddNode = false,
    ///         ShouldSkipPreExpandChecks = false,
    ///         NodeParams = new[]
    ///         {
    ///             new Nutanix.Inputs.ClusterAddNodeV2NodeParamArgs
    ///             {
    ///                 ShouldSkipHostNetworking = false,
    ///                 HypervisorIsos = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ClusterAddNodeV2NodeParamHypervisorIsoArgs
    ///                     {
    ///                         Type = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].HypervisorType),
    ///                     },
    ///                 },
    ///                 NodeLists = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListArgs
    ///                     {
    ///                         NodeUuid = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].NodeUuid),
    ///                         Model = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].RackableUnitModel),
    ///                         BlockId = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].RackableUnitSerial),
    ///                         HypervisorType = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].HypervisorType),
    ///                         HypervisorVersion = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].HypervisorVersion),
    ///                         NodePosition = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].NodePosition),
    ///                         NosVersion = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].NosVersion),
    ///                         HypervisorHostname = "example",
    ///                         CurrentNetworkInterface = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].Uplinks[0]?.UplinkLists[0]?.Name),
    ///                         HypervisorIps = new[]
    ///                         {
    ///                             new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListHypervisorIpArgs
    ///                             {
    ///                                 Ipv4s = new[]
    ///                                 {
    ///                                     new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListHypervisorIpIpv4Args
    ///                                     {
    ///                                         Value = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].HypervisorIps[0]?.Ipv4s[0]?.Value),
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         CvmIps = new[]
    ///                         {
    ///                             new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListCvmIpArgs
    ///                             {
    ///                                 Ipv4s = new[]
    ///                                 {
    ///                                     new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListCvmIpIpv4Args
    ///                                     {
    ///                                         Value = cvmIp,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         IpmiIps = new[]
    ///                         {
    ///                             new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListIpmiIpArgs
    ///                             {
    ///                                 Ipv4s = new[]
    ///                                 {
    ///                                     new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListIpmiIpIpv4Args
    ///                                     {
    ///                                         Value = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].IpmiIps[0]?.Ipv4s[0]?.Value),
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         IsRoboMixedHypervisor = true,
    ///                         Networks = new[]
    ///                         {
    ///                             new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListNetworkArgs
    ///                             {
    ///                                 Name = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].NetworkInfos[0]?.Hcis[0]?.Name),
    ///                                 Networks = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].NetworkInfos[0]?.Hcis[0]?.Networks),
    ///                                 Uplinks = new[]
    ///                                 {
    ///                                     new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListNetworkUplinkArgs
    ///                                     {
    ///                                         Actives = new[]
    ///                                         {
    ///                                             new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListNetworkUplinkActiveArgs
    ///                                             {
    ///                                                 Name = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].Uplinks[0]?.UplinkLists[0]?.Name),
    ///                                                 Mac = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].Uplinks[0]?.UplinkLists[0]?.Mac),
    ///                                                 Value = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].Uplinks[0]?.UplinkLists[0]?.Name),
    ///                                             },
    ///                                         },
    ///                                         Standbies = new[]
    ///                                         {
    ///                                             new Nutanix.Inputs.ClusterAddNodeV2NodeParamNodeListNetworkUplinkStandbyArgs
    ///                                             {
    ///                                                 Name = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].Uplinks[0]?.UplinkLists[1]?.Name),
    ///                                                 Mac = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].Uplinks[0]?.UplinkLists[1]?.Mac),
    ///                                                 Value = node_network_info.NodesNetworkingDetails.Apply(nodesNetworkingDetails =&gt; nodesNetworkingDetails[0].Uplinks[0]?.UplinkLists[1]?.Name),
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ConfigParams = new[]
    ///         {
    ///             new Nutanix.Inputs.ClusterAddNodeV2ConfigParamArgs
    ///             {
    ///                 ShouldSkipImaging = true,
    ///                 TargetHypervisor = cluster_node.UnconfiguredNodes.Apply(unconfiguredNodes =&gt; unconfiguredNodes[0].HypervisorType),
    ///             },
    ///         },
    ///         RemoveNodeParams = new[]
    ///         {
    ///             new Nutanix.Inputs.ClusterAddNodeV2RemoveNodeParamArgs
    ///             {
    ///                 ExtraParams = new[]
    ///                 {
    ///                     new Nutanix.Inputs.ClusterAddNodeV2RemoveNodeParamExtraParamArgs
    ///                     {
    ///                         ShouldSkipUpgradeCheck = false,
    ///                         SkipSpaceCheck = false,
    ///                         ShouldSkipAddCheck = false,
    ///                     },
    ///                 },
    ///                 ShouldSkipRemove = false,
    ///                 ShouldSkipPrechecks = false,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             node_network_info,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/clusterAddNodeV2:ClusterAddNodeV2")]
    public partial class ClusterAddNodeV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// -(Required) Cluster UUID.
        /// </summary>
        [Output("clusterExtId")]
        public Output<string> ClusterExtId { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Config parameters.
        /// </summary>
        [Output("configParams")]
        public Output<ImmutableArray<Outputs.ClusterAddNodeV2ConfigParam>> ConfigParams { get; private set; } = null!;

        /// <summary>
        /// -(Required) Parameters of the node to be added.
        /// </summary>
        [Output("nodeParams")]
        public Output<ImmutableArray<Outputs.ClusterAddNodeV2NodeParam>> NodeParams { get; private set; } = null!;

        /// <summary>
        /// -(Optional) configuration for node removal.
        /// </summary>
        [Output("removeNodeParams")]
        public Output<ImmutableArray<Outputs.ClusterAddNodeV2RemoveNodeParam>> RemoveNodeParams { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Indicates if node addition can be skipped.
        /// </summary>
        [Output("shouldSkipAddNode")]
        public Output<bool> ShouldSkipAddNode { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
        /// </summary>
        [Output("shouldSkipPreExpandChecks")]
        public Output<bool> ShouldSkipPreExpandChecks { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterAddNodeV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterAddNodeV2(string name, ClusterAddNodeV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/clusterAddNodeV2:ClusterAddNodeV2", name, args ?? new ClusterAddNodeV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterAddNodeV2(string name, Input<string> id, ClusterAddNodeV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/clusterAddNodeV2:ClusterAddNodeV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterAddNodeV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterAddNodeV2 Get(string name, Input<string> id, ClusterAddNodeV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterAddNodeV2(name, id, state, options);
        }
    }

    public sealed class ClusterAddNodeV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Required) Cluster UUID.
        /// </summary>
        [Input("clusterExtId", required: true)]
        public Input<string> ClusterExtId { get; set; } = null!;

        [Input("configParams")]
        private InputList<Inputs.ClusterAddNodeV2ConfigParamArgs>? _configParams;

        /// <summary>
        /// -(Optional) Config parameters.
        /// </summary>
        public InputList<Inputs.ClusterAddNodeV2ConfigParamArgs> ConfigParams
        {
            get => _configParams ?? (_configParams = new InputList<Inputs.ClusterAddNodeV2ConfigParamArgs>());
            set => _configParams = value;
        }

        [Input("nodeParams", required: true)]
        private InputList<Inputs.ClusterAddNodeV2NodeParamArgs>? _nodeParams;

        /// <summary>
        /// -(Required) Parameters of the node to be added.
        /// </summary>
        public InputList<Inputs.ClusterAddNodeV2NodeParamArgs> NodeParams
        {
            get => _nodeParams ?? (_nodeParams = new InputList<Inputs.ClusterAddNodeV2NodeParamArgs>());
            set => _nodeParams = value;
        }

        [Input("removeNodeParams")]
        private InputList<Inputs.ClusterAddNodeV2RemoveNodeParamArgs>? _removeNodeParams;

        /// <summary>
        /// -(Optional) configuration for node removal.
        /// </summary>
        public InputList<Inputs.ClusterAddNodeV2RemoveNodeParamArgs> RemoveNodeParams
        {
            get => _removeNodeParams ?? (_removeNodeParams = new InputList<Inputs.ClusterAddNodeV2RemoveNodeParamArgs>());
            set => _removeNodeParams = value;
        }

        /// <summary>
        /// -(Optional) Indicates if node addition can be skipped.
        /// </summary>
        [Input("shouldSkipAddNode")]
        public Input<bool>? ShouldSkipAddNode { get; set; }

        /// <summary>
        /// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
        /// </summary>
        [Input("shouldSkipPreExpandChecks")]
        public Input<bool>? ShouldSkipPreExpandChecks { get; set; }

        public ClusterAddNodeV2Args()
        {
        }
        public static new ClusterAddNodeV2Args Empty => new ClusterAddNodeV2Args();
    }

    public sealed class ClusterAddNodeV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Required) Cluster UUID.
        /// </summary>
        [Input("clusterExtId")]
        public Input<string>? ClusterExtId { get; set; }

        [Input("configParams")]
        private InputList<Inputs.ClusterAddNodeV2ConfigParamGetArgs>? _configParams;

        /// <summary>
        /// -(Optional) Config parameters.
        /// </summary>
        public InputList<Inputs.ClusterAddNodeV2ConfigParamGetArgs> ConfigParams
        {
            get => _configParams ?? (_configParams = new InputList<Inputs.ClusterAddNodeV2ConfigParamGetArgs>());
            set => _configParams = value;
        }

        [Input("nodeParams")]
        private InputList<Inputs.ClusterAddNodeV2NodeParamGetArgs>? _nodeParams;

        /// <summary>
        /// -(Required) Parameters of the node to be added.
        /// </summary>
        public InputList<Inputs.ClusterAddNodeV2NodeParamGetArgs> NodeParams
        {
            get => _nodeParams ?? (_nodeParams = new InputList<Inputs.ClusterAddNodeV2NodeParamGetArgs>());
            set => _nodeParams = value;
        }

        [Input("removeNodeParams")]
        private InputList<Inputs.ClusterAddNodeV2RemoveNodeParamGetArgs>? _removeNodeParams;

        /// <summary>
        /// -(Optional) configuration for node removal.
        /// </summary>
        public InputList<Inputs.ClusterAddNodeV2RemoveNodeParamGetArgs> RemoveNodeParams
        {
            get => _removeNodeParams ?? (_removeNodeParams = new InputList<Inputs.ClusterAddNodeV2RemoveNodeParamGetArgs>());
            set => _removeNodeParams = value;
        }

        /// <summary>
        /// -(Optional) Indicates if node addition can be skipped.
        /// </summary>
        [Input("shouldSkipAddNode")]
        public Input<bool>? ShouldSkipAddNode { get; set; }

        /// <summary>
        /// -(Optional) Indicates if pre-expand checks can be skipped for node addition.
        /// </summary>
        [Input("shouldSkipPreExpandChecks")]
        public Input<bool>? ShouldSkipPreExpandChecks { get; set; }

        public ClusterAddNodeV2State()
        {
        }
        public static new ClusterAddNodeV2State Empty => new ClusterAddNodeV2State();
    }
}
