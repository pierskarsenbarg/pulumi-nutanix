// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to Create a new Volume Group.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var volumeGroupExample = new Nutanix.VolumeGroupV2("volumeGroupExample", new()
    ///     {
    ///         Description = "Test Create Volume group with spec",
    ///         ShouldLoadBalanceVmAttachments = false,
    ///         SharingStatus = "SHARED",
    ///         TargetName = "volumegroup-test-001234",
    ///         CreatedBy = "example",
    ///         ClusterReference = "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
    ///         IscsiFeatures = new[]
    ///         {
    ///             new Nutanix.Inputs.VolumeGroupV2IscsiFeatureArgs
    ///             {
    ///                 EnabledAuthentications = "CHAP",
    ///                 TargetSecret = "123456789abc",
    ///             },
    ///         },
    ///         StorageFeatures = new[]
    ///         {
    ///             new Nutanix.Inputs.VolumeGroupV2StorageFeatureArgs
    ///             {
    ///                 FlashModes = new[]
    ///                 {
    ///                     new Nutanix.Inputs.VolumeGroupV2StorageFeatureFlashModeArgs
    ///                     {
    ///                         IsEnabled = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         UsageType = "USER",
    ///         IsHidden = false,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/volumeGroupV2:VolumeGroupV2")]
    public partial class VolumeGroupV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
        /// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
        /// - NONE : Volume Group has no attachment.
        /// - DIRECT : Volume Group has a VM attachment.
        /// </summary>
        [Output("attachmentType")]
        public Output<string?> AttachmentType { get; private set; } = null!;

        /// <summary>
        /// -(Required) The UUID of the cluster that will host the Volume Group.
        /// </summary>
        [Output("clusterReference")]
        public Output<string> ClusterReference { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Service/user who created this Volume Group.
        /// </summary>
        [Output("createdBy")]
        public Output<string?> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Volume Group description. This is an optional field.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// -(Optional) A list of Volume Disks to be attached to the Volume Group.
        /// </summary>
        [Output("disks")]
        public Output<ImmutableArray<Outputs.VolumeGroupV2Disk>> Disks { get; private set; } = null!;

        /// <summary>
        /// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
        /// </summary>
        [Output("enabledAuthentications")]
        public Output<string?> EnabledAuthentications { get; private set; } = null!;

        /// <summary>
        /// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
        /// </summary>
        [Output("isHidden")]
        public Output<bool?> IsHidden { get; private set; } = null!;

        /// <summary>
        /// -(Optional) iSCSI specific settings for the Volume Group.
        /// </summary>
        [Output("iscsiFeatures")]
        public Output<ImmutableArray<Outputs.VolumeGroupV2IscsiFeature>> IscsiFeatures { get; private set; } = null!;

        /// <summary>
        /// -(Required) Volume Group name. This is an optional field.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
        /// - NOT_ASSIGNED :  Volume Group does not use any protocol.
        /// - ISCSI : Volume Group uses iSCSI protocol.
        /// - NVMF : Volume Group uses NVMf protocol.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
        /// </summary>
        [Output("sharingStatus")]
        public Output<string?> SharingStatus { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
        /// </summary>
        [Output("shouldLoadBalanceVmAttachments")]
        public Output<bool?> ShouldLoadBalanceVmAttachments { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Storage optimization features which must be enabled on the Volume Group.
        /// </summary>
        [Output("storageFeatures")]
        public Output<ImmutableArray<Outputs.VolumeGroupV2StorageFeature>> StorageFeatures { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Name of the external client target that will be visible and accessible to the client.
        /// </summary>
        [Output("targetName")]
        public Output<string> TargetName { get; private set; } = null!;

        /// <summary>
        /// The specifications contain the target prefix for external clients as the value. This is an optional field.
        /// </summary>
        [Output("targetPrefix")]
        public Output<string?> TargetPrefix { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
        /// </summary>
        [Output("usageType")]
        public Output<string?> UsageType { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeGroupV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeGroupV2(string name, VolumeGroupV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/volumeGroupV2:VolumeGroupV2", name, args ?? new VolumeGroupV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeGroupV2(string name, Input<string> id, VolumeGroupV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/volumeGroupV2:VolumeGroupV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeGroupV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeGroupV2 Get(string name, Input<string> id, VolumeGroupV2State? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeGroupV2(name, id, state, options);
        }
    }

    public sealed class VolumeGroupV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
        /// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
        /// - NONE : Volume Group has no attachment.
        /// - DIRECT : Volume Group has a VM attachment.
        /// </summary>
        [Input("attachmentType")]
        public Input<string>? AttachmentType { get; set; }

        /// <summary>
        /// -(Required) The UUID of the cluster that will host the Volume Group.
        /// </summary>
        [Input("clusterReference", required: true)]
        public Input<string> ClusterReference { get; set; } = null!;

        /// <summary>
        /// -(Optional) Service/user who created this Volume Group.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// -(Optional) Volume Group description. This is an optional field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.VolumeGroupV2DiskArgs>? _disks;

        /// <summary>
        /// -(Optional) A list of Volume Disks to be attached to the Volume Group.
        /// </summary>
        public InputList<Inputs.VolumeGroupV2DiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VolumeGroupV2DiskArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
        /// </summary>
        [Input("enabledAuthentications")]
        public Input<string>? EnabledAuthentications { get; set; }

        /// <summary>
        /// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
        /// </summary>
        [Input("isHidden")]
        public Input<bool>? IsHidden { get; set; }

        [Input("iscsiFeatures")]
        private InputList<Inputs.VolumeGroupV2IscsiFeatureArgs>? _iscsiFeatures;

        /// <summary>
        /// -(Optional) iSCSI specific settings for the Volume Group.
        /// </summary>
        public InputList<Inputs.VolumeGroupV2IscsiFeatureArgs> IscsiFeatures
        {
            get => _iscsiFeatures ?? (_iscsiFeatures = new InputList<Inputs.VolumeGroupV2IscsiFeatureArgs>());
            set => _iscsiFeatures = value;
        }

        /// <summary>
        /// -(Required) Volume Group name. This is an optional field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
        /// - NOT_ASSIGNED :  Volume Group does not use any protocol.
        /// - ISCSI : Volume Group uses iSCSI protocol.
        /// - NVMF : Volume Group uses NVMf protocol.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
        /// </summary>
        [Input("sharingStatus")]
        public Input<string>? SharingStatus { get; set; }

        /// <summary>
        /// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
        /// </summary>
        [Input("shouldLoadBalanceVmAttachments")]
        public Input<bool>? ShouldLoadBalanceVmAttachments { get; set; }

        [Input("storageFeatures")]
        private InputList<Inputs.VolumeGroupV2StorageFeatureArgs>? _storageFeatures;

        /// <summary>
        /// -(Optional) Storage optimization features which must be enabled on the Volume Group.
        /// </summary>
        public InputList<Inputs.VolumeGroupV2StorageFeatureArgs> StorageFeatures
        {
            get => _storageFeatures ?? (_storageFeatures = new InputList<Inputs.VolumeGroupV2StorageFeatureArgs>());
            set => _storageFeatures = value;
        }

        /// <summary>
        /// -(Optional) Name of the external client target that will be visible and accessible to the client.
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// The specifications contain the target prefix for external clients as the value. This is an optional field.
        /// </summary>
        [Input("targetPrefix")]
        public Input<string>? TargetPrefix { get; set; }

        /// <summary>
        /// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
        /// </summary>
        [Input("usageType")]
        public Input<string>? UsageType { get; set; }

        public VolumeGroupV2Args()
        {
        }
        public static new VolumeGroupV2Args Empty => new VolumeGroupV2Args();
    }

    public sealed class VolumeGroupV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Optional) The field indicates whether a VG has a VM or an external attachment associated with it. Valid values are :
        /// - EXTERNAL : Volume Group has an external iSCSI or NVMf attachment.
        /// - NONE : Volume Group has no attachment.
        /// - DIRECT : Volume Group has a VM attachment.
        /// </summary>
        [Input("attachmentType")]
        public Input<string>? AttachmentType { get; set; }

        /// <summary>
        /// -(Required) The UUID of the cluster that will host the Volume Group.
        /// </summary>
        [Input("clusterReference")]
        public Input<string>? ClusterReference { get; set; }

        /// <summary>
        /// -(Optional) Service/user who created this Volume Group.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// -(Optional) Volume Group description. This is an optional field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.VolumeGroupV2DiskGetArgs>? _disks;

        /// <summary>
        /// -(Optional) A list of Volume Disks to be attached to the Volume Group.
        /// </summary>
        public InputList<Inputs.VolumeGroupV2DiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VolumeGroupV2DiskGetArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// -(Optional) The authentication type enabled for the Volume Group. Valid values are CHAP, NONE
        /// </summary>
        [Input("enabledAuthentications")]
        public Input<string>? EnabledAuthentications { get; set; }

        /// <summary>
        /// -(Optional) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// -(Optional) Indicates whether the Volume Group is meant to be hidden or not.
        /// </summary>
        [Input("isHidden")]
        public Input<bool>? IsHidden { get; set; }

        [Input("iscsiFeatures")]
        private InputList<Inputs.VolumeGroupV2IscsiFeatureGetArgs>? _iscsiFeatures;

        /// <summary>
        /// -(Optional) iSCSI specific settings for the Volume Group.
        /// </summary>
        public InputList<Inputs.VolumeGroupV2IscsiFeatureGetArgs> IscsiFeatures
        {
            get => _iscsiFeatures ?? (_iscsiFeatures = new InputList<Inputs.VolumeGroupV2IscsiFeatureGetArgs>());
            set => _iscsiFeatures = value;
        }

        /// <summary>
        /// -(Required) Volume Group name. This is an optional field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -(Optional) Type of protocol to be used for Volume Group. Valid values are :
        /// - NOT_ASSIGNED :  Volume Group does not use any protocol.
        /// - ISCSI : Volume Group uses iSCSI protocol.
        /// - NVMF : Volume Group uses NVMf protocol.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// -(Optional) Indicates whether the Volume Group can be shared across multiple iSCSI initiators. The mode cannot be changed from SHARED to NOT_SHARED on a Volume Group with multiple attachments. Similarly, a Volume Group cannot be associated with more than one attachment as long as it is in exclusive mode. This is an optional field. Valid values are SHARED, NOT_SHARED
        /// </summary>
        [Input("sharingStatus")]
        public Input<string>? SharingStatus { get; set; }

        /// <summary>
        /// -(Optional) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.
        /// </summary>
        [Input("shouldLoadBalanceVmAttachments")]
        public Input<bool>? ShouldLoadBalanceVmAttachments { get; set; }

        [Input("storageFeatures")]
        private InputList<Inputs.VolumeGroupV2StorageFeatureGetArgs>? _storageFeatures;

        /// <summary>
        /// -(Optional) Storage optimization features which must be enabled on the Volume Group.
        /// </summary>
        public InputList<Inputs.VolumeGroupV2StorageFeatureGetArgs> StorageFeatures
        {
            get => _storageFeatures ?? (_storageFeatures = new InputList<Inputs.VolumeGroupV2StorageFeatureGetArgs>());
            set => _storageFeatures = value;
        }

        /// <summary>
        /// -(Optional) Name of the external client target that will be visible and accessible to the client.
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// The specifications contain the target prefix for external clients as the value. This is an optional field.
        /// </summary>
        [Input("targetPrefix")]
        public Input<string>? TargetPrefix { get; set; }

        /// <summary>
        /// -(Optional) Expected usage type for the Volume Group. This is an indicative hint on how the caller will consume the Volume Group.  Valid values are BACKUP_TARGET, INTERNAL, TEMPORARY, USER
        /// </summary>
        [Input("usageType")]
        public Input<string>? UsageType { get; set; }

        public VolumeGroupV2State()
        {
        }
        public static new VolumeGroupV2State Empty => new VolumeGroupV2State();
    }
}
