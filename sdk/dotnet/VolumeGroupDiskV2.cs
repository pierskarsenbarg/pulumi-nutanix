// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to Creates a new Volume Disk.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // create new volume group disk  and attached it to the previous volume group
    ///     var example = new Nutanix.VolumeGroupDiskV2("example", new()
    ///     {
    ///         VolumeGroupExtId = "cf7de8b9-88ed-477d-a602-c34ab7174c01",
    ///         Index = 1,
    ///         Description = "create volume disk example",
    ///         DiskSizeBytes = 5368709120,
    ///         DiskDataSourceReferences = new[]
    ///         {
    ///             new Nutanix.Inputs.VolumeGroupDiskV2DiskDataSourceReferenceArgs
    ///             {
    ///                 Name = "disk1",
    ///                 ExtId = "1d92110d-26b5-46c0-8c93-20b8171373e0",
    ///                 EntityType = "STORAGE_CONTAINER",
    ///                 Uris = new[]
    ///                 {
    ///                     "uri1",
    ///                     "uri2",
    ///                 },
    ///             },
    ///         },
    ///         DiskStorageFeatures = new[]
    ///         {
    ///             new Nutanix.Inputs.VolumeGroupDiskV2DiskStorageFeatureArgs
    ///             {
    ///                 FlashModes = new[]
    ///                 {
    ///                     new Nutanix.Inputs.VolumeGroupDiskV2DiskStorageFeatureFlashModeArgs
    ///                     {
    ///                         IsEnabled = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/volumeGroupDiskV2:VolumeGroupDiskV2")]
    public partial class VolumeGroupDiskV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - Volume Disk description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// -(Required) Disk Data Source Reference.
        /// </summary>
        [Output("diskDataSourceReferences")]
        public Output<ImmutableArray<Outputs.VolumeGroupDiskV2DiskDataSourceReference>> DiskDataSourceReferences { get; private set; } = null!;

        /// <summary>
        /// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
        /// </summary>
        [Output("diskSizeBytes")]
        public Output<int> DiskSizeBytes { get; private set; } = null!;

        /// <summary>
        /// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
        /// </summary>
        [Output("diskStorageFeatures")]
        public Output<ImmutableArray<Outputs.VolumeGroupDiskV2DiskStorageFeature>> DiskStorageFeatures { get; private set; } = null!;

        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// - Index of the disk in a Volume Group. This field is optional and immutable.
        /// </summary>
        [Output("index")]
        public Output<int> Index { get; private set; } = null!;

        /// <summary>
        /// The external identifier of the volume group.
        /// </summary>
        [Output("volumeGroupExtId")]
        public Output<string> VolumeGroupExtId { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeGroupDiskV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeGroupDiskV2(string name, VolumeGroupDiskV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/volumeGroupDiskV2:VolumeGroupDiskV2", name, args ?? new VolumeGroupDiskV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeGroupDiskV2(string name, Input<string> id, VolumeGroupDiskV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/volumeGroupDiskV2:VolumeGroupDiskV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeGroupDiskV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeGroupDiskV2 Get(string name, Input<string> id, VolumeGroupDiskV2State? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeGroupDiskV2(name, id, state, options);
        }
    }

    public sealed class VolumeGroupDiskV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - Volume Disk description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskDataSourceReferences", required: true)]
        private InputList<Inputs.VolumeGroupDiskV2DiskDataSourceReferenceArgs>? _diskDataSourceReferences;

        /// <summary>
        /// -(Required) Disk Data Source Reference.
        /// </summary>
        public InputList<Inputs.VolumeGroupDiskV2DiskDataSourceReferenceArgs> DiskDataSourceReferences
        {
            get => _diskDataSourceReferences ?? (_diskDataSourceReferences = new InputList<Inputs.VolumeGroupDiskV2DiskDataSourceReferenceArgs>());
            set => _diskDataSourceReferences = value;
        }

        /// <summary>
        /// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
        /// </summary>
        [Input("diskSizeBytes", required: true)]
        public Input<int> DiskSizeBytes { get; set; } = null!;

        [Input("diskStorageFeatures")]
        private InputList<Inputs.VolumeGroupDiskV2DiskStorageFeatureArgs>? _diskStorageFeatures;

        /// <summary>
        /// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
        /// </summary>
        public InputList<Inputs.VolumeGroupDiskV2DiskStorageFeatureArgs> DiskStorageFeatures
        {
            get => _diskStorageFeatures ?? (_diskStorageFeatures = new InputList<Inputs.VolumeGroupDiskV2DiskStorageFeatureArgs>());
            set => _diskStorageFeatures = value;
        }

        /// <summary>
        /// - Index of the disk in a Volume Group. This field is optional and immutable.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// The external identifier of the volume group.
        /// </summary>
        [Input("volumeGroupExtId", required: true)]
        public Input<string> VolumeGroupExtId { get; set; } = null!;

        public VolumeGroupDiskV2Args()
        {
        }
        public static new VolumeGroupDiskV2Args Empty => new VolumeGroupDiskV2Args();
    }

    public sealed class VolumeGroupDiskV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - Volume Disk description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskDataSourceReferences")]
        private InputList<Inputs.VolumeGroupDiskV2DiskDataSourceReferenceGetArgs>? _diskDataSourceReferences;

        /// <summary>
        /// -(Required) Disk Data Source Reference.
        /// </summary>
        public InputList<Inputs.VolumeGroupDiskV2DiskDataSourceReferenceGetArgs> DiskDataSourceReferences
        {
            get => _diskDataSourceReferences ?? (_diskDataSourceReferences = new InputList<Inputs.VolumeGroupDiskV2DiskDataSourceReferenceGetArgs>());
            set => _diskDataSourceReferences = value;
        }

        /// <summary>
        /// - ize of the disk in bytes. This field is mandatory during Volume Group creation if a new disk is being created on the storage container.
        /// </summary>
        [Input("diskSizeBytes")]
        public Input<int>? DiskSizeBytes { get; set; }

        [Input("diskStorageFeatures")]
        private InputList<Inputs.VolumeGroupDiskV2DiskStorageFeatureGetArgs>? _diskStorageFeatures;

        /// <summary>
        /// - Storage optimization features which must be enabled on the Volume Disks. This is an optional field. If omitted, the disks will honor the Volume Group specific storage features setting.
        /// </summary>
        public InputList<Inputs.VolumeGroupDiskV2DiskStorageFeatureGetArgs> DiskStorageFeatures
        {
            get => _diskStorageFeatures ?? (_diskStorageFeatures = new InputList<Inputs.VolumeGroupDiskV2DiskStorageFeatureGetArgs>());
            set => _diskStorageFeatures = value;
        }

        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// - Index of the disk in a Volume Group. This field is optional and immutable.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// The external identifier of the volume group.
        /// </summary>
        [Input("volumeGroupExtId")]
        public Input<string>? VolumeGroupExtId { get; set; }

        public VolumeGroupDiskV2State()
        {
        }
        public static new VolumeGroupDiskV2State Empty => new VolumeGroupDiskV2State();
    }
}
