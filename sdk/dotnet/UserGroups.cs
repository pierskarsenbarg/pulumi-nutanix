// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to add a User group to the system..
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var userGrp = new Nutanix.UserGroups("userGrp", new()
    ///     {
    ///         DirectoryServiceUserGroups = new[]
    ///         {
    ///             new Nutanix.Inputs.UserGroupsDirectoryServiceUserGroupArgs
    ///             {
    ///                 DistinguishedName = "&lt;distinguished name for the user group&gt;",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var userGrp = new Nutanix.UserGroups("userGrp", new()
    ///     {
    ///         SamlUserGroups = new[]
    ///         {
    ///             new Nutanix.Inputs.UserGroupsSamlUserGroupArgs
    ///             {
    ///                 IdpUuid = "&lt;idp uuid of the group&gt;",
    ///                 Name = "&lt;name of saml group&gt;",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/userGroups:UserGroups")]
    public partial class UserGroups : global::Pulumi.CustomResource
    {
        [Output("categories")]
        public Output<ImmutableArray<Outputs.UserGroupsCategory>> Categories { get; private set; } = null!;

        /// <summary>
        /// - (Optional) A Directory Service organizational unit.
        /// </summary>
        [Output("directoryServiceOus")]
        public Output<ImmutableArray<Outputs.UserGroupsDirectoryServiceOus>> DirectoryServiceOus { get; private set; } = null!;

        /// <summary>
        /// - (Optional) A Directory Service user group.
        /// </summary>
        [Output("directoryServiceUserGroups")]
        public Output<ImmutableArray<Outputs.UserGroupsDirectoryServiceUserGroup>> DirectoryServiceUserGroups { get; private set; } = null!;

        /// <summary>
        /// The user_group kind metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        [Output("ownerReference")]
        public Output<ImmutableDictionary<string, string>> OwnerReference { get; private set; } = null!;

        [Output("projectReference")]
        public Output<ImmutableDictionary<string, string>?> ProjectReference { get; private set; } = null!;

        /// <summary>
        /// - (Optional) A SAML Service user group.
        /// </summary>
        [Output("samlUserGroups")]
        public Output<ImmutableArray<Outputs.UserGroupsSamlUserGroup>> SamlUserGroups { get; private set; } = null!;


        /// <summary>
        /// Create a UserGroups resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserGroups(string name, UserGroupsArgs? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/userGroups:UserGroups", name, args ?? new UserGroupsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserGroups(string name, Input<string> id, UserGroupsState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/userGroups:UserGroups", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserGroups resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserGroups Get(string name, Input<string> id, UserGroupsState? state = null, CustomResourceOptions? options = null)
        {
            return new UserGroups(name, id, state, options);
        }
    }

    public sealed class UserGroupsArgs : global::Pulumi.ResourceArgs
    {
        [Input("categories")]
        private InputList<Inputs.UserGroupsCategoryArgs>? _categories;
        public InputList<Inputs.UserGroupsCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.UserGroupsCategoryArgs>());
            set => _categories = value;
        }

        [Input("directoryServiceOus")]
        private InputList<Inputs.UserGroupsDirectoryServiceOusArgs>? _directoryServiceOus;

        /// <summary>
        /// - (Optional) A Directory Service organizational unit.
        /// </summary>
        public InputList<Inputs.UserGroupsDirectoryServiceOusArgs> DirectoryServiceOus
        {
            get => _directoryServiceOus ?? (_directoryServiceOus = new InputList<Inputs.UserGroupsDirectoryServiceOusArgs>());
            set => _directoryServiceOus = value;
        }

        [Input("directoryServiceUserGroups")]
        private InputList<Inputs.UserGroupsDirectoryServiceUserGroupArgs>? _directoryServiceUserGroups;

        /// <summary>
        /// - (Optional) A Directory Service user group.
        /// </summary>
        public InputList<Inputs.UserGroupsDirectoryServiceUserGroupArgs> DirectoryServiceUserGroups
        {
            get => _directoryServiceUserGroups ?? (_directoryServiceUserGroups = new InputList<Inputs.UserGroupsDirectoryServiceUserGroupArgs>());
            set => _directoryServiceUserGroups = value;
        }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        [Input("samlUserGroups")]
        private InputList<Inputs.UserGroupsSamlUserGroupArgs>? _samlUserGroups;

        /// <summary>
        /// - (Optional) A SAML Service user group.
        /// </summary>
        public InputList<Inputs.UserGroupsSamlUserGroupArgs> SamlUserGroups
        {
            get => _samlUserGroups ?? (_samlUserGroups = new InputList<Inputs.UserGroupsSamlUserGroupArgs>());
            set => _samlUserGroups = value;
        }

        public UserGroupsArgs()
        {
        }
        public static new UserGroupsArgs Empty => new UserGroupsArgs();
    }

    public sealed class UserGroupsState : global::Pulumi.ResourceArgs
    {
        [Input("categories")]
        private InputList<Inputs.UserGroupsCategoryGetArgs>? _categories;
        public InputList<Inputs.UserGroupsCategoryGetArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.UserGroupsCategoryGetArgs>());
            set => _categories = value;
        }

        [Input("directoryServiceOus")]
        private InputList<Inputs.UserGroupsDirectoryServiceOusGetArgs>? _directoryServiceOus;

        /// <summary>
        /// - (Optional) A Directory Service organizational unit.
        /// </summary>
        public InputList<Inputs.UserGroupsDirectoryServiceOusGetArgs> DirectoryServiceOus
        {
            get => _directoryServiceOus ?? (_directoryServiceOus = new InputList<Inputs.UserGroupsDirectoryServiceOusGetArgs>());
            set => _directoryServiceOus = value;
        }

        [Input("directoryServiceUserGroups")]
        private InputList<Inputs.UserGroupsDirectoryServiceUserGroupGetArgs>? _directoryServiceUserGroups;

        /// <summary>
        /// - (Optional) A Directory Service user group.
        /// </summary>
        public InputList<Inputs.UserGroupsDirectoryServiceUserGroupGetArgs> DirectoryServiceUserGroups
        {
            get => _directoryServiceUserGroups ?? (_directoryServiceUserGroups = new InputList<Inputs.UserGroupsDirectoryServiceUserGroupGetArgs>());
            set => _directoryServiceUserGroups = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// The user_group kind metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        [Input("samlUserGroups")]
        private InputList<Inputs.UserGroupsSamlUserGroupGetArgs>? _samlUserGroups;

        /// <summary>
        /// - (Optional) A SAML Service user group.
        /// </summary>
        public InputList<Inputs.UserGroupsSamlUserGroupGetArgs> SamlUserGroups
        {
            get => _samlUserGroups ?? (_samlUserGroups = new InputList<Inputs.UserGroupsSamlUserGroupGetArgs>());
            set => _samlUserGroups = value;
        }

        public UserGroupsState()
        {
        }
        public static new UserGroupsState Empty => new UserGroupsState();
    }
}
