// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Creates a protection policy to automate the recovery point creation and replication process.
    /// 
    /// ## Example—Synchronous Protection Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var synchronous_protection_policy = new Nutanix.ProtectionPolicyV2("synchronous-protection-policy", new()
    ///     {
    ///         CategoryIds = new[]
    ///         {
    ///             "b08ed184-6b0c-42c1-8179-7b9026fe2676",
    ///         },
    ///         ReplicationConfigurations = new[]
    ///         {
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationArgs
    ///             {
    ///                 RemoteLocationLabel = "target",
    ///                 Schedule = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleArgs
    ///                 {
    ///                     RecoveryPointObjectiveTimeSeconds = 0,
    ///                     RecoveryPointType = "CRASH_CONSISTENT",
    ///                     SyncReplicationAutoSuspendTimeoutSeconds = 10,
    ///                 },
    ///                 SourceLocationLabel = "source",
    ///             },
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationArgs
    ///             {
    ///                 RemoteLocationLabel = "source",
    ///                 Schedule = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleArgs
    ///                 {
    ///                     RecoveryPointObjectiveTimeSeconds = 0,
    ///                     RecoveryPointType = "CRASH_CONSISTENT",
    ///                     SyncReplicationAutoSuspendTimeoutSeconds = 10,
    ///                 },
    ///                 SourceLocationLabel = "target",
    ///             },
    ///         },
    ///         ReplicationLocations = new[]
    ///         {
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationArgs
    ///             {
    ///                 DomainManagerExtId = "6a44b05e-cb9b-4e7e-8d75-b1b4715369c4",
    ///                 IsPrimary = true,
    ///                 Label = "source",
    ///             },
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationArgs
    ///             {
    ///                 DomainManagerExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
    ///                 IsPrimary = false,
    ///                 Label = "target",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example—Linear Retention Protection Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var linear_retention_protection_policy = new Nutanix.ProtectionPolicyV2("linear-retention-protection-policy", new()
    ///     {
    ///         ReplicationConfigurations = new[]
    ///         {
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationArgs
    ///             {
    ///                 SourceLocationLabel = "source",
    ///                 RemoteLocationLabel = "target",
    ///                 Schedule = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleArgs
    ///                 {
    ///                     RecoveryPointObjectiveTimeSeconds = 7200,
    ///                     RecoveryPointType = "CRASH_CONSISTENT",
    ///                     Retention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionArgs
    ///                     {
    ///                         LinearRetention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionLinearRetentionArgs
    ///                         {
    ///                             Local = 1,
    ///                             Remote = 1,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationArgs
    ///             {
    ///                 SourceLocationLabel = "target",
    ///                 RemoteLocationLabel = "source",
    ///                 Schedule = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleArgs
    ///                 {
    ///                     RecoveryPointObjectiveTimeSeconds = 7200,
    ///                     RecoveryPointType = "CRASH_CONSISTENT",
    ///                     Retention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionArgs
    ///                     {
    ///                         LinearRetention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionLinearRetentionArgs
    ///                         {
    ///                             Local = 1,
    ///                             Remote = 1,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ReplicationLocations = new[]
    ///         {
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationArgs
    ///             {
    ///                 DomainManagerExtId = "6a44b05e-cb9b-4e7e-8d75-b1b4715369c4",
    ///                 Label = "source",
    ///                 IsPrimary = true,
    ///                 ReplicationSubLocation = new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationReplicationSubLocationArgs
    ///                 {
    ///                     ClusterExtIds = new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationReplicationSubLocationClusterExtIdsArgs
    ///                     {
    ///                         ClusterExtIds = new[]
    ///                         {
    ///                             local.ClusterExtId,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationArgs
    ///             {
    ///                 DomainManagerExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
    ///                 Label = "target",
    ///                 IsPrimary = false,
    ///             },
    ///         },
    ///         CategoryIds = new[]
    ///         {
    ///             "b08ed184-6b0c-42c1-8179-7b9026fe2676",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example—Auto Rollup Retention Protection Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create Auto Rollup Retention Protection Policy
    ///     var auto_rollup_retention_protection_policy = new Nutanix.ProtectionPolicyV2("auto-rollup-retention-protection-policy", new()
    ///     {
    ///         CategoryIds = new[]
    ///         {
    ///             "b08ed184-6b0c-42c1-8179-7b9026fe2676",
    ///         },
    ///         ReplicationConfigurations = new[]
    ///         {
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationArgs
    ///             {
    ///                 RemoteLocationLabel = "target",
    ///                 Schedule = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleArgs
    ///                 {
    ///                     RecoveryPointObjectiveTimeSeconds = 60,
    ///                     RecoveryPointType = "CRASH_CONSISTENT",
    ///                     Retention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionArgs
    ///                     {
    ///                         AutoRollupRetention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionAutoRollupRetentionArgs
    ///                         {
    ///                             Local = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionAutoRollupRetentionLocalArgs
    ///                             {
    ///                                 Frequency = 2,
    ///                                 SnapshotIntervalType = "WEEKLY",
    ///                             },
    ///                             Remote = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionAutoRollupRetentionRemoteArgs
    ///                             {
    ///                                 Frequency = 1,
    ///                                 SnapshotIntervalType = "DAILY",
    ///                             },
    ///                         },
    ///                     },
    ///                     StartTime = "18h:10m",
    ///                     SyncReplicationAutoSuspendTimeoutSeconds = 20,
    ///                 },
    ///                 SourceLocationLabel = "source",
    ///             },
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationArgs
    ///             {
    ///                 RemoteLocationLabel = "source",
    ///                 Schedule = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleArgs
    ///                 {
    ///                     RecoveryPointObjectiveTimeSeconds = 60,
    ///                     RecoveryPointType = "CRASH_CONSISTENT",
    ///                     Retention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionArgs
    ///                     {
    ///                         AutoRollupRetention = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionAutoRollupRetentionArgs
    ///                         {
    ///                             Local = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionAutoRollupRetentionLocalArgs
    ///                             {
    ///                                 Frequency = 1,
    ///                                 SnapshotIntervalType = "DAILY",
    ///                             },
    ///                             Remote = new Nutanix.Inputs.ProtectionPolicyV2ReplicationConfigurationScheduleRetentionAutoRollupRetentionRemoteArgs
    ///                             {
    ///                                 Frequency = 2,
    ///                                 SnapshotIntervalType = "WEEKLY",
    ///                             },
    ///                         },
    ///                     },
    ///                     StartTime = "18h:10m",
    ///                     SyncReplicationAutoSuspendTimeoutSeconds = 30,
    ///                 },
    ///                 SourceLocationLabel = "target",
    ///             },
    ///         },
    ///         ReplicationLocations = new[]
    ///         {
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationArgs
    ///             {
    ///                 DomainManagerExtId = "6a44b05e-cb9b-4e7e-8d75-b1b4715369c4",
    ///                 IsPrimary = true,
    ///                 Label = "source",
    ///             },
    ///             new Nutanix.Inputs.ProtectionPolicyV2ReplicationLocationArgs
    ///             {
    ///                 DomainManagerExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
    ///                 IsPrimary = false,
    ///                 Label = "target",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/protectionPolicyV2:ProtectionPolicyV2")]
    public partial class ProtectionPolicyV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// -(Optional) Host entity with its attributes.
        /// </summary>
        [Output("categoryIds")]
        public Output<ImmutableArray<string>> CategoryIds { get; private set; } = null!;

        /// <summary>
        /// -(Optional) Description of the protection policy.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        [Output("isApprovalPolicyNeeded")]
        public Output<bool> IsApprovalPolicyNeeded { get; private set; } = null!;

        [Output("links")]
        public Output<ImmutableArray<Outputs.ProtectionPolicyV2Link>> Links { get; private set; } = null!;

        /// <summary>
        /// -(Required) Name of the protection policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("ownerExtId")]
        public Output<string> OwnerExtId { get; private set; } = null!;

        /// <summary>
        /// -(Required) Cluster reference for an entity.
        /// </summary>
        [Output("replicationConfigurations")]
        public Output<ImmutableArray<Outputs.ProtectionPolicyV2ReplicationConfiguration>> ReplicationConfigurations { get; private set; } = null!;

        /// <summary>
        /// -(Required) Hypervisor details.
        /// </summary>
        [Output("replicationLocations")]
        public Output<ImmutableArray<Outputs.ProtectionPolicyV2ReplicationLocation>> ReplicationLocations { get; private set; } = null!;

        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a ProtectionPolicyV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProtectionPolicyV2(string name, ProtectionPolicyV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/protectionPolicyV2:ProtectionPolicyV2", name, args ?? new ProtectionPolicyV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ProtectionPolicyV2(string name, Input<string> id, ProtectionPolicyV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/protectionPolicyV2:ProtectionPolicyV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProtectionPolicyV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProtectionPolicyV2 Get(string name, Input<string> id, ProtectionPolicyV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ProtectionPolicyV2(name, id, state, options);
        }
    }

    public sealed class ProtectionPolicyV2Args : global::Pulumi.ResourceArgs
    {
        [Input("categoryIds", required: true)]
        private InputList<string>? _categoryIds;

        /// <summary>
        /// -(Optional) Host entity with its attributes.
        /// </summary>
        public InputList<string> CategoryIds
        {
            get => _categoryIds ?? (_categoryIds = new InputList<string>());
            set => _categoryIds = value;
        }

        /// <summary>
        /// -(Optional) Description of the protection policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -(Required) Name of the protection policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("replicationConfigurations", required: true)]
        private InputList<Inputs.ProtectionPolicyV2ReplicationConfigurationArgs>? _replicationConfigurations;

        /// <summary>
        /// -(Required) Cluster reference for an entity.
        /// </summary>
        public InputList<Inputs.ProtectionPolicyV2ReplicationConfigurationArgs> ReplicationConfigurations
        {
            get => _replicationConfigurations ?? (_replicationConfigurations = new InputList<Inputs.ProtectionPolicyV2ReplicationConfigurationArgs>());
            set => _replicationConfigurations = value;
        }

        [Input("replicationLocations", required: true)]
        private InputList<Inputs.ProtectionPolicyV2ReplicationLocationArgs>? _replicationLocations;

        /// <summary>
        /// -(Required) Hypervisor details.
        /// </summary>
        public InputList<Inputs.ProtectionPolicyV2ReplicationLocationArgs> ReplicationLocations
        {
            get => _replicationLocations ?? (_replicationLocations = new InputList<Inputs.ProtectionPolicyV2ReplicationLocationArgs>());
            set => _replicationLocations = value;
        }

        public ProtectionPolicyV2Args()
        {
        }
        public static new ProtectionPolicyV2Args Empty => new ProtectionPolicyV2Args();
    }

    public sealed class ProtectionPolicyV2State : global::Pulumi.ResourceArgs
    {
        [Input("categoryIds")]
        private InputList<string>? _categoryIds;

        /// <summary>
        /// -(Optional) Host entity with its attributes.
        /// </summary>
        public InputList<string> CategoryIds
        {
            get => _categoryIds ?? (_categoryIds = new InputList<string>());
            set => _categoryIds = value;
        }

        /// <summary>
        /// -(Optional) Description of the protection policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("isApprovalPolicyNeeded")]
        public Input<bool>? IsApprovalPolicyNeeded { get; set; }

        [Input("links")]
        private InputList<Inputs.ProtectionPolicyV2LinkGetArgs>? _links;
        public InputList<Inputs.ProtectionPolicyV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ProtectionPolicyV2LinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// -(Required) Name of the protection policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerExtId")]
        public Input<string>? OwnerExtId { get; set; }

        [Input("replicationConfigurations")]
        private InputList<Inputs.ProtectionPolicyV2ReplicationConfigurationGetArgs>? _replicationConfigurations;

        /// <summary>
        /// -(Required) Cluster reference for an entity.
        /// </summary>
        public InputList<Inputs.ProtectionPolicyV2ReplicationConfigurationGetArgs> ReplicationConfigurations
        {
            get => _replicationConfigurations ?? (_replicationConfigurations = new InputList<Inputs.ProtectionPolicyV2ReplicationConfigurationGetArgs>());
            set => _replicationConfigurations = value;
        }

        [Input("replicationLocations")]
        private InputList<Inputs.ProtectionPolicyV2ReplicationLocationGetArgs>? _replicationLocations;

        /// <summary>
        /// -(Required) Hypervisor details.
        /// </summary>
        public InputList<Inputs.ProtectionPolicyV2ReplicationLocationGetArgs> ReplicationLocations
        {
            get => _replicationLocations ?? (_replicationLocations = new InputList<Inputs.ProtectionPolicyV2ReplicationLocationGetArgs>());
            set => _replicationLocations = value;
        }

        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public ProtectionPolicyV2State()
        {
        }
        public static new ProtectionPolicyV2State Empty => new ProtectionPolicyV2State();
    }
}
