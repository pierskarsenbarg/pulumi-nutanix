// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbDatabases
    {
        /// <summary>
        /// List all database instances in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dbs = Nutanix.GetNdbDatabases.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dbsOutput"] = dbs,
        ///     };
        /// });
        /// ```
        /// 
        /// ## database_instances
        /// 
        /// The following attributes are exported for each database_instances:
        /// 
        /// * `id`: - id of database instance
        /// * `name`: - name of database instance
        /// * `description`: - description
        /// * `date_created`: - creation date
        /// * `date_modified`: - date modified 
        /// * `properties`: - properties
        /// * `tags`: - tags attached
        /// * `clustered`: - if clustered or not
        /// * `clone`: - if cloned
        /// * `database_name`: - database instance name
        /// * `type`: - database engine type
        /// * `status`: - status of database instance
        /// * `dbserver_logical_cluster_id`: - NA
        /// * `time_machine_id`: - time machine ID
        /// * `time_zone`: - timezone
        /// * `info`: - info regarding disks, vm, storage, etc.
        /// * `metric`: - metrics
        /// * `parent_database_id`: - parent database ID
        /// * `lcm_config`: - lcm configuration
        /// * `time_machine`: - time machine related config info
        /// * `database_nodes`: - nodes info
        /// * `dbserver_logical_cluster`: - NA
        /// * `linked_databases`: - list of databases created in instance with info
        /// 
        /// 
        /// See detailed information in [List Database Instances](https://www.nutanix.dev/api_references/ndb/#/1e508756bcdcc-get-all-the-databases).
        /// </summary>
        public static Task<GetNdbDatabasesResult> InvokeAsync(GetNdbDatabasesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbDatabasesResult>("nutanix:index/getNdbDatabases:getNdbDatabases", args ?? new GetNdbDatabasesArgs(), options.WithDefaults());

        /// <summary>
        /// List all database instances in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dbs = Nutanix.GetNdbDatabases.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dbsOutput"] = dbs,
        ///     };
        /// });
        /// ```
        /// 
        /// ## database_instances
        /// 
        /// The following attributes are exported for each database_instances:
        /// 
        /// * `id`: - id of database instance
        /// * `name`: - name of database instance
        /// * `description`: - description
        /// * `date_created`: - creation date
        /// * `date_modified`: - date modified 
        /// * `properties`: - properties
        /// * `tags`: - tags attached
        /// * `clustered`: - if clustered or not
        /// * `clone`: - if cloned
        /// * `database_name`: - database instance name
        /// * `type`: - database engine type
        /// * `status`: - status of database instance
        /// * `dbserver_logical_cluster_id`: - NA
        /// * `time_machine_id`: - time machine ID
        /// * `time_zone`: - timezone
        /// * `info`: - info regarding disks, vm, storage, etc.
        /// * `metric`: - metrics
        /// * `parent_database_id`: - parent database ID
        /// * `lcm_config`: - lcm configuration
        /// * `time_machine`: - time machine related config info
        /// * `database_nodes`: - nodes info
        /// * `dbserver_logical_cluster`: - NA
        /// * `linked_databases`: - list of databases created in instance with info
        /// 
        /// 
        /// See detailed information in [List Database Instances](https://www.nutanix.dev/api_references/ndb/#/1e508756bcdcc-get-all-the-databases).
        /// </summary>
        public static Output<GetNdbDatabasesResult> Invoke(GetNdbDatabasesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbDatabasesResult>("nutanix:index/getNdbDatabases:getNdbDatabases", args ?? new GetNdbDatabasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbDatabasesArgs : global::Pulumi.InvokeArgs
    {
        [Input("databaseType")]
        public string? DatabaseType { get; set; }

        public GetNdbDatabasesArgs()
        {
        }
        public static new GetNdbDatabasesArgs Empty => new GetNdbDatabasesArgs();
    }

    public sealed class GetNdbDatabasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        public GetNdbDatabasesInvokeArgs()
        {
        }
        public static new GetNdbDatabasesInvokeArgs Empty => new GetNdbDatabasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbDatabasesResult
    {
        /// <summary>
        /// - list of database instances
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabasesDatabaseInstanceResult> DatabaseInstances;
        public readonly string? DatabaseType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetNdbDatabasesResult(
            ImmutableArray<Outputs.GetNdbDatabasesDatabaseInstanceResult> databaseInstances,

            string? databaseType,

            string id)
        {
            DatabaseInstances = databaseInstances;
            DatabaseType = databaseType;
            Id = id;
        }
    }
}
