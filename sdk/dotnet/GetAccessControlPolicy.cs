// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetAccessControlPolicy
    {
        /// <summary>
        /// Describes an Access Control Policy.
        /// </summary>
        public static Task<GetAccessControlPolicyResult> InvokeAsync(GetAccessControlPolicyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccessControlPolicyResult>("nutanix:index/getAccessControlPolicy:getAccessControlPolicy", args ?? new GetAccessControlPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Describes an Access Control Policy.
        /// </summary>
        public static Output<GetAccessControlPolicyResult> Invoke(GetAccessControlPolicyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessControlPolicyResult>("nutanix:index/getAccessControlPolicy:getAccessControlPolicy", args ?? new GetAccessControlPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes an Access Control Policy.
        /// </summary>
        public static Output<GetAccessControlPolicyResult> Invoke(GetAccessControlPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessControlPolicyResult>("nutanix:index/getAccessControlPolicy:getAccessControlPolicy", args ?? new GetAccessControlPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessControlPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) The UUID of an access control policy.
        /// </summary>
        [Input("accessControlPolicyId")]
        public string? AccessControlPolicyId { get; set; }

        [Input("accessControlPolicyName")]
        public string? AccessControlPolicyName { get; set; }

        [Input("categories")]
        private List<Inputs.GetAccessControlPolicyCategoryArgs>? _categories;

        /// <summary>
        /// - The category values represented as a dictionary of key &gt; list of values.
        /// </summary>
        public List<Inputs.GetAccessControlPolicyCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetAccessControlPolicyCategoryArgs>());
            set => _categories = value;
        }

        public GetAccessControlPolicyArgs()
        {
        }
        public static new GetAccessControlPolicyArgs Empty => new GetAccessControlPolicyArgs();
    }

    public sealed class GetAccessControlPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) The UUID of an access control policy.
        /// </summary>
        [Input("accessControlPolicyId")]
        public Input<string>? AccessControlPolicyId { get; set; }

        [Input("accessControlPolicyName")]
        public Input<string>? AccessControlPolicyName { get; set; }

        [Input("categories")]
        private InputList<Inputs.GetAccessControlPolicyCategoryInputArgs>? _categories;

        /// <summary>
        /// - The category values represented as a dictionary of key &gt; list of values.
        /// </summary>
        public InputList<Inputs.GetAccessControlPolicyCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetAccessControlPolicyCategoryInputArgs>());
            set => _categories = value;
        }

        public GetAccessControlPolicyInvokeArgs()
        {
        }
        public static new GetAccessControlPolicyInvokeArgs Empty => new GetAccessControlPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessControlPolicyResult
    {
        public readonly string? AccessControlPolicyId;
        public readonly string? AccessControlPolicyName;
        /// <summary>
        /// The version of the API.
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// - The category values represented as a dictionary of key &gt; list of values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccessControlPolicyCategoryResult> Categories;
        public readonly ImmutableArray<Outputs.GetAccessControlPolicyContextFilterListResult> ContextFilterLists;
        /// <summary>
        /// - The description of the Access Control Policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - The Access Control Policy kind metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// - the name(Optional).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// - The reference to a user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> OwnerReference;
        /// <summary>
        /// - The reference to a project.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ProjectReference;
        /// <summary>
        /// - The reference to a role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccessControlPolicyRoleReferenceResult> RoleReferences;
        /// <summary>
        /// - The state of the Access Control Policy.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// - The User group(s) being assigned a given role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccessControlPolicyUserGroupReferenceListResult> UserGroupReferenceLists;
        /// <summary>
        /// - The User(s) being assigned a given role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccessControlPolicyUserReferenceListResult> UserReferenceLists;

        [OutputConstructor]
        private GetAccessControlPolicyResult(
            string? accessControlPolicyId,

            string? accessControlPolicyName,

            string apiVersion,

            ImmutableArray<Outputs.GetAccessControlPolicyCategoryResult> categories,

            ImmutableArray<Outputs.GetAccessControlPolicyContextFilterListResult> contextFilterLists,

            string description,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            ImmutableDictionary<string, string> ownerReference,

            ImmutableDictionary<string, string> projectReference,

            ImmutableArray<Outputs.GetAccessControlPolicyRoleReferenceResult> roleReferences,

            string state,

            ImmutableArray<Outputs.GetAccessControlPolicyUserGroupReferenceListResult> userGroupReferenceLists,

            ImmutableArray<Outputs.GetAccessControlPolicyUserReferenceListResult> userReferenceLists)
        {
            AccessControlPolicyId = accessControlPolicyId;
            AccessControlPolicyName = accessControlPolicyName;
            ApiVersion = apiVersion;
            Categories = categories;
            ContextFilterLists = contextFilterLists;
            Description = description;
            Id = id;
            Metadata = metadata;
            Name = name;
            OwnerReference = ownerReference;
            ProjectReference = projectReference;
            RoleReferences = roleReferences;
            State = state;
            UserGroupReferenceLists = userGroupReferenceLists;
            UserReferenceLists = userReferenceLists;
        }
    }
}
