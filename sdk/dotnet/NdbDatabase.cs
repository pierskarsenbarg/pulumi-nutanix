// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to create database instance based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.
    /// 
    /// ## Example Usage
    /// 
    /// ### NDB database resource with new database server VM
    /// 
    /// ### NDB database resource to provision HA instance with new database server VM
    /// 
    /// ### NDB database resource with registered database server VM
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dbp = new Nutanix.NdbDatabase("dbp", new()
    ///     {
    ///         Actionarguments = new[]
    ///         {
    ///             new Nutanix.Inputs.NdbDatabaseActionargumentArgs
    ///             {
    ///                 Name = "host_ip",
    ///                 Value = "{{ hostIP }}",
    ///             },
    ///         },
    ///         Createdbserver = false,
    ///         Databasetype = "postgres_database",
    ///         Dbparameterprofileid = "{{ db_parameter_profile_id }}",
    ///         DbserverId = "{{ dbserver_id }}",
    ///         Description = "add description",
    ///         Nodes = new[]
    ///         {
    ///             new Nutanix.Inputs.NdbDatabaseNodeArgs
    ///             {
    ///                 Dbserverid = "{{ dbserver_id }}",
    ///             },
    ///         },
    ///         PostgresqlInfo = new Nutanix.Inputs.NdbDatabasePostgresqlInfoArgs
    ///         {
    ///             DatabaseNames = "testdb1",
    ///             DatabaseSize = "{{ 200 }}",
    ///             DbPassword = "password",
    ///             ListenerPort = "{{ listner_port }}",
    ///         },
    ///         Timemachineinfo = new Nutanix.Inputs.NdbDatabaseTimemachineinfoArgs
    ///         {
    ///             Description = "description of time machine",
    ///             Name = "test-pg-inst",
    ///             Schedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleArgs
    ///             {
    ///                 Continuousschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs
    ///                 {
    ///                     Enabled = true,
    ///                     Logbackupinterval = 30,
    ///                     Snapshotsperday = 1,
    ///                 },
    ///                 Monthlyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs
    ///                 {
    ///                     Dayofmonth = 27,
    ///                     Enabled = true,
    ///                 },
    ///                 Quartelyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs
    ///                 {
    ///                     Dayofmonth = 27,
    ///                     Enabled = true,
    ///                     Startmonth = "JANUARY",
    ///                 },
    ///                 Snapshottimeofday = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs
    ///                 {
    ///                     Hours = 16,
    ///                     Minutes = 0,
    ///                     Seconds = 0,
    ///                 },
    ///                 Weeklyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs
    ///                 {
    ///                     Dayofweek = "WEDNESDAY",
    ///                     Enabled = true,
    ///                 },
    ///                 Yearlyschedule = new Nutanix.Inputs.NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs
    ///                 {
    ///                     Dayofmonth = 31,
    ///                     Enabled = false,
    ///                     Month = "DECEMBER",
    ///                 },
    ///             },
    ///             Slaid = "{{ sla_id }}",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## lifecycle
    /// 
    /// * `Update` : - Currently only update of instance's name and description is supported using this resource
    /// 
    /// See detailed information in [NDB Database Instance](https://www.nutanix.dev/api_references/ndb/#/9d9eee4304496-provision-a-database).
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbDatabase:NdbDatabase")]
    public partial class NdbDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - (Optional) action arguments for database. For postgress, you can use postgresql_info
        /// </summary>
        [Output("actionarguments")]
        public Output<ImmutableArray<Outputs.NdbDatabaseActionargument>> Actionarguments { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Enable auto tuning of staging drive. Default: true
        /// </summary>
        [Output("autotunestagingdrive")]
        public Output<bool?> Autotunestagingdrive { get; private set; } = null!;

        [Output("clone")]
        public Output<bool> Clone { get; private set; } = null!;

        [Output("clusterInfos")]
        public Output<ImmutableArray<Outputs.NdbDatabaseClusterInfo>> ClusterInfos { get; private set; } = null!;

        /// <summary>
        /// - (Optional) If clustered database. Default: false
        /// </summary>
        [Output("clustered")]
        public Output<bool?> Clustered { get; private set; } = null!;

        /// <summary>
        /// - (Optional) ID of compute profile
        /// </summary>
        [Output("computeprofileid")]
        public Output<string?> Computeprofileid { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Set this to create new DB server VM. Default: true
        /// </summary>
        [Output("createdbserver")]
        public Output<bool?> Createdbserver { get; private set; } = null!;

        [Output("databaseClusterType")]
        public Output<string> DatabaseClusterType { get; private set; } = null!;

        [Output("databaseInstanceId")]
        public Output<string> DatabaseInstanceId { get; private set; } = null!;

        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        [Output("databaseNodes")]
        public Output<ImmutableArray<Outputs.NdbDatabaseDatabaseNode>> DatabaseNodes { get; private set; } = null!;

        /// <summary>
        /// - (Required) Type of database. Valid values: postgres_database
        /// </summary>
        [Output("databasetype")]
        public Output<string?> Databasetype { get; private set; } = null!;

        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        /// <summary>
        /// - (Optional) DB parameters profile ID
        /// </summary>
        [Output("dbparameterprofileid")]
        public Output<string?> Dbparameterprofileid { get; private set; } = null!;

        [Output("dbserverLogicalCluster")]
        public Output<ImmutableDictionary<string, string>> DbserverLogicalCluster { get; private set; } = null!;

        [Output("dbserverLogicalClusterId")]
        public Output<string> DbserverLogicalClusterId { get; private set; } = null!;

        /// <summary>
        /// - (Optional) DB server VM ID for creating instance on registered DB server VM
        /// </summary>
        [Output("dbserverid")]
        public Output<string?> Dbserverid { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the database from the VM. Default value is true
        /// </summary>
        [Output("delete")]
        public Output<bool?> Delete { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the logical cluster. Default is true
        /// </summary>
        [Output("deleteLogicalCluster")]
        public Output<bool?> DeleteLogicalCluster { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        /// </summary>
        [Output("deleteTimeMachine")]
        public Output<bool?> DeleteTimeMachine { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Force delete of instance. Default is false
        /// </summary>
        [Output("forced")]
        public Output<bool?> Forced { get; private set; } = null!;

        [Output("infos")]
        public Output<ImmutableArray<Outputs.NdbDatabaseInfo>> Infos { get; private set; } = null!;

        [Output("lcmConfigs")]
        public Output<ImmutableArray<Outputs.NdbDatabaseLcmConfig>> LcmConfigs { get; private set; } = null!;

        [Output("linkedDatabases")]
        public Output<ImmutableArray<Outputs.NdbDatabaseLinkedDatabase>> LinkedDatabases { get; private set; } = null!;

        [Output("maintenanceTasks")]
        public Output<Outputs.NdbDatabaseMaintenanceTasks?> MaintenanceTasks { get; private set; } = null!;

        [Output("metric")]
        public Output<ImmutableDictionary<string, string>> Metric { get; private set; } = null!;

        /// <summary>
        /// - (Required) Name of the instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// - (Optional) ID of network profile
        /// </summary>
        [Output("networkprofileid")]
        public Output<string?> Networkprofileid { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Timezone of new DB server VM
        /// </summary>
        [Output("newdbservertimezone")]
        public Output<string?> Newdbservertimezone { get; private set; } = null!;

        /// <summary>
        /// - (Optional) No. of nodes/db server vms. Default: 1
        /// </summary>
        [Output("nodecount")]
        public Output<int?> Nodecount { get; private set; } = null!;

        /// <summary>
        /// - (Optional) nodes info
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.NdbDatabaseNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Cluster ID for DB server VM
        /// </summary>
        [Output("nxclusterid")]
        public Output<string?> Nxclusterid { get; private set; } = null!;

        [Output("parentDatabaseId")]
        public Output<string> ParentDatabaseId { get; private set; } = null!;

        /// <summary>
        /// - (Optional) action arguments for postgress type database.
        /// </summary>
        [Output("postgresqlInfo")]
        public Output<Outputs.NdbDatabasePostgresqlInfo?> PostgresqlInfo { get; private set; } = null!;

        /// <summary>
        /// List of all the properties
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbDatabaseProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Output("remove")]
        public Output<bool?> Remove { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Output("softRemove")]
        public Output<bool?> SoftRemove { get; private set; } = null!;

        /// <summary>
        /// - (Optional) ID of software profile
        /// </summary>
        [Output("softwareprofileid")]
        public Output<string?> Softwareprofileid { get; private set; } = null!;

        /// <summary>
        /// - (Optional) ID of version in software profile
        /// </summary>
        [Output("softwareprofileversionid")]
        public Output<string?> Softwareprofileversionid { get; private set; } = null!;

        /// <summary>
        /// - (Optional) public key for ssh access to DB server VM
        /// </summary>
        [Output("sshpublickey")]
        public Output<string?> Sshpublickey { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbDatabaseTag>> Tags { get; private set; } = null!;

        [Output("timeMachineId")]
        public Output<string> TimeMachineId { get; private set; } = null!;

        [Output("timeMachines")]
        public Output<ImmutableArray<Outputs.NdbDatabaseTimeMachine>> TimeMachines { get; private set; } = null!;

        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;

        /// <summary>
        /// - (Optional) time machine config
        /// </summary>
        [Output("timemachineinfo")]
        public Output<Outputs.NdbDatabaseTimemachineinfo?> Timemachineinfo { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// - (Optional) password for DB server VM and era drive user
        /// </summary>
        [Output("vmPassword")]
        public Output<string?> VmPassword { get; private set; } = null!;


        /// <summary>
        /// Create a NdbDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbDatabase(string name, NdbDatabaseArgs? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDatabase:NdbDatabase", name, args ?? new NdbDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbDatabase(string name, Input<string> id, NdbDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDatabase:NdbDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
                AdditionalSecretOutputs =
                {
                    "sshpublickey",
                    "vmPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbDatabase Get(string name, Input<string> id, NdbDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbDatabase(name, id, state, options);
        }
    }

    public sealed class NdbDatabaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("actionarguments")]
        private InputList<Inputs.NdbDatabaseActionargumentArgs>? _actionarguments;

        /// <summary>
        /// - (Optional) action arguments for database. For postgress, you can use postgresql_info
        /// </summary>
        public InputList<Inputs.NdbDatabaseActionargumentArgs> Actionarguments
        {
            get => _actionarguments ?? (_actionarguments = new InputList<Inputs.NdbDatabaseActionargumentArgs>());
            set => _actionarguments = value;
        }

        /// <summary>
        /// - (Optional) Enable auto tuning of staging drive. Default: true
        /// </summary>
        [Input("autotunestagingdrive")]
        public Input<bool>? Autotunestagingdrive { get; set; }

        [Input("clusterInfos")]
        private InputList<Inputs.NdbDatabaseClusterInfoArgs>? _clusterInfos;
        public InputList<Inputs.NdbDatabaseClusterInfoArgs> ClusterInfos
        {
            get => _clusterInfos ?? (_clusterInfos = new InputList<Inputs.NdbDatabaseClusterInfoArgs>());
            set => _clusterInfos = value;
        }

        /// <summary>
        /// - (Optional) If clustered database. Default: false
        /// </summary>
        [Input("clustered")]
        public Input<bool>? Clustered { get; set; }

        /// <summary>
        /// - (Optional) ID of compute profile
        /// </summary>
        [Input("computeprofileid")]
        public Input<string>? Computeprofileid { get; set; }

        /// <summary>
        /// - (Optional) Set this to create new DB server VM. Default: true
        /// </summary>
        [Input("createdbserver")]
        public Input<bool>? Createdbserver { get; set; }

        [Input("databaseInstanceId")]
        public Input<string>? DatabaseInstanceId { get; set; }

        /// <summary>
        /// - (Required) Type of database. Valid values: postgres_database
        /// </summary>
        [Input("databasetype")]
        public Input<string>? Databasetype { get; set; }

        /// <summary>
        /// - (Optional) DB parameters profile ID
        /// </summary>
        [Input("dbparameterprofileid")]
        public Input<string>? Dbparameterprofileid { get; set; }

        /// <summary>
        /// - (Optional) DB server VM ID for creating instance on registered DB server VM
        /// </summary>
        [Input("dbserverid")]
        public Input<string>? Dbserverid { get; set; }

        /// <summary>
        /// - (Optional) Delete the database from the VM. Default value is true
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// - (Optional) Delete the logical cluster. Default is true
        /// </summary>
        [Input("deleteLogicalCluster")]
        public Input<bool>? DeleteLogicalCluster { get; set; }

        /// <summary>
        /// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        /// </summary>
        [Input("deleteTimeMachine")]
        public Input<bool>? DeleteTimeMachine { get; set; }

        /// <summary>
        /// - (Optional) The description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// - (Optional) Force delete of instance. Default is false
        /// </summary>
        [Input("forced")]
        public Input<bool>? Forced { get; set; }

        [Input("maintenanceTasks")]
        public Input<Inputs.NdbDatabaseMaintenanceTasksArgs>? MaintenanceTasks { get; set; }

        /// <summary>
        /// - (Required) Name of the instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// - (Optional) ID of network profile
        /// </summary>
        [Input("networkprofileid")]
        public Input<string>? Networkprofileid { get; set; }

        /// <summary>
        /// - (Optional) Timezone of new DB server VM
        /// </summary>
        [Input("newdbservertimezone")]
        public Input<string>? Newdbservertimezone { get; set; }

        /// <summary>
        /// - (Optional) No. of nodes/db server vms. Default: 1
        /// </summary>
        [Input("nodecount")]
        public Input<int>? Nodecount { get; set; }

        [Input("nodes")]
        private InputList<Inputs.NdbDatabaseNodeArgs>? _nodes;

        /// <summary>
        /// - (Optional) nodes info
        /// </summary>
        public InputList<Inputs.NdbDatabaseNodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.NdbDatabaseNodeArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// - (Optional) Cluster ID for DB server VM
        /// </summary>
        [Input("nxclusterid")]
        public Input<string>? Nxclusterid { get; set; }

        /// <summary>
        /// - (Optional) action arguments for postgress type database.
        /// </summary>
        [Input("postgresqlInfo")]
        public Input<Inputs.NdbDatabasePostgresqlInfoArgs>? PostgresqlInfo { get; set; }

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        /// <summary>
        /// - (Optional) ID of software profile
        /// </summary>
        [Input("softwareprofileid")]
        public Input<string>? Softwareprofileid { get; set; }

        /// <summary>
        /// - (Optional) ID of version in software profile
        /// </summary>
        [Input("softwareprofileversionid")]
        public Input<string>? Softwareprofileversionid { get; set; }

        [Input("sshpublickey")]
        private Input<string>? _sshpublickey;

        /// <summary>
        /// - (Optional) public key for ssh access to DB server VM
        /// </summary>
        public Input<string>? Sshpublickey
        {
            get => _sshpublickey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshpublickey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputList<Inputs.NdbDatabaseTagArgs>? _tags;
        public InputList<Inputs.NdbDatabaseTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDatabaseTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// - (Optional) time machine config
        /// </summary>
        [Input("timemachineinfo")]
        public Input<Inputs.NdbDatabaseTimemachineinfoArgs>? Timemachineinfo { get; set; }

        [Input("vmPassword")]
        private Input<string>? _vmPassword;

        /// <summary>
        /// - (Optional) password for DB server VM and era drive user
        /// </summary>
        public Input<string>? VmPassword
        {
            get => _vmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public NdbDatabaseArgs()
        {
        }
        public static new NdbDatabaseArgs Empty => new NdbDatabaseArgs();
    }

    public sealed class NdbDatabaseState : global::Pulumi.ResourceArgs
    {
        [Input("actionarguments")]
        private InputList<Inputs.NdbDatabaseActionargumentGetArgs>? _actionarguments;

        /// <summary>
        /// - (Optional) action arguments for database. For postgress, you can use postgresql_info
        /// </summary>
        public InputList<Inputs.NdbDatabaseActionargumentGetArgs> Actionarguments
        {
            get => _actionarguments ?? (_actionarguments = new InputList<Inputs.NdbDatabaseActionargumentGetArgs>());
            set => _actionarguments = value;
        }

        /// <summary>
        /// - (Optional) Enable auto tuning of staging drive. Default: true
        /// </summary>
        [Input("autotunestagingdrive")]
        public Input<bool>? Autotunestagingdrive { get; set; }

        [Input("clone")]
        public Input<bool>? Clone { get; set; }

        [Input("clusterInfos")]
        private InputList<Inputs.NdbDatabaseClusterInfoGetArgs>? _clusterInfos;
        public InputList<Inputs.NdbDatabaseClusterInfoGetArgs> ClusterInfos
        {
            get => _clusterInfos ?? (_clusterInfos = new InputList<Inputs.NdbDatabaseClusterInfoGetArgs>());
            set => _clusterInfos = value;
        }

        /// <summary>
        /// - (Optional) If clustered database. Default: false
        /// </summary>
        [Input("clustered")]
        public Input<bool>? Clustered { get; set; }

        /// <summary>
        /// - (Optional) ID of compute profile
        /// </summary>
        [Input("computeprofileid")]
        public Input<string>? Computeprofileid { get; set; }

        /// <summary>
        /// - (Optional) Set this to create new DB server VM. Default: true
        /// </summary>
        [Input("createdbserver")]
        public Input<bool>? Createdbserver { get; set; }

        [Input("databaseClusterType")]
        public Input<string>? DatabaseClusterType { get; set; }

        [Input("databaseInstanceId")]
        public Input<string>? DatabaseInstanceId { get; set; }

        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("databaseNodes")]
        private InputList<Inputs.NdbDatabaseDatabaseNodeGetArgs>? _databaseNodes;
        public InputList<Inputs.NdbDatabaseDatabaseNodeGetArgs> DatabaseNodes
        {
            get => _databaseNodes ?? (_databaseNodes = new InputList<Inputs.NdbDatabaseDatabaseNodeGetArgs>());
            set => _databaseNodes = value;
        }

        /// <summary>
        /// - (Required) Type of database. Valid values: postgres_database
        /// </summary>
        [Input("databasetype")]
        public Input<string>? Databasetype { get; set; }

        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        /// <summary>
        /// - (Optional) DB parameters profile ID
        /// </summary>
        [Input("dbparameterprofileid")]
        public Input<string>? Dbparameterprofileid { get; set; }

        [Input("dbserverLogicalCluster")]
        private InputMap<string>? _dbserverLogicalCluster;
        public InputMap<string> DbserverLogicalCluster
        {
            get => _dbserverLogicalCluster ?? (_dbserverLogicalCluster = new InputMap<string>());
            set => _dbserverLogicalCluster = value;
        }

        [Input("dbserverLogicalClusterId")]
        public Input<string>? DbserverLogicalClusterId { get; set; }

        /// <summary>
        /// - (Optional) DB server VM ID for creating instance on registered DB server VM
        /// </summary>
        [Input("dbserverid")]
        public Input<string>? Dbserverid { get; set; }

        /// <summary>
        /// - (Optional) Delete the database from the VM. Default value is true
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// - (Optional) Delete the logical cluster. Default is true
        /// </summary>
        [Input("deleteLogicalCluster")]
        public Input<bool>? DeleteLogicalCluster { get; set; }

        /// <summary>
        /// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        /// </summary>
        [Input("deleteTimeMachine")]
        public Input<bool>? DeleteTimeMachine { get; set; }

        /// <summary>
        /// - (Optional) The description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// - (Optional) Force delete of instance. Default is false
        /// </summary>
        [Input("forced")]
        public Input<bool>? Forced { get; set; }

        [Input("infos")]
        private InputList<Inputs.NdbDatabaseInfoGetArgs>? _infos;
        public InputList<Inputs.NdbDatabaseInfoGetArgs> Infos
        {
            get => _infos ?? (_infos = new InputList<Inputs.NdbDatabaseInfoGetArgs>());
            set => _infos = value;
        }

        [Input("lcmConfigs")]
        private InputList<Inputs.NdbDatabaseLcmConfigGetArgs>? _lcmConfigs;
        public InputList<Inputs.NdbDatabaseLcmConfigGetArgs> LcmConfigs
        {
            get => _lcmConfigs ?? (_lcmConfigs = new InputList<Inputs.NdbDatabaseLcmConfigGetArgs>());
            set => _lcmConfigs = value;
        }

        [Input("linkedDatabases")]
        private InputList<Inputs.NdbDatabaseLinkedDatabaseGetArgs>? _linkedDatabases;
        public InputList<Inputs.NdbDatabaseLinkedDatabaseGetArgs> LinkedDatabases
        {
            get => _linkedDatabases ?? (_linkedDatabases = new InputList<Inputs.NdbDatabaseLinkedDatabaseGetArgs>());
            set => _linkedDatabases = value;
        }

        [Input("maintenanceTasks")]
        public Input<Inputs.NdbDatabaseMaintenanceTasksGetArgs>? MaintenanceTasks { get; set; }

        [Input("metric")]
        private InputMap<string>? _metric;
        public InputMap<string> Metric
        {
            get => _metric ?? (_metric = new InputMap<string>());
            set => _metric = value;
        }

        /// <summary>
        /// - (Required) Name of the instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// - (Optional) ID of network profile
        /// </summary>
        [Input("networkprofileid")]
        public Input<string>? Networkprofileid { get; set; }

        /// <summary>
        /// - (Optional) Timezone of new DB server VM
        /// </summary>
        [Input("newdbservertimezone")]
        public Input<string>? Newdbservertimezone { get; set; }

        /// <summary>
        /// - (Optional) No. of nodes/db server vms. Default: 1
        /// </summary>
        [Input("nodecount")]
        public Input<int>? Nodecount { get; set; }

        [Input("nodes")]
        private InputList<Inputs.NdbDatabaseNodeGetArgs>? _nodes;

        /// <summary>
        /// - (Optional) nodes info
        /// </summary>
        public InputList<Inputs.NdbDatabaseNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.NdbDatabaseNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// - (Optional) Cluster ID for DB server VM
        /// </summary>
        [Input("nxclusterid")]
        public Input<string>? Nxclusterid { get; set; }

        [Input("parentDatabaseId")]
        public Input<string>? ParentDatabaseId { get; set; }

        /// <summary>
        /// - (Optional) action arguments for postgress type database.
        /// </summary>
        [Input("postgresqlInfo")]
        public Input<Inputs.NdbDatabasePostgresqlInfoGetArgs>? PostgresqlInfo { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbDatabasePropertyGetArgs>? _properties;

        /// <summary>
        /// List of all the properties
        /// </summary>
        public InputList<Inputs.NdbDatabasePropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbDatabasePropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        /// <summary>
        /// - (Optional) ID of software profile
        /// </summary>
        [Input("softwareprofileid")]
        public Input<string>? Softwareprofileid { get; set; }

        /// <summary>
        /// - (Optional) ID of version in software profile
        /// </summary>
        [Input("softwareprofileversionid")]
        public Input<string>? Softwareprofileversionid { get; set; }

        [Input("sshpublickey")]
        private Input<string>? _sshpublickey;

        /// <summary>
        /// - (Optional) public key for ssh access to DB server VM
        /// </summary>
        public Input<string>? Sshpublickey
        {
            get => _sshpublickey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshpublickey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbDatabaseTagGetArgs>? _tags;
        public InputList<Inputs.NdbDatabaseTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDatabaseTagGetArgs>());
            set => _tags = value;
        }

        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        [Input("timeMachines")]
        private InputList<Inputs.NdbDatabaseTimeMachineGetArgs>? _timeMachines;
        public InputList<Inputs.NdbDatabaseTimeMachineGetArgs> TimeMachines
        {
            get => _timeMachines ?? (_timeMachines = new InputList<Inputs.NdbDatabaseTimeMachineGetArgs>());
            set => _timeMachines = value;
        }

        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// - (Optional) time machine config
        /// </summary>
        [Input("timemachineinfo")]
        public Input<Inputs.NdbDatabaseTimemachineinfoGetArgs>? Timemachineinfo { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vmPassword")]
        private Input<string>? _vmPassword;

        /// <summary>
        /// - (Optional) password for DB server VM and era drive user
        /// </summary>
        public Input<string>? VmPassword
        {
            get => _vmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public NdbDatabaseState()
        {
        }
        public static new NdbDatabaseState Empty => new NdbDatabaseState();
    }
}
