// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to restore the database instance based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbDatabaseRestore("name", new()
    ///     {
    ///         DatabaseId = "{{ database_id }}",
    ///         SnapshotId = "{{ snapshot id }}",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbDatabaseRestore:NdbDatabaseRestore")]
    public partial class NdbDatabaseRestore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// whether instance is cloned or not
        /// </summary>
        [Output("clone")]
        public Output<bool> Clone { get; private set; } = null!;

        /// <summary>
        /// database cluster type
        /// </summary>
        [Output("databaseClusterType")]
        public Output<string> DatabaseClusterType { get; private set; } = null!;

        /// <summary>
        /// database id
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        [Output("databaseInstanceId")]
        public Output<string> DatabaseInstanceId { get; private set; } = null!;

        /// <summary>
        /// name of database
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// database nodes associated with database instance
        /// </summary>
        [Output("databaseNodes")]
        public Output<ImmutableArray<Outputs.NdbDatabaseRestoreDatabaseNode>> DatabaseNodes { get; private set; } = null!;

        /// <summary>
        /// date created for db instance
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// date modified for instance
        /// </summary>
        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        /// <summary>
        /// dbserver logical cluster
        /// </summary>
        [Output("dbserverLogicalCluster")]
        public Output<ImmutableDictionary<string, string>> DbserverLogicalCluster { get; private set; } = null!;

        /// <summary>
        /// dbserver logical cluster id
        /// </summary>
        [Output("dbserverLogicalClusterId")]
        public Output<string> DbserverLogicalClusterId { get; private set; } = null!;

        /// <summary>
        /// description of database instance
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// info of instance
        /// </summary>
        [Output("infos")]
        public Output<ImmutableArray<Outputs.NdbDatabaseRestoreInfo>> Infos { get; private set; } = null!;

        /// <summary>
        /// latest snapshot id
        /// </summary>
        [Output("latestSnapshot")]
        public Output<string?> LatestSnapshot { get; private set; } = null!;

        /// <summary>
        /// LCM config of instance
        /// </summary>
        [Output("lcmConfigs")]
        public Output<ImmutableArray<Outputs.NdbDatabaseRestoreLcmConfig>> LcmConfigs { get; private set; } = null!;

        /// <summary>
        /// linked databases within database instance
        /// </summary>
        [Output("linkedDatabases")]
        public Output<ImmutableArray<Outputs.NdbDatabaseRestoreLinkedDatabase>> LinkedDatabases { get; private set; } = null!;

        /// <summary>
        /// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        /// </summary>
        [Output("metric")]
        public Output<ImmutableDictionary<string, string>> Metric { get; private set; } = null!;

        /// <summary>
        /// Name of database instance
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// parent database id
        /// </summary>
        [Output("parentDatabaseId")]
        public Output<string> ParentDatabaseId { get; private set; } = null!;

        /// <summary>
        /// properties of database created
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbDatabaseRestoreProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// helps to restore the database with same config.
        /// </summary>
        [Output("restoreVersion")]
        public Output<int?> RestoreVersion { get; private set; } = null!;

        /// <summary>
        /// snapshot id from you want to use for restoring the instance
        /// </summary>
        [Output("snapshotId")]
        public Output<string?> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// status of instance
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbDatabaseRestoreTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// time machine id of instance
        /// </summary>
        [Output("timeMachineId")]
        public Output<string> TimeMachineId { get; private set; } = null!;

        /// <summary>
        /// Time Machine details of instance
        /// </summary>
        [Output("timeMachines")]
        public Output<ImmutableArray<Outputs.NdbDatabaseRestoreTimeMachine>> TimeMachines { get; private set; } = null!;

        /// <summary>
        /// timezone on which instance is created xw
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;

        /// <summary>
        /// timezone . Should be used with  `UserPitrTimestamp`
        /// </summary>
        [Output("timeZonePitr")]
        public Output<string?> TimeZonePitr { get; private set; } = null!;

        /// <summary>
        /// type of database
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// the time to which you want to restore your instance.
        /// </summary>
        [Output("userPitrTimestamp")]
        public Output<string?> UserPitrTimestamp { get; private set; } = null!;


        /// <summary>
        /// Create a NdbDatabaseRestore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbDatabaseRestore(string name, NdbDatabaseRestoreArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDatabaseRestore:NdbDatabaseRestore", name, args ?? new NdbDatabaseRestoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbDatabaseRestore(string name, Input<string> id, NdbDatabaseRestoreState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDatabaseRestore:NdbDatabaseRestore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbDatabaseRestore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbDatabaseRestore Get(string name, Input<string> id, NdbDatabaseRestoreState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbDatabaseRestore(name, id, state, options);
        }
    }

    public sealed class NdbDatabaseRestoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// database id
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// latest snapshot id
        /// </summary>
        [Input("latestSnapshot")]
        public Input<string>? LatestSnapshot { get; set; }

        /// <summary>
        /// helps to restore the database with same config.
        /// </summary>
        [Input("restoreVersion")]
        public Input<int>? RestoreVersion { get; set; }

        /// <summary>
        /// snapshot id from you want to use for restoring the instance
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbDatabaseRestoreTagArgs>? _tags;

        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestoreTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDatabaseRestoreTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// timezone . Should be used with  `UserPitrTimestamp`
        /// </summary>
        [Input("timeZonePitr")]
        public Input<string>? TimeZonePitr { get; set; }

        /// <summary>
        /// the time to which you want to restore your instance.
        /// </summary>
        [Input("userPitrTimestamp")]
        public Input<string>? UserPitrTimestamp { get; set; }

        public NdbDatabaseRestoreArgs()
        {
        }
        public static new NdbDatabaseRestoreArgs Empty => new NdbDatabaseRestoreArgs();
    }

    public sealed class NdbDatabaseRestoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// whether instance is cloned or not
        /// </summary>
        [Input("clone")]
        public Input<bool>? Clone { get; set; }

        /// <summary>
        /// database cluster type
        /// </summary>
        [Input("databaseClusterType")]
        public Input<string>? DatabaseClusterType { get; set; }

        /// <summary>
        /// database id
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        [Input("databaseInstanceId")]
        public Input<string>? DatabaseInstanceId { get; set; }

        /// <summary>
        /// name of database
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("databaseNodes")]
        private InputList<Inputs.NdbDatabaseRestoreDatabaseNodeGetArgs>? _databaseNodes;

        /// <summary>
        /// database nodes associated with database instance
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestoreDatabaseNodeGetArgs> DatabaseNodes
        {
            get => _databaseNodes ?? (_databaseNodes = new InputList<Inputs.NdbDatabaseRestoreDatabaseNodeGetArgs>());
            set => _databaseNodes = value;
        }

        /// <summary>
        /// date created for db instance
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// date modified for instance
        /// </summary>
        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        [Input("dbserverLogicalCluster")]
        private InputMap<string>? _dbserverLogicalCluster;

        /// <summary>
        /// dbserver logical cluster
        /// </summary>
        public InputMap<string> DbserverLogicalCluster
        {
            get => _dbserverLogicalCluster ?? (_dbserverLogicalCluster = new InputMap<string>());
            set => _dbserverLogicalCluster = value;
        }

        /// <summary>
        /// dbserver logical cluster id
        /// </summary>
        [Input("dbserverLogicalClusterId")]
        public Input<string>? DbserverLogicalClusterId { get; set; }

        /// <summary>
        /// description of database instance
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("infos")]
        private InputList<Inputs.NdbDatabaseRestoreInfoGetArgs>? _infos;

        /// <summary>
        /// info of instance
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestoreInfoGetArgs> Infos
        {
            get => _infos ?? (_infos = new InputList<Inputs.NdbDatabaseRestoreInfoGetArgs>());
            set => _infos = value;
        }

        /// <summary>
        /// latest snapshot id
        /// </summary>
        [Input("latestSnapshot")]
        public Input<string>? LatestSnapshot { get; set; }

        [Input("lcmConfigs")]
        private InputList<Inputs.NdbDatabaseRestoreLcmConfigGetArgs>? _lcmConfigs;

        /// <summary>
        /// LCM config of instance
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestoreLcmConfigGetArgs> LcmConfigs
        {
            get => _lcmConfigs ?? (_lcmConfigs = new InputList<Inputs.NdbDatabaseRestoreLcmConfigGetArgs>());
            set => _lcmConfigs = value;
        }

        [Input("linkedDatabases")]
        private InputList<Inputs.NdbDatabaseRestoreLinkedDatabaseGetArgs>? _linkedDatabases;

        /// <summary>
        /// linked databases within database instance
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestoreLinkedDatabaseGetArgs> LinkedDatabases
        {
            get => _linkedDatabases ?? (_linkedDatabases = new InputList<Inputs.NdbDatabaseRestoreLinkedDatabaseGetArgs>());
            set => _linkedDatabases = value;
        }

        [Input("metric")]
        private InputMap<string>? _metric;

        /// <summary>
        /// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        /// </summary>
        public InputMap<string> Metric
        {
            get => _metric ?? (_metric = new InputMap<string>());
            set => _metric = value;
        }

        /// <summary>
        /// Name of database instance
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// parent database id
        /// </summary>
        [Input("parentDatabaseId")]
        public Input<string>? ParentDatabaseId { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbDatabaseRestorePropertyGetArgs>? _properties;

        /// <summary>
        /// properties of database created
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestorePropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbDatabaseRestorePropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// helps to restore the database with same config.
        /// </summary>
        [Input("restoreVersion")]
        public Input<int>? RestoreVersion { get; set; }

        /// <summary>
        /// snapshot id from you want to use for restoring the instance
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// status of instance
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbDatabaseRestoreTagGetArgs>? _tags;

        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestoreTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDatabaseRestoreTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// time machine id of instance
        /// </summary>
        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        [Input("timeMachines")]
        private InputList<Inputs.NdbDatabaseRestoreTimeMachineGetArgs>? _timeMachines;

        /// <summary>
        /// Time Machine details of instance
        /// </summary>
        public InputList<Inputs.NdbDatabaseRestoreTimeMachineGetArgs> TimeMachines
        {
            get => _timeMachines ?? (_timeMachines = new InputList<Inputs.NdbDatabaseRestoreTimeMachineGetArgs>());
            set => _timeMachines = value;
        }

        /// <summary>
        /// timezone on which instance is created xw
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// timezone . Should be used with  `UserPitrTimestamp`
        /// </summary>
        [Input("timeZonePitr")]
        public Input<string>? TimeZonePitr { get; set; }

        /// <summary>
        /// type of database
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// the time to which you want to restore your instance.
        /// </summary>
        [Input("userPitrTimestamp")]
        public Input<string>? UserPitrTimestamp { get; set; }

        public NdbDatabaseRestoreState()
        {
        }
        public static new NdbDatabaseRestoreState Empty => new NdbDatabaseRestoreState();
    }
}
