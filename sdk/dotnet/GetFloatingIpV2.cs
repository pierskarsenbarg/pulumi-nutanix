// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetFloatingIpV2
    {
        /// <summary>
        /// Provides a datasource to retrieve the floating IP for this extId.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_floating_ip = Nutanix.GetFloatingIpV2.Invoke(new()
        ///     {
        ///         ExtId = "cf1a7643-605e-4622-9f2a-b3fdccdbd072",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFloatingIpV2Result> InvokeAsync(GetFloatingIpV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFloatingIpV2Result>("nutanix:index/getFloatingIpV2:getFloatingIpV2", args ?? new GetFloatingIpV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve the floating IP for this extId.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_floating_ip = Nutanix.GetFloatingIpV2.Invoke(new()
        ///     {
        ///         ExtId = "cf1a7643-605e-4622-9f2a-b3fdccdbd072",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFloatingIpV2Result> Invoke(GetFloatingIpV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFloatingIpV2Result>("nutanix:index/getFloatingIpV2:getFloatingIpV2", args ?? new GetFloatingIpV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve the floating IP for this extId.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_floating_ip = Nutanix.GetFloatingIpV2.Invoke(new()
        ///     {
        ///         ExtId = "cf1a7643-605e-4622-9f2a-b3fdccdbd072",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFloatingIpV2Result> Invoke(GetFloatingIpV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFloatingIpV2Result>("nutanix:index/getFloatingIpV2:getFloatingIpV2", args ?? new GetFloatingIpV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFloatingIpV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Floating IP UUID
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetFloatingIpV2Args()
        {
        }
        public static new GetFloatingIpV2Args Empty => new GetFloatingIpV2Args();
    }

    public sealed class GetFloatingIpV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Floating IP UUID
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetFloatingIpV2InvokeArgs()
        {
        }
        public static new GetFloatingIpV2InvokeArgs Empty => new GetFloatingIpV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetFloatingIpV2Result
    {
        /// <summary>
        /// Association status of floating IP.
        /// </summary>
        public readonly string AssociationStatus;
        /// <summary>
        /// Association of the Floating IP with either NIC or Private IP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpV2AssociationResult> Associations;
        /// <summary>
        /// Description for the Floating IP.
        /// </summary>
        public readonly string Description;
        public readonly string ExtId;
        /// <summary>
        /// External subnet reference for the Floating IP to be allocated in on-prem only.
        /// </summary>
        public readonly string ExternalSubnetReference;
        /// <summary>
        /// Networking common base object
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpV2ExternalSubnetResult> ExternalSubnets;
        /// <summary>
        /// Floating IP value in string
        /// </summary>
        public readonly string FloatingIpValue;
        /// <summary>
        /// Floating IP address.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpV2FloatingIpResult> FloatingIps;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpV2LinkResult> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpV2MetadataResult> Metadatas;
        /// <summary>
        /// Name of the floating IP.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Private IP value in string
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// VM NIC reference.
        /// </summary>
        public readonly string VmNicReference;
        /// <summary>
        /// Virtual NIC for projections
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpV2VmNicResult> VmNics;
        /// <summary>
        /// VPC reference UUID
        /// </summary>
        public readonly string VpcReference;
        /// <summary>
        /// Networking common base object
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpV2VpcResult> Vpcs;

        [OutputConstructor]
        private GetFloatingIpV2Result(
            string associationStatus,

            ImmutableArray<Outputs.GetFloatingIpV2AssociationResult> associations,

            string description,

            string extId,

            string externalSubnetReference,

            ImmutableArray<Outputs.GetFloatingIpV2ExternalSubnetResult> externalSubnets,

            string floatingIpValue,

            ImmutableArray<Outputs.GetFloatingIpV2FloatingIpResult> floatingIps,

            string id,

            ImmutableArray<Outputs.GetFloatingIpV2LinkResult> links,

            ImmutableArray<Outputs.GetFloatingIpV2MetadataResult> metadatas,

            string name,

            string privateIp,

            string tenantId,

            string vmNicReference,

            ImmutableArray<Outputs.GetFloatingIpV2VmNicResult> vmNics,

            string vpcReference,

            ImmutableArray<Outputs.GetFloatingIpV2VpcResult> vpcs)
        {
            AssociationStatus = associationStatus;
            Associations = associations;
            Description = description;
            ExtId = extId;
            ExternalSubnetReference = externalSubnetReference;
            ExternalSubnets = externalSubnets;
            FloatingIpValue = floatingIpValue;
            FloatingIps = floatingIps;
            Id = id;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            PrivateIp = privateIp;
            TenantId = tenantId;
            VmNicReference = vmNicReference;
            VmNics = vmNics;
            VpcReference = vpcReference;
            Vpcs = vpcs;
        }
    }
}
