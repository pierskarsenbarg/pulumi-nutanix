// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbDatabase
    {
        /// <summary>
        /// Describes a database instance in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var db1 = Nutanix.GetNdbDatabase.Invoke(new()
        ///     {
        ///         DatabaseId = "&lt;sample-id&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["db1Output"] = db1,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetNdbDatabaseResult> InvokeAsync(GetNdbDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbDatabaseResult>("nutanix:index/getNdbDatabase:getNdbDatabase", args ?? new GetNdbDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a database instance in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var db1 = Nutanix.GetNdbDatabase.Invoke(new()
        ///     {
        ///         DatabaseId = "&lt;sample-id&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["db1Output"] = db1,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbDatabaseResult> Invoke(GetNdbDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbDatabaseResult>("nutanix:index/getNdbDatabase:getNdbDatabase", args ?? new GetNdbDatabaseInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a database instance in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var db1 = Nutanix.GetNdbDatabase.Invoke(new()
        ///     {
        ///         DatabaseId = "&lt;sample-id&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["db1Output"] = db1,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbDatabaseResult> Invoke(GetNdbDatabaseInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbDatabaseResult>("nutanix:index/getNdbDatabase:getNdbDatabase", args ?? new GetNdbDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database instance
        /// </summary>
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        [Input("tags")]
        private List<Inputs.GetNdbDatabaseTagArgs>? _tags;

        /// <summary>
        /// - tags attached
        /// </summary>
        public List<Inputs.GetNdbDatabaseTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetNdbDatabaseTagArgs>());
            set => _tags = value;
        }

        public GetNdbDatabaseArgs()
        {
        }
        public static new GetNdbDatabaseArgs Empty => new GetNdbDatabaseArgs();
    }

    public sealed class GetNdbDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database instance
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.GetNdbDatabaseTagInputArgs>? _tags;

        /// <summary>
        /// - tags attached
        /// </summary>
        public InputList<Inputs.GetNdbDatabaseTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetNdbDatabaseTagInputArgs>());
            set => _tags = value;
        }

        public GetNdbDatabaseInvokeArgs()
        {
        }
        public static new GetNdbDatabaseInvokeArgs Empty => new GetNdbDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbDatabaseResult
    {
        /// <summary>
        /// - if cloned
        /// </summary>
        public readonly bool Clone;
        /// <summary>
        /// - if clustered or not
        /// </summary>
        public readonly bool Clustered;
        public readonly string DatabaseClusterType;
        public readonly string DatabaseId;
        /// <summary>
        /// - database instance name
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// - nodes info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabaseDatabaseNodeResult> DatabaseNodes;
        public readonly ImmutableDictionary<string, string> Databases;
        /// <summary>
        /// - creation date
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// - date modified
        /// </summary>
        public readonly string DateModified;
        /// <summary>
        /// - NA
        /// </summary>
        public readonly ImmutableDictionary<string, string> DbserverLogicalCluster;
        /// <summary>
        /// - NA
        /// </summary>
        public readonly string DbserverLogicalClusterId;
        /// <summary>
        /// - description
        /// </summary>
        public readonly string Description;
        public readonly bool EraCreated;
        /// <summary>
        /// - id of database instance
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - info regarding disks, vm, storage, etc.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabaseInfoResult> Infos;
        /// <summary>
        /// - lcm configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabaseLcmConfigResult> LcmConfigs;
        /// <summary>
        /// - list of databases created in instance with info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabaseLinkedDatabaseResult> LinkedDatabases;
        /// <summary>
        /// - metrics
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metric;
        /// <summary>
        /// - name of database instance
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// - parent database ID
        /// </summary>
        public readonly string ParentDatabaseId;
        /// <summary>
        /// - properties
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabasePropertyResult> Properties;
        /// <summary>
        /// - status of database instance
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// - tags attached
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabaseTagResult> Tags;
        /// <summary>
        /// - time machine ID
        /// </summary>
        public readonly string TimeMachineId;
        /// <summary>
        /// - time machine related config info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDatabaseTimeMachineResult> TimeMachines;
        /// <summary>
        /// - timezone
        /// </summary>
        public readonly string TimeZone;
        /// <summary>
        /// - database engine type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNdbDatabaseResult(
            bool clone,

            bool clustered,

            string databaseClusterType,

            string databaseId,

            string databaseName,

            ImmutableArray<Outputs.GetNdbDatabaseDatabaseNodeResult> databaseNodes,

            ImmutableDictionary<string, string> databases,

            string dateCreated,

            string dateModified,

            ImmutableDictionary<string, string> dbserverLogicalCluster,

            string dbserverLogicalClusterId,

            string description,

            bool eraCreated,

            string id,

            ImmutableArray<Outputs.GetNdbDatabaseInfoResult> infos,

            ImmutableArray<Outputs.GetNdbDatabaseLcmConfigResult> lcmConfigs,

            ImmutableArray<Outputs.GetNdbDatabaseLinkedDatabaseResult> linkedDatabases,

            ImmutableDictionary<string, string> metric,

            string name,

            string parentDatabaseId,

            ImmutableArray<Outputs.GetNdbDatabasePropertyResult> properties,

            string status,

            ImmutableArray<Outputs.GetNdbDatabaseTagResult> tags,

            string timeMachineId,

            ImmutableArray<Outputs.GetNdbDatabaseTimeMachineResult> timeMachines,

            string timeZone,

            string type)
        {
            Clone = clone;
            Clustered = clustered;
            DatabaseClusterType = databaseClusterType;
            DatabaseId = databaseId;
            DatabaseName = databaseName;
            DatabaseNodes = databaseNodes;
            Databases = databases;
            DateCreated = dateCreated;
            DateModified = dateModified;
            DbserverLogicalCluster = dbserverLogicalCluster;
            DbserverLogicalClusterId = dbserverLogicalClusterId;
            Description = description;
            EraCreated = eraCreated;
            Id = id;
            Infos = infos;
            LcmConfigs = lcmConfigs;
            LinkedDatabases = linkedDatabases;
            Metric = metric;
            Name = name;
            ParentDatabaseId = parentDatabaseId;
            Properties = properties;
            Status = status;
            Tags = tags;
            TimeMachineId = timeMachineId;
            TimeMachines = timeMachines;
            TimeZone = timeZone;
            Type = type;
        }
    }
}
