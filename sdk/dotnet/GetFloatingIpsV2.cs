// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetFloatingIpsV2
    {
        /// <summary>
        /// Provides a datasource to retrieve floating IP with floating_ip_uuid .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var floating_ips = Nutanix.GetFloatingIpsV2.Invoke();
        /// 
        ///     var floating_ips_filter = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Filter = "name eq 'floating_ip_example'",
        ///     });
        /// 
        ///     var floating_ips_limit = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Limit = 10,
        ///     });
        /// 
        ///     var floating_ips_filter_limit = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Filter = "name eq 'floating_ip_example'",
        ///         Limit = 10,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFloatingIpsV2Result> InvokeAsync(GetFloatingIpsV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFloatingIpsV2Result>("nutanix:index/getFloatingIpsV2:getFloatingIpsV2", args ?? new GetFloatingIpsV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve floating IP with floating_ip_uuid .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var floating_ips = Nutanix.GetFloatingIpsV2.Invoke();
        /// 
        ///     var floating_ips_filter = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Filter = "name eq 'floating_ip_example'",
        ///     });
        /// 
        ///     var floating_ips_limit = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Limit = 10,
        ///     });
        /// 
        ///     var floating_ips_filter_limit = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Filter = "name eq 'floating_ip_example'",
        ///         Limit = 10,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFloatingIpsV2Result> Invoke(GetFloatingIpsV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFloatingIpsV2Result>("nutanix:index/getFloatingIpsV2:getFloatingIpsV2", args ?? new GetFloatingIpsV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve floating IP with floating_ip_uuid .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var floating_ips = Nutanix.GetFloatingIpsV2.Invoke();
        /// 
        ///     var floating_ips_filter = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Filter = "name eq 'floating_ip_example'",
        ///     });
        /// 
        ///     var floating_ips_limit = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Limit = 10,
        ///     });
        /// 
        ///     var floating_ips_filter_limit = Nutanix.GetFloatingIpsV2.Invoke(new()
        ///     {
        ///         Filter = "name eq 'floating_ip_example'",
        ///         Limit = 10,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFloatingIpsV2Result> Invoke(GetFloatingIpsV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFloatingIpsV2Result>("nutanix:index/getFloatingIpsV2:getFloatingIpsV2", args ?? new GetFloatingIpsV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFloatingIpsV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. The expand can be applied to the following fields:
        /// - externalSubnet
        /// - vpc
        /// - vmNic
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// A URL query parameter that allows clients to filter a collection of resources. The filter can be applied to the following fields:
        /// - externalSubnetReference
        /// - floatingIp/ipv4/value
        /// - floatingIp/ipv6/value
        /// - loadBalancerSessionReference
        /// - name
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. The orderby can be applied to the following fields:
        /// - floatingIp/ipv4/value
        /// - floatingIp/ipv6/value
        /// - name
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.
        /// </summary>
        [Input("page")]
        public int? Page { get; set; }

        public GetFloatingIpsV2Args()
        {
        }
        public static new GetFloatingIpsV2Args Empty => new GetFloatingIpsV2Args();
    }

    public sealed class GetFloatingIpsV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. The expand can be applied to the following fields:
        /// - externalSubnet
        /// - vpc
        /// - vmNic
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// A URL query parameter that allows clients to filter a collection of resources. The filter can be applied to the following fields:
        /// - externalSubnetReference
        /// - floatingIp/ipv4/value
        /// - floatingIp/ipv6/value
        /// - loadBalancerSessionReference
        /// - name
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. The orderby can be applied to the following fields:
        /// - floatingIp/ipv4/value
        /// - floatingIp/ipv6/value
        /// - name
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.
        /// </summary>
        [Input("page")]
        public Input<int>? Page { get; set; }

        public GetFloatingIpsV2InvokeArgs()
        {
        }
        public static new GetFloatingIpsV2InvokeArgs Empty => new GetFloatingIpsV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetFloatingIpsV2Result
    {
        public readonly string? Expand;
        public readonly string? Filter;
        /// <summary>
        /// List of all Floating IPs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpResult> FloatingIps;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? Limit;
        public readonly string? OrderBy;
        public readonly int? Page;

        [OutputConstructor]
        private GetFloatingIpsV2Result(
            string? expand,

            string? filter,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpResult> floatingIps,

            string id,

            int? limit,

            string? orderBy,

            int? page)
        {
            Expand = expand;
            Filter = filter;
            FloatingIps = floatingIps;
            Id = id;
            Limit = limit;
            OrderBy = orderBy;
            Page = page;
        }
    }
}
