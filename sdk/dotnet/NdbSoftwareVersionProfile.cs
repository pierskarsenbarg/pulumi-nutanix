// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    [NutanixResourceType("nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile")]
    public partial class NdbSoftwareVersionProfile : global::Pulumi.CustomResource
    {
        [Output("availableClusterIds")]
        public Output<ImmutableArray<string>> AvailableClusterIds { get; private set; } = null!;

        [Output("dbVersion")]
        public Output<string> DbVersion { get; private set; } = null!;

        [Output("deprecated")]
        public Output<bool> Deprecated { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("engineType")]
        public Output<string> EngineType { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        [Output("postgresDatabases")]
        public Output<ImmutableArray<Outputs.NdbSoftwareVersionProfilePostgresDatabase>> PostgresDatabases { get; private set; } = null!;

        [Output("profileId")]
        public Output<string> ProfileId { get; private set; } = null!;

        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbSoftwareVersionProfileProperty>> Properties { get; private set; } = null!;

        [Output("propertiesMap")]
        public Output<ImmutableDictionary<string, string>> PropertiesMap { get; private set; } = null!;

        [Output("published")]
        public Output<bool> Published { get; private set; } = null!;

        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        [Output("systemProfile")]
        public Output<bool> SystemProfile { get; private set; } = null!;

        [Output("topology")]
        public Output<string> Topology { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        [Output("versionClusterAssociations")]
        public Output<ImmutableArray<Outputs.NdbSoftwareVersionProfileVersionClusterAssociation>> VersionClusterAssociations { get; private set; } = null!;


        /// <summary>
        /// Create a NdbSoftwareVersionProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbSoftwareVersionProfile(string name, NdbSoftwareVersionProfileArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile", name, args ?? new NdbSoftwareVersionProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbSoftwareVersionProfile(string name, Input<string> id, NdbSoftwareVersionProfileState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbSoftwareVersionProfile:NdbSoftwareVersionProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbSoftwareVersionProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbSoftwareVersionProfile Get(string name, Input<string> id, NdbSoftwareVersionProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbSoftwareVersionProfile(name, id, state, options);
        }
    }

    public sealed class NdbSoftwareVersionProfileArgs : global::Pulumi.ResourceArgs
    {
        [Input("availableClusterIds")]
        private InputList<string>? _availableClusterIds;
        public InputList<string> AvailableClusterIds
        {
            get => _availableClusterIds ?? (_availableClusterIds = new InputList<string>());
            set => _availableClusterIds = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("engineType", required: true)]
        public Input<string> EngineType { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("postgresDatabases")]
        private InputList<Inputs.NdbSoftwareVersionProfilePostgresDatabaseArgs>? _postgresDatabases;
        public InputList<Inputs.NdbSoftwareVersionProfilePostgresDatabaseArgs> PostgresDatabases
        {
            get => _postgresDatabases ?? (_postgresDatabases = new InputList<Inputs.NdbSoftwareVersionProfilePostgresDatabaseArgs>());
            set => _postgresDatabases = value;
        }

        [Input("profileId", required: true)]
        public Input<string> ProfileId { get; set; } = null!;

        [Input("status")]
        public Input<string>? Status { get; set; }

        public NdbSoftwareVersionProfileArgs()
        {
        }
        public static new NdbSoftwareVersionProfileArgs Empty => new NdbSoftwareVersionProfileArgs();
    }

    public sealed class NdbSoftwareVersionProfileState : global::Pulumi.ResourceArgs
    {
        [Input("availableClusterIds")]
        private InputList<string>? _availableClusterIds;
        public InputList<string> AvailableClusterIds
        {
            get => _availableClusterIds ?? (_availableClusterIds = new InputList<string>());
            set => _availableClusterIds = value;
        }

        [Input("dbVersion")]
        public Input<string>? DbVersion { get; set; }

        [Input("deprecated")]
        public Input<bool>? Deprecated { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("engineType")]
        public Input<string>? EngineType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("postgresDatabases")]
        private InputList<Inputs.NdbSoftwareVersionProfilePostgresDatabaseGetArgs>? _postgresDatabases;
        public InputList<Inputs.NdbSoftwareVersionProfilePostgresDatabaseGetArgs> PostgresDatabases
        {
            get => _postgresDatabases ?? (_postgresDatabases = new InputList<Inputs.NdbSoftwareVersionProfilePostgresDatabaseGetArgs>());
            set => _postgresDatabases = value;
        }

        [Input("profileId")]
        public Input<string>? ProfileId { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbSoftwareVersionProfilePropertyGetArgs>? _properties;
        public InputList<Inputs.NdbSoftwareVersionProfilePropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbSoftwareVersionProfilePropertyGetArgs>());
            set => _properties = value;
        }

        [Input("propertiesMap")]
        private InputMap<string>? _propertiesMap;
        public InputMap<string> PropertiesMap
        {
            get => _propertiesMap ?? (_propertiesMap = new InputMap<string>());
            set => _propertiesMap = value;
        }

        [Input("published")]
        public Input<bool>? Published { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("systemProfile")]
        public Input<bool>? SystemProfile { get; set; }

        [Input("topology")]
        public Input<string>? Topology { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("versionClusterAssociations")]
        private InputList<Inputs.NdbSoftwareVersionProfileVersionClusterAssociationGetArgs>? _versionClusterAssociations;
        public InputList<Inputs.NdbSoftwareVersionProfileVersionClusterAssociationGetArgs> VersionClusterAssociations
        {
            get => _versionClusterAssociations ?? (_versionClusterAssociations = new InputList<Inputs.NdbSoftwareVersionProfileVersionClusterAssociationGetArgs>());
            set => _versionClusterAssociations = value;
        }

        public NdbSoftwareVersionProfileState()
        {
        }
        public static new NdbSoftwareVersionProfileState Empty => new NdbSoftwareVersionProfileState();
    }
}
