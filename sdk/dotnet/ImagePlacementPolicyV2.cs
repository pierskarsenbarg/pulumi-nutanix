// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Create an image placement policy using the provided request body. Name, placement_type, image_entity_filter and source are mandatory fields to create an policy.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Nutanix.ImagePlacementPolicyV2("example", new()
    ///     {
    ///         ClusterEntityFilters = new[]
    ///         {
    ///             new Nutanix.Inputs.ImagePlacementPolicyV2ClusterEntityFilterArgs
    ///             {
    ///                 CategoryExtIds = new[]
    ///                 {
    ///                     "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
    ///                 },
    ///                 Type = "CATEGORIES_MATCH_ALL",
    ///             },
    ///         },
    ///         Description = "%[2]s",
    ///         ImageEntityFilters = new[]
    ///         {
    ///             new Nutanix.Inputs.ImagePlacementPolicyV2ImageEntityFilterArgs
    ///             {
    ///                 CategoryExtIds = new[]
    ///                 {
    ///                     "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
    ///                 },
    ///                 Type = "CATEGORIES_MATCH_ALL",
    ///             },
    ///         },
    ///         PlacementType = "SOFT",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/imagePlacementPolicyV2:ImagePlacementPolicyV2")]
    public partial class ImagePlacementPolicyV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
        /// </summary>
        [Output("action")]
        public Output<string?> Action { get; private set; } = null!;

        /// <summary>
        /// Category-based entity filter.
        /// </summary>
        [Output("clusterEntityFilters")]
        public Output<ImmutableArray<Outputs.ImagePlacementPolicyV2ClusterEntityFilter>> ClusterEntityFilters { get; private set; } = null!;

        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description of the image placement policy.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
        /// </summary>
        [Output("enforcementState")]
        public Output<string> EnforcementState { get; private set; } = null!;

        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// Category-based entity filter.
        /// </summary>
        [Output("imageEntityFilters")]
        public Output<ImmutableArray<Outputs.ImagePlacementPolicyV2ImageEntityFilter>> ImageEntityFilters { get; private set; } = null!;

        [Output("lastUpdateTime")]
        public Output<string> LastUpdateTime { get; private set; } = null!;

        /// <summary>
        /// Name of the image placement policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("ownerExtId")]
        public Output<string> OwnerExtId { get; private set; } = null!;

        /// <summary>
        /// Type of the image placement policy. Valid values "HARD", "SOFT"
        /// </summary>
        [Output("placementType")]
        public Output<string> PlacementType { get; private set; } = null!;

        [Output("shouldCancelRunningTasks")]
        public Output<bool?> ShouldCancelRunningTasks { get; private set; } = null!;


        /// <summary>
        /// Create a ImagePlacementPolicyV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImagePlacementPolicyV2(string name, ImagePlacementPolicyV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/imagePlacementPolicyV2:ImagePlacementPolicyV2", name, args ?? new ImagePlacementPolicyV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ImagePlacementPolicyV2(string name, Input<string> id, ImagePlacementPolicyV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/imagePlacementPolicyV2:ImagePlacementPolicyV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImagePlacementPolicyV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImagePlacementPolicyV2 Get(string name, Input<string> id, ImagePlacementPolicyV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ImagePlacementPolicyV2(name, id, state, options);
        }
    }

    public sealed class ImagePlacementPolicyV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("clusterEntityFilters", required: true)]
        private InputList<Inputs.ImagePlacementPolicyV2ClusterEntityFilterArgs>? _clusterEntityFilters;

        /// <summary>
        /// Category-based entity filter.
        /// </summary>
        public InputList<Inputs.ImagePlacementPolicyV2ClusterEntityFilterArgs> ClusterEntityFilters
        {
            get => _clusterEntityFilters ?? (_clusterEntityFilters = new InputList<Inputs.ImagePlacementPolicyV2ClusterEntityFilterArgs>());
            set => _clusterEntityFilters = value;
        }

        /// <summary>
        /// Description of the image placement policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
        /// </summary>
        [Input("enforcementState")]
        public Input<string>? EnforcementState { get; set; }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("imageEntityFilters", required: true)]
        private InputList<Inputs.ImagePlacementPolicyV2ImageEntityFilterArgs>? _imageEntityFilters;

        /// <summary>
        /// Category-based entity filter.
        /// </summary>
        public InputList<Inputs.ImagePlacementPolicyV2ImageEntityFilterArgs> ImageEntityFilters
        {
            get => _imageEntityFilters ?? (_imageEntityFilters = new InputList<Inputs.ImagePlacementPolicyV2ImageEntityFilterArgs>());
            set => _imageEntityFilters = value;
        }

        /// <summary>
        /// Name of the image placement policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of the image placement policy. Valid values "HARD", "SOFT"
        /// </summary>
        [Input("placementType", required: true)]
        public Input<string> PlacementType { get; set; } = null!;

        [Input("shouldCancelRunningTasks")]
        public Input<bool>? ShouldCancelRunningTasks { get; set; }

        public ImagePlacementPolicyV2Args()
        {
        }
        public static new ImagePlacementPolicyV2Args Empty => new ImagePlacementPolicyV2Args();
    }

    public sealed class ImagePlacementPolicyV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to be performed on the image placement policy. Valid values "RESUME", "SUSPEND"
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("clusterEntityFilters")]
        private InputList<Inputs.ImagePlacementPolicyV2ClusterEntityFilterGetArgs>? _clusterEntityFilters;

        /// <summary>
        /// Category-based entity filter.
        /// </summary>
        public InputList<Inputs.ImagePlacementPolicyV2ClusterEntityFilterGetArgs> ClusterEntityFilters
        {
            get => _clusterEntityFilters ?? (_clusterEntityFilters = new InputList<Inputs.ImagePlacementPolicyV2ClusterEntityFilterGetArgs>());
            set => _clusterEntityFilters = value;
        }

        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description of the image placement policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enforcement status of the image placement policy. Valid values "ACTIVE", "SUSPENDED"
        /// </summary>
        [Input("enforcementState")]
        public Input<string>? EnforcementState { get; set; }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("imageEntityFilters")]
        private InputList<Inputs.ImagePlacementPolicyV2ImageEntityFilterGetArgs>? _imageEntityFilters;

        /// <summary>
        /// Category-based entity filter.
        /// </summary>
        public InputList<Inputs.ImagePlacementPolicyV2ImageEntityFilterGetArgs> ImageEntityFilters
        {
            get => _imageEntityFilters ?? (_imageEntityFilters = new InputList<Inputs.ImagePlacementPolicyV2ImageEntityFilterGetArgs>());
            set => _imageEntityFilters = value;
        }

        [Input("lastUpdateTime")]
        public Input<string>? LastUpdateTime { get; set; }

        /// <summary>
        /// Name of the image placement policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerExtId")]
        public Input<string>? OwnerExtId { get; set; }

        /// <summary>
        /// Type of the image placement policy. Valid values "HARD", "SOFT"
        /// </summary>
        [Input("placementType")]
        public Input<string>? PlacementType { get; set; }

        [Input("shouldCancelRunningTasks")]
        public Input<bool>? ShouldCancelRunningTasks { get; set; }

        public ImagePlacementPolicyV2State()
        {
        }
        public static new ImagePlacementPolicyV2State Empty => new ImagePlacementPolicyV2State();
    }
}
