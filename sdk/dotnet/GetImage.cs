// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetImage
    {
        /// <summary>
        /// Describes a Image
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("nutanix:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Image
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("nutanix:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Image
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("nutanix:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<Inputs.GetImageCategoryArgs>? _categories;

        /// <summary>
        /// - Categories for the image.
        /// </summary>
        public List<Inputs.GetImageCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetImageCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Represents image UUID
        /// </summary>
        [Input("imageId")]
        public string? ImageId { get; set; }

        /// <summary>
        /// Represents image name
        /// </summary>
        [Input("imageName")]
        public string? ImageName { get; set; }

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private InputList<Inputs.GetImageCategoryInputArgs>? _categories;

        /// <summary>
        /// - Categories for the image.
        /// </summary>
        public InputList<Inputs.GetImageCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetImageCategoryInputArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Represents image UUID
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// Represents image name
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        public readonly string ApiVersion;
        /// <summary>
        /// - The supported CPU architecture for a disk image.
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// - The reference to a availability_zone.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AvailabilityZoneReference;
        /// <summary>
        /// - Categories for the image.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageCategoryResult> Categories;
        /// <summary>
        /// - Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Checksum;
        public readonly string ClusterName;
        public readonly ImmutableArray<Outputs.GetImageClusterReferenceResult> ClusterReferences;
        public readonly string ClusterUuid;
        public readonly ImmutableArray<Outputs.GetImageCurrentClusterReferenceListResult> CurrentClusterReferenceLists;
        /// <summary>
        /// - A description for image.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ImageId;
        public readonly string? ImageName;
        /// <summary>
        /// - The type of image.
        /// </summary>
        public readonly string ImageType;
        /// <summary>
        /// - The image kind metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// - the name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// - The reference to a user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> OwnerReference;
        /// <summary>
        /// - The reference to a project.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ProjectReference;
        /// <summary>
        /// - List of URIs where the raw image data can be accessed.
        /// </summary>
        public readonly ImmutableArray<string> RetrievalUriLists;
        /// <summary>
        /// - The size of the image in bytes.
        /// </summary>
        public readonly int SizeBytes;
        /// <summary>
        /// - The source URI points at the location of the source image which is used to create/update image.
        /// </summary>
        public readonly string SourceUri;
        /// <summary>
        /// - The state of the image.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// - The image version.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Version;

        [OutputConstructor]
        private GetImageResult(
            string apiVersion,

            string architecture,

            ImmutableDictionary<string, string> availabilityZoneReference,

            ImmutableArray<Outputs.GetImageCategoryResult> categories,

            ImmutableDictionary<string, string> checksum,

            string clusterName,

            ImmutableArray<Outputs.GetImageClusterReferenceResult> clusterReferences,

            string clusterUuid,

            ImmutableArray<Outputs.GetImageCurrentClusterReferenceListResult> currentClusterReferenceLists,

            string description,

            string id,

            string? imageId,

            string? imageName,

            string imageType,

            ImmutableDictionary<string, string> metadata,

            string name,

            ImmutableDictionary<string, string> ownerReference,

            ImmutableDictionary<string, string> projectReference,

            ImmutableArray<string> retrievalUriLists,

            int sizeBytes,

            string sourceUri,

            string state,

            ImmutableDictionary<string, string> version)
        {
            ApiVersion = apiVersion;
            Architecture = architecture;
            AvailabilityZoneReference = availabilityZoneReference;
            Categories = categories;
            Checksum = checksum;
            ClusterName = clusterName;
            ClusterReferences = clusterReferences;
            ClusterUuid = clusterUuid;
            CurrentClusterReferenceLists = currentClusterReferenceLists;
            Description = description;
            Id = id;
            ImageId = imageId;
            ImageName = imageName;
            ImageType = imageType;
            Metadata = metadata;
            Name = name;
            OwnerReference = ownerReference;
            ProjectReference = projectReference;
            RetrievalUriLists = retrievalUriLists;
            SizeBytes = sizeBytes;
            SourceUri = sourceUri;
            State = state;
            Version = version;
        }
    }
}
