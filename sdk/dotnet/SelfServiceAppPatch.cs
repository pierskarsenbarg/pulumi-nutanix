// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Run the specified patch on the application by running patch action to update vm configuration, add nics, add disks, add/delete categories.
    /// 
    /// ## Example 1: Update VM Configuration
    /// 
    /// This will run set patch config action in application.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision Application
    ///     var testSelfServiceAppProvision = new Nutanix.SelfServiceAppProvision("testSelfServiceAppProvision", new()
    ///     {
    ///         BpName = "NAME OF BLUEPRINT",
    ///         AppName = "NAME OF APPLICATION",
    ///         AppDescription = "DESCRIPTION OF APPLICATION",
    ///     });
    /// 
    ///     // Run patch config (update config)
    ///     var testSelfServiceAppPatch = new Nutanix.SelfServiceAppPatch("testSelfServiceAppPatch", new()
    ///     {
    ///         AppUuid = testSelfServiceAppProvision.Id,
    ///         PatchName = "NAME OF PATCH ACTION",
    ///         ConfigName = "NAME OF PATCH CONFIG",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example 2: Update VM Configuration with runtime editable
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision Application
    ///     var testSelfServiceAppProvision = new Nutanix.SelfServiceAppProvision("testSelfServiceAppProvision", new()
    ///     {
    ///         BpName = "NAME OF BLUEPRINT",
    ///         AppName = "NAME OF APPLICATION",
    ///         AppDescription = "DESCRIPTION OF APPLICATION",
    ///     });
    /// 
    ///     // Run patch config (update config)
    ///     var testSelfServiceAppPatch = new Nutanix.SelfServiceAppPatch("testSelfServiceAppPatch", new()
    ///     {
    ///         AppUuid = testSelfServiceAppProvision.Id,
    ///         PatchName = "NAME OF PATCH ACTION",
    ///         ConfigName = "NAME OF PATCH CONFIG",
    ///         VmConfigs = new[]
    ///         {
    ///             new Nutanix.Inputs.SelfServiceAppPatchVmConfigArgs
    ///             {
    ///                 MemorySizeMib = "SIZE IN MiB",
    ///                 NumSockets = "vCPU count",
    ///                 NumVcpusPerSocket = "NUMBER OF CORES VCPU",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example 3: Add Category
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision Application
    ///     var testSelfServiceAppProvision = new Nutanix.SelfServiceAppProvision("testSelfServiceAppProvision", new()
    ///     {
    ///         BpName = "NAME OF BLUEPRINT",
    ///         AppName = "NAME OF APPLICATION",
    ///         AppDescription = "DESCRIPTION OF APPLICATION",
    ///     });
    /// 
    ///     // Run patch config (update config)
    ///     var testSelfServiceAppPatch = new Nutanix.SelfServiceAppPatch("testSelfServiceAppPatch", new()
    ///     {
    ///         AppUuid = testSelfServiceAppProvision.Id,
    ///         PatchName = "NAME OF PATCH ACTION",
    ///         ConfigName = "NAME OF PATCH CONFIG",
    ///         Categories = new[]
    ///         {
    ///             new Nutanix.Inputs.SelfServiceAppPatchCategoryArgs
    ///             {
    ///                 Value = "CATEGORY TO BE ADDED (KEY:VALUE PAIR)",
    ///                 Operation = "add",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example 4: Delete Category
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision Application
    ///     var testSelfServiceAppProvision = new Nutanix.SelfServiceAppProvision("testSelfServiceAppProvision", new()
    ///     {
    ///         BpName = "NAME OF BLUEPRINT",
    ///         AppName = "NAME OF APPLICATION",
    ///         AppDescription = "DESCRIPTION OF APPLICATION",
    ///     });
    /// 
    ///     // Run patch config (update config)
    ///     var testSelfServiceAppPatch = new Nutanix.SelfServiceAppPatch("testSelfServiceAppPatch", new()
    ///     {
    ///         AppUuid = testSelfServiceAppProvision.Id,
    ///         PatchName = "NAME OF PATCH ACTION",
    ///         ConfigName = "NAME OF PATCH CONFIG",
    ///         Categories = new[]
    ///         {
    ///             new Nutanix.Inputs.SelfServiceAppPatchCategoryArgs
    ///             {
    ///                 Value = "CATEGORY TO BE ADDED (KEY:VALUE PAIR)",
    ///                 Operation = "delete",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example 5: Add Disk
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision Application
    ///     var testSelfServiceAppProvision = new Nutanix.SelfServiceAppProvision("testSelfServiceAppProvision", new()
    ///     {
    ///         BpName = "NAME OF BLUEPRINT",
    ///         AppName = "NAME OF APPLICATION",
    ///         AppDescription = "DESCRIPTION OF APPLICATION",
    ///     });
    /// 
    ///     // Run patch config (update config)
    ///     var testSelfServiceAppPatch = new Nutanix.SelfServiceAppPatch("testSelfServiceAppPatch", new()
    ///     {
    ///         AppUuid = testSelfServiceAppProvision.Id,
    ///         PatchName = "NAME OF PATCH ACTION",
    ///         ConfigName = "NAME OF PATCH CONFIG",
    ///         Disks = new[]
    ///         {
    ///             new Nutanix.Inputs.SelfServiceAppPatchDiskArgs
    ///             {
    ///                 DiskSizeMib = "SIZE OF DISK IN MiB",
    ///                 Operation = "add",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example 6: Add Nic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision Application
    ///     var testSelfServiceAppProvision = new Nutanix.SelfServiceAppProvision("testSelfServiceAppProvision", new()
    ///     {
    ///         BpName = "NAME OF BLUEPRINT",
    ///         AppName = "NAME OF APPLICATION",
    ///         AppDescription = "DESCRIPTION OF APPLICATION",
    ///     });
    /// 
    ///     // Run patch config (update config)
    ///     var testSelfServiceAppPatch = new Nutanix.SelfServiceAppPatch("testSelfServiceAppPatch", new()
    ///     {
    ///         AppUuid = testSelfServiceAppProvision.Id,
    ///         PatchName = "NAME OF PATCH ACTION",
    ///         ConfigName = "NAME OF PATCH CONFIG",
    ///         Nics = new[]
    ///         {
    ///             new Nutanix.Inputs.SelfServiceAppPatchNicArgs
    ///             {
    ///                 Index = "DUMMY INDEX VALUE",
    ///                 Operation = "add",
    ///                 SubnetUuid = "VALID SUBNET UUID IN PROJECT ATTACHED TO APP",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/selfServiceAppPatch:SelfServiceAppPatch")]
    public partial class SelfServiceAppPatch : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - (Required) The UUID of the application.
        /// </summary>
        [Output("appUuid")]
        public Output<string> AppUuid { get; private set; } = null!;

        [Output("categories")]
        public Output<ImmutableArray<Outputs.SelfServiceAppPatchCategory>> Categories { get; private set; } = null!;

        /// <summary>
        /// - (Required) The name of the patch configuration. (&lt;b&gt;Same as patch_name for SINGLE VM)&lt;/b&gt;
        /// </summary>
        [Output("configName")]
        public Output<string> ConfigName { get; private set; } = null!;

        [Output("disks")]
        public Output<ImmutableArray<Outputs.SelfServiceAppPatchDisk>> Disks { get; private set; } = null!;

        [Output("nics")]
        public Output<ImmutableArray<Outputs.SelfServiceAppPatchNic>> Nics { get; private set; } = null!;

        /// <summary>
        /// - (Required) The name of the patch to be applied. This is used to identify the action name which needs to be executed to update an application.
        /// </summary>
        [Output("patchName")]
        public Output<string> PatchName { get; private set; } = null!;

        /// <summary>
        /// - (Computed) The UUID of the runlog that records the patch operation's execution details.
        /// </summary>
        [Output("runlogUuid")]
        public Output<string> RunlogUuid { get; private set; } = null!;

        [Output("vmConfigs")]
        public Output<ImmutableArray<Outputs.SelfServiceAppPatchVmConfig>> VmConfigs { get; private set; } = null!;


        /// <summary>
        /// Create a SelfServiceAppPatch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SelfServiceAppPatch(string name, SelfServiceAppPatchArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/selfServiceAppPatch:SelfServiceAppPatch", name, args ?? new SelfServiceAppPatchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SelfServiceAppPatch(string name, Input<string> id, SelfServiceAppPatchState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/selfServiceAppPatch:SelfServiceAppPatch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SelfServiceAppPatch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SelfServiceAppPatch Get(string name, Input<string> id, SelfServiceAppPatchState? state = null, CustomResourceOptions? options = null)
        {
            return new SelfServiceAppPatch(name, id, state, options);
        }
    }

    public sealed class SelfServiceAppPatchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Required) The UUID of the application.
        /// </summary>
        [Input("appUuid", required: true)]
        public Input<string> AppUuid { get; set; } = null!;

        [Input("categories")]
        private InputList<Inputs.SelfServiceAppPatchCategoryArgs>? _categories;
        public InputList<Inputs.SelfServiceAppPatchCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.SelfServiceAppPatchCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// - (Required) The name of the patch configuration. (&lt;b&gt;Same as patch_name for SINGLE VM)&lt;/b&gt;
        /// </summary>
        [Input("configName", required: true)]
        public Input<string> ConfigName { get; set; } = null!;

        [Input("disks")]
        private InputList<Inputs.SelfServiceAppPatchDiskArgs>? _disks;
        public InputList<Inputs.SelfServiceAppPatchDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.SelfServiceAppPatchDiskArgs>());
            set => _disks = value;
        }

        [Input("nics")]
        private InputList<Inputs.SelfServiceAppPatchNicArgs>? _nics;
        public InputList<Inputs.SelfServiceAppPatchNicArgs> Nics
        {
            get => _nics ?? (_nics = new InputList<Inputs.SelfServiceAppPatchNicArgs>());
            set => _nics = value;
        }

        /// <summary>
        /// - (Required) The name of the patch to be applied. This is used to identify the action name which needs to be executed to update an application.
        /// </summary>
        [Input("patchName", required: true)]
        public Input<string> PatchName { get; set; } = null!;

        /// <summary>
        /// - (Computed) The UUID of the runlog that records the patch operation's execution details.
        /// </summary>
        [Input("runlogUuid")]
        public Input<string>? RunlogUuid { get; set; }

        [Input("vmConfigs")]
        private InputList<Inputs.SelfServiceAppPatchVmConfigArgs>? _vmConfigs;
        public InputList<Inputs.SelfServiceAppPatchVmConfigArgs> VmConfigs
        {
            get => _vmConfigs ?? (_vmConfigs = new InputList<Inputs.SelfServiceAppPatchVmConfigArgs>());
            set => _vmConfigs = value;
        }

        public SelfServiceAppPatchArgs()
        {
        }
        public static new SelfServiceAppPatchArgs Empty => new SelfServiceAppPatchArgs();
    }

    public sealed class SelfServiceAppPatchState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Required) The UUID of the application.
        /// </summary>
        [Input("appUuid")]
        public Input<string>? AppUuid { get; set; }

        [Input("categories")]
        private InputList<Inputs.SelfServiceAppPatchCategoryGetArgs>? _categories;
        public InputList<Inputs.SelfServiceAppPatchCategoryGetArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.SelfServiceAppPatchCategoryGetArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// - (Required) The name of the patch configuration. (&lt;b&gt;Same as patch_name for SINGLE VM)&lt;/b&gt;
        /// </summary>
        [Input("configName")]
        public Input<string>? ConfigName { get; set; }

        [Input("disks")]
        private InputList<Inputs.SelfServiceAppPatchDiskGetArgs>? _disks;
        public InputList<Inputs.SelfServiceAppPatchDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.SelfServiceAppPatchDiskGetArgs>());
            set => _disks = value;
        }

        [Input("nics")]
        private InputList<Inputs.SelfServiceAppPatchNicGetArgs>? _nics;
        public InputList<Inputs.SelfServiceAppPatchNicGetArgs> Nics
        {
            get => _nics ?? (_nics = new InputList<Inputs.SelfServiceAppPatchNicGetArgs>());
            set => _nics = value;
        }

        /// <summary>
        /// - (Required) The name of the patch to be applied. This is used to identify the action name which needs to be executed to update an application.
        /// </summary>
        [Input("patchName")]
        public Input<string>? PatchName { get; set; }

        /// <summary>
        /// - (Computed) The UUID of the runlog that records the patch operation's execution details.
        /// </summary>
        [Input("runlogUuid")]
        public Input<string>? RunlogUuid { get; set; }

        [Input("vmConfigs")]
        private InputList<Inputs.SelfServiceAppPatchVmConfigGetArgs>? _vmConfigs;
        public InputList<Inputs.SelfServiceAppPatchVmConfigGetArgs> VmConfigs
        {
            get => _vmConfigs ?? (_vmConfigs = new InputList<Inputs.SelfServiceAppPatchVmConfigGetArgs>());
            set => _vmConfigs = value;
        }

        public SelfServiceAppPatchState()
        {
        }
        public static new SelfServiceAppPatchState Empty => new SelfServiceAppPatchState();
    }
}
