// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetVirtualMachine
    {
        /// <summary>
        /// Describes a Virtual Machine
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetVirtualMachineResult> InvokeAsync(GetVirtualMachineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineResult>("nutanix:index/getVirtualMachine:getVirtualMachine", args ?? new GetVirtualMachineArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Virtual Machine
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetVirtualMachineResult> Invoke(GetVirtualMachineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineResult>("nutanix:index/getVirtualMachine:getVirtualMachine", args ?? new GetVirtualMachineInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a Virtual Machine
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetVirtualMachineResult> Invoke(GetVirtualMachineInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineResult>("nutanix:index/getVirtualMachine:getVirtualMachine", args ?? new GetVirtualMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineArgs : global::Pulumi.InvokeArgs
    {
        [Input("bootDeviceDiskAddress")]
        private Dictionary<string, string>? _bootDeviceDiskAddress;

        /// <summary>
        /// - Address of disk to boot from.
        /// </summary>
        public Dictionary<string, string> BootDeviceDiskAddress
        {
            get => _bootDeviceDiskAddress ?? (_bootDeviceDiskAddress = new Dictionary<string, string>());
            set => _bootDeviceDiskAddress = value;
        }

        /// <summary>
        /// - MAC address of nic to boot from.
        /// </summary>
        [Input("bootDeviceMacAddress")]
        public string? BootDeviceMacAddress { get; set; }

        [Input("categories")]
        private List<Inputs.GetVirtualMachineCategoryArgs>? _categories;

        /// <summary>
        /// - Categories for the vm.
        /// </summary>
        public List<Inputs.GetVirtualMachineCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetVirtualMachineCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Represents virtual machine UUID
        /// </summary>
        [Input("vmId", required: true)]
        public string VmId { get; set; } = null!;

        public GetVirtualMachineArgs()
        {
        }
        public static new GetVirtualMachineArgs Empty => new GetVirtualMachineArgs();
    }

    public sealed class GetVirtualMachineInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bootDeviceDiskAddress")]
        private InputMap<string>? _bootDeviceDiskAddress;

        /// <summary>
        /// - Address of disk to boot from.
        /// </summary>
        public InputMap<string> BootDeviceDiskAddress
        {
            get => _bootDeviceDiskAddress ?? (_bootDeviceDiskAddress = new InputMap<string>());
            set => _bootDeviceDiskAddress = value;
        }

        /// <summary>
        /// - MAC address of nic to boot from.
        /// </summary>
        [Input("bootDeviceMacAddress")]
        public Input<string>? BootDeviceMacAddress { get; set; }

        [Input("categories")]
        private InputList<Inputs.GetVirtualMachineCategoryInputArgs>? _categories;

        /// <summary>
        /// - Categories for the vm.
        /// </summary>
        public InputList<Inputs.GetVirtualMachineCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetVirtualMachineCategoryInputArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Represents virtual machine UUID
        /// </summary>
        [Input("vmId", required: true)]
        public Input<string> VmId { get; set; } = null!;

        public GetVirtualMachineInvokeArgs()
        {
        }
        public static new GetVirtualMachineInvokeArgs Empty => new GetVirtualMachineInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineResult
    {
        /// <summary>
        /// The version of the API.
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// - The reference to a availability_zone.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AvailabilityZoneReference;
        /// <summary>
        /// - Address of disk to boot from.
        /// </summary>
        public readonly ImmutableDictionary<string, string> BootDeviceDiskAddress;
        /// <summary>
        /// - MAC address of nic to boot from.
        /// </summary>
        public readonly string BootDeviceMacAddress;
        /// <summary>
        /// - Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
        /// </summary>
        public readonly ImmutableArray<string> BootDeviceOrderLists;
        /// <summary>
        /// - Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like BootDevice and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
        /// </summary>
        public readonly string BootType;
        /// <summary>
        /// - Categories for the vm.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualMachineCategoryResult> Categories;
        /// <summary>
        /// - The name of the reference to the cluster.
        /// </summary>
        public readonly string ClusterName;
        public readonly string ClusterUuid;
        /// <summary>
        /// - A description for vm.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Disks attached to the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualMachineDiskListResult> DiskLists;
        public readonly bool EnableCpuPassthrough;
        /// <summary>
        /// - Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
        /// </summary>
        public readonly bool EnableScriptExec;
        /// <summary>
        /// - GPUs attached to the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualMachineGpuListResult> GpuLists;
        /// <summary>
        /// - Generic key value pair used for custom attributes in cloud init.
        /// </summary>
        public readonly ImmutableDictionary<string, string> GuestCustomizationCloudInitCustomKeyValues;
        /// <summary>
        /// The contents of the MetaData configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
        /// </summary>
        public readonly string GuestCustomizationCloudInitMetaData;
        /// <summary>
        /// - The contents of the UserData configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
        /// </summary>
        public readonly string GuestCustomizationCloudInitUserData;
        /// <summary>
        /// - Flag to allow override of customization by deployer.
        /// </summary>
        public readonly bool GuestCustomizationIsOverridable;
        /// <summary>
        /// - VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or CloudInit should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.
        /// </summary>
        public readonly ImmutableDictionary<string, string> GuestCustomizationSysprep;
        /// <summary>
        /// - Generic key value pair used for custom attributes in sysprep.
        /// </summary>
        public readonly ImmutableDictionary<string, string> GuestCustomizationSysprepCustomKeyValues;
        /// <summary>
        /// - Guest OS Identifier. For ESX, refer to VMware documentation [link](https://www.vmware.com/support/developer/converter-sdk/conv43_apireference/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html) for the list of guest OS identifiers.
        /// </summary>
        public readonly string GuestOsId;
        /// <summary>
        /// - VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
        /// </summary>
        public readonly string HardwareClockTimezone;
        /// <summary>
        /// - Reference to a host.
        /// </summary>
        public readonly ImmutableDictionary<string, string> HostReference;
        /// <summary>
        /// - The hypervisor type for the hypervisor the VM is hosted on.
        /// </summary>
        public readonly string HypervisorType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsVcpuHardPinned;
        /// <summary>
        /// - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// - Memory size in MiB.
        /// </summary>
        public readonly int MemorySizeMib;
        public readonly ImmutableArray<Outputs.GetVirtualMachineMessageListResult> MessageLists;
        /// <summary>
        /// - The vm kind metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// - the name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// - Credentials to login server.
        /// </summary>
        public readonly ImmutableDictionary<string, string> NgtCredentials;
        /// <summary>
        /// Application names that are enabled.
        /// </summary>
        public readonly ImmutableArray<string> NgtEnabledCapabilityLists;
        /// <summary>
        /// - NICs attached to the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualMachineNicListResult> NicLists;
        /// <summary>
        /// - Number of vCPU sockets.
        /// </summary>
        public readonly int NumSockets;
        /// <summary>
        /// - Number of vCPUs per socket.
        /// </summary>
        public readonly int NumVcpusPerSocket;
        /// <summary>
        /// - Number of vNUMA nodes. 0 means vNUMA is disabled.
        /// </summary>
        public readonly int NumVnumaNodes;
        /// <summary>
        /// - Information regarding Nutanix Guest Tools.
        /// </summary>
        public readonly ImmutableDictionary<string, string> NutanixGuestTools;
        /// <summary>
        /// - The reference to a user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> OwnerReference;
        public readonly ImmutableDictionary<string, string> ParentReference;
        /// <summary>
        /// - The current or desired power state of the VM. (Options : ON , OFF)
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// - Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state. Power state mechanism (ACPI/GUEST/HARD).
        /// </summary>
        public readonly string PowerStateMechanism;
        /// <summary>
        /// - The reference to a project.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ProjectReference;
        /// <summary>
        /// - (Optional) Serial Ports configured on the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualMachineSerialPortListResult> SerialPortLists;
        /// <summary>
        /// -  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
        /// </summary>
        public readonly bool ShouldFailOnScriptFailure;
        /// <summary>
        /// - Nutanix Guest Tools is enabled or not.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// - Indicates whether VGA console should be enabled or not.
        /// </summary>
        public readonly bool VgaConsoleEnabled;
        public readonly string VmId;

        [OutputConstructor]
        private GetVirtualMachineResult(
            string apiVersion,

            ImmutableDictionary<string, string> availabilityZoneReference,

            ImmutableDictionary<string, string> bootDeviceDiskAddress,

            string bootDeviceMacAddress,

            ImmutableArray<string> bootDeviceOrderLists,

            string bootType,

            ImmutableArray<Outputs.GetVirtualMachineCategoryResult> categories,

            string clusterName,

            string clusterUuid,

            string description,

            ImmutableArray<Outputs.GetVirtualMachineDiskListResult> diskLists,

            bool enableCpuPassthrough,

            bool enableScriptExec,

            ImmutableArray<Outputs.GetVirtualMachineGpuListResult> gpuLists,

            ImmutableDictionary<string, string> guestCustomizationCloudInitCustomKeyValues,

            string guestCustomizationCloudInitMetaData,

            string guestCustomizationCloudInitUserData,

            bool guestCustomizationIsOverridable,

            ImmutableDictionary<string, string> guestCustomizationSysprep,

            ImmutableDictionary<string, string> guestCustomizationSysprepCustomKeyValues,

            string guestOsId,

            string hardwareClockTimezone,

            ImmutableDictionary<string, string> hostReference,

            string hypervisorType,

            string id,

            bool isVcpuHardPinned,

            string machineType,

            int memorySizeMib,

            ImmutableArray<Outputs.GetVirtualMachineMessageListResult> messageLists,

            ImmutableDictionary<string, string> metadata,

            string name,

            ImmutableDictionary<string, string> ngtCredentials,

            ImmutableArray<string> ngtEnabledCapabilityLists,

            ImmutableArray<Outputs.GetVirtualMachineNicListResult> nicLists,

            int numSockets,

            int numVcpusPerSocket,

            int numVnumaNodes,

            ImmutableDictionary<string, string> nutanixGuestTools,

            ImmutableDictionary<string, string> ownerReference,

            ImmutableDictionary<string, string> parentReference,

            string powerState,

            string powerStateMechanism,

            ImmutableDictionary<string, string> projectReference,

            ImmutableArray<Outputs.GetVirtualMachineSerialPortListResult> serialPortLists,

            bool shouldFailOnScriptFailure,

            string state,

            bool vgaConsoleEnabled,

            string vmId)
        {
            ApiVersion = apiVersion;
            AvailabilityZoneReference = availabilityZoneReference;
            BootDeviceDiskAddress = bootDeviceDiskAddress;
            BootDeviceMacAddress = bootDeviceMacAddress;
            BootDeviceOrderLists = bootDeviceOrderLists;
            BootType = bootType;
            Categories = categories;
            ClusterName = clusterName;
            ClusterUuid = clusterUuid;
            Description = description;
            DiskLists = diskLists;
            EnableCpuPassthrough = enableCpuPassthrough;
            EnableScriptExec = enableScriptExec;
            GpuLists = gpuLists;
            GuestCustomizationCloudInitCustomKeyValues = guestCustomizationCloudInitCustomKeyValues;
            GuestCustomizationCloudInitMetaData = guestCustomizationCloudInitMetaData;
            GuestCustomizationCloudInitUserData = guestCustomizationCloudInitUserData;
            GuestCustomizationIsOverridable = guestCustomizationIsOverridable;
            GuestCustomizationSysprep = guestCustomizationSysprep;
            GuestCustomizationSysprepCustomKeyValues = guestCustomizationSysprepCustomKeyValues;
            GuestOsId = guestOsId;
            HardwareClockTimezone = hardwareClockTimezone;
            HostReference = hostReference;
            HypervisorType = hypervisorType;
            Id = id;
            IsVcpuHardPinned = isVcpuHardPinned;
            MachineType = machineType;
            MemorySizeMib = memorySizeMib;
            MessageLists = messageLists;
            Metadata = metadata;
            Name = name;
            NgtCredentials = ngtCredentials;
            NgtEnabledCapabilityLists = ngtEnabledCapabilityLists;
            NicLists = nicLists;
            NumSockets = numSockets;
            NumVcpusPerSocket = numVcpusPerSocket;
            NumVnumaNodes = numVnumaNodes;
            NutanixGuestTools = nutanixGuestTools;
            OwnerReference = ownerReference;
            ParentReference = parentReference;
            PowerState = powerState;
            PowerStateMechanism = powerStateMechanism;
            ProjectReference = projectReference;
            SerialPortLists = serialPortLists;
            ShouldFailOnScriptFailure = shouldFailOnScriptFailure;
            State = state;
            VgaConsoleEnabled = vgaConsoleEnabled;
            VmId = vmId;
        }
    }
}
