// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetSubnets
    {
        /// <summary>
        /// Describes a list of subnets
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnets = Nutanix.GetSubnets.Invoke();
        /// 
        ///     var test = Nutanix.GetSubnets.Invoke(new()
        ///     {
        ///         Metadatas = new[]
        ///         {
        ///             new Nutanix.Inputs.GetSubnetsMetadataInputArgs
        ///             {
        ///                 Filter = "name==vlan0_test_2",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSubnetsResult> InvokeAsync(GetSubnetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetsResult>("nutanix:index/getSubnets:getSubnets", args ?? new GetSubnetsArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a list of subnets
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnets = Nutanix.GetSubnets.Invoke();
        /// 
        ///     var test = Nutanix.GetSubnets.Invoke(new()
        ///     {
        ///         Metadatas = new[]
        ///         {
        ///             new Nutanix.Inputs.GetSubnetsMetadataInputArgs
        ///             {
        ///                 Filter = "name==vlan0_test_2",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubnetsResult> Invoke(GetSubnetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetsResult>("nutanix:index/getSubnets:getSubnets", args ?? new GetSubnetsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a list of subnets
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnets = Nutanix.GetSubnets.Invoke();
        /// 
        ///     var test = Nutanix.GetSubnets.Invoke(new()
        ///     {
        ///         Metadatas = new[]
        ///         {
        ///             new Nutanix.Inputs.GetSubnetsMetadataInputArgs
        ///             {
        ///                 Filter = "name==vlan0_test_2",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubnetsResult> Invoke(GetSubnetsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetsResult>("nutanix:index/getSubnets:getSubnets", args ?? new GetSubnetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetsArgs : global::Pulumi.InvokeArgs
    {
        [Input("metadatas")]
        private List<Inputs.GetSubnetsMetadataArgs>? _metadatas;

        /// <summary>
        /// The subnet kind metadata.
        /// </summary>
        public List<Inputs.GetSubnetsMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new List<Inputs.GetSubnetsMetadataArgs>());
            set => _metadatas = value;
        }

        public GetSubnetsArgs()
        {
        }
        public static new GetSubnetsArgs Empty => new GetSubnetsArgs();
    }

    public sealed class GetSubnetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("metadatas")]
        private InputList<Inputs.GetSubnetsMetadataInputArgs>? _metadatas;

        /// <summary>
        /// The subnet kind metadata.
        /// </summary>
        public InputList<Inputs.GetSubnetsMetadataInputArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.GetSubnetsMetadataInputArgs>());
            set => _metadatas = value;
        }

        public GetSubnetsInvokeArgs()
        {
        }
        public static new GetSubnetsInvokeArgs Empty => new GetSubnetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetsResult
    {
        /// <summary>
        /// version of the API
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// List of Subnets
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetsEntityResult> Entities;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The subnet kind metadata.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetsMetadataResult> Metadatas;

        [OutputConstructor]
        private GetSubnetsResult(
            string apiVersion,

            ImmutableArray<Outputs.GetSubnetsEntityResult> entities,

            string id,

            ImmutableArray<Outputs.GetSubnetsMetadataResult> metadatas)
        {
            ApiVersion = apiVersion;
            Entities = entities;
            Id = id;
            Metadatas = metadatas;
        }
    }
}
