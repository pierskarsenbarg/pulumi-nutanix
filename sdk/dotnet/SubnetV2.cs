// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    [NutanixResourceType("nutanix:index/subnetV2:SubnetV2")]
    public partial class SubnetV2 : global::Pulumi.CustomResource
    {
        [Output("bridgeName")]
        public Output<string> BridgeName { get; private set; } = null!;

        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        [Output("clusterReference")]
        public Output<string> ClusterReference { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("dhcpOptions")]
        public Output<ImmutableArray<Outputs.SubnetV2DhcpOption>> DhcpOptions { get; private set; } = null!;

        [Output("dynamicIpAddresses")]
        public Output<ImmutableArray<Outputs.SubnetV2DynamicIpAddress>> DynamicIpAddresses { get; private set; } = null!;

        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        [Output("hypervisorType")]
        public Output<string> HypervisorType { get; private set; } = null!;

        [Output("ipConfigs")]
        public Output<ImmutableArray<Outputs.SubnetV2IpConfig>> IpConfigs { get; private set; } = null!;

        [Output("ipPrefix")]
        public Output<string> IpPrefix { get; private set; } = null!;

        [Output("ipUsages")]
        public Output<ImmutableArray<Outputs.SubnetV2IpUsage>> IpUsages { get; private set; } = null!;

        [Output("isAdvancedNetworking")]
        public Output<bool> IsAdvancedNetworking { get; private set; } = null!;

        [Output("isExternal")]
        public Output<bool> IsExternal { get; private set; } = null!;

        [Output("isNatEnabled")]
        public Output<bool> IsNatEnabled { get; private set; } = null!;

        [Output("links")]
        public Output<ImmutableArray<Outputs.SubnetV2Link>> Links { get; private set; } = null!;

        [Output("migrationState")]
        public Output<string> MigrationState { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkFunctionChainReference")]
        public Output<string> NetworkFunctionChainReference { get; private set; } = null!;

        [Output("networkId")]
        public Output<int?> NetworkId { get; private set; } = null!;

        [Output("reservedIpAddresses")]
        public Output<ImmutableArray<Outputs.SubnetV2ReservedIpAddress>> ReservedIpAddresses { get; private set; } = null!;

        [Output("subnetType")]
        public Output<string> SubnetType { get; private set; } = null!;

        [Output("virtualSwitchReference")]
        public Output<string> VirtualSwitchReference { get; private set; } = null!;

        [Output("virtualSwitches")]
        public Output<ImmutableArray<Outputs.SubnetV2VirtualSwitch>> VirtualSwitches { get; private set; } = null!;

        [Output("vpcReference")]
        public Output<string> VpcReference { get; private set; } = null!;

        [Output("vpcs")]
        public Output<ImmutableArray<Outputs.SubnetV2Vpc>> Vpcs { get; private set; } = null!;


        /// <summary>
        /// Create a SubnetV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubnetV2(string name, SubnetV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/subnetV2:SubnetV2", name, args ?? new SubnetV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private SubnetV2(string name, Input<string> id, SubnetV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/subnetV2:SubnetV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubnetV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubnetV2 Get(string name, Input<string> id, SubnetV2State? state = null, CustomResourceOptions? options = null)
        {
            return new SubnetV2(name, id, state, options);
        }
    }

    public sealed class SubnetV2Args : global::Pulumi.ResourceArgs
    {
        [Input("bridgeName")]
        public Input<string>? BridgeName { get; set; }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("clusterReference")]
        public Input<string>? ClusterReference { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpOptions")]
        private InputList<Inputs.SubnetV2DhcpOptionArgs>? _dhcpOptions;
        public InputList<Inputs.SubnetV2DhcpOptionArgs> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputList<Inputs.SubnetV2DhcpOptionArgs>());
            set => _dhcpOptions = value;
        }

        [Input("dynamicIpAddresses")]
        private InputList<Inputs.SubnetV2DynamicIpAddressArgs>? _dynamicIpAddresses;
        public InputList<Inputs.SubnetV2DynamicIpAddressArgs> DynamicIpAddresses
        {
            get => _dynamicIpAddresses ?? (_dynamicIpAddresses = new InputList<Inputs.SubnetV2DynamicIpAddressArgs>());
            set => _dynamicIpAddresses = value;
        }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("hypervisorType")]
        public Input<string>? HypervisorType { get; set; }

        [Input("ipConfigs")]
        private InputList<Inputs.SubnetV2IpConfigArgs>? _ipConfigs;
        public InputList<Inputs.SubnetV2IpConfigArgs> IpConfigs
        {
            get => _ipConfigs ?? (_ipConfigs = new InputList<Inputs.SubnetV2IpConfigArgs>());
            set => _ipConfigs = value;
        }

        [Input("ipPrefix")]
        public Input<string>? IpPrefix { get; set; }

        [Input("ipUsages")]
        private InputList<Inputs.SubnetV2IpUsageArgs>? _ipUsages;
        public InputList<Inputs.SubnetV2IpUsageArgs> IpUsages
        {
            get => _ipUsages ?? (_ipUsages = new InputList<Inputs.SubnetV2IpUsageArgs>());
            set => _ipUsages = value;
        }

        [Input("isAdvancedNetworking")]
        public Input<bool>? IsAdvancedNetworking { get; set; }

        [Input("isExternal")]
        public Input<bool>? IsExternal { get; set; }

        [Input("isNatEnabled")]
        public Input<bool>? IsNatEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkFunctionChainReference")]
        public Input<string>? NetworkFunctionChainReference { get; set; }

        [Input("networkId")]
        public Input<int>? NetworkId { get; set; }

        [Input("reservedIpAddresses")]
        private InputList<Inputs.SubnetV2ReservedIpAddressArgs>? _reservedIpAddresses;
        public InputList<Inputs.SubnetV2ReservedIpAddressArgs> ReservedIpAddresses
        {
            get => _reservedIpAddresses ?? (_reservedIpAddresses = new InputList<Inputs.SubnetV2ReservedIpAddressArgs>());
            set => _reservedIpAddresses = value;
        }

        [Input("subnetType", required: true)]
        public Input<string> SubnetType { get; set; } = null!;

        [Input("virtualSwitchReference")]
        public Input<string>? VirtualSwitchReference { get; set; }

        [Input("virtualSwitches")]
        private InputList<Inputs.SubnetV2VirtualSwitchArgs>? _virtualSwitches;
        public InputList<Inputs.SubnetV2VirtualSwitchArgs> VirtualSwitches
        {
            get => _virtualSwitches ?? (_virtualSwitches = new InputList<Inputs.SubnetV2VirtualSwitchArgs>());
            set => _virtualSwitches = value;
        }

        [Input("vpcReference")]
        public Input<string>? VpcReference { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.SubnetV2VpcArgs>? _vpcs;
        public InputList<Inputs.SubnetV2VpcArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.SubnetV2VpcArgs>());
            set => _vpcs = value;
        }

        public SubnetV2Args()
        {
        }
        public static new SubnetV2Args Empty => new SubnetV2Args();
    }

    public sealed class SubnetV2State : global::Pulumi.ResourceArgs
    {
        [Input("bridgeName")]
        public Input<string>? BridgeName { get; set; }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("clusterReference")]
        public Input<string>? ClusterReference { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpOptions")]
        private InputList<Inputs.SubnetV2DhcpOptionGetArgs>? _dhcpOptions;
        public InputList<Inputs.SubnetV2DhcpOptionGetArgs> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputList<Inputs.SubnetV2DhcpOptionGetArgs>());
            set => _dhcpOptions = value;
        }

        [Input("dynamicIpAddresses")]
        private InputList<Inputs.SubnetV2DynamicIpAddressGetArgs>? _dynamicIpAddresses;
        public InputList<Inputs.SubnetV2DynamicIpAddressGetArgs> DynamicIpAddresses
        {
            get => _dynamicIpAddresses ?? (_dynamicIpAddresses = new InputList<Inputs.SubnetV2DynamicIpAddressGetArgs>());
            set => _dynamicIpAddresses = value;
        }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("hypervisorType")]
        public Input<string>? HypervisorType { get; set; }

        [Input("ipConfigs")]
        private InputList<Inputs.SubnetV2IpConfigGetArgs>? _ipConfigs;
        public InputList<Inputs.SubnetV2IpConfigGetArgs> IpConfigs
        {
            get => _ipConfigs ?? (_ipConfigs = new InputList<Inputs.SubnetV2IpConfigGetArgs>());
            set => _ipConfigs = value;
        }

        [Input("ipPrefix")]
        public Input<string>? IpPrefix { get; set; }

        [Input("ipUsages")]
        private InputList<Inputs.SubnetV2IpUsageGetArgs>? _ipUsages;
        public InputList<Inputs.SubnetV2IpUsageGetArgs> IpUsages
        {
            get => _ipUsages ?? (_ipUsages = new InputList<Inputs.SubnetV2IpUsageGetArgs>());
            set => _ipUsages = value;
        }

        [Input("isAdvancedNetworking")]
        public Input<bool>? IsAdvancedNetworking { get; set; }

        [Input("isExternal")]
        public Input<bool>? IsExternal { get; set; }

        [Input("isNatEnabled")]
        public Input<bool>? IsNatEnabled { get; set; }

        [Input("links")]
        private InputList<Inputs.SubnetV2LinkGetArgs>? _links;
        public InputList<Inputs.SubnetV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.SubnetV2LinkGetArgs>());
            set => _links = value;
        }

        [Input("migrationState")]
        public Input<string>? MigrationState { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkFunctionChainReference")]
        public Input<string>? NetworkFunctionChainReference { get; set; }

        [Input("networkId")]
        public Input<int>? NetworkId { get; set; }

        [Input("reservedIpAddresses")]
        private InputList<Inputs.SubnetV2ReservedIpAddressGetArgs>? _reservedIpAddresses;
        public InputList<Inputs.SubnetV2ReservedIpAddressGetArgs> ReservedIpAddresses
        {
            get => _reservedIpAddresses ?? (_reservedIpAddresses = new InputList<Inputs.SubnetV2ReservedIpAddressGetArgs>());
            set => _reservedIpAddresses = value;
        }

        [Input("subnetType")]
        public Input<string>? SubnetType { get; set; }

        [Input("virtualSwitchReference")]
        public Input<string>? VirtualSwitchReference { get; set; }

        [Input("virtualSwitches")]
        private InputList<Inputs.SubnetV2VirtualSwitchGetArgs>? _virtualSwitches;
        public InputList<Inputs.SubnetV2VirtualSwitchGetArgs> VirtualSwitches
        {
            get => _virtualSwitches ?? (_virtualSwitches = new InputList<Inputs.SubnetV2VirtualSwitchGetArgs>());
            set => _virtualSwitches = value;
        }

        [Input("vpcReference")]
        public Input<string>? VpcReference { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.SubnetV2VpcGetArgs>? _vpcs;
        public InputList<Inputs.SubnetV2VpcGetArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.SubnetV2VpcGetArgs>());
            set => _vpcs = value;
        }

        public SubnetV2State()
        {
        }
        public static new SubnetV2State Empty => new SubnetV2State();
    }
}
