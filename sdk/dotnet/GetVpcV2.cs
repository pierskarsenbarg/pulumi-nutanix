// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetVpcV2
    {
        /// <summary>
        /// Provides a datasource to retrieve VPC with VpcUuid .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_vpc = Nutanix.GetVpcV2.Invoke(new()
        ///     {
        ///         ExtId = "8a938cc5-282b-48c4-81be-de22de145d07",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpcV2Result> InvokeAsync(GetVpcV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcV2Result>("nutanix:index/getVpcV2:getVpcV2", args ?? new GetVpcV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve VPC with VpcUuid .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_vpc = Nutanix.GetVpcV2.Invoke(new()
        ///     {
        ///         ExtId = "8a938cc5-282b-48c4-81be-de22de145d07",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcV2Result> Invoke(GetVpcV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcV2Result>("nutanix:index/getVpcV2:getVpcV2", args ?? new GetVpcV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve VPC with VpcUuid .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_vpc = Nutanix.GetVpcV2.Invoke(new()
        ///     {
        ///         ExtId = "8a938cc5-282b-48c4-81be-de22de145d07",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcV2Result> Invoke(GetVpcV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcV2Result>("nutanix:index/getVpcV2:getVpcV2", args ?? new GetVpcV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// vpc UUID
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetVpcV2Args()
        {
        }
        public static new GetVpcV2Args Empty => new GetVpcV2Args();
    }

    public sealed class GetVpcV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// vpc UUID
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetVpcV2InvokeArgs()
        {
        }
        public static new GetVpcV2InvokeArgs Empty => new GetVpcV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcV2Result
    {
        /// <summary>
        /// List of DHCP options to be configured.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcV2CommonDhcpOptionResult> CommonDhcpOptions;
        /// <summary>
        /// Description of the VPC.
        /// </summary>
        public readonly string Description;
        public readonly string ExtId;
        /// <summary>
        /// External routing domain associated with this route table
        /// </summary>
        public readonly string ExternalRoutingDomainReference;
        /// <summary>
        /// List of external subnets that the VPC is attached to.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcV2ExternalSubnetResult> ExternalSubnets;
        /// <summary>
        /// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcV2ExternallyRoutablePrefixResult> ExternallyRoutablePrefixes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcV2LinkResult> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcV2MetadataResult> Metadatas;
        /// <summary>
        /// Name of the VPC.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of IP Addresses used for SNAT.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcV2SnatIpResult> SnatIps;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Type of VPC.
        /// </summary>
        public readonly string VpcType;

        [OutputConstructor]
        private GetVpcV2Result(
            ImmutableArray<Outputs.GetVpcV2CommonDhcpOptionResult> commonDhcpOptions,

            string description,

            string extId,

            string externalRoutingDomainReference,

            ImmutableArray<Outputs.GetVpcV2ExternalSubnetResult> externalSubnets,

            ImmutableArray<Outputs.GetVpcV2ExternallyRoutablePrefixResult> externallyRoutablePrefixes,

            string id,

            ImmutableArray<Outputs.GetVpcV2LinkResult> links,

            ImmutableArray<Outputs.GetVpcV2MetadataResult> metadatas,

            string name,

            ImmutableArray<Outputs.GetVpcV2SnatIpResult> snatIps,

            string tenantId,

            string vpcType)
        {
            CommonDhcpOptions = commonDhcpOptions;
            Description = description;
            ExtId = extId;
            ExternalRoutingDomainReference = externalRoutingDomainReference;
            ExternalSubnets = externalSubnets;
            ExternallyRoutablePrefixes = externallyRoutablePrefixes;
            Id = id;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            SnatIps = snatIps;
            TenantId = tenantId;
            VpcType = vpcType;
        }
    }
}
