// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetObjectStoreV2
    {
        /// <summary>
        /// Get an Object store for the provided UUID
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetObjectStoreV2.Invoke(new()
        ///     {
        ///         ExtId = "95eb5f66-f547-4aea-9af8-b580e2060693",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetObjectStoreV2Result> InvokeAsync(GetObjectStoreV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetObjectStoreV2Result>("nutanix:index/getObjectStoreV2:getObjectStoreV2", args ?? new GetObjectStoreV2Args(), options.WithDefaults());

        /// <summary>
        /// Get an Object store for the provided UUID
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetObjectStoreV2.Invoke(new()
        ///     {
        ///         ExtId = "95eb5f66-f547-4aea-9af8-b580e2060693",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetObjectStoreV2Result> Invoke(GetObjectStoreV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetObjectStoreV2Result>("nutanix:index/getObjectStoreV2:getObjectStoreV2", args ?? new GetObjectStoreV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an Object store for the provided UUID
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetObjectStoreV2.Invoke(new()
        ///     {
        ///         ExtId = "95eb5f66-f547-4aea-9af8-b580e2060693",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetObjectStoreV2Result> Invoke(GetObjectStoreV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetObjectStoreV2Result>("nutanix:index/getObjectStoreV2:getObjectStoreV2", args ?? new GetObjectStoreV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetObjectStoreV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) The UUID of the Object store.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        /// <summary>
        /// - The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
        /// </summary>
        [Input("numWorkerNodes")]
        public int? NumWorkerNodes { get; set; }

        public GetObjectStoreV2Args()
        {
        }
        public static new GetObjectStoreV2Args Empty => new GetObjectStoreV2Args();
    }

    public sealed class GetObjectStoreV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) The UUID of the Object store.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        /// <summary>
        /// - The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
        /// </summary>
        [Input("numWorkerNodes")]
        public Input<int>? NumWorkerNodes { get; set; }

        public GetObjectStoreV2InvokeArgs()
        {
        }
        public static new GetObjectStoreV2InvokeArgs Empty => new GetObjectStoreV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetObjectStoreV2Result
    {
        /// <summary>
        /// - A list of the UUIDs of the certificates of an Object store.
        /// </summary>
        public readonly ImmutableArray<string> CertificateExtIds;
        /// <summary>
        /// - UUID of the AHV or ESXi cluster.
        /// </summary>
        public readonly string ClusterExtId;
        /// <summary>
        /// - The time when the Object store was created.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// - The deployment version of the Object store.
        /// </summary>
        public readonly string DeploymentVersion;
        /// <summary>
        /// - A brief description of the Object store.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// - The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - The time when the Object store was last updated.
        /// </summary>
        public readonly string LastUpdateTime;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetObjectStoreV2LinkResult> Links;
        /// <summary>
        /// - Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetObjectStoreV2MetadataResult> Metadatas;
        /// <summary>
        /// - The name of the Object store.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// - The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
        /// </summary>
        public readonly int NumWorkerNodes;
        /// <summary>
        /// - A list of static IP addresses used as public IPs to access the Object store.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetObjectStoreV2PublicNetworkIpResult> PublicNetworkIps;
        /// <summary>
        /// - Public network reference of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        public readonly string PublicNetworkReference;
        /// <summary>
        /// - The region in which the Object store is deployed.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// - Enum for the state of the Object store.
        /// | Enum                                   | Description                                                     |
        /// |----------------------------------------|-----------------------------------------------------------------|
        /// | `DEPLOYING_OBJECT_STORE`             | The Object store is being deployed.                             |
        /// | `OBJECT_STORE_DEPLOYMENT_FAILED`     | The Object store deployment has failed.                         |
        /// | `DELETING_OBJECT_STORE`              | A deployed Object store is being deleted.                       |
        /// | `OBJECT_STORE_OPERATION_FAILED`      | There was an error while performing an operation on the Object store. |
        /// | `UNDEPLOYED_OBJECT_STORE`            | The Object store is not deployed.                               |
        /// | `OBJECT_STORE_OPERATION_PENDING`     | There is an ongoing operation on the Object store.              |
        /// | `OBJECT_STORE_AVAILABLE`            | There are no ongoing operations on the deployed Object store.   |
        /// | `OBJECT_STORE_CERT_CREATION_FAILED`  | Creating the Object store certificate has failed.               |
        /// | `CREATING_OBJECT_STORE_CERT`         | A certificate is being created for the Object store.            |
        /// | `OBJECT_STORE_DELETION_FAILED`       | There was an error deleting the Object store.                   |
        /// </summary>
        public readonly string State;
        /// <summary>
        /// - An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetObjectStoreV2StorageNetworkDnsIpResult> StorageNetworkDnsIps;
        /// <summary>
        /// - Reference to the Storage Network of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
        /// </summary>
        public readonly string StorageNetworkReference;
        /// <summary>
        /// - An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetObjectStoreV2StorageNetworkVipResult> StorageNetworkVips;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// - Size of the Object store in GiB.
        /// </summary>
        public readonly int TotalCapacityGib;

        [OutputConstructor]
        private GetObjectStoreV2Result(
            ImmutableArray<string> certificateExtIds,

            string clusterExtId,

            string creationTime,

            string deploymentVersion,

            string description,

            string domain,

            string extId,

            string id,

            string lastUpdateTime,

            ImmutableArray<Outputs.GetObjectStoreV2LinkResult> links,

            ImmutableArray<Outputs.GetObjectStoreV2MetadataResult> metadatas,

            string name,

            int numWorkerNodes,

            ImmutableArray<Outputs.GetObjectStoreV2PublicNetworkIpResult> publicNetworkIps,

            string publicNetworkReference,

            string region,

            string state,

            ImmutableArray<Outputs.GetObjectStoreV2StorageNetworkDnsIpResult> storageNetworkDnsIps,

            string storageNetworkReference,

            ImmutableArray<Outputs.GetObjectStoreV2StorageNetworkVipResult> storageNetworkVips,

            string tenantId,

            int totalCapacityGib)
        {
            CertificateExtIds = certificateExtIds;
            ClusterExtId = clusterExtId;
            CreationTime = creationTime;
            DeploymentVersion = deploymentVersion;
            Description = description;
            Domain = domain;
            ExtId = extId;
            Id = id;
            LastUpdateTime = lastUpdateTime;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            NumWorkerNodes = numWorkerNodes;
            PublicNetworkIps = publicNetworkIps;
            PublicNetworkReference = publicNetworkReference;
            Region = region;
            State = state;
            StorageNetworkDnsIps = storageNetworkDnsIps;
            StorageNetworkReference = storageNetworkReference;
            StorageNetworkVips = storageNetworkVips;
            TenantId = tenantId;
            TotalCapacityGib = totalCapacityGib;
        }
    }
}
