// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetImagePlacementPolicyV2
    {
        /// <summary>
        /// Retrieve the image placement policy details for the provided external identifier.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ipp = Nutanix.GetImagePlacementPolicyV2.Invoke(new()
        ///     {
        ///         ExtId = "cf96e27a-4e52-4cec-b563-d0b25413cc4a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetImagePlacementPolicyV2Result> InvokeAsync(GetImagePlacementPolicyV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagePlacementPolicyV2Result>("nutanix:index/getImagePlacementPolicyV2:getImagePlacementPolicyV2", args ?? new GetImagePlacementPolicyV2Args(), options.WithDefaults());

        /// <summary>
        /// Retrieve the image placement policy details for the provided external identifier.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ipp = Nutanix.GetImagePlacementPolicyV2.Invoke(new()
        ///     {
        ///         ExtId = "cf96e27a-4e52-4cec-b563-d0b25413cc4a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagePlacementPolicyV2Result> Invoke(GetImagePlacementPolicyV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagePlacementPolicyV2Result>("nutanix:index/getImagePlacementPolicyV2:getImagePlacementPolicyV2", args ?? new GetImagePlacementPolicyV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the image placement policy details for the provided external identifier.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ipp = Nutanix.GetImagePlacementPolicyV2.Invoke(new()
        ///     {
        ///         ExtId = "cf96e27a-4e52-4cec-b563-d0b25413cc4a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagePlacementPolicyV2Result> Invoke(GetImagePlacementPolicyV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagePlacementPolicyV2Result>("nutanix:index/getImagePlacementPolicyV2:getImagePlacementPolicyV2", args ?? new GetImagePlacementPolicyV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagePlacementPolicyV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The external identifier of an image placement policy.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetImagePlacementPolicyV2Args()
        {
        }
        public static new GetImagePlacementPolicyV2Args Empty => new GetImagePlacementPolicyV2Args();
    }

    public sealed class GetImagePlacementPolicyV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The external identifier of an image placement policy.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetImagePlacementPolicyV2InvokeArgs()
        {
        }
        public static new GetImagePlacementPolicyV2InvokeArgs Empty => new GetImagePlacementPolicyV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetImagePlacementPolicyV2Result
    {
        /// <summary>
        /// (Required) Category-based entity filter.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagePlacementPolicyV2ClusterEntityFilterResult> ClusterEntityFilters;
        public readonly string CreateTime;
        /// <summary>
        /// (Optional) Description of the image placement policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Optional) Enforcement status of the image placement policy. Valid values:
        /// - ACTIVE: The image placement policy is being actively enforced.
        /// - SUSPENDED: The policy enforcement for image placement is suspended.
        /// </summary>
        public readonly string EnforcementState;
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required) Category-based entity filter.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagePlacementPolicyV2ImageEntityFilterResult> ImageEntityFilters;
        public readonly string LastUpdateTime;
        /// <summary>
        /// (Required) Name of the image placement policy.
        /// </summary>
        public readonly string Name;
        public readonly string OwnerExtId;
        /// <summary>
        /// (Required) Type of the image placement policy. Valid values:
        /// - HARD: Hard placement policy. Images can only be placed on clusters enforced by the image placement policy.
        /// - SOFT: Soft placement policy. Images can be placed on clusters apart from those enforced by the image placement policy.
        /// </summary>
        public readonly string PlacementType;

        [OutputConstructor]
        private GetImagePlacementPolicyV2Result(
            ImmutableArray<Outputs.GetImagePlacementPolicyV2ClusterEntityFilterResult> clusterEntityFilters,

            string createTime,

            string description,

            string enforcementState,

            string extId,

            string id,

            ImmutableArray<Outputs.GetImagePlacementPolicyV2ImageEntityFilterResult> imageEntityFilters,

            string lastUpdateTime,

            string name,

            string ownerExtId,

            string placementType)
        {
            ClusterEntityFilters = clusterEntityFilters;
            CreateTime = createTime;
            Description = description;
            EnforcementState = enforcementState;
            ExtId = extId;
            Id = id;
            ImageEntityFilters = imageEntityFilters;
            LastUpdateTime = lastUpdateTime;
            Name = name;
            OwnerExtId = ownerExtId;
            PlacementType = placementType;
        }
    }
}
