// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetPcV2
    {
        /// <summary>
        /// Fetches the attributes associated with the domain manager (Prism Central) resource based on the provided external identifier. It includes attributes like config, network, node and other information such as size, environment and resource specifications.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_2 = Nutanix.GetPcV2.Invoke(new()
        ///     {
        ///         ExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPcV2Result> InvokeAsync(GetPcV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPcV2Result>("nutanix:index/getPcV2:getPcV2", args ?? new GetPcV2Args(), options.WithDefaults());

        /// <summary>
        /// Fetches the attributes associated with the domain manager (Prism Central) resource based on the provided external identifier. It includes attributes like config, network, node and other information such as size, environment and resource specifications.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_2 = Nutanix.GetPcV2.Invoke(new()
        ///     {
        ///         ExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPcV2Result> Invoke(GetPcV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPcV2Result>("nutanix:index/getPcV2:getPcV2", args ?? new GetPcV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches the attributes associated with the domain manager (Prism Central) resource based on the provided external identifier. It includes attributes like config, network, node and other information such as size, environment and resource specifications.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_2 = Nutanix.GetPcV2.Invoke(new()
        ///     {
        ///         ExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPcV2Result> Invoke(GetPcV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPcV2Result>("nutanix:index/getPcV2:getPcV2", args ?? new GetPcV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPcV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) The external identifier of the domain manager (Prism Central) entity.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        /// <summary>
        /// - This configuration enables Prism Central to be deployed in scale-out mode.
        /// </summary>
        [Input("shouldEnableHighAvailability")]
        public bool? ShouldEnableHighAvailability { get; set; }

        public GetPcV2Args()
        {
        }
        public static new GetPcV2Args Empty => new GetPcV2Args();
    }

    public sealed class GetPcV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) The external identifier of the domain manager (Prism Central) entity.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        /// <summary>
        /// - This configuration enables Prism Central to be deployed in scale-out mode.
        /// </summary>
        [Input("shouldEnableHighAvailability")]
        public Input<bool>? ShouldEnableHighAvailability { get; set; }

        public GetPcV2InvokeArgs()
        {
        }
        public static new GetPcV2InvokeArgs Empty => new GetPcV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetPcV2Result
    {
        /// <summary>
        /// - Domain manager (Prism Central) cluster configuration details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPcV2ConfigResult> Configs;
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// - The external identifier of the cluster hosting the domain manager (Prism Central) instance.
        /// </summary>
        public readonly string HostingClusterExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - Boolean value indicating if the domain manager (Prism Central) is registered with the hosting cluster, that is, Prism Element.
        /// </summary>
        public readonly bool IsRegisteredWithHostingCluster;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPcV2LinkResult> Links;
        /// <summary>
        /// - Domain manager (Prism Central) network configuration details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPcV2NetworkResult> Networks;
        /// <summary>
        /// - Domain manager (Prism Central) nodes external identifier.
        /// </summary>
        public readonly ImmutableArray<string> NodeExtIds;
        /// <summary>
        /// - This configuration enables Prism Central to be deployed in scale-out mode.
        /// </summary>
        public readonly bool? ShouldEnableHighAvailability;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetPcV2Result(
            ImmutableArray<Outputs.GetPcV2ConfigResult> configs,

            string extId,

            string hostingClusterExtId,

            string id,

            bool isRegisteredWithHostingCluster,

            ImmutableArray<Outputs.GetPcV2LinkResult> links,

            ImmutableArray<Outputs.GetPcV2NetworkResult> networks,

            ImmutableArray<string> nodeExtIds,

            bool? shouldEnableHighAvailability,

            string tenantId)
        {
            Configs = configs;
            ExtId = extId;
            HostingClusterExtId = hostingClusterExtId;
            Id = id;
            IsRegisteredWithHostingCluster = isRegisteredWithHostingCluster;
            Links = links;
            Networks = networks;
            NodeExtIds = nodeExtIds;
            ShouldEnableHighAvailability = shouldEnableHighAvailability;
            TenantId = tenantId;
        }
    }
}
