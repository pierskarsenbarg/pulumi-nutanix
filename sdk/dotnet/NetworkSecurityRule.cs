// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a Nutanix network security rule resource to Create a network security rule.
    /// 
    /// &gt; NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow
    /// 
    /// ## Example Usage
    /// ### Isolation Rule Example
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var isolation = new Nutanix.NetworkSecurityRule("isolation", new Nutanix.NetworkSecurityRuleArgs
    ///         {
    ///             Description = "Isolation Rule Example",
    ///             IsolationRuleAction = "APPLY",
    ///             IsolationRuleFirstEntityFilterKindLists = 
    ///             {
    ///                 "vm",
    ///             },
    ///             IsolationRuleFirstEntityFilterParams = 
    ///             {
    ///                 new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs
    ///                 {
    ///                     Name = "Environment",
    ///                     Values = 
    ///                     {
    ///                         "Dev",
    ///                     },
    ///                 },
    ///             },
    ///             IsolationRuleFirstEntityFilterType = "CATEGORIES_MATCH_ALL",
    ///             IsolationRuleSecondEntityFilterKindLists = 
    ///             {
    ///                 "vm",
    ///             },
    ///             IsolationRuleSecondEntityFilterParams = 
    ///             {
    ///                 new Nutanix.Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs
    ///                 {
    ///                     Name = "Environment",
    ///                     Values = 
    ///                     {
    ///                         "Production",
    ///                     },
    ///                 },
    ///             },
    ///             IsolationRuleSecondEntityFilterType = "CATEGORIES_MATCH_ALL",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Usage with service and address groups
    /// ```csharp
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var service1 = new Nutanix.ServiceGroup("service1", new Nutanix.ServiceGroupArgs
    ///         {
    ///             Description = "test",
    ///             ServiceLists = 
    ///             {
    ///                 new Nutanix.Inputs.ServiceGroupServiceListArgs
    ///                 {
    ///                     Protocol = "TCP",
    ///                     TcpPortRangeLists = 
    ///                     {
    ///                         new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs
    ///                         {
    ///                             StartPort = 22,
    ///                             EndPort = 22,
    ///                         },
    ///                         new Nutanix.Inputs.ServiceGroupServiceListTcpPortRangeListArgs
    ///                         {
    ///                             StartPort = 2222,
    ///                             EndPort = 2222,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var address1 = new Nutanix.AddressGroup("address1", new Nutanix.AddressGroupArgs
    ///         {
    ///             Description = "test",
    ///             IpAddressBlockLists = 
    ///             {
    ///                 new Nutanix.Inputs.AddressGroupIpAddressBlockListArgs
    ///                 {
    ///                     Ip = "10.0.0.0",
    ///                     PrefixLength = 24,
    ///                 },
    ///             },
    ///         });
    ///         var ad_group_user_1 = new Nutanix.CategoryValue("ad-group-user-1", new Nutanix.CategoryValueArgs
    ///         {
    ///             Description = "group user category value",
    ///             Value = "AD",
    ///         });
    ///         var vDI = new Nutanix.NetworkSecurityRule("vDI", new Nutanix.NetworkSecurityRuleArgs
    ///         {
    ///             AdRuleAction = "APPLY",
    ///             Description = "test",
    ///             AdRuleInboundAllowLists = 
    ///             {
    ///                 new Nutanix.Inputs.NetworkSecurityRuleAdRuleInboundAllowListArgs
    ///                 {
    ///                     IpSubnet = "10.0.0.0",
    ///                     IpSubnetPrefixLength = "8",
    ///                     PeerSpecificationType = "IP_SUBNET",
    ///                     Protocol = "ALL",
    ///                 },
    ///             },
    ///             AdRuleTargetGroupDefaultInternalPolicy = "DENY_ALL",
    ///             AdRuleTargetGroupFilterKindLists = 
    ///             {
    ///                 "vm",
    ///             },
    ///             AdRuleTargetGroupFilterParams = 
    ///             {
    ///                 new Nutanix.Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs
    ///                 {
    ///                     Name = "AD",
    ///                     Values = 
    ///                     {
    ///                         "AD",
    ///                     },
    ///                 },
    ///             },
    ///             AdRuleTargetGroupFilterType = "CATEGORIES_MATCH_ALL",
    ///             AdRuleTargetGroupPeerSpecificationType = "FILTER",
    ///             AdRuleOutboundAllowLists = 
    ///             {
    ///                 new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListArgs
    ///                 {
    ///                     PeerSpecificationType = "ALL",
    ///                     ServiceGroupLists = 
    ///                     {
    ///                         new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs
    ///                         {
    ///                             Kind = "service_group",
    ///                             Uuid = service1.Id,
    ///                         },
    ///                     },
    ///                     AddressGroupInclusionLists = 
    ///                     {
    ///                         new Nutanix.Inputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs
    ///                         {
    ///                             Kind = "address_group",
    ///                             Uuid = address1.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 ad_group_user_1,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/networkSecurityRule:NetworkSecurityRule")]
    public partial class NetworkSecurityRule : Pulumi.CustomResource
    {
        [Output("adRuleAction")]
        public Output<string> AdRuleAction { get; private set; } = null!;

        [Output("adRuleInboundAllowLists")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleAdRuleInboundAllowList>> AdRuleInboundAllowLists { get; private set; } = null!;

        [Output("adRuleOutboundAllowLists")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleAdRuleOutboundAllowList>> AdRuleOutboundAllowLists { get; private set; } = null!;

        [Output("adRuleTargetGroupDefaultInternalPolicy")]
        public Output<string?> AdRuleTargetGroupDefaultInternalPolicy { get; private set; } = null!;

        [Output("adRuleTargetGroupFilterKindLists")]
        public Output<ImmutableArray<string>> AdRuleTargetGroupFilterKindLists { get; private set; } = null!;

        [Output("adRuleTargetGroupFilterParams")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleAdRuleTargetGroupFilterParam>> AdRuleTargetGroupFilterParams { get; private set; } = null!;

        [Output("adRuleTargetGroupFilterType")]
        public Output<string> AdRuleTargetGroupFilterType { get; private set; } = null!;

        [Output("adRuleTargetGroupPeerSpecificationType")]
        public Output<string?> AdRuleTargetGroupPeerSpecificationType { get; private set; } = null!;

        [Output("allowIpv6Traffic")]
        public Output<bool> AllowIpv6Traffic { get; private set; } = null!;

        /// <summary>
        /// The version of the API.
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        [Output("appRuleAction")]
        public Output<string> AppRuleAction { get; private set; } = null!;

        [Output("appRuleInboundAllowLists")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleAppRuleInboundAllowList>> AppRuleInboundAllowLists { get; private set; } = null!;

        [Output("appRuleOutboundAllowLists")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleAppRuleOutboundAllowList>> AppRuleOutboundAllowLists { get; private set; } = null!;

        [Output("appRuleTargetGroupDefaultInternalPolicy")]
        public Output<string?> AppRuleTargetGroupDefaultInternalPolicy { get; private set; } = null!;

        [Output("appRuleTargetGroupFilterKindLists")]
        public Output<ImmutableArray<string>> AppRuleTargetGroupFilterKindLists { get; private set; } = null!;

        [Output("appRuleTargetGroupFilterParams")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleAppRuleTargetGroupFilterParam>> AppRuleTargetGroupFilterParams { get; private set; } = null!;

        [Output("appRuleTargetGroupFilterType")]
        public Output<string> AppRuleTargetGroupFilterType { get; private set; } = null!;

        [Output("appRuleTargetGroupPeerSpecificationType")]
        public Output<string?> AppRuleTargetGroupPeerSpecificationType { get; private set; } = null!;

        [Output("categories")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleCategory>> Categories { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("isPolicyHitlogEnabled")]
        public Output<bool> IsPolicyHitlogEnabled { get; private set; } = null!;

        [Output("isolationRuleAction")]
        public Output<string> IsolationRuleAction { get; private set; } = null!;

        [Output("isolationRuleFirstEntityFilterKindLists")]
        public Output<ImmutableArray<string>> IsolationRuleFirstEntityFilterKindLists { get; private set; } = null!;

        [Output("isolationRuleFirstEntityFilterParams")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParam>> IsolationRuleFirstEntityFilterParams { get; private set; } = null!;

        [Output("isolationRuleFirstEntityFilterType")]
        public Output<string> IsolationRuleFirstEntityFilterType { get; private set; } = null!;

        [Output("isolationRuleSecondEntityFilterKindLists")]
        public Output<ImmutableArray<string>> IsolationRuleSecondEntityFilterKindLists { get; private set; } = null!;

        [Output("isolationRuleSecondEntityFilterParams")]
        public Output<ImmutableArray<Outputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParam>> IsolationRuleSecondEntityFilterParams { get; private set; } = null!;

        [Output("isolationRuleSecondEntityFilterType")]
        public Output<string> IsolationRuleSecondEntityFilterType { get; private set; } = null!;

        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("ownerReference")]
        public Output<ImmutableDictionary<string, string>> OwnerReference { get; private set; } = null!;

        [Output("projectReference")]
        public Output<ImmutableDictionary<string, string>> ProjectReference { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkSecurityRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkSecurityRule(string name, NetworkSecurityRuleArgs? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/networkSecurityRule:NetworkSecurityRule", name, args ?? new NetworkSecurityRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkSecurityRule(string name, Input<string> id, NetworkSecurityRuleState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/networkSecurityRule:NetworkSecurityRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/pierskarsenbarg/pulumi-nutanix/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkSecurityRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkSecurityRule Get(string name, Input<string> id, NetworkSecurityRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkSecurityRule(name, id, state, options);
        }
    }

    public sealed class NetworkSecurityRuleArgs : Pulumi.ResourceArgs
    {
        [Input("adRuleAction")]
        public Input<string>? AdRuleAction { get; set; }

        [Input("adRuleInboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAdRuleInboundAllowListArgs>? _adRuleInboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAdRuleInboundAllowListArgs> AdRuleInboundAllowLists
        {
            get => _adRuleInboundAllowLists ?? (_adRuleInboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAdRuleInboundAllowListArgs>());
            set => _adRuleInboundAllowLists = value;
        }

        [Input("adRuleOutboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAdRuleOutboundAllowListArgs>? _adRuleOutboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAdRuleOutboundAllowListArgs> AdRuleOutboundAllowLists
        {
            get => _adRuleOutboundAllowLists ?? (_adRuleOutboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAdRuleOutboundAllowListArgs>());
            set => _adRuleOutboundAllowLists = value;
        }

        [Input("adRuleTargetGroupDefaultInternalPolicy")]
        public Input<string>? AdRuleTargetGroupDefaultInternalPolicy { get; set; }

        [Input("adRuleTargetGroupFilterKindLists")]
        private InputList<string>? _adRuleTargetGroupFilterKindLists;
        public InputList<string> AdRuleTargetGroupFilterKindLists
        {
            get => _adRuleTargetGroupFilterKindLists ?? (_adRuleTargetGroupFilterKindLists = new InputList<string>());
            set => _adRuleTargetGroupFilterKindLists = value;
        }

        [Input("adRuleTargetGroupFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs>? _adRuleTargetGroupFilterParams;
        public InputList<Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs> AdRuleTargetGroupFilterParams
        {
            get => _adRuleTargetGroupFilterParams ?? (_adRuleTargetGroupFilterParams = new InputList<Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs>());
            set => _adRuleTargetGroupFilterParams = value;
        }

        [Input("adRuleTargetGroupFilterType")]
        public Input<string>? AdRuleTargetGroupFilterType { get; set; }

        [Input("adRuleTargetGroupPeerSpecificationType")]
        public Input<string>? AdRuleTargetGroupPeerSpecificationType { get; set; }

        [Input("allowIpv6Traffic")]
        public Input<bool>? AllowIpv6Traffic { get; set; }

        [Input("appRuleAction")]
        public Input<string>? AppRuleAction { get; set; }

        [Input("appRuleInboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAppRuleInboundAllowListArgs>? _appRuleInboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAppRuleInboundAllowListArgs> AppRuleInboundAllowLists
        {
            get => _appRuleInboundAllowLists ?? (_appRuleInboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAppRuleInboundAllowListArgs>());
            set => _appRuleInboundAllowLists = value;
        }

        [Input("appRuleOutboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAppRuleOutboundAllowListArgs>? _appRuleOutboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAppRuleOutboundAllowListArgs> AppRuleOutboundAllowLists
        {
            get => _appRuleOutboundAllowLists ?? (_appRuleOutboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAppRuleOutboundAllowListArgs>());
            set => _appRuleOutboundAllowLists = value;
        }

        [Input("appRuleTargetGroupDefaultInternalPolicy")]
        public Input<string>? AppRuleTargetGroupDefaultInternalPolicy { get; set; }

        [Input("appRuleTargetGroupFilterKindLists")]
        private InputList<string>? _appRuleTargetGroupFilterKindLists;
        public InputList<string> AppRuleTargetGroupFilterKindLists
        {
            get => _appRuleTargetGroupFilterKindLists ?? (_appRuleTargetGroupFilterKindLists = new InputList<string>());
            set => _appRuleTargetGroupFilterKindLists = value;
        }

        [Input("appRuleTargetGroupFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs>? _appRuleTargetGroupFilterParams;
        public InputList<Inputs.NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs> AppRuleTargetGroupFilterParams
        {
            get => _appRuleTargetGroupFilterParams ?? (_appRuleTargetGroupFilterParams = new InputList<Inputs.NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs>());
            set => _appRuleTargetGroupFilterParams = value;
        }

        [Input("appRuleTargetGroupFilterType")]
        public Input<string>? AppRuleTargetGroupFilterType { get; set; }

        [Input("appRuleTargetGroupPeerSpecificationType")]
        public Input<string>? AppRuleTargetGroupPeerSpecificationType { get; set; }

        [Input("categories")]
        private InputList<Inputs.NetworkSecurityRuleCategoryArgs>? _categories;
        public InputList<Inputs.NetworkSecurityRuleCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.NetworkSecurityRuleCategoryArgs>());
            set => _categories = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("isPolicyHitlogEnabled")]
        public Input<bool>? IsPolicyHitlogEnabled { get; set; }

        [Input("isolationRuleAction")]
        public Input<string>? IsolationRuleAction { get; set; }

        [Input("isolationRuleFirstEntityFilterKindLists")]
        private InputList<string>? _isolationRuleFirstEntityFilterKindLists;
        public InputList<string> IsolationRuleFirstEntityFilterKindLists
        {
            get => _isolationRuleFirstEntityFilterKindLists ?? (_isolationRuleFirstEntityFilterKindLists = new InputList<string>());
            set => _isolationRuleFirstEntityFilterKindLists = value;
        }

        [Input("isolationRuleFirstEntityFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs>? _isolationRuleFirstEntityFilterParams;
        public InputList<Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs> IsolationRuleFirstEntityFilterParams
        {
            get => _isolationRuleFirstEntityFilterParams ?? (_isolationRuleFirstEntityFilterParams = new InputList<Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs>());
            set => _isolationRuleFirstEntityFilterParams = value;
        }

        [Input("isolationRuleFirstEntityFilterType")]
        public Input<string>? IsolationRuleFirstEntityFilterType { get; set; }

        [Input("isolationRuleSecondEntityFilterKindLists")]
        private InputList<string>? _isolationRuleSecondEntityFilterKindLists;
        public InputList<string> IsolationRuleSecondEntityFilterKindLists
        {
            get => _isolationRuleSecondEntityFilterKindLists ?? (_isolationRuleSecondEntityFilterKindLists = new InputList<string>());
            set => _isolationRuleSecondEntityFilterKindLists = value;
        }

        [Input("isolationRuleSecondEntityFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs>? _isolationRuleSecondEntityFilterParams;
        public InputList<Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs> IsolationRuleSecondEntityFilterParams
        {
            get => _isolationRuleSecondEntityFilterParams ?? (_isolationRuleSecondEntityFilterParams = new InputList<Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs>());
            set => _isolationRuleSecondEntityFilterParams = value;
        }

        [Input("isolationRuleSecondEntityFilterType")]
        public Input<string>? IsolationRuleSecondEntityFilterType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        public NetworkSecurityRuleArgs()
        {
        }
    }

    public sealed class NetworkSecurityRuleState : Pulumi.ResourceArgs
    {
        [Input("adRuleAction")]
        public Input<string>? AdRuleAction { get; set; }

        [Input("adRuleInboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAdRuleInboundAllowListGetArgs>? _adRuleInboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAdRuleInboundAllowListGetArgs> AdRuleInboundAllowLists
        {
            get => _adRuleInboundAllowLists ?? (_adRuleInboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAdRuleInboundAllowListGetArgs>());
            set => _adRuleInboundAllowLists = value;
        }

        [Input("adRuleOutboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAdRuleOutboundAllowListGetArgs>? _adRuleOutboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAdRuleOutboundAllowListGetArgs> AdRuleOutboundAllowLists
        {
            get => _adRuleOutboundAllowLists ?? (_adRuleOutboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAdRuleOutboundAllowListGetArgs>());
            set => _adRuleOutboundAllowLists = value;
        }

        [Input("adRuleTargetGroupDefaultInternalPolicy")]
        public Input<string>? AdRuleTargetGroupDefaultInternalPolicy { get; set; }

        [Input("adRuleTargetGroupFilterKindLists")]
        private InputList<string>? _adRuleTargetGroupFilterKindLists;
        public InputList<string> AdRuleTargetGroupFilterKindLists
        {
            get => _adRuleTargetGroupFilterKindLists ?? (_adRuleTargetGroupFilterKindLists = new InputList<string>());
            set => _adRuleTargetGroupFilterKindLists = value;
        }

        [Input("adRuleTargetGroupFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamGetArgs>? _adRuleTargetGroupFilterParams;
        public InputList<Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamGetArgs> AdRuleTargetGroupFilterParams
        {
            get => _adRuleTargetGroupFilterParams ?? (_adRuleTargetGroupFilterParams = new InputList<Inputs.NetworkSecurityRuleAdRuleTargetGroupFilterParamGetArgs>());
            set => _adRuleTargetGroupFilterParams = value;
        }

        [Input("adRuleTargetGroupFilterType")]
        public Input<string>? AdRuleTargetGroupFilterType { get; set; }

        [Input("adRuleTargetGroupPeerSpecificationType")]
        public Input<string>? AdRuleTargetGroupPeerSpecificationType { get; set; }

        [Input("allowIpv6Traffic")]
        public Input<bool>? AllowIpv6Traffic { get; set; }

        /// <summary>
        /// The version of the API.
        /// </summary>
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("appRuleAction")]
        public Input<string>? AppRuleAction { get; set; }

        [Input("appRuleInboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAppRuleInboundAllowListGetArgs>? _appRuleInboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAppRuleInboundAllowListGetArgs> AppRuleInboundAllowLists
        {
            get => _appRuleInboundAllowLists ?? (_appRuleInboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAppRuleInboundAllowListGetArgs>());
            set => _appRuleInboundAllowLists = value;
        }

        [Input("appRuleOutboundAllowLists")]
        private InputList<Inputs.NetworkSecurityRuleAppRuleOutboundAllowListGetArgs>? _appRuleOutboundAllowLists;
        public InputList<Inputs.NetworkSecurityRuleAppRuleOutboundAllowListGetArgs> AppRuleOutboundAllowLists
        {
            get => _appRuleOutboundAllowLists ?? (_appRuleOutboundAllowLists = new InputList<Inputs.NetworkSecurityRuleAppRuleOutboundAllowListGetArgs>());
            set => _appRuleOutboundAllowLists = value;
        }

        [Input("appRuleTargetGroupDefaultInternalPolicy")]
        public Input<string>? AppRuleTargetGroupDefaultInternalPolicy { get; set; }

        [Input("appRuleTargetGroupFilterKindLists")]
        private InputList<string>? _appRuleTargetGroupFilterKindLists;
        public InputList<string> AppRuleTargetGroupFilterKindLists
        {
            get => _appRuleTargetGroupFilterKindLists ?? (_appRuleTargetGroupFilterKindLists = new InputList<string>());
            set => _appRuleTargetGroupFilterKindLists = value;
        }

        [Input("appRuleTargetGroupFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleAppRuleTargetGroupFilterParamGetArgs>? _appRuleTargetGroupFilterParams;
        public InputList<Inputs.NetworkSecurityRuleAppRuleTargetGroupFilterParamGetArgs> AppRuleTargetGroupFilterParams
        {
            get => _appRuleTargetGroupFilterParams ?? (_appRuleTargetGroupFilterParams = new InputList<Inputs.NetworkSecurityRuleAppRuleTargetGroupFilterParamGetArgs>());
            set => _appRuleTargetGroupFilterParams = value;
        }

        [Input("appRuleTargetGroupFilterType")]
        public Input<string>? AppRuleTargetGroupFilterType { get; set; }

        [Input("appRuleTargetGroupPeerSpecificationType")]
        public Input<string>? AppRuleTargetGroupPeerSpecificationType { get; set; }

        [Input("categories")]
        private InputList<Inputs.NetworkSecurityRuleCategoryGetArgs>? _categories;
        public InputList<Inputs.NetworkSecurityRuleCategoryGetArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.NetworkSecurityRuleCategoryGetArgs>());
            set => _categories = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("isPolicyHitlogEnabled")]
        public Input<bool>? IsPolicyHitlogEnabled { get; set; }

        [Input("isolationRuleAction")]
        public Input<string>? IsolationRuleAction { get; set; }

        [Input("isolationRuleFirstEntityFilterKindLists")]
        private InputList<string>? _isolationRuleFirstEntityFilterKindLists;
        public InputList<string> IsolationRuleFirstEntityFilterKindLists
        {
            get => _isolationRuleFirstEntityFilterKindLists ?? (_isolationRuleFirstEntityFilterKindLists = new InputList<string>());
            set => _isolationRuleFirstEntityFilterKindLists = value;
        }

        [Input("isolationRuleFirstEntityFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamGetArgs>? _isolationRuleFirstEntityFilterParams;
        public InputList<Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamGetArgs> IsolationRuleFirstEntityFilterParams
        {
            get => _isolationRuleFirstEntityFilterParams ?? (_isolationRuleFirstEntityFilterParams = new InputList<Inputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParamGetArgs>());
            set => _isolationRuleFirstEntityFilterParams = value;
        }

        [Input("isolationRuleFirstEntityFilterType")]
        public Input<string>? IsolationRuleFirstEntityFilterType { get; set; }

        [Input("isolationRuleSecondEntityFilterKindLists")]
        private InputList<string>? _isolationRuleSecondEntityFilterKindLists;
        public InputList<string> IsolationRuleSecondEntityFilterKindLists
        {
            get => _isolationRuleSecondEntityFilterKindLists ?? (_isolationRuleSecondEntityFilterKindLists = new InputList<string>());
            set => _isolationRuleSecondEntityFilterKindLists = value;
        }

        [Input("isolationRuleSecondEntityFilterParams")]
        private InputList<Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamGetArgs>? _isolationRuleSecondEntityFilterParams;
        public InputList<Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamGetArgs> IsolationRuleSecondEntityFilterParams
        {
            get => _isolationRuleSecondEntityFilterParams ?? (_isolationRuleSecondEntityFilterParams = new InputList<Inputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParamGetArgs>());
            set => _isolationRuleSecondEntityFilterParams = value;
        }

        [Input("isolationRuleSecondEntityFilterType")]
        public Input<string>? IsolationRuleSecondEntityFilterType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ownerReference")]
        private InputMap<string>? _ownerReference;
        public InputMap<string> OwnerReference
        {
            get => _ownerReference ?? (_ownerReference = new InputMap<string>());
            set => _ownerReference = value;
        }

        [Input("projectReference")]
        private InputMap<string>? _projectReference;
        public InputMap<string> ProjectReference
        {
            get => _projectReference ?? (_projectReference = new InputMap<string>());
            set => _projectReference = value;
        }

        public NetworkSecurityRuleState()
        {
        }
    }
}
