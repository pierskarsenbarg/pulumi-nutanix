// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNetworkSecurityPolicyV2
    {
        /// <summary>
        /// Get a Network Security Policy by ExtID
        /// </summary>
        public static Task<GetNetworkSecurityPolicyV2Result> InvokeAsync(GetNetworkSecurityPolicyV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkSecurityPolicyV2Result>("nutanix:index/getNetworkSecurityPolicyV2:getNetworkSecurityPolicyV2", args ?? new GetNetworkSecurityPolicyV2Args(), options.WithDefaults());

        /// <summary>
        /// Get a Network Security Policy by ExtID
        /// </summary>
        public static Output<GetNetworkSecurityPolicyV2Result> Invoke(GetNetworkSecurityPolicyV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkSecurityPolicyV2Result>("nutanix:index/getNetworkSecurityPolicyV2:getNetworkSecurityPolicyV2", args ?? new GetNetworkSecurityPolicyV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Network Security Policy by ExtID
        /// </summary>
        public static Output<GetNetworkSecurityPolicyV2Result> Invoke(GetNetworkSecurityPolicyV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkSecurityPolicyV2Result>("nutanix:index/getNetworkSecurityPolicyV2:getNetworkSecurityPolicyV2", args ?? new GetNetworkSecurityPolicyV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkSecurityPolicyV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Network security policy UUID.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetNetworkSecurityPolicyV2Args()
        {
        }
        public static new GetNetworkSecurityPolicyV2Args Empty => new GetNetworkSecurityPolicyV2Args();
    }

    public sealed class GetNetworkSecurityPolicyV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Network security policy UUID.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetNetworkSecurityPolicyV2InvokeArgs()
        {
        }
        public static new GetNetworkSecurityPolicyV2InvokeArgs Empty => new GetNetworkSecurityPolicyV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkSecurityPolicyV2Result
    {
        /// <summary>
        /// created by.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// creation time of NSP
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// A user defined annotation for a rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If Hitlog is enabled.
        /// </summary>
        public readonly bool IsHitlogEnabled;
        /// <summary>
        /// If Ipv6 Traffic is allowed.
        /// </summary>
        public readonly bool IsIpv6TrafficAllowed;
        /// <summary>
        /// Is system defined NSP
        /// </summary>
        public readonly bool IsSystemDefined;
        /// <summary>
        /// last updated time
        /// </summary>
        public readonly string LastUpdateTime;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityPolicyV2LinkResult> Links;
        /// <summary>
        /// Name of the Flow Network Security Policy.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSecurityPolicyV2RuleResult> Rules;
        /// <summary>
        /// Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// Uuids of the secured groups in the NSP.
        /// </summary>
        public readonly ImmutableArray<string> SecuredGroups;
        /// <summary>
        /// Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Icmp service Type. Ignore this field if Type has to be ANY.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
        /// </summary>
        public readonly ImmutableArray<string> VpcReferences;

        [OutputConstructor]
        private GetNetworkSecurityPolicyV2Result(
            string createdBy,

            string creationTime,

            string description,

            string extId,

            string id,

            bool isHitlogEnabled,

            bool isIpv6TrafficAllowed,

            bool isSystemDefined,

            string lastUpdateTime,

            ImmutableArray<Outputs.GetNetworkSecurityPolicyV2LinkResult> links,

            string name,

            ImmutableArray<Outputs.GetNetworkSecurityPolicyV2RuleResult> rules,

            string scope,

            ImmutableArray<string> securedGroups,

            string state,

            string tenantId,

            string type,

            ImmutableArray<string> vpcReferences)
        {
            CreatedBy = createdBy;
            CreationTime = creationTime;
            Description = description;
            ExtId = extId;
            Id = id;
            IsHitlogEnabled = isHitlogEnabled;
            IsIpv6TrafficAllowed = isIpv6TrafficAllowed;
            IsSystemDefined = isSystemDefined;
            LastUpdateTime = lastUpdateTime;
            Links = links;
            Name = name;
            Rules = rules;
            Scope = scope;
            SecuredGroups = securedGroups;
            State = state;
            TenantId = tenantId;
            Type = type;
            VpcReferences = vpcReferences;
        }
    }
}
