// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbClone
    {
        /// <summary>
        /// Describes the clone present in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var name = Nutanix.GetNdbClone.Invoke(new()
        ///     {
        ///         CloneName = "test-inst-tf-check",
        ///         Filters = new[]
        ///         {
        ///             new Nutanix.Inputs.GetNdbCloneFilterInputArgs
        ///             {
        ///                 Detailed = "true",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNdbCloneResult> InvokeAsync(GetNdbCloneArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbCloneResult>("nutanix:index/getNdbClone:getNdbClone", args ?? new GetNdbCloneArgs(), options.WithDefaults());

        /// <summary>
        /// Describes the clone present in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var name = Nutanix.GetNdbClone.Invoke(new()
        ///     {
        ///         CloneName = "test-inst-tf-check",
        ///         Filters = new[]
        ///         {
        ///             new Nutanix.Inputs.GetNdbCloneFilterInputArgs
        ///             {
        ///                 Detailed = "true",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbCloneResult> Invoke(GetNdbCloneInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbCloneResult>("nutanix:index/getNdbClone:getNdbClone", args ?? new GetNdbCloneInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes the clone present in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var name = Nutanix.GetNdbClone.Invoke(new()
        ///     {
        ///         CloneName = "test-inst-tf-check",
        ///         Filters = new[]
        ///         {
        ///             new Nutanix.Inputs.GetNdbCloneFilterInputArgs
        ///             {
        ///                 Detailed = "true",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbCloneResult> Invoke(GetNdbCloneInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbCloneResult>("nutanix:index/getNdbClone:getNdbClone", args ?? new GetNdbCloneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbCloneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Clone id
        /// </summary>
        [Input("cloneId")]
        public string? CloneId { get; set; }

        /// <summary>
        /// Clone Name
        /// </summary>
        [Input("cloneName")]
        public string? CloneName { get; set; }

        [Input("filters")]
        private List<Inputs.GetNdbCloneFilterArgs>? _filters;

        /// <summary>
        /// Fetches info based on filter
        /// </summary>
        public List<Inputs.GetNdbCloneFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNdbCloneFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private List<Inputs.GetNdbCloneTagArgs>? _tags;

        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        public List<Inputs.GetNdbCloneTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetNdbCloneTagArgs>());
            set => _tags = value;
        }

        public GetNdbCloneArgs()
        {
        }
        public static new GetNdbCloneArgs Empty => new GetNdbCloneArgs();
    }

    public sealed class GetNdbCloneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Clone id
        /// </summary>
        [Input("cloneId")]
        public Input<string>? CloneId { get; set; }

        /// <summary>
        /// Clone Name
        /// </summary>
        [Input("cloneName")]
        public Input<string>? CloneName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetNdbCloneFilterInputArgs>? _filters;

        /// <summary>
        /// Fetches info based on filter
        /// </summary>
        public InputList<Inputs.GetNdbCloneFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNdbCloneFilterInputArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private InputList<Inputs.GetNdbCloneTagInputArgs>? _tags;

        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        public InputList<Inputs.GetNdbCloneTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetNdbCloneTagInputArgs>());
            set => _tags = value;
        }

        public GetNdbCloneInvokeArgs()
        {
        }
        public static new GetNdbCloneInvokeArgs Empty => new GetNdbCloneInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbCloneResult
    {
        /// <summary>
        /// clone or not
        /// </summary>
        public readonly bool Clone;
        public readonly string? CloneId;
        public readonly string? CloneName;
        /// <summary>
        /// clustered or not
        /// </summary>
        public readonly bool Clustered;
        /// <summary>
        /// database cluster type
        /// </summary>
        public readonly string DatabaseClusterType;
        /// <summary>
        /// database name
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// database nodes associated with database instance
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbCloneDatabaseNodeResult> DatabaseNodes;
        /// <summary>
        /// database status
        /// </summary>
        public readonly string DatabaseStatus;
        /// <summary>
        /// database for a cloned instance
        /// </summary>
        public readonly ImmutableDictionary<string, string> Databases;
        /// <summary>
        /// date created for clone
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// last modified date for clone
        /// </summary>
        public readonly string DateModified;
        /// <summary>
        /// dbserver logical cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string> DbserverLogicalCluster;
        /// <summary>
        /// dbserver logical cluster id
        /// </summary>
        public readonly string DbserverLogicalClusterId;
        /// <summary>
        /// cloned description
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetNdbCloneFilterResult> Filters;
        /// <summary>
        /// cloned id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// cloned info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbCloneInfoResult> Infos;
        /// <summary>
        /// LCM Config
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbCloneLcmConfigResult> LcmConfigs;
        /// <summary>
        /// linked databases within database instance
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbCloneLinkedDatabaseResult> LinkedDatabases;
        /// <summary>
        /// Metric of clone
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metric;
        /// <summary>
        /// cloned name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// parent database id
        /// </summary>
        public readonly string ParentDatabaseId;
        /// <summary>
        /// parent source database id
        /// </summary>
        public readonly string ParentSourceDatabaseId;
        /// <summary>
        /// parent time machine id
        /// </summary>
        public readonly string ParentTimeMachineId;
        /// <summary>
        /// properties of clone
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbClonePropertyResult> Properties;
        /// <summary>
        /// status of clone
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbCloneTagResult> Tags;
        /// <summary>
        /// time machine id
        /// </summary>
        public readonly string TimeMachineId;
        /// <summary>
        /// Time machine info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbCloneTimeMachineResult> TimeMachines;
        /// <summary>
        /// time zone
        /// </summary>
        public readonly string TimeZone;
        /// <summary>
        /// type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNdbCloneResult(
            bool clone,

            string? cloneId,

            string? cloneName,

            bool clustered,

            string databaseClusterType,

            string databaseName,

            ImmutableArray<Outputs.GetNdbCloneDatabaseNodeResult> databaseNodes,

            string databaseStatus,

            ImmutableDictionary<string, string> databases,

            string dateCreated,

            string dateModified,

            ImmutableDictionary<string, string> dbserverLogicalCluster,

            string dbserverLogicalClusterId,

            string description,

            ImmutableArray<Outputs.GetNdbCloneFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetNdbCloneInfoResult> infos,

            ImmutableArray<Outputs.GetNdbCloneLcmConfigResult> lcmConfigs,

            ImmutableArray<Outputs.GetNdbCloneLinkedDatabaseResult> linkedDatabases,

            ImmutableDictionary<string, string> metric,

            string name,

            string parentDatabaseId,

            string parentSourceDatabaseId,

            string parentTimeMachineId,

            ImmutableArray<Outputs.GetNdbClonePropertyResult> properties,

            string status,

            ImmutableArray<Outputs.GetNdbCloneTagResult> tags,

            string timeMachineId,

            ImmutableArray<Outputs.GetNdbCloneTimeMachineResult> timeMachines,

            string timeZone,

            string type)
        {
            Clone = clone;
            CloneId = cloneId;
            CloneName = cloneName;
            Clustered = clustered;
            DatabaseClusterType = databaseClusterType;
            DatabaseName = databaseName;
            DatabaseNodes = databaseNodes;
            DatabaseStatus = databaseStatus;
            Databases = databases;
            DateCreated = dateCreated;
            DateModified = dateModified;
            DbserverLogicalCluster = dbserverLogicalCluster;
            DbserverLogicalClusterId = dbserverLogicalClusterId;
            Description = description;
            Filters = filters;
            Id = id;
            Infos = infos;
            LcmConfigs = lcmConfigs;
            LinkedDatabases = linkedDatabases;
            Metric = metric;
            Name = name;
            ParentDatabaseId = parentDatabaseId;
            ParentSourceDatabaseId = parentSourceDatabaseId;
            ParentTimeMachineId = parentTimeMachineId;
            Properties = properties;
            Status = status;
            Tags = tags;
            TimeMachineId = timeMachineId;
            TimeMachines = timeMachines;
            TimeZone = timeZone;
            Type = type;
        }
    }
}
