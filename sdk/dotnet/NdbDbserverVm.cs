// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    [NutanixResourceType("nutanix:index/ndbDbserverVm:NdbDbserverVm")]
    public partial class NdbDbserverVm : global::Pulumi.CustomResource
    {
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        [Output("computeProfileId")]
        public Output<string> ComputeProfileId { get; private set; } = null!;

        [Output("credentials")]
        public Output<ImmutableArray<Outputs.NdbDbserverVmCredential>> Credentials { get; private set; } = null!;

        [Output("databaseType")]
        public Output<string> DatabaseType { get; private set; } = null!;

        [Output("dbserverClusterId")]
        public Output<string> DbserverClusterId { get; private set; } = null!;

        [Output("delete")]
        public Output<bool?> Delete { get; private set; } = null!;

        [Output("deleteVgs")]
        public Output<bool?> DeleteVgs { get; private set; } = null!;

        [Output("deleteVmSnapshots")]
        public Output<bool?> DeleteVmSnapshots { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("eraDriveId")]
        public Output<string> EraDriveId { get; private set; } = null!;

        [Output("eraVersion")]
        public Output<string> EraVersion { get; private set; } = null!;

        [Output("fqdns")]
        public Output<string> Fqdns { get; private set; } = null!;

        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        [Output("latestSnapshot")]
        public Output<bool?> LatestSnapshot { get; private set; } = null!;

        [Output("macAddresses")]
        public Output<ImmutableArray<string>> MacAddresses { get; private set; } = null!;

        [Output("maintenanceTasks")]
        public Output<Outputs.NdbDbserverVmMaintenanceTasks?> MaintenanceTasks { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkProfileId")]
        public Output<string> NetworkProfileId { get; private set; } = null!;

        [Output("nxClusterId")]
        public Output<string> NxClusterId { get; private set; } = null!;

        [Output("postgresDatabases")]
        public Output<ImmutableArray<Outputs.NdbDbserverVmPostgresDatabase>> PostgresDatabases { get; private set; } = null!;

        /// <summary>
        /// List of all the properties
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbDbserverVmProperty>> Properties { get; private set; } = null!;

        [Output("remove")]
        public Output<bool?> Remove { get; private set; } = null!;

        [Output("snapshotId")]
        public Output<string?> SnapshotId { get; private set; } = null!;

        [Output("softRemove")]
        public Output<bool?> SoftRemove { get; private set; } = null!;

        [Output("softwareProfileId")]
        public Output<string?> SoftwareProfileId { get; private set; } = null!;

        [Output("softwareProfileVersionId")]
        public Output<string?> SoftwareProfileVersionId { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbDbserverVmTag>> Tags { get; private set; } = null!;

        [Output("timeMachineId")]
        public Output<string?> TimeMachineId { get; private set; } = null!;

        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("vmClusterName")]
        public Output<string> VmClusterName { get; private set; } = null!;

        [Output("vmClusterUuid")]
        public Output<string> VmClusterUuid { get; private set; } = null!;

        [Output("vmPassword")]
        public Output<string?> VmPassword { get; private set; } = null!;

        [Output("vmTimezone")]
        public Output<string> VmTimezone { get; private set; } = null!;


        /// <summary>
        /// Create a NdbDbserverVm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbDbserverVm(string name, NdbDbserverVmArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDbserverVm:NdbDbserverVm", name, args ?? new NdbDbserverVmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbDbserverVm(string name, Input<string> id, NdbDbserverVmState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDbserverVm:NdbDbserverVm", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
                AdditionalSecretOutputs =
                {
                    "vmPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbDbserverVm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbDbserverVm Get(string name, Input<string> id, NdbDbserverVmState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbDbserverVm(name, id, state, options);
        }
    }

    public sealed class NdbDbserverVmArgs : global::Pulumi.ResourceArgs
    {
        [Input("computeProfileId", required: true)]
        public Input<string> ComputeProfileId { get; set; } = null!;

        [Input("credentials")]
        private InputList<Inputs.NdbDbserverVmCredentialArgs>? _credentials;
        public InputList<Inputs.NdbDbserverVmCredentialArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.NdbDbserverVmCredentialArgs>());
            set => _credentials = value;
        }

        [Input("databaseType", required: true)]
        public Input<string> DatabaseType { get; set; } = null!;

        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        [Input("deleteVgs")]
        public Input<bool>? DeleteVgs { get; set; }

        [Input("deleteVmSnapshots")]
        public Input<bool>? DeleteVmSnapshots { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("latestSnapshot")]
        public Input<bool>? LatestSnapshot { get; set; }

        [Input("maintenanceTasks")]
        public Input<Inputs.NdbDbserverVmMaintenanceTasksArgs>? MaintenanceTasks { get; set; }

        [Input("networkProfileId", required: true)]
        public Input<string> NetworkProfileId { get; set; } = null!;

        [Input("nxClusterId", required: true)]
        public Input<string> NxClusterId { get; set; } = null!;

        [Input("postgresDatabases")]
        private InputList<Inputs.NdbDbserverVmPostgresDatabaseArgs>? _postgresDatabases;
        public InputList<Inputs.NdbDbserverVmPostgresDatabaseArgs> PostgresDatabases
        {
            get => _postgresDatabases ?? (_postgresDatabases = new InputList<Inputs.NdbDbserverVmPostgresDatabaseArgs>());
            set => _postgresDatabases = value;
        }

        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        [Input("softwareProfileId")]
        public Input<string>? SoftwareProfileId { get; set; }

        [Input("softwareProfileVersionId")]
        public Input<string>? SoftwareProfileVersionId { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbDbserverVmTagArgs>? _tags;
        public InputList<Inputs.NdbDbserverVmTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDbserverVmTagArgs>());
            set => _tags = value;
        }

        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("vmPassword")]
        private Input<string>? _vmPassword;
        public Input<string>? VmPassword
        {
            get => _vmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public NdbDbserverVmArgs()
        {
        }
        public static new NdbDbserverVmArgs Empty => new NdbDbserverVmArgs();
    }

    public sealed class NdbDbserverVmState : global::Pulumi.ResourceArgs
    {
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("computeProfileId")]
        public Input<string>? ComputeProfileId { get; set; }

        [Input("credentials")]
        private InputList<Inputs.NdbDbserverVmCredentialGetArgs>? _credentials;
        public InputList<Inputs.NdbDbserverVmCredentialGetArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.NdbDbserverVmCredentialGetArgs>());
            set => _credentials = value;
        }

        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        [Input("dbserverClusterId")]
        public Input<string>? DbserverClusterId { get; set; }

        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        [Input("deleteVgs")]
        public Input<bool>? DeleteVgs { get; set; }

        [Input("deleteVmSnapshots")]
        public Input<bool>? DeleteVmSnapshots { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eraDriveId")]
        public Input<string>? EraDriveId { get; set; }

        [Input("eraVersion")]
        public Input<string>? EraVersion { get; set; }

        [Input("fqdns")]
        public Input<string>? Fqdns { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("latestSnapshot")]
        public Input<bool>? LatestSnapshot { get; set; }

        [Input("macAddresses")]
        private InputList<string>? _macAddresses;
        public InputList<string> MacAddresses
        {
            get => _macAddresses ?? (_macAddresses = new InputList<string>());
            set => _macAddresses = value;
        }

        [Input("maintenanceTasks")]
        public Input<Inputs.NdbDbserverVmMaintenanceTasksGetArgs>? MaintenanceTasks { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkProfileId")]
        public Input<string>? NetworkProfileId { get; set; }

        [Input("nxClusterId")]
        public Input<string>? NxClusterId { get; set; }

        [Input("postgresDatabases")]
        private InputList<Inputs.NdbDbserverVmPostgresDatabaseGetArgs>? _postgresDatabases;
        public InputList<Inputs.NdbDbserverVmPostgresDatabaseGetArgs> PostgresDatabases
        {
            get => _postgresDatabases ?? (_postgresDatabases = new InputList<Inputs.NdbDbserverVmPostgresDatabaseGetArgs>());
            set => _postgresDatabases = value;
        }

        [Input("properties")]
        private InputList<Inputs.NdbDbserverVmPropertyGetArgs>? _properties;

        /// <summary>
        /// List of all the properties
        /// </summary>
        public InputList<Inputs.NdbDbserverVmPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbDbserverVmPropertyGetArgs>());
            set => _properties = value;
        }

        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        [Input("softwareProfileId")]
        public Input<string>? SoftwareProfileId { get; set; }

        [Input("softwareProfileVersionId")]
        public Input<string>? SoftwareProfileVersionId { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbDbserverVmTagGetArgs>? _tags;
        public InputList<Inputs.NdbDbserverVmTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDbserverVmTagGetArgs>());
            set => _tags = value;
        }

        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vmClusterName")]
        public Input<string>? VmClusterName { get; set; }

        [Input("vmClusterUuid")]
        public Input<string>? VmClusterUuid { get; set; }

        [Input("vmPassword")]
        private Input<string>? _vmPassword;
        public Input<string>? VmPassword
        {
            get => _vmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("vmTimezone")]
        public Input<string>? VmTimezone { get; set; }

        public NdbDbserverVmState()
        {
        }
        public static new NdbDbserverVmState Empty => new NdbDbserverVmState();
    }
}
