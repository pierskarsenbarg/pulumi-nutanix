// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides Nutanix resource to Create Route.
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // create a route
    ///     var route = new Nutanix.RoutesV2("route", new()
    ///     {
    ///         Description = "terraform example route to example create route",
    ///         Destination = new Nutanix.Inputs.RoutesV2DestinationArgs
    ///         {
    ///             Ipv4 = new Nutanix.Inputs.RoutesV2DestinationIpv4Args
    ///             {
    ///                 Ip = new Nutanix.Inputs.RoutesV2DestinationIpv4IpArgs
    ///                 {
    ///                     Value = "10.0.0.2",
    ///                 },
    ///                 PrefixLength = 32,
    ///             },
    ///         },
    ///         Metadata = new Nutanix.Inputs.RoutesV2MetadataArgs
    ///         {
    ///             OwnerReferenceId = "a8fe48c4-f0d3-49c7-a017-efc30dd8fb2b",
    ///             ProjectReferenceId = "ab520e1d-4950-1db1-917f-a9e2ea35b8e3",
    ///         },
    ///         NextHop = new Nutanix.Inputs.RoutesV2NextHopArgs
    ///         {
    ///             NextHopReference = "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
    ///             NextHopType = "EXTERNAL_SUBNET",
    ///         },
    ///         RouteTableExtId = "c2c249b0-98a0-43fa-9ff6-dcde578d3936",
    ///         RouteType = "STATIC",
    ///         VpcReference = "8a938cc5-282b-48c4-81be-de22de145d07",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/routesV2:RoutesV2")]
    public partial class RoutesV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// BGP session description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Destination IP Subnet Configuration.
        /// </summary>
        [Output("destination")]
        public Output<Outputs.RoutesV2Destination> Destination { get; private set; } = null!;

        /// <summary>
        /// Route UUID
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// External routing domain associated with this route table.
        /// </summary>
        [Output("externalRoutingDomainReference")]
        public Output<string> ExternalRoutingDomainReference { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the route is active in the forwarding plane.
        /// </summary>
        [Output("isActive")]
        public Output<bool> IsActive { get; private set; } = null!;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.RoutesV2Link>> Links { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.RoutesV2Metadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// Route name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Route nexthop.
        /// </summary>
        [Output("nextHop")]
        public Output<Outputs.RoutesV2NextHop> NextHop { get; private set; } = null!;

        /// <summary>
        /// Route priority. A higher value implies greater preference is assigned to the route.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// Route table UUID
        /// </summary>
        [Output("routeTableExtId")]
        public Output<string> RouteTableExtId { get; private set; } = null!;

        /// <summary>
        /// Route table reference.
        /// </summary>
        [Output("routeTableReference")]
        public Output<string> RouteTableReference { get; private set; } = null!;

        /// <summary>
        /// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
        /// </summary>
        [Output("routeType")]
        public Output<string> RouteType { get; private set; } = null!;

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// VPC reference.
        /// </summary>
        [Output("vpcReference")]
        public Output<string> VpcReference { get; private set; } = null!;


        /// <summary>
        /// Create a RoutesV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoutesV2(string name, RoutesV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/routesV2:RoutesV2", name, args ?? new RoutesV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private RoutesV2(string name, Input<string> id, RoutesV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/routesV2:RoutesV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoutesV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoutesV2 Get(string name, Input<string> id, RoutesV2State? state = null, CustomResourceOptions? options = null)
        {
            return new RoutesV2(name, id, state, options);
        }
    }

    public sealed class RoutesV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// BGP session description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Destination IP Subnet Configuration.
        /// </summary>
        [Input("destination")]
        public Input<Inputs.RoutesV2DestinationArgs>? Destination { get; set; }

        /// <summary>
        /// External routing domain associated with this route table.
        /// </summary>
        [Input("externalRoutingDomainReference")]
        public Input<string>? ExternalRoutingDomainReference { get; set; }

        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.RoutesV2MetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// Route name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Route nexthop.
        /// </summary>
        [Input("nextHop")]
        public Input<Inputs.RoutesV2NextHopArgs>? NextHop { get; set; }

        /// <summary>
        /// Route table UUID
        /// </summary>
        [Input("routeTableExtId", required: true)]
        public Input<string> RouteTableExtId { get; set; } = null!;

        /// <summary>
        /// Route table reference.
        /// </summary>
        [Input("routeTableReference")]
        public Input<string>? RouteTableReference { get; set; }

        /// <summary>
        /// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
        /// </summary>
        [Input("routeType", required: true)]
        public Input<string> RouteType { get; set; } = null!;

        /// <summary>
        /// VPC reference.
        /// </summary>
        [Input("vpcReference")]
        public Input<string>? VpcReference { get; set; }

        public RoutesV2Args()
        {
        }
        public static new RoutesV2Args Empty => new RoutesV2Args();
    }

    public sealed class RoutesV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// BGP session description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Destination IP Subnet Configuration.
        /// </summary>
        [Input("destination")]
        public Input<Inputs.RoutesV2DestinationGetArgs>? Destination { get; set; }

        /// <summary>
        /// Route UUID
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// External routing domain associated with this route table.
        /// </summary>
        [Input("externalRoutingDomainReference")]
        public Input<string>? ExternalRoutingDomainReference { get; set; }

        /// <summary>
        /// Indicates whether the route is active in the forwarding plane.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        [Input("links")]
        private InputList<Inputs.RoutesV2LinkGetArgs>? _links;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public InputList<Inputs.RoutesV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.RoutesV2LinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.RoutesV2MetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// Route name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Route nexthop.
        /// </summary>
        [Input("nextHop")]
        public Input<Inputs.RoutesV2NextHopGetArgs>? NextHop { get; set; }

        /// <summary>
        /// Route priority. A higher value implies greater preference is assigned to the route.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Route table UUID
        /// </summary>
        [Input("routeTableExtId")]
        public Input<string>? RouteTableExtId { get; set; }

        /// <summary>
        /// Route table reference.
        /// </summary>
        [Input("routeTableReference")]
        public Input<string>? RouteTableReference { get; set; }

        /// <summary>
        /// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
        /// </summary>
        [Input("routeType")]
        public Input<string>? RouteType { get; set; }

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// VPC reference.
        /// </summary>
        [Input("vpcReference")]
        public Input<string>? VpcReference { get; set; }

        public RoutesV2State()
        {
        }
        public static new RoutesV2State Empty => new RoutesV2State();
    }
}
