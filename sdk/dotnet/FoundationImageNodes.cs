// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    [NutanixResourceType("nutanix:index/foundationImageNodes:FoundationImageNodes")]
    public partial class FoundationImageNodes : Pulumi.CustomResource
    {
        [Output("blocks")]
        public Output<ImmutableArray<Outputs.FoundationImageNodesBlock>> Blocks { get; private set; } = null!;

        [Output("clusterUrls")]
        public Output<ImmutableArray<Outputs.FoundationImageNodesClusterUrl>> ClusterUrls { get; private set; } = null!;

        [Output("clusters")]
        public Output<ImmutableArray<Outputs.FoundationImageNodesCluster>> Clusters { get; private set; } = null!;

        /// <summary>
        /// : - (Required) CVM gateway.
        /// </summary>
        [Output("cvmGateway")]
        public Output<string> CvmGateway { get; private set; } = null!;

        /// <summary>
        /// : - (Required) CVM netmask.
        /// </summary>
        [Output("cvmNetmask")]
        public Output<string> CvmNetmask { get; private set; } = null!;

        /// <summary>
        /// : - Contains user data from Eos portal.
        /// </summary>
        [Output("eosMetadata")]
        public Output<Outputs.FoundationImageNodesEosMetadata?> EosMetadata { get; private set; } = null!;

        /// <summary>
        /// : - Foundation Central specific settings.
        /// </summary>
        [Output("fcSettings")]
        public Output<Outputs.FoundationImageNodesFcSettings?> FcSettings { get; private set; } = null!;

        /// <summary>
        /// : - Hyperv External virtual network adapter name.
        /// </summary>
        [Output("hypervExternalVnic")]
        public Output<string?> HypervExternalVnic { get; private set; } = null!;

        /// <summary>
        /// : - Hyperv External vswitch name.
        /// </summary>
        [Output("hypervExternalVswitch")]
        public Output<string?> HypervExternalVswitch { get; private set; } = null!;

        /// <summary>
        /// : - Hyperv product key.
        /// </summary>
        [Output("hypervProductKey")]
        public Output<string?> HypervProductKey { get; private set; } = null!;

        /// <summary>
        /// : - Hyperv SKU.
        /// </summary>
        [Output("hypervSku")]
        public Output<bool?> HypervSku { get; private set; } = null!;

        /// <summary>
        /// : - (Required) Hypervisor gateway.
        /// </summary>
        [Output("hypervisorGateway")]
        public Output<string> HypervisorGateway { get; private set; } = null!;

        /// <summary>
        /// : - Hypervisor ISO.
        /// </summary>
        [Output("hypervisorIso")]
        public Output<Outputs.FoundationImageNodesHypervisorIso?> HypervisorIso { get; private set; } = null!;

        [Output("hypervisorNameserver")]
        public Output<string?> HypervisorNameserver { get; private set; } = null!;

        /// <summary>
        /// : - (Required) Hypervisor netmask.
        /// </summary>
        [Output("hypervisorNetmask")]
        public Output<string> HypervisorNetmask { get; private set; } = null!;

        /// <summary>
        /// : - Hypervisor password.
        /// </summary>
        [Output("hypervisorPassword")]
        public Output<string?> HypervisorPassword { get; private set; } = null!;

        /// <summary>
        /// : - install script.
        /// </summary>
        [Output("installScript")]
        public Output<string?> InstallScript { get; private set; } = null!;

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        /// </summary>
        [Output("ipmiGateway")]
        public Output<string?> IpmiGateway { get; private set; } = null!;

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        /// </summary>
        [Output("ipmiNetmask")]
        public Output<string?> IpmiNetmask { get; private set; } = null!;

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        /// </summary>
        [Output("ipmiPassword")]
        public Output<string?> IpmiPassword { get; private set; } = null!;

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        /// </summary>
        [Output("ipmiUser")]
        public Output<string?> IpmiUser { get; private set; } = null!;

        /// <summary>
        /// : - Id of the custom layout which needs to be passed to imaging request.
        /// </summary>
        [Output("layoutEggUuid")]
        public Output<string?> LayoutEggUuid { get; private set; } = null!;

        /// <summary>
        /// : - (Required) NOS package.
        /// </summary>
        [Output("nosPackage")]
        public Output<string> NosPackage { get; private set; } = null!;

        [Output("sessionId")]
        public Output<string> SessionId { get; private set; } = null!;

        /// <summary>
        /// : - If hypervisor installation should be skipped.
        /// </summary>
        [Output("skipHypervisor")]
        public Output<bool?> SkipHypervisor { get; private set; } = null!;

        /// <summary>
        /// : - Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.
        /// </summary>
        [Output("svmRescueArgs")]
        public Output<ImmutableArray<string>> SvmRescueArgs { get; private set; } = null!;

        /// <summary>
        /// : - Types of tests to be performed.
        /// </summary>
        [Output("tests")]
        public Output<Outputs.FoundationImageNodesTests?> Tests { get; private set; } = null!;

        /// <summary>
        /// : - UCSM IP address.
        /// </summary>
        [Output("ucsmIp")]
        public Output<string?> UcsmIp { get; private set; } = null!;

        /// <summary>
        /// : - UCSM password.
        /// </summary>
        [Output("ucsmPassword")]
        public Output<string?> UcsmPassword { get; private set; } = null!;

        /// <summary>
        /// : - UCSM username.
        /// </summary>
        [Output("ucsmUser")]
        public Output<string?> UcsmUser { get; private set; } = null!;

        /// <summary>
        /// : - UNC password.
        /// </summary>
        [Output("uncPassword")]
        public Output<string?> UncPassword { get; private set; } = null!;

        /// <summary>
        /// : - UNC Path.
        /// </summary>
        [Output("uncPath")]
        public Output<string?> UncPath { get; private set; } = null!;

        /// <summary>
        /// : - UNC username.
        /// </summary>
        [Output("uncUsername")]
        public Output<string?> UncUsername { get; private set; } = null!;

        /// <summary>
        /// : - xen config types.
        /// </summary>
        [Output("xenConfigType")]
        public Output<string?> XenConfigType { get; private set; } = null!;

        /// <summary>
        /// : - xen server master IP address.
        /// </summary>
        [Output("xsMasterIp")]
        public Output<string?> XsMasterIp { get; private set; } = null!;

        [Output("xsMasterLabel")]
        public Output<string?> XsMasterLabel { get; private set; } = null!;

        /// <summary>
        /// : - xen server master password.
        /// </summary>
        [Output("xsMasterPassword")]
        public Output<string?> XsMasterPassword { get; private set; } = null!;

        /// <summary>
        /// : - xen server master username.
        /// </summary>
        [Output("xsMasterUsername")]
        public Output<string?> XsMasterUsername { get; private set; } = null!;


        /// <summary>
        /// Create a FoundationImageNodes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FoundationImageNodes(string name, FoundationImageNodesArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/foundationImageNodes:FoundationImageNodes", name, args ?? new FoundationImageNodesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FoundationImageNodes(string name, Input<string> id, FoundationImageNodesState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/foundationImageNodes:FoundationImageNodes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/pierskarsenbarg/pulumi-nutanix/releases/download/${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FoundationImageNodes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FoundationImageNodes Get(string name, Input<string> id, FoundationImageNodesState? state = null, CustomResourceOptions? options = null)
        {
            return new FoundationImageNodes(name, id, state, options);
        }
    }

    public sealed class FoundationImageNodesArgs : Pulumi.ResourceArgs
    {
        [Input("blocks", required: true)]
        private InputList<Inputs.FoundationImageNodesBlockArgs>? _blocks;
        public InputList<Inputs.FoundationImageNodesBlockArgs> Blocks
        {
            get => _blocks ?? (_blocks = new InputList<Inputs.FoundationImageNodesBlockArgs>());
            set => _blocks = value;
        }

        [Input("clusters")]
        private InputList<Inputs.FoundationImageNodesClusterArgs>? _clusters;
        public InputList<Inputs.FoundationImageNodesClusterArgs> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<Inputs.FoundationImageNodesClusterArgs>());
            set => _clusters = value;
        }

        /// <summary>
        /// : - (Required) CVM gateway.
        /// </summary>
        [Input("cvmGateway", required: true)]
        public Input<string> CvmGateway { get; set; } = null!;

        /// <summary>
        /// : - (Required) CVM netmask.
        /// </summary>
        [Input("cvmNetmask", required: true)]
        public Input<string> CvmNetmask { get; set; } = null!;

        /// <summary>
        /// : - Contains user data from Eos portal.
        /// </summary>
        [Input("eosMetadata")]
        public Input<Inputs.FoundationImageNodesEosMetadataArgs>? EosMetadata { get; set; }

        /// <summary>
        /// : - Foundation Central specific settings.
        /// </summary>
        [Input("fcSettings")]
        public Input<Inputs.FoundationImageNodesFcSettingsArgs>? FcSettings { get; set; }

        /// <summary>
        /// : - Hyperv External virtual network adapter name.
        /// </summary>
        [Input("hypervExternalVnic")]
        public Input<string>? HypervExternalVnic { get; set; }

        /// <summary>
        /// : - Hyperv External vswitch name.
        /// </summary>
        [Input("hypervExternalVswitch")]
        public Input<string>? HypervExternalVswitch { get; set; }

        /// <summary>
        /// : - Hyperv product key.
        /// </summary>
        [Input("hypervProductKey")]
        public Input<string>? HypervProductKey { get; set; }

        /// <summary>
        /// : - Hyperv SKU.
        /// </summary>
        [Input("hypervSku")]
        public Input<bool>? HypervSku { get; set; }

        /// <summary>
        /// : - (Required) Hypervisor gateway.
        /// </summary>
        [Input("hypervisorGateway", required: true)]
        public Input<string> HypervisorGateway { get; set; } = null!;

        /// <summary>
        /// : - Hypervisor ISO.
        /// </summary>
        [Input("hypervisorIso")]
        public Input<Inputs.FoundationImageNodesHypervisorIsoArgs>? HypervisorIso { get; set; }

        [Input("hypervisorNameserver")]
        public Input<string>? HypervisorNameserver { get; set; }

        /// <summary>
        /// : - (Required) Hypervisor netmask.
        /// </summary>
        [Input("hypervisorNetmask", required: true)]
        public Input<string> HypervisorNetmask { get; set; } = null!;

        /// <summary>
        /// : - Hypervisor password.
        /// </summary>
        [Input("hypervisorPassword")]
        public Input<string>? HypervisorPassword { get; set; }

        /// <summary>
        /// : - install script.
        /// </summary>
        [Input("installScript")]
        public Input<string>? InstallScript { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        /// </summary>
        [Input("ipmiGateway")]
        public Input<string>? IpmiGateway { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        /// </summary>
        [Input("ipmiNetmask")]
        public Input<string>? IpmiNetmask { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        /// </summary>
        [Input("ipmiPassword")]
        public Input<string>? IpmiPassword { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        /// </summary>
        [Input("ipmiUser")]
        public Input<string>? IpmiUser { get; set; }

        /// <summary>
        /// : - Id of the custom layout which needs to be passed to imaging request.
        /// </summary>
        [Input("layoutEggUuid")]
        public Input<string>? LayoutEggUuid { get; set; }

        /// <summary>
        /// : - (Required) NOS package.
        /// </summary>
        [Input("nosPackage", required: true)]
        public Input<string> NosPackage { get; set; } = null!;

        /// <summary>
        /// : - If hypervisor installation should be skipped.
        /// </summary>
        [Input("skipHypervisor")]
        public Input<bool>? SkipHypervisor { get; set; }

        [Input("svmRescueArgs")]
        private InputList<string>? _svmRescueArgs;

        /// <summary>
        /// : - Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.
        /// </summary>
        public InputList<string> SvmRescueArgs
        {
            get => _svmRescueArgs ?? (_svmRescueArgs = new InputList<string>());
            set => _svmRescueArgs = value;
        }

        /// <summary>
        /// : - Types of tests to be performed.
        /// </summary>
        [Input("tests")]
        public Input<Inputs.FoundationImageNodesTestsArgs>? Tests { get; set; }

        /// <summary>
        /// : - UCSM IP address.
        /// </summary>
        [Input("ucsmIp")]
        public Input<string>? UcsmIp { get; set; }

        /// <summary>
        /// : - UCSM password.
        /// </summary>
        [Input("ucsmPassword")]
        public Input<string>? UcsmPassword { get; set; }

        /// <summary>
        /// : - UCSM username.
        /// </summary>
        [Input("ucsmUser")]
        public Input<string>? UcsmUser { get; set; }

        /// <summary>
        /// : - UNC password.
        /// </summary>
        [Input("uncPassword")]
        public Input<string>? UncPassword { get; set; }

        /// <summary>
        /// : - UNC Path.
        /// </summary>
        [Input("uncPath")]
        public Input<string>? UncPath { get; set; }

        /// <summary>
        /// : - UNC username.
        /// </summary>
        [Input("uncUsername")]
        public Input<string>? UncUsername { get; set; }

        /// <summary>
        /// : - xen config types.
        /// </summary>
        [Input("xenConfigType")]
        public Input<string>? XenConfigType { get; set; }

        /// <summary>
        /// : - xen server master IP address.
        /// </summary>
        [Input("xsMasterIp")]
        public Input<string>? XsMasterIp { get; set; }

        [Input("xsMasterLabel")]
        public Input<string>? XsMasterLabel { get; set; }

        /// <summary>
        /// : - xen server master password.
        /// </summary>
        [Input("xsMasterPassword")]
        public Input<string>? XsMasterPassword { get; set; }

        /// <summary>
        /// : - xen server master username.
        /// </summary>
        [Input("xsMasterUsername")]
        public Input<string>? XsMasterUsername { get; set; }

        public FoundationImageNodesArgs()
        {
        }
    }

    public sealed class FoundationImageNodesState : Pulumi.ResourceArgs
    {
        [Input("blocks")]
        private InputList<Inputs.FoundationImageNodesBlockGetArgs>? _blocks;
        public InputList<Inputs.FoundationImageNodesBlockGetArgs> Blocks
        {
            get => _blocks ?? (_blocks = new InputList<Inputs.FoundationImageNodesBlockGetArgs>());
            set => _blocks = value;
        }

        [Input("clusterUrls")]
        private InputList<Inputs.FoundationImageNodesClusterUrlGetArgs>? _clusterUrls;
        public InputList<Inputs.FoundationImageNodesClusterUrlGetArgs> ClusterUrls
        {
            get => _clusterUrls ?? (_clusterUrls = new InputList<Inputs.FoundationImageNodesClusterUrlGetArgs>());
            set => _clusterUrls = value;
        }

        [Input("clusters")]
        private InputList<Inputs.FoundationImageNodesClusterGetArgs>? _clusters;
        public InputList<Inputs.FoundationImageNodesClusterGetArgs> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<Inputs.FoundationImageNodesClusterGetArgs>());
            set => _clusters = value;
        }

        /// <summary>
        /// : - (Required) CVM gateway.
        /// </summary>
        [Input("cvmGateway")]
        public Input<string>? CvmGateway { get; set; }

        /// <summary>
        /// : - (Required) CVM netmask.
        /// </summary>
        [Input("cvmNetmask")]
        public Input<string>? CvmNetmask { get; set; }

        /// <summary>
        /// : - Contains user data from Eos portal.
        /// </summary>
        [Input("eosMetadata")]
        public Input<Inputs.FoundationImageNodesEosMetadataGetArgs>? EosMetadata { get; set; }

        /// <summary>
        /// : - Foundation Central specific settings.
        /// </summary>
        [Input("fcSettings")]
        public Input<Inputs.FoundationImageNodesFcSettingsGetArgs>? FcSettings { get; set; }

        /// <summary>
        /// : - Hyperv External virtual network adapter name.
        /// </summary>
        [Input("hypervExternalVnic")]
        public Input<string>? HypervExternalVnic { get; set; }

        /// <summary>
        /// : - Hyperv External vswitch name.
        /// </summary>
        [Input("hypervExternalVswitch")]
        public Input<string>? HypervExternalVswitch { get; set; }

        /// <summary>
        /// : - Hyperv product key.
        /// </summary>
        [Input("hypervProductKey")]
        public Input<string>? HypervProductKey { get; set; }

        /// <summary>
        /// : - Hyperv SKU.
        /// </summary>
        [Input("hypervSku")]
        public Input<bool>? HypervSku { get; set; }

        /// <summary>
        /// : - (Required) Hypervisor gateway.
        /// </summary>
        [Input("hypervisorGateway")]
        public Input<string>? HypervisorGateway { get; set; }

        /// <summary>
        /// : - Hypervisor ISO.
        /// </summary>
        [Input("hypervisorIso")]
        public Input<Inputs.FoundationImageNodesHypervisorIsoGetArgs>? HypervisorIso { get; set; }

        [Input("hypervisorNameserver")]
        public Input<string>? HypervisorNameserver { get; set; }

        /// <summary>
        /// : - (Required) Hypervisor netmask.
        /// </summary>
        [Input("hypervisorNetmask")]
        public Input<string>? HypervisorNetmask { get; set; }

        /// <summary>
        /// : - Hypervisor password.
        /// </summary>
        [Input("hypervisorPassword")]
        public Input<string>? HypervisorPassword { get; set; }

        /// <summary>
        /// : - install script.
        /// </summary>
        [Input("installScript")]
        public Input<string>? InstallScript { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        /// </summary>
        [Input("ipmiGateway")]
        public Input<string>? IpmiGateway { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        /// </summary>
        [Input("ipmiNetmask")]
        public Input<string>? IpmiNetmask { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        /// </summary>
        [Input("ipmiPassword")]
        public Input<string>? IpmiPassword { get; set; }

        /// <summary>
        /// :- (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        /// </summary>
        [Input("ipmiUser")]
        public Input<string>? IpmiUser { get; set; }

        /// <summary>
        /// : - Id of the custom layout which needs to be passed to imaging request.
        /// </summary>
        [Input("layoutEggUuid")]
        public Input<string>? LayoutEggUuid { get; set; }

        /// <summary>
        /// : - (Required) NOS package.
        /// </summary>
        [Input("nosPackage")]
        public Input<string>? NosPackage { get; set; }

        [Input("sessionId")]
        public Input<string>? SessionId { get; set; }

        /// <summary>
        /// : - If hypervisor installation should be skipped.
        /// </summary>
        [Input("skipHypervisor")]
        public Input<bool>? SkipHypervisor { get; set; }

        [Input("svmRescueArgs")]
        private InputList<string>? _svmRescueArgs;

        /// <summary>
        /// : - Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.
        /// </summary>
        public InputList<string> SvmRescueArgs
        {
            get => _svmRescueArgs ?? (_svmRescueArgs = new InputList<string>());
            set => _svmRescueArgs = value;
        }

        /// <summary>
        /// : - Types of tests to be performed.
        /// </summary>
        [Input("tests")]
        public Input<Inputs.FoundationImageNodesTestsGetArgs>? Tests { get; set; }

        /// <summary>
        /// : - UCSM IP address.
        /// </summary>
        [Input("ucsmIp")]
        public Input<string>? UcsmIp { get; set; }

        /// <summary>
        /// : - UCSM password.
        /// </summary>
        [Input("ucsmPassword")]
        public Input<string>? UcsmPassword { get; set; }

        /// <summary>
        /// : - UCSM username.
        /// </summary>
        [Input("ucsmUser")]
        public Input<string>? UcsmUser { get; set; }

        /// <summary>
        /// : - UNC password.
        /// </summary>
        [Input("uncPassword")]
        public Input<string>? UncPassword { get; set; }

        /// <summary>
        /// : - UNC Path.
        /// </summary>
        [Input("uncPath")]
        public Input<string>? UncPath { get; set; }

        /// <summary>
        /// : - UNC username.
        /// </summary>
        [Input("uncUsername")]
        public Input<string>? UncUsername { get; set; }

        /// <summary>
        /// : - xen config types.
        /// </summary>
        [Input("xenConfigType")]
        public Input<string>? XenConfigType { get; set; }

        /// <summary>
        /// : - xen server master IP address.
        /// </summary>
        [Input("xsMasterIp")]
        public Input<string>? XsMasterIp { get; set; }

        [Input("xsMasterLabel")]
        public Input<string>? XsMasterLabel { get; set; }

        /// <summary>
        /// : - xen server master password.
        /// </summary>
        [Input("xsMasterPassword")]
        public Input<string>? XsMasterPassword { get; set; }

        /// <summary>
        /// : - xen server master username.
        /// </summary>
        [Input("xsMasterUsername")]
        public Input<string>? XsMasterUsername { get; set; }

        public FoundationImageNodesState()
        {
        }
    }
}
