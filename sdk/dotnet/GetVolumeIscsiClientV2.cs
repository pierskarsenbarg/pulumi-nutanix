// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetVolumeIscsiClientV2
    {
        /// <summary>
        /// Fetches the iSCSI client details identified by {extId}.
        /// 
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetVolumeIscsiClientV2.Invoke(new()
        ///     {
        ///         ExtId = "be0e4630-23da-4b9c-a76b-f24fd64b46b6",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ##  Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// 
        /// * `ext_id`: -(Required) A query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource.
        /// </summary>
        public static Task<GetVolumeIscsiClientV2Result> InvokeAsync(GetVolumeIscsiClientV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeIscsiClientV2Result>("nutanix:index/getVolumeIscsiClientV2:getVolumeIscsiClientV2", args ?? new GetVolumeIscsiClientV2Args(), options.WithDefaults());

        /// <summary>
        /// Fetches the iSCSI client details identified by {extId}.
        /// 
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetVolumeIscsiClientV2.Invoke(new()
        ///     {
        ///         ExtId = "be0e4630-23da-4b9c-a76b-f24fd64b46b6",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ##  Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// 
        /// * `ext_id`: -(Required) A query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource.
        /// </summary>
        public static Output<GetVolumeIscsiClientV2Result> Invoke(GetVolumeIscsiClientV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeIscsiClientV2Result>("nutanix:index/getVolumeIscsiClientV2:getVolumeIscsiClientV2", args ?? new GetVolumeIscsiClientV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches the iSCSI client details identified by {extId}.
        /// 
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetVolumeIscsiClientV2.Invoke(new()
        ///     {
        ///         ExtId = "be0e4630-23da-4b9c-a76b-f24fd64b46b6",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ##  Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// 
        /// * `ext_id`: -(Required) A query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource.
        /// </summary>
        public static Output<GetVolumeIscsiClientV2Result> Invoke(GetVolumeIscsiClientV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeIscsiClientV2Result>("nutanix:index/getVolumeIscsiClientV2:getVolumeIscsiClientV2", args ?? new GetVolumeIscsiClientV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeIscsiClientV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        [Input("iscsiInitiatorNetworkIds")]
        private List<Inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdArgs>? _iscsiInitiatorNetworkIds;

        /// <summary>
        /// - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
        /// </summary>
        public List<Inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdArgs> IscsiInitiatorNetworkIds
        {
            get => _iscsiInitiatorNetworkIds ?? (_iscsiInitiatorNetworkIds = new List<Inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdArgs>());
            set => _iscsiInitiatorNetworkIds = value;
        }

        public GetVolumeIscsiClientV2Args()
        {
        }
        public static new GetVolumeIscsiClientV2Args Empty => new GetVolumeIscsiClientV2Args();
    }

    public sealed class GetVolumeIscsiClientV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        [Input("iscsiInitiatorNetworkIds")]
        private InputList<Inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdInputArgs>? _iscsiInitiatorNetworkIds;

        /// <summary>
        /// - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
        /// </summary>
        public InputList<Inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdInputArgs> IscsiInitiatorNetworkIds
        {
            get => _iscsiInitiatorNetworkIds ?? (_iscsiInitiatorNetworkIds = new InputList<Inputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdInputArgs>());
            set => _iscsiInitiatorNetworkIds = value;
        }

        public GetVolumeIscsiClientV2InvokeArgs()
        {
        }
        public static new GetVolumeIscsiClientV2InvokeArgs Empty => new GetVolumeIscsiClientV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeIscsiClientV2Result
    {
        public readonly ImmutableArray<Outputs.GetVolumeIscsiClientV2AttachedTargetResult> AttachedTargets;
        /// <summary>
        /// -(Optional) The site where the Volume Group attach operation should be processed. This is an optional field. This field may only be set if Metro DR has been configured for this Volume Group. Valid values are SECONDARY, PRIMARY.
        /// </summary>
        public readonly string AttachmentSite;
        public readonly string ClusterReference;
        /// <summary>
        /// -(Optional) (Optional) The authentication type enabled for the Volume Group. This is an optional field. If omitted, authentication is not configured for the Volume Group. If this is set to CHAP, the target/client secret must be provided. Valid values are CHAP, NONE
        /// </summary>
        public readonly string EnabledAuthentications;
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// -iSCSI initiator name. During the attach operation, exactly one of iscsiInitiatorName and iscsiInitiatorNetworkId must be specified. This field is immutable.
        /// </summary>
        public readonly string IscsiInitiatorName;
        /// <summary>
        /// - An unique address that identifies a device on the internet or a local network in IPv4/IPv6 format or a Fully Qualified Domain Name.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdResult> IscsiInitiatorNetworkIds;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeIscsiClientV2LinkResult> Links;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetVolumeIscsiClientV2Result(
            ImmutableArray<Outputs.GetVolumeIscsiClientV2AttachedTargetResult> attachedTargets,

            string attachmentSite,

            string clusterReference,

            string enabledAuthentications,

            string extId,

            string id,

            string iscsiInitiatorName,

            ImmutableArray<Outputs.GetVolumeIscsiClientV2IscsiInitiatorNetworkIdResult> iscsiInitiatorNetworkIds,

            ImmutableArray<Outputs.GetVolumeIscsiClientV2LinkResult> links,

            string tenantId)
        {
            AttachedTargets = attachedTargets;
            AttachmentSite = attachmentSite;
            ClusterReference = clusterReference;
            EnabledAuthentications = enabledAuthentications;
            ExtId = extId;
            Id = id;
            IscsiInitiatorName = iscsiInitiatorName;
            IscsiInitiatorNetworkIds = iscsiInitiatorNetworkIds;
            Links = links;
            TenantId = tenantId;
        }
    }
}
