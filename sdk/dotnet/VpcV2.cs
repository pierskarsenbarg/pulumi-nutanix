// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides Nutanix resource to create VPC.
    /// </summary>
    [NutanixResourceType("nutanix:index/vpcV2:VpcV2")]
    public partial class VpcV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of DHCP options to be configured.
        /// </summary>
        [Output("commonDhcpOptions")]
        public Output<ImmutableArray<Outputs.VpcV2CommonDhcpOption>> CommonDhcpOptions { get; private set; } = null!;

        /// <summary>
        /// Description of the VPC.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// the vpc uuid.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// External routing domain associated with this route table
        /// </summary>
        [Output("externalRoutingDomainReference")]
        public Output<string> ExternalRoutingDomainReference { get; private set; } = null!;

        /// <summary>
        /// List of external subnets that the VPC is attached to.
        /// </summary>
        [Output("externalSubnets")]
        public Output<ImmutableArray<Outputs.VpcV2ExternalSubnet>> ExternalSubnets { get; private set; } = null!;

        /// <summary>
        /// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
        /// </summary>
        [Output("externallyRoutablePrefixes")]
        public Output<ImmutableArray<Outputs.VpcV2ExternallyRoutablePrefix>> ExternallyRoutablePrefixes { get; private set; } = null!;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.VpcV2Link>> Links { get; private set; } = null!;

        /// <summary>
        /// The vpc kind metadata.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.VpcV2Metadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// Name of the VPC.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("snatIps")]
        public Output<ImmutableArray<Outputs.VpcV2SnatIp>> SnatIps { get; private set; } = null!;

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
        /// </summary>
        [Output("vpcType")]
        public Output<string?> VpcType { get; private set; } = null!;


        /// <summary>
        /// Create a VpcV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpcV2(string name, VpcV2Args? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/vpcV2:VpcV2", name, args ?? new VpcV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private VpcV2(string name, Input<string> id, VpcV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/vpcV2:VpcV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpcV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpcV2 Get(string name, Input<string> id, VpcV2State? state = null, CustomResourceOptions? options = null)
        {
            return new VpcV2(name, id, state, options);
        }
    }

    public sealed class VpcV2Args : global::Pulumi.ResourceArgs
    {
        [Input("commonDhcpOptions")]
        private InputList<Inputs.VpcV2CommonDhcpOptionArgs>? _commonDhcpOptions;

        /// <summary>
        /// List of DHCP options to be configured.
        /// </summary>
        public InputList<Inputs.VpcV2CommonDhcpOptionArgs> CommonDhcpOptions
        {
            get => _commonDhcpOptions ?? (_commonDhcpOptions = new InputList<Inputs.VpcV2CommonDhcpOptionArgs>());
            set => _commonDhcpOptions = value;
        }

        /// <summary>
        /// Description of the VPC.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// External routing domain associated with this route table
        /// </summary>
        [Input("externalRoutingDomainReference")]
        public Input<string>? ExternalRoutingDomainReference { get; set; }

        [Input("externalSubnets")]
        private InputList<Inputs.VpcV2ExternalSubnetArgs>? _externalSubnets;

        /// <summary>
        /// List of external subnets that the VPC is attached to.
        /// </summary>
        public InputList<Inputs.VpcV2ExternalSubnetArgs> ExternalSubnets
        {
            get => _externalSubnets ?? (_externalSubnets = new InputList<Inputs.VpcV2ExternalSubnetArgs>());
            set => _externalSubnets = value;
        }

        [Input("externallyRoutablePrefixes")]
        private InputList<Inputs.VpcV2ExternallyRoutablePrefixArgs>? _externallyRoutablePrefixes;

        /// <summary>
        /// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
        /// </summary>
        public InputList<Inputs.VpcV2ExternallyRoutablePrefixArgs> ExternallyRoutablePrefixes
        {
            get => _externallyRoutablePrefixes ?? (_externallyRoutablePrefixes = new InputList<Inputs.VpcV2ExternallyRoutablePrefixArgs>());
            set => _externallyRoutablePrefixes = value;
        }

        /// <summary>
        /// Name of the VPC.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
        /// </summary>
        [Input("vpcType")]
        public Input<string>? VpcType { get; set; }

        public VpcV2Args()
        {
        }
        public static new VpcV2Args Empty => new VpcV2Args();
    }

    public sealed class VpcV2State : global::Pulumi.ResourceArgs
    {
        [Input("commonDhcpOptions")]
        private InputList<Inputs.VpcV2CommonDhcpOptionGetArgs>? _commonDhcpOptions;

        /// <summary>
        /// List of DHCP options to be configured.
        /// </summary>
        public InputList<Inputs.VpcV2CommonDhcpOptionGetArgs> CommonDhcpOptions
        {
            get => _commonDhcpOptions ?? (_commonDhcpOptions = new InputList<Inputs.VpcV2CommonDhcpOptionGetArgs>());
            set => _commonDhcpOptions = value;
        }

        /// <summary>
        /// Description of the VPC.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// the vpc uuid.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// External routing domain associated with this route table
        /// </summary>
        [Input("externalRoutingDomainReference")]
        public Input<string>? ExternalRoutingDomainReference { get; set; }

        [Input("externalSubnets")]
        private InputList<Inputs.VpcV2ExternalSubnetGetArgs>? _externalSubnets;

        /// <summary>
        /// List of external subnets that the VPC is attached to.
        /// </summary>
        public InputList<Inputs.VpcV2ExternalSubnetGetArgs> ExternalSubnets
        {
            get => _externalSubnets ?? (_externalSubnets = new InputList<Inputs.VpcV2ExternalSubnetGetArgs>());
            set => _externalSubnets = value;
        }

        [Input("externallyRoutablePrefixes")]
        private InputList<Inputs.VpcV2ExternallyRoutablePrefixGetArgs>? _externallyRoutablePrefixes;

        /// <summary>
        /// CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
        /// </summary>
        public InputList<Inputs.VpcV2ExternallyRoutablePrefixGetArgs> ExternallyRoutablePrefixes
        {
            get => _externallyRoutablePrefixes ?? (_externallyRoutablePrefixes = new InputList<Inputs.VpcV2ExternallyRoutablePrefixGetArgs>());
            set => _externallyRoutablePrefixes = value;
        }

        [Input("links")]
        private InputList<Inputs.VpcV2LinkGetArgs>? _links;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public InputList<Inputs.VpcV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.VpcV2LinkGetArgs>());
            set => _links = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.VpcV2MetadataGetArgs>? _metadatas;

        /// <summary>
        /// The vpc kind metadata.
        /// </summary>
        public InputList<Inputs.VpcV2MetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.VpcV2MetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the VPC.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("snatIps")]
        private InputList<Inputs.VpcV2SnatIpGetArgs>? _snatIps;
        public InputList<Inputs.VpcV2SnatIpGetArgs> SnatIps
        {
            get => _snatIps ?? (_snatIps = new InputList<Inputs.VpcV2SnatIpGetArgs>());
            set => _snatIps = value;
        }

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Type of VPC. Acceptable values are "REGULAR" , "TRANSIT".
        /// </summary>
        [Input("vpcType")]
        public Input<string>? VpcType { get; set; }

        public VpcV2State()
        {
        }
        public static new VpcV2State Empty => new VpcV2State();
    }
}
