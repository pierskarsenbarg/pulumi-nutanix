// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to perform the log cactup for database instance based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbLogCatchups("name", new()
    ///     {
    ///         DatabaseId = "{{ DatabaseID }}",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbLogCatchups:NdbLogCatchups")]
    public partial class NdbLogCatchups : global::Pulumi.CustomResource
    {
        [Output("databaseId")]
        public Output<string?> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        /// </summary>
        [Output("forRestore")]
        public Output<bool?> ForRestore { get; private set; } = null!;

        /// <summary>
        /// it helps to perform same operation with same config.
        /// 
        /// 
        /// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        /// </summary>
        [Output("logCatchupVersion")]
        public Output<int?> LogCatchupVersion { get; private set; } = null!;

        /// <summary>
        /// Time machine id of
        /// </summary>
        [Output("timeMachineId")]
        public Output<string?> TimeMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a NdbLogCatchups resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbLogCatchups(string name, NdbLogCatchupsArgs? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbLogCatchups:NdbLogCatchups", name, args ?? new NdbLogCatchupsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbLogCatchups(string name, Input<string> id, NdbLogCatchupsState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbLogCatchups:NdbLogCatchups", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbLogCatchups resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbLogCatchups Get(string name, Input<string> id, NdbLogCatchupsState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbLogCatchups(name, id, state, options);
        }
    }

    public sealed class NdbLogCatchupsArgs : global::Pulumi.ResourceArgs
    {
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        /// </summary>
        [Input("forRestore")]
        public Input<bool>? ForRestore { get; set; }

        /// <summary>
        /// it helps to perform same operation with same config.
        /// 
        /// 
        /// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        /// </summary>
        [Input("logCatchupVersion")]
        public Input<int>? LogCatchupVersion { get; set; }

        /// <summary>
        /// Time machine id of
        /// </summary>
        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        public NdbLogCatchupsArgs()
        {
        }
        public static new NdbLogCatchupsArgs Empty => new NdbLogCatchupsArgs();
    }

    public sealed class NdbLogCatchupsState : global::Pulumi.ResourceArgs
    {
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        /// </summary>
        [Input("forRestore")]
        public Input<bool>? ForRestore { get; set; }

        /// <summary>
        /// it helps to perform same operation with same config.
        /// 
        /// 
        /// See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        /// </summary>
        [Input("logCatchupVersion")]
        public Input<int>? LogCatchupVersion { get; set; }

        /// <summary>
        /// Time machine id of
        /// </summary>
        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        public NdbLogCatchupsState()
        {
        }
        public static new NdbLogCatchupsState Empty => new NdbLogCatchupsState();
    }
}
