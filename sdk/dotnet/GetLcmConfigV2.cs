// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetLcmConfigV2
    {
        /// <summary>
        /// Get LCM configuration.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var lcm_configuration = Nutanix.GetLcmConfigV2.Invoke();
        /// 
        ///     var lcm_configuration_cluster = Nutanix.GetLcmConfigV2.Invoke(new()
        ///     {
        ///         XClusterId = "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLcmConfigV2Result> InvokeAsync(GetLcmConfigV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLcmConfigV2Result>("nutanix:index/getLcmConfigV2:getLcmConfigV2", args ?? new GetLcmConfigV2Args(), options.WithDefaults());

        /// <summary>
        /// Get LCM configuration.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var lcm_configuration = Nutanix.GetLcmConfigV2.Invoke();
        /// 
        ///     var lcm_configuration_cluster = Nutanix.GetLcmConfigV2.Invoke(new()
        ///     {
        ///         XClusterId = "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLcmConfigV2Result> Invoke(GetLcmConfigV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLcmConfigV2Result>("nutanix:index/getLcmConfigV2:getLcmConfigV2", args ?? new GetLcmConfigV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get LCM configuration.
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var lcm_configuration = Nutanix.GetLcmConfigV2.Invoke();
        /// 
        ///     var lcm_configuration_cluster = Nutanix.GetLcmConfigV2.Invoke(new()
        ///     {
        ///         XClusterId = "0005a104-0b0b-4b0b-8005-0b0b0b0b0b0b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLcmConfigV2Result> Invoke(GetLcmConfigV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLcmConfigV2Result>("nutanix:index/getLcmConfigV2:getLcmConfigV2", args ?? new GetLcmConfigV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLcmConfigV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public string? XClusterId { get; set; }

        public GetLcmConfigV2Args()
        {
        }
        public static new GetLcmConfigV2Args Empty => new GetLcmConfigV2Args();
    }

    public sealed class GetLcmConfigV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public Input<string>? XClusterId { get; set; }

        public GetLcmConfigV2InvokeArgs()
        {
        }
        public static new GetLcmConfigV2InvokeArgs Empty => new GetLcmConfigV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetLcmConfigV2Result
    {
        /// <summary>
        /// The scheduled time in "%H:%M" 24-hour format of the next inventory execution. Used when auto_inventory_enabled is set to True. The default schedule time is 03:00(AM).
        /// </summary>
        public readonly string AutoInventorySchedule;
        /// <summary>
        /// This field indicates whether LCM framework on the cluster is running in connected-site mode or darksite mode. Values are :
        /// - `CONNECTED_SITE`: In connected-site, LCM on the cluster has internet connectivity to reach configured portal for downloading LCM modules/bundles etc.
        /// - `DARKSITE_DIRECT_UPLOAD`: LCM on the cluster does not have external connectivity and will have a facility to upload darksite bundles through LCM.
        /// - `DARKSITE_WEB_SERVER`: LCM on the cluster does not have external connectivity and will have a connection to darksite webserver maintained by the customer.
        /// </summary>
        public readonly string ConnectivityType;
        /// <summary>
        /// List of entities for which One-Click upgrades are not available.
        /// </summary>
        public readonly ImmutableArray<string> DeprecatedSoftwareEntities;
        /// <summary>
        /// User friendly display version of LCM installed on the cluster.
        /// </summary>
        public readonly string DisplayVersion;
        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// Indicates if LCM is enabled to auto-upgrade products. The default value is False.
        /// </summary>
        public readonly bool HasModuleAutoUpgradeEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if the auto inventory operation is enabled. The default value is set to False.
        /// </summary>
        public readonly bool IsAutoInventoryEnabled;
        /// <summary>
        /// Indicates if the bundle is uploaded or not.
        /// </summary>
        public readonly bool IsFrameworkBundleUploaded;
        /// <summary>
        /// Indicates if the LCM URL has HTTPS enabled. The default value is True.
        /// </summary>
        public readonly bool IsHttpsEnabled;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmConfigV2LinkResult> Links;
        /// <summary>
        /// List of entities for which One-Click upgrades are supported.
        /// </summary>
        public readonly ImmutableArray<string> SupportedSoftwareEntities;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// URL of the LCM repository.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// LCM version installed on the cluster.
        /// </summary>
        public readonly string Version;
        public readonly string? XClusterId;

        [OutputConstructor]
        private GetLcmConfigV2Result(
            string autoInventorySchedule,

            string connectivityType,

            ImmutableArray<string> deprecatedSoftwareEntities,

            string displayVersion,

            string extId,

            bool hasModuleAutoUpgradeEnabled,

            string id,

            bool isAutoInventoryEnabled,

            bool isFrameworkBundleUploaded,

            bool isHttpsEnabled,

            ImmutableArray<Outputs.GetLcmConfigV2LinkResult> links,

            ImmutableArray<string> supportedSoftwareEntities,

            string tenantId,

            string url,

            string version,

            string? xClusterId)
        {
            AutoInventorySchedule = autoInventorySchedule;
            ConnectivityType = connectivityType;
            DeprecatedSoftwareEntities = deprecatedSoftwareEntities;
            DisplayVersion = displayVersion;
            ExtId = extId;
            HasModuleAutoUpgradeEnabled = hasModuleAutoUpgradeEnabled;
            Id = id;
            IsAutoInventoryEnabled = isAutoInventoryEnabled;
            IsFrameworkBundleUploaded = isFrameworkBundleUploaded;
            IsHttpsEnabled = isHttpsEnabled;
            Links = links;
            SupportedSoftwareEntities = supportedSoftwareEntities;
            TenantId = tenantId;
            Url = url;
            Version = version;
            XClusterId = xClusterId;
        }
    }
}
