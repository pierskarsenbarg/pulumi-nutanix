// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNgtConfigurationV2
    {
        /// <summary>
        /// Provides Nutanix datasource to Retrieves the Nutanix Guest Tools configuration for a Virtual Machine.
        /// 
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetNgtConfigurationV2.Invoke(new()
        ///     {
        ///         ExtId = "f29535e2-6bd8-4782-b879-409f17217b31",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNgtConfigurationV2Result> InvokeAsync(GetNgtConfigurationV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNgtConfigurationV2Result>("nutanix:index/getNgtConfigurationV2:getNgtConfigurationV2", args ?? new GetNgtConfigurationV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides Nutanix datasource to Retrieves the Nutanix Guest Tools configuration for a Virtual Machine.
        /// 
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetNgtConfigurationV2.Invoke(new()
        ///     {
        ///         ExtId = "f29535e2-6bd8-4782-b879-409f17217b31",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNgtConfigurationV2Result> Invoke(GetNgtConfigurationV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNgtConfigurationV2Result>("nutanix:index/getNgtConfigurationV2:getNgtConfigurationV2", args ?? new GetNgtConfigurationV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides Nutanix datasource to Retrieves the Nutanix Guest Tools configuration for a Virtual Machine.
        /// 
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetNgtConfigurationV2.Invoke(new()
        ///     {
        ///         ExtId = "f29535e2-6bd8-4782-b879-409f17217b31",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNgtConfigurationV2Result> Invoke(GetNgtConfigurationV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNgtConfigurationV2Result>("nutanix:index/getNgtConfigurationV2:getNgtConfigurationV2", args ?? new GetNgtConfigurationV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNgtConfigurationV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// uuid of the Virtual Machine.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetNgtConfigurationV2Args()
        {
        }
        public static new GetNgtConfigurationV2Args Empty => new GetNgtConfigurationV2Args();
    }

    public sealed class GetNgtConfigurationV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// uuid of the Virtual Machine.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetNgtConfigurationV2InvokeArgs()
        {
        }
        public static new GetNgtConfigurationV2InvokeArgs Empty => new GetNgtConfigurationV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetNgtConfigurationV2Result
    {
        /// <summary>
        /// Version of Nutanix Guest Tools available on the cluster.
        /// </summary>
        public readonly string AvailableVersion;
        /// <summary>
        /// The list of the application names that are enabled on the guest VM. [`SELF_SERVICE_RESTORE`, `VSS_SNAPSHOT`]
        /// </summary>
        public readonly ImmutableArray<string> Capablities;
        /// <summary>
        /// uuid of the Virtual Machine.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// Version of the operating system on the VM.
        /// </summary>
        public readonly string GuestOsVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether Nutanix Guest Tools is enabled or not.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// Indicates whether Nutanix Guest Tools is installed on the VM or not.
        /// </summary>
        public readonly bool IsInstalled;
        /// <summary>
        /// Indicates whether Nutanix Guest Tools ISO is inserted or not.
        /// </summary>
        public readonly bool IsIsoInserted;
        /// <summary>
        /// Indicates whether the communication from VM to CVM is active or not.
        /// </summary>
        public readonly bool IsReachable;
        /// <summary>
        /// Indicates whether the VM mobility drivers are installed on the VM or not.
        /// </summary>
        public readonly bool IsVmMobilityDriversInstalled;
        /// <summary>
        /// Indicates whether the VM is configured to take VSS snapshots through NGT or not.
        /// </summary>
        public readonly bool IsVssSnapshotCapable;
        /// <summary>
        /// Version of Nutanix Guest Tools installed on the VM.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetNgtConfigurationV2Result(
            string availableVersion,

            ImmutableArray<string> capablities,

            string extId,

            string guestOsVersion,

            string id,

            bool isEnabled,

            bool isInstalled,

            bool isIsoInserted,

            bool isReachable,

            bool isVmMobilityDriversInstalled,

            bool isVssSnapshotCapable,

            string version)
        {
            AvailableVersion = availableVersion;
            Capablities = capablities;
            ExtId = extId;
            GuestOsVersion = guestOsVersion;
            Id = id;
            IsEnabled = isEnabled;
            IsInstalled = isInstalled;
            IsIsoInserted = isIsoInserted;
            IsReachable = isReachable;
            IsVmMobilityDriversInstalled = isVmMobilityDriversInstalled;
            IsVssSnapshotCapable = isVssSnapshotCapable;
            Version = version;
        }
    }
}
