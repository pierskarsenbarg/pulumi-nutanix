// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides Nutanix resource to create authorization policy.
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ap_example = new Nutanix.AuthorizationPolicyV2("ap-example", new()
    ///     {
    ///         AuthorizationPolicyType = "USER_DEFINED",
    ///         Description = "authorization policy example",
    ///         DisplayName = "auth_policy_example",
    ///         Entities = new[]
    ///         {
    ///             new Nutanix.Inputs.AuthorizationPolicyV2EntityArgs
    ///             {
    ///                 Reserved = "{\"images\":{\"*\":{\"eq\":\"*\"}}}",
    ///             },
    ///             new Nutanix.Inputs.AuthorizationPolicyV2EntityArgs
    ///             {
    ///                 Reserved = "{\"marketplace_item\":{\"owner_uuid\":{\"eq\":\"SELF_OWNED\"}}}",
    ///             },
    ///         },
    ///         Identities = new[]
    ///         {
    ///             new Nutanix.Inputs.AuthorizationPolicyV2IdentityArgs
    ///             {
    ///                 Reserved = "{\"user\":{\"uuid\":{\"anyof\":[\"00000000-0000-0000-0000-000000000000\"]}}}",
    ///             },
    ///         },
    ///         Role = "ba250e3e-1db1-4950-917f-a9e2ea35b8e3",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/authorizationPolicyV2:AuthorizationPolicyV2")]
    public partial class AuthorizationPolicyV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Type of Authorization Policy.
        /// * `PREDEFINED_READ_ONLY` : System-defined read-only ACP, i.e. no modifications allowed.
        /// * `SERVICE_DEFINED_READ_ONLY` : Read-only ACP defined by a service.
        /// * `PREDEFINED_UPDATE_IDENTITY_ONLY` : System-defined ACP prohibiting any modifications from customer.
        /// * `SERVICE_DEFINED` : ACP defined by a service.
        /// * `USER_DEFINED` : ACP defined by an User.
        /// </summary>
        [Output("authorizationPolicyType")]
        public Output<string?> AuthorizationPolicyType { get; private set; } = null!;

        /// <summary>
        /// Client that created the entity.
        /// </summary>
        [Output("clientName")]
        public Output<string> ClientName { get; private set; } = null!;

        /// <summary>
        /// User or Service Name that created the Authorization Policy.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The creation time of the Authorization Policy.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// Description of the Authorization Policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the Authorization Policy.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The entities being qualified by the Authorization Policy.
        /// </summary>
        [Output("entities")]
        public Output<ImmutableArray<Outputs.AuthorizationPolicyV2Entity>> Entities { get; private set; } = null!;

        /// <summary>
        /// ext_id of Authorization policy.
        /// </summary>
        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        /// <summary>
        /// The identities for which the Authorization Policy is created.
        /// </summary>
        [Output("identities")]
        public Output<ImmutableArray<Outputs.AuthorizationPolicyV2Identity>> Identities { get; private set; } = null!;

        /// <summary>
        /// Flag identifying if the Authorization Policy is system defined or not.
        /// </summary>
        [Output("isSystemDefined")]
        public Output<bool> IsSystemDefined { get; private set; } = null!;

        /// <summary>
        /// The time when the Authorization Policy was last updated.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// The Role associated with the Authorization Policy.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;


        /// <summary>
        /// Create a AuthorizationPolicyV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthorizationPolicyV2(string name, AuthorizationPolicyV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/authorizationPolicyV2:AuthorizationPolicyV2", name, args ?? new AuthorizationPolicyV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private AuthorizationPolicyV2(string name, Input<string> id, AuthorizationPolicyV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/authorizationPolicyV2:AuthorizationPolicyV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthorizationPolicyV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthorizationPolicyV2 Get(string name, Input<string> id, AuthorizationPolicyV2State? state = null, CustomResourceOptions? options = null)
        {
            return new AuthorizationPolicyV2(name, id, state, options);
        }
    }

    public sealed class AuthorizationPolicyV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of Authorization Policy.
        /// * `PREDEFINED_READ_ONLY` : System-defined read-only ACP, i.e. no modifications allowed.
        /// * `SERVICE_DEFINED_READ_ONLY` : Read-only ACP defined by a service.
        /// * `PREDEFINED_UPDATE_IDENTITY_ONLY` : System-defined ACP prohibiting any modifications from customer.
        /// * `SERVICE_DEFINED` : ACP defined by a service.
        /// * `USER_DEFINED` : ACP defined by an User.
        /// </summary>
        [Input("authorizationPolicyType")]
        public Input<string>? AuthorizationPolicyType { get; set; }

        /// <summary>
        /// Description of the Authorization Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the Authorization Policy.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("entities", required: true)]
        private InputList<Inputs.AuthorizationPolicyV2EntityArgs>? _entities;

        /// <summary>
        /// The entities being qualified by the Authorization Policy.
        /// </summary>
        public InputList<Inputs.AuthorizationPolicyV2EntityArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.AuthorizationPolicyV2EntityArgs>());
            set => _entities = value;
        }

        /// <summary>
        /// ext_id of Authorization policy.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("identities", required: true)]
        private InputList<Inputs.AuthorizationPolicyV2IdentityArgs>? _identities;

        /// <summary>
        /// The identities for which the Authorization Policy is created.
        /// </summary>
        public InputList<Inputs.AuthorizationPolicyV2IdentityArgs> Identities
        {
            get => _identities ?? (_identities = new InputList<Inputs.AuthorizationPolicyV2IdentityArgs>());
            set => _identities = value;
        }

        /// <summary>
        /// The Role associated with the Authorization Policy.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        public AuthorizationPolicyV2Args()
        {
        }
        public static new AuthorizationPolicyV2Args Empty => new AuthorizationPolicyV2Args();
    }

    public sealed class AuthorizationPolicyV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of Authorization Policy.
        /// * `PREDEFINED_READ_ONLY` : System-defined read-only ACP, i.e. no modifications allowed.
        /// * `SERVICE_DEFINED_READ_ONLY` : Read-only ACP defined by a service.
        /// * `PREDEFINED_UPDATE_IDENTITY_ONLY` : System-defined ACP prohibiting any modifications from customer.
        /// * `SERVICE_DEFINED` : ACP defined by a service.
        /// * `USER_DEFINED` : ACP defined by an User.
        /// </summary>
        [Input("authorizationPolicyType")]
        public Input<string>? AuthorizationPolicyType { get; set; }

        /// <summary>
        /// Client that created the entity.
        /// </summary>
        [Input("clientName")]
        public Input<string>? ClientName { get; set; }

        /// <summary>
        /// User or Service Name that created the Authorization Policy.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The creation time of the Authorization Policy.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// Description of the Authorization Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the Authorization Policy.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("entities")]
        private InputList<Inputs.AuthorizationPolicyV2EntityGetArgs>? _entities;

        /// <summary>
        /// The entities being qualified by the Authorization Policy.
        /// </summary>
        public InputList<Inputs.AuthorizationPolicyV2EntityGetArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.AuthorizationPolicyV2EntityGetArgs>());
            set => _entities = value;
        }

        /// <summary>
        /// ext_id of Authorization policy.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("identities")]
        private InputList<Inputs.AuthorizationPolicyV2IdentityGetArgs>? _identities;

        /// <summary>
        /// The identities for which the Authorization Policy is created.
        /// </summary>
        public InputList<Inputs.AuthorizationPolicyV2IdentityGetArgs> Identities
        {
            get => _identities ?? (_identities = new InputList<Inputs.AuthorizationPolicyV2IdentityGetArgs>());
            set => _identities = value;
        }

        /// <summary>
        /// Flag identifying if the Authorization Policy is system defined or not.
        /// </summary>
        [Input("isSystemDefined")]
        public Input<bool>? IsSystemDefined { get; set; }

        /// <summary>
        /// The time when the Authorization Policy was last updated.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        /// <summary>
        /// The Role associated with the Authorization Policy.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public AuthorizationPolicyV2State()
        {
        }
        public static new AuthorizationPolicyV2State Empty => new AuthorizationPolicyV2State();
    }
}
