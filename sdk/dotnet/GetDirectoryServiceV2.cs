// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetDirectoryServiceV2
    {
        /// <summary>
        /// Provides a datasource to retrieve all Directory Service(s).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetDirectoryServiceV2.Invoke(new()
        ///     {
        ///         ExtId = "directory service ext id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDirectoryServiceV2Result> InvokeAsync(GetDirectoryServiceV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryServiceV2Result>("nutanix:index/getDirectoryServiceV2:getDirectoryServiceV2", args ?? new GetDirectoryServiceV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve all Directory Service(s).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetDirectoryServiceV2.Invoke(new()
        ///     {
        ///         ExtId = "directory service ext id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDirectoryServiceV2Result> Invoke(GetDirectoryServiceV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirectoryServiceV2Result>("nutanix:index/getDirectoryServiceV2:getDirectoryServiceV2", args ?? new GetDirectoryServiceV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve all Directory Service(s).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetDirectoryServiceV2.Invoke(new()
        ///     {
        ///         ExtId = "directory service ext id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDirectoryServiceV2Result> Invoke(GetDirectoryServiceV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirectoryServiceV2Result>("nutanix:index/getDirectoryServiceV2:getDirectoryServiceV2", args ?? new GetDirectoryServiceV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDirectoryServiceV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) External identifier of the Directory Service.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetDirectoryServiceV2Args()
        {
        }
        public static new GetDirectoryServiceV2Args Empty => new GetDirectoryServiceV2Args();
    }

    public sealed class GetDirectoryServiceV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) External identifier of the Directory Service.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetDirectoryServiceV2InvokeArgs()
        {
        }
        public static new GetDirectoryServiceV2InvokeArgs Empty => new GetDirectoryServiceV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetDirectoryServiceV2Result
    {
        /// <summary>
        /// - User or Service who created the Directory Service.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// - Creation time of the Directory Service.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// - Type of Directory Service, Supported values are: "ACTIVE_DIRECTORY" (Directory Service type is Active Directory.) and "OPEN_LDAP" (Directory Service type is Open LDAP.)
        /// </summary>
        public readonly string DirectoryType;
        /// <summary>
        /// - Domain name for the Directory Service.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// - Group membership search type for the Directory Service. Supported values are: "NON_RECURSIVE" (Doesn't search recursively within groups.) and "RECURSIVE" (Searches recursively within groups.)
        /// </summary>
        public readonly string GroupSearchType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - Last updated time of the Directory Service.
        /// </summary>
        public readonly string LastUpdatedTime;
        /// <summary>
        /// - Name for the Directory Service.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// - Configuration for OpenLDAP Directory Service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDirectoryServiceV2OpenLdapConfigurationResult> OpenLdapConfigurations;
        /// <summary>
        /// - Secondary URL for the Directory Service.
        /// </summary>
        public readonly ImmutableArray<string> SecondaryUrls;
        /// <summary>
        /// - Information of Service account to connect to the Directory Service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDirectoryServiceV2ServiceAccountResult> ServiceAccounts;
        /// <summary>
        /// - URL for the Directory Service.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// - List of allowed User Groups for the Directory Service.
        /// </summary>
        public readonly ImmutableArray<string> WhiteListedGroups;

        [OutputConstructor]
        private GetDirectoryServiceV2Result(
            string createdBy,

            string createdTime,

            string directoryType,

            string domainName,

            string extId,

            string groupSearchType,

            string id,

            string lastUpdatedTime,

            string name,

            ImmutableArray<Outputs.GetDirectoryServiceV2OpenLdapConfigurationResult> openLdapConfigurations,

            ImmutableArray<string> secondaryUrls,

            ImmutableArray<Outputs.GetDirectoryServiceV2ServiceAccountResult> serviceAccounts,

            string url,

            ImmutableArray<string> whiteListedGroups)
        {
            CreatedBy = createdBy;
            CreatedTime = createdTime;
            DirectoryType = directoryType;
            DomainName = domainName;
            ExtId = extId;
            GroupSearchType = groupSearchType;
            Id = id;
            LastUpdatedTime = lastUpdatedTime;
            Name = name;
            OpenLdapConfigurations = openLdapConfigurations;
            SecondaryUrls = secondaryUrls;
            ServiceAccounts = serviceAccounts;
            Url = url;
            WhiteListedGroups = whiteListedGroups;
        }
    }
}
