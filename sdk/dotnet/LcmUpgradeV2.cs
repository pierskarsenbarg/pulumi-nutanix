// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Perform upgrade operation to a specific target version for discovered LCM entity/entities.
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // upgrade the entity
    ///     var upgrade = new Nutanix.LcmUpgradeV2("upgrade", new()
    ///     {
    ///         EntityUpdateSpecs = new[]
    ///         {
    ///             new Nutanix.Inputs.LcmUpgradeV2EntityUpdateSpecArgs
    ///             {
    ///                 EntityUuid = "0c5c9e53-3551-4c5d-b13c-e41c04cbfaf7",
    ///                 ToVersion = "4.0.0",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/lcmUpgradeV2:LcmUpgradeV2")]
    public partial class LcmUpgradeV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        [Output("autoHandleFlags")]
        public Output<ImmutableArray<string>> AutoHandleFlags { get; private set; } = null!;

        /// <summary>
        /// List of entity update objects for getting recommendations.
        /// </summary>
        [Output("entityUpdateSpecs")]
        public Output<ImmutableArray<Outputs.LcmUpgradeV2EntityUpdateSpec>> EntityUpdateSpecs { get; private set; } = null!;

        /// <summary>
        /// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
        /// </summary>
        [Output("managementServer")]
        public Output<Outputs.LcmUpgradeV2ManagementServer?> ManagementServer { get; private set; } = null!;

        /// <summary>
        /// Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode. Value in Range [ 60 .. 86400]
        /// </summary>
        [Output("maxWaitTimeInSecs")]
        public Output<int?> MaxWaitTimeInSecs { get; private set; } = null!;

        /// <summary>
        /// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        [Output("skippedPrecheckFlags")]
        public Output<ImmutableArray<string>> SkippedPrecheckFlags { get; private set; } = null!;

        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Output("xClusterId")]
        public Output<string?> XClusterId { get; private set; } = null!;


        /// <summary>
        /// Create a LcmUpgradeV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LcmUpgradeV2(string name, LcmUpgradeV2Args? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/lcmUpgradeV2:LcmUpgradeV2", name, args ?? new LcmUpgradeV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private LcmUpgradeV2(string name, Input<string> id, LcmUpgradeV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/lcmUpgradeV2:LcmUpgradeV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LcmUpgradeV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LcmUpgradeV2 Get(string name, Input<string> id, LcmUpgradeV2State? state = null, CustomResourceOptions? options = null)
        {
            return new LcmUpgradeV2(name, id, state, options);
        }
    }

    public sealed class LcmUpgradeV2Args : global::Pulumi.ResourceArgs
    {
        [Input("autoHandleFlags")]
        private InputList<string>? _autoHandleFlags;

        /// <summary>
        /// List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        public InputList<string> AutoHandleFlags
        {
            get => _autoHandleFlags ?? (_autoHandleFlags = new InputList<string>());
            set => _autoHandleFlags = value;
        }

        [Input("entityUpdateSpecs")]
        private InputList<Inputs.LcmUpgradeV2EntityUpdateSpecArgs>? _entityUpdateSpecs;

        /// <summary>
        /// List of entity update objects for getting recommendations.
        /// </summary>
        public InputList<Inputs.LcmUpgradeV2EntityUpdateSpecArgs> EntityUpdateSpecs
        {
            get => _entityUpdateSpecs ?? (_entityUpdateSpecs = new InputList<Inputs.LcmUpgradeV2EntityUpdateSpecArgs>());
            set => _entityUpdateSpecs = value;
        }

        /// <summary>
        /// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
        /// </summary>
        [Input("managementServer")]
        public Input<Inputs.LcmUpgradeV2ManagementServerArgs>? ManagementServer { get; set; }

        /// <summary>
        /// Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode. Value in Range [ 60 .. 86400]
        /// </summary>
        [Input("maxWaitTimeInSecs")]
        public Input<int>? MaxWaitTimeInSecs { get; set; }

        [Input("skippedPrecheckFlags")]
        private InputList<string>? _skippedPrecheckFlags;

        /// <summary>
        /// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        public InputList<string> SkippedPrecheckFlags
        {
            get => _skippedPrecheckFlags ?? (_skippedPrecheckFlags = new InputList<string>());
            set => _skippedPrecheckFlags = value;
        }

        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public Input<string>? XClusterId { get; set; }

        public LcmUpgradeV2Args()
        {
        }
        public static new LcmUpgradeV2Args Empty => new LcmUpgradeV2Args();
    }

    public sealed class LcmUpgradeV2State : global::Pulumi.ResourceArgs
    {
        [Input("autoHandleFlags")]
        private InputList<string>? _autoHandleFlags;

        /// <summary>
        /// List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        public InputList<string> AutoHandleFlags
        {
            get => _autoHandleFlags ?? (_autoHandleFlags = new InputList<string>());
            set => _autoHandleFlags = value;
        }

        [Input("entityUpdateSpecs")]
        private InputList<Inputs.LcmUpgradeV2EntityUpdateSpecGetArgs>? _entityUpdateSpecs;

        /// <summary>
        /// List of entity update objects for getting recommendations.
        /// </summary>
        public InputList<Inputs.LcmUpgradeV2EntityUpdateSpecGetArgs> EntityUpdateSpecs
        {
            get => _entityUpdateSpecs ?? (_entityUpdateSpecs = new InputList<Inputs.LcmUpgradeV2EntityUpdateSpecGetArgs>());
            set => _entityUpdateSpecs = value;
        }

        /// <summary>
        /// Cluster management server configuration used while updating clusters with ESX or Hyper-V.
        /// </summary>
        [Input("managementServer")]
        public Input<Inputs.LcmUpgradeV2ManagementServerGetArgs>? ManagementServer { get; set; }

        /// <summary>
        /// Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode. Value in Range [ 60 .. 86400]
        /// </summary>
        [Input("maxWaitTimeInSecs")]
        public Input<int>? MaxWaitTimeInSecs { get; set; }

        [Input("skippedPrecheckFlags")]
        private InputList<string>? _skippedPrecheckFlags;

        /// <summary>
        /// List of prechecks to skip. The allowed value is 'powerOffUvms' that skips the pinned VM prechecks. Items Enum: `POWER_OFF_UVMS`
        /// </summary>
        public InputList<string> SkippedPrecheckFlags
        {
            get => _skippedPrecheckFlags ?? (_skippedPrecheckFlags = new InputList<string>());
            set => _skippedPrecheckFlags = value;
        }

        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        [Input("xClusterId")]
        public Input<string>? XClusterId { get; set; }

        public LcmUpgradeV2State()
        {
        }
        public static new LcmUpgradeV2State Empty => new LcmUpgradeV2State();
    }
}
