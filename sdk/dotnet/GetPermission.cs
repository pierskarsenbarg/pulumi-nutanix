// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetPermission
    {
        /// <summary>
        /// Describe a Nutanix Permission and its values (if it has them).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byuuid = Nutanix.GetPermission.Invoke(new()
        ///     {
        ///         PermissionId = "26b81a55-2bca-48c6-9fab-4f82c6bb4284",
        ///     });
        /// 
        ///     var byname = Nutanix.GetPermission.Invoke(new()
        ///     {
        ///         PermissionName = "Access_Console_Virtual_Machine",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPermissionResult> InvokeAsync(GetPermissionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPermissionResult>("nutanix:index/getPermission:getPermission", args ?? new GetPermissionArgs(), options.WithDefaults());

        /// <summary>
        /// Describe a Nutanix Permission and its values (if it has them).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byuuid = Nutanix.GetPermission.Invoke(new()
        ///     {
        ///         PermissionId = "26b81a55-2bca-48c6-9fab-4f82c6bb4284",
        ///     });
        /// 
        ///     var byname = Nutanix.GetPermission.Invoke(new()
        ///     {
        ///         PermissionName = "Access_Console_Virtual_Machine",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPermissionResult> Invoke(GetPermissionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPermissionResult>("nutanix:index/getPermission:getPermission", args ?? new GetPermissionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPermissionArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<Inputs.GetPermissionCategoryArgs>? _categories;

        /// <summary>
        /// The categories for this resource.
        /// </summary>
        public List<Inputs.GetPermissionCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetPermissionCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// The `id` of the permission.
        /// </summary>
        [Input("permissionId")]
        public string? PermissionId { get; set; }

        /// <summary>
        /// The `name` of the permission.
        /// </summary>
        [Input("permissionName")]
        public string? PermissionName { get; set; }

        public GetPermissionArgs()
        {
        }
        public static new GetPermissionArgs Empty => new GetPermissionArgs();
    }

    public sealed class GetPermissionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private InputList<Inputs.GetPermissionCategoryInputArgs>? _categories;

        /// <summary>
        /// The categories for this resource.
        /// </summary>
        public InputList<Inputs.GetPermissionCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetPermissionCategoryInputArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// The `id` of the permission.
        /// </summary>
        [Input("permissionId")]
        public Input<string>? PermissionId { get; set; }

        /// <summary>
        /// The `name` of the permission.
        /// </summary>
        [Input("permissionName")]
        public Input<string>? PermissionName { get; set; }

        public GetPermissionInvokeArgs()
        {
        }
        public static new GetPermissionInvokeArgs Empty => new GetPermissionInvokeArgs();
    }


    [OutputType]
    public sealed class GetPermissionResult
    {
        public readonly string ApiVersion;
        /// <summary>
        /// The categories for this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPermissionCategoryResult> Categories;
        /// <summary>
        /// A description for the permission.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// . The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPermissionFieldResult> Fields;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required) The kind name (Default value: `project`).
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The permission kind metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// the name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The operation that is being performed on a given kind.
        /// </summary>
        public readonly string Operation;
        /// <summary>
        /// The reference to a user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> OwnerReference;
        public readonly string? PermissionId;
        public readonly string? PermissionName;
        /// <summary>
        /// The reference to a project.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ProjectReference;
        /// <summary>
        /// The state of the permission.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetPermissionResult(
            string apiVersion,

            ImmutableArray<Outputs.GetPermissionCategoryResult> categories,

            string description,

            ImmutableArray<Outputs.GetPermissionFieldResult> fields,

            string id,

            string kind,

            ImmutableDictionary<string, string> metadata,

            string name,

            string operation,

            ImmutableDictionary<string, string> ownerReference,

            string? permissionId,

            string? permissionName,

            ImmutableDictionary<string, string> projectReference,

            string state)
        {
            ApiVersion = apiVersion;
            Categories = categories;
            Description = description;
            Fields = fields;
            Id = id;
            Kind = kind;
            Metadata = metadata;
            Name = name;
            Operation = operation;
            OwnerReference = ownerReference;
            PermissionId = permissionId;
            PermissionName = permissionName;
            ProjectReference = projectReference;
            State = state;
        }
    }
}
