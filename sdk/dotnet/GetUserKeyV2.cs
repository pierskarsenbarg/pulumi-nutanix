// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetUserKeyV2
    {
        /// <summary>
        /// Fetches the requested key through the provided external identifier for the user and the key.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var getKey = Nutanix.GetUserKeyV2.Invoke(new()
        ///     {
        ///         ExtId = "&lt;USER_KEY_UUID&gt;",
        ///         UserExtId = "&lt;SERVICE_ACCOUNT_UUID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ##  Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// * `UserExtId`: - ( Required ) External Identifier of the User.
        /// * `ExtId`: - ( Required ) External identifier of the key.
        /// </summary>
        public static Task<GetUserKeyV2Result> InvokeAsync(GetUserKeyV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserKeyV2Result>("nutanix:index/getUserKeyV2:getUserKeyV2", args ?? new GetUserKeyV2Args(), options.WithDefaults());

        /// <summary>
        /// Fetches the requested key through the provided external identifier for the user and the key.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var getKey = Nutanix.GetUserKeyV2.Invoke(new()
        ///     {
        ///         ExtId = "&lt;USER_KEY_UUID&gt;",
        ///         UserExtId = "&lt;SERVICE_ACCOUNT_UUID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ##  Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// * `UserExtId`: - ( Required ) External Identifier of the User.
        /// * `ExtId`: - ( Required ) External identifier of the key.
        /// </summary>
        public static Output<GetUserKeyV2Result> Invoke(GetUserKeyV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserKeyV2Result>("nutanix:index/getUserKeyV2:getUserKeyV2", args ?? new GetUserKeyV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches the requested key through the provided external identifier for the user and the key.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var getKey = Nutanix.GetUserKeyV2.Invoke(new()
        ///     {
        ///         ExtId = "&lt;USER_KEY_UUID&gt;",
        ///         UserExtId = "&lt;SERVICE_ACCOUNT_UUID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ##  Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// * `UserExtId`: - ( Required ) External Identifier of the User.
        /// * `ExtId`: - ( Required ) External identifier of the key.
        /// </summary>
        public static Output<GetUserKeyV2Result> Invoke(GetUserKeyV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserKeyV2Result>("nutanix:index/getUserKeyV2:getUserKeyV2", args ?? new GetUserKeyV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserKeyV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - Brief description of the key.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The External Identifier of the User Group.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        [Input("userExtId", required: true)]
        public string UserExtId { get; set; } = null!;

        public GetUserKeyV2Args()
        {
        }
        public static new GetUserKeyV2Args Empty => new GetUserKeyV2Args();
    }

    public sealed class GetUserKeyV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - Brief description of the key.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The External Identifier of the User Group.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        [Input("userExtId", required: true)]
        public Input<string> UserExtId { get; set; } = null!;

        public GetUserKeyV2InvokeArgs()
        {
        }
        public static new GetUserKeyV2InvokeArgs Empty => new GetUserKeyV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetUserKeyV2Result
    {
        /// <summary>
        /// - External client to whom the given key is allocated.
        /// </summary>
        public readonly string AssignedTo;
        /// <summary>
        /// - User or service who created the key.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// - The creation time of the key.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// - The creation mechanism of this entity.
        /// </summary>
        public readonly string CreationType;
        /// <summary>
        /// - Brief description of the key.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// - The time when the key will expire.
        /// </summary>
        public readonly string ExpiryTime;
        /// <summary>
        /// The External Identifier of the User Group.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - Details specific to type of the key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserKeyV2KeyDetailResult> KeyDetails;
        /// <summary>
        /// - The type of key.
        /// </summary>
        public readonly string KeyType;
        /// <summary>
        /// - User who updated the key.
        /// </summary>
        public readonly string LastUpdatedBy;
        /// <summary>
        /// - The time when the key was updated.
        /// </summary>
        public readonly string LastUpdatedTime;
        /// <summary>
        /// - The time when the key was last used.
        /// </summary>
        public readonly string LastUsedTime;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserKeyV2LinkResult> Links;
        /// <summary>
        /// - Identifier for the key in the form of a name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// - The status of the key.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;
        public readonly string UserExtId;

        [OutputConstructor]
        private GetUserKeyV2Result(
            string assignedTo,

            string createdBy,

            string createdTime,

            string creationType,

            string? description,

            string expiryTime,

            string extId,

            string id,

            ImmutableArray<Outputs.GetUserKeyV2KeyDetailResult> keyDetails,

            string keyType,

            string lastUpdatedBy,

            string lastUpdatedTime,

            string lastUsedTime,

            ImmutableArray<Outputs.GetUserKeyV2LinkResult> links,

            string name,

            string status,

            string tenantId,

            string userExtId)
        {
            AssignedTo = assignedTo;
            CreatedBy = createdBy;
            CreatedTime = createdTime;
            CreationType = creationType;
            Description = description;
            ExpiryTime = expiryTime;
            ExtId = extId;
            Id = id;
            KeyDetails = keyDetails;
            KeyType = keyType;
            LastUpdatedBy = lastUpdatedBy;
            LastUpdatedTime = lastUpdatedTime;
            LastUsedTime = lastUsedTime;
            Links = links;
            Name = name;
            Status = status;
            TenantId = tenantId;
            UserExtId = userExtId;
        }
    }
}
