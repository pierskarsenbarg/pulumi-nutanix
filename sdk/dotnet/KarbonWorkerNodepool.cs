// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to add/remove worker nodepool in an existing Nutanix Kubernetes Engine (NKE).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var kworkerNp = new Nutanix.KarbonWorkerNodepool("kworkerNp", new()
    ///     {
    ///         AhvConfig = new Nutanix.Inputs.KarbonWorkerNodepoolAhvConfigArgs
    ///         {
    ///             Cpu = 4,
    ///             DiskMib = 122880,
    ///             MemoryMib = 8192,
    ///             NetworkUuid = "61213511-6383-4a38-9ac8-4a552c0e5865",
    ///         },
    ///         ClusterName = "karbon",
    ///         NumInstances = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var kworkerNp = new Nutanix.KarbonWorkerNodepool("kworkerNp", new()
    ///     {
    ///         AhvConfig = new Nutanix.Inputs.KarbonWorkerNodepoolAhvConfigArgs
    ///         {
    ///             Cpu = 4,
    ///             DiskMib = 122880,
    ///             MemoryMib = 8192,
    ///             NetworkUuid = "61213511-6383-4a38-9ac8-4a552c0e5865",
    ///         },
    ///         ClusterName = "karbon",
    ///         Labels = 
    ///         {
    ///             { "k1", "v1" },
    ///             { "k2", "v2" },
    ///         },
    ///         NumInstances = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool")]
    public partial class KarbonWorkerNodepool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// VM configuration in AHV.
        /// </summary>
        [Output("ahvConfig")]
        public Output<Outputs.KarbonWorkerNodepoolAhvConfig> AhvConfig { get; private set; } = null!;

        /// <summary>
        /// Kubernetes cluster name
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// labels of node
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// unique worker nodepool name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The version of the node OS image
        /// </summary>
        [Output("nodeOsVersion")]
        public Output<string> NodeOsVersion { get; private set; } = null!;

        /// <summary>
        /// List of node details of pool.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.KarbonWorkerNodepoolNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// number of node instances
        /// </summary>
        [Output("numInstances")]
        public Output<int> NumInstances { get; private set; } = null!;


        /// <summary>
        /// Create a KarbonWorkerNodepool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KarbonWorkerNodepool(string name, KarbonWorkerNodepoolArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool", name, args ?? new KarbonWorkerNodepoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KarbonWorkerNodepool(string name, Input<string> id, KarbonWorkerNodepoolState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/karbonWorkerNodepool:KarbonWorkerNodepool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KarbonWorkerNodepool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KarbonWorkerNodepool Get(string name, Input<string> id, KarbonWorkerNodepoolState? state = null, CustomResourceOptions? options = null)
        {
            return new KarbonWorkerNodepool(name, id, state, options);
        }
    }

    public sealed class KarbonWorkerNodepoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// VM configuration in AHV.
        /// </summary>
        [Input("ahvConfig")]
        public Input<Inputs.KarbonWorkerNodepoolAhvConfigArgs>? AhvConfig { get; set; }

        /// <summary>
        /// Kubernetes cluster name
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// labels of node
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// unique worker nodepool name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The version of the node OS image
        /// </summary>
        [Input("nodeOsVersion")]
        public Input<string>? NodeOsVersion { get; set; }

        /// <summary>
        /// number of node instances
        /// </summary>
        [Input("numInstances", required: true)]
        public Input<int> NumInstances { get; set; } = null!;

        public KarbonWorkerNodepoolArgs()
        {
        }
        public static new KarbonWorkerNodepoolArgs Empty => new KarbonWorkerNodepoolArgs();
    }

    public sealed class KarbonWorkerNodepoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// VM configuration in AHV.
        /// </summary>
        [Input("ahvConfig")]
        public Input<Inputs.KarbonWorkerNodepoolAhvConfigGetArgs>? AhvConfig { get; set; }

        /// <summary>
        /// Kubernetes cluster name
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// labels of node
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// unique worker nodepool name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The version of the node OS image
        /// </summary>
        [Input("nodeOsVersion")]
        public Input<string>? NodeOsVersion { get; set; }

        [Input("nodes")]
        private InputList<Inputs.KarbonWorkerNodepoolNodeGetArgs>? _nodes;

        /// <summary>
        /// List of node details of pool.
        /// </summary>
        public InputList<Inputs.KarbonWorkerNodepoolNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.KarbonWorkerNodepoolNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// number of node instances
        /// </summary>
        [Input("numInstances")]
        public Input<int>? NumInstances { get; set; }

        public KarbonWorkerNodepoolState()
        {
        }
        public static new KarbonWorkerNodepoolState Empty => new KarbonWorkerNodepoolState();
    }
}
