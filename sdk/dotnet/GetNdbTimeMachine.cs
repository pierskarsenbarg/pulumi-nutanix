// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbTimeMachine
    {
        /// <summary>
        /// Describes a time machine present in Nutanix Database Service
        /// </summary>
        public static Task<GetNdbTimeMachineResult> InvokeAsync(GetNdbTimeMachineArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbTimeMachineResult>("nutanix:index/getNdbTimeMachine:getNdbTimeMachine", args ?? new GetNdbTimeMachineArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a time machine present in Nutanix Database Service
        /// </summary>
        public static Output<GetNdbTimeMachineResult> Invoke(GetNdbTimeMachineInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbTimeMachineResult>("nutanix:index/getNdbTimeMachine:getNdbTimeMachine", args ?? new GetNdbTimeMachineInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Describes a time machine present in Nutanix Database Service
        /// </summary>
        public static Output<GetNdbTimeMachineResult> Invoke(GetNdbTimeMachineInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbTimeMachineResult>("nutanix:index/getNdbTimeMachine:getNdbTimeMachine", args ?? new GetNdbTimeMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbTimeMachineArgs : global::Pulumi.InvokeArgs
    {
        [Input("tags")]
        private List<Inputs.GetNdbTimeMachineTagArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public List<Inputs.GetNdbTimeMachineTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetNdbTimeMachineTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// time machine id
        /// </summary>
        [Input("timeMachineId")]
        public string? TimeMachineId { get; set; }

        /// <summary>
        /// time machine name
        /// </summary>
        [Input("timeMachineName")]
        public string? TimeMachineName { get; set; }

        public GetNdbTimeMachineArgs()
        {
        }
        public static new GetNdbTimeMachineArgs Empty => new GetNdbTimeMachineArgs();
    }

    public sealed class GetNdbTimeMachineInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("tags")]
        private InputList<Inputs.GetNdbTimeMachineTagInputArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public InputList<Inputs.GetNdbTimeMachineTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetNdbTimeMachineTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// time machine id
        /// </summary>
        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        /// <summary>
        /// time machine name
        /// </summary>
        [Input("timeMachineName")]
        public Input<string>? TimeMachineName { get; set; }

        public GetNdbTimeMachineInvokeArgs()
        {
        }
        public static new GetNdbTimeMachineInvokeArgs Empty => new GetNdbTimeMachineInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbTimeMachineResult
    {
        /// <summary>
        /// access level to time machines
        /// </summary>
        public readonly string AccessLevel;
        /// <summary>
        /// category of time machine
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// clone time machine or not
        /// </summary>
        public readonly bool Clone;
        /// <summary>
        /// clone info
        /// </summary>
        public readonly string Clones;
        /// <summary>
        /// clustered or not
        /// </summary>
        public readonly bool Clustered;
        /// <summary>
        /// database info
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// database id
        /// </summary>
        public readonly string DatabaseId;
        /// <summary>
        /// date created
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// date modified
        /// </summary>
        public readonly string DateModified;
        /// <summary>
        /// time machine description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ea status of time machine
        /// </summary>
        public readonly string EaStatus;
        /// <summary>
        /// time machine id
        /// </summary>
        public readonly string Id;
        public readonly bool Internal;
        /// <summary>
        /// Metric info
        /// </summary>
        public readonly string Metric;
        /// <summary>
        /// time machine name
        /// </summary>
        public readonly string Name;
        public readonly string OwnerId;
        /// <summary>
        /// properties of time machines
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbTimeMachinePropertyResult> Properties;
        /// <summary>
        /// schedule id
        /// </summary>
        public readonly string ScheduleId;
        /// <summary>
        /// schedule info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbTimeMachineScheduleResult> Schedules;
        /// <summary>
        /// scope
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// sla id
        /// </summary>
        public readonly string SlaId;
        /// <summary>
        /// sla update in progress
        /// </summary>
        public readonly bool SlaUpdateInProgress;
        /// <summary>
        /// sla update metadata
        /// </summary>
        public readonly string SlaUpdateMetadata;
        /// <summary>
        /// sla info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbTimeMachineSlaResult> Slas;
        /// <summary>
        /// source clusters
        /// </summary>
        public readonly ImmutableArray<string> SourceNxClusters;
        /// <summary>
        /// status of time machine
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// tags
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbTimeMachineTagResult> Tags;
        public readonly string? TimeMachineId;
        public readonly string? TimeMachineName;
        /// <summary>
        /// type of time machine
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNdbTimeMachineResult(
            string accessLevel,

            string category,

            bool clone,

            string clones,

            bool clustered,

            string database,

            string databaseId,

            string dateCreated,

            string dateModified,

            string description,

            string eaStatus,

            string id,

            bool @internal,

            string metric,

            string name,

            string ownerId,

            ImmutableArray<Outputs.GetNdbTimeMachinePropertyResult> properties,

            string scheduleId,

            ImmutableArray<Outputs.GetNdbTimeMachineScheduleResult> schedules,

            string scope,

            string slaId,

            bool slaUpdateInProgress,

            string slaUpdateMetadata,

            ImmutableArray<Outputs.GetNdbTimeMachineSlaResult> slas,

            ImmutableArray<string> sourceNxClusters,

            string status,

            ImmutableArray<Outputs.GetNdbTimeMachineTagResult> tags,

            string? timeMachineId,

            string? timeMachineName,

            string type)
        {
            AccessLevel = accessLevel;
            Category = category;
            Clone = clone;
            Clones = clones;
            Clustered = clustered;
            Database = database;
            DatabaseId = databaseId;
            DateCreated = dateCreated;
            DateModified = dateModified;
            Description = description;
            EaStatus = eaStatus;
            Id = id;
            Internal = @internal;
            Metric = metric;
            Name = name;
            OwnerId = ownerId;
            Properties = properties;
            ScheduleId = scheduleId;
            Schedules = schedules;
            Scope = scope;
            SlaId = slaId;
            SlaUpdateInProgress = slaUpdateInProgress;
            SlaUpdateMetadata = slaUpdateMetadata;
            Slas = slas;
            SourceNxClusters = sourceNxClusters;
            Status = status;
            Tags = tags;
            TimeMachineId = timeMachineId;
            TimeMachineName = timeMachineName;
            Type = type;
        }
    }
}
