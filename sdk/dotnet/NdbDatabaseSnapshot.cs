// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to perform the snapshot for database instance based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbDatabaseSnapshot("name", new()
    ///     {
    ///         RemoveScheduleInDays = 1,
    ///         TimeMachineName = "{{ tms_name }}",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot")]
    public partial class NdbDatabaseSnapshot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// App info version
        /// </summary>
        [Output("appInfoVersion")]
        public Output<string> AppInfoVersion { get; private set; } = null!;

        /// <summary>
        /// Applicable types
        /// </summary>
        [Output("applicableTypes")]
        public Output<ImmutableArray<string>> ApplicableTypes { get; private set; } = null!;

        /// <summary>
        /// database node id
        /// </summary>
        [Output("databaseNodeId")]
        public Output<string> DatabaseNodeId { get; private set; } = null!;

        /// <summary>
        /// database snapshot
        /// </summary>
        [Output("databaseSnapshot")]
        public Output<bool> DatabaseSnapshot { get; private set; } = null!;

        /// <summary>
        /// created date
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// modified date
        /// </summary>
        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        /// <summary>
        /// dbserver id
        /// </summary>
        [Output("dbserverId")]
        public Output<string> DbserverId { get; private set; } = null!;

        /// <summary>
        /// dbserver ip
        /// </summary>
        [Output("dbserverIp")]
        public Output<string> DbserverIp { get; private set; } = null!;

        /// <summary>
        /// dbserver name
        /// </summary>
        [Output("dbserverName")]
        public Output<string> DbserverName { get; private set; } = null!;

        /// <summary>
        /// dbserver storage metadata version
        /// </summary>
        [Output("dbserverStorageMetadataVersion")]
        public Output<int> DbserverStorageMetadataVersion { get; private set; } = null!;

        /// <summary>
        /// description of snapshot
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Default is set to Asia/Calcutta
        /// </summary>
        [Output("expiryDateTimezone")]
        public Output<string?> ExpiryDateTimezone { get; private set; } = null!;

        /// <summary>
        /// from timestamp
        /// </summary>
        [Output("fromTimestamp")]
        public Output<string> FromTimestamp { get; private set; } = null!;

        /// <summary>
        /// LCM config
        /// </summary>
        [Output("lcmConfigs")]
        public Output<ImmutableArray<Outputs.NdbDatabaseSnapshotLcmConfig>> LcmConfigs { get; private set; } = null!;

        /// <summary>
        /// Snapshot name. Default value is era_manual_snapshot.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// nx cluster id
        /// </summary>
        [Output("nxClusterId")]
        public Output<string> NxClusterId { get; private set; } = null!;

        /// <summary>
        /// parent snapshot
        /// </summary>
        [Output("parentSnapshot")]
        public Output<bool> ParentSnapshot { get; private set; } = null!;

        /// <summary>
        /// parent snapshot id
        /// </summary>
        [Output("parentSnapshotId")]
        public Output<string> ParentSnapshotId { get; private set; } = null!;

        /// <summary>
        /// processed
        /// </summary>
        [Output("processed")]
        public Output<bool> Processed { get; private set; } = null!;

        /// <summary>
        /// properties
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbDatabaseSnapshotProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// protection domain
        /// </summary>
        [Output("protectionDomainId")]
        public Output<string> ProtectionDomainId { get; private set; } = null!;

        /// <summary>
        /// Removal schedule after which the snapshot should be removed.
        /// </summary>
        [Output("removeScheduleInDays")]
        public Output<int?> RemoveScheduleInDays { get; private set; } = null!;

        /// <summary>
        /// snapshots to be replicated to clusters.
        /// </summary>
        [Output("replicateToClusters")]
        public Output<ImmutableArray<string>> ReplicateToClusters { get; private set; } = null!;

        /// <summary>
        /// replicated snapshots
        /// </summary>
        [Output("replicatedSnapshots")]
        public Output<ImmutableArray<string>> ReplicatedSnapshots { get; private set; } = null!;

        [Output("santized")]
        public Output<bool> Santized { get; private set; } = null!;

        [Output("santizedFromSnapshotId")]
        public Output<string> SantizedFromSnapshotId { get; private set; } = null!;

        [Output("santizedSnapshots")]
        public Output<string> SantizedSnapshots { get; private set; } = null!;

        /// <summary>
        /// snapshot family
        /// </summary>
        [Output("snapshotFamily")]
        public Output<string> SnapshotFamily { get; private set; } = null!;

        /// <summary>
        /// snapshot size
        /// </summary>
        [Output("snapshotSize")]
        public Output<double> SnapshotSize { get; private set; } = null!;

        /// <summary>
        /// snapshot timeStamp
        /// </summary>
        [Output("snapshotTimestamp")]
        public Output<string> SnapshotTimestamp { get; private set; } = null!;

        /// <summary>
        /// snapshot timestamp date
        /// </summary>
        [Output("snapshotTimestampDate")]
        public Output<int> SnapshotTimestampDate { get; private set; } = null!;

        /// <summary>
        /// snapshot uuid
        /// </summary>
        [Output("snapshotUuid")]
        public Output<string> SnapshotUuid { get; private set; } = null!;

        /// <summary>
        /// software database snapshot
        /// </summary>
        [Output("softwareDatabaseSnapshot")]
        public Output<bool> SoftwareDatabaseSnapshot { get; private set; } = null!;

        /// <summary>
        /// software snapshot
        /// </summary>
        [Output("softwareSnapshot")]
        public Output<string> SoftwareSnapshot { get; private set; } = null!;

        /// <summary>
        /// software snapshot id
        /// </summary>
        [Output("softwareSnapshotId")]
        public Output<string> SoftwareSnapshotId { get; private set; } = null!;

        /// <summary>
        /// status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbDatabaseSnapshotTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Time Machine Id
        /// </summary>
        [Output("timeMachineId")]
        public Output<string?> TimeMachineId { get; private set; } = null!;

        /// <summary>
        /// Time Machine Name
        /// </summary>
        [Output("timeMachineName")]
        public Output<string?> TimeMachineName { get; private set; } = null!;

        /// <summary>
        /// timezone
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// to timestamp
        /// </summary>
        [Output("toTimestamp")]
        public Output<string> ToTimestamp { get; private set; } = null!;

        /// <summary>
        /// type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NdbDatabaseSnapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbDatabaseSnapshot(string name, NdbDatabaseSnapshotArgs? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot", name, args ?? new NdbDatabaseSnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbDatabaseSnapshot(string name, Input<string> id, NdbDatabaseSnapshotState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbDatabaseSnapshot:NdbDatabaseSnapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbDatabaseSnapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbDatabaseSnapshot Get(string name, Input<string> id, NdbDatabaseSnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbDatabaseSnapshot(name, id, state, options);
        }
    }

    public sealed class NdbDatabaseSnapshotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default is set to Asia/Calcutta
        /// </summary>
        [Input("expiryDateTimezone")]
        public Input<string>? ExpiryDateTimezone { get; set; }

        /// <summary>
        /// Snapshot name. Default value is era_manual_snapshot.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Removal schedule after which the snapshot should be removed.
        /// </summary>
        [Input("removeScheduleInDays")]
        public Input<int>? RemoveScheduleInDays { get; set; }

        [Input("replicateToClusters")]
        private InputList<string>? _replicateToClusters;

        /// <summary>
        /// snapshots to be replicated to clusters.
        /// </summary>
        public InputList<string> ReplicateToClusters
        {
            get => _replicateToClusters ?? (_replicateToClusters = new InputList<string>());
            set => _replicateToClusters = value;
        }

        [Input("tags")]
        private InputList<Inputs.NdbDatabaseSnapshotTagArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public InputList<Inputs.NdbDatabaseSnapshotTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDatabaseSnapshotTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Time Machine Id
        /// </summary>
        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        /// <summary>
        /// Time Machine Name
        /// </summary>
        [Input("timeMachineName")]
        public Input<string>? TimeMachineName { get; set; }

        public NdbDatabaseSnapshotArgs()
        {
        }
        public static new NdbDatabaseSnapshotArgs Empty => new NdbDatabaseSnapshotArgs();
    }

    public sealed class NdbDatabaseSnapshotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// App info version
        /// </summary>
        [Input("appInfoVersion")]
        public Input<string>? AppInfoVersion { get; set; }

        [Input("applicableTypes")]
        private InputList<string>? _applicableTypes;

        /// <summary>
        /// Applicable types
        /// </summary>
        public InputList<string> ApplicableTypes
        {
            get => _applicableTypes ?? (_applicableTypes = new InputList<string>());
            set => _applicableTypes = value;
        }

        /// <summary>
        /// database node id
        /// </summary>
        [Input("databaseNodeId")]
        public Input<string>? DatabaseNodeId { get; set; }

        /// <summary>
        /// database snapshot
        /// </summary>
        [Input("databaseSnapshot")]
        public Input<bool>? DatabaseSnapshot { get; set; }

        /// <summary>
        /// created date
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// modified date
        /// </summary>
        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        /// <summary>
        /// dbserver id
        /// </summary>
        [Input("dbserverId")]
        public Input<string>? DbserverId { get; set; }

        /// <summary>
        /// dbserver ip
        /// </summary>
        [Input("dbserverIp")]
        public Input<string>? DbserverIp { get; set; }

        /// <summary>
        /// dbserver name
        /// </summary>
        [Input("dbserverName")]
        public Input<string>? DbserverName { get; set; }

        /// <summary>
        /// dbserver storage metadata version
        /// </summary>
        [Input("dbserverStorageMetadataVersion")]
        public Input<int>? DbserverStorageMetadataVersion { get; set; }

        /// <summary>
        /// description of snapshot
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Default is set to Asia/Calcutta
        /// </summary>
        [Input("expiryDateTimezone")]
        public Input<string>? ExpiryDateTimezone { get; set; }

        /// <summary>
        /// from timestamp
        /// </summary>
        [Input("fromTimestamp")]
        public Input<string>? FromTimestamp { get; set; }

        [Input("lcmConfigs")]
        private InputList<Inputs.NdbDatabaseSnapshotLcmConfigGetArgs>? _lcmConfigs;

        /// <summary>
        /// LCM config
        /// </summary>
        public InputList<Inputs.NdbDatabaseSnapshotLcmConfigGetArgs> LcmConfigs
        {
            get => _lcmConfigs ?? (_lcmConfigs = new InputList<Inputs.NdbDatabaseSnapshotLcmConfigGetArgs>());
            set => _lcmConfigs = value;
        }

        /// <summary>
        /// Snapshot name. Default value is era_manual_snapshot.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// nx cluster id
        /// </summary>
        [Input("nxClusterId")]
        public Input<string>? NxClusterId { get; set; }

        /// <summary>
        /// parent snapshot
        /// </summary>
        [Input("parentSnapshot")]
        public Input<bool>? ParentSnapshot { get; set; }

        /// <summary>
        /// parent snapshot id
        /// </summary>
        [Input("parentSnapshotId")]
        public Input<string>? ParentSnapshotId { get; set; }

        /// <summary>
        /// processed
        /// </summary>
        [Input("processed")]
        public Input<bool>? Processed { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbDatabaseSnapshotPropertyGetArgs>? _properties;

        /// <summary>
        /// properties
        /// </summary>
        public InputList<Inputs.NdbDatabaseSnapshotPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbDatabaseSnapshotPropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// protection domain
        /// </summary>
        [Input("protectionDomainId")]
        public Input<string>? ProtectionDomainId { get; set; }

        /// <summary>
        /// Removal schedule after which the snapshot should be removed.
        /// </summary>
        [Input("removeScheduleInDays")]
        public Input<int>? RemoveScheduleInDays { get; set; }

        [Input("replicateToClusters")]
        private InputList<string>? _replicateToClusters;

        /// <summary>
        /// snapshots to be replicated to clusters.
        /// </summary>
        public InputList<string> ReplicateToClusters
        {
            get => _replicateToClusters ?? (_replicateToClusters = new InputList<string>());
            set => _replicateToClusters = value;
        }

        [Input("replicatedSnapshots")]
        private InputList<string>? _replicatedSnapshots;

        /// <summary>
        /// replicated snapshots
        /// </summary>
        public InputList<string> ReplicatedSnapshots
        {
            get => _replicatedSnapshots ?? (_replicatedSnapshots = new InputList<string>());
            set => _replicatedSnapshots = value;
        }

        [Input("santized")]
        public Input<bool>? Santized { get; set; }

        [Input("santizedFromSnapshotId")]
        public Input<string>? SantizedFromSnapshotId { get; set; }

        [Input("santizedSnapshots")]
        public Input<string>? SantizedSnapshots { get; set; }

        /// <summary>
        /// snapshot family
        /// </summary>
        [Input("snapshotFamily")]
        public Input<string>? SnapshotFamily { get; set; }

        /// <summary>
        /// snapshot size
        /// </summary>
        [Input("snapshotSize")]
        public Input<double>? SnapshotSize { get; set; }

        /// <summary>
        /// snapshot timeStamp
        /// </summary>
        [Input("snapshotTimestamp")]
        public Input<string>? SnapshotTimestamp { get; set; }

        /// <summary>
        /// snapshot timestamp date
        /// </summary>
        [Input("snapshotTimestampDate")]
        public Input<int>? SnapshotTimestampDate { get; set; }

        /// <summary>
        /// snapshot uuid
        /// </summary>
        [Input("snapshotUuid")]
        public Input<string>? SnapshotUuid { get; set; }

        /// <summary>
        /// software database snapshot
        /// </summary>
        [Input("softwareDatabaseSnapshot")]
        public Input<bool>? SoftwareDatabaseSnapshot { get; set; }

        /// <summary>
        /// software snapshot
        /// </summary>
        [Input("softwareSnapshot")]
        public Input<string>? SoftwareSnapshot { get; set; }

        /// <summary>
        /// software snapshot id
        /// </summary>
        [Input("softwareSnapshotId")]
        public Input<string>? SoftwareSnapshotId { get; set; }

        /// <summary>
        /// status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbDatabaseSnapshotTagGetArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public InputList<Inputs.NdbDatabaseSnapshotTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbDatabaseSnapshotTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Time Machine Id
        /// </summary>
        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        /// <summary>
        /// Time Machine Name
        /// </summary>
        [Input("timeMachineName")]
        public Input<string>? TimeMachineName { get; set; }

        /// <summary>
        /// timezone
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// to timestamp
        /// </summary>
        [Input("toTimestamp")]
        public Input<string>? ToTimestamp { get; set; }

        /// <summary>
        /// type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NdbDatabaseSnapshotState()
        {
        }
        public static new NdbDatabaseSnapshotState Empty => new NdbDatabaseSnapshotState();
    }
}
