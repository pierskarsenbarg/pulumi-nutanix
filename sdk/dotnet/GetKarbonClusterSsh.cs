// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetKarbonClusterSsh
    {
        /// <summary>
        /// Describes the SSH config from a Karbon Cluster
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sshbyid = Nutanix.GetKarbonClusterSsh.Invoke(new()
        ///     {
        ///         KarbonClusterId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///     });
        /// 
        ///     var sshbyname = Nutanix.GetKarbonClusterSsh.Invoke(new()
        ///     {
        ///         KarbonClusterName = "&lt;YOUR-CLUSTER-NAME&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKarbonClusterSshResult> InvokeAsync(GetKarbonClusterSshArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKarbonClusterSshResult>("nutanix:index/getKarbonClusterSsh:getKarbonClusterSsh", args ?? new GetKarbonClusterSshArgs(), options.WithDefaults());

        /// <summary>
        /// Describes the SSH config from a Karbon Cluster
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sshbyid = Nutanix.GetKarbonClusterSsh.Invoke(new()
        ///     {
        ///         KarbonClusterId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///     });
        /// 
        ///     var sshbyname = Nutanix.GetKarbonClusterSsh.Invoke(new()
        ///     {
        ///         KarbonClusterName = "&lt;YOUR-CLUSTER-NAME&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKarbonClusterSshResult> Invoke(GetKarbonClusterSshInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKarbonClusterSshResult>("nutanix:index/getKarbonClusterSsh:getKarbonClusterSsh", args ?? new GetKarbonClusterSshInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKarbonClusterSshArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Represents karbon cluster uuid
        /// </summary>
        [Input("karbonClusterId")]
        public string? KarbonClusterId { get; set; }

        /// <summary>
        /// Represents the name of karbon cluster
        /// </summary>
        [Input("karbonClusterName")]
        public string? KarbonClusterName { get; set; }

        public GetKarbonClusterSshArgs()
        {
        }
        public static new GetKarbonClusterSshArgs Empty => new GetKarbonClusterSshArgs();
    }

    public sealed class GetKarbonClusterSshInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Represents karbon cluster uuid
        /// </summary>
        [Input("karbonClusterId")]
        public Input<string>? KarbonClusterId { get; set; }

        /// <summary>
        /// Represents the name of karbon cluster
        /// </summary>
        [Input("karbonClusterName")]
        public Input<string>? KarbonClusterName { get; set; }

        public GetKarbonClusterSshInvokeArgs()
        {
        }
        public static new GetKarbonClusterSshInvokeArgs Empty => new GetKarbonClusterSshInvokeArgs();
    }


    [OutputType]
    public sealed class GetKarbonClusterSshResult
    {
        /// <summary>
        /// Certificate of the user for SSH access.
        /// </summary>
        public readonly string Certificate;
        /// <summary>
        /// Timestamp of certificate expiry in the ISO 8601 format (YYYY-MM-DDThh:mm:ss.sssZ).
        /// </summary>
        public readonly string ExpiryTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? KarbonClusterId;
        public readonly string? KarbonClusterName;
        /// <summary>
        /// The private key of the user for SSH access.
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// The username for which credentials are returned.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetKarbonClusterSshResult(
            string certificate,

            string expiryTime,

            string id,

            string? karbonClusterId,

            string? karbonClusterName,

            string privateKey,

            string username)
        {
            Certificate = certificate;
            ExpiryTime = expiryTime;
            Id = id;
            KarbonClusterId = karbonClusterId;
            KarbonClusterName = karbonClusterName;
            PrivateKey = privateKey;
            Username = username;
        }
    }
}
