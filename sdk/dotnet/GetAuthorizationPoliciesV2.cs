// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetAuthorizationPoliciesV2
    {
        public static Task<GetAuthorizationPoliciesV2Result> InvokeAsync(GetAuthorizationPoliciesV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizationPoliciesV2Result>("nutanix:index/getAuthorizationPoliciesV2:getAuthorizationPoliciesV2", args ?? new GetAuthorizationPoliciesV2Args(), options.WithDefaults());

        public static Output<GetAuthorizationPoliciesV2Result> Invoke(GetAuthorizationPoliciesV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizationPoliciesV2Result>("nutanix:index/getAuthorizationPoliciesV2:getAuthorizationPoliciesV2", args ?? new GetAuthorizationPoliciesV2InvokeArgs(), options.WithDefaults());

        public static Output<GetAuthorizationPoliciesV2Result> Invoke(GetAuthorizationPoliciesV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizationPoliciesV2Result>("nutanix:index/getAuthorizationPoliciesV2:getAuthorizationPoliciesV2", args ?? new GetAuthorizationPoliciesV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizationPoliciesV2Args : global::Pulumi.InvokeArgs
    {
        [Input("expand")]
        public string? Expand { get; set; }

        [Input("filter")]
        public string? Filter { get; set; }

        [Input("limit")]
        public int? Limit { get; set; }

        [Input("orderBy")]
        public string? OrderBy { get; set; }

        [Input("page")]
        public int? Page { get; set; }

        [Input("select")]
        public string? Select { get; set; }

        public GetAuthorizationPoliciesV2Args()
        {
        }
        public static new GetAuthorizationPoliciesV2Args Empty => new GetAuthorizationPoliciesV2Args();
    }

    public sealed class GetAuthorizationPoliciesV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        [Input("filter")]
        public Input<string>? Filter { get; set; }

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        [Input("page")]
        public Input<int>? Page { get; set; }

        [Input("select")]
        public Input<string>? Select { get; set; }

        public GetAuthorizationPoliciesV2InvokeArgs()
        {
        }
        public static new GetAuthorizationPoliciesV2InvokeArgs Empty => new GetAuthorizationPoliciesV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthorizationPoliciesV2Result
    {
        public readonly ImmutableArray<Outputs.GetAuthorizationPoliciesV2AuthPolicyResult> AuthPolicies;
        public readonly string? Expand;
        public readonly string? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? Limit;
        public readonly string? OrderBy;
        public readonly int? Page;
        public readonly string? Select;

        [OutputConstructor]
        private GetAuthorizationPoliciesV2Result(
            ImmutableArray<Outputs.GetAuthorizationPoliciesV2AuthPolicyResult> authPolicies,

            string? expand,

            string? filter,

            string id,

            int? limit,

            string? orderBy,

            int? page,

            string? select)
        {
            AuthPolicies = authPolicies;
            Expand = expand;
            Filter = filter;
            Id = id;
            Limit = limit;
            OrderBy = orderBy;
            Page = page;
            Select = select;
        }
    }
}
