// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Represents the Cluster entity. Provides the basic infrastructure for compute, storage and networking. This includes the operations that can be carried out on cluster and its subresources - host (node), rsyslog servers etc and actions that can be performed on cluster - add a node, remove a node, attach categories.
    /// </summary>
    [NutanixResourceType("nutanix:index/clusterV2:ClusterV2")]
    public partial class ClusterV2 : global::Pulumi.CustomResource
    {
        [Output("backupEligibilityScore")]
        public Output<int> BackupEligibilityScore { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<string>> Categories { get; private set; } = null!;

        [Output("clusterProfileExtId")]
        public Output<string> ClusterProfileExtId { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Cluster configuration details.
        /// </summary>
        [Output("configs")]
        public Output<ImmutableArray<Outputs.ClusterV2Config>> Configs { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
        /// </summary>
        [Output("containerName")]
        public Output<string> ContainerName { get; private set; } = null!;

        /// <summary>
        /// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
        /// </summary>
        [Output("dryrun")]
        public Output<bool?> Dryrun { get; private set; } = null!;

        [Output("expand")]
        public Output<string?> Expand { get; private set; } = null!;

        [Output("extId")]
        public Output<string> ExtId { get; private set; } = null!;

        [Output("inefficientVmCount")]
        public Output<int> InefficientVmCount { get; private set; } = null!;

        [Output("links")]
        public Output<ImmutableArray<Outputs.ClusterV2Link>> Links { get; private set; } = null!;

        /// <summary>
        /// - (Required) The name for the vm.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Network details of a cluster.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.ClusterV2Network>> Networks { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a node.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.ClusterV2Node>> Nodes { get; private set; } = null!;

        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// Valid values are:
        /// - "CANCELLED"	The cluster upgrade is cancelled.
        /// - "FAILED"	The cluster upgrade failed.
        /// - "QUEUED"	The cluster upgrade is in the queue.
        /// - "SUCCEEDED"	The cluster was upgraded successfully.
        /// - "DOWNLOADING"	The cluster upgrade is downloading.
        /// - "PENDING"	The cluster upgrade is in pending state.
        /// - "UPGRADING"	The cluster is in upgrade state.
        /// - "PREUPGRADE"	The cluster is in pre-upgrade state.
        /// - "SCHEDULED"	The cluster upgrade is in scheduled state.
        /// </summary>
        [Output("upgradeStatus")]
        public Output<string> UpgradeStatus { get; private set; } = null!;

        [Output("vmCount")]
        public Output<int> VmCount { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterV2(string name, ClusterV2Args? args = null, CustomResourceOptions? options = null)
            : base("nutanix:index/clusterV2:ClusterV2", name, args ?? new ClusterV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterV2(string name, Input<string> id, ClusterV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/clusterV2:ClusterV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterV2 Get(string name, Input<string> id, ClusterV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterV2(name, id, state, options);
        }
    }

    public sealed class ClusterV2Args : global::Pulumi.ResourceArgs
    {
        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        [Input("configs")]
        private InputList<Inputs.ClusterV2ConfigArgs>? _configs;

        /// <summary>
        /// - (Optional) Cluster configuration details.
        /// </summary>
        public InputList<Inputs.ClusterV2ConfigArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.ClusterV2ConfigArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
        /// </summary>
        [Input("dryrun")]
        public Input<bool>? Dryrun { get; set; }

        [Input("expand")]
        public Input<string>? Expand { get; set; }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        /// <summary>
        /// - (Required) The name for the vm.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ClusterV2NetworkArgs>? _networks;

        /// <summary>
        /// - (Optional) Network details of a cluster.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ClusterV2NetworkArgs>());
            set => _networks = value;
        }

        [Input("nodes")]
        private InputList<Inputs.ClusterV2NodeArgs>? _nodes;

        /// <summary>
        /// - (Optional) The reference to a node.
        /// </summary>
        public InputList<Inputs.ClusterV2NodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ClusterV2NodeArgs>());
            set => _nodes = value;
        }

        public ClusterV2Args()
        {
        }
        public static new ClusterV2Args Empty => new ClusterV2Args();
    }

    public sealed class ClusterV2State : global::Pulumi.ResourceArgs
    {
        [Input("backupEligibilityScore")]
        public Input<int>? BackupEligibilityScore { get; set; }

        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// - (Optional) The reference to a project.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        [Input("clusterProfileExtId")]
        public Input<string>? ClusterProfileExtId { get; set; }

        [Input("configs")]
        private InputList<Inputs.ClusterV2ConfigGetArgs>? _configs;

        /// <summary>
        /// - (Optional) Cluster configuration details.
        /// </summary>
        public InputList<Inputs.ClusterV2ConfigGetArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.ClusterV2ConfigGetArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// - (Optional) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// - (Optional) parameter that allows long-running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true.
        /// </summary>
        [Input("dryrun")]
        public Input<bool>? Dryrun { get; set; }

        [Input("expand")]
        public Input<string>? Expand { get; set; }

        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("inefficientVmCount")]
        public Input<int>? InefficientVmCount { get; set; }

        [Input("links")]
        private InputList<Inputs.ClusterV2LinkGetArgs>? _links;
        public InputList<Inputs.ClusterV2LinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ClusterV2LinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// - (Required) The name for the vm.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ClusterV2NetworkGetArgs>? _networks;

        /// <summary>
        /// - (Optional) Network details of a cluster.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ClusterV2NetworkGetArgs>());
            set => _networks = value;
        }

        [Input("nodes")]
        private InputList<Inputs.ClusterV2NodeGetArgs>? _nodes;

        /// <summary>
        /// - (Optional) The reference to a node.
        /// </summary>
        public InputList<Inputs.ClusterV2NodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ClusterV2NodeGetArgs>());
            set => _nodes = value;
        }

        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// - (Optional) The reference to a project.
        /// Valid values are:
        /// - "CANCELLED"	The cluster upgrade is cancelled.
        /// - "FAILED"	The cluster upgrade failed.
        /// - "QUEUED"	The cluster upgrade is in the queue.
        /// - "SUCCEEDED"	The cluster was upgraded successfully.
        /// - "DOWNLOADING"	The cluster upgrade is downloading.
        /// - "PENDING"	The cluster upgrade is in pending state.
        /// - "UPGRADING"	The cluster is in upgrade state.
        /// - "PREUPGRADE"	The cluster is in pre-upgrade state.
        /// - "SCHEDULED"	The cluster upgrade is in scheduled state.
        /// </summary>
        [Input("upgradeStatus")]
        public Input<string>? UpgradeStatus { get; set; }

        [Input("vmCount")]
        public Input<int>? VmCount { get; set; }

        public ClusterV2State()
        {
        }
        public static new ClusterV2State Empty => new ClusterV2State();
    }
}
