// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetUserGroupV2
    {
        /// <summary>
        /// Provides a datasource to retrieve a user group based on the External Identifier of the User Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_ug = Nutanix.GetUserGroupV2.Invoke(new()
        ///     {
        ///         ExtId = "a2a8650a-358a-4791-90c9-7a8b6e2989d6",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserGroupV2Result> InvokeAsync(GetUserGroupV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserGroupV2Result>("nutanix:index/getUserGroupV2:getUserGroupV2", args ?? new GetUserGroupV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve a user group based on the External Identifier of the User Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_ug = Nutanix.GetUserGroupV2.Invoke(new()
        ///     {
        ///         ExtId = "a2a8650a-358a-4791-90c9-7a8b6e2989d6",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserGroupV2Result> Invoke(GetUserGroupV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserGroupV2Result>("nutanix:index/getUserGroupV2:getUserGroupV2", args ?? new GetUserGroupV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a datasource to retrieve a user group based on the External Identifier of the User Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var get_ug = Nutanix.GetUserGroupV2.Invoke(new()
        ///     {
        ///         ExtId = "a2a8650a-358a-4791-90c9-7a8b6e2989d6",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserGroupV2Result> Invoke(GetUserGroupV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserGroupV2Result>("nutanix:index/getUserGroupV2:getUserGroupV2", args ?? new GetUserGroupV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserGroupV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) The External Identifier of the User Group.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetUserGroupV2Args()
        {
        }
        public static new GetUserGroupV2Args Empty => new GetUserGroupV2Args();
    }

    public sealed class GetUserGroupV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// - (Required) The External Identifier of the User Group.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetUserGroupV2InvokeArgs()
        {
        }
        public static new GetUserGroupV2InvokeArgs Empty => new GetUserGroupV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetUserGroupV2Result
    {
        /// <summary>
        /// - User or Service who created the User Group.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// - Creation time of the User Group.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// - Identifier for the User Group in the form of a distinguished name.
        /// </summary>
        public readonly string DistinguishedName;
        /// <summary>
        /// The External Identifier of the User Group.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// - Type of the User Group. LDAP (User Group belonging to a Directory Service (Open LDAP/AD)),  SAML (User Group belonging to a SAML IDP.)
        /// </summary>
        public readonly string GroupType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - Identifier of the IDP for the User Group.
        /// </summary>
        public readonly string IdpId;
        /// <summary>
        /// - Last updated time of the User Group.
        /// </summary>
        public readonly string LastUpdatedTime;
        /// <summary>
        /// - Common Name of the User Group.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetUserGroupV2Result(
            string createdBy,

            string createdTime,

            string distinguishedName,

            string extId,

            string groupType,

            string id,

            string idpId,

            string lastUpdatedTime,

            string name)
        {
            CreatedBy = createdBy;
            CreatedTime = createdTime;
            DistinguishedName = distinguishedName;
            ExtId = extId;
            GroupType = groupType;
            Id = id;
            IdpId = idpId;
            LastUpdatedTime = lastUpdatedTime;
            Name = name;
        }
    }
}
