// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to create tags based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ### resource to create tag
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbTag("name", new()
    ///     {
    ///         Description = "this is desc ok",
    ///         EntityType = "DATABASE",
    ///         Required = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### resource to update tag with status
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbTag("name", new()
    ///     {
    ///         Description = "this is desc ok",
    ///         EntityType = "DATABASE",
    ///         Required = true,
    ///         Status = "DEPRECATED",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbTag:NdbTag")]
    public partial class NdbTag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// date created of the tag
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// modified date of tha tag
        /// </summary>
        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        /// <summary>
        /// description for the tag
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
        /// </summary>
        [Output("entityType")]
        public Output<string> EntityType { get; private set; } = null!;

        /// <summary>
        /// name for the tag
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// owner id of the tag
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// provide a tag value for entities.
        /// </summary>
        [Output("required")]
        public Output<bool?> Required { get; private set; } = null!;

        /// <summary>
        /// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// value for the tag
        /// </summary>
        [Output("values")]
        public Output<int> Values { get; private set; } = null!;


        /// <summary>
        /// Create a NdbTag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbTag(string name, NdbTagArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbTag:NdbTag", name, args ?? new NdbTagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbTag(string name, Input<string> id, NdbTagState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbTag:NdbTag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbTag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbTag Get(string name, Input<string> id, NdbTagState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbTag(name, id, state, options);
        }
    }

    public sealed class NdbTagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// description for the tag
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
        /// </summary>
        [Input("entityType", required: true)]
        public Input<string> EntityType { get; set; } = null!;

        /// <summary>
        /// name for the tag
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// provide a tag value for entities.
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public NdbTagArgs()
        {
        }
        public static new NdbTagArgs Empty => new NdbTagArgs();
    }

    public sealed class NdbTagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// date created of the tag
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// modified date of tha tag
        /// </summary>
        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        /// <summary>
        /// description for the tag
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        /// <summary>
        /// name for the tag
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// owner id of the tag
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// provide a tag value for entities.
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// Status of the tag. Supported values are [ ENABLED, DEPRECATED ]
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// value for the tag
        /// </summary>
        [Input("values")]
        public Input<int>? Values { get; set; }

        public NdbTagState()
        {
        }
        public static new NdbTagState Empty => new NdbTagState();
    }
}
