// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// &gt; - The Pc Deploy V2 resource is an action-only resource that supports creating actions. The update and delete operations have no effect. To run it again, destroy and reapply the resource.
    /// &gt; - We need to increase the timeout for deploying the PC resource because the deployment takes longer than the default timeout allows for the operation to complete.
    /// 
    /// Deploys a Prism Central using the provided details. Prism Central Size, Network Config are mandatory fields to deploy Prism Central. The response from this endpoint contains the URL in the task object location header that can be used to track the request status.
    /// </summary>
    [NutanixResourceType("nutanix:index/pcDeployV2:PcDeployV2")]
    public partial class PcDeployV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// -(Required) Domain manager (Prism Central) cluster configuration details.
        /// </summary>
        [Output("config")]
        public Output<Outputs.PcDeployV2Config> Config { get; private set; } = null!;

        /// <summary>
        /// -(Required) Domain manager (Prism Central) network configuration details.
        /// </summary>
        [Output("network")]
        public Output<Outputs.PcDeployV2Network> Network { get; private set; } = null!;

        /// <summary>
        /// -(Optional) This configuration enables Prism Central to be deployed in scale-out mode. Default is `false`.
        /// </summary>
        [Output("shouldEnableHighAvailability")]
        public Output<bool?> ShouldEnableHighAvailability { get; private set; } = null!;


        /// <summary>
        /// Create a PcDeployV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PcDeployV2(string name, PcDeployV2Args args, CustomResourceOptions? options = null)
            : base("nutanix:index/pcDeployV2:PcDeployV2", name, args ?? new PcDeployV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private PcDeployV2(string name, Input<string> id, PcDeployV2State? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/pcDeployV2:PcDeployV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PcDeployV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PcDeployV2 Get(string name, Input<string> id, PcDeployV2State? state = null, CustomResourceOptions? options = null)
        {
            return new PcDeployV2(name, id, state, options);
        }
    }

    public sealed class PcDeployV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Required) Domain manager (Prism Central) cluster configuration details.
        /// </summary>
        [Input("config", required: true)]
        public Input<Inputs.PcDeployV2ConfigArgs> Config { get; set; } = null!;

        /// <summary>
        /// -(Required) Domain manager (Prism Central) network configuration details.
        /// </summary>
        [Input("network", required: true)]
        public Input<Inputs.PcDeployV2NetworkArgs> Network { get; set; } = null!;

        /// <summary>
        /// -(Optional) This configuration enables Prism Central to be deployed in scale-out mode. Default is `false`.
        /// </summary>
        [Input("shouldEnableHighAvailability")]
        public Input<bool>? ShouldEnableHighAvailability { get; set; }

        public PcDeployV2Args()
        {
        }
        public static new PcDeployV2Args Empty => new PcDeployV2Args();
    }

    public sealed class PcDeployV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// -(Required) Domain manager (Prism Central) cluster configuration details.
        /// </summary>
        [Input("config")]
        public Input<Inputs.PcDeployV2ConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// -(Required) Domain manager (Prism Central) network configuration details.
        /// </summary>
        [Input("network")]
        public Input<Inputs.PcDeployV2NetworkGetArgs>? Network { get; set; }

        /// <summary>
        /// -(Optional) This configuration enables Prism Central to be deployed in scale-out mode. Default is `false`.
        /// </summary>
        [Input("shouldEnableHighAvailability")]
        public Input<bool>? ShouldEnableHighAvailability { get; set; }

        public PcDeployV2State()
        {
        }
        public static new PcDeployV2State Empty => new PcDeployV2State();
    }
}
