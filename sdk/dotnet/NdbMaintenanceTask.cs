// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to associate a maintenance window with database server VM based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ### resource to associated maintenance window with OS_PATCHING
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbMaintenanceTask("name", new()
    ///     {
    ///         DbserverIds = new[]
    ///         {
    ///             "{{ dbserver_vm_id }}",
    ///         },
    ///         MaintenanceWindowId = "{{ maintenance_window_id }}",
    ///         Tasks = new[]
    ///         {
    ///             new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs
    ///             {
    ///                 TaskType = "OS_PATCHING",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### resource to associated maintenance window with DB_PATCHING
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbMaintenanceTask("name", new()
    ///     {
    ///         DbserverIds = new[]
    ///         {
    ///             "{{ dbserver_vm_id }}",
    ///         },
    ///         MaintenanceWindowId = "{{ maintenance_window_id }}",
    ///         Tasks = new[]
    ///         {
    ///             new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs
    ///             {
    ///                 TaskType = "DB_PATCHING",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### resource to associated maintenance window with pre and post command on each task
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = new Nutanix.NdbMaintenanceTask("name", new()
    ///     {
    ///         DbserverIds = new[]
    ///         {
    ///             "{{ dbserver_vm_id }}",
    ///         },
    ///         MaintenanceWindowId = "{{ maintenance_window_id }}",
    ///         Tasks = new[]
    ///         {
    ///             new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs
    ///             {
    ///                 PostCommand = "{{ post_command for db patching }}",
    ///                 PreCommand = "{{ pre_command for db patching }}",
    ///                 TaskType = "DB_PATCHING",
    ///             },
    ///             new Nutanix.Inputs.NdbMaintenanceTaskTaskArgs
    ///             {
    ///                 PostCommand = "{{ post_command for os patching }}",
    ///                 PreCommand = "{{ pre_command for os patching}}",
    ///                 TaskType = "OS_PATCHING",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask")]
    public partial class NdbMaintenanceTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// dbserver cluster ids. Conflicts with "dbserver_id"
        /// </summary>
        [Output("dbserverClusters")]
        public Output<ImmutableArray<string>> DbserverClusters { get; private set; } = null!;

        /// <summary>
        /// dbserver vm id. Conflicts with "dbserver_cluster"
        /// </summary>
        [Output("dbserverIds")]
        public Output<ImmutableArray<string>> DbserverIds { get; private set; } = null!;

        /// <summary>
        /// Entity Task Association  List.
        /// </summary>
        [Output("entityTaskAssociations")]
        public Output<ImmutableArray<Outputs.NdbMaintenanceTaskEntityTaskAssociation>> EntityTaskAssociations { get; private set; } = null!;

        /// <summary>
        /// maintenance window id which has to be associated
        /// </summary>
        [Output("maintenanceWindowId")]
        public Output<string> MaintenanceWindowId { get; private set; } = null!;

        /// <summary>
        /// task input for Operating System Patching or Database Patching or both
        /// </summary>
        [Output("tasks")]
        public Output<ImmutableArray<Outputs.NdbMaintenanceTaskTask>> Tasks { get; private set; } = null!;


        /// <summary>
        /// Create a NdbMaintenanceTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbMaintenanceTask(string name, NdbMaintenanceTaskArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask", name, args ?? new NdbMaintenanceTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbMaintenanceTask(string name, Input<string> id, NdbMaintenanceTaskState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbMaintenanceTask:NdbMaintenanceTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbMaintenanceTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbMaintenanceTask Get(string name, Input<string> id, NdbMaintenanceTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbMaintenanceTask(name, id, state, options);
        }
    }

    public sealed class NdbMaintenanceTaskArgs : global::Pulumi.ResourceArgs
    {
        [Input("dbserverClusters")]
        private InputList<string>? _dbserverClusters;

        /// <summary>
        /// dbserver cluster ids. Conflicts with "dbserver_id"
        /// </summary>
        public InputList<string> DbserverClusters
        {
            get => _dbserverClusters ?? (_dbserverClusters = new InputList<string>());
            set => _dbserverClusters = value;
        }

        [Input("dbserverIds")]
        private InputList<string>? _dbserverIds;

        /// <summary>
        /// dbserver vm id. Conflicts with "dbserver_cluster"
        /// </summary>
        public InputList<string> DbserverIds
        {
            get => _dbserverIds ?? (_dbserverIds = new InputList<string>());
            set => _dbserverIds = value;
        }

        /// <summary>
        /// maintenance window id which has to be associated
        /// </summary>
        [Input("maintenanceWindowId", required: true)]
        public Input<string> MaintenanceWindowId { get; set; } = null!;

        [Input("tasks")]
        private InputList<Inputs.NdbMaintenanceTaskTaskArgs>? _tasks;

        /// <summary>
        /// task input for Operating System Patching or Database Patching or both
        /// </summary>
        public InputList<Inputs.NdbMaintenanceTaskTaskArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<Inputs.NdbMaintenanceTaskTaskArgs>());
            set => _tasks = value;
        }

        public NdbMaintenanceTaskArgs()
        {
        }
        public static new NdbMaintenanceTaskArgs Empty => new NdbMaintenanceTaskArgs();
    }

    public sealed class NdbMaintenanceTaskState : global::Pulumi.ResourceArgs
    {
        [Input("dbserverClusters")]
        private InputList<string>? _dbserverClusters;

        /// <summary>
        /// dbserver cluster ids. Conflicts with "dbserver_id"
        /// </summary>
        public InputList<string> DbserverClusters
        {
            get => _dbserverClusters ?? (_dbserverClusters = new InputList<string>());
            set => _dbserverClusters = value;
        }

        [Input("dbserverIds")]
        private InputList<string>? _dbserverIds;

        /// <summary>
        /// dbserver vm id. Conflicts with "dbserver_cluster"
        /// </summary>
        public InputList<string> DbserverIds
        {
            get => _dbserverIds ?? (_dbserverIds = new InputList<string>());
            set => _dbserverIds = value;
        }

        [Input("entityTaskAssociations")]
        private InputList<Inputs.NdbMaintenanceTaskEntityTaskAssociationGetArgs>? _entityTaskAssociations;

        /// <summary>
        /// Entity Task Association  List.
        /// </summary>
        public InputList<Inputs.NdbMaintenanceTaskEntityTaskAssociationGetArgs> EntityTaskAssociations
        {
            get => _entityTaskAssociations ?? (_entityTaskAssociations = new InputList<Inputs.NdbMaintenanceTaskEntityTaskAssociationGetArgs>());
            set => _entityTaskAssociations = value;
        }

        /// <summary>
        /// maintenance window id which has to be associated
        /// </summary>
        [Input("maintenanceWindowId")]
        public Input<string>? MaintenanceWindowId { get; set; }

        [Input("tasks")]
        private InputList<Inputs.NdbMaintenanceTaskTaskGetArgs>? _tasks;

        /// <summary>
        /// task input for Operating System Patching or Database Patching or both
        /// </summary>
        public InputList<Inputs.NdbMaintenanceTaskTaskGetArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<Inputs.NdbMaintenanceTaskTaskGetArgs>());
            set => _tasks = value;
        }

        public NdbMaintenanceTaskState()
        {
        }
        public static new NdbMaintenanceTaskState Empty => new NdbMaintenanceTaskState();
    }
}
