// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetPcBackupTargetV2
    {
        /// <summary>
        /// Retrieves the backup targets (cluster or object store) from a domain manager and returns the backup configuration and lastSyncTimestamp parameter to the user.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetPcBackupTargetV2.Invoke(new()
        ///     {
        ///         DomainManagerExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
        ///         ExtId = "00062d3d-5d07-0da6-0000-000000028f57",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPcBackupTargetV2Result> InvokeAsync(GetPcBackupTargetV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPcBackupTargetV2Result>("nutanix:index/getPcBackupTargetV2:getPcBackupTargetV2", args ?? new GetPcBackupTargetV2Args(), options.WithDefaults());

        /// <summary>
        /// Retrieves the backup targets (cluster or object store) from a domain manager and returns the backup configuration and lastSyncTimestamp parameter to the user.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetPcBackupTargetV2.Invoke(new()
        ///     {
        ///         DomainManagerExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
        ///         ExtId = "00062d3d-5d07-0da6-0000-000000028f57",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPcBackupTargetV2Result> Invoke(GetPcBackupTargetV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPcBackupTargetV2Result>("nutanix:index/getPcBackupTargetV2:getPcBackupTargetV2", args ?? new GetPcBackupTargetV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the backup targets (cluster or object store) from a domain manager and returns the backup configuration and lastSyncTimestamp parameter to the user.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nutanix.GetPcBackupTargetV2.Invoke(new()
        ///     {
        ///         DomainManagerExtId = "75dde184-3a0e-4f59-a185-03ca1efead17",
        ///         ExtId = "00062d3d-5d07-0da6-0000-000000028f57",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPcBackupTargetV2Result> Invoke(GetPcBackupTargetV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPcBackupTargetV2Result>("nutanix:index/getPcBackupTargetV2:getPcBackupTargetV2", args ?? new GetPcBackupTargetV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPcBackupTargetV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) A unique identifier for the domain manager.
        /// </summary>
        [Input("domainManagerExtId", required: true)]
        public string DomainManagerExtId { get; set; } = null!;

        /// <summary>
        /// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetPcBackupTargetV2Args()
        {
        }
        public static new GetPcBackupTargetV2Args Empty => new GetPcBackupTargetV2Args();
    }

    public sealed class GetPcBackupTargetV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Required) A unique identifier for the domain manager.
        /// </summary>
        [Input("domainManagerExtId", required: true)]
        public Input<string> DomainManagerExtId { get; set; } = null!;

        /// <summary>
        /// -(Required) A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetPcBackupTargetV2InvokeArgs()
        {
        }
        public static new GetPcBackupTargetV2InvokeArgs Empty => new GetPcBackupTargetV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetPcBackupTargetV2Result
    {
        /// <summary>
        /// - Specifies a reason why the backup might have paused. This will be empty if the isBackupPaused field is false.
        /// </summary>
        public readonly string BackupPauseReason;
        public readonly string DomainManagerExtId;
        /// <summary>
        /// - Cluster UUID of a remote cluster.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// - Whether the backup is paused on the given cluster or not.
        /// </summary>
        public readonly bool IsBackupPaused;
        /// <summary>
        /// - Represents the time when the domain manager was last synchronized or copied its configuration data to the backup target. This field is updated every 30 minutes.
        /// </summary>
        public readonly string LastSyncTime;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPcBackupTargetV2LinkResult> Links;
        /// <summary>
        /// - Location of the backup target. For example, a cluster or an object store endpoint, such as AWS s3.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPcBackupTargetV2LocationResult> Locations;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetPcBackupTargetV2Result(
            string backupPauseReason,

            string domainManagerExtId,

            string extId,

            string id,

            bool isBackupPaused,

            string lastSyncTime,

            ImmutableArray<Outputs.GetPcBackupTargetV2LinkResult> links,

            ImmutableArray<Outputs.GetPcBackupTargetV2LocationResult> locations,

            string tenantId)
        {
            BackupPauseReason = backupPauseReason;
            DomainManagerExtId = domainManagerExtId;
            ExtId = extId;
            Id = id;
            IsBackupPaused = isBackupPaused;
            LastSyncTime = lastSyncTime;
            Links = links;
            Locations = locations;
            TenantId = tenantId;
        }
    }
}
