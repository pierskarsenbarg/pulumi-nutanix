// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("destAddressGroupReferences")]
        private InputList<string>? _destAddressGroupReferences;

        /// <summary>
        /// A list of address group references.
        /// </summary>
        public InputList<string> DestAddressGroupReferences
        {
            get => _destAddressGroupReferences ?? (_destAddressGroupReferences = new InputList<string>());
            set => _destAddressGroupReferences = value;
        }

        /// <summary>
        /// A specification to how allow mode traffic should be applied, either ALL or NONE.
        /// </summary>
        [Input("destAllowSpec")]
        public Input<string>? DestAllowSpec { get; set; }

        [Input("destCategoryReferences")]
        private InputList<string>? _destCategoryReferences;

        /// <summary>
        /// List of categories that define a set of network endpoints as outbound.
        /// </summary>
        public InputList<string> DestCategoryReferences
        {
            get => _destCategoryReferences ?? (_destCategoryReferences = new InputList<string>());
            set => _destCategoryReferences = value;
        }

        [Input("destSubnets")]
        private InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecDestSubnetGetArgs>? _destSubnets;

        /// <summary>
        /// destination subnet value
        /// </summary>
        public InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecDestSubnetGetArgs> DestSubnets
        {
            get => _destSubnets ?? (_destSubnets = new InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecDestSubnetGetArgs>());
            set => _destSubnets = value;
        }

        [Input("icmpServices")]
        private InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecIcmpServiceGetArgs>? _icmpServices;

        /// <summary>
        /// icmp services
        /// </summary>
        public InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecIcmpServiceGetArgs> IcmpServices
        {
            get => _icmpServices ?? (_icmpServices = new InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecIcmpServiceGetArgs>());
            set => _icmpServices = value;
        }

        /// <summary>
        /// Denotes if rule allows traffic for all protocol.
        /// </summary>
        [Input("isAllProtocolAllowed")]
        public Input<bool>? IsAllProtocolAllowed { get; set; }

        /// <summary>
        /// A reference to the network function chain in the rule.
        /// </summary>
        [Input("networkFunctionChainReference")]
        public Input<string>? NetworkFunctionChainReference { get; set; }

        [Input("securedGroupCategoryReferences", required: true)]
        private InputList<string>? _securedGroupCategoryReferences;

        /// <summary>
        /// A set of network endpoints which is protected by a Network Security Policy and defined as a list of categories.
        /// </summary>
        public InputList<string> SecuredGroupCategoryReferences
        {
            get => _securedGroupCategoryReferences ?? (_securedGroupCategoryReferences = new InputList<string>());
            set => _securedGroupCategoryReferences = value;
        }

        [Input("serviceGroupReferences")]
        private InputList<string>? _serviceGroupReferences;

        /// <summary>
        /// A list of service group references.
        /// </summary>
        public InputList<string> ServiceGroupReferences
        {
            get => _serviceGroupReferences ?? (_serviceGroupReferences = new InputList<string>());
            set => _serviceGroupReferences = value;
        }

        [Input("srcAddressGroupReferences")]
        private InputList<string>? _srcAddressGroupReferences;

        /// <summary>
        /// A list of address group references.
        /// </summary>
        public InputList<string> SrcAddressGroupReferences
        {
            get => _srcAddressGroupReferences ?? (_srcAddressGroupReferences = new InputList<string>());
            set => _srcAddressGroupReferences = value;
        }

        /// <summary>
        /// A specification to how allow mode traffic should be applied, either ALL or NONE.
        /// </summary>
        [Input("srcAllowSpec")]
        public Input<string>? SrcAllowSpec { get; set; }

        [Input("srcCategoryReferences")]
        private InputList<string>? _srcCategoryReferences;

        /// <summary>
        /// List of categories that define a set of network endpoints as inbound.
        /// </summary>
        public InputList<string> SrcCategoryReferences
        {
            get => _srcCategoryReferences ?? (_srcCategoryReferences = new InputList<string>());
            set => _srcCategoryReferences = value;
        }

        [Input("srcSubnets")]
        private InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecSrcSubnetGetArgs>? _srcSubnets;

        /// <summary>
        /// source subnet value
        /// </summary>
        public InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecSrcSubnetGetArgs> SrcSubnets
        {
            get => _srcSubnets ?? (_srcSubnets = new InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecSrcSubnetGetArgs>());
            set => _srcSubnets = value;
        }

        [Input("tcpServices")]
        private InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecTcpServiceGetArgs>? _tcpServices;

        /// <summary>
        /// tcp services
        /// </summary>
        public InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecTcpServiceGetArgs> TcpServices
        {
            get => _tcpServices ?? (_tcpServices = new InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecTcpServiceGetArgs>());
            set => _tcpServices = value;
        }

        [Input("udpServices")]
        private InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecUdpServiceGetArgs>? _udpServices;

        /// <summary>
        /// udp services
        /// </summary>
        public InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecUdpServiceGetArgs> UdpServices
        {
            get => _udpServices ?? (_udpServices = new InputList<Inputs.NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecUdpServiceGetArgs>());
            set => _udpServices = value;
        }

        public NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecGetArgs()
        {
        }
        public static new NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecGetArgs Empty => new NetworkSecurityPolicyV2RuleSpecApplicationRuleSpecGetArgs();
    }
}
