// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class NdbRegisterDatabasePostgressInfoArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// allow multiple databases. Default is true
        /// </summary>
        [Input("allowMultipleDatabases")]
        public Input<bool>? AllowMultipleDatabases { get; set; }

        /// <summary>
        /// backup policy of database. Default is prefer_secondary.
        /// </summary>
        [Input("backupPolicy")]
        public Input<string>? BackupPolicy { get; set; }

        /// <summary>
        /// name of the database server VM on which the instance you want to register is running.
        /// </summary>
        [Input("dbName", required: true)]
        public Input<string> DbName { get; set; } = null!;

        [Input("dbPassword", required: true)]
        private Input<string>? _dbPassword;

        /// <summary>
        /// database password
        /// </summary>
        public Input<string>? DbPassword
        {
            get => _dbPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dbPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// username of the NDB drive user account that has sudo access.
        /// </summary>
        [Input("dbUser")]
        public Input<string>? DbUser { get; set; }

        /// <summary>
        /// listner port of database
        /// </summary>
        [Input("listenerPort", required: true)]
        public Input<string> ListenerPort { get; set; } = null!;

        /// <summary>
        /// path to the PostgreSQL home directory in which the PostgreSQL software is installed.
        /// </summary>
        [Input("postgresSoftwareHome", required: true)]
        public Input<string> PostgresSoftwareHome { get; set; } = null!;

        /// <summary>
        /// path to the directory in which the PostgreSQL software is installed.
        /// </summary>
        [Input("softwareHome")]
        public Input<string>? SoftwareHome { get; set; }

        /// <summary>
        /// switch log of database. Default is true
        /// </summary>
        [Input("switchLog")]
        public Input<bool>? SwitchLog { get; set; }

        /// <summary>
        /// VM IP of the database server VM on which the instance you want to register is running.
        /// </summary>
        [Input("vmIp")]
        public Input<string>? VmIp { get; set; }

        public NdbRegisterDatabasePostgressInfoArgs()
        {
        }
        public static new NdbRegisterDatabasePostgressInfoArgs Empty => new NdbRegisterDatabasePostgressInfoArgs();
    }
}
