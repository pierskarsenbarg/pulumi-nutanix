// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class VirtualMachineV2DiskArgs : global::Pulumi.ResourceArgs
    {
        [Input("backingInfos")]
        private InputList<Inputs.VirtualMachineV2DiskBackingInfoArgs>? _backingInfos;

        /// <summary>
        /// Supporting storage to create virtual disk on.
        /// * `backing_info.vm_disk`:(Optional) backing Info for vmDisk
        /// * `backing_info.adfs_volume_group_reference`: (Required) Volume Group Reference
        /// * `backing_info.adfs_volume_group_reference.volume_group_ext_id`: (Required) The globally unique identifier of an ADSF volume group. It should be of type UUID.
        /// </summary>
        public InputList<Inputs.VirtualMachineV2DiskBackingInfoArgs> BackingInfos
        {
            get => _backingInfos ?? (_backingInfos = new InputList<Inputs.VirtualMachineV2DiskBackingInfoArgs>());
            set => _backingInfos = value;
        }

        [Input("diskAddresses")]
        private InputList<Inputs.VirtualMachineV2DiskDiskAddressArgs>? _diskAddresses;

        /// <summary>
        /// Disk address.
        /// * `disk_address.bus_type`: (Required) Bus type for the device. The acceptable values are: SCSI, IDE, PCI, SATA, SPAPR (only PPC).
        /// * `disk_address.index`: (Required) Device index on the bus. This field is ignored unless the bus details are specified.
        /// </summary>
        public InputList<Inputs.VirtualMachineV2DiskDiskAddressArgs> DiskAddresses
        {
            get => _diskAddresses ?? (_diskAddresses = new InputList<Inputs.VirtualMachineV2DiskDiskAddressArgs>());
            set => _diskAddresses = value;
        }

        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        public VirtualMachineV2DiskArgs()
        {
        }
        public static new VirtualMachineV2DiskArgs Empty => new VirtualMachineV2DiskArgs();
    }
}
