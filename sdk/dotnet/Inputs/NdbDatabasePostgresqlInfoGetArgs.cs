// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class NdbDatabasePostgresqlInfoGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Optional) allocate huge page. Default: false
        /// </summary>
        [Input("allocatePgHugepage")]
        public Input<bool>? AllocatePgHugepage { get; set; }

        /// <summary>
        /// - (Optional) auth methods. Default: md5
        /// </summary>
        [Input("authMethod")]
        public Input<string>? AuthMethod { get; set; }

        /// <summary>
        /// - (Optional) enable auto tuning of staging drive. Default: false
        /// </summary>
        [Input("autoTuneStagingDrive")]
        public Input<bool>? AutoTuneStagingDrive { get; set; }

        /// <summary>
        /// - (Optional) if clustered database. Default: false
        /// </summary>
        [Input("clusterDatabase")]
        public Input<bool>? ClusterDatabase { get; set; }

        /// <summary>
        /// - (Required) name of initial database to be created
        /// </summary>
        [Input("databaseNames", required: true)]
        public Input<string> DatabaseNames { get; set; } = null!;

        /// <summary>
        /// - (Required) initial database size
        /// </summary>
        [Input("databaseSize", required: true)]
        public Input<string> DatabaseSize { get; set; } = null!;

        [Input("dbPassword", required: true)]
        private Input<string>? _dbPassword;

        /// <summary>
        /// - (Required) database instance password
        /// </summary>
        public Input<string>? DbPassword
        {
            get => _dbPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dbPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// - (Optional) High Availability instance
        /// </summary>
        [Input("haInstance")]
        public Input<Inputs.NdbDatabasePostgresqlInfoHaInstanceGetArgs>? HaInstance { get; set; }

        /// <summary>
        /// - (Required) listener port for database instance
        /// </summary>
        [Input("listenerPort", required: true)]
        public Input<string> ListenerPort { get; set; } = null!;

        /// <summary>
        /// - (Optional) post instance create script
        /// </summary>
        [Input("postCreateScript")]
        public Input<string>? PostCreateScript { get; set; }

        /// <summary>
        /// - (Optional) pre instance create script
        /// </summary>
        [Input("preCreateScript")]
        public Input<string>? PreCreateScript { get; set; }

        public NdbDatabasePostgresqlInfoGetArgs()
        {
        }
        public static new NdbDatabasePostgresqlInfoGetArgs Empty => new NdbDatabasePostgresqlInfoGetArgs();
    }
}
