// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class RecoveryPointsV2VmRecoveryPointGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationConsistentProperties")]
        private InputList<Inputs.RecoveryPointsV2VmRecoveryPointApplicationConsistentPropertyGetArgs>? _applicationConsistentProperties;

        /// <summary>
        /// User-defined application-consistent properties for the recovery point.
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2VmRecoveryPointApplicationConsistentPropertyGetArgs> ApplicationConsistentProperties
        {
            get => _applicationConsistentProperties ?? (_applicationConsistentProperties = new InputList<Inputs.RecoveryPointsV2VmRecoveryPointApplicationConsistentPropertyGetArgs>());
            set => _applicationConsistentProperties = value;
        }

        /// <summary>
        /// External identifier of the Consistency group which the entity was part of at the time of recovery point creation.
        /// </summary>
        [Input("consistencyGroupExtId")]
        public Input<string>? ConsistencyGroupExtId { get; set; }

        /// <summary>
        /// The UTC date and time in ISO-8601 format when the Recovery point is created.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        [Input("diskRecoveryPoints")]
        private InputList<Inputs.RecoveryPointsV2VmRecoveryPointDiskRecoveryPointGetArgs>? _diskRecoveryPoints;

        /// <summary>
        /// array of disk recovery points.
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2VmRecoveryPointDiskRecoveryPointGetArgs> DiskRecoveryPoints
        {
            get => _diskRecoveryPoints ?? (_diskRecoveryPoints = new InputList<Inputs.RecoveryPointsV2VmRecoveryPointDiskRecoveryPointGetArgs>());
            set => _diskRecoveryPoints = value;
        }

        /// <summary>
        /// The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// recovery point UUID
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("links")]
        private InputList<Inputs.RecoveryPointsV2VmRecoveryPointLinkGetArgs>? _links;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public InputList<Inputs.RecoveryPointsV2VmRecoveryPointLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.RecoveryPointsV2VmRecoveryPointLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Location agnostic identifier of the recovery point. This identifier is used to identify the same instances of a recovery point across different sites.
        /// </summary>
        [Input("locationAgnosticId")]
        public Input<string>? LocationAgnosticId { get; set; }

        /// <summary>
        /// The name of the Recovery point.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of the Recovery point.
        /// </summary>
        [Input("recoveryPointType")]
        public Input<string>? RecoveryPointType { get; set; }

        /// <summary>
        /// The status of the Recovery point, which indicates whether this Recovery point is fit to be consumed.
        /// * supported values:
        /// * `COMPLETE`: - The Recovery point is in a complete state and ready to be consumed.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("vmCategories")]
        private InputList<string>? _vmCategories;

        /// <summary>
        /// Category key-value pairs associated with the VM at the time of recovery point creation. The category key and value are separated by '/'. For example, a category with key 'dept' and value 'hr' is displayed as 'dept/hr'.
        /// </summary>
        public InputList<string> VmCategories
        {
            get => _vmCategories ?? (_vmCategories = new InputList<string>());
            set => _vmCategories = value;
        }

        /// <summary>
        /// VM external identifier which is captured as a part of this recovery point.
        /// </summary>
        [Input("vmExtId", required: true)]
        public Input<string> VmExtId { get; set; } = null!;

        public RecoveryPointsV2VmRecoveryPointGetArgs()
        {
        }
        public static new RecoveryPointsV2VmRecoveryPointGetArgs Empty => new RecoveryPointsV2VmRecoveryPointGetArgs();
    }
}
