// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class FoundationCentralImageClusterFoundationInitConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("blocks")]
        private InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigBlockArgs>? _blocks;
        public InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigBlockArgs> Blocks
        {
            get => _blocks ?? (_blocks = new InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigBlockArgs>());
            set => _blocks = value;
        }

        [Input("clusters")]
        private InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigClusterArgs>? _clusters;
        public InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigClusterArgs> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigClusterArgs>());
            set => _clusters = value;
        }

        /// <summary>
        /// Gateway of the cvm.
        /// </summary>
        [Input("cvmGateway")]
        public Input<string>? CvmGateway { get; set; }

        /// <summary>
        /// Netmask of the cvm.
        /// </summary>
        [Input("cvmNetmask")]
        public Input<string>? CvmNetmask { get; set; }

        [Input("dnsServers")]
        public Input<string>? DnsServers { get; set; }

        /// <summary>
        /// Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        /// </summary>
        [Input("hypervProductKey")]
        public Input<string>? HypervProductKey { get; set; }

        /// <summary>
        /// SKU of hyperv to be installed if HypervisorType is hyperv.
        /// </summary>
        [Input("hypervSku")]
        public Input<string>? HypervSku { get; set; }

        /// <summary>
        /// Gateway of the hypervisor.
        /// </summary>
        [Input("hypervisorGateway")]
        public Input<string>? HypervisorGateway { get; set; }

        [Input("hypervisorIsoUrl")]
        private InputMap<string>? _hypervisorIsoUrl;
        public InputMap<string> HypervisorIsoUrl
        {
            get => _hypervisorIsoUrl ?? (_hypervisorIsoUrl = new InputMap<string>());
            set => _hypervisorIsoUrl = value;
        }

        [Input("hypervisorIsos")]
        private InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs>? _hypervisorIsos;

        /// <summary>
        /// Details of the hypervisor iso. Required for deploying node with AOS &gt;= 6.8
        /// </summary>
        public InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs> HypervisorIsos
        {
            get => _hypervisorIsos ?? (_hypervisorIsos = new InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs>());
            set => _hypervisorIsos = value;
        }

        /// <summary>
        /// Netmask of the hypervisor.
        /// </summary>
        [Input("hypervisorNetmask")]
        public Input<string>? HypervisorNetmask { get; set; }

        /// <summary>
        /// Gateway of the ipmi.
        /// </summary>
        [Input("ipmiGateway")]
        public Input<string>? IpmiGateway { get; set; }

        /// <summary>
        /// Netmask of the ipmi.
        /// </summary>
        [Input("ipmiNetmask")]
        public Input<string>? IpmiNetmask { get; set; }

        [Input("nosPackageUrls")]
        private InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs>? _nosPackageUrls;
        public InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs> NosPackageUrls
        {
            get => _nosPackageUrls ?? (_nosPackageUrls = new InputList<Inputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs>());
            set => _nosPackageUrls = value;
        }

        public FoundationCentralImageClusterFoundationInitConfigArgs()
        {
        }
        public static new FoundationCentralImageClusterFoundationInitConfigArgs Empty => new FoundationCentralImageClusterFoundationInitConfigArgs();
    }
}
