// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class VirtualMachineV2BootConfigUefiBootArgs : global::Pulumi.ResourceArgs
    {
        [Input("bootDevices")]
        private InputList<Inputs.VirtualMachineV2BootConfigUefiBootBootDeviceArgs>? _bootDevices;

        /// <summary>
        /// Boot Device object
        /// * `boot_device.boot_device_disk`: (Optional) Disk address.
        /// * `boot_device.boot_device_disk.disk_address.bus_type`: (Required) Bus type for the device
        /// * `boot_device.boot_device_disk.disk_address.index`: (Required) Device index on the bus. This field is ignored unless the bus details are specified.
        /// 
        /// * `boot_device.boot_device_nic`: (Optional) Disk Nic address.
        /// * `boot_device.boot_device_nic.mac_address`: (Required) mac address
        /// </summary>
        public InputList<Inputs.VirtualMachineV2BootConfigUefiBootBootDeviceArgs> BootDevices
        {
            get => _bootDevices ?? (_bootDevices = new InputList<Inputs.VirtualMachineV2BootConfigUefiBootBootDeviceArgs>());
            set => _bootDevices = value;
        }

        [Input("bootOrders")]
        private InputList<string>? _bootOrders;

        /// <summary>
        /// Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order. Valid values are 'CDROM', 'DISK', 'NETWORK'.
        /// </summary>
        public InputList<string> BootOrders
        {
            get => _bootOrders ?? (_bootOrders = new InputList<string>());
            set => _bootOrders = value;
        }

        /// <summary>
        /// Indicate whether to enable secure boot or not
        /// </summary>
        [Input("isSecureBootEnabled")]
        public Input<bool>? IsSecureBootEnabled { get; set; }

        [Input("nvramDevices")]
        private InputList<Inputs.VirtualMachineV2BootConfigUefiBootNvramDeviceArgs>? _nvramDevices;

        /// <summary>
        /// Configuration for NVRAM to be presented to the VM.
        /// * `nvram_device.backing_storage_info`: (Required) Storage provided by Nutanix ADSF
        /// </summary>
        public InputList<Inputs.VirtualMachineV2BootConfigUefiBootNvramDeviceArgs> NvramDevices
        {
            get => _nvramDevices ?? (_nvramDevices = new InputList<Inputs.VirtualMachineV2BootConfigUefiBootNvramDeviceArgs>());
            set => _nvramDevices = value;
        }

        public VirtualMachineV2BootConfigUefiBootArgs()
        {
        }
        public static new VirtualMachineV2BootConfigUefiBootArgs Empty => new VirtualMachineV2BootConfigUefiBootArgs();
    }
}
