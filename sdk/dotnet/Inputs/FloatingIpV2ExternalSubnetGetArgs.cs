// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class FloatingIpV2ExternalSubnetGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("bridgeName")]
        public Input<string>? BridgeName { get; set; }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("clusterReference")]
        public Input<string>? ClusterReference { get; set; }

        /// <summary>
        /// Description for the Floating IP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpOptions")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetDhcpOptionGetArgs>? _dhcpOptions;
        public InputList<Inputs.FloatingIpV2ExternalSubnetDhcpOptionGetArgs> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputList<Inputs.FloatingIpV2ExternalSubnetDhcpOptionGetArgs>());
            set => _dhcpOptions = value;
        }

        [Input("dynamicIpAddresses")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetDynamicIpAddressGetArgs>? _dynamicIpAddresses;
        public InputList<Inputs.FloatingIpV2ExternalSubnetDynamicIpAddressGetArgs> DynamicIpAddresses
        {
            get => _dynamicIpAddresses ?? (_dynamicIpAddresses = new InputList<Inputs.FloatingIpV2ExternalSubnetDynamicIpAddressGetArgs>());
            set => _dynamicIpAddresses = value;
        }

        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        [Input("hypervisorType")]
        public Input<string>? HypervisorType { get; set; }

        [Input("ipConfigs")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetIpConfigGetArgs>? _ipConfigs;
        public InputList<Inputs.FloatingIpV2ExternalSubnetIpConfigGetArgs> IpConfigs
        {
            get => _ipConfigs ?? (_ipConfigs = new InputList<Inputs.FloatingIpV2ExternalSubnetIpConfigGetArgs>());
            set => _ipConfigs = value;
        }

        [Input("ipPrefix")]
        public Input<string>? IpPrefix { get; set; }

        [Input("ipUsages")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetIpUsageGetArgs>? _ipUsages;
        public InputList<Inputs.FloatingIpV2ExternalSubnetIpUsageGetArgs> IpUsages
        {
            get => _ipUsages ?? (_ipUsages = new InputList<Inputs.FloatingIpV2ExternalSubnetIpUsageGetArgs>());
            set => _ipUsages = value;
        }

        [Input("isAdvancedNetworking")]
        public Input<bool>? IsAdvancedNetworking { get; set; }

        [Input("isExternal")]
        public Input<bool>? IsExternal { get; set; }

        [Input("isNatEnabled")]
        public Input<bool>? IsNatEnabled { get; set; }

        [Input("links")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetLinkGetArgs>? _links;

        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public InputList<Inputs.FloatingIpV2ExternalSubnetLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.FloatingIpV2ExternalSubnetLinkGetArgs>());
            set => _links = value;
        }

        [Input("migrationState")]
        public Input<string>? MigrationState { get; set; }

        /// <summary>
        /// Name of the floating IP.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkFunctionChainReference")]
        public Input<string>? NetworkFunctionChainReference { get; set; }

        [Input("networkId")]
        public Input<int>? NetworkId { get; set; }

        [Input("reservedIpAddresses")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetReservedIpAddressGetArgs>? _reservedIpAddresses;
        public InputList<Inputs.FloatingIpV2ExternalSubnetReservedIpAddressGetArgs> ReservedIpAddresses
        {
            get => _reservedIpAddresses ?? (_reservedIpAddresses = new InputList<Inputs.FloatingIpV2ExternalSubnetReservedIpAddressGetArgs>());
            set => _reservedIpAddresses = value;
        }

        [Input("subnetType")]
        public Input<string>? SubnetType { get; set; }

        [Input("virtualSwitchReference")]
        public Input<string>? VirtualSwitchReference { get; set; }

        [Input("virtualSwitches")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetVirtualSwitchGetArgs>? _virtualSwitches;
        public InputList<Inputs.FloatingIpV2ExternalSubnetVirtualSwitchGetArgs> VirtualSwitches
        {
            get => _virtualSwitches ?? (_virtualSwitches = new InputList<Inputs.FloatingIpV2ExternalSubnetVirtualSwitchGetArgs>());
            set => _virtualSwitches = value;
        }

        /// <summary>
        /// VPC reference UUID
        /// </summary>
        [Input("vpcReference")]
        public Input<string>? VpcReference { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.FloatingIpV2ExternalSubnetVpcGetArgs>? _vpcs;

        /// <summary>
        /// Networking common base object
        /// </summary>
        public InputList<Inputs.FloatingIpV2ExternalSubnetVpcGetArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.FloatingIpV2ExternalSubnetVpcGetArgs>());
            set => _vpcs = value;
        }

        public FloatingIpV2ExternalSubnetGetArgs()
        {
        }
        public static new FloatingIpV2ExternalSubnetGetArgs Empty => new FloatingIpV2ExternalSubnetGetArgs();
    }
}
