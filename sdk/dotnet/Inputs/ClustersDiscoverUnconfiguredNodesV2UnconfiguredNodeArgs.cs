// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster arch type.
        /// </summary>
        [Input("arch")]
        public Input<string>? Arch { get; set; }

        [Input("attributes")]
        private InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeAttributeArgs>? _attributes;

        /// <summary>
        /// Attributes of a node.
        /// </summary>
        public InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeAttributeArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeAttributeArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("cpuTypes")]
        private InputList<string>? _cpuTypes;

        /// <summary>
        /// CPU type.
        /// </summary>
        public InputList<string> CpuTypes
        {
            get => _cpuTypes ?? (_cpuTypes = new InputList<string>());
            set => _cpuTypes = value;
        }

        /// <summary>
        /// Current CVM VLAN tag.
        /// </summary>
        [Input("currentCvmVlanTag")]
        public Input<string>? CurrentCvmVlanTag { get; set; }

        /// <summary>
        /// Current network interface of a node.
        /// </summary>
        [Input("currentNetworkInterface")]
        public Input<string>? CurrentNetworkInterface { get; set; }

        [Input("cvmIps")]
        private InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeCvmIpArgs>? _cvmIps;

        /// <summary>
        /// CVM IP.
        /// </summary>
        public InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeCvmIpArgs> CvmIps
        {
            get => _cvmIps ?? (_cvmIps = new InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeCvmIpArgs>());
            set => _cvmIps = value;
        }

        /// <summary>
        /// Foundation version.
        /// </summary>
        [Input("foundationVersion")]
        public Input<string>? FoundationVersion { get; set; }

        /// <summary>
        /// Host type.
        /// </summary>
        [Input("hostType")]
        public Input<string>? HostType { get; set; }

        [Input("hypervisorIps")]
        private InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeHypervisorIpArgs>? _hypervisorIps;

        /// <summary>
        /// Hypervisor IP Address.
        /// </summary>
        public InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeHypervisorIpArgs> HypervisorIps
        {
            get => _hypervisorIps ?? (_hypervisorIps = new InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeHypervisorIpArgs>());
            set => _hypervisorIps = value;
        }

        /// <summary>
        /// Hypervisor type.
        /// </summary>
        [Input("hypervisorType")]
        public Input<string>? HypervisorType { get; set; }

        /// <summary>
        /// Host version of the node.
        /// </summary>
        [Input("hypervisorVersion")]
        public Input<string>? HypervisorVersion { get; set; }

        /// <summary>
        /// Interface IPV6 address.
        /// </summary>
        [Input("interfaceIpv6")]
        public Input<string>? InterfaceIpv6 { get; set; }

        [Input("ipmiIps")]
        private InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeIpmiIpArgs>? _ipmiIps;

        /// <summary>
        /// IPMI IP Address.
        /// </summary>
        public InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeIpmiIpArgs> IpmiIps
        {
            get => _ipmiIps ?? (_ipmiIps = new InputList<Inputs.ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeIpmiIpArgs>());
            set => _ipmiIps = value;
        }

        /// <summary>
        /// Secure boot status.
        /// </summary>
        [Input("isSecureBooted")]
        public Input<bool>? IsSecureBooted { get; set; }

        /// <summary>
        /// Position of a node in a rackable unit.
        /// </summary>
        [Input("nodePosition")]
        public Input<string>? NodePosition { get; set; }

        /// <summary>
        /// UUID of the host.
        /// </summary>
        [Input("nodeUuid")]
        public Input<string>? NodeUuid { get; set; }

        /// <summary>
        /// NOS software version of a node.
        /// </summary>
        [Input("nosVersion")]
        public Input<string>? NosVersion { get; set; }

        /// <summary>
        /// Maximum number of nodes in rackable-unit.
        /// </summary>
        [Input("rackableUnitMaxNodes")]
        public Input<int>? RackableUnitMaxNodes { get; set; }

        /// <summary>
        /// Rackable unit model type.
        /// </summary>
        [Input("rackableUnitModel")]
        public Input<string>? RackableUnitModel { get; set; }

        /// <summary>
        /// Rackable unit serial name.
        /// </summary>
        [Input("rackableUnitSerial")]
        public Input<string>? RackableUnitSerial { get; set; }

        public ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeArgs()
        {
        }
        public static new ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeArgs Empty => new ClustersDiscoverUnconfiguredNodesV2UnconfiguredNodeArgs();
    }
}
