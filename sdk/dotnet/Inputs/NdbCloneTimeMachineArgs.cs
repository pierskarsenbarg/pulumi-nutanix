// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class NdbCloneTimeMachineArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// cloned or not
        /// </summary>
        [Input("clone")]
        public Input<bool>? Clone { get; set; }

        [Input("clones")]
        public Input<string>? Clones { get; set; }

        /// <summary>
        /// clone will be clustered or not
        /// </summary>
        [Input("clustered")]
        public Input<bool>? Clustered { get; set; }

        [Input("database")]
        public Input<string>? Database { get; set; }

        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// date created for clone
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// last modified date for clone
        /// </summary>
        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        /// <summary>
        /// database instance description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eaStatus")]
        public Input<string>? EaStatus { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        /// </summary>
        [Input("metric")]
        public Input<string>? Metric { get; set; }

        /// <summary>
        /// database instance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputList<Inputs.NdbCloneTimeMachinePropertyArgs>? _properties;

        /// <summary>
        /// List of all the properties
        /// </summary>
        public InputList<Inputs.NdbCloneTimeMachinePropertyArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbCloneTimeMachinePropertyArgs>());
            set => _properties = value;
        }

        [Input("scheduleId")]
        public Input<string>? ScheduleId { get; set; }

        [Input("schedules")]
        private InputList<Inputs.NdbCloneTimeMachineScheduleArgs>? _schedules;
        public InputList<Inputs.NdbCloneTimeMachineScheduleArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.NdbCloneTimeMachineScheduleArgs>());
            set => _schedules = value;
        }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("slaId")]
        public Input<string>? SlaId { get; set; }

        [Input("slaUpdateInProgress")]
        public Input<bool>? SlaUpdateInProgress { get; set; }

        [Input("slaUpdateMetadata")]
        public Input<string>? SlaUpdateMetadata { get; set; }

        [Input("slas")]
        private InputList<Inputs.NdbCloneTimeMachineSlaArgs>? _slas;
        public InputList<Inputs.NdbCloneTimeMachineSlaArgs> Slas
        {
            get => _slas ?? (_slas = new InputList<Inputs.NdbCloneTimeMachineSlaArgs>());
            set => _slas = value;
        }

        [Input("sourceNxClusters")]
        private InputList<string>? _sourceNxClusters;
        public InputList<string> SourceNxClusters
        {
            get => _sourceNxClusters ?? (_sourceNxClusters = new InputList<string>());
            set => _sourceNxClusters = value;
        }

        /// <summary>
        /// status of clone
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbCloneTimeMachineTagArgs>? _tags;

        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        public InputList<Inputs.NdbCloneTimeMachineTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbCloneTimeMachineTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// type of clone
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NdbCloneTimeMachineArgs()
        {
        }
        public static new NdbCloneTimeMachineArgs Empty => new NdbCloneTimeMachineArgs();
    }
}
