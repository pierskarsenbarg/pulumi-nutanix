// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class ClusterAddNodeV2ConfigParamArgs : global::Pulumi.ResourceArgs
    {
        [Input("hipervs")]
        private InputList<Inputs.ClusterAddNodeV2ConfigParamHipervArgs>? _hipervs;

        /// <summary>
        /// -(Optional) HyperV Credentials.
        /// </summary>
        public InputList<Inputs.ClusterAddNodeV2ConfigParamHipervArgs> Hipervs
        {
            get => _hipervs ?? (_hipervs = new InputList<Inputs.ClusterAddNodeV2ConfigParamHipervArgs>());
            set => _hipervs = value;
        }

        /// <summary>
        /// -(Optional) Indicates whether the node is compute only or not.
        /// </summary>
        [Input("isComputeOnly")]
        public Input<bool>? IsComputeOnly { get; set; }

        /// <summary>
        /// -(Optional) Indicates whether the node is marked to be never schedulable or not.
        /// </summary>
        [Input("isNeverSchedulable")]
        public Input<bool>? IsNeverSchedulable { get; set; }

        /// <summary>
        /// -(Optional) Indicates if node is compatible or not.
        /// </summary>
        [Input("isNosCompatible")]
        public Input<bool>? IsNosCompatible { get; set; }

        /// <summary>
        /// -(Optional) Indicates if node discovery need to be skipped or not.
        /// </summary>
        [Input("shouldSkipDiscovery")]
        public Input<bool>? ShouldSkipDiscovery { get; set; }

        /// <summary>
        /// -(Optional) Indicates if node imaging needs to be skipped or not.
        /// </summary>
        [Input("shouldSkipImaging")]
        public Input<bool>? ShouldSkipImaging { get; set; }

        /// <summary>
        /// -(Optional) Indicates if rack awareness needs to be validated or not.
        /// </summary>
        [Input("shouldValidateRackAwareness")]
        public Input<bool>? ShouldValidateRackAwareness { get; set; }

        /// <summary>
        /// -(Optional) Target hypervisor.
        /// </summary>
        [Input("targetHypervisor")]
        public Input<string>? TargetHypervisor { get; set; }

        public ClusterAddNodeV2ConfigParamArgs()
        {
        }
        public static new ClusterAddNodeV2ConfigParamArgs Empty => new ClusterAddNodeV2ConfigParamArgs();
    }
}
