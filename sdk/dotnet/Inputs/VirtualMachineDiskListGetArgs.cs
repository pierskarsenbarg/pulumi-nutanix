// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class VirtualMachineDiskListGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("dataSourceReference")]
        private InputMap<string>? _dataSourceReference;

        /// <summary>
        /// Reference to a data source.
        /// 
        /// The DiskSize (the disk SizeMib and the DiskSizeBytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk SizeMib or DiskSizeBytes when you set DataSourceReference but, you can update the DiskSize after creation (second apply).
        /// </summary>
        public InputMap<string> DataSourceReference
        {
            get => _dataSourceReference ?? (_dataSourceReference = new InputMap<string>());
            set => _dataSourceReference = value;
        }

        /// <summary>
        /// Properties to a device.
        /// </summary>
        [Input("deviceProperties")]
        public Input<Inputs.VirtualMachineDiskListDevicePropertiesGetArgs>? DeviceProperties { get; set; }

        /// <summary>
        /// Size of the disk in Bytes.
        /// </summary>
        [Input("diskSizeBytes")]
        public Input<int>? DiskSizeBytes { get; set; }

        /// <summary>
        /// Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        /// </summary>
        [Input("diskSizeMib")]
        public Input<int>? DiskSizeMib { get; set; }

        [Input("storageConfig")]
        public Input<Inputs.VirtualMachineDiskListStorageConfigGetArgs>? StorageConfig { get; set; }

        /// <summary>
        /// - (Optional) The device ID which is used to uniquely identify this particular disk.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        [Input("volumeGroupReference")]
        private InputMap<string>? _volumeGroupReference;
        public InputMap<string> VolumeGroupReference
        {
            get => _volumeGroupReference ?? (_volumeGroupReference = new InputMap<string>());
            set => _volumeGroupReference = value;
        }

        public VirtualMachineDiskListGetArgs()
        {
        }
        public static new VirtualMachineDiskListGetArgs Empty => new VirtualMachineDiskListGetArgs();
    }
}
