// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class ClusterV2ConfigFaultToleranceStateArgs : global::Pulumi.ResourceArgs
    {
        [Input("currentClusterFaultTolerance")]
        public Input<string>? CurrentClusterFaultTolerance { get; set; }

        [Input("currentMaxFaultTolerance")]
        public Input<int>? CurrentMaxFaultTolerance { get; set; }

        [Input("desiredClusterFaultTolerance")]
        public Input<string>? DesiredClusterFaultTolerance { get; set; }

        [Input("desiredMaxFaultTolerance")]
        public Input<int>? DesiredMaxFaultTolerance { get; set; }

        /// <summary>
        /// Domain awareness level corresponds to unit of cluster group. This is part of payload for both cluster create &amp; update operations.
        /// Valid values are:
        /// - "RACK"	Rack level awareness.
        /// - "NODE"	Node level awareness.
        /// - "BLOCK"	Block level awareness.
        /// - "DISK"	Disk level awareness.
        /// </summary>
        [Input("domainAwarenessLevel")]
        public Input<string>? DomainAwarenessLevel { get; set; }

        [Input("redundancyStatuses")]
        private InputList<Inputs.ClusterV2ConfigFaultToleranceStateRedundancyStatusArgs>? _redundancyStatuses;
        public InputList<Inputs.ClusterV2ConfigFaultToleranceStateRedundancyStatusArgs> RedundancyStatuses
        {
            get => _redundancyStatuses ?? (_redundancyStatuses = new InputList<Inputs.ClusterV2ConfigFaultToleranceStateRedundancyStatusArgs>());
            set => _redundancyStatuses = value;
        }

        public ClusterV2ConfigFaultToleranceStateArgs()
        {
        }
        public static new ClusterV2ConfigFaultToleranceStateArgs Empty => new ClusterV2ConfigFaultToleranceStateArgs();
    }
}
