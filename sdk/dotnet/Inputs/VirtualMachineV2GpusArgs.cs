// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class VirtualMachineV2GpusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The device Id of the GPU.
        /// </summary>
        [Input("deviceId")]
        public Input<int>? DeviceId { get; set; }

        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        [Input("extId")]
        public Input<string>? ExtId { get; set; }

        [Input("fraction")]
        public Input<int>? Fraction { get; set; }

        [Input("frameBufferSizeBytes")]
        public Input<int>? FrameBufferSizeBytes { get; set; }

        [Input("guestDriverVersion")]
        public Input<string>? GuestDriverVersion { get; set; }

        [Input("links")]
        private InputList<Inputs.VirtualMachineV2GpusLinkArgs>? _links;
        public InputList<Inputs.VirtualMachineV2GpusLinkArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.VirtualMachineV2GpusLinkArgs>());
            set => _links = value;
        }

        /// <summary>
        /// The mode of this GPU. Valid values "PASSTHROUGH_GRAPHICS", "PASSTHROUGH_COMPUTE", "VIRTUAL" .
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// VM name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("numVirtualDisplayHeads")]
        public Input<int>? NumVirtualDisplayHeads { get; set; }

        [Input("pciAddresses")]
        private InputList<Inputs.VirtualMachineV2GpusPciAddressArgs>? _pciAddresses;

        /// <summary>
        /// The (S)egment:(B)us:(D)evice.(F)unction hardware address.
        /// </summary>
        public InputList<Inputs.VirtualMachineV2GpusPciAddressArgs> PciAddresses
        {
            get => _pciAddresses ?? (_pciAddresses = new InputList<Inputs.VirtualMachineV2GpusPciAddressArgs>());
            set => _pciAddresses = value;
        }

        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The vendor of the GPU. Valid values "NVIDIA", "AMD", "INTEL" .
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public VirtualMachineV2GpusArgs()
        {
        }
        public static new VirtualMachineV2GpusArgs Empty => new VirtualMachineV2GpusArgs();
    }
}
