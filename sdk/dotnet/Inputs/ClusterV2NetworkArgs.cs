// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Inputs
{

    public sealed class ClusterV2NetworkArgs : global::Pulumi.ResourceArgs
    {
        [Input("backplanes")]
        private InputList<Inputs.ClusterV2NetworkBackplaneArgs>? _backplanes;

        /// <summary>
        /// Params associated to the backplane network segmentation. This is part of payload for cluster(create operation only.)
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkBackplaneArgs> Backplanes
        {
            get => _backplanes ?? (_backplanes = new InputList<Inputs.ClusterV2NetworkBackplaneArgs>());
            set => _backplanes = value;
        }

        [Input("externalAddresses")]
        private InputList<Inputs.ClusterV2NetworkExternalAddressArgs>? _externalAddresses;

        /// <summary>
        /// An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkExternalAddressArgs> ExternalAddresses
        {
            get => _externalAddresses ?? (_externalAddresses = new InputList<Inputs.ClusterV2NetworkExternalAddressArgs>());
            set => _externalAddresses = value;
        }

        [Input("externalDataServicesIps")]
        private InputList<Inputs.ClusterV2NetworkExternalDataServicesIpArgs>? _externalDataServicesIps;

        /// <summary>
        /// An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkExternalDataServicesIpArgs> ExternalDataServicesIps
        {
            get => _externalDataServicesIps ?? (_externalDataServicesIps = new InputList<Inputs.ClusterV2NetworkExternalDataServicesIpArgs>());
            set => _externalDataServicesIps = value;
        }

        [Input("externalSubnet")]
        public Input<string>? ExternalSubnet { get; set; }

        /// <summary>
        /// Cluster fully qualified domain name. This is part of payload for cluster update operation only.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("httpProxyLists")]
        private InputList<Inputs.ClusterV2NetworkHttpProxyListArgs>? _httpProxyLists;

        /// <summary>
        /// List of HTTP Proxy server configuration needed to access a cluster which is hosted behind a HTTP Proxy to not reveal its identity.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkHttpProxyListArgs> HttpProxyLists
        {
            get => _httpProxyLists ?? (_httpProxyLists = new InputList<Inputs.ClusterV2NetworkHttpProxyListArgs>());
            set => _httpProxyLists = value;
        }

        [Input("httpProxyWhiteLists")]
        private InputList<Inputs.ClusterV2NetworkHttpProxyWhiteListArgs>? _httpProxyWhiteLists;
        public InputList<Inputs.ClusterV2NetworkHttpProxyWhiteListArgs> HttpProxyWhiteLists
        {
            get => _httpProxyWhiteLists ?? (_httpProxyWhiteLists = new InputList<Inputs.ClusterV2NetworkHttpProxyWhiteListArgs>());
            set => _httpProxyWhiteLists = value;
        }

        [Input("internalSubnet")]
        public Input<string>? InternalSubnet { get; set; }

        /// <summary>
        /// Management server type.
        /// Valid values are:
        /// - "PRISM_CENTRAL"	Prism Central management server.
        /// - "EXTERNAL"	External management server.
        /// - "LOCAL"	Local management server.
        /// </summary>
        [Input("keyManagementServerType")]
        public Input<string>? KeyManagementServerType { get; set; }

        [Input("managementServers")]
        private InputList<Inputs.ClusterV2NetworkManagementServerArgs>? _managementServers;

        /// <summary>
        /// Management server information.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkManagementServerArgs> ManagementServers
        {
            get => _managementServers ?? (_managementServers = new InputList<Inputs.ClusterV2NetworkManagementServerArgs>());
            set => _managementServers = value;
        }

        [Input("masqueradingIps")]
        private InputList<Inputs.ClusterV2NetworkMasqueradingIpArgs>? _masqueradingIps;

        /// <summary>
        /// An unique address that identifies a device on the internet or a local network in IPv4 or IPv6 format.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkMasqueradingIpArgs> MasqueradingIps
        {
            get => _masqueradingIps ?? (_masqueradingIps = new InputList<Inputs.ClusterV2NetworkMasqueradingIpArgs>());
            set => _masqueradingIps = value;
        }

        [Input("masqueradingPort")]
        public Input<string>? MasqueradingPort { get; set; }

        [Input("nameServerIpLists")]
        private InputList<Inputs.ClusterV2NetworkNameServerIpListArgs>? _nameServerIpLists;

        /// <summary>
        /// List of name servers on a cluster. This is part of payload for both cluster create &amp; update operations. For create operation, only ipv4 address / fqdn values are supported currently.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkNameServerIpListArgs> NameServerIpLists
        {
            get => _nameServerIpLists ?? (_nameServerIpLists = new InputList<Inputs.ClusterV2NetworkNameServerIpListArgs>());
            set => _nameServerIpLists = value;
        }

        [Input("nfsSubnetWhiteLists")]
        private InputList<string>? _nfsSubnetWhiteLists;

        /// <summary>
        /// NFS subnet whitelist addresses. This is part of payload for cluster update operation only.
        /// </summary>
        public InputList<string> NfsSubnetWhiteLists
        {
            get => _nfsSubnetWhiteLists ?? (_nfsSubnetWhiteLists = new InputList<string>());
            set => _nfsSubnetWhiteLists = value;
        }

        [Input("ntpServerIpLists")]
        private InputList<Inputs.ClusterV2NetworkNtpServerIpListArgs>? _ntpServerIpLists;

        /// <summary>
        /// List of NTP servers on a cluster. This is part of payload for both cluster create &amp; update operations. For create operation, only ipv4 address / fqdn values are supported currently.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkNtpServerIpListArgs> NtpServerIpLists
        {
            get => _ntpServerIpLists ?? (_ntpServerIpLists = new InputList<Inputs.ClusterV2NetworkNtpServerIpListArgs>());
            set => _ntpServerIpLists = value;
        }

        [Input("smtpServers")]
        private InputList<Inputs.ClusterV2NetworkSmtpServerArgs>? _smtpServers;

        /// <summary>
        /// SMTP servers on a cluster. This is part of payload for cluster update operation only.
        /// </summary>
        public InputList<Inputs.ClusterV2NetworkSmtpServerArgs> SmtpServers
        {
            get => _smtpServers ?? (_smtpServers = new InputList<Inputs.ClusterV2NetworkSmtpServerArgs>());
            set => _smtpServers = value;
        }

        public ClusterV2NetworkArgs()
        {
        }
        public static new ClusterV2NetworkArgs Empty => new ClusterV2NetworkArgs();
    }
}
