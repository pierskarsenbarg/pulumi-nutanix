// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    /// <summary>
    /// Provides a resource to register the database based on the input parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nutanix = PiersKarsenbarg.Nutanix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // register PostgreSQL database with instance not registered on VM
    ///     var name = new Nutanix.NdbRegisterDatabase("name", new()
    ///     {
    ///         Category = "DEFAULT",
    ///         DatabaseName = "test-inst",
    ///         DatabaseType = "postgres_database",
    ///         Description = "added by terraform",
    ///         NxClusterId = "{{ cluster_ID }}",
    ///         PostgressInfos = new[]
    ///         {
    ///             new Nutanix.Inputs.NdbRegisterDatabasePostgressInfoArgs
    ///             {
    ///                 BackupPolicy = "prefer_secondary",
    ///                 DbName = "testdb1",
    ///                 DbPassword = "pass",
    ///                 DbUser = "postgres",
    ///                 ListenerPort = "5432",
    ///                 PostgresSoftwareHome = "{{ directory where the PostgreSQL database software is installed }}",
    ///             },
    ///         },
    ///         ResetDescriptionInNxCluster = false,
    ///         TimeMachineInfo = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoArgs
    ///         {
    ///             Description = "description of tms",
    ///             Name = "test-pg-inst-regis",
    ///             Schedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleArgs
    ///             {
    ///                 Continuousschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs
    ///                 {
    ///                     Enabled = true,
    ///                     Logbackupinterval = 30,
    ///                     Snapshotsperday = 1,
    ///                 },
    ///                 Monthlyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs
    ///                 {
    ///                     Dayofmonth = 27,
    ///                     Enabled = true,
    ///                 },
    ///                 Quartelyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs
    ///                 {
    ///                     Dayofmonth = 27,
    ///                     Enabled = true,
    ///                     Startmonth = "JANUARY",
    ///                 },
    ///                 Snapshottimeofday = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs
    ///                 {
    ///                     Hours = 16,
    ///                     Minutes = 0,
    ///                     Seconds = 0,
    ///                 },
    ///                 Weeklyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs
    ///                 {
    ///                     Dayofweek = "WEDNESDAY",
    ///                     Enabled = true,
    ///                 },
    ///                 Yearlyschedule = new Nutanix.Inputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs
    ///                 {
    ///                     Dayofmonth = 31,
    ///                     Enabled = false,
    ///                     Month = "DECEMBER",
    ///                 },
    ///             },
    ///             Slaid = " {{ SLA ID}}",
    ///         },
    ///         VmIp = "{{ vm_ip }}",
    ///         VmPassword = "{{ vm_password }}",
    ///         VmUsername = "{{ vm_username }}",
    ///         WorkingDirectory = "/tmp",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NutanixResourceType("nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase")]
    public partial class NdbRegisterDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// action arguments
        /// </summary>
        [Output("actionarguments")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseActionargument>> Actionarguments { get; private set; } = null!;

        /// <summary>
        /// auto tune staging drive. Default is true
        /// </summary>
        [Output("autoTuneStagingDrive")]
        public Output<bool?> AutoTuneStagingDrive { get; private set; } = null!;

        /// <summary>
        /// category of database. Default is "DEFAULT"
        /// </summary>
        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        /// <summary>
        /// whether instance is cloned or not
        /// </summary>
        [Output("clone")]
        public Output<bool> Clone { get; private set; } = null!;

        /// <summary>
        /// clustered or not. Default is false
        /// </summary>
        [Output("clustered")]
        public Output<bool?> Clustered { get; private set; } = null!;

        /// <summary>
        /// database cluster type
        /// </summary>
        [Output("databaseClusterType")]
        public Output<string> DatabaseClusterType { get; private set; } = null!;

        /// <summary>
        /// name of database
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// database nodes associated with database instance
        /// </summary>
        [Output("databaseNodes")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseDatabaseNode>> DatabaseNodes { get; private set; } = null!;

        /// <summary>
        /// status of database
        /// </summary>
        [Output("databaseStatus")]
        public Output<string> DatabaseStatus { get; private set; } = null!;

        /// <summary>
        /// type of database. Required value: postgres_database
        /// </summary>
        [Output("databaseType")]
        public Output<string> DatabaseType { get; private set; } = null!;

        /// <summary>
        /// date created for db instance
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// date modified for instance
        /// </summary>
        [Output("dateModified")]
        public Output<string> DateModified { get; private set; } = null!;

        /// <summary>
        /// dbserver logical cluster
        /// </summary>
        [Output("dbserverLogicalCluster")]
        public Output<ImmutableDictionary<string, string>> DbserverLogicalCluster { get; private set; } = null!;

        /// <summary>
        /// dbserver logical cluster id
        /// </summary>
        [Output("dbserverLogicalClusterId")]
        public Output<string> DbserverLogicalClusterId { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the database from the VM. Default value is false
        /// </summary>
        [Output("delete")]
        public Output<bool?> Delete { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the logical cluster. Default is true
        /// </summary>
        [Output("deleteLogicalCluster")]
        public Output<bool?> DeleteLogicalCluster { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        /// </summary>
        [Output("deleteTimeMachine")]
        public Output<bool?> DeleteTimeMachine { get; private set; } = null!;

        /// <summary>
        /// description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Force delete of instance. Default is false
        /// </summary>
        [Output("forced")]
        public Output<bool?> Forced { get; private set; } = null!;

        /// <summary>
        /// forced install. Default:  true
        /// </summary>
        [Output("forcedInstall")]
        public Output<bool?> ForcedInstall { get; private set; } = null!;

        [Output("groupInfo")]
        public Output<ImmutableDictionary<string, string>> GroupInfo { get; private set; } = null!;

        /// <summary>
        /// info of instance
        /// </summary>
        [Output("infos")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseInfo>> Infos { get; private set; } = null!;

        /// <summary>
        /// LCM config of instance
        /// </summary>
        [Output("lcmConfigs")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseLcmConfig>> LcmConfigs { get; private set; } = null!;

        /// <summary>
        /// linked databases within database instance
        /// </summary>
        [Output("linkedDatabases")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseLinkedDatabase>> LinkedDatabases { get; private set; } = null!;

        /// <summary>
        /// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        /// </summary>
        [Output("metric")]
        public Output<ImmutableDictionary<string, string>> Metric { get; private set; } = null!;

        /// <summary>
        /// Name of database instance
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// cluster on which NDB is present
        /// </summary>
        [Output("nxClusterId")]
        public Output<string?> NxClusterId { get; private set; } = null!;

        /// <summary>
        /// parent database id
        /// </summary>
        [Output("parentDatabaseId")]
        public Output<string> ParentDatabaseId { get; private set; } = null!;

        /// <summary>
        /// parent source database id
        /// </summary>
        [Output("parentSourceDatabaseId")]
        public Output<string> ParentSourceDatabaseId { get; private set; } = null!;

        /// <summary>
        /// parent time machine id
        /// </summary>
        [Output("parentTimeMachineId")]
        public Output<string> ParentTimeMachineId { get; private set; } = null!;

        /// <summary>
        /// Postgress_Info for registering.
        /// </summary>
        [Output("postgressInfos")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabasePostgressInfo>> PostgressInfos { get; private set; } = null!;

        /// <summary>
        /// properties of database created
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Output("remove")]
        public Output<bool?> Remove { get; private set; } = null!;

        /// <summary>
        /// Reset description in cluster
        /// </summary>
        [Output("resetDescriptionInNxCluster")]
        public Output<bool?> ResetDescriptionInNxCluster { get; private set; } = null!;

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Output("softRemove")]
        public Output<bool?> SoftRemove { get; private set; } = null!;

        /// <summary>
        /// status of instance
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// time machine id of instance
        /// </summary>
        [Output("timeMachineId")]
        public Output<string> TimeMachineId { get; private set; } = null!;

        /// <summary>
        /// Time Machine info
        /// </summary>
        [Output("timeMachineInfo")]
        public Output<Outputs.NdbRegisterDatabaseTimeMachineInfo?> TimeMachineInfo { get; private set; } = null!;

        /// <summary>
        /// Time Machine details of instance
        /// </summary>
        [Output("timeMachines")]
        public Output<ImmutableArray<Outputs.NdbRegisterDatabaseTimeMachine>> TimeMachines { get; private set; } = null!;

        /// <summary>
        /// timezone on which instance is created xw
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;

        /// <summary>
        /// type of database
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// description for VM
        /// </summary>
        [Output("vmDescription")]
        public Output<string?> VmDescription { get; private set; } = null!;

        /// <summary>
        /// IP address of dbserver VM
        /// </summary>
        [Output("vmIp")]
        public Output<string> VmIp { get; private set; } = null!;

        /// <summary>
        /// password of the NDB drive user account.
        /// </summary>
        [Output("vmPassword")]
        public Output<string?> VmPassword { get; private set; } = null!;

        /// <summary>
        /// ssh key for vm
        /// </summary>
        [Output("vmSshkey")]
        public Output<string?> VmSshkey { get; private set; } = null!;

        /// <summary>
        /// username of the NDB drive user account that has sudo access.
        /// </summary>
        [Output("vmUsername")]
        public Output<string?> VmUsername { get; private set; } = null!;

        /// <summary>
        /// working directory. Default is /tmp
        /// </summary>
        [Output("workingDirectory")]
        public Output<string?> WorkingDirectory { get; private set; } = null!;


        /// <summary>
        /// Create a NdbRegisterDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NdbRegisterDatabase(string name, NdbRegisterDatabaseArgs args, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase", name, args ?? new NdbRegisterDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NdbRegisterDatabase(string name, Input<string> id, NdbRegisterDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-nutanix",
                AdditionalSecretOutputs =
                {
                    "vmPassword",
                    "vmSshkey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NdbRegisterDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NdbRegisterDatabase Get(string name, Input<string> id, NdbRegisterDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new NdbRegisterDatabase(name, id, state, options);
        }
    }

    public sealed class NdbRegisterDatabaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("actionarguments")]
        private InputList<Inputs.NdbRegisterDatabaseActionargumentArgs>? _actionarguments;

        /// <summary>
        /// action arguments
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseActionargumentArgs> Actionarguments
        {
            get => _actionarguments ?? (_actionarguments = new InputList<Inputs.NdbRegisterDatabaseActionargumentArgs>());
            set => _actionarguments = value;
        }

        /// <summary>
        /// auto tune staging drive. Default is true
        /// </summary>
        [Input("autoTuneStagingDrive")]
        public Input<bool>? AutoTuneStagingDrive { get; set; }

        /// <summary>
        /// category of database. Default is "DEFAULT"
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// clustered or not. Default is false
        /// </summary>
        [Input("clustered")]
        public Input<bool>? Clustered { get; set; }

        /// <summary>
        /// name of database
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// type of database. Required value: postgres_database
        /// </summary>
        [Input("databaseType", required: true)]
        public Input<string> DatabaseType { get; set; } = null!;

        /// <summary>
        /// - (Optional) Delete the database from the VM. Default value is false
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// - (Optional) Delete the logical cluster. Default is true
        /// </summary>
        [Input("deleteLogicalCluster")]
        public Input<bool>? DeleteLogicalCluster { get; set; }

        /// <summary>
        /// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        /// </summary>
        [Input("deleteTimeMachine")]
        public Input<bool>? DeleteTimeMachine { get; set; }

        /// <summary>
        /// description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// - (Optional) Force delete of instance. Default is false
        /// </summary>
        [Input("forced")]
        public Input<bool>? Forced { get; set; }

        /// <summary>
        /// forced install. Default:  true
        /// </summary>
        [Input("forcedInstall")]
        public Input<bool>? ForcedInstall { get; set; }

        /// <summary>
        /// cluster on which NDB is present
        /// </summary>
        [Input("nxClusterId")]
        public Input<string>? NxClusterId { get; set; }

        [Input("postgressInfos")]
        private InputList<Inputs.NdbRegisterDatabasePostgressInfoArgs>? _postgressInfos;

        /// <summary>
        /// Postgress_Info for registering.
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabasePostgressInfoArgs> PostgressInfos
        {
            get => _postgressInfos ?? (_postgressInfos = new InputList<Inputs.NdbRegisterDatabasePostgressInfoArgs>());
            set => _postgressInfos = value;
        }

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        /// <summary>
        /// Reset description in cluster
        /// </summary>
        [Input("resetDescriptionInNxCluster")]
        public Input<bool>? ResetDescriptionInNxCluster { get; set; }

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbRegisterDatabaseTagArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbRegisterDatabaseTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Time Machine info
        /// </summary>
        [Input("timeMachineInfo")]
        public Input<Inputs.NdbRegisterDatabaseTimeMachineInfoArgs>? TimeMachineInfo { get; set; }

        /// <summary>
        /// description for VM
        /// </summary>
        [Input("vmDescription")]
        public Input<string>? VmDescription { get; set; }

        /// <summary>
        /// IP address of dbserver VM
        /// </summary>
        [Input("vmIp", required: true)]
        public Input<string> VmIp { get; set; } = null!;

        [Input("vmPassword")]
        private Input<string>? _vmPassword;

        /// <summary>
        /// password of the NDB drive user account.
        /// </summary>
        public Input<string>? VmPassword
        {
            get => _vmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("vmSshkey")]
        private Input<string>? _vmSshkey;

        /// <summary>
        /// ssh key for vm
        /// </summary>
        public Input<string>? VmSshkey
        {
            get => _vmSshkey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmSshkey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// username of the NDB drive user account that has sudo access.
        /// </summary>
        [Input("vmUsername")]
        public Input<string>? VmUsername { get; set; }

        /// <summary>
        /// working directory. Default is /tmp
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public NdbRegisterDatabaseArgs()
        {
        }
        public static new NdbRegisterDatabaseArgs Empty => new NdbRegisterDatabaseArgs();
    }

    public sealed class NdbRegisterDatabaseState : global::Pulumi.ResourceArgs
    {
        [Input("actionarguments")]
        private InputList<Inputs.NdbRegisterDatabaseActionargumentGetArgs>? _actionarguments;

        /// <summary>
        /// action arguments
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseActionargumentGetArgs> Actionarguments
        {
            get => _actionarguments ?? (_actionarguments = new InputList<Inputs.NdbRegisterDatabaseActionargumentGetArgs>());
            set => _actionarguments = value;
        }

        /// <summary>
        /// auto tune staging drive. Default is true
        /// </summary>
        [Input("autoTuneStagingDrive")]
        public Input<bool>? AutoTuneStagingDrive { get; set; }

        /// <summary>
        /// category of database. Default is "DEFAULT"
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// whether instance is cloned or not
        /// </summary>
        [Input("clone")]
        public Input<bool>? Clone { get; set; }

        /// <summary>
        /// clustered or not. Default is false
        /// </summary>
        [Input("clustered")]
        public Input<bool>? Clustered { get; set; }

        /// <summary>
        /// database cluster type
        /// </summary>
        [Input("databaseClusterType")]
        public Input<string>? DatabaseClusterType { get; set; }

        /// <summary>
        /// name of database
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("databaseNodes")]
        private InputList<Inputs.NdbRegisterDatabaseDatabaseNodeGetArgs>? _databaseNodes;

        /// <summary>
        /// database nodes associated with database instance
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseDatabaseNodeGetArgs> DatabaseNodes
        {
            get => _databaseNodes ?? (_databaseNodes = new InputList<Inputs.NdbRegisterDatabaseDatabaseNodeGetArgs>());
            set => _databaseNodes = value;
        }

        /// <summary>
        /// status of database
        /// </summary>
        [Input("databaseStatus")]
        public Input<string>? DatabaseStatus { get; set; }

        /// <summary>
        /// type of database. Required value: postgres_database
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// date created for db instance
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// date modified for instance
        /// </summary>
        [Input("dateModified")]
        public Input<string>? DateModified { get; set; }

        [Input("dbserverLogicalCluster")]
        private InputMap<string>? _dbserverLogicalCluster;

        /// <summary>
        /// dbserver logical cluster
        /// </summary>
        public InputMap<string> DbserverLogicalCluster
        {
            get => _dbserverLogicalCluster ?? (_dbserverLogicalCluster = new InputMap<string>());
            set => _dbserverLogicalCluster = value;
        }

        /// <summary>
        /// dbserver logical cluster id
        /// </summary>
        [Input("dbserverLogicalClusterId")]
        public Input<string>? DbserverLogicalClusterId { get; set; }

        /// <summary>
        /// - (Optional) Delete the database from the VM. Default value is false
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// - (Optional) Delete the logical cluster. Default is true
        /// </summary>
        [Input("deleteLogicalCluster")]
        public Input<bool>? DeleteLogicalCluster { get; set; }

        /// <summary>
        /// - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        /// </summary>
        [Input("deleteTimeMachine")]
        public Input<bool>? DeleteTimeMachine { get; set; }

        /// <summary>
        /// description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// - (Optional) Force delete of instance. Default is false
        /// </summary>
        [Input("forced")]
        public Input<bool>? Forced { get; set; }

        /// <summary>
        /// forced install. Default:  true
        /// </summary>
        [Input("forcedInstall")]
        public Input<bool>? ForcedInstall { get; set; }

        [Input("groupInfo")]
        private InputMap<string>? _groupInfo;
        public InputMap<string> GroupInfo
        {
            get => _groupInfo ?? (_groupInfo = new InputMap<string>());
            set => _groupInfo = value;
        }

        [Input("infos")]
        private InputList<Inputs.NdbRegisterDatabaseInfoGetArgs>? _infos;

        /// <summary>
        /// info of instance
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseInfoGetArgs> Infos
        {
            get => _infos ?? (_infos = new InputList<Inputs.NdbRegisterDatabaseInfoGetArgs>());
            set => _infos = value;
        }

        [Input("lcmConfigs")]
        private InputList<Inputs.NdbRegisterDatabaseLcmConfigGetArgs>? _lcmConfigs;

        /// <summary>
        /// LCM config of instance
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseLcmConfigGetArgs> LcmConfigs
        {
            get => _lcmConfigs ?? (_lcmConfigs = new InputList<Inputs.NdbRegisterDatabaseLcmConfigGetArgs>());
            set => _lcmConfigs = value;
        }

        [Input("linkedDatabases")]
        private InputList<Inputs.NdbRegisterDatabaseLinkedDatabaseGetArgs>? _linkedDatabases;

        /// <summary>
        /// linked databases within database instance
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseLinkedDatabaseGetArgs> LinkedDatabases
        {
            get => _linkedDatabases ?? (_linkedDatabases = new InputList<Inputs.NdbRegisterDatabaseLinkedDatabaseGetArgs>());
            set => _linkedDatabases = value;
        }

        [Input("metric")]
        private InputMap<string>? _metric;

        /// <summary>
        /// Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        /// </summary>
        public InputMap<string> Metric
        {
            get => _metric ?? (_metric = new InputMap<string>());
            set => _metric = value;
        }

        /// <summary>
        /// Name of database instance
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// cluster on which NDB is present
        /// </summary>
        [Input("nxClusterId")]
        public Input<string>? NxClusterId { get; set; }

        /// <summary>
        /// parent database id
        /// </summary>
        [Input("parentDatabaseId")]
        public Input<string>? ParentDatabaseId { get; set; }

        /// <summary>
        /// parent source database id
        /// </summary>
        [Input("parentSourceDatabaseId")]
        public Input<string>? ParentSourceDatabaseId { get; set; }

        /// <summary>
        /// parent time machine id
        /// </summary>
        [Input("parentTimeMachineId")]
        public Input<string>? ParentTimeMachineId { get; set; }

        [Input("postgressInfos")]
        private InputList<Inputs.NdbRegisterDatabasePostgressInfoGetArgs>? _postgressInfos;

        /// <summary>
        /// Postgress_Info for registering.
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabasePostgressInfoGetArgs> PostgressInfos
        {
            get => _postgressInfos ?? (_postgressInfos = new InputList<Inputs.NdbRegisterDatabasePostgressInfoGetArgs>());
            set => _postgressInfos = value;
        }

        [Input("properties")]
        private InputList<Inputs.NdbRegisterDatabasePropertyGetArgs>? _properties;

        /// <summary>
        /// properties of database created
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabasePropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NdbRegisterDatabasePropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// - (Optional) Unregister the database from NDB. Default value is true
        /// </summary>
        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        /// <summary>
        /// Reset description in cluster
        /// </summary>
        [Input("resetDescriptionInNxCluster")]
        public Input<bool>? ResetDescriptionInNxCluster { get; set; }

        /// <summary>
        /// - (Optional) Soft remove. Default will be false
        /// </summary>
        [Input("softRemove")]
        public Input<bool>? SoftRemove { get; set; }

        /// <summary>
        /// status of instance
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NdbRegisterDatabaseTagGetArgs>? _tags;

        /// <summary>
        /// tags
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NdbRegisterDatabaseTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// time machine id of instance
        /// </summary>
        [Input("timeMachineId")]
        public Input<string>? TimeMachineId { get; set; }

        /// <summary>
        /// Time Machine info
        /// </summary>
        [Input("timeMachineInfo")]
        public Input<Inputs.NdbRegisterDatabaseTimeMachineInfoGetArgs>? TimeMachineInfo { get; set; }

        [Input("timeMachines")]
        private InputList<Inputs.NdbRegisterDatabaseTimeMachineGetArgs>? _timeMachines;

        /// <summary>
        /// Time Machine details of instance
        /// </summary>
        public InputList<Inputs.NdbRegisterDatabaseTimeMachineGetArgs> TimeMachines
        {
            get => _timeMachines ?? (_timeMachines = new InputList<Inputs.NdbRegisterDatabaseTimeMachineGetArgs>());
            set => _timeMachines = value;
        }

        /// <summary>
        /// timezone on which instance is created xw
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// type of database
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// description for VM
        /// </summary>
        [Input("vmDescription")]
        public Input<string>? VmDescription { get; set; }

        /// <summary>
        /// IP address of dbserver VM
        /// </summary>
        [Input("vmIp")]
        public Input<string>? VmIp { get; set; }

        [Input("vmPassword")]
        private Input<string>? _vmPassword;

        /// <summary>
        /// password of the NDB drive user account.
        /// </summary>
        public Input<string>? VmPassword
        {
            get => _vmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("vmSshkey")]
        private Input<string>? _vmSshkey;

        /// <summary>
        /// ssh key for vm
        /// </summary>
        public Input<string>? VmSshkey
        {
            get => _vmSshkey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vmSshkey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// username of the NDB drive user account that has sudo access.
        /// </summary>
        [Input("vmUsername")]
        public Input<string>? VmUsername { get; set; }

        /// <summary>
        /// working directory. Default is /tmp
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public NdbRegisterDatabaseState()
        {
        }
        public static new NdbRegisterDatabaseState Empty => new NdbRegisterDatabaseState();
    }
}
