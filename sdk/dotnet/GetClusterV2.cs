// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetClusterV2
    {
        /// <summary>
        /// Fetches the cluster entity details identified by {extId}.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cluster = Nutanix.GetClusterV2.Invoke(new()
        ///     {
        ///         ExtId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterV2Result> InvokeAsync(GetClusterV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterV2Result>("nutanix:index/getClusterV2:getClusterV2", args ?? new GetClusterV2Args(), options.WithDefaults());

        /// <summary>
        /// Fetches the cluster entity details identified by {extId}.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cluster = Nutanix.GetClusterV2.Invoke(new()
        ///     {
        ///         ExtId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterV2Result> Invoke(GetClusterV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterV2Result>("nutanix:index/getClusterV2:getClusterV2", args ?? new GetClusterV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches the cluster entity details identified by {extId}.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cluster = Nutanix.GetClusterV2.Invoke(new()
        ///     {
        ///         ExtId = "&lt;YOUR-CLUSTER-ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterV2Result> Invoke(GetClusterV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterV2Result>("nutanix:index/getClusterV2:getClusterV2", args ?? new GetClusterV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Optional) A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name.
        /// The following expansion keys are supported:
        /// - "clusterProfile".
        /// - "storageSummary".
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// -(Required) Represents clusters uuid
        /// </summary>
        [Input("extId", required: true)]
        public string ExtId { get; set; } = null!;

        public GetClusterV2Args()
        {
        }
        public static new GetClusterV2Args Empty => new GetClusterV2Args();
    }

    public sealed class GetClusterV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// -(Optional) A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name.
        /// The following expansion keys are supported:
        /// - "clusterProfile".
        /// - "storageSummary".
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// -(Required) Represents clusters uuid
        /// </summary>
        [Input("extId", required: true)]
        public Input<string> ExtId { get; set; } = null!;

        public GetClusterV2InvokeArgs()
        {
        }
        public static new GetClusterV2InvokeArgs Empty => new GetClusterV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterV2Result
    {
        /// <summary>
        /// -  Score to indicate how much cluster is eligible for storing domain manager backup.
        /// </summary>
        public readonly int BackupEligibilityScore;
        /// <summary>
        /// -  List of categories associated to the PE cluster.
        /// </summary>
        public readonly ImmutableArray<string> Categories;
        /// <summary>
        /// -  Cluster profile UUID.
        /// </summary>
        public readonly string ClusterProfileExtId;
        /// <summary>
        /// -  Cluster configuration details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterV2ConfigResult> Configs;
        /// <summary>
        /// -  The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
        /// </summary>
        public readonly string ContainerName;
        public readonly string? Expand;
        /// <summary>
        /// -  A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// -  Number of inefficient VMs in the cluster.
        /// </summary>
        public readonly int InefficientVmCount;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterV2LinkResult> Links;
        /// <summary>
        /// - HTTP Proxy server name configuration needed to access a cluster which is hosted behind a HTTP Proxy to not reveal its identity.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// -  Network details of a cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterV2NetworkResult> Networks;
        /// <summary>
        /// -  Node reference for a cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterV2NodeResult> Nodes;
        /// <summary>
        /// -  globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// -  Upgrade status of a cluster.
        /// Valid values are:
        /// - "CANCELLED"	The cluster upgrade is cancelled.
        /// - "FAILED"	The cluster upgrade failed.
        /// - "QUEUED"	The cluster upgrade is in the queue.
        /// - "SUCCEEDED"	The cluster was upgraded successfully.
        /// - "DOWNLOADING" The luster upgrade is downloading.
        /// - "PENDING"The cluster upgrade is in pending state.
        /// - "UPGRADING" The cluster is in upgrade state.
        /// - "PREUPGRADE" The cluster is in pre-upgrade state.
        /// - "SCHEDULED" The cluster upgrade is in scheduled state.
        /// </summary>
        public readonly string UpgradeStatus;
        /// <summary>
        /// -  Number of VMs in the cluster.
        /// </summary>
        public readonly int VmCount;

        [OutputConstructor]
        private GetClusterV2Result(
            int backupEligibilityScore,

            ImmutableArray<string> categories,

            string clusterProfileExtId,

            ImmutableArray<Outputs.GetClusterV2ConfigResult> configs,

            string containerName,

            string? expand,

            string extId,

            string id,

            int inefficientVmCount,

            ImmutableArray<Outputs.GetClusterV2LinkResult> links,

            string name,

            ImmutableArray<Outputs.GetClusterV2NetworkResult> networks,

            ImmutableArray<Outputs.GetClusterV2NodeResult> nodes,

            string tenantId,

            string upgradeStatus,

            int vmCount)
        {
            BackupEligibilityScore = backupEligibilityScore;
            Categories = categories;
            ClusterProfileExtId = clusterProfileExtId;
            Configs = configs;
            ContainerName = containerName;
            Expand = expand;
            ExtId = extId;
            Id = id;
            InefficientVmCount = inefficientVmCount;
            Links = links;
            Name = name;
            Networks = networks;
            Nodes = nodes;
            TenantId = tenantId;
            UpgradeStatus = upgradeStatus;
            VmCount = vmCount;
        }
    }
}
