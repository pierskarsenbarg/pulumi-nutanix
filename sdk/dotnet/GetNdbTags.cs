// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbTags
    {
        /// <summary>
        /// List of tags in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tags = Nutanix.GetNdbTags.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNdbTagsResult> InvokeAsync(GetNdbTagsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbTagsResult>("nutanix:index/getNdbTags:getNdbTags", args ?? new GetNdbTagsArgs(), options.WithDefaults());

        /// <summary>
        /// List of tags in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tags = Nutanix.GetNdbTags.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbTagsResult> Invoke(GetNdbTagsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbTagsResult>("nutanix:index/getNdbTags:getNdbTags", args ?? new GetNdbTagsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// List of tags in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tags = Nutanix.GetNdbTags.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbTagsResult> Invoke(GetNdbTagsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbTagsResult>("nutanix:index/getNdbTags:getNdbTags", args ?? new GetNdbTagsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbTagsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// entity for the tag to be associated with.
        /// </summary>
        [Input("entityType")]
        public string? EntityType { get; set; }

        public GetNdbTagsArgs()
        {
        }
        public static new GetNdbTagsArgs Empty => new GetNdbTagsArgs();
    }

    public sealed class GetNdbTagsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// entity for the tag to be associated with.
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        public GetNdbTagsInvokeArgs()
        {
        }
        public static new GetNdbTagsInvokeArgs Empty => new GetNdbTagsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbTagsResult
    {
        /// <summary>
        /// entity for the tag to be associated with.
        /// </summary>
        public readonly string? EntityType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of tags present in NDB.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbTagsTagResult> Tags;

        [OutputConstructor]
        private GetNdbTagsResult(
            string? entityType,

            string id,

            ImmutableArray<Outputs.GetNdbTagsTagResult> tags)
        {
            EntityType = entityType;
            Id = id;
            Tags = tags;
        }
    }
}
