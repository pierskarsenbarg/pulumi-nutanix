// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetNdbDatabasesDatabaseInstanceMetadataResult
    {
        public readonly bool BaseSizeComputed;
        public readonly string CapabilityResetTime;
        public readonly ImmutableArray<string> CreatedDbservers;
        public readonly ImmutableArray<Outputs.GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfoResult> DeregisterInfos;
        public readonly bool DeregisteredWithDeleteTimeMachine;
        public readonly ImmutableDictionary<string, string> Info;
        public readonly string LastLogCatchupForRestoreOperationId;
        public readonly string LastRefreshTimestamp;
        public readonly string LastRequestedRefreshTimestamp;
        public readonly bool LogCatchupForRestoreDispatched;
        public readonly string OriginalDatabaseName;
        public readonly bool PitrBased;
        public readonly string ProvisionOperationId;
        public readonly string RefreshBlockerInfo;
        public readonly ImmutableArray<string> RegisteredDbservers;
        public readonly ImmutableDictionary<string, string> SecureInfo;
        public readonly string SourceSnapshotId;
        public readonly string StateBeforeRefresh;
        public readonly string StateBeforeRestore;
        public readonly string StateBeforeScaling;
        public readonly string TmActivateOperationId;

        [OutputConstructor]
        private GetNdbDatabasesDatabaseInstanceMetadataResult(
            bool baseSizeComputed,

            string capabilityResetTime,

            ImmutableArray<string> createdDbservers,

            ImmutableArray<Outputs.GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfoResult> deregisterInfos,

            bool deregisteredWithDeleteTimeMachine,

            ImmutableDictionary<string, string> info,

            string lastLogCatchupForRestoreOperationId,

            string lastRefreshTimestamp,

            string lastRequestedRefreshTimestamp,

            bool logCatchupForRestoreDispatched,

            string originalDatabaseName,

            bool pitrBased,

            string provisionOperationId,

            string refreshBlockerInfo,

            ImmutableArray<string> registeredDbservers,

            ImmutableDictionary<string, string> secureInfo,

            string sourceSnapshotId,

            string stateBeforeRefresh,

            string stateBeforeRestore,

            string stateBeforeScaling,

            string tmActivateOperationId)
        {
            BaseSizeComputed = baseSizeComputed;
            CapabilityResetTime = capabilityResetTime;
            CreatedDbservers = createdDbservers;
            DeregisterInfos = deregisterInfos;
            DeregisteredWithDeleteTimeMachine = deregisteredWithDeleteTimeMachine;
            Info = info;
            LastLogCatchupForRestoreOperationId = lastLogCatchupForRestoreOperationId;
            LastRefreshTimestamp = lastRefreshTimestamp;
            LastRequestedRefreshTimestamp = lastRequestedRefreshTimestamp;
            LogCatchupForRestoreDispatched = logCatchupForRestoreDispatched;
            OriginalDatabaseName = originalDatabaseName;
            PitrBased = pitrBased;
            ProvisionOperationId = provisionOperationId;
            RefreshBlockerInfo = refreshBlockerInfo;
            RegisteredDbservers = registeredDbservers;
            SecureInfo = secureInfo;
            SourceSnapshotId = sourceSnapshotId;
            StateBeforeRefresh = stateBeforeRefresh;
            StateBeforeRestore = stateBeforeRestore;
            StateBeforeScaling = stateBeforeScaling;
            TmActivateOperationId = tmActivateOperationId;
        }
    }
}
