// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetHostGpuListResult
    {
        public readonly bool Assignable;
        public readonly ImmutableDictionary<string, string> ConsumerReference;
        public readonly int DeviceId;
        public readonly int Fraction;
        public readonly int FrameBufferSizeMib;
        public readonly string GuestDriverVersion;
        public readonly int Index;
        public readonly ImmutableArray<string> LicenseLists;
        public readonly string MaxResolution;
        public readonly string Mode;
        public readonly string Name;
        public readonly int NumVgpusAllocated;
        public readonly int NumVirtualDisplayHeads;
        public readonly int NumaNode;
        public readonly string PciAddress;
        public readonly string Status;
        public readonly string Uuid;
        public readonly string Vendor;

        [OutputConstructor]
        private GetHostGpuListResult(
            bool assignable,

            ImmutableDictionary<string, string> consumerReference,

            int deviceId,

            int fraction,

            int frameBufferSizeMib,

            string guestDriverVersion,

            int index,

            ImmutableArray<string> licenseLists,

            string maxResolution,

            string mode,

            string name,

            int numVgpusAllocated,

            int numVirtualDisplayHeads,

            int numaNode,

            string pciAddress,

            string status,

            string uuid,

            string vendor)
        {
            Assignable = assignable;
            ConsumerReference = consumerReference;
            DeviceId = deviceId;
            Fraction = fraction;
            FrameBufferSizeMib = frameBufferSizeMib;
            GuestDriverVersion = guestDriverVersion;
            Index = index;
            LicenseLists = licenseLists;
            MaxResolution = maxResolution;
            Mode = mode;
            Name = name;
            NumVgpusAllocated = numVgpusAllocated;
            NumVirtualDisplayHeads = numVirtualDisplayHeads;
            NumaNode = numaNode;
            PciAddress = pciAddress;
            Status = status;
            Uuid = uuid;
            Vendor = vendor;
        }
    }
}
