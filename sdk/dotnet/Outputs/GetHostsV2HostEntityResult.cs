// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetHostsV2HostEntityResult
    {
        public readonly string BlockModel;
        public readonly string BlockSerial;
        public readonly int BootTimeUsecs;
        public readonly string ClusterExtId;
        /// <summary>
        /// * `cpuCapacityHz`
        /// * `cpuFrequencyHz`
        /// * `cpuModel`
        /// * `defaultVhdContainerUuid`
        /// * `defaultVhdLocation`
        /// * `defaultVmContainerUuid`
        /// * `defaultVmLocation`
        /// * `failoverClusterFqdn`
        /// * `failoverClusterNodeStatus`
        /// * `gpuDriverVersion`
        /// * `gpuList`
        /// * `hostName`
        /// * `hostType`
        /// * `maintenanceState`
        /// * `memorySizeBytes`
        /// * `nodeStatus`
        /// * `numberOfCpuCores`
        /// * `numberOfCpuSockets`
        /// * `numberOfCpuThreads`
        /// * `rebootPending`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostsV2HostEntityClusterResult> Clusters;
        public readonly ImmutableArray<Outputs.GetHostsV2HostEntityControllerVmResult> ControllerVms;
        public readonly int CpuCapacityHz;
        public readonly int CpuFrequencyHz;
        public readonly string CpuModel;
        public readonly string DefaultVhdContainerUuid;
        public readonly string DefaultVhdLocation;
        public readonly string DefaultVmContainerUuid;
        public readonly string DefaultVmLocation;
        public readonly ImmutableArray<Outputs.GetHostsV2HostEntityDiskResult> Disks;
        public readonly string ExtId;
        public readonly string FailoverClusterFqdn;
        public readonly string FailoverClusterNodeStatus;
        public readonly string GpuDriverVersion;
        public readonly ImmutableArray<string> GpuLists;
        public readonly bool HasCsr;
        public readonly string HostName;
        public readonly string HostType;
        public readonly ImmutableArray<Outputs.GetHostsV2HostEntityHypervisorResult> Hypervisors;
        public readonly ImmutableArray<Outputs.GetHostsV2HostEntityIpmiResult> Ipmis;
        public readonly bool IsDegraded;
        public readonly bool IsHardwareVirtualized;
        public readonly bool IsRebootPending;
        public readonly bool IsSecureBooted;
        public readonly ImmutableArray<Outputs.GetHostsV2HostEntityKeyManagementDeviceToCertStatusResult> KeyManagementDeviceToCertStatuses;
        public readonly ImmutableArray<Outputs.GetHostsV2HostEntityLinkResult> Links;
        public readonly string MaintenanceState;
        public readonly int MemorySizeBytes;
        public readonly string NodeStatus;
        public readonly int NumberOfCpuCores;
        public readonly int NumberOfCpuSockets;
        public readonly int NumberOfCpuThreads;
        public readonly string RackableUnitUuid;
        public readonly string TenantId;

        [OutputConstructor]
        private GetHostsV2HostEntityResult(
            string blockModel,

            string blockSerial,

            int bootTimeUsecs,

            string clusterExtId,

            ImmutableArray<Outputs.GetHostsV2HostEntityClusterResult> clusters,

            ImmutableArray<Outputs.GetHostsV2HostEntityControllerVmResult> controllerVms,

            int cpuCapacityHz,

            int cpuFrequencyHz,

            string cpuModel,

            string defaultVhdContainerUuid,

            string defaultVhdLocation,

            string defaultVmContainerUuid,

            string defaultVmLocation,

            ImmutableArray<Outputs.GetHostsV2HostEntityDiskResult> disks,

            string extId,

            string failoverClusterFqdn,

            string failoverClusterNodeStatus,

            string gpuDriverVersion,

            ImmutableArray<string> gpuLists,

            bool hasCsr,

            string hostName,

            string hostType,

            ImmutableArray<Outputs.GetHostsV2HostEntityHypervisorResult> hypervisors,

            ImmutableArray<Outputs.GetHostsV2HostEntityIpmiResult> ipmis,

            bool isDegraded,

            bool isHardwareVirtualized,

            bool isRebootPending,

            bool isSecureBooted,

            ImmutableArray<Outputs.GetHostsV2HostEntityKeyManagementDeviceToCertStatusResult> keyManagementDeviceToCertStatuses,

            ImmutableArray<Outputs.GetHostsV2HostEntityLinkResult> links,

            string maintenanceState,

            int memorySizeBytes,

            string nodeStatus,

            int numberOfCpuCores,

            int numberOfCpuSockets,

            int numberOfCpuThreads,

            string rackableUnitUuid,

            string tenantId)
        {
            BlockModel = blockModel;
            BlockSerial = blockSerial;
            BootTimeUsecs = bootTimeUsecs;
            ClusterExtId = clusterExtId;
            Clusters = clusters;
            ControllerVms = controllerVms;
            CpuCapacityHz = cpuCapacityHz;
            CpuFrequencyHz = cpuFrequencyHz;
            CpuModel = cpuModel;
            DefaultVhdContainerUuid = defaultVhdContainerUuid;
            DefaultVhdLocation = defaultVhdLocation;
            DefaultVmContainerUuid = defaultVmContainerUuid;
            DefaultVmLocation = defaultVmLocation;
            Disks = disks;
            ExtId = extId;
            FailoverClusterFqdn = failoverClusterFqdn;
            FailoverClusterNodeStatus = failoverClusterNodeStatus;
            GpuDriverVersion = gpuDriverVersion;
            GpuLists = gpuLists;
            HasCsr = hasCsr;
            HostName = hostName;
            HostType = hostType;
            Hypervisors = hypervisors;
            Ipmis = ipmis;
            IsDegraded = isDegraded;
            IsHardwareVirtualized = isHardwareVirtualized;
            IsRebootPending = isRebootPending;
            IsSecureBooted = isSecureBooted;
            KeyManagementDeviceToCertStatuses = keyManagementDeviceToCertStatuses;
            Links = links;
            MaintenanceState = maintenanceState;
            MemorySizeBytes = memorySizeBytes;
            NodeStatus = nodeStatus;
            NumberOfCpuCores = numberOfCpuCores;
            NumberOfCpuSockets = numberOfCpuSockets;
            NumberOfCpuThreads = numberOfCpuThreads;
            RackableUnitUuid = rackableUnitUuid;
            TenantId = tenantId;
        }
    }
}
