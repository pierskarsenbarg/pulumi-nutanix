// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class VirtualMachineDiskList
    {
        /// <summary>
        /// Reference to a data source.
        /// 
        /// The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DataSourceReference;
        /// <summary>
        /// Properties to a device.
        /// </summary>
        public readonly Outputs.VirtualMachineDiskListDeviceProperties? DeviceProperties;
        /// <summary>
        /// Size of the disk in Bytes.
        /// </summary>
        public readonly int? DiskSizeBytes;
        /// <summary>
        /// Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        /// </summary>
        public readonly int? DiskSizeMib;
        public readonly Outputs.VirtualMachineDiskListStorageConfig? StorageConfig;
        /// <summary>
        /// - (Optional) The device ID which is used to uniquely identify this particular disk.
        /// </summary>
        public readonly string? Uuid;
        public readonly ImmutableDictionary<string, string>? VolumeGroupReference;

        [OutputConstructor]
        private VirtualMachineDiskList(
            ImmutableDictionary<string, string>? dataSourceReference,

            Outputs.VirtualMachineDiskListDeviceProperties? deviceProperties,

            int? diskSizeBytes,

            int? diskSizeMib,

            Outputs.VirtualMachineDiskListStorageConfig? storageConfig,

            string? uuid,

            ImmutableDictionary<string, string>? volumeGroupReference)
        {
            DataSourceReference = dataSourceReference;
            DeviceProperties = deviceProperties;
            DiskSizeBytes = diskSizeBytes;
            DiskSizeMib = diskSizeMib;
            StorageConfig = storageConfig;
            Uuid = uuid;
            VolumeGroupReference = volumeGroupReference;
        }
    }
}
