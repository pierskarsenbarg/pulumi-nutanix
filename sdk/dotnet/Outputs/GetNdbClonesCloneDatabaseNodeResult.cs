// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetNdbClonesCloneDatabaseNodeResult
    {
        public readonly ImmutableDictionary<string, string> AccessLevel;
        public readonly string DatabaseId;
        /// <summary>
        /// database status
        /// </summary>
        public readonly string DatabaseStatus;
        /// <summary>
        /// date created for clone
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// last modified date for clone
        /// </summary>
        public readonly string DateModified;
        public readonly ImmutableDictionary<string, string> Dbserver;
        public readonly string DbserverId;
        /// <summary>
        /// cloned description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// cloned id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// cloned info
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodeInfoResult> Infos;
        /// <summary>
        /// cloned name
        /// </summary>
        public readonly string Name;
        public readonly bool Primary;
        /// <summary>
        /// properties of clone
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodePropertyResult> Properties;
        public readonly string ProtectionDomainId;
        public readonly ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodeProtectionDomainResult> ProtectionDomains;
        public readonly string SoftwareInstallationId;
        /// <summary>
        /// status of clone
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodeTagResult> Tags;

        [OutputConstructor]
        private GetNdbClonesCloneDatabaseNodeResult(
            ImmutableDictionary<string, string> accessLevel,

            string databaseId,

            string databaseStatus,

            string dateCreated,

            string dateModified,

            ImmutableDictionary<string, string> dbserver,

            string dbserverId,

            string description,

            string id,

            ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodeInfoResult> infos,

            string name,

            bool primary,

            ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodePropertyResult> properties,

            string protectionDomainId,

            ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodeProtectionDomainResult> protectionDomains,

            string softwareInstallationId,

            string status,

            ImmutableArray<Outputs.GetNdbClonesCloneDatabaseNodeTagResult> tags)
        {
            AccessLevel = accessLevel;
            DatabaseId = databaseId;
            DatabaseStatus = databaseStatus;
            DateCreated = dateCreated;
            DateModified = dateModified;
            Dbserver = dbserver;
            DbserverId = dbserverId;
            Description = description;
            Id = id;
            Infos = infos;
            Name = name;
            Primary = primary;
            Properties = properties;
            ProtectionDomainId = protectionDomainId;
            ProtectionDomains = protectionDomains;
            SoftwareInstallationId = softwareInstallationId;
            Status = status;
            Tags = tags;
        }
    }
}
