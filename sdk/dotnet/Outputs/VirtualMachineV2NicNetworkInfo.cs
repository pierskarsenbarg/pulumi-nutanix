// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class VirtualMachineV2NicNetworkInfo
    {
        /// <summary>
        /// The IP address configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoIpv4Config> Ipv4Configs;
        public readonly ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoIpv4Info> Ipv4Infos;
        /// <summary>
        /// The network function chain associates with the NIC. Only valid if nic_type is NORMAL_NIC.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoNetworkFunctionChain> NetworkFunctionChains;
        /// <summary>
        /// The type of this Network function NIC. Defaults to INGRESS.
        /// </summary>
        public readonly string? NetworkFunctionNicType;
        /// <summary>
        /// NIC type. Valid values "SPAN_DESTINATION_NIC",  "NORMAL_NIC", "DIRECT_NIC", "NETWORK_FUNCTION_NIC" .
        /// </summary>
        public readonly string? NicType;
        /// <summary>
        /// Indicates whether an unknown unicast traffic is forwarded to this NIC or not. This is applicable only for the NICs on the overlay subnets.
        /// </summary>
        public readonly bool? ShouldAllowUnknownMacs;
        /// <summary>
        /// Network identifier for this adapter. Only valid if nic_type is NORMAL_NIC or DIRECT_NIC
        /// * `subnet.ext_id`: (Optional) The globally unique identifier of a subnet of type UUID.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoSubnet> Subnets;
        /// <summary>
        /// List of networks to trunk if VLAN mode is marked as TRUNKED. If empty and VLAN mode is set to TRUNKED, all the VLANs are trunked.
        /// </summary>
        public readonly ImmutableArray<int> TrunkedVlans;
        /// <summary>
        /// all the virtual NICs are created in ACCESS mode, which permits only one VLAN per virtual network. TRUNKED mode allows multiple VLANs on a single VM NIC for network-aware user VMs.
        /// </summary>
        public readonly string? VlanMode;

        [OutputConstructor]
        private VirtualMachineV2NicNetworkInfo(
            ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoIpv4Config> ipv4Configs,

            ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoIpv4Info> ipv4Infos,

            ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoNetworkFunctionChain> networkFunctionChains,

            string? networkFunctionNicType,

            string? nicType,

            bool? shouldAllowUnknownMacs,

            ImmutableArray<Outputs.VirtualMachineV2NicNetworkInfoSubnet> subnets,

            ImmutableArray<int> trunkedVlans,

            string? vlanMode)
        {
            Ipv4Configs = ipv4Configs;
            Ipv4Infos = ipv4Infos;
            NetworkFunctionChains = networkFunctionChains;
            NetworkFunctionNicType = networkFunctionNicType;
            NicType = nicType;
            ShouldAllowUnknownMacs = shouldAllowUnknownMacs;
            Subnets = subnets;
            TrunkedVlans = trunkedVlans;
            VlanMode = vlanMode;
        }
    }
}
