// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetRoutesV2RouteResult
    {
        /// <summary>
        /// BGP session description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Destination IP Subnet Configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutesV2RouteDestinationResult> Destinations;
        /// <summary>
        /// Route UUID
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// External routing domain associated with this route table.
        /// </summary>
        public readonly string ExternalRoutingDomainReference;
        /// <summary>
        /// Indicates whether the route is active in the forwarding plane.
        /// </summary>
        public readonly bool IsActive;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutesV2RouteLinkResult> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutesV2RouteMetadataResult> Metadatas;
        /// <summary>
        /// Route name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Route nexthop.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutesV2RouteNextHopResult> NextHops;
        /// <summary>
        /// Route priority. A higher value implies greater preference is assigned to the route.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Route table UUID
        /// </summary>
        public readonly string RouteTableExtId;
        /// <summary>
        /// Route table reference.
        /// </summary>
        public readonly string RouteTableReference;
        /// <summary>
        /// Route type. Acceptable values are "STATIC", "LOCAL", "DYNAMIC"
        /// </summary>
        public readonly string RouteType;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// VPC reference.
        /// </summary>
        public readonly string VpcReference;

        [OutputConstructor]
        private GetRoutesV2RouteResult(
            string description,

            ImmutableArray<Outputs.GetRoutesV2RouteDestinationResult> destinations,

            string extId,

            string externalRoutingDomainReference,

            bool isActive,

            ImmutableArray<Outputs.GetRoutesV2RouteLinkResult> links,

            ImmutableArray<Outputs.GetRoutesV2RouteMetadataResult> metadatas,

            string name,

            ImmutableArray<Outputs.GetRoutesV2RouteNextHopResult> nextHops,

            int priority,

            string routeTableExtId,

            string routeTableReference,

            string routeType,

            string tenantId,

            string vpcReference)
        {
            Description = description;
            Destinations = destinations;
            ExtId = extId;
            ExternalRoutingDomainReference = externalRoutingDomainReference;
            IsActive = isActive;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            NextHops = nextHops;
            Priority = priority;
            RouteTableExtId = routeTableExtId;
            RouteTableReference = routeTableReference;
            RouteType = routeType;
            TenantId = tenantId;
            VpcReference = vpcReference;
        }
    }
}
