// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetSubnetsV2SubnetResult
    {
        public readonly string BridgeName;
        public readonly string ClusterName;
        public readonly string ClusterReference;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetDhcpOptionResult> DhcpOptions;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetDynamicIpAddressResult> DynamicIpAddresses;
        public readonly string ExtId;
        public readonly string HypervisorType;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetIpConfigResult> IpConfigs;
        public readonly string IpPrefix;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetIpUsageResult> IpUsages;
        public readonly bool IsAdvancedNetworking;
        public readonly bool IsExternal;
        public readonly bool IsNatEnabled;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetLinkResult> Links;
        public readonly string MigrationState;
        public readonly string Name;
        public readonly string NetworkFunctionChainReference;
        public readonly int NetworkId;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetReservedIpAddressResult> ReservedIpAddresses;
        public readonly string SubnetType;
        public readonly string VirtualSwitchReference;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetVirtualSwitchResult> VirtualSwitches;
        public readonly string VpcReference;
        public readonly ImmutableArray<Outputs.GetSubnetsV2SubnetVpcResult> Vpcs;

        [OutputConstructor]
        private GetSubnetsV2SubnetResult(
            string bridgeName,

            string clusterName,

            string clusterReference,

            string description,

            ImmutableArray<Outputs.GetSubnetsV2SubnetDhcpOptionResult> dhcpOptions,

            ImmutableArray<Outputs.GetSubnetsV2SubnetDynamicIpAddressResult> dynamicIpAddresses,

            string extId,

            string hypervisorType,

            ImmutableArray<Outputs.GetSubnetsV2SubnetIpConfigResult> ipConfigs,

            string ipPrefix,

            ImmutableArray<Outputs.GetSubnetsV2SubnetIpUsageResult> ipUsages,

            bool isAdvancedNetworking,

            bool isExternal,

            bool isNatEnabled,

            ImmutableArray<Outputs.GetSubnetsV2SubnetLinkResult> links,

            string migrationState,

            string name,

            string networkFunctionChainReference,

            int networkId,

            ImmutableArray<Outputs.GetSubnetsV2SubnetReservedIpAddressResult> reservedIpAddresses,

            string subnetType,

            string virtualSwitchReference,

            ImmutableArray<Outputs.GetSubnetsV2SubnetVirtualSwitchResult> virtualSwitches,

            string vpcReference,

            ImmutableArray<Outputs.GetSubnetsV2SubnetVpcResult> vpcs)
        {
            BridgeName = bridgeName;
            ClusterName = clusterName;
            ClusterReference = clusterReference;
            Description = description;
            DhcpOptions = dhcpOptions;
            DynamicIpAddresses = dynamicIpAddresses;
            ExtId = extId;
            HypervisorType = hypervisorType;
            IpConfigs = ipConfigs;
            IpPrefix = ipPrefix;
            IpUsages = ipUsages;
            IsAdvancedNetworking = isAdvancedNetworking;
            IsExternal = isExternal;
            IsNatEnabled = isNatEnabled;
            Links = links;
            MigrationState = migrationState;
            Name = name;
            NetworkFunctionChainReference = networkFunctionChainReference;
            NetworkId = networkId;
            ReservedIpAddresses = reservedIpAddresses;
            SubnetType = subnetType;
            VirtualSwitchReference = virtualSwitchReference;
            VirtualSwitches = virtualSwitches;
            VpcReference = vpcReference;
            Vpcs = vpcs;
        }
    }
}
