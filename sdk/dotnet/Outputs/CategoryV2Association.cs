// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class CategoryV2Association
    {
        /// <summary>
        /// External identifier for the given category, used across all v4 apis/entities/resources where categories are referenced.
        /// </summary>
        public readonly string? CategoryId;
        /// <summary>
        /// Count of associations of a particular type of entity or policy
        /// </summary>
        public readonly string? Count;
        /// <summary>
        /// An enum denoting the resource group.
        /// Resources can be organized into either an entity or a policy.
        /// Valid values are:
        /// - `POLICY`:  A ResourceGroup denoting a nutanix policy like VM host affinity policy, image placement policy, access control policy, and so on.&lt;br&gt; A category is generally associated with many entities.&lt;br&gt; The policy which is associated with this category, is then applied to those entities which are also associated with the same category.
        /// - `ENTITY`: A ResourceGroup denoting a nutanix entity like VM, cluster, host, image, and so on.&lt;br&gt; A category is generally associated with many entities.&lt;br&gt; A policy is then applied to these entities through the category.
        /// </summary>
        public readonly string? ResourceGroup;
        /// <summary>
        /// An enum denoting the associated resource types. Resource types are further grouped into 2 types - entity or a policy.
        /// Valid values are:
        /// - `APP`:  A resource of type application.
        /// - `PROTECTION_RULE`:  A policy or rule of type protection rule.
        /// - `IMAGE_RATE_LIMIT`: A resource of type rate limit.
        /// - `MH_VM`: A resource of type Virtual Machine.
        /// - `BLUEPRINT`:  A resource of type blueprint.
        /// - `HOST`:  A resource representing the underlying host, the machine hosting the hypervisors and VMs.
        /// - `IMAGE`:  A resource of type image.
        /// - `VM_VM_ANTI_AFFINITY_POLICY`:  A policy of type VM-VM anti-affinity; This policy decides that the specified set of VMs are running on different hosts.
        /// - `ACCESS_CONTROL_POLICY`: A policy or rule of type access control policy or ACP; the rules that decide authorization of users to access an API.
        /// - `VM_HOST_AFFINITY_POLICY`: A policy of type VM host affinity; The policy decides the affinity between a set of VMs to be run only a specified set of hosts
        /// - `NGT_POLICY`:  A policy or rule of type NGT policy.
        /// - `RECOVERY_PLAN`:  A policy or rule of type recovery plan.
        /// - `MARKETPLACE_ITEM`: A resource of type marketplace item.
        /// - `CLUSTER`:  A resource of type cluster, usually refers to a PE cluster.
        /// - `NETWORK_SECURITY_RULE`:  A rule of type network security.
        /// - `HOST_NIC`:  A resource of type Physical NIC.
        /// - `ACTION_RULE`:  A policy of type Playbook.
        /// - `VOLUMEGROUP`:  A resource of type volume group.
        /// - `REPORT`:  A resource of type report.
        /// - `STORAGE_POLICY`: A policy or rule of type storage policy.
        /// - `BUNDLE`:  A resource of type bundle.
        /// - `QOS_POLICY`: A policy or rule of type QoS policy.
        /// - `SUBNET`:  A resource of type network subnets.
        /// - `VM`: A resource of type Virtual Machine.
        /// - `NETWORK_SECURITY_POLICY`:  A policy of type network security.
        /// - `POLICY_SCHEMA`:  Policies like user-defined-alerts.
        /// - `IMAGE_PLACEMENT_POLICY`:  A policy of type image placement.
        /// </summary>
        public readonly string? ResourceType;

        [OutputConstructor]
        private CategoryV2Association(
            string? categoryId,

            string? count,

            string? resourceGroup,

            string? resourceType)
        {
            CategoryId = categoryId;
            Count = count;
            ResourceGroup = resourceGroup;
            ResourceType = resourceType;
        }
    }
}
