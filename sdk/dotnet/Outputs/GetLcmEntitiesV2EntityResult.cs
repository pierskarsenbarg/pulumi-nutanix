// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetLcmEntitiesV2EntityResult
    {
        /// <summary>
        /// List of available versions for an LCM entity to update.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmEntitiesV2EntityAvailableVersionResult> AvailableVersions;
        /// <summary>
        /// Component information for the payload based entity.
        /// </summary>
        public readonly ImmutableArray<string> ChildEntities;
        /// <summary>
        /// Cluster uuid on which the resource is present or operation is being performed.
        /// </summary>
        public readonly string ClusterExtId;
        /// <summary>
        /// Unique identifier of an LCM entity e.g. "HDD serial number".
        /// </summary>
        public readonly string DeviceId;
        /// <summary>
        /// LCM entity class.
        /// </summary>
        public readonly string EntityClass;
        /// <summary>
        /// Description of an LCM entity.
        /// </summary>
        public readonly string EntityDescription;
        /// <summary>
        /// Detailed information for the LCM entity. For example, firmware entities contain additional information about NIC and so on.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmEntitiesV2EntityEntityDetailResult> EntityDetails;
        /// <summary>
        /// LCM entity model.
        /// </summary>
        public readonly string EntityModel;
        /// <summary>
        /// Type of an LCM entity.  Enum Values:
        /// * `FIRMWARE`: LCM entity type firmware.
        /// * `SOFTWARE`: LCM entity type software.
        /// </summary>
        public readonly string EntityType;
        /// <summary>
        /// Current version of an LCM entity.
        /// </summary>
        public readonly string EntityVersion;
        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// UUID of the group that this LCM entity is part of.
        /// </summary>
        public readonly string GroupUuid;
        /// <summary>
        /// A hardware family for a LCM entity.
        /// </summary>
        public readonly string HardwareFamily;
        /// <summary>
        /// Hardware vendor information.
        /// </summary>
        public readonly string HardwareVendor;
        /// <summary>
        /// UTC date and time in RFC-3339 format when the task was last updated.
        /// </summary>
        public readonly string LastUpdatedTime;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmEntitiesV2EntityLinkResult> Links;
        /// <summary>
        /// Location info corresponds to a tuple of location type (either node/cluster) and ExtID
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmEntitiesV2EntityLocationInfoResult> LocationInfos;
        /// <summary>
        /// A list of sub-entities applicable to the entity.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLcmEntitiesV2EntitySubEntityResult> SubEntities;
        /// <summary>
        /// The requested update version of an LCM entity.
        /// </summary>
        public readonly string TargetVersion;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetLcmEntitiesV2EntityResult(
            ImmutableArray<Outputs.GetLcmEntitiesV2EntityAvailableVersionResult> availableVersions,

            ImmutableArray<string> childEntities,

            string clusterExtId,

            string deviceId,

            string entityClass,

            string entityDescription,

            ImmutableArray<Outputs.GetLcmEntitiesV2EntityEntityDetailResult> entityDetails,

            string entityModel,

            string entityType,

            string entityVersion,

            string extId,

            string groupUuid,

            string hardwareFamily,

            string hardwareVendor,

            string lastUpdatedTime,

            ImmutableArray<Outputs.GetLcmEntitiesV2EntityLinkResult> links,

            ImmutableArray<Outputs.GetLcmEntitiesV2EntityLocationInfoResult> locationInfos,

            ImmutableArray<Outputs.GetLcmEntitiesV2EntitySubEntityResult> subEntities,

            string targetVersion,

            string tenantId)
        {
            AvailableVersions = availableVersions;
            ChildEntities = childEntities;
            ClusterExtId = clusterExtId;
            DeviceId = deviceId;
            EntityClass = entityClass;
            EntityDescription = entityDescription;
            EntityDetails = entityDetails;
            EntityModel = entityModel;
            EntityType = entityType;
            EntityVersion = entityVersion;
            ExtId = extId;
            GroupUuid = groupUuid;
            HardwareFamily = hardwareFamily;
            HardwareVendor = hardwareVendor;
            LastUpdatedTime = lastUpdatedTime;
            Links = links;
            LocationInfos = locationInfos;
            SubEntities = subEntities;
            TargetVersion = targetVersion;
            TenantId = tenantId;
        }
    }
}
