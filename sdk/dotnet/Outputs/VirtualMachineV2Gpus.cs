// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class VirtualMachineV2Gpus
    {
        /// <summary>
        /// The device Id of the GPU.
        /// </summary>
        public readonly int? DeviceId;
        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string? ExtId;
        public readonly int? Fraction;
        public readonly int? FrameBufferSizeBytes;
        public readonly string? GuestDriverVersion;
        public readonly ImmutableArray<Outputs.VirtualMachineV2GpusLink> Links;
        /// <summary>
        /// ) The mode of this GPU. Valid values "PASSTHROUGH_GRAPHICS", "PASSTHROUGH_COMPUTE", "VIRTUAL" .
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// VM name.
        /// </summary>
        public readonly string? Name;
        public readonly int? NumVirtualDisplayHeads;
        /// <summary>
        /// The (S)egment:(B)us:(D)evice.(F)unction hardware address.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineV2GpusPciAddress> PciAddresses;
        public readonly string? TenantId;
        /// <summary>
        /// The vendor of the GPU. Valid values "NVIDIA", "AMD", "INTEL" .
        /// </summary>
        public readonly string? Vendor;

        [OutputConstructor]
        private VirtualMachineV2Gpus(
            int? deviceId,

            string? extId,

            int? fraction,

            int? frameBufferSizeBytes,

            string? guestDriverVersion,

            ImmutableArray<Outputs.VirtualMachineV2GpusLink> links,

            string? mode,

            string? name,

            int? numVirtualDisplayHeads,

            ImmutableArray<Outputs.VirtualMachineV2GpusPciAddress> pciAddresses,

            string? tenantId,

            string? vendor)
        {
            DeviceId = deviceId;
            ExtId = extId;
            Fraction = fraction;
            FrameBufferSizeBytes = frameBufferSizeBytes;
            GuestDriverVersion = guestDriverVersion;
            Links = links;
            Mode = mode;
            Name = name;
            NumVirtualDisplayHeads = numVirtualDisplayHeads;
            PciAddresses = pciAddresses;
            TenantId = tenantId;
            Vendor = vendor;
        }
    }
}
