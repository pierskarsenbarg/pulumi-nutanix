// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetClusterV2ConfigFaultToleranceStateResult
    {
        /// <summary>
        /// - Cluster Fault tolerance. Set desiredClusterFaultTolerance for cluster create and update.
        /// Valid values are:
        /// - "CFT_1N_OR_1D":     - System can handle fault of one node or one disk.
        /// - "CFT_2N_OR_2D":     - System can handle fault of two nodes or two disks.
        /// - "CFT_1N_AND_1D":    - System can handle fault of one node and one disk on the other node simultaneously.
        /// - "CFT_0N_AND_0D":    - System can not handle any fault with a node or a disk.
        /// </summary>
        public readonly string CurrentClusterFaultTolerance;
        /// <summary>
        /// - Maximum fault tolerance that is supported currently.
        /// </summary>
        public readonly int CurrentMaxFaultTolerance;
        /// <summary>
        /// - Cluster Fault tolerance. Set desiredClusterFaultTolerance for cluster create and update.
        /// Valid values are:
        /// - "CFT_1N_OR_1D":     - System can handle fault of one node or one disk.
        /// - "CFT_2N_OR_2D":     - System can handle fault of two nodes or two disks.
        /// - "CFT_1N_AND_1D":    - System can handle fault of one node and one disk on the other node simultaneously.
        /// - "CFT_0N_AND_0D":    - System can not handle any fault with a node or a disk.
        /// </summary>
        public readonly string DesiredClusterFaultTolerance;
        /// <summary>
        /// - Maximum fault tolerance desired.
        /// </summary>
        public readonly int DesiredMaxFaultTolerance;
        /// <summary>
        /// - Domain awareness level corresponds to unit of cluster group. This is part of payload for both cluster create &amp; update operations.
        /// Valid values are:
        /// - "RACK"	Rack level awareness.
        /// - "NODE"	Node level awareness.
        /// - "BLOCK"	Block level awareness.
        /// - "DISK"	Disk level awareness.
        /// </summary>
        public readonly string DomainAwarenessLevel;
        /// <summary>
        /// - Redundancy Status of the cluster
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterV2ConfigFaultToleranceStateRedundancyStatusResult> RedundancyStatuses;

        [OutputConstructor]
        private GetClusterV2ConfigFaultToleranceStateResult(
            string currentClusterFaultTolerance,

            int currentMaxFaultTolerance,

            string desiredClusterFaultTolerance,

            int desiredMaxFaultTolerance,

            string domainAwarenessLevel,

            ImmutableArray<Outputs.GetClusterV2ConfigFaultToleranceStateRedundancyStatusResult> redundancyStatuses)
        {
            CurrentClusterFaultTolerance = currentClusterFaultTolerance;
            CurrentMaxFaultTolerance = currentMaxFaultTolerance;
            DesiredClusterFaultTolerance = desiredClusterFaultTolerance;
            DesiredMaxFaultTolerance = desiredMaxFaultTolerance;
            DomainAwarenessLevel = domainAwarenessLevel;
            RedundancyStatuses = redundancyStatuses;
        }
    }
}
