// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class ClustersUnconfiguredNodeNetworksV2NodeList
    {
        /// <summary>
        /// -(Optional) Block ID.
        /// </summary>
        public readonly string? BlockId;
        /// <summary>
        /// -(Optional) Current network interface.
        /// </summary>
        public readonly string? CurrentNetworkInterface;
        /// <summary>
        /// -(Optional) CVM IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListCvmIp> CvmIps;
        /// <summary>
        /// -(Optional) Digital certificate map list.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListDigitalCertificateMapList> DigitalCertificateMapLists;
        /// <summary>
        /// -(Optional) Hypervisor IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIp> HypervisorIps;
        /// <summary>
        /// -(Optional) Hypervisor type.
        /// </summary>
        public readonly string? HypervisorType;
        /// <summary>
        /// -(Optional) Hypervisor version.
        /// </summary>
        public readonly string? HypervisorVersion;
        /// <summary>
        /// -(Optional) IPMI IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListIpmiIp> IpmiIps;
        /// <summary>
        /// -(Optional) Is compute only.
        /// </summary>
        public readonly bool? IsComputeOnly;
        public readonly bool? IsLightCompute;
        /// <summary>
        /// -(Optional) Is ROBO mixed hypervisor.
        /// </summary>
        public readonly bool? IsRoboMixedHypervisor;
        /// <summary>
        /// -(Optional) Model name.
        /// </summary>
        public readonly string? Model;
        /// <summary>
        /// -(Optional) Node position.
        /// </summary>
        public readonly string? NodePosition;
        /// <summary>
        /// -(Optional) Node UUID.
        /// </summary>
        public readonly string? NodeUuid;
        /// <summary>
        /// -(Optional) NOS version.
        /// </summary>
        public readonly string? NosVersion;

        [OutputConstructor]
        private ClustersUnconfiguredNodeNetworksV2NodeList(
            string? blockId,

            string? currentNetworkInterface,

            ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListCvmIp> cvmIps,

            ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListDigitalCertificateMapList> digitalCertificateMapLists,

            ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListHypervisorIp> hypervisorIps,

            string? hypervisorType,

            string? hypervisorVersion,

            ImmutableArray<Outputs.ClustersUnconfiguredNodeNetworksV2NodeListIpmiIp> ipmiIps,

            bool? isComputeOnly,

            bool? isLightCompute,

            bool? isRoboMixedHypervisor,

            string? model,

            string? nodePosition,

            string? nodeUuid,

            string? nosVersion)
        {
            BlockId = blockId;
            CurrentNetworkInterface = currentNetworkInterface;
            CvmIps = cvmIps;
            DigitalCertificateMapLists = digitalCertificateMapLists;
            HypervisorIps = hypervisorIps;
            HypervisorType = hypervisorType;
            HypervisorVersion = hypervisorVersion;
            IpmiIps = ipmiIps;
            IsComputeOnly = isComputeOnly;
            IsLightCompute = isLightCompute;
            IsRoboMixedHypervisor = isRoboMixedHypervisor;
            Model = model;
            NodePosition = nodePosition;
            NodeUuid = nodeUuid;
            NosVersion = nosVersion;
        }
    }
}
