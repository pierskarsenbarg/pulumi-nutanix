// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class FoundationImageNodesCluster
    {
        /// <summary>
        /// : - Backplane netmask.
        /// </summary>
        public readonly string? BackplaneNetmask;
        /// <summary>
        /// : - Backplane subnet address.
        /// </summary>
        public readonly string? BackplaneSubnet;
        /// <summary>
        /// : - Backplane vlan.
        /// </summary>
        public readonly string? BackplaneVlan;
        /// <summary>
        /// : - External IP of the cluster.
        /// </summary>
        public readonly string? ClusterExternalIp;
        /// <summary>
        /// : - (Optional, Default = true) If cluster should be created.
        /// </summary>
        public readonly bool? ClusterInitNow;
        /// <summary>
        /// : - If cluster initialization was successful.
        /// </summary>
        public readonly bool? ClusterInitSuccessful;
        /// <summary>
        /// : - (Required) Members in the cluster.
        /// </summary>
        public readonly ImmutableArray<string> ClusterMembers;
        /// <summary>
        /// : - (Required) Name of the cluster.
        /// </summary>
        public readonly string ClusterName;
        /// <summary>
        /// : - DNS servers of CVM.
        /// </summary>
        public readonly string? CvmDnsServers;
        /// <summary>
        /// : - NTP servers of CVM.
        /// </summary>
        public readonly string? CvmNtpServers;
        /// <summary>
        /// : - If network segmentation should be enabled.
        /// </summary>
        public readonly bool? EnableNs;
        /// <summary>
        /// : - NTP servers of hypervisor.
        /// </summary>
        public readonly string? HypervisorNtpServers;
        /// <summary>
        /// : - (Required) Cluster Redundancy Factor.
        /// </summary>
        public readonly int RedundancyFactor;
        /// <summary>
        /// : - If it is a single node cluster.
        /// </summary>
        public readonly bool? SingleNodeCluster;

        [OutputConstructor]
        private FoundationImageNodesCluster(
            string? backplaneNetmask,

            string? backplaneSubnet,

            string? backplaneVlan,

            string? clusterExternalIp,

            bool? clusterInitNow,

            bool? clusterInitSuccessful,

            ImmutableArray<string> clusterMembers,

            string clusterName,

            string? cvmDnsServers,

            string? cvmNtpServers,

            bool? enableNs,

            string? hypervisorNtpServers,

            int redundancyFactor,

            bool? singleNodeCluster)
        {
            BackplaneNetmask = backplaneNetmask;
            BackplaneSubnet = backplaneSubnet;
            BackplaneVlan = backplaneVlan;
            ClusterExternalIp = clusterExternalIp;
            ClusterInitNow = clusterInitNow;
            ClusterInitSuccessful = clusterInitSuccessful;
            ClusterMembers = clusterMembers;
            ClusterName = clusterName;
            CvmDnsServers = cvmDnsServers;
            CvmNtpServers = cvmNtpServers;
            EnableNs = enableNs;
            HypervisorNtpServers = hypervisorNtpServers;
            RedundancyFactor = redundancyFactor;
            SingleNodeCluster = singleNodeCluster;
        }
    }
}
