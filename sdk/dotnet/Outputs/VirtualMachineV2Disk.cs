// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class VirtualMachineV2Disk
    {
        /// <summary>
        /// Supporting storage to create virtual disk on.
        /// * `backing_info.vm_disk`:(Optional) backing Info for vmDisk
        /// * `backing_info.adfs_volume_group_reference`: (Required) Volume Group Reference
        /// * `backing_info.adfs_volume_group_reference.volume_group_ext_id`: (Required) The globally unique identifier of an ADSF volume group. It should be of type UUID.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineV2DiskBackingInfo> BackingInfos;
        /// <summary>
        /// Disk address.
        /// * `disk_address.bus_type`: (Required) Bus type for the device. The acceptable values are: SCSI, IDE, PCI, SATA, SPAPR (only PPC).
        /// * `disk_address.index`: (Required) Device index on the bus. This field is ignored unless the bus details are specified.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineV2DiskDiskAddress> DiskAddresses;
        /// <summary>
        /// A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string? ExtId;

        [OutputConstructor]
        private VirtualMachineV2Disk(
            ImmutableArray<Outputs.VirtualMachineV2DiskBackingInfo> backingInfos,

            ImmutableArray<Outputs.VirtualMachineV2DiskDiskAddress> diskAddresses,

            string? extId)
        {
            BackingInfos = backingInfos;
            DiskAddresses = diskAddresses;
            ExtId = extId;
        }
    }
}
