// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetFloatingIpsV2FloatingIpResult
    {
        /// <summary>
        /// Association status of floating IP.
        /// </summary>
        public readonly string AssociationStatus;
        /// <summary>
        /// Association of the Floating IP with either NIC or Private IP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpAssociationResult> Associations;
        /// <summary>
        /// Description for the Floating IP.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Floating IP UUID
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// External subnet reference for the Floating IP to be allocated in on-prem only.
        /// </summary>
        public readonly string ExternalSubnetReference;
        /// <summary>
        /// Networking common base object
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpExternalSubnetResult> ExternalSubnets;
        /// <summary>
        /// Floating IP value in string
        /// </summary>
        public readonly string FloatingIpValue;
        /// <summary>
        /// Floating IP address.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpFloatingIpResult> FloatingIps;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpLinkResult> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpMetadataResult> Metadatas;
        /// <summary>
        /// Name of the floating IP.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Private IP value in string
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// VM NIC reference.
        /// </summary>
        public readonly string VmNicReference;
        /// <summary>
        /// Virtual NIC for projections
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpVmNicResult> VmNics;
        /// <summary>
        /// VPC reference UUID
        /// </summary>
        public readonly string VpcReference;
        /// <summary>
        /// Networking common base object
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpVpcResult> Vpcs;

        [OutputConstructor]
        private GetFloatingIpsV2FloatingIpResult(
            string associationStatus,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpAssociationResult> associations,

            string description,

            string extId,

            string externalSubnetReference,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpExternalSubnetResult> externalSubnets,

            string floatingIpValue,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpFloatingIpResult> floatingIps,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpLinkResult> links,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpMetadataResult> metadatas,

            string name,

            string privateIp,

            string tenantId,

            string vmNicReference,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpVmNicResult> vmNics,

            string vpcReference,

            ImmutableArray<Outputs.GetFloatingIpsV2FloatingIpVpcResult> vpcs)
        {
            AssociationStatus = associationStatus;
            Associations = associations;
            Description = description;
            ExtId = extId;
            ExternalSubnetReference = externalSubnetReference;
            ExternalSubnets = externalSubnets;
            FloatingIpValue = floatingIpValue;
            FloatingIps = floatingIps;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            PrivateIp = privateIp;
            TenantId = tenantId;
            VmNicReference = vmNicReference;
            VmNics = vmNics;
            VpcReference = vpcReference;
            Vpcs = vpcs;
        }
    }
}
