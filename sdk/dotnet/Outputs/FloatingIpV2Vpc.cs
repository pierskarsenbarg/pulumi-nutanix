// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class FloatingIpV2Vpc
    {
        public readonly ImmutableArray<Outputs.FloatingIpV2VpcCommonDhcpOption> CommonDhcpOptions;
        /// <summary>
        /// Description for the Floating IP.
        /// </summary>
        public readonly string? Description;
        public readonly string? ExtId;
        public readonly string? ExternalRoutingDomainReference;
        public readonly ImmutableArray<Outputs.FloatingIpV2VpcExternalSubnet> ExternalSubnets;
        public readonly ImmutableArray<Outputs.FloatingIpV2VpcExternallyRoutablePrefix> ExternallyRoutablePrefixes;
        /// <summary>
        /// A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.FloatingIpV2VpcLink> Links;
        /// <summary>
        /// Metadata associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.FloatingIpV2VpcMetadata> Metadatas;
        /// <summary>
        /// Name of the floating IP.
        /// </summary>
        public readonly string? Name;
        public readonly ImmutableArray<Outputs.FloatingIpV2VpcSnatIp> SnatIps;
        /// <summary>
        /// A globally unique identifier that represents the tenant that owns this entity.
        /// </summary>
        public readonly string? TenantId;
        public readonly string? VpcType;

        [OutputConstructor]
        private FloatingIpV2Vpc(
            ImmutableArray<Outputs.FloatingIpV2VpcCommonDhcpOption> commonDhcpOptions,

            string? description,

            string? extId,

            string? externalRoutingDomainReference,

            ImmutableArray<Outputs.FloatingIpV2VpcExternalSubnet> externalSubnets,

            ImmutableArray<Outputs.FloatingIpV2VpcExternallyRoutablePrefix> externallyRoutablePrefixes,

            ImmutableArray<Outputs.FloatingIpV2VpcLink> links,

            ImmutableArray<Outputs.FloatingIpV2VpcMetadata> metadatas,

            string? name,

            ImmutableArray<Outputs.FloatingIpV2VpcSnatIp> snatIps,

            string? tenantId,

            string? vpcType)
        {
            CommonDhcpOptions = commonDhcpOptions;
            Description = description;
            ExtId = extId;
            ExternalRoutingDomainReference = externalRoutingDomainReference;
            ExternalSubnets = externalSubnets;
            ExternallyRoutablePrefixes = externallyRoutablePrefixes;
            Links = links;
            Metadatas = metadatas;
            Name = name;
            SnatIps = snatIps;
            TenantId = tenantId;
            VpcType = vpcType;
        }
    }
}
