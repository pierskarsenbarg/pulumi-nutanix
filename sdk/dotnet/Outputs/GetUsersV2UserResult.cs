// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix.Outputs
{

    [OutputType]
    public sealed class GetUsersV2UserResult
    {
        /// <summary>
        /// -  Any additional attribute for the User.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersV2UserAdditionalAttributeResult> AdditionalAttributes;
        /// <summary>
        /// - Bucket Access Keys for the User.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersV2UserBucketsAccessKeyResult> BucketsAccessKeys;
        /// <summary>
        /// - User or Service who created the User.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// - Creation time for the Bucket Access Key.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// - Display name for the User.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// - Email Id for the User.
        /// </summary>
        public readonly string EmailId;
        /// <summary>
        /// - A globally unique identifier of an instance that is suitable for external consumption.
        /// </summary>
        public readonly string ExtId;
        /// <summary>
        /// - First name for the User.
        /// </summary>
        public readonly string FirstName;
        /// <summary>
        /// - Identifier of the IDP for the User.
        /// </summary>
        public readonly string IdpId;
        /// <summary>
        /// - Flag to force the User to reset password.
        /// </summary>
        public readonly bool IsForceResetPassword;
        /// <summary>
        /// - Last successful logged in time for the User.
        /// </summary>
        public readonly string LastLoginTime;
        /// <summary>
        /// - Last name for the User.
        /// </summary>
        public readonly string LastName;
        /// <summary>
        /// - Last updated by this User ID.
        /// </summary>
        public readonly string LastUpdatedBy;
        /// <summary>
        /// - Last updated time of the User.
        /// </summary>
        public readonly string LastUpdatedTime;
        /// <summary>
        /// - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersV2UserLinkResult> Links;
        /// <summary>
        /// - Default locale for the User.
        /// </summary>
        public readonly string Locale;
        /// <summary>
        /// - Middle name for the User.
        /// </summary>
        public readonly string MiddleInitial;
        /// <summary>
        /// - Default Region for the User.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// - Status of the User. `ACTIVE`: Denotes that the local User is active. `INACTIVE`: Denotes that the local User is inactive and needs to be reactivated.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// - A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server).
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// - Enum: `$UNKNOWN` `$REDACTED` `LOCAL` `SAML` `LDAP` `EXTERNAL`
        /// Type of the User.
        /// </summary>
        public readonly string UserType;
        /// <summary>
        /// - Identifier for the User in the form an email address.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetUsersV2UserResult(
            ImmutableArray<Outputs.GetUsersV2UserAdditionalAttributeResult> additionalAttributes,

            ImmutableArray<Outputs.GetUsersV2UserBucketsAccessKeyResult> bucketsAccessKeys,

            string createdBy,

            string createdTime,

            string displayName,

            string emailId,

            string extId,

            string firstName,

            string idpId,

            bool isForceResetPassword,

            string lastLoginTime,

            string lastName,

            string lastUpdatedBy,

            string lastUpdatedTime,

            ImmutableArray<Outputs.GetUsersV2UserLinkResult> links,

            string locale,

            string middleInitial,

            string region,

            string status,

            string tenantId,

            string userType,

            string username)
        {
            AdditionalAttributes = additionalAttributes;
            BucketsAccessKeys = bucketsAccessKeys;
            CreatedBy = createdBy;
            CreatedTime = createdTime;
            DisplayName = displayName;
            EmailId = emailId;
            ExtId = extId;
            FirstName = firstName;
            IdpId = idpId;
            IsForceResetPassword = isForceResetPassword;
            LastLoginTime = lastLoginTime;
            LastName = lastName;
            LastUpdatedBy = lastUpdatedBy;
            LastUpdatedTime = lastUpdatedTime;
            Links = links;
            Locale = locale;
            MiddleInitial = middleInitial;
            Region = region;
            Status = status;
            TenantId = tenantId;
            UserType = userType;
            Username = username;
        }
    }
}
