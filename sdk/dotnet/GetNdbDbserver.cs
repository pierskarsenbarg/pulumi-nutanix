// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Nutanix
{
    public static class GetNdbDbserver
    {
        /// <summary>
        /// Describes Database Server VM in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dbserver = Nutanix.GetNdbDbserver.Invoke(new()
        ///     {
        ///         Ip = "{{ dbserver_vm_ip }}",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNdbDbserverResult> InvokeAsync(GetNdbDbserverArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNdbDbserverResult>("nutanix:index/getNdbDbserver:getNdbDbserver", args ?? new GetNdbDbserverArgs(), options.WithDefaults());

        /// <summary>
        /// Describes Database Server VM in Nutanix Database Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nutanix = Pulumi.Nutanix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dbserver = Nutanix.GetNdbDbserver.Invoke(new()
        ///     {
        ///         Ip = "{{ dbserver_vm_ip }}",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNdbDbserverResult> Invoke(GetNdbDbserverInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNdbDbserverResult>("nutanix:index/getNdbDbserver:getNdbDbserver", args ?? new GetNdbDbserverInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNdbDbserverArgs : global::Pulumi.InvokeArgs
    {
        [Input("dbserverClusterId")]
        public string? DbserverClusterId { get; set; }

        /// <summary>
        /// id of database server vm
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// ip of database server vm
        /// </summary>
        [Input("ip")]
        public string? Ip { get; set; }

        /// <summary>
        /// name of database server vm
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("nxClusterId")]
        public string? NxClusterId { get; set; }

        [Input("tags")]
        private List<Inputs.GetNdbDbserverTagArgs>? _tags;

        /// <summary>
        /// tags for db server vm
        /// </summary>
        public List<Inputs.GetNdbDbserverTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetNdbDbserverTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// vm cluster id of database server
        /// </summary>
        [Input("vmClusterId")]
        public string? VmClusterId { get; set; }

        /// <summary>
        /// vm cluster name of database server
        /// </summary>
        [Input("vmClusterName")]
        public string? VmClusterName { get; set; }

        public GetNdbDbserverArgs()
        {
        }
        public static new GetNdbDbserverArgs Empty => new GetNdbDbserverArgs();
    }

    public sealed class GetNdbDbserverInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("dbserverClusterId")]
        public Input<string>? DbserverClusterId { get; set; }

        /// <summary>
        /// id of database server vm
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// ip of database server vm
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// name of database server vm
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nxClusterId")]
        public Input<string>? NxClusterId { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetNdbDbserverTagInputArgs>? _tags;

        /// <summary>
        /// tags for db server vm
        /// </summary>
        public InputList<Inputs.GetNdbDbserverTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetNdbDbserverTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// vm cluster id of database server
        /// </summary>
        [Input("vmClusterId")]
        public Input<string>? VmClusterId { get; set; }

        /// <summary>
        /// vm cluster name of database server
        /// </summary>
        [Input("vmClusterName")]
        public Input<string>? VmClusterName { get; set; }

        public GetNdbDbserverInvokeArgs()
        {
        }
        public static new GetNdbDbserverInvokeArgs Empty => new GetNdbDbserverInvokeArgs();
    }


    [OutputType]
    public sealed class GetNdbDbserverResult
    {
        /// <summary>
        /// access key id of dbserver vm
        /// </summary>
        public readonly string AccessKeyId;
        /// <summary>
        /// access level
        /// </summary>
        public readonly string AccessLevel;
        /// <summary>
        /// associated time machines ids
        /// </summary>
        public readonly ImmutableArray<string> AssociatedTimeMachineIds;
        /// <summary>
        /// client id
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// clustered or not
        /// </summary>
        public readonly bool Clustered;
        /// <summary>
        /// database type
        /// </summary>
        public readonly string DatabaseType;
        /// <summary>
        /// date created of db server vm
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// date modified of db server vm
        /// </summary>
        public readonly string DateModified;
        public readonly string DbserverClusterId;
        /// <summary>
        /// dbserver invalid ea state
        /// </summary>
        public readonly bool DbserverInvalidEaState;
        /// <summary>
        /// description of db server vm
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// era drive id
        /// </summary>
        public readonly string EraDriveId;
        /// <summary>
        /// era version
        /// </summary>
        public readonly string EraVersion;
        public readonly string Fqdns;
        public readonly string Id;
        public readonly string? Ip;
        /// <summary>
        /// IP addresses of the dbserver vm
        /// </summary>
        public readonly ImmutableArray<string> IpAddresses;
        /// <summary>
        /// is server down or not
        /// </summary>
        public readonly bool IsServerDriven;
        /// <summary>
        /// Mac addresses of dbserver vm
        /// </summary>
        public readonly ImmutableArray<string> MacAddresses;
        public readonly string Name;
        public readonly string? NxClusterId;
        /// <summary>
        /// properties of db server vm
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDbserverPropertyResult> Properties;
        /// <summary>
        /// protection domain id
        /// </summary>
        public readonly string ProtectionDomainId;
        /// <summary>
        /// query count
        /// </summary>
        public readonly int QueryCount;
        /// <summary>
        /// Status of Dbserver . Active or not.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// tags for db server vm
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDbserverTagResult> Tags;
        /// <summary>
        /// Type of entity. i.e. Dbserver
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// valid diagnostic bundle state
        /// </summary>
        public readonly bool ValidDiagnosticBundleState;
        public readonly string? VmClusterId;
        public readonly string VmClusterName;
        /// <summary>
        /// clusetr uuid for dbserver vm
        /// </summary>
        public readonly string VmClusterUuid;
        /// <summary>
        /// info of dbserver vm
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNdbDbserverVmInfoResult> VmInfos;
        /// <summary>
        /// timezone of dbserver vm
        /// </summary>
        public readonly string VmTimezone;
        /// <summary>
        /// window db server
        /// </summary>
        public readonly bool WindowsDbServer;
        /// <summary>
        /// working directory of db server vm
        /// </summary>
        public readonly string WorkingDirectory;

        [OutputConstructor]
        private GetNdbDbserverResult(
            string accessKeyId,

            string accessLevel,

            ImmutableArray<string> associatedTimeMachineIds,

            string clientId,

            bool clustered,

            string databaseType,

            string dateCreated,

            string dateModified,

            string dbserverClusterId,

            bool dbserverInvalidEaState,

            string description,

            string eraDriveId,

            string eraVersion,

            string fqdns,

            string id,

            string? ip,

            ImmutableArray<string> ipAddresses,

            bool isServerDriven,

            ImmutableArray<string> macAddresses,

            string name,

            string? nxClusterId,

            ImmutableArray<Outputs.GetNdbDbserverPropertyResult> properties,

            string protectionDomainId,

            int queryCount,

            string status,

            ImmutableArray<Outputs.GetNdbDbserverTagResult> tags,

            string type,

            bool validDiagnosticBundleState,

            string? vmClusterId,

            string vmClusterName,

            string vmClusterUuid,

            ImmutableArray<Outputs.GetNdbDbserverVmInfoResult> vmInfos,

            string vmTimezone,

            bool windowsDbServer,

            string workingDirectory)
        {
            AccessKeyId = accessKeyId;
            AccessLevel = accessLevel;
            AssociatedTimeMachineIds = associatedTimeMachineIds;
            ClientId = clientId;
            Clustered = clustered;
            DatabaseType = databaseType;
            DateCreated = dateCreated;
            DateModified = dateModified;
            DbserverClusterId = dbserverClusterId;
            DbserverInvalidEaState = dbserverInvalidEaState;
            Description = description;
            EraDriveId = eraDriveId;
            EraVersion = eraVersion;
            Fqdns = fqdns;
            Id = id;
            Ip = ip;
            IpAddresses = ipAddresses;
            IsServerDriven = isServerDriven;
            MacAddresses = macAddresses;
            Name = name;
            NxClusterId = nxClusterId;
            Properties = properties;
            ProtectionDomainId = protectionDomainId;
            QueryCount = queryCount;
            Status = status;
            Tags = tags;
            Type = type;
            ValidDiagnosticBundleState = validDiagnosticBundleState;
            VmClusterId = vmClusterId;
            VmClusterName = vmClusterName;
            VmClusterUuid = vmClusterUuid;
            VmInfos = vmInfos;
            VmTimezone = vmTimezone;
            WindowsDbServer = windowsDbServer;
            WorkingDirectory = workingDirectory;
        }
    }
}
